

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun Aug 28 23:05:01 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    81                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    82  0000                     
    83 ;; Function _TMR2_DefaultInterruptHandler is unused but had its address taken
    84  0000                     
    85                           	psect	idataCOMRAM
    86  00221E                     __pidataCOMRAM:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _Transmit_stall
    90  00221E  01                 	db	1
    91                           
    92                           	psect	mediumconst
    93  007BD2                     __pmediumconst:
    94                           	opt stack 0
    95  007BD2  00                 	db	0
    96  007BD3                     _OledFont:
    97                           	opt stack 0
    98  007BD3  00                 	db	0
    99  007BD4  00                 	db	0
   100  007BD5  00                 	db	0
   101  007BD6  00                 	db	0
   102  007BD7  00                 	db	0
   103  007BD8  00                 	db	0
   104  007BD9  00                 	db	0
   105  007BDA  00                 	db	0
   106  007BDB  00                 	db	0
   107  007BDC  00                 	db	0
   108  007BDD  5F                 	db	95
   109  007BDE  00                 	db	0
   110  007BDF  00                 	db	0
   111  007BE0  00                 	db	0
   112  007BE1  00                 	db	0
   113  007BE2  00                 	db	0
   114  007BE3  00                 	db	0
   115  007BE4  00                 	db	0
   116  007BE5  07                 	db	7
   117  007BE6  00                 	db	0
   118  007BE7  07                 	db	7
   119  007BE8  00                 	db	0
   120  007BE9  00                 	db	0
   121  007BEA  00                 	db	0
   122  007BEB  00                 	db	0
   123  007BEC  14                 	db	20
   124  007BED  7F                 	db	127
   125  007BEE  14                 	db	20
   126  007BEF  7F                 	db	127
   127  007BF0  14                 	db	20
   128  007BF1  00                 	db	0
   129  007BF2  00                 	db	0
   130  007BF3  00                 	db	0
   131  007BF4  24                 	db	36
   132  007BF5  2A                 	db	42
   133  007BF6  7F                 	db	127
   134  007BF7  2A                 	db	42
   135  007BF8  12                 	db	18
   136  007BF9  00                 	db	0
   137  007BFA  00                 	db	0
   138  007BFB  00                 	db	0
   139  007BFC  23                 	db	35
   140  007BFD  13                 	db	19
   141  007BFE  08                 	db	8
   142  007BFF  64                 	db	100
   143  007C00  62                 	db	98
   144  007C01  00                 	db	0
   145  007C02  00                 	db	0
   146  007C03  00                 	db	0
   147  007C04  36                 	db	54
   148  007C05  49                 	db	73
   149  007C06  55                 	db	85
   150  007C07  22                 	db	34
   151  007C08  50                 	db	80
   152  007C09  00                 	db	0
   153  007C0A  00                 	db	0
   154  007C0B  00                 	db	0
   155  007C0C  00                 	db	0
   156  007C0D  05                 	db	5
   157  007C0E  03                 	db	3
   158  007C0F  00                 	db	0
   159  007C10  00                 	db	0
   160  007C11  00                 	db	0
   161  007C12  00                 	db	0
   162  007C13  00                 	db	0
   163  007C14  1C                 	db	28
   164  007C15  22                 	db	34
   165  007C16  41                 	db	65
   166  007C17  00                 	db	0
   167  007C18  00                 	db	0
   168  007C19  00                 	db	0
   169  007C1A  00                 	db	0
   170  007C1B  00                 	db	0
   171  007C1C  41                 	db	65
   172  007C1D  22                 	db	34
   173  007C1E  1C                 	db	28
   174  007C1F  00                 	db	0
   175  007C20  00                 	db	0
   176  007C21  00                 	db	0
   177  007C22  00                 	db	0
   178  007C23  00                 	db	0
   179  007C24  08                 	db	8
   180  007C25  2A                 	db	42
   181  007C26  1C                 	db	28
   182  007C27  2A                 	db	42
   183  007C28  08                 	db	8
   184  007C29  00                 	db	0
   185  007C2A  00                 	db	0
   186  007C2B  00                 	db	0
   187  007C2C  08                 	db	8
   188  007C2D  08                 	db	8
   189  007C2E  3E                 	db	62
   190  007C2F  08                 	db	8
   191  007C30  08                 	db	8
   192  007C31  00                 	db	0
   193  007C32  00                 	db	0
   194  007C33  00                 	db	0
   195  007C34  A0                 	db	160
   196  007C35  60                 	db	96
   197  007C36  00                 	db	0
   198  007C37  00                 	db	0
   199  007C38  00                 	db	0
   200  007C39  00                 	db	0
   201  007C3A  00                 	db	0
   202  007C3B  00                 	db	0
   203  007C3C  08                 	db	8
   204  007C3D  08                 	db	8
   205  007C3E  08                 	db	8
   206  007C3F  08                 	db	8
   207  007C40  08                 	db	8
   208  007C41  00                 	db	0
   209  007C42  00                 	db	0
   210  007C43  00                 	db	0
   211  007C44  60                 	db	96
   212  007C45  60                 	db	96
   213  007C46  00                 	db	0
   214  007C47  00                 	db	0
   215  007C48  00                 	db	0
   216  007C49  00                 	db	0
   217  007C4A  00                 	db	0
   218  007C4B  00                 	db	0
   219  007C4C  20                 	db	32
   220  007C4D  10                 	db	16
   221  007C4E  08                 	db	8
   222  007C4F  04                 	db	4
   223  007C50  02                 	db	2
   224  007C51  00                 	db	0
   225  007C52  00                 	db	0
   226  007C53  00                 	db	0
   227  007C54  3E                 	db	62
   228  007C55  51                 	db	81
   229  007C56  49                 	db	73
   230  007C57  45                 	db	69
   231  007C58  3E                 	db	62
   232  007C59  00                 	db	0
   233  007C5A  00                 	db	0
   234  007C5B  00                 	db	0
   235  007C5C  00                 	db	0
   236  007C5D  42                 	db	66
   237  007C5E  7F                 	db	127
   238  007C5F  40                 	db	64
   239  007C60  00                 	db	0
   240  007C61  00                 	db	0
   241  007C62  00                 	db	0
   242  007C63  00                 	db	0
   243  007C64  62                 	db	98
   244  007C65  51                 	db	81
   245  007C66  49                 	db	73
   246  007C67  49                 	db	73
   247  007C68  46                 	db	70
   248  007C69  00                 	db	0
   249  007C6A  00                 	db	0
   250  007C6B  00                 	db	0
   251  007C6C  22                 	db	34
   252  007C6D  41                 	db	65
   253  007C6E  49                 	db	73
   254  007C6F  49                 	db	73
   255  007C70  36                 	db	54
   256  007C71  00                 	db	0
   257  007C72  00                 	db	0
   258  007C73  00                 	db	0
   259  007C74  18                 	db	24
   260  007C75  14                 	db	20
   261  007C76  12                 	db	18
   262  007C77  7F                 	db	127
   263  007C78  10                 	db	16
   264  007C79  00                 	db	0
   265  007C7A  00                 	db	0
   266  007C7B  00                 	db	0
   267  007C7C  27                 	db	39
   268  007C7D  45                 	db	69
   269  007C7E  45                 	db	69
   270  007C7F  45                 	db	69
   271  007C80  39                 	db	57
   272  007C81  00                 	db	0
   273  007C82  00                 	db	0
   274  007C83  00                 	db	0
   275  007C84  3C                 	db	60
   276  007C85  4A                 	db	74
   277  007C86  49                 	db	73
   278  007C87  49                 	db	73
   279  007C88  30                 	db	48
   280  007C89  00                 	db	0
   281  007C8A  00                 	db	0
   282  007C8B  00                 	db	0
   283  007C8C  01                 	db	1
   284  007C8D  71                 	db	113
   285  007C8E  09                 	db	9
   286  007C8F  05                 	db	5
   287  007C90  03                 	db	3
   288  007C91  00                 	db	0
   289  007C92  00                 	db	0
   290  007C93  00                 	db	0
   291  007C94  36                 	db	54
   292  007C95  49                 	db	73
   293  007C96  49                 	db	73
   294  007C97  49                 	db	73
   295  007C98  36                 	db	54
   296  007C99  00                 	db	0
   297  007C9A  00                 	db	0
   298  007C9B  00                 	db	0
   299  007C9C  06                 	db	6
   300  007C9D  49                 	db	73
   301  007C9E  49                 	db	73
   302  007C9F  29                 	db	41
   303  007CA0  1E                 	db	30
   304  007CA1  00                 	db	0
   305  007CA2  00                 	db	0
   306  007CA3  00                 	db	0
   307  007CA4  00                 	db	0
   308  007CA5  36                 	db	54
   309  007CA6  36                 	db	54
   310  007CA7  00                 	db	0
   311  007CA8  00                 	db	0
   312  007CA9  00                 	db	0
   313  007CAA  00                 	db	0
   314  007CAB  00                 	db	0
   315  007CAC  00                 	db	0
   316  007CAD  AC                 	db	172
   317  007CAE  6C                 	db	108
   318  007CAF  00                 	db	0
   319  007CB0  00                 	db	0
   320  007CB1  00                 	db	0
   321  007CB2  00                 	db	0
   322  007CB3  00                 	db	0
   323  007CB4  08                 	db	8
   324  007CB5  14                 	db	20
   325  007CB6  22                 	db	34
   326  007CB7  41                 	db	65
   327  007CB8  00                 	db	0
   328  007CB9  00                 	db	0
   329  007CBA  00                 	db	0
   330  007CBB  00                 	db	0
   331  007CBC  14                 	db	20
   332  007CBD  14                 	db	20
   333  007CBE  14                 	db	20
   334  007CBF  14                 	db	20
   335  007CC0  14                 	db	20
   336  007CC1  00                 	db	0
   337  007CC2  00                 	db	0
   338  007CC3  00                 	db	0
   339  007CC4  41                 	db	65
   340  007CC5  22                 	db	34
   341  007CC6  14                 	db	20
   342  007CC7  08                 	db	8
   343  007CC8  00                 	db	0
   344  007CC9  00                 	db	0
   345  007CCA  00                 	db	0
   346  007CCB  00                 	db	0
   347  007CCC  02                 	db	2
   348  007CCD  01                 	db	1
   349  007CCE  51                 	db	81
   350  007CCF  09                 	db	9
   351  007CD0  06                 	db	6
   352  007CD1  00                 	db	0
   353  007CD2  00                 	db	0
   354  007CD3  00                 	db	0
   355  007CD4  32                 	db	50
   356  007CD5  49                 	db	73
   357  007CD6  79                 	db	121
   358  007CD7  41                 	db	65
   359  007CD8  3E                 	db	62
   360  007CD9  00                 	db	0
   361  007CDA  00                 	db	0
   362  007CDB  00                 	db	0
   363  007CDC  7E                 	db	126
   364  007CDD  09                 	db	9
   365  007CDE  09                 	db	9
   366  007CDF  09                 	db	9
   367  007CE0  7E                 	db	126
   368  007CE1  00                 	db	0
   369  007CE2  00                 	db	0
   370  007CE3  00                 	db	0
   371  007CE4  7F                 	db	127
   372  007CE5  49                 	db	73
   373  007CE6  49                 	db	73
   374  007CE7  49                 	db	73
   375  007CE8  36                 	db	54
   376  007CE9  00                 	db	0
   377  007CEA  00                 	db	0
   378  007CEB  00                 	db	0
   379  007CEC  3E                 	db	62
   380  007CED  41                 	db	65
   381  007CEE  41                 	db	65
   382  007CEF  41                 	db	65
   383  007CF0  22                 	db	34
   384  007CF1  00                 	db	0
   385  007CF2  00                 	db	0
   386  007CF3  00                 	db	0
   387  007CF4  7F                 	db	127
   388  007CF5  41                 	db	65
   389  007CF6  41                 	db	65
   390  007CF7  22                 	db	34
   391  007CF8  1C                 	db	28
   392  007CF9  00                 	db	0
   393  007CFA  00                 	db	0
   394  007CFB  00                 	db	0
   395  007CFC  7F                 	db	127
   396  007CFD  49                 	db	73
   397  007CFE  49                 	db	73
   398  007CFF  49                 	db	73
   399  007D00  41                 	db	65
   400  007D01  00                 	db	0
   401  007D02  00                 	db	0
   402  007D03  00                 	db	0
   403  007D04  7F                 	db	127
   404  007D05  09                 	db	9
   405  007D06  09                 	db	9
   406  007D07  09                 	db	9
   407  007D08  01                 	db	1
   408  007D09  00                 	db	0
   409  007D0A  00                 	db	0
   410  007D0B  00                 	db	0
   411  007D0C  3E                 	db	62
   412  007D0D  41                 	db	65
   413  007D0E  41                 	db	65
   414  007D0F  51                 	db	81
   415  007D10  72                 	db	114
   416  007D11  00                 	db	0
   417  007D12  00                 	db	0
   418  007D13  00                 	db	0
   419  007D14  7F                 	db	127
   420  007D15  08                 	db	8
   421  007D16  08                 	db	8
   422  007D17  08                 	db	8
   423  007D18  7F                 	db	127
   424  007D19  00                 	db	0
   425  007D1A  00                 	db	0
   426  007D1B  00                 	db	0
   427  007D1C  41                 	db	65
   428  007D1D  7F                 	db	127
   429  007D1E  41                 	db	65
   430  007D1F  00                 	db	0
   431  007D20  00                 	db	0
   432  007D21  00                 	db	0
   433  007D22  00                 	db	0
   434  007D23  00                 	db	0
   435  007D24  20                 	db	32
   436  007D25  40                 	db	64
   437  007D26  41                 	db	65
   438  007D27  3F                 	db	63
   439  007D28  01                 	db	1
   440  007D29  00                 	db	0
   441  007D2A  00                 	db	0
   442  007D2B  00                 	db	0
   443  007D2C  7F                 	db	127
   444  007D2D  08                 	db	8
   445  007D2E  14                 	db	20
   446  007D2F  22                 	db	34
   447  007D30  41                 	db	65
   448  007D31  00                 	db	0
   449  007D32  00                 	db	0
   450  007D33  00                 	db	0
   451  007D34  7F                 	db	127
   452  007D35  40                 	db	64
   453  007D36  40                 	db	64
   454  007D37  40                 	db	64
   455  007D38  40                 	db	64
   456  007D39  00                 	db	0
   457  007D3A  00                 	db	0
   458  007D3B  00                 	db	0
   459  007D3C  7F                 	db	127
   460  007D3D  02                 	db	2
   461  007D3E  0C                 	db	12
   462  007D3F  02                 	db	2
   463  007D40  7F                 	db	127
   464  007D41  00                 	db	0
   465  007D42  00                 	db	0
   466  007D43  00                 	db	0
   467  007D44  7F                 	db	127
   468  007D45  04                 	db	4
   469  007D46  08                 	db	8
   470  007D47  10                 	db	16
   471  007D48  7F                 	db	127
   472  007D49  00                 	db	0
   473  007D4A  00                 	db	0
   474  007D4B  00                 	db	0
   475  007D4C  3E                 	db	62
   476  007D4D  41                 	db	65
   477  007D4E  41                 	db	65
   478  007D4F  41                 	db	65
   479  007D50  3E                 	db	62
   480  007D51  00                 	db	0
   481  007D52  00                 	db	0
   482  007D53  00                 	db	0
   483  007D54  7F                 	db	127
   484  007D55  09                 	db	9
   485  007D56  09                 	db	9
   486  007D57  09                 	db	9
   487  007D58  06                 	db	6
   488  007D59  00                 	db	0
   489  007D5A  00                 	db	0
   490  007D5B  00                 	db	0
   491  007D5C  3E                 	db	62
   492  007D5D  41                 	db	65
   493  007D5E  51                 	db	81
   494  007D5F  21                 	db	33
   495  007D60  5E                 	db	94
   496  007D61  00                 	db	0
   497  007D62  00                 	db	0
   498  007D63  00                 	db	0
   499  007D64  7F                 	db	127
   500  007D65  09                 	db	9
   501  007D66  19                 	db	25
   502  007D67  29                 	db	41
   503  007D68  46                 	db	70
   504  007D69  00                 	db	0
   505  007D6A  00                 	db	0
   506  007D6B  00                 	db	0
   507  007D6C  26                 	db	38
   508  007D6D  49                 	db	73
   509  007D6E  49                 	db	73
   510  007D6F  49                 	db	73
   511  007D70  32                 	db	50
   512  007D71  00                 	db	0
   513  007D72  00                 	db	0
   514  007D73  00                 	db	0
   515  007D74  01                 	db	1
   516  007D75  01                 	db	1
   517  007D76  7F                 	db	127
   518  007D77  01                 	db	1
   519  007D78  01                 	db	1
   520  007D79  00                 	db	0
   521  007D7A  00                 	db	0
   522  007D7B  00                 	db	0
   523  007D7C  3F                 	db	63
   524  007D7D  40                 	db	64
   525  007D7E  40                 	db	64
   526  007D7F  40                 	db	64
   527  007D80  3F                 	db	63
   528  007D81  00                 	db	0
   529  007D82  00                 	db	0
   530  007D83  00                 	db	0
   531  007D84  1F                 	db	31
   532  007D85  20                 	db	32
   533  007D86  40                 	db	64
   534  007D87  20                 	db	32
   535  007D88  1F                 	db	31
   536  007D89  00                 	db	0
   537  007D8A  00                 	db	0
   538  007D8B  00                 	db	0
   539  007D8C  3F                 	db	63
   540  007D8D  40                 	db	64
   541  007D8E  38                 	db	56
   542  007D8F  40                 	db	64
   543  007D90  3F                 	db	63
   544  007D91  00                 	db	0
   545  007D92  00                 	db	0
   546  007D93  00                 	db	0
   547  007D94  63                 	db	99
   548  007D95  14                 	db	20
   549  007D96  08                 	db	8
   550  007D97  14                 	db	20
   551  007D98  63                 	db	99
   552  007D99  00                 	db	0
   553  007D9A  00                 	db	0
   554  007D9B  00                 	db	0
   555  007D9C  03                 	db	3
   556  007D9D  04                 	db	4
   557  007D9E  78                 	db	120
   558  007D9F  04                 	db	4
   559  007DA0  03                 	db	3
   560  007DA1  00                 	db	0
   561  007DA2  00                 	db	0
   562  007DA3  00                 	db	0
   563  007DA4  61                 	db	97
   564  007DA5  51                 	db	81
   565  007DA6  49                 	db	73
   566  007DA7  45                 	db	69
   567  007DA8  43                 	db	67
   568  007DA9  00                 	db	0
   569  007DAA  00                 	db	0
   570  007DAB  00                 	db	0
   571  007DAC  7F                 	db	127
   572  007DAD  41                 	db	65
   573  007DAE  41                 	db	65
   574  007DAF  00                 	db	0
   575  007DB0  00                 	db	0
   576  007DB1  00                 	db	0
   577  007DB2  00                 	db	0
   578  007DB3  00                 	db	0
   579  007DB4  02                 	db	2
   580  007DB5  04                 	db	4
   581  007DB6  08                 	db	8
   582  007DB7  10                 	db	16
   583  007DB8  20                 	db	32
   584  007DB9  00                 	db	0
   585  007DBA  00                 	db	0
   586  007DBB  00                 	db	0
   587  007DBC  41                 	db	65
   588  007DBD  41                 	db	65
   589  007DBE  7F                 	db	127
   590  007DBF  00                 	db	0
   591  007DC0  00                 	db	0
   592  007DC1  00                 	db	0
   593  007DC2  00                 	db	0
   594  007DC3  00                 	db	0
   595  007DC4  04                 	db	4
   596  007DC5  02                 	db	2
   597  007DC6  01                 	db	1
   598  007DC7  02                 	db	2
   599  007DC8  04                 	db	4
   600  007DC9  00                 	db	0
   601  007DCA  00                 	db	0
   602  007DCB  00                 	db	0
   603  007DCC  80                 	db	128
   604  007DCD  80                 	db	128
   605  007DCE  80                 	db	128
   606  007DCF  80                 	db	128
   607  007DD0  80                 	db	128
   608  007DD1  00                 	db	0
   609  007DD2  00                 	db	0
   610  007DD3  00                 	db	0
   611  007DD4  01                 	db	1
   612  007DD5  02                 	db	2
   613  007DD6  04                 	db	4
   614  007DD7  00                 	db	0
   615  007DD8  00                 	db	0
   616  007DD9  00                 	db	0
   617  007DDA  00                 	db	0
   618  007DDB  00                 	db	0
   619  007DDC  20                 	db	32
   620  007DDD  54                 	db	84
   621  007DDE  54                 	db	84
   622  007DDF  54                 	db	84
   623  007DE0  78                 	db	120
   624  007DE1  00                 	db	0
   625  007DE2  00                 	db	0
   626  007DE3  00                 	db	0
   627  007DE4  7F                 	db	127
   628  007DE5  48                 	db	72
   629  007DE6  44                 	db	68
   630  007DE7  44                 	db	68
   631  007DE8  38                 	db	56
   632  007DE9  00                 	db	0
   633  007DEA  00                 	db	0
   634  007DEB  00                 	db	0
   635  007DEC  38                 	db	56
   636  007DED  44                 	db	68
   637  007DEE  44                 	db	68
   638  007DEF  28                 	db	40
   639  007DF0  00                 	db	0
   640  007DF1  00                 	db	0
   641  007DF2  00                 	db	0
   642  007DF3  00                 	db	0
   643  007DF4  38                 	db	56
   644  007DF5  44                 	db	68
   645  007DF6  44                 	db	68
   646  007DF7  48                 	db	72
   647  007DF8  7F                 	db	127
   648  007DF9  00                 	db	0
   649  007DFA  00                 	db	0
   650  007DFB  00                 	db	0
   651  007DFC  38                 	db	56
   652  007DFD  54                 	db	84
   653  007DFE  54                 	db	84
   654  007DFF  54                 	db	84
   655  007E00  18                 	db	24
   656  007E01  00                 	db	0
   657  007E02  00                 	db	0
   658  007E03  00                 	db	0
   659  007E04  08                 	db	8
   660  007E05  7E                 	db	126
   661  007E06  09                 	db	9
   662  007E07  02                 	db	2
   663  007E08  00                 	db	0
   664  007E09  00                 	db	0
   665  007E0A  00                 	db	0
   666  007E0B  00                 	db	0
   667  007E0C  18                 	db	24
   668  007E0D  A4                 	db	164
   669  007E0E  A4                 	db	164
   670  007E0F  A4                 	db	164
   671  007E10  7C                 	db	124
   672  007E11  00                 	db	0
   673  007E12  00                 	db	0
   674  007E13  00                 	db	0
   675  007E14  7F                 	db	127
   676  007E15  08                 	db	8
   677  007E16  04                 	db	4
   678  007E17  04                 	db	4
   679  007E18  78                 	db	120
   680  007E19  00                 	db	0
   681  007E1A  00                 	db	0
   682  007E1B  00                 	db	0
   683  007E1C  00                 	db	0
   684  007E1D  7D                 	db	125
   685  007E1E  00                 	db	0
   686  007E1F  00                 	db	0
   687  007E20  00                 	db	0
   688  007E21  00                 	db	0
   689  007E22  00                 	db	0
   690  007E23  00                 	db	0
   691  007E24  80                 	db	128
   692  007E25  84                 	db	132
   693  007E26  7D                 	db	125
   694  007E27  00                 	db	0
   695  007E28  00                 	db	0
   696  007E29  00                 	db	0
   697  007E2A  00                 	db	0
   698  007E2B  00                 	db	0
   699  007E2C  7F                 	db	127
   700  007E2D  10                 	db	16
   701  007E2E  28                 	db	40
   702  007E2F  44                 	db	68
   703  007E30  00                 	db	0
   704  007E31  00                 	db	0
   705  007E32  00                 	db	0
   706  007E33  00                 	db	0
   707  007E34  41                 	db	65
   708  007E35  7F                 	db	127
   709  007E36  40                 	db	64
   710  007E37  00                 	db	0
   711  007E38  00                 	db	0
   712  007E39  00                 	db	0
   713  007E3A  00                 	db	0
   714  007E3B  00                 	db	0
   715  007E3C  7C                 	db	124
   716  007E3D  04                 	db	4
   717  007E3E  18                 	db	24
   718  007E3F  04                 	db	4
   719  007E40  78                 	db	120
   720  007E41  00                 	db	0
   721  007E42  00                 	db	0
   722  007E43  00                 	db	0
   723  007E44  7C                 	db	124
   724  007E45  08                 	db	8
   725  007E46  04                 	db	4
   726  007E47  7C                 	db	124
   727  007E48  00                 	db	0
   728  007E49  00                 	db	0
   729  007E4A  00                 	db	0
   730  007E4B  00                 	db	0
   731  007E4C  38                 	db	56
   732  007E4D  44                 	db	68
   733  007E4E  44                 	db	68
   734  007E4F  38                 	db	56
   735  007E50  00                 	db	0
   736  007E51  00                 	db	0
   737  007E52  00                 	db	0
   738  007E53  00                 	db	0
   739  007E54  FC                 	db	252
   740  007E55  24                 	db	36
   741  007E56  24                 	db	36
   742  007E57  18                 	db	24
   743  007E58  00                 	db	0
   744  007E59  00                 	db	0
   745  007E5A  00                 	db	0
   746  007E5B  00                 	db	0
   747  007E5C  18                 	db	24
   748  007E5D  24                 	db	36
   749  007E5E  24                 	db	36
   750  007E5F  FC                 	db	252
   751  007E60  00                 	db	0
   752  007E61  00                 	db	0
   753  007E62  00                 	db	0
   754  007E63  00                 	db	0
   755  007E64  00                 	db	0
   756  007E65  7C                 	db	124
   757  007E66  08                 	db	8
   758  007E67  04                 	db	4
   759  007E68  00                 	db	0
   760  007E69  00                 	db	0
   761  007E6A  00                 	db	0
   762  007E6B  00                 	db	0
   763  007E6C  48                 	db	72
   764  007E6D  54                 	db	84
   765  007E6E  54                 	db	84
   766  007E6F  24                 	db	36
   767  007E70  00                 	db	0
   768  007E71  00                 	db	0
   769  007E72  00                 	db	0
   770  007E73  00                 	db	0
   771  007E74  04                 	db	4
   772  007E75  7F                 	db	127
   773  007E76  44                 	db	68
   774  007E77  00                 	db	0
   775  007E78  00                 	db	0
   776  007E79  00                 	db	0
   777  007E7A  00                 	db	0
   778  007E7B  00                 	db	0
   779  007E7C  3C                 	db	60
   780  007E7D  40                 	db	64
   781  007E7E  40                 	db	64
   782  007E7F  7C                 	db	124
   783  007E80  00                 	db	0
   784  007E81  00                 	db	0
   785  007E82  00                 	db	0
   786  007E83  00                 	db	0
   787  007E84  1C                 	db	28
   788  007E85  20                 	db	32
   789  007E86  40                 	db	64
   790  007E87  20                 	db	32
   791  007E88  1C                 	db	28
   792  007E89  00                 	db	0
   793  007E8A  00                 	db	0
   794  007E8B  00                 	db	0
   795  007E8C  3C                 	db	60
   796  007E8D  40                 	db	64
   797  007E8E  30                 	db	48
   798  007E8F  40                 	db	64
   799  007E90  3C                 	db	60
   800  007E91  00                 	db	0
   801  007E92  00                 	db	0
   802  007E93  00                 	db	0
   803  007E94  44                 	db	68
   804  007E95  28                 	db	40
   805  007E96  10                 	db	16
   806  007E97  28                 	db	40
   807  007E98  44                 	db	68
   808  007E99  00                 	db	0
   809  007E9A  00                 	db	0
   810  007E9B  00                 	db	0
   811  007E9C  1C                 	db	28
   812  007E9D  A0                 	db	160
   813  007E9E  A0                 	db	160
   814  007E9F  7C                 	db	124
   815  007EA0  00                 	db	0
   816  007EA1  00                 	db	0
   817  007EA2  00                 	db	0
   818  007EA3  00                 	db	0
   819  007EA4  44                 	db	68
   820  007EA5  64                 	db	100
   821  007EA6  54                 	db	84
   822  007EA7  4C                 	db	76
   823  007EA8  44                 	db	68
   824  007EA9  00                 	db	0
   825  007EAA  00                 	db	0
   826  007EAB  00                 	db	0
   827  007EAC  08                 	db	8
   828  007EAD  36                 	db	54
   829  007EAE  41                 	db	65
   830  007EAF  00                 	db	0
   831  007EB0  00                 	db	0
   832  007EB1  00                 	db	0
   833  007EB2  00                 	db	0
   834  007EB3  00                 	db	0
   835  007EB4  00                 	db	0
   836  007EB5  7F                 	db	127
   837  007EB6  00                 	db	0
   838  007EB7  00                 	db	0
   839  007EB8  00                 	db	0
   840  007EB9  00                 	db	0
   841  007EBA  00                 	db	0
   842  007EBB  00                 	db	0
   843  007EBC  41                 	db	65
   844  007EBD  36                 	db	54
   845  007EBE  08                 	db	8
   846  007EBF  00                 	db	0
   847  007EC0  00                 	db	0
   848  007EC1  00                 	db	0
   849  007EC2  00                 	db	0
   850  007EC3  00                 	db	0
   851  007EC4  02                 	db	2
   852  007EC5  01                 	db	1
   853  007EC6  01                 	db	1
   854  007EC7  02                 	db	2
   855  007EC8  01                 	db	1
   856  007EC9  00                 	db	0
   857  007ECA  00                 	db	0
   858  007ECB  00                 	db	0
   859  007ECC  02                 	db	2
   860  007ECD  05                 	db	5
   861  007ECE  05                 	db	5
   862  007ECF  02                 	db	2
   863  007ED0  00                 	db	0
   864  007ED1  00                 	db	0
   865  007ED2  00                 	db	0
   866  007ED3                     __end_of_OledFont:
   867                           	opt stack 0
   868  007ED3                     _picture:
   869                           	opt stack 0
   870  007ED3  00                 	db	0
   871  007ED4  00                 	db	0
   872  007ED5  00                 	db	0
   873  007ED6  00                 	db	0
   874  007ED7  00                 	db	0
   875  007ED8  00                 	db	0
   876  007ED9  00                 	db	0
   877  007EDA  00                 	db	0
   878  007EDB  00                 	db	0
   879  007EDC  00                 	db	0
   880  007EDD  00                 	db	0
   881  007EDE  00                 	db	0
   882  007EDF  00                 	db	0
   883  007EE0  00                 	db	0
   884  007EE1  00                 	db	0
   885  007EE2  00                 	db	0
   886  007EE3  3F                 	db	63
   887  007EE4  80                 	db	128
   888  007EE5  00                 	db	0
   889  007EE6  C0                 	db	192
   890  007EE7  00                 	db	0
   891  007EE8  7F                 	db	127
   892  007EE9  E0                 	db	224
   893  007EEA  00                 	db	0
   894  007EEB  30                 	db	48
   895  007EEC  00                 	db	0
   896  007EED  1F                 	db	31
   897  007EEE  FF                 	db	255
   898  007EEF  F8                 	db	248
   899  007EF0  03                 	db	3
   900  007EF1  FF                 	db	255
   901  007EF2  F8                 	db	248
   902  007EF3  24                 	db	36
   903  007EF4  80                 	db	128
   904  007EF5  00                 	db	0
   905  007EF6  A0                 	db	160
   906  007EF7  00                 	db	0
   907  007EF8  7F                 	db	127
   908  007EF9  E0                 	db	224
   909  007EFA  00                 	db	0
   910  007EFB  78                 	db	120
   911  007EFC  00                 	db	0
   912  007EFD  1F                 	db	31
   913  007EFE  FF                 	db	255
   914  007EFF  F8                 	db	248
   915  007F00  02                 	db	2
   916  007F01  00                 	db	0
   917  007F02  08                 	db	8
   918  007F03  15                 	db	21
   919  007F04  00                 	db	0
   920  007F05  02                 	db	2
   921  007F06  90                 	db	144
   922  007F07  00                 	db	0
   923  007F08  66                 	db	102
   924  007F09  60                 	db	96
   925  007F0A  60                 	db	96
   926  007F0B  FC                 	db	252
   927  007F0C  00                 	db	0
   928  007F0D  17                 	db	23
   929  007F0E  A3                 	db	163
   930  007F0F  18                 	db	24
   931  007F10  0E                 	db	14
   932  007F11  EE                 	db	238
   933  007F12  E8                 	db	232
   934  007F13  0E                 	db	14
   935  007F14  01                 	db	1
   936  007F15  01                 	db	1
   937  007F16  A0                 	db	160
   938  007F17  00                 	db	0
   939  007F18  66                 	db	102
   940  007F19  60                 	db	96
   941  007F1A  61                 	db	97
   942  007F1B  FE                 	db	254
   943  007F1C  00                 	db	0
   944  007F1D  13                 	db	19
   945  007F1E  2D                 	db	45
   946  007F1F  E8                 	db	232
   947  007F20  08                 	db	8
   948  007F21  EE                 	db	238
   949  007F22  E8                 	db	232
   950  007F23  04                 	db	4
   951  007F24  05                 	db	5
   952  007F25  00                 	db	0
   953  007F26  C0                 	db	192
   954  007F27  00                 	db	0
   955  007F28  66                 	db	102
   956  007F29  60                 	db	96
   957  007F2A  60                 	db	96
   958  007F2B  30                 	db	48
   959  007F2C  00                 	db	0
   960  007F2D  14                 	db	20
   961  007F2E  AD                 	db	173
   962  007F2F  E8                 	db	232
   963  007F30  08                 	db	8
   964  007F31  EE                 	db	238
   965  007F32  E8                 	db	232
   966  007F33  04                 	db	4
   967  007F34  15                 	db	21
   968  007F35  01                 	db	1
   969  007F36  A0                 	db	160
   970  007F37  00                 	db	0
   971  007F38  66                 	db	102
   972  007F39  60                 	db	96
   973  007F3A  60                 	db	96
   974  007F3B  30                 	db	48
   975  007F3C  00                 	db	0
   976  007F3D  17                 	db	23
   977  007F3E  AD                 	db	173
   978  007F3F  98                 	db	152
   979  007F40  08                 	db	8
   980  007F41  EE                 	db	238
   981  007F42  E8                 	db	232
   982  007F43  04                 	db	4
   983  007F44  55                 	db	85
   984  007F45  02                 	db	2
   985  007F46  90                 	db	144
   986  007F47  00                 	db	0
   987  007F48  66                 	db	102
   988  007F49  60                 	db	96
   989  007F4A  60                 	db	96
   990  007F4B  30                 	db	48
   991  007F4C  00                 	db	0
   992  007F4D  17                 	db	23
   993  007F4E  A3                 	db	163
   994  007F4F  E8                 	db	232
   995  007F50  08                 	db	8
   996  007F51  EE                 	db	238
   997  007F52  E8                 	db	232
   998  007F53  05                 	db	5
   999  007F54  55                 	db	85
  1000  007F55  00                 	db	0
  1001  007F56  A0                 	db	160
  1002  007F57  00                 	db	0
  1003  007F58  7F                 	db	127
  1004  007F59  E0                 	db	224
  1005  007F5A  60                 	db	96
  1006  007F5B  30                 	db	48
  1007  007F5C  00                 	db	0
  1008  007F5D  17                 	db	23
  1009  007F5E  AF                 	db	175
  1010  007F5F  E8                 	db	232
  1011  007F60  08                 	db	8
  1012  007F61  EE                 	db	238
  1013  007F62  E8                 	db	232
  1014  007F63  05                 	db	5
  1015  007F64  55                 	db	85
  1016  007F65  00                 	db	0
  1017  007F66  C0                 	db	192
  1018  007F67  00                 	db	0
  1019  007F68  7F                 	db	127
  1020  007F69  E0                 	db	224
  1021  007F6A  60                 	db	96
  1022  007F6B  30                 	db	48
  1023  007F6C  00                 	db	0
  1024  007F6D  17                 	db	23
  1025  007F6E  AF                 	db	175
  1026  007F6F  18                 	db	24
  1027  007F70  0E                 	db	14
  1028  007F71  EE                 	db	238
  1029  007F72  E8                 	db	232
  1030  007F73  00                 	db	0
  1031  007F74  00                 	db	0
  1032  007F75  00                 	db	0
  1033  007F76  00                 	db	0
  1034  007F77  00                 	db	0
  1035  007F78  00                 	db	0
  1036  007F79  03                 	db	3
  1037  007F7A  FC                 	db	252
  1038  007F7B  30                 	db	48
  1039  007F7C  00                 	db	0
  1040  007F7D  1F                 	db	31
  1041  007F7E  FF                 	db	255
  1042  007F7F  F8                 	db	248
  1043  007F80  02                 	db	2
  1044  007F81  00                 	db	0
  1045  007F82  08                 	db	8
  1046  007F83  00                 	db	0
  1047  007F84  00                 	db	0
  1048  007F85  00                 	db	0
  1049  007F86  00                 	db	0
  1050  007F87  00                 	db	0
  1051  007F88  00                 	db	0
  1052  007F89  01                 	db	1
  1053  007F8A  F8                 	db	248
  1054  007F8B  30                 	db	48
  1055  007F8C  00                 	db	0
  1056  007F8D  1F                 	db	31
  1057  007F8E  FF                 	db	255
  1058  007F8F  F8                 	db	248
  1059  007F90  03                 	db	3
  1060  007F91  FF                 	db	255
  1061  007F92  F8                 	db	248
  1062  007F93  00                 	db	0
  1063  007F94  00                 	db	0
  1064  007F95  00                 	db	0
  1065  007F96  00                 	db	0
  1066  007F97  00                 	db	0
  1067  007F98  00                 	db	0
  1068  007F99  00                 	db	0
  1069  007F9A  F0                 	db	240
  1070  007F9B  00                 	db	0
  1071  007F9C  00                 	db	0
  1072  007F9D  00                 	db	0
  1073  007F9E  00                 	db	0
  1074  007F9F  00                 	db	0
  1075  007FA0  00                 	db	0
  1076  007FA1  00                 	db	0
  1077  007FA2  00                 	db	0
  1078  007FA3  00                 	db	0
  1079  007FA4  00                 	db	0
  1080  007FA5  00                 	db	0
  1081  007FA6  00                 	db	0
  1082  007FA7  00                 	db	0
  1083  007FA8  00                 	db	0
  1084  007FA9  00                 	db	0
  1085  007FAA  60                 	db	96
  1086  007FAB  00                 	db	0
  1087  007FAC  00                 	db	0
  1088  007FAD  00                 	db	0
  1089  007FAE  00                 	db	0
  1090  007FAF  00                 	db	0
  1091  007FB0  00                 	db	0
  1092  007FB1  00                 	db	0
  1093  007FB2  00                 	db	0
  1094  007FB3  00                 	db	0
  1095  007FB4  00                 	db	0
  1096  007FB5  00                 	db	0
  1097  007FB6  00                 	db	0
  1098  007FB7  00                 	db	0
  1099  007FB8  00                 	db	0
  1100  007FB9  00                 	db	0
  1101  007FBA  00                 	db	0
  1102  007FBB  00                 	db	0
  1103  007FBC  00                 	db	0
  1104  007FBD  00                 	db	0
  1105  007FBE  00                 	db	0
  1106  007FBF  00                 	db	0
  1107  007FC0  00                 	db	0
  1108  007FC1  00                 	db	0
  1109  007FC2  00                 	db	0
  1110  007FC3  00                 	db	0
  1111  007FC4  00                 	db	0
  1112  007FC5  00                 	db	0
  1113  007FC6  00                 	db	0
  1114  007FC7  00                 	db	0
  1115  007FC8  00                 	db	0
  1116  007FC9  00                 	db	0
  1117  007FCA  00                 	db	0
  1118  007FCB  00                 	db	0
  1119  007FCC  00                 	db	0
  1120  007FCD  00                 	db	0
  1121  007FCE  00                 	db	0
  1122  007FCF  00                 	db	0
  1123  007FD0  00                 	db	0
  1124  007FD1  00                 	db	0
  1125  007FD2  00                 	db	0
  1126  007FD3  39                 	db	57
  1127  007FD4  80                 	db	128
  1128  007FD5  00                 	db	0
  1129  007FD6  00                 	db	0
  1130  007FD7  00                 	db	0
  1131  007FD8  00                 	db	0
  1132  007FD9  00                 	db	0
  1133  007FDA  00                 	db	0
  1134  007FDB  00                 	db	0
  1135  007FDC  00                 	db	0
  1136  007FDD  00                 	db	0
  1137  007FDE  00                 	db	0
  1138  007FDF  00                 	db	0
  1139  007FE0  00                 	db	0
  1140  007FE1  00                 	db	0
  1141  007FE2  00                 	db	0
  1142  007FE3                     __end_of_picture:
  1143                           	opt stack 0
  1144  007FE3                     STR_1:
  1145  007FE3  55                 	db	85	;'U'
  1146  007FE4  6E                 	db	110	;'n'
  1147  007FE5  69                 	db	105	;'i'
  1148  007FE6  76                 	db	118	;'v'
  1149  007FE7  65                 	db	101	;'e'
  1150  007FE8  72                 	db	114	;'r'
  1151  007FE9  73                 	db	115	;'s'
  1152  007FEA  69                 	db	105	;'i'
  1153  007FEB  74                 	db	116	;'t'
  1154  007FEC  79                 	db	121	;'y'
  1155  007FED  00                 	db	0
  1156  007FEE                     STR_4:
  1157  007FEE  5A                 	db	90	;'Z'
  1158  007FEF  49                 	db	73	;'I'
  1159  007FF0  50                 	db	80	;'P'
  1160  007FF1  53                 	db	83	;'S'
  1161  007FF2  2D                 	db	45
  1162  007FF3  45                 	db	69	;'E'
  1163  007FF4  56                 	db	86	;'V'
  1164  007FF5  00                 	db	0
  1165  007FF6                     STR_3:
  1166  007FF6  41                 	db	65	;'A'
  1167  007FF7  6B                 	db	107	;'k'
  1168  007FF8  72                 	db	114	;'r'
  1169  007FF9  6F                 	db	111	;'o'
  1170  007FFA  6E                 	db	110	;'n'
  1171  007FFB  00                 	db	0
  1172  007FFC                     STR_2:
  1173  007FFC  4F                 	db	79	;'O'
  1174  007FFD  46                 	db	70	;'F'
  1175  007FFE  00                 	db	0
  1176  0000                     
  1177                           ; #config settings
  1178  007FFF  00                 	db	0	; dummy byte at the end
  1179  0000                     
  1180                           	psect	nvCOMRAM
  1181  000042                     __pnvCOMRAM:
  1182                           	opt stack 0
  1183  000042                     _timer0ReloadVal16bit:
  1184                           	opt stack 0
  1185  000042                     	ds	2
  1186  0000                     _ANSELA	set	3896
  1187  0000                     _ANSELB	set	3897
  1188  0000                     _ANSELC	set	3898
  1189  0000                     _ANSELD	set	3899
  1190  0000                     _ANSELE	set	3900
  1191  0000                     _ADCON0	set	4034
  1192  0000                     _ADCON0bits	set	4034
  1193  0000                     _ADCON1	set	4033
  1194  0000                     _ADCON2	set	4032
  1195  0000                     _ADRESH	set	4036
  1196  0000                     _ADRESL	set	4035
  1197  0000                     _BAUD1CON	set	4024
  1198  0000                     _INTCON2bits	set	4081
  1199  0000                     _INTCONbits	set	4082
  1200  0000                     _IPR1bits	set	3999
  1201  0000                     _IPR2bits	set	4002
  1202  0000                     _LATA	set	3977
  1203  0000                     _LATB	set	3978
  1204  0000                     _LATC	set	3979
  1205  0000                     _LATCbits	set	3979
  1206  0000                     _LATD	set	3980
  1207  0000                     _LATE	set	3981
  1208  0000                     _OSCCON	set	4051
  1209  0000                     _OSCCON2	set	4050
  1210  0000                     _OSCTUNE	set	3995
  1211  0000                     _PIE1bits	set	3997
  1212  0000                     _PIE2bits	set	4000
  1213  0000                     _PIR1bits	set	3998
  1214  0000                     _PIR2bits	set	4001
  1215  0000                     _PORTAbits	set	3968
  1216  0000                     _PORTBbits	set	3969
  1217  0000                     _PORTDbits	set	3971
  1218  0000                     _PR2	set	4027
  1219  0000                     _RC1STA	set	4011
  1220  0000                     _RC1STAbits	set	4011
  1221  0000                     _RCONbits	set	4048
  1222  0000                     _RCREG1	set	4014
  1223  0000                     _SPBRG1	set	4015
  1224  0000                     _SPBRGH1	set	4016
  1225  0000                     _SSP1ADD	set	4040
  1226  0000                     _SSP1BUF	set	4041
  1227  0000                     _SSP1CON1	set	4038
  1228  0000                     _SSP1CON1bits	set	4038
  1229  0000                     _SSP1CON2bits	set	4037
  1230  0000                     _SSP1CON3	set	4043
  1231  0000                     _SSP1STAT	set	4039
  1232  0000                     _T0CON	set	4053
  1233  0000                     _T0CONbits	set	4053
  1234  0000                     _T2CON	set	4026
  1235  0000                     _T2CONbits	set	4026
  1236  0000                     _TMR0H	set	4055
  1237  0000                     _TMR0L	set	4054
  1238  0000                     _TMR2	set	4028
  1239  0000                     _TRISA	set	3986
  1240  0000                     _TRISAbits	set	3986
  1241  0000                     _TRISB	set	3987
  1242  0000                     _TRISC	set	3988
  1243  0000                     _TRISCbits	set	3988
  1244  0000                     _TRISD	set	3989
  1245  0000                     _TRISE	set	3990
  1246  0000                     _TX1STA	set	4012
  1247  0000                     _TXREG1	set	4013
  1248  0000                     _WPUB	set	3937
  1249  0000                     _LATA3	set	31819
  1250  0000                     _LATA6	set	31822
  1251  0000                     _LATA7	set	31823
  1252  0000                     _LATC1	set	31833
  1253  0000                     _LATE0	set	31848
  1254  0000                     _LATE1	set	31849
  1255  0000                     _LATE2	set	31850
  1256                           
  1257                           	psect	cinit
  1258  001B48                     __pcinit:
  1259                           	opt stack 0
  1260  001B48                     start_initialization:
  1261                           	opt stack 0
  1262  001B48                     __initialization:
  1263                           	opt stack 0
  1264                           
  1265                           ; Clear objects allocated to BANK5 (206 bytes)
  1266  001B48  EE05  F000         	lfsr	0,__pbssBANK5
  1267  001B4C  0ECE               	movlw	206
  1268  001B4E                     clear_0:
  1269  001B4E  6AEE               	clrf	postinc0,c
  1270  001B50  06E8               	decf	wreg,f,c
  1271  001B52  E1FD               	bnz	clear_0
  1272                           
  1273                           ; Clear objects allocated to BANK4 (206 bytes)
  1274  001B54  EE04  F000         	lfsr	0,__pbssBANK4
  1275  001B58  0ECE               	movlw	206
  1276  001B5A                     clear_1:
  1277  001B5A  6AEE               	clrf	postinc0,c
  1278  001B5C  06E8               	decf	wreg,f,c
  1279  001B5E  E1FD               	bnz	clear_1
  1280                           
  1281                           ; Clear objects allocated to BANK3 (200 bytes)
  1282  001B60  EE03  F000         	lfsr	0,__pbssBANK3
  1283  001B64  0EC8               	movlw	200
  1284  001B66                     clear_2:
  1285  001B66  6AEE               	clrf	postinc0,c
  1286  001B68  06E8               	decf	wreg,f,c
  1287  001B6A  E1FD               	bnz	clear_2
  1288                           
  1289                           ; Clear objects allocated to BANK2 (206 bytes)
  1290  001B6C  EE02  F000         	lfsr	0,__pbssBANK2
  1291  001B70  0ECE               	movlw	206
  1292  001B72                     clear_3:
  1293  001B72  6AEE               	clrf	postinc0,c
  1294  001B74  06E8               	decf	wreg,f,c
  1295  001B76  E1FD               	bnz	clear_3
  1296                           
  1297                           ; Clear objects allocated to BANK1 (57 bytes)
  1298  001B78  EE01  F000         	lfsr	0,__pbssBANK1
  1299  001B7C  0E39               	movlw	57
  1300  001B7E                     clear_4:
  1301  001B7E  6AEE               	clrf	postinc0,c
  1302  001B80  06E8               	decf	wreg,f,c
  1303  001B82  E1FD               	bnz	clear_4
  1304                           
  1305                           ; Clear objects allocated to BANK0 (144 bytes)
  1306  001B84  EE00  F060         	lfsr	0,__pbssBANK0
  1307  001B88  0E90               	movlw	144
  1308  001B8A                     clear_5:
  1309  001B8A  6AEE               	clrf	postinc0,c
  1310  001B8C  06E8               	decf	wreg,f,c
  1311  001B8E  E1FD               	bnz	clear_5
  1312                           
  1313                           ; Clear objects allocated to COMRAM (28 bytes)
  1314  001B90  EE00  F026         	lfsr	0,__pbssCOMRAM
  1315  001B94  0E1C               	movlw	28
  1316  001B96                     clear_6:
  1317  001B96  6AEE               	clrf	postinc0,c
  1318  001B98  06E8               	decf	wreg,f,c
  1319  001B9A  E1FD               	bnz	clear_6
  1320                           
  1321                           ; Initialize objects allocated to COMRAM (1 bytes)
  1322                           ; load TBLPTR registers with __pidataCOMRAM
  1323  001B9C  0E1E               	movlw	low __pidataCOMRAM
  1324  001B9E  6EF6               	movwf	tblptrl,c
  1325  001BA0  0E22               	movlw	high __pidataCOMRAM
  1326  001BA2  6EF7               	movwf	tblptrh,c
  1327  001BA4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1328  001BA6  6EF8               	movwf	tblptru,c
  1329  001BA8  0009               	tblrd		*+	;fetch initializer
  1330  001BAA  CFF5 F044          	movff	tablat,__pdataCOMRAM
  1331  001BAE                     end_of_initialization:
  1332                           	opt stack 0
  1333  001BAE                     __end_of__initialization:
  1334                           	opt stack 0
  1335  001BAE  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1336  001BB0  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1337  001BB2  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1338  001BB4  6EF8               	movwf	tblptru,c
  1339  001BB6  0100               	movlb	0
  1340  001BB8  EF55  F010         	goto	_main	;jump to C main() function
  1341                           tblptru	equ	0xFF8
  1342                           tblptrh	equ	0xFF7
  1343                           tblptrl	equ	0xFF6
  1344                           tablat	equ	0xFF5
  1345                           postinc0	equ	0xFEE
  1346                           wreg	equ	0xFE8
  1347                           
  1348                           	psect	bssCOMRAM
  1349  000026                     __pbssCOMRAM:
  1350                           	opt stack 0
  1351  000026                     I2C1_ISR@pi2c_buf_ptr:
  1352                           	opt stack 0
  1353  000026                     	ds	2
  1354  000028                     _group:
  1355                           	opt stack 0
  1356  000028                     	ds	2
  1357  00002A                     _i2c1_trb_count:
  1358                           	opt stack 0
  1359  00002A                     	ds	2
  1360  00002C                     _p_i2c1_current:
  1361                           	opt stack 0
  1362  00002C                     	ds	2
  1363  00002E                     _p_i2c1_trb_current:
  1364                           	opt stack 0
  1365  00002E                     	ds	2
  1366  000030                     _serial_available:
  1367                           	opt stack 0
  1368  000030                     	ds	2
  1369  000032                     _serial_read:
  1370                           	opt stack 0
  1371  000032                     	ds	2
  1372  000034                     _serial_write:
  1373                           	opt stack 0
  1374  000034                     	ds	2
  1375  000036                     I2C1_ISR@i2c_10bit_address_restart:
  1376                           	opt stack 0
  1377  000036                     	ds	1
  1378  000037                     _AKNAKsend:
  1379                           	opt stack 0
  1380  000037                     	ds	1
  1381  000038                     _calc_CS:
  1382                           	opt stack 0
  1383  000038                     	ds	1
  1384  000039                     _i2c1_state:
  1385                           	opt stack 0
  1386  000039                     	ds	1
  1387  00003A                     _maxDataAddress:
  1388                           	opt stack 0
  1389  00003A                     	ds	1
  1390  00003B                     _moduleAddress:
  1391                           	opt stack 0
  1392  00003B                     	ds	1
  1393  00003C                     _returnAddress:
  1394                           	opt stack 0
  1395  00003C                     	ds	1
  1396  00003D                     _rx_address:
  1397                           	opt stack 0
  1398  00003D                     	ds	1
  1399  00003E                     _rx_array_inx:
  1400                           	opt stack 0
  1401  00003E                     	ds	1
  1402  00003F                     _rx_len:
  1403                           	opt stack 0
  1404  00003F                     	ds	1
  1405  000040                     I2C1_ISR@i2c_address:
  1406                           	opt stack 0
  1407  000040                     	ds	2
  1408                           tblptru	equ	0xFF8
  1409                           tblptrh	equ	0xFF7
  1410                           tblptrl	equ	0xFF6
  1411                           tablat	equ	0xFF5
  1412                           postinc0	equ	0xFEE
  1413                           wreg	equ	0xFE8
  1414                           
  1415                           	psect	dataCOMRAM
  1416  000044                     __pdataCOMRAM:
  1417                           	opt stack 0
  1418  000044                     _Transmit_stall:
  1419                           	opt stack 0
  1420  000044                     	ds	1
  1421                           tblptru	equ	0xFF8
  1422                           tblptrh	equ	0xFF7
  1423                           tblptrl	equ	0xFF6
  1424                           tablat	equ	0xFF5
  1425                           postinc0	equ	0xFEE
  1426                           wreg	equ	0xFE8
  1427                           
  1428                           	psect	bssBANK0
  1429  000060                     __pbssBANK0:
  1430                           	opt stack 0
  1431  000060                     _displaybuffer:
  1432                           	opt stack 0
  1433  000060                     	ds	40
  1434  000088                     _LED_array:
  1435                           	opt stack 0
  1436  000088                     	ds	16
  1437  000098                     _LEDNUM_ENAB:
  1438                           	opt stack 0
  1439  000098                     	ds	12
  1440  0000A4                     _LEDState:
  1441                           	opt stack 0
  1442  0000A4                     	ds	12
  1443  0000B0                     _butnarray:
  1444                           	opt stack 0
  1445  0000B0                     	ds	8
  1446  0000B8                     _i2c1_object:
  1447                           	opt stack 0
  1448  0000B8                     	ds	7
  1449  0000BF                     I2C1_ISR@i2c_bytes_left:
  1450                           	opt stack 0
  1451  0000BF                     	ds	2
  1452  0000C1                     _TMR2_InterruptHandler:
  1453                           	opt stack 0
  1454  0000C1                     	ds	2
  1455  0000C3                     _addressErrorCounter:
  1456                           	opt stack 0
  1457  0000C3                     	ds	2
  1458  0000C5                     _alignErrorCounter:
  1459                           	opt stack 0
  1460  0000C5                     	ds	2
  1461  0000C7                     _brake:
  1462                           	opt stack 0
  1463  0000C7                     	ds	2
  1464  0000C9                     _crcErrorCounter:
  1465                           	opt stack 0
  1466  0000C9                     	ds	2
  1467  0000CB                     _dataAdressErrorCounter:
  1468                           	opt stack 0
  1469  0000CB                     	ds	2
  1470  0000CD                     _i:
  1471                           	opt stack 0
  1472  0000CD                     	ds	2
  1473  0000CF                     _k:
  1474                           	opt stack 0
  1475  0000CF                     	ds	2
  1476  0000D1                     _receiveArrayAddress:
  1477                           	opt stack 0
  1478  0000D1                     	ds	2
  1479  0000D3                     _sendStructAddress:
  1480                           	opt stack 0
  1481  0000D3                     	ds	2
  1482  0000D5                     _serial_peek:
  1483                           	opt stack 0
  1484  0000D5                     	ds	2
  1485  0000D7                     _throttle:
  1486                           	opt stack 0
  1487  0000D7                     	ds	2
  1488  0000D9                     _time:
  1489                           	opt stack 0
  1490  0000D9                     	ds	2
  1491  0000DB                     _timeOut:
  1492                           	opt stack 0
  1493  0000DB                     	ds	2
  1494  0000DD                     handleIndicators@oldIndicators:
  1495                           	opt stack 0
  1496  0000DD                     	ds	2
  1497  0000DF                     I2C1_MasterRead@trBlock:
  1498                           	opt stack 0
  1499  0000DF                     	ds	5
  1500  0000E4                     I2C1_MasterWrite@trBlock:
  1501                           	opt stack 0
  1502  0000E4                     	ds	5
  1503  0000E9                     _i2c1_tr_queue:
  1504                           	opt stack 0
  1505  0000E9                     	ds	5
  1506  0000EE                     _Buff:
  1507                           	opt stack 0
  1508  0000EE                     	ds	2
  1509                           tblptru	equ	0xFF8
  1510                           tblptrh	equ	0xFF7
  1511                           tblptrl	equ	0xFF6
  1512                           tablat	equ	0xFF5
  1513                           postinc0	equ	0xFEE
  1514                           wreg	equ	0xFE8
  1515                           
  1516                           	psect	bssBANK1
  1517  000100                     __pbssBANK1:
  1518                           	opt stack 0
  1519  000100                     _receiveArray:
  1520                           	opt stack 0
  1521  000100                     	ds	40
  1522  000128                     _crc_buffer:
  1523                           	opt stack 0
  1524  000128                     	ds	17
  1525                           tblptru	equ	0xFF8
  1526                           tblptrh	equ	0xFF7
  1527                           tblptrl	equ	0xFF6
  1528                           tablat	equ	0xFF5
  1529                           postinc0	equ	0xFEE
  1530                           wreg	equ	0xFE8
  1531                           
  1532                           	psect	bssBANK2
  1533  000200                     __pbssBANK2:
  1534                           	opt stack 0
  1535  000200                     _ring_buffer:
  1536                           	opt stack 0
  1537  000200                     	ds	206
  1538                           tblptru	equ	0xFF8
  1539                           tblptrh	equ	0xFF7
  1540                           tblptrl	equ	0xFF6
  1541                           tablat	equ	0xFF5
  1542                           postinc0	equ	0xFEE
  1543                           wreg	equ	0xFE8
  1544                           
  1545                           	psect	bssBANK3
  1546  000300                     __pbssBANK3:
  1547                           	opt stack 0
  1548  000300                     _rx_buffer:
  1549                           	opt stack 0
  1550  000300                     	ds	200
  1551                           tblptru	equ	0xFF8
  1552                           tblptrh	equ	0xFF7
  1553                           tblptrl	equ	0xFF6
  1554                           tablat	equ	0xFF5
  1555                           postinc0	equ	0xFEE
  1556                           wreg	equ	0xFE8
  1557                           
  1558                           	psect	bssBANK4
  1559  000400                     __pbssBANK4:
  1560                           	opt stack 0
  1561  000400                     _input_buffer:
  1562                           	opt stack 0
  1563  000400                     	ds	206
  1564                           tblptru	equ	0xFF8
  1565                           tblptrh	equ	0xFF7
  1566                           tblptrl	equ	0xFF6
  1567                           tablat	equ	0xFF5
  1568                           postinc0	equ	0xFEE
  1569                           wreg	equ	0xFE8
  1570                           
  1571                           	psect	bssBANK5
  1572  000500                     __pbssBANK5:
  1573                           	opt stack 0
  1574  000500                     _output_buffer:
  1575                           	opt stack 0
  1576  000500                     	ds	206
  1577                           tblptru	equ	0xFF8
  1578                           tblptrh	equ	0xFF7
  1579                           tblptrl	equ	0xFF6
  1580                           tablat	equ	0xFF5
  1581                           postinc0	equ	0xFEE
  1582                           wreg	equ	0xFE8
  1583                           
  1584                           	psect	cstackBANK1
  1585  000139                     __pcstackBANK1:
  1586                           	opt stack 0
  1587  000139                     receiveData@holder:
  1588                           	opt stack 0
  1589                           
  1590                           ; 3 bytes @ 0x0
  1591  000139                     	ds	3
  1592  00013C                     receiveData@holder_2492:
  1593                           	opt stack 0
  1594                           
  1595                           ; 3 bytes @ 0x3
  1596  00013C                     	ds	3
  1597  00013F                     receiveData@crcHolder:
  1598                           	opt stack 0
  1599                           
  1600                           ; 1 bytes @ 0x6
  1601  00013F                     	ds	1
  1602  000140                     receiveData@crcHolder_2493:
  1603                           	opt stack 0
  1604                           
  1605                           ; 1 bytes @ 0x7
  1606  000140                     	ds	1
  1607  000141                     receiveData@u:
  1608                           	opt stack 0
  1609                           
  1610                           ; 2 bytes @ 0x8
  1611  000141                     	ds	2
  1612  000143                     receiveData@r:
  1613                           	opt stack 0
  1614                           
  1615                           ; 2 bytes @ 0xA
  1616  000143                     	ds	2
  1617                           tblptru	equ	0xFF8
  1618                           tblptrh	equ	0xFF7
  1619                           tblptrl	equ	0xFF6
  1620                           tablat	equ	0xFF5
  1621                           postinc0	equ	0xFEE
  1622                           wreg	equ	0xFE8
  1623                           
  1624                           	psect	cstackBANK0
  1625  0000F0                     __pcstackBANK0:
  1626                           	opt stack 0
  1627  0000F0                     ??_FastTransfer_buffer_put:
  1628  0000F0                     Send_put@_data:
  1629                           	opt stack 0
  1630  0000F0                     handleIndicators@receivedIndicators:
  1631                           	opt stack 0
  1632  0000F0                     buttonsCollector@sendVal:
  1633                           	opt stack 0
  1634  0000F0                     begin@ptr:
  1635                           	opt stack 0
  1636  0000F0                     FastTransfer_buffer_flush@_this:
  1637                           	opt stack 0
  1638  0000F0                     crcBufS_get@wantedTime:
  1639                           	opt stack 0
  1640                           
  1641                           ; 2 bytes @ 0x0
  1642  0000F0                     	ds	2
  1643  0000F2                     ??_handleIndicators:
  1644  0000F2                     begin@maxSize:
  1645                           	opt stack 0
  1646  0000F2                     CRCcheck@SentCRC:
  1647                           	opt stack 0
  1648  0000F2                     buttonsCollector@i:
  1649                           	opt stack 0
  1650  0000F2                     FastTransfer_buffer_flush@clearBuffer:
  1651                           	opt stack 0
  1652                           
  1653                           ; 2 bytes @ 0x2
  1654  0000F2                     	ds	1
  1655  0000F3                     begin@givenAddress:
  1656                           	opt stack 0
  1657  0000F3                     CRCcheck@calculatedCRC:
  1658                           	opt stack 0
  1659                           
  1660                           ; 1 bytes @ 0x3
  1661  0000F3                     	ds	1
  1662  0000F4                     ??_sendData:
  1663  0000F4                     begin@error:
  1664                           	opt stack 0
  1665  0000F4                     ToSend@what:
  1666                           	opt stack 0
  1667  0000F4                     CRCcheck@arrayHolder:
  1668                           	opt stack 0
  1669                           
  1670                           ; 3 bytes @ 0x4
  1671  0000F4                     	ds	1
  1672  0000F5                     sendData@whereToSend:
  1673                           	opt stack 0
  1674  0000F5                     handleIndicators@i:
  1675                           	opt stack 0
  1676  0000F5                     begin@stufftosend:
  1677                           	opt stack 0
  1678                           
  1679                           ; 2 bytes @ 0x5
  1680  0000F5                     	ds	1
  1681  0000F6                     sendData@CS:
  1682                           	opt stack 0
  1683  0000F6                     ToSend@where:
  1684                           	opt stack 0
  1685                           
  1686                           ; 1 bytes @ 0x6
  1687  0000F6                     	ds	1
  1688  0000F7                     begin@stufftoreceive:
  1689                           	opt stack 0
  1690  0000F7                     sendData@i:
  1691                           	opt stack 0
  1692  0000F7                     CRCcheck@rt:
  1693                           	opt stack 0
  1694                           
  1695                           ; 2 bytes @ 0x7
  1696  0000F7                     	ds	2
  1697  0000F9                     ??_receiveData:
  1698  0000F9                     begin@stuffavailable:
  1699                           	opt stack 0
  1700                           
  1701                           ; 2 bytes @ 0x9
  1702  0000F9                     	ds	2
  1703  0000FB                     begin@stuffpeek:
  1704                           	opt stack 0
  1705                           
  1706                           ; 2 bytes @ 0xB
  1707  0000FB                     	ds	4
  1708                           tblptru	equ	0xFF8
  1709                           tblptrh	equ	0xFF7
  1710                           tblptrl	equ	0xFF6
  1711                           tablat	equ	0xFF5
  1712                           postinc0	equ	0xFEE
  1713                           wreg	equ	0xFE8
  1714                           
  1715                           	psect	cstackCOMRAM
  1716  000001                     __pcstackCOMRAM:
  1717                           	opt stack 0
  1718  000001                     ??_I2C1_Stop:
  1719  000001                     ?i2_UART_buff_size:
  1720                           	opt stack 0
  1721  000001                     ?i2_UART_buff_modulo_inc:
  1722                           	opt stack 0
  1723  000001                     ReadButtonState@btnnum:
  1724                           	opt stack 0
  1725  000001                     i2UART_buff_size@_this:
  1726                           	opt stack 0
  1727  000001                     i2UART_buff_modulo_inc@value:
  1728                           	opt stack 0
  1729                           
  1730                           ; 2 bytes @ 0x0
  1731  000001                     	ds	2
  1732  000003                     ??_ReadButtonState:
  1733  000003                     I2C1_Stop@completion_code:
  1734                           	opt stack 0
  1735  000003                     i2UART_buff_modulo_inc@modulus:
  1736                           	opt stack 0
  1737                           
  1738                           ; 2 bytes @ 0x2
  1739  000003                     	ds	1
  1740  000004                     ??_I2C1_ISR:
  1741                           
  1742                           ; 0 bytes @ 0x3
  1743  000004                     	ds	1
  1744  000005                     TMR0_ISR@x:
  1745                           	opt stack 0
  1746  000005                     i2UART_buff_modulo_inc@my_value:
  1747                           	opt stack 0
  1748                           
  1749                           ; 2 bytes @ 0x4
  1750  000005                     	ds	2
  1751  000007                     i2UART_buff_put@_this:
  1752                           	opt stack 0
  1753  000007                     i2UART_buff_get@_this:
  1754                           	opt stack 0
  1755                           
  1756                           ; 2 bytes @ 0x6
  1757  000007                     	ds	2
  1758  000009                     ??i2_UART_buff_get:
  1759  000009                     i2UART_buff_put@c:
  1760                           	opt stack 0
  1761                           
  1762                           ; 1 bytes @ 0x8
  1763  000009                     	ds	1
  1764  00000A                     ??i2_UART_buff_put:
  1765                           
  1766                           ; 0 bytes @ 0x9
  1767  00000A                     	ds	1
  1768  00000B                     i2UART_buff_get@c:
  1769                           	opt stack 0
  1770                           
  1771                           ; 1 bytes @ 0xA
  1772  00000B                     	ds	1
  1773  00000C                     EUSART1_Receive_ISR@data:
  1774                           	opt stack 0
  1775                           
  1776                           ; 1 bytes @ 0xB
  1777  00000C                     	ds	1
  1778  00000D                     ??_INTERRUPT_InterruptManager:
  1779                           
  1780                           ; 0 bytes @ 0xC
  1781  00000D                     	ds	14
  1782  00001B                     ?_FastTransfer_buffer_modulo_inc:
  1783                           	opt stack 0
  1784  00001B                     ?_UART_buff_modulo_inc:
  1785                           	opt stack 0
  1786  00001B                     ?_GetTime:
  1787                           	opt stack 0
  1788  00001B                     ?_UART_buff_size:
  1789                           	opt stack 0
  1790  00001B                     ?___awdiv:
  1791                           	opt stack 0
  1792  00001B                     setLED@led:
  1793                           	opt stack 0
  1794  00001B                     Off_Led@led:
  1795                           	opt stack 0
  1796  00001B                     Delay@wait:
  1797                           	opt stack 0
  1798  00001B                     GetButtonState@btnnum:
  1799                           	opt stack 0
  1800  00001B                     TBbarGraphs@t:
  1801                           	opt stack 0
  1802  00001B                     CRC8@data:
  1803                           	opt stack 0
  1804  00001B                     FastTransfer_buffer_modulo_inc@value:
  1805                           	opt stack 0
  1806  00001B                     crcBufS_put@_this:
  1807                           	opt stack 0
  1808  00001B                     crcBufS_status_put@_this:
  1809                           	opt stack 0
  1810  00001B                     crcBufS_get@_this:
  1811                           	opt stack 0
  1812  00001B                     UART_buff_size@_this:
  1813                           	opt stack 0
  1814  00001B                     UART_buff_modulo_inc@value:
  1815                           	opt stack 0
  1816  00001B                     UART_buff_peek@_this:
  1817                           	opt stack 0
  1818  00001B                     ___awdiv@dividend:
  1819                           	opt stack 0
  1820  00001B                     memset@p1:
  1821                           	opt stack 0
  1822                           
  1823                           ; 2 bytes @ 0x1A
  1824  00001B                     	ds	2
  1825  00001D                     ??_GetButtonState:
  1826  00001D                     ??_setLED:
  1827  00001D                     ??_Off_Led:
  1828  00001D                     ??_Delay:
  1829  00001D                     ??_UART_buff_peek:
  1830  00001D                     ?_Receive_available:
  1831                           	opt stack 0
  1832  00001D                     CRC8@len:
  1833                           	opt stack 0
  1834  00001D                     crcBufS_put@address:
  1835                           	opt stack 0
  1836  00001D                     crcBufS_status_put@time:
  1837                           	opt stack 0
  1838  00001D                     crcBufS_get@time:
  1839                           	opt stack 0
  1840  00001D                     TBbarGraphs@b:
  1841                           	opt stack 0
  1842  00001D                     FastTransfer_buffer_modulo_inc@modulus:
  1843                           	opt stack 0
  1844  00001D                     UART_buff_modulo_inc@modulus:
  1845                           	opt stack 0
  1846  00001D                     ___awdiv@divisor:
  1847                           	opt stack 0
  1848  00001D                     memset@c:
  1849                           	opt stack 0
  1850                           
  1851                           ; 2 bytes @ 0x1C
  1852  00001D                     	ds	1
  1853  00001E                     CRC8@sum:
  1854                           	opt stack 0
  1855  00001E                     crcBufS_put@oldCRC:
  1856                           	opt stack 0
  1857  00001E                     crcBufS_status_put@status:
  1858                           	opt stack 0
  1859  00001E                     crcBufS_get@space:
  1860                           	opt stack 0
  1861  00001E                     Delay@x:
  1862                           	opt stack 0
  1863                           
  1864                           ; 2 bytes @ 0x1D
  1865  00001E                     	ds	1
  1866  00001F                     ??_crcBufS_get:
  1867  00001F                     ??_crcBufS_status_put:
  1868  00001F                     CRC8@extract:
  1869                           	opt stack 0
  1870  00001F                     crcBufS_put@status:
  1871                           	opt stack 0
  1872  00001F                     ___awdiv@counter:
  1873                           	opt stack 0
  1874  00001F                     SetLEDOut@lednum:
  1875                           	opt stack 0
  1876  00001F                     FastTransfer_buffer_modulo_inc@my_value:
  1877                           	opt stack 0
  1878  00001F                     UART_buff_modulo_inc@my_value:
  1879                           	opt stack 0
  1880  00001F                     memset@n:
  1881                           	opt stack 0
  1882                           
  1883                           ; 2 bytes @ 0x1E
  1884  00001F                     	ds	1
  1885  000020                     ??_crcBufS_put:
  1886  000020                     CRC8@tempI:
  1887                           	opt stack 0
  1888  000020                     ___awdiv@sign:
  1889                           	opt stack 0
  1890                           
  1891                           ; 1 bytes @ 0x1F
  1892  000020                     	ds	1
  1893  000021                     ?_buttonsCollector:
  1894                           	opt stack 0
  1895  000021                     CRC8@crc:
  1896                           	opt stack 0
  1897  000021                     SetLEDOut@state:
  1898                           	opt stack 0
  1899  000021                     FastTransfer_buffer_put@_this:
  1900                           	opt stack 0
  1901  000021                     UART_buff_put@_this:
  1902                           	opt stack 0
  1903  000021                     UART_buff_get@_this:
  1904                           	opt stack 0
  1905  000021                     ___awdiv@quotient:
  1906                           	opt stack 0
  1907  000021                     memset@p:
  1908                           	opt stack 0
  1909                           
  1910                           ; 2 bytes @ 0x20
  1911  000021                     	ds	2
  1912  000023                     ??_buttonsCollector:
  1913  000023                     ??_SetLEDOut:
  1914  000023                     ??_UART_buff_get:
  1915  000023                     FastTransfer_buffer_put@towhere:
  1916                           	opt stack 0
  1917  000023                     UART_buff_put@c:
  1918                           	opt stack 0
  1919  000023                     crcBufS_status_put@wantedTime:
  1920                           	opt stack 0
  1921  000023                     UART_buff_init@_this:
  1922                           	opt stack 0
  1923                           
  1924                           ; 2 bytes @ 0x22
  1925  000023                     	ds	1
  1926  000024                     ??_UART_buff_put:
  1927  000024                     FastTransfer_buffer_put@towhat:
  1928                           	opt stack 0
  1929                           
  1930                           ; 2 bytes @ 0x23
  1931  000024                     	ds	1
  1932  000025                     UART_buff_get@c:
  1933                           	opt stack 0
  1934                           
  1935                           ; 1 bytes @ 0x24
  1936  000025                     	ds	1
  1937  000026                     tblptru	equ	0xFF8
  1938                           tblptrh	equ	0xFF7
  1939                           tblptrl	equ	0xFF6
  1940                           tablat	equ	0xFF5
  1941                           postinc0	equ	0xFEE
  1942                           wreg	equ	0xFE8
  1943                           
  1944                           ; 0 bytes @ 0x25
  1945 ;;
  1946 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1947 ;;
  1948 ;; *************** function _main *****************
  1949 ;; Defined at:
  1950 ;;		line 36 in file "main.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;		None
  1953 ;; Auto vars:     Size  Location     Type
  1954 ;;		None
  1955 ;; Return value:  Size  Location     Type
  1956 ;;		None               void
  1957 ;; Registers used:
  1958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1959 ;; Tracked objects:
  1960 ;;		On entry : 0/0
  1961 ;;		On exit  : 0/0
  1962 ;;		Unchanged: 0/0
  1963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1964 ;;      Params:         0       0       0       0       0       0       0
  1965 ;;      Locals:         0       0       0       0       0       0       0
  1966 ;;      Temps:          0       0       0       0       0       0       0
  1967 ;;      Totals:         0       0       0       0       0       0       0
  1968 ;;Total ram usage:        0 bytes
  1969 ;; Hardware stack levels required when called:   10
  1970 ;; This function calls:
  1971 ;;		_GetButtonState
  1972 ;;		_GetTime
  1973 ;;		_SYSTEM_Initialize
  1974 ;;		_updateComms
  1975 ;; This function is called by:
  1976 ;;		Startup code after reset
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           	psect	text0
  1981  0020AA                     __ptext0:
  1982                           	opt stack 0
  1983  0020AA                     _main:
  1984                           	opt stack 21
  1985                           
  1986                           ;main.c: 38: SYSTEM_Initialize();
  1987                           
  1988                           ;incstack = 0
  1989  0020AA  ECDE  F00D         	call	_SYSTEM_Initialize	;wreg free
  1990                           
  1991                           ;main.c: 57: (INTCONbits.GIE = 1);
  1992  0020AE  8EF2               	bsf	intcon,7,c	;volatile
  1993                           
  1994                           ;main.c: 60: (INTCONbits.PEIE = 1);
  1995  0020B0  8CF2               	bsf	intcon,6,c	;volatile
  1996                           
  1997                           ;main.c: 73: do { LATA3 = 1; } while(0);
  1998  0020B2  8689               	bsf	3977,3,c	;volatile
  1999                           
  2000                           ;main.c: 74: LATCbits.LATC5 = 0;
  2001  0020B4  9A8B               	bcf	3979,5,c	;volatile
  2002  0020B6                     l6258:
  2003                           
  2004                           ;main.c: 76: updateComms();
  2005  0020B6  ECA6  F00E         	call	_updateComms	;wreg free
  2006                           
  2007                           ;main.c: 78: if (GetTime() > 2) {
  2008  0020BA  EC07  F011         	call	_GetTime	;wreg free
  2009                           
  2010                           ;main.c: 85: }
  2011                           ;main.c: 113: if(GetButtonState(4) == 0)
  2012  0020BE  0E00               	movlw	0
  2013  0020C0  6E1C               	movwf	GetButtonState@btnnum+1,c
  2014  0020C2  0E04               	movlw	4
  2015  0020C4  6E1B               	movwf	GetButtonState@btnnum,c
  2016  0020C6  EC2F  F010         	call	_GetButtonState	;wreg free
  2017                           
  2018                           ;main.c: 114: {
  2019  0020CA  D7F5               	goto	l6258
  2020  0020CC                     __end_of_main:
  2021                           	opt stack 0
  2022                           tblptru	equ	0xFF8
  2023                           tblptrh	equ	0xFF7
  2024                           tblptrl	equ	0xFF6
  2025                           tablat	equ	0xFF5
  2026                           intcon	equ	0xFF2
  2027                           postinc0	equ	0xFEE
  2028                           wreg	equ	0xFE8
  2029                           
  2030 ;; *************** function _updateComms *****************
  2031 ;; Defined at:
  2032 ;;		line 8 in file "Communications.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;		None
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;		None
  2037 ;; Return value:  Size  Location     Type
  2038 ;;		None               void
  2039 ;; Registers used:
  2040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2041 ;; Tracked objects:
  2042 ;;		On entry : 0/0
  2043 ;;		On exit  : 0/0
  2044 ;;		Unchanged: 0/0
  2045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2046 ;;      Params:         0       0       0       0       0       0       0
  2047 ;;      Locals:         0       0       0       0       0       0       0
  2048 ;;      Temps:          0       0       0       0       0       0       0
  2049 ;;      Totals:         0       0       0       0       0       0       0
  2050 ;;Total ram usage:        0 bytes
  2051 ;; Hardware stack levels used:    1
  2052 ;; Hardware stack levels required when called:    9
  2053 ;; This function calls:
  2054 ;;		_TBbarGraphs
  2055 ;;		_handleIndicators
  2056 ;;		_receiveData
  2057 ;;		_respondECU
  2058 ;; This function is called by:
  2059 ;;		_main
  2060 ;; This function uses a non-reentrant model
  2061 ;;
  2062                           
  2063                           	psect	text1
  2064  001D4C                     __ptext1:
  2065                           	opt stack 0
  2066  001D4C                     _updateComms:
  2067                           	opt stack 21
  2068                           
  2069                           ;Communications.c: 10: if (receiveData()) {
  2070                           
  2071                           ;incstack = 0
  2072  001D4C  EC5D  F000         	call	_receiveData	;wreg free
  2073  001D50  0900               	iorlw	0
  2074  001D52  B4D8               	btfsc	status,2,c
  2075  001D54  0012               	return	
  2076                           
  2077                           ;Communications.c: 11: do { LATA3 = ~LATA3; } while(0);
  2078  001D56  B689               	btfsc	3977,3,c	;volatile
  2079  001D58  D002               	goto	u7020
  2080  001D5A  8689               	bsf	3977,3,c	;volatile
  2081  001D5C  D001               	goto	l6238
  2082  001D5E                     u7020:
  2083  001D5E  9689               	bcf	3977,3,c	;volatile
  2084  001D60                     l6238:
  2085                           
  2086                           ;Communications.c: 12: if (receiveArray[0] == 1) {
  2087  001D60  0101               	movlb	1	; () banked
  2088  001D62  0500               	decf	_receiveArray& (0+255),w,b	;volatile
  2089  001D64  0101               	movlb	1	; () banked
  2090  001D66  1101               	iorwf	(_receiveArray+1)& (0+255),w,b	;volatile
  2091  001D68  A4D8               	btfss	status,2,c
  2092  001D6A  0012               	return	
  2093                           
  2094                           ; BSR set to: 1
  2095                           ;Communications.c: 13: respondECU();
  2096  001D6C  ECF3  F00E         	call	_respondECU	;wreg free
  2097                           
  2098                           ;Communications.c: 14: handleIndicators(receiveArray[2]);
  2099  001D70  C104  F0F0         	movff	_receiveArray+4,handleIndicators@receivedIndicators	;volatile
  2100  001D74  C105  F0F1         	movff	_receiveArray+5,handleIndicators@receivedIndicators+1	;volatile
  2101  001D78  EC41  F00C         	call	_handleIndicators	;wreg free
  2102                           
  2103                           ;Communications.c: 15: TBbarGraphs(receiveArray[3], receiveArray[4]);
  2104  001D7C  C106  F01B         	movff	_receiveArray+6,TBbarGraphs@t	;volatile
  2105  001D80  C107  F01C         	movff	_receiveArray+7,TBbarGraphs@t+1	;volatile
  2106  001D84  C108  F01D         	movff	_receiveArray+8,TBbarGraphs@b	;volatile
  2107  001D88  C109  F01E         	movff	_receiveArray+9,TBbarGraphs@b+1	;volatile
  2108  001D8C  ECE0  F010         	call	_TBbarGraphs	;wreg free
  2109                           
  2110                           ;Communications.c: 16: receiveArray[0] = 0;
  2111  001D90  0E00               	movlw	0
  2112  001D92  0101               	movlb	1	; () banked
  2113  001D94  6F01               	movwf	(_receiveArray+1)& (0+255),b	;volatile
  2114  001D96  0E00               	movlw	0
  2115  001D98  6F00               	movwf	_receiveArray& (0+255),b	;volatile
  2116                           
  2117                           ; BSR set to: 1
  2118  001D9A  0012               	return	
  2119  001D9C                     __end_of_updateComms:
  2120                           	opt stack 0
  2121                           tblptru	equ	0xFF8
  2122                           tblptrh	equ	0xFF7
  2123                           tblptrl	equ	0xFF6
  2124                           tablat	equ	0xFF5
  2125                           intcon	equ	0xFF2
  2126                           postinc0	equ	0xFEE
  2127                           wreg	equ	0xFE8
  2128                           status	equ	0xFD8
  2129                           
  2130 ;; *************** function _respondECU *****************
  2131 ;; Defined at:
  2132 ;;		line 22 in file "Communications.c"
  2133 ;; Parameters:    Size  Location     Type
  2134 ;;		None
  2135 ;; Auto vars:     Size  Location     Type
  2136 ;;		None
  2137 ;; Return value:  Size  Location     Type
  2138 ;;		None               void
  2139 ;; Registers used:
  2140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  2141 ;; Tracked objects:
  2142 ;;		On entry : 0/0
  2143 ;;		On exit  : 0/0
  2144 ;;		Unchanged: 0/0
  2145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2146 ;;      Params:         0       0       0       0       0       0       0
  2147 ;;      Locals:         0       0       0       0       0       0       0
  2148 ;;      Temps:          0       0       0       0       0       0       0
  2149 ;;      Totals:         0       0       0       0       0       0       0
  2150 ;;Total ram usage:        0 bytes
  2151 ;; Hardware stack levels used:    1
  2152 ;; Hardware stack levels required when called:    8
  2153 ;; This function calls:
  2154 ;;		_Delay
  2155 ;;		_ToSend
  2156 ;;		_buttonsCollector
  2157 ;;		_sendData
  2158 ;; This function is called by:
  2159 ;;		_updateComms
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           	psect	text2
  2164  001DE6                     __ptext2:
  2165                           	opt stack 0
  2166  001DE6                     _respondECU:
  2167                           	opt stack 21
  2168                           
  2169                           ;Communications.c: 23: LATCbits.LATC5 = 1;
  2170                           
  2171                           ;incstack = 0
  2172  001DE6  8A8B               	bsf	3979,5,c	;volatile
  2173                           
  2174                           ;Communications.c: 24: ToSend(0, 3);
  2175  001DE8  0E00               	movlw	0
  2176  001DEA  0100               	movlb	0	; () banked
  2177  001DEC  6FF5               	movwf	(ToSend@what+1)& (0+255),b
  2178  001DEE  0E03               	movlw	3
  2179  001DF0  6FF4               	movwf	ToSend@what& (0+255),b
  2180  001DF2  0E00               	movlw	0
  2181  001DF4  EC77  F010         	call	_ToSend
  2182                           
  2183                           ;Communications.c: 25: ToSend(8, buttonsCollector());
  2184  001DF8  EC1D  F00D         	call	_buttonsCollector	;wreg free
  2185  001DFC  C021  F0F4         	movff	?_buttonsCollector,ToSend@what
  2186  001E00  C022  F0F5         	movff	?_buttonsCollector+1,ToSend@what+1
  2187  001E04  0E08               	movlw	8
  2188  001E06  EC77  F010         	call	_ToSend
  2189                           
  2190                           ;Communications.c: 26: Delay(9);
  2191  001E0A  0E00               	movlw	0
  2192  001E0C  6E1C               	movwf	Delay@wait+1,c
  2193  001E0E  0E09               	movlw	9
  2194  001E10  6E1B               	movwf	Delay@wait,c
  2195  001E12  EC8F  F00F         	call	_Delay	;wreg free
  2196                           
  2197                           ;Communications.c: 27: sendData(1);
  2198  001E16  0E01               	movlw	1
  2199  001E18  ECE1  F007         	call	_sendData
  2200                           
  2201                           ;Communications.c: 28: Delay(3);
  2202  001E1C  0E00               	movlw	0
  2203  001E1E  6E1C               	movwf	Delay@wait+1,c
  2204  001E20  0E03               	movlw	3
  2205  001E22  6E1B               	movwf	Delay@wait,c
  2206  001E24  EC8F  F00F         	call	_Delay	;wreg free
  2207                           
  2208                           ;Communications.c: 29: LATCbits.LATC5 = 0;
  2209  001E28  9A8B               	bcf	3979,5,c	;volatile
  2210  001E2A  0012               	return		;funcret
  2211  001E2C                     __end_of_respondECU:
  2212                           	opt stack 0
  2213                           tblptru	equ	0xFF8
  2214                           tblptrh	equ	0xFF7
  2215                           tblptrl	equ	0xFF6
  2216                           tablat	equ	0xFF5
  2217                           intcon	equ	0xFF2
  2218                           postinc0	equ	0xFEE
  2219                           wreg	equ	0xFE8
  2220                           status	equ	0xFD8
  2221                           
  2222 ;; *************** function _sendData *****************
  2223 ;; Defined at:
  2224 ;;		line 54 in file "FastTransfer.c"
  2225 ;; Parameters:    Size  Location     Type
  2226 ;;  whereToSend     1    wreg     unsigned char 
  2227 ;; Auto vars:     Size  Location     Type
  2228 ;;  whereToSend     1    5[BANK0 ] unsigned char 
  2229 ;;  i               2    7[BANK0 ] int 
  2230 ;;  CS              1    6[BANK0 ] unsigned char 
  2231 ;; Return value:  Size  Location     Type
  2232 ;;		None               void
  2233 ;; Registers used:
  2234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2240 ;;      Params:         0       0       0       0       0       0       0
  2241 ;;      Locals:         0       4       0       0       0       0       0
  2242 ;;      Temps:          0       1       0       0       0       0       0
  2243 ;;      Totals:         0       5       0       0       0       0       0
  2244 ;;Total ram usage:        5 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; Hardware stack levels required when called:    7
  2247 ;; This function calls:
  2248 ;;		Absolute function
  2249 ;;		_CRC8
  2250 ;;		_FastTransfer_buffer_flush
  2251 ;;		_Send_put
  2252 ;;		_crcBufS_put
  2253 ;; This function is called by:
  2254 ;;		_respondECU
  2255 ;; This function uses a non-reentrant model
  2256 ;;
  2257                           
  2258                           	psect	text3
  2259  000FC2                     __ptext3:
  2260                           	opt stack 0
  2261  000FC2                     _sendData:
  2262                           	opt stack 21
  2263                           
  2264                           ;incstack = 0
  2265                           ;sendData@whereToSend stored from wreg
  2266  000FC2  0100               	movlb	0	; () banked
  2267  000FC4  6FF5               	movwf	sendData@whereToSend& (0+255),b
  2268                           
  2269                           ;FastTransfer.c: 57: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  2270  000FC6  C0D3  F01B         	movff	_sendStructAddress,CRC8@data
  2271  000FCA  C0D4  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  2272  000FCE  C2CC  F01D         	movff	_ring_buffer+204,CRC8@len
  2273  000FD2  ECCE  F00E         	call	_CRC8	;wreg free
  2274  000FD6  0100               	movlb	0	; () banked
  2275  000FD8  6FF6               	movwf	sendData@CS& (0+255),b
  2276                           
  2277                           ; BSR set to: 0
  2278                           ;FastTransfer.c: 59: serial_write(0x06);
  2279  000FDA  D801               	call	u6258
  2280  000FDC  D00B               	goto	l5946
  2281  000FDE                     u6258:
  2282  000FDE  0005               	push	
  2283  000FE0  6EFA               	movwf	pclath,c
  2284  000FE2  5034               	movf	_serial_write,w,c
  2285  000FE4  6EFD               	movwf	tosl,c
  2286  000FE6  5035               	movf	_serial_write+1,w,c
  2287  000FE8  6EFE               	movwf	tosh,c
  2288  000FEA  50F8               	movf	tblptru,w,c
  2289  000FEC  6EFF               	movwf	tosu,c
  2290  000FEE  50FA               	movf	pclath,w,c
  2291  000FF0  0E06               	movlw	6
  2292  000FF2  0012               	return		;indir
  2293  000FF4                     l5946:
  2294                           
  2295                           ;FastTransfer.c: 60: serial_write(0x85);
  2296  000FF4  D801               	call	u6268
  2297  000FF6  D00B               	goto	l5948
  2298  000FF8                     u6268:
  2299  000FF8  0005               	push	
  2300  000FFA  6EFA               	movwf	pclath,c
  2301  000FFC  5034               	movf	_serial_write,w,c
  2302  000FFE  6EFD               	movwf	tosl,c
  2303  001000  5035               	movf	_serial_write+1,w,c
  2304  001002  6EFE               	movwf	tosh,c
  2305  001004  50F8               	movf	tblptru,w,c
  2306  001006  6EFF               	movwf	tosu,c
  2307  001008  50FA               	movf	pclath,w,c
  2308  00100A  0E85               	movlw	133
  2309  00100C  0012               	return		;indir
  2310  00100E                     l5948:
  2311                           
  2312                           ;FastTransfer.c: 61: serial_write(whereToSend);
  2313  00100E  D801               	call	u6278
  2314  001010  D00C               	goto	l5950
  2315  001012                     u6278:
  2316  001012  0005               	push	
  2317  001014  6EFA               	movwf	pclath,c
  2318  001016  5034               	movf	_serial_write,w,c
  2319  001018  6EFD               	movwf	tosl,c
  2320  00101A  5035               	movf	_serial_write+1,w,c
  2321  00101C  6EFE               	movwf	tosh,c
  2322  00101E  50F8               	movf	tblptru,w,c
  2323  001020  6EFF               	movwf	tosu,c
  2324  001022  50FA               	movf	pclath,w,c
  2325  001024  0100               	movlb	0	; () banked
  2326  001026  51F5               	movf	sendData@whereToSend& (0+255),w,b
  2327  001028  0012               	return		;indir
  2328  00102A                     l5950:
  2329                           
  2330                           ;FastTransfer.c: 62: serial_write(moduleAddress);
  2331  00102A  D801               	call	u6288
  2332  00102C  D00B               	goto	l5952
  2333  00102E                     u6288:
  2334  00102E  0005               	push	
  2335  001030  6EFA               	movwf	pclath,c
  2336  001032  5034               	movf	_serial_write,w,c
  2337  001034  6EFD               	movwf	tosl,c
  2338  001036  5035               	movf	_serial_write+1,w,c
  2339  001038  6EFE               	movwf	tosh,c
  2340  00103A  50F8               	movf	tblptru,w,c
  2341  00103C  6EFF               	movwf	tosu,c
  2342  00103E  50FA               	movf	pclath,w,c
  2343  001040  503B               	movf	_moduleAddress,w,c
  2344  001042  0012               	return		;indir
  2345  001044                     l5952:
  2346                           
  2347                           ;FastTransfer.c: 63: serial_write(ring_buffer.count);
  2348  001044  D801               	call	u6298
  2349  001046  D00C               	goto	l5954
  2350  001048                     u6298:
  2351  001048  0005               	push	
  2352  00104A  6EFA               	movwf	pclath,c
  2353  00104C  5034               	movf	_serial_write,w,c
  2354  00104E  6EFD               	movwf	tosl,c
  2355  001050  5035               	movf	_serial_write+1,w,c
  2356  001052  6EFE               	movwf	tosh,c
  2357  001054  50F8               	movf	tblptru,w,c
  2358  001056  6EFF               	movwf	tosu,c
  2359  001058  50FA               	movf	pclath,w,c
  2360  00105A  0102               	movlb	2	; () banked
  2361  00105C  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  2362  00105E  0012               	return		;indir
  2363  001060                     l5954:
  2364                           
  2365                           ;FastTransfer.c: 67: int i;
  2366                           ;FastTransfer.c: 68: for (i = 0; i < ring_buffer.count; i++) {
  2367  001060  0E00               	movlw	0
  2368  001062  0100               	movlb	0	; () banked
  2369  001064  6FF8               	movwf	(sendData@i+1)& (0+255),b
  2370  001066  0E00               	movlw	0
  2371  001068  6FF7               	movwf	sendData@i& (0+255),b
  2372  00106A  D01A               	goto	l5960
  2373  00106C                     l5956:
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;FastTransfer.c: 69: serial_write(*(sendStructAddress + i));
  2377  00106C  D801               	call	u6308
  2378  00106E  D015               	goto	l5958
  2379  001070                     u6308:
  2380  001070  0005               	push	
  2381  001072  6EFA               	movwf	pclath,c
  2382  001074  5034               	movf	_serial_write,w,c
  2383  001076  6EFD               	movwf	tosl,c
  2384  001078  5035               	movf	_serial_write+1,w,c
  2385  00107A  6EFE               	movwf	tosh,c
  2386  00107C  50F8               	movf	tblptru,w,c
  2387  00107E  6EFF               	movwf	tosu,c
  2388  001080  50FA               	movf	pclath,w,c
  2389  001082  0100               	movlb	0	; () banked
  2390  001084  51F7               	movf	sendData@i& (0+255),w,b
  2391  001086  0100               	movlb	0	; () banked
  2392  001088  25D3               	addwf	_sendStructAddress& (0+255),w,b
  2393  00108A  6ED9               	movwf	fsr2l,c
  2394  00108C  0100               	movlb	0	; () banked
  2395  00108E  51F8               	movf	(sendData@i+1)& (0+255),w,b
  2396  001090  0100               	movlb	0	; () banked
  2397  001092  21D4               	addwfc	(_sendStructAddress+1)& (0+255),w,b
  2398  001094  6EDA               	movwf	fsr2h,c
  2399  001096  50DF               	movf	indf2,w,c
  2400  001098  0012               	return		;indir
  2401  00109A                     l5958:
  2402  00109A  0100               	movlb	0	; () banked
  2403  00109C  4BF7               	infsnz	sendData@i& (0+255),f,b
  2404  00109E  2BF8               	incf	(sendData@i+1)& (0+255),f,b
  2405  0010A0                     l5960:
  2406                           
  2407                           ; BSR set to: 0
  2408  0010A0  0102               	movlb	2	; () banked
  2409  0010A2  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  2410  0010A4  0100               	movlb	0	; () banked
  2411  0010A6  5DF7               	subwf	sendData@i& (0+255),w,b
  2412  0010A8  0100               	movlb	0	; () banked
  2413  0010AA  51F8               	movf	(sendData@i+1)& (0+255),w,b
  2414  0010AC  0A80               	xorlw	128
  2415  0010AE  0100               	movlb	0	; () banked
  2416  0010B0  6FF4               	movwf	??_sendData& (0+255),b
  2417  0010B2  0102               	movlb	2	; () banked
  2418  0010B4  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  2419  0010B6  0A80               	xorlw	128
  2420  0010B8  0100               	movlb	0	; () banked
  2421  0010BA  59F4               	subwfb	??_sendData& (0+255),w,b
  2422  0010BC  A0D8               	btfss	status,0,c
  2423  0010BE  D7D6               	goto	l5956
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;FastTransfer.c: 70: }
  2427                           ;FastTransfer.c: 73: serial_write(CS);
  2428                           
  2429                           ; BSR set to: 0
  2430  0010C0  D801               	call	u6328
  2431  0010C2  D00C               	goto	l5964
  2432  0010C4                     u6328:
  2433  0010C4  0005               	push	
  2434  0010C6  6EFA               	movwf	pclath,c
  2435  0010C8  5034               	movf	_serial_write,w,c
  2436  0010CA  6EFD               	movwf	tosl,c
  2437  0010CC  5035               	movf	_serial_write+1,w,c
  2438  0010CE  6EFE               	movwf	tosh,c
  2439  0010D0  50F8               	movf	tblptru,w,c
  2440  0010D2  6EFF               	movwf	tosu,c
  2441  0010D4  50FA               	movf	pclath,w,c
  2442  0010D6  0100               	movlb	0	; () banked
  2443  0010D8  51F6               	movf	sendData@CS& (0+255),w,b
  2444  0010DA  0012               	return		;indir
  2445  0010DC                     l5964:
  2446                           
  2447                           ;FastTransfer.c: 76: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  2448  0010DC  0E28               	movlw	low _crc_buffer
  2449  0010DE  6E1B               	movwf	crcBufS_put@_this,c
  2450  0010E0  0E01               	movlw	high _crc_buffer
  2451  0010E2  6E1C               	movwf	crcBufS_put@_this+1,c
  2452  0010E4  C0F5  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  2453  0010E8  C0F6  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  2454  0010EC  0E00               	movlw	0
  2455  0010EE  6E1F               	movwf	crcBufS_put@status,c
  2456  0010F0  ECA6  F00A         	call	_crcBufS_put
  2457                           
  2458                           ;FastTransfer.c: 79: FastTransfer_buffer_flush(&ring_buffer, 1);
  2459  0010F4  0E00               	movlw	low _ring_buffer
  2460  0010F6  0100               	movlb	0	; () banked
  2461  0010F8  6FF0               	movwf	FastTransfer_buffer_flush@_this& (0+255),b
  2462  0010FA  0E02               	movlw	high _ring_buffer
  2463  0010FC  0100               	movlb	0	; () banked
  2464  0010FE  6FF1               	movwf	(FastTransfer_buffer_flush@_this+1)& (0+255),b
  2465  001100  0E00               	movlw	0
  2466  001102  0100               	movlb	0	; () banked
  2467  001104  6FF3               	movwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),b
  2468  001106  0E01               	movlw	1
  2469  001108  6FF2               	movwf	FastTransfer_buffer_flush@clearBuffer& (0+255),b
  2470  00110A  EC16  F00E         	call	_FastTransfer_buffer_flush	;wreg free
  2471  00110E  0012               	return		;funcret
  2472  001110                     __end_of_sendData:
  2473                           	opt stack 0
  2474                           tosu	equ	0xFFF
  2475                           tosh	equ	0xFFE
  2476                           tosl	equ	0xFFD
  2477                           pclath	equ	0xFFA
  2478                           tblptru	equ	0xFF8
  2479                           tblptrh	equ	0xFF7
  2480                           tblptrl	equ	0xFF6
  2481                           tablat	equ	0xFF5
  2482                           intcon	equ	0xFF2
  2483                           postinc0	equ	0xFEE
  2484                           wreg	equ	0xFE8
  2485                           indf2	equ	0xFDF
  2486                           fsr2h	equ	0xFDA
  2487                           fsr2l	equ	0xFD9
  2488                           status	equ	0xFD8
  2489                           
  2490 ;; *************** function _crcBufS_put *****************
  2491 ;; Defined at:
  2492 ;;		line 324 in file "FastTransfer.c"
  2493 ;; Parameters:    Size  Location     Type
  2494 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  2495 ;;		 -> crc_buffer(17), 
  2496 ;;  address         1   28[COMRAM] unsigned char 
  2497 ;;  oldCRC          1   29[COMRAM] unsigned char 
  2498 ;;  status          1   30[COMRAM] unsigned char 
  2499 ;; Auto vars:     Size  Location     Type
  2500 ;;		None
  2501 ;; Return value:  Size  Location     Type
  2502 ;;		None               void
  2503 ;; Registers used:
  2504 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2505 ;; Tracked objects:
  2506 ;;		On entry : 0/0
  2507 ;;		On exit  : 0/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2510 ;;      Params:         5       0       0       0       0       0       0
  2511 ;;      Locals:         0       0       0       0       0       0       0
  2512 ;;      Temps:          2       0       0       0       0       0       0
  2513 ;;      Totals:         7       0       0       0       0       0       0
  2514 ;;Total ram usage:        7 bytes
  2515 ;; Hardware stack levels used:    1
  2516 ;; Hardware stack levels required when called:    4
  2517 ;; This function calls:
  2518 ;;		Nothing
  2519 ;; This function is called by:
  2520 ;;		_sendData
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           	psect	text4
  2525  00154C                     __ptext4:
  2526                           	opt stack 0
  2527  00154C                     _crcBufS_put:
  2528                           	opt stack 23
  2529                           
  2530                           ;FastTransfer.c: 325: _this->buf[_this->head] = address;
  2531                           
  2532                           ;incstack = 0
  2533  00154C  EE20 F00F          	lfsr	2,15
  2534  001550  501B               	movf	crcBufS_put@_this,w,c
  2535  001552  26D9               	addwf	fsr2l,f,c
  2536  001554  501C               	movf	crcBufS_put@_this+1,w,c
  2537  001556  22DA               	addwfc	fsr2h,f,c
  2538  001558  CFDE F020          	movff	postinc2,??_crcBufS_put
  2539  00155C  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2540  001560  5020               	movf	??_crcBufS_put,w,c
  2541  001562  241B               	addwf	crcBufS_put@_this,w,c
  2542  001564  6ED9               	movwf	fsr2l,c
  2543  001566  5021               	movf	??_crcBufS_put+1,w,c
  2544  001568  201C               	addwfc	crcBufS_put@_this+1,w,c
  2545  00156A  6EDA               	movwf	fsr2h,c
  2546  00156C  C01D  FFDF         	movff	crcBufS_put@address,indf2
  2547                           
  2548                           ;FastTransfer.c: 326: _this->head++;
  2549  001570  EE20 F00F          	lfsr	2,15
  2550  001574  501B               	movf	crcBufS_put@_this,w,c
  2551  001576  26D9               	addwf	fsr2l,f,c
  2552  001578  501C               	movf	crcBufS_put@_this+1,w,c
  2553  00157A  22DA               	addwfc	fsr2h,f,c
  2554  00157C  2ADE               	incf	postinc2,f,c
  2555  00157E  0E00               	movlw	0
  2556  001580  22DD               	addwfc	postdec2,f,c
  2557                           
  2558                           ;FastTransfer.c: 327: _this->buf[_this->head] = oldCRC;
  2559  001582  EE20 F00F          	lfsr	2,15
  2560  001586  501B               	movf	crcBufS_put@_this,w,c
  2561  001588  26D9               	addwf	fsr2l,f,c
  2562  00158A  501C               	movf	crcBufS_put@_this+1,w,c
  2563  00158C  22DA               	addwfc	fsr2h,f,c
  2564  00158E  CFDE F020          	movff	postinc2,??_crcBufS_put
  2565  001592  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2566  001596  5020               	movf	??_crcBufS_put,w,c
  2567  001598  241B               	addwf	crcBufS_put@_this,w,c
  2568  00159A  6ED9               	movwf	fsr2l,c
  2569  00159C  5021               	movf	??_crcBufS_put+1,w,c
  2570  00159E  201C               	addwfc	crcBufS_put@_this+1,w,c
  2571  0015A0  6EDA               	movwf	fsr2h,c
  2572  0015A2  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  2573                           
  2574                           ;FastTransfer.c: 328: _this->head++;
  2575  0015A6  EE20 F00F          	lfsr	2,15
  2576  0015AA  501B               	movf	crcBufS_put@_this,w,c
  2577  0015AC  26D9               	addwf	fsr2l,f,c
  2578  0015AE  501C               	movf	crcBufS_put@_this+1,w,c
  2579  0015B0  22DA               	addwfc	fsr2h,f,c
  2580  0015B2  2ADE               	incf	postinc2,f,c
  2581  0015B4  0E00               	movlw	0
  2582  0015B6  22DD               	addwfc	postdec2,f,c
  2583                           
  2584                           ;FastTransfer.c: 329: _this->buf[_this->head] = status;
  2585  0015B8  EE20 F00F          	lfsr	2,15
  2586  0015BC  501B               	movf	crcBufS_put@_this,w,c
  2587  0015BE  26D9               	addwf	fsr2l,f,c
  2588  0015C0  501C               	movf	crcBufS_put@_this+1,w,c
  2589  0015C2  22DA               	addwfc	fsr2h,f,c
  2590  0015C4  CFDE F020          	movff	postinc2,??_crcBufS_put
  2591  0015C8  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2592  0015CC  5020               	movf	??_crcBufS_put,w,c
  2593  0015CE  241B               	addwf	crcBufS_put@_this,w,c
  2594  0015D0  6ED9               	movwf	fsr2l,c
  2595  0015D2  5021               	movf	??_crcBufS_put+1,w,c
  2596  0015D4  201C               	addwfc	crcBufS_put@_this+1,w,c
  2597  0015D6  6EDA               	movwf	fsr2h,c
  2598  0015D8  C01F  FFDF         	movff	crcBufS_put@status,indf2
  2599                           
  2600                           ;FastTransfer.c: 330: _this->head++;
  2601  0015DC  EE20 F00F          	lfsr	2,15
  2602  0015E0  501B               	movf	crcBufS_put@_this,w,c
  2603  0015E2  26D9               	addwf	fsr2l,f,c
  2604  0015E4  501C               	movf	crcBufS_put@_this+1,w,c
  2605  0015E6  22DA               	addwfc	fsr2h,f,c
  2606  0015E8  2ADE               	incf	postinc2,f,c
  2607  0015EA  0E00               	movlw	0
  2608  0015EC  22DD               	addwfc	postdec2,f,c
  2609                           
  2610                           ;FastTransfer.c: 331: if (_this->head >= (5 * 3)) {
  2611  0015EE  EE20 F00F          	lfsr	2,15
  2612  0015F2  501B               	movf	crcBufS_put@_this,w,c
  2613  0015F4  26D9               	addwf	fsr2l,f,c
  2614  0015F6  501C               	movf	crcBufS_put@_this+1,w,c
  2615  0015F8  22DA               	addwfc	fsr2h,f,c
  2616  0015FA  0E01               	movlw	1
  2617  0015FC  BEDB               	btfsc	plusw2,7,c
  2618  0015FE  0012               	return	
  2619  001600  0E01               	movlw	1
  2620  001602  50DB               	movf	plusw2,w,c
  2621  001604  E104               	bnz	u5950
  2622  001606  0E0F               	movlw	15
  2623  001608  5CDE               	subwf	postinc2,w,c
  2624  00160A  A0D8               	btfss	status,0,c
  2625  00160C  0012               	return	
  2626  00160E                     u5950:
  2627                           
  2628                           ;FastTransfer.c: 332: _this->head = 0;
  2629  00160E  EE20 F00F          	lfsr	2,15
  2630  001612  501B               	movf	crcBufS_put@_this,w,c
  2631  001614  26D9               	addwf	fsr2l,f,c
  2632  001616  501C               	movf	crcBufS_put@_this+1,w,c
  2633  001618  22DA               	addwfc	fsr2h,f,c
  2634  00161A  0E00               	movlw	0
  2635  00161C  6EDE               	movwf	postinc2,c
  2636  00161E  0E00               	movlw	0
  2637  001620  6EDD               	movwf	postdec2,c
  2638  001622  0012               	return	
  2639  001624                     __end_of_crcBufS_put:
  2640                           	opt stack 0
  2641                           tosu	equ	0xFFF
  2642                           tosh	equ	0xFFE
  2643                           tosl	equ	0xFFD
  2644                           pclath	equ	0xFFA
  2645                           tblptru	equ	0xFF8
  2646                           tblptrh	equ	0xFF7
  2647                           tblptrl	equ	0xFF6
  2648                           tablat	equ	0xFF5
  2649                           intcon	equ	0xFF2
  2650                           postinc0	equ	0xFEE
  2651                           wreg	equ	0xFE8
  2652                           indf2	equ	0xFDF
  2653                           postinc2	equ	0xFDE
  2654                           postdec2	equ	0xFDD
  2655                           plusw2	equ	0xFDB
  2656                           fsr2h	equ	0xFDA
  2657                           fsr2l	equ	0xFD9
  2658                           status	equ	0xFD8
  2659                           
  2660 ;; *************** function _FastTransfer_buffer_flush *****************
  2661 ;; Defined at:
  2662 ;;		line 264 in file "FastTransfer.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;  _this           2    0[BANK0 ] PTR struct ringBufS
  2665 ;;		 -> ring_buffer(206), 
  2666 ;;  clearBuffer     2    2[BANK0 ] const int 
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;		None
  2669 ;; Return value:  Size  Location     Type
  2670 ;;		None               void
  2671 ;; Registers used:
  2672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2678 ;;      Params:         0       4       0       0       0       0       0
  2679 ;;      Locals:         0       0       0       0       0       0       0
  2680 ;;      Temps:          0       0       0       0       0       0       0
  2681 ;;      Totals:         0       4       0       0       0       0       0
  2682 ;;Total ram usage:        4 bytes
  2683 ;; Hardware stack levels used:    1
  2684 ;; Hardware stack levels required when called:    5
  2685 ;; This function calls:
  2686 ;;		_memset
  2687 ;; This function is called by:
  2688 ;;		_sendData
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           	psect	text5
  2693  001C2C                     __ptext5:
  2694                           	opt stack 0
  2695  001C2C                     _FastTransfer_buffer_flush:
  2696                           	opt stack 22
  2697                           
  2698                           ;FastTransfer.c: 265: _this->count = 0;
  2699                           
  2700                           ;incstack = 0
  2701  001C2C  0100               	movlb	0	; () banked
  2702  001C2E  EE20 F0CC          	lfsr	2,204
  2703  001C32  51F0               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  2704  001C34  26D9               	addwf	fsr2l,f,c
  2705  001C36  51F1               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  2706  001C38  22DA               	addwfc	fsr2h,f,c
  2707  001C3A  0E00               	movlw	0
  2708  001C3C  6EDE               	movwf	postinc2,c
  2709  001C3E  0E00               	movlw	0
  2710  001C40  6EDD               	movwf	postdec2,c
  2711                           
  2712                           ;FastTransfer.c: 266: _this->head = 0;
  2713  001C42  0100               	movlb	0	; () banked
  2714  001C44  EE20 F0C8          	lfsr	2,200
  2715  001C48  51F0               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  2716  001C4A  26D9               	addwf	fsr2l,f,c
  2717  001C4C  51F1               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  2718  001C4E  22DA               	addwfc	fsr2h,f,c
  2719  001C50  0E00               	movlw	0
  2720  001C52  6EDE               	movwf	postinc2,c
  2721  001C54  0E00               	movlw	0
  2722  001C56  6EDD               	movwf	postdec2,c
  2723                           
  2724                           ;FastTransfer.c: 267: _this->tail = 0;
  2725  001C58  0100               	movlb	0	; () banked
  2726  001C5A  EE20 F0CA          	lfsr	2,202
  2727  001C5E  51F0               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  2728  001C60  26D9               	addwf	fsr2l,f,c
  2729  001C62  51F1               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  2730  001C64  22DA               	addwfc	fsr2h,f,c
  2731  001C66  0E00               	movlw	0
  2732  001C68  6EDE               	movwf	postinc2,c
  2733  001C6A  0E00               	movlw	0
  2734  001C6C  6EDD               	movwf	postdec2,c
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;FastTransfer.c: 268: if (clearBuffer) {
  2738  001C6E  0100               	movlb	0	; () banked
  2739  001C70  51F2               	movf	FastTransfer_buffer_flush@clearBuffer& (0+255),w,b
  2740  001C72  0100               	movlb	0	; () banked
  2741  001C74  11F3               	iorwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),w,b
  2742  001C76  B4D8               	btfsc	status,2,c
  2743  001C78  0012               	return	
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;FastTransfer.c: 269: memset(_this->buf, 0, sizeof (_this->buf));
  2747  001C7A  C0F0  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  2748  001C7E  C0F1  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  2749  001C82  0E00               	movlw	0
  2750  001C84  6E1E               	movwf	memset@c+1,c
  2751  001C86  0E00               	movlw	0
  2752  001C88  6E1D               	movwf	memset@c,c
  2753  001C8A  0E00               	movlw	0
  2754  001C8C  6E20               	movwf	memset@n+1,c
  2755  001C8E  0EC8               	movlw	200
  2756  001C90  6E1F               	movwf	memset@n,c
  2757  001C92  ECDA  F00F         	call	_memset	;wreg free
  2758  001C96  0012               	return	
  2759  001C98                     __end_of_FastTransfer_buffer_flush:
  2760                           	opt stack 0
  2761                           tosu	equ	0xFFF
  2762                           tosh	equ	0xFFE
  2763                           tosl	equ	0xFFD
  2764                           pclath	equ	0xFFA
  2765                           tblptru	equ	0xFF8
  2766                           tblptrh	equ	0xFF7
  2767                           tblptrl	equ	0xFF6
  2768                           tablat	equ	0xFF5
  2769                           intcon	equ	0xFF2
  2770                           postinc0	equ	0xFEE
  2771                           wreg	equ	0xFE8
  2772                           indf2	equ	0xFDF
  2773                           postinc2	equ	0xFDE
  2774                           postdec2	equ	0xFDD
  2775                           plusw2	equ	0xFDB
  2776                           fsr2h	equ	0xFDA
  2777                           fsr2l	equ	0xFD9
  2778                           status	equ	0xFD8
  2779                           
  2780 ;; *************** function _buttonsCollector *****************
  2781 ;; Defined at:
  2782 ;;		line 56 in file "Communications.c"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;		None
  2785 ;; Auto vars:     Size  Location     Type
  2786 ;;  i               2    2[BANK0 ] int 
  2787 ;;  sendVal         2    0[BANK0 ] unsigned int 
  2788 ;; Return value:  Size  Location     Type
  2789 ;;                  2   32[COMRAM] unsigned int 
  2790 ;; Registers used:
  2791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2792 ;; Tracked objects:
  2793 ;;		On entry : 0/0
  2794 ;;		On exit  : 0/0
  2795 ;;		Unchanged: 0/0
  2796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2797 ;;      Params:         2       0       0       0       0       0       0
  2798 ;;      Locals:         0       4       0       0       0       0       0
  2799 ;;      Temps:          3       0       0       0       0       0       0
  2800 ;;      Totals:         5       4       0       0       0       0       0
  2801 ;;Total ram usage:        9 bytes
  2802 ;; Hardware stack levels used:    1
  2803 ;; Hardware stack levels required when called:    5
  2804 ;; This function calls:
  2805 ;;		_GetButtonState
  2806 ;; This function is called by:
  2807 ;;		_respondECU
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811                           	psect	text6
  2812  001A3A                     __ptext6:
  2813                           	opt stack 0
  2814  001A3A                     _buttonsCollector:
  2815                           	opt stack 23
  2816                           
  2817                           ;Communications.c: 57: unsigned int sendVal = 0;
  2818                           
  2819                           ;incstack = 0
  2820  001A3A  0E00               	movlw	0
  2821  001A3C  0100               	movlb	0	; () banked
  2822  001A3E  6FF1               	movwf	(buttonsCollector@sendVal+1)& (0+255),b
  2823  001A40  0E00               	movlw	0
  2824  001A42  6FF0               	movwf	buttonsCollector@sendVal& (0+255),b
  2825                           
  2826                           ;Communications.c: 58: int i = 0;
  2827  001A44  0E00               	movlw	0
  2828  001A46  0100               	movlb	0	; () banked
  2829  001A48  6FF3               	movwf	(buttonsCollector@i+1)& (0+255),b
  2830  001A4A  0E00               	movlw	0
  2831  001A4C  6FF2               	movwf	buttonsCollector@i& (0+255),b
  2832                           
  2833                           ;Communications.c: 59: for (i = 0; i < 8; i++) {
  2834  001A4E  0E00               	movlw	0
  2835  001A50  0100               	movlb	0	; () banked
  2836  001A52  6FF3               	movwf	(buttonsCollector@i+1)& (0+255),b
  2837  001A54  0E00               	movlw	0
  2838  001A56  6FF2               	movwf	buttonsCollector@i& (0+255),b
  2839                           
  2840                           ; BSR set to: 0
  2841  001A58  0100               	movlb	0	; () banked
  2842  001A5A  BFF3               	btfsc	(buttonsCollector@i+1)& (0+255),7,b
  2843  001A5C  D008               	goto	l5936
  2844  001A5E  0100               	movlb	0	; () banked
  2845  001A60  51F3               	movf	(buttonsCollector@i+1)& (0+255),w,b
  2846  001A62  E12B               	bnz	l921
  2847  001A64  0E08               	movlw	8
  2848  001A66  0100               	movlb	0	; () banked
  2849  001A68  5DF2               	subwf	buttonsCollector@i& (0+255),w,b
  2850  001A6A  B0D8               	btfsc	status,0,c
  2851  001A6C  D026               	goto	l921
  2852  001A6E                     l5936:
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;Communications.c: 60: sendVal = sendVal | ((GetButtonState(i)&0x01) << i);
  2856  001A6E  C0F2  F023         	movff	buttonsCollector@i,??_buttonsCollector
  2857  001A72  C0F2  F01B         	movff	buttonsCollector@i,GetButtonState@btnnum
  2858  001A76  C0F3  F01C         	movff	buttonsCollector@i+1,GetButtonState@btnnum+1
  2859  001A7A  EC2F  F010         	call	_GetButtonState	;wreg free
  2860  001A7E  0B01               	andlw	1
  2861  001A80  6E24               	movwf	(??_buttonsCollector+1)& (0+255),c
  2862  001A82  6A25               	clrf	(??_buttonsCollector+2)& (0+255),c
  2863  001A84  2A23               	incf	??_buttonsCollector,f,c
  2864  001A86  D003               	goto	u6234
  2865  001A88                     u6235:
  2866  001A88  90D8               	bcf	status,0,c
  2867  001A8A  3624               	rlcf	??_buttonsCollector+1,f,c
  2868  001A8C  3625               	rlcf	??_buttonsCollector+2,f,c
  2869  001A8E                     u6234:
  2870  001A8E  2E23               	decfsz	??_buttonsCollector,f,c
  2871  001A90  D7FB               	goto	u6235
  2872  001A92  0100               	movlb	0	; () banked
  2873  001A94  51F0               	movf	buttonsCollector@sendVal& (0+255),w,b
  2874  001A96  1024               	iorwf	??_buttonsCollector+1,w,c
  2875  001A98  0100               	movlb	0	; () banked
  2876  001A9A  6FF0               	movwf	buttonsCollector@sendVal& (0+255),b
  2877  001A9C  0100               	movlb	0	; () banked
  2878  001A9E  51F1               	movf	(buttonsCollector@sendVal+1)& (0+255),w,b
  2879  001AA0  1025               	iorwf	??_buttonsCollector+2,w,c
  2880  001AA2  0100               	movlb	0	; () banked
  2881  001AA4  6FF1               	movwf	(buttonsCollector@sendVal+1)& (0+255),b
  2882                           
  2883                           ; BSR set to: 0
  2884  001AA6  0100               	movlb	0	; () banked
  2885  001AA8  4BF2               	infsnz	buttonsCollector@i& (0+255),f,b
  2886  001AAA  2BF3               	incf	(buttonsCollector@i+1)& (0+255),f,b
  2887                           
  2888                           ; BSR set to: 0
  2889  001AAC  0100               	movlb	0	; () banked
  2890  001AAE  BFF3               	btfsc	(buttonsCollector@i+1)& (0+255),7,b
  2891  001AB0  D7DE               	goto	l5936
  2892  001AB2  0100               	movlb	0	; () banked
  2893  001AB4  51F3               	movf	(buttonsCollector@i+1)& (0+255),w,b
  2894  001AB6  E101               	bnz	u6240
  2895  001AB8  D7D5               	goto	L1
  2896  001ABA                     u6240:
  2897  001ABA                     l921:
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;Communications.c: 61: }
  2901                           ;Communications.c: 62: return sendVal;
  2902  001ABA  C0F0  F021         	movff	buttonsCollector@sendVal,?_buttonsCollector
  2903  001ABE  C0F1  F022         	movff	buttonsCollector@sendVal+1,?_buttonsCollector+1
  2904                           
  2905                           ; BSR set to: 0
  2906  001AC2  0012               	return		;funcret
  2907  001AC4                     __end_of_buttonsCollector:
  2908                           	opt stack 0
  2909                           tosu	equ	0xFFF
  2910                           tosh	equ	0xFFE
  2911                           tosl	equ	0xFFD
  2912                           pclath	equ	0xFFA
  2913                           tblptru	equ	0xFF8
  2914                           tblptrh	equ	0xFF7
  2915                           tblptrl	equ	0xFF6
  2916                           tablat	equ	0xFF5
  2917                           intcon	equ	0xFF2
  2918                           postinc0	equ	0xFEE
  2919                           wreg	equ	0xFE8
  2920                           indf2	equ	0xFDF
  2921                           postinc2	equ	0xFDE
  2922                           postdec2	equ	0xFDD
  2923                           plusw2	equ	0xFDB
  2924                           fsr2h	equ	0xFDA
  2925                           fsr2l	equ	0xFD9
  2926                           status	equ	0xFD8
  2927                           
  2928 ;; *************** function _GetButtonState *****************
  2929 ;; Defined at:
  2930 ;;		line 184 in file "IO.c"
  2931 ;; Parameters:    Size  Location     Type
  2932 ;;  btnnum          2   26[COMRAM] int 
  2933 ;; Auto vars:     Size  Location     Type
  2934 ;;		None
  2935 ;; Return value:  Size  Location     Type
  2936 ;;                  1    wreg      unsigned char 
  2937 ;; Registers used:
  2938 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2939 ;; Tracked objects:
  2940 ;;		On entry : 0/0
  2941 ;;		On exit  : 0/0
  2942 ;;		Unchanged: 0/0
  2943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2944 ;;      Params:         2       0       0       0       0       0       0
  2945 ;;      Locals:         0       0       0       0       0       0       0
  2946 ;;      Temps:          4       0       0       0       0       0       0
  2947 ;;      Totals:         6       0       0       0       0       0       0
  2948 ;;Total ram usage:        6 bytes
  2949 ;; Hardware stack levels used:    1
  2950 ;; Hardware stack levels required when called:    4
  2951 ;; This function calls:
  2952 ;;		Nothing
  2953 ;; This function is called by:
  2954 ;;		_main
  2955 ;;		_buttonsCollector
  2956 ;; This function uses a non-reentrant model
  2957 ;;
  2958                           
  2959                           	psect	text7
  2960  00205E                     __ptext7:
  2961                           	opt stack 0
  2962  00205E                     _GetButtonState:
  2963                           	opt stack 23
  2964                           
  2965                           ;IO.c: 185: return butnarray[btnnum - 1];
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;incstack = 0
  2969  00205E  0EFF               	movlw	255
  2970  002060  6E1D               	movwf	??_GetButtonState& (0+255),c
  2971  002062  0EFF               	movlw	255
  2972  002064  6E1E               	movwf	(??_GetButtonState+1)& (0+255),c
  2973  002066  C01B  F01F         	movff	GetButtonState@btnnum,??_GetButtonState+2
  2974  00206A  C01C  F020         	movff	GetButtonState@btnnum+1,??_GetButtonState+3
  2975  00206E  501D               	movf	??_GetButtonState,w,c
  2976  002070  261F               	addwf	??_GetButtonState+2,f,c
  2977  002072  501E               	movf	??_GetButtonState+1,w,c
  2978  002074  2220               	addwfc	??_GetButtonState+3,f,c
  2979  002076  0EB0               	movlw	low _butnarray
  2980  002078  241F               	addwf	??_GetButtonState+2,w,c
  2981  00207A  6ED9               	movwf	fsr2l,c
  2982  00207C  0E00               	movlw	high _butnarray
  2983  00207E  2020               	addwfc	??_GetButtonState+3,w,c
  2984  002080  6EDA               	movwf	fsr2h,c
  2985  002082  50DF               	movf	indf2,w,c
  2986  002084  0012               	return	
  2987  002086                     __end_of_GetButtonState:
  2988                           	opt stack 0
  2989                           tosu	equ	0xFFF
  2990                           tosh	equ	0xFFE
  2991                           tosl	equ	0xFFD
  2992                           pclath	equ	0xFFA
  2993                           tblptru	equ	0xFF8
  2994                           tblptrh	equ	0xFF7
  2995                           tblptrl	equ	0xFF6
  2996                           tablat	equ	0xFF5
  2997                           intcon	equ	0xFF2
  2998                           postinc0	equ	0xFEE
  2999                           wreg	equ	0xFE8
  3000                           indf2	equ	0xFDF
  3001                           postinc2	equ	0xFDE
  3002                           postdec2	equ	0xFDD
  3003                           plusw2	equ	0xFDB
  3004                           fsr2h	equ	0xFDA
  3005                           fsr2l	equ	0xFD9
  3006                           status	equ	0xFD8
  3007                           
  3008 ;; *************** function _ToSend *****************
  3009 ;; Defined at:
  3010 ;;		line 219 in file "FastTransfer.c"
  3011 ;; Parameters:    Size  Location     Type
  3012 ;;  where           1    wreg     unsigned char 
  3013 ;;  what            2    4[BANK0 ] unsigned int 
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;  where           1    6[BANK0 ] unsigned char 
  3016 ;; Return value:  Size  Location     Type
  3017 ;;		None               void
  3018 ;; Registers used:
  3019 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3020 ;; Tracked objects:
  3021 ;;		On entry : 0/0
  3022 ;;		On exit  : 0/0
  3023 ;;		Unchanged: 0/0
  3024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3025 ;;      Params:         0       2       0       0       0       0       0
  3026 ;;      Locals:         0       1       0       0       0       0       0
  3027 ;;      Temps:          0       0       0       0       0       0       0
  3028 ;;      Totals:         0       3       0       0       0       0       0
  3029 ;;Total ram usage:        3 bytes
  3030 ;; Hardware stack levels used:    1
  3031 ;; Hardware stack levels required when called:    6
  3032 ;; This function calls:
  3033 ;;		_FastTransfer_buffer_put
  3034 ;; This function is called by:
  3035 ;;		_respondECU
  3036 ;; This function uses a non-reentrant model
  3037 ;;
  3038                           
  3039                           	psect	text8
  3040  0020EE                     __ptext8:
  3041                           	opt stack 0
  3042  0020EE                     _ToSend:
  3043                           	opt stack 22
  3044                           
  3045                           ;incstack = 0
  3046                           ;ToSend@where stored from wreg
  3047  0020EE  0100               	movlb	0	; () banked
  3048  0020F0  6FF6               	movwf	ToSend@where& (0+255),b
  3049                           
  3050                           ;FastTransfer.c: 220: FastTransfer_buffer_put(&ring_buffer, where, what);
  3051  0020F2  0E00               	movlw	low _ring_buffer
  3052  0020F4  6E21               	movwf	FastTransfer_buffer_put@_this,c
  3053  0020F6  0E02               	movlw	high _ring_buffer
  3054  0020F8  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  3055  0020FA  C0F6  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  3056  0020FE  C0F4  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  3057  002102  C0F5  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  3058  002106  EC78  F006         	call	_FastTransfer_buffer_put	;wreg free
  3059  00210A  0012               	return		;funcret
  3060  00210C                     __end_of_ToSend:
  3061                           	opt stack 0
  3062                           tosu	equ	0xFFF
  3063                           tosh	equ	0xFFE
  3064                           tosl	equ	0xFFD
  3065                           pclath	equ	0xFFA
  3066                           tblptru	equ	0xFF8
  3067                           tblptrh	equ	0xFF7
  3068                           tblptrl	equ	0xFF6
  3069                           tablat	equ	0xFF5
  3070                           intcon	equ	0xFF2
  3071                           postinc0	equ	0xFEE
  3072                           wreg	equ	0xFE8
  3073                           indf2	equ	0xFDF
  3074                           postinc2	equ	0xFDE
  3075                           postdec2	equ	0xFDD
  3076                           plusw2	equ	0xFDB
  3077                           fsr2h	equ	0xFDA
  3078                           fsr2l	equ	0xFD9
  3079                           status	equ	0xFD8
  3080                           
  3081 ;; *************** function _FastTransfer_buffer_put *****************
  3082 ;; Defined at:
  3083 ;;		line 226 in file "FastTransfer.c"
  3084 ;; Parameters:    Size  Location     Type
  3085 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  3086 ;;		 -> ring_buffer(206), 
  3087 ;;  towhere         1   34[COMRAM] unsigned char 
  3088 ;;  towhat          2   35[COMRAM] unsigned int 
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;		None
  3091 ;; Return value:  Size  Location     Type
  3092 ;;		None               void
  3093 ;; Registers used:
  3094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : 0/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3100 ;;      Params:         5       0       0       0       0       0       0
  3101 ;;      Locals:         0       0       0       0       0       0       0
  3102 ;;      Temps:          0       2       0       0       0       0       0
  3103 ;;      Totals:         5       2       0       0       0       0       0
  3104 ;;Total ram usage:        7 bytes
  3105 ;; Hardware stack levels used:    1
  3106 ;; Hardware stack levels required when called:    5
  3107 ;; This function calls:
  3108 ;;		_FastTransfer_buffer_modulo_inc
  3109 ;; This function is called by:
  3110 ;;		_ToSend
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114                           	psect	text9
  3115  000CF0                     __ptext9:
  3116                           	opt stack 0
  3117  000CF0                     _FastTransfer_buffer_put:
  3118                           	opt stack 22
  3119                           
  3120                           ;FastTransfer.c: 228: group.integer = towhat;
  3121                           
  3122                           ;incstack = 0
  3123  000CF0  C024  F028         	movff	FastTransfer_buffer_put@towhat,_group
  3124  000CF4  C025  F029         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  3125                           
  3126                           ;FastTransfer.c: 230: if (_this->count < (200 - 3)) {
  3127  000CF8  EE20 F0CC          	lfsr	2,204
  3128  000CFC  5021               	movf	FastTransfer_buffer_put@_this,w,c
  3129  000CFE  26D9               	addwf	fsr2l,f,c
  3130  000D00  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  3131  000D02  22DA               	addwfc	fsr2h,f,c
  3132  000D04  0E01               	movlw	1
  3133  000D06  BEDB               	btfsc	plusw2,7,c
  3134  000D08  D007               	goto	l5712
  3135  000D0A  0E01               	movlw	1
  3136  000D0C  50DB               	movf	plusw2,w,c
  3137  000D0E  E103               	bnz	u5971
  3138  000D10  0EC5               	movlw	197
  3139  000D12  5CDE               	subwf	postinc2,w,c
  3140  000D14  B0D8               	btfsc	status,0,c
  3141  000D16                     u5971:
  3142  000D16  0012               	return	
  3143  000D18                     l5712:
  3144                           
  3145                           ;FastTransfer.c: 231: _this->buf[_this->head] = towhere;
  3146  000D18  EE20 F0C8          	lfsr	2,200
  3147  000D1C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  3148  000D1E  26D9               	addwf	fsr2l,f,c
  3149  000D20  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  3150  000D22  22DA               	addwfc	fsr2h,f,c
  3151  000D24  CFDE F0F0          	movff	postinc2,??_FastTransfer_buffer_put
  3152  000D28  CFDD F0F1          	movff	postdec2,??_FastTransfer_buffer_put+1
  3153  000D2C  0100               	movlb	0	; () banked
  3154  000D2E  51F0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  3155  000D30  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  3156  000D32  6ED9               	movwf	fsr2l,c
  3157  000D34  0100               	movlb	0	; () banked
  3158  000D36  51F1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  3159  000D38  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  3160  000D3A  6EDA               	movwf	fsr2h,c
  3161  000D3C  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  3165  000D40  EE20 F0C8          	lfsr	2,200
  3166  000D44  5021               	movf	FastTransfer_buffer_put@_this,w,c
  3167  000D46  26D9               	addwf	fsr2l,f,c
  3168  000D48  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  3169  000D4A  22DA               	addwfc	fsr2h,f,c
  3170  000D4C  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  3171  000D50  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  3172  000D54  0E00               	movlw	0
  3173  000D56  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  3174  000D58  0EC8               	movlw	200
  3175  000D5A  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  3176  000D5C  ECF0  F00F         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  3177  000D60  EE20 F0C8          	lfsr	2,200
  3178  000D64  5021               	movf	FastTransfer_buffer_put@_this,w,c
  3179  000D66  26D9               	addwf	fsr2l,f,c
  3180  000D68  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  3181  000D6A  22DA               	addwfc	fsr2h,f,c
  3182  000D6C  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  3183  000D70  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  3184                           
  3185                           ;FastTransfer.c: 233: ++_this->count;
  3186  000D74  EE20 F0CC          	lfsr	2,204
  3187  000D78  5021               	movf	FastTransfer_buffer_put@_this,w,c
  3188  000D7A  26D9               	addwf	fsr2l,f,c
  3189  000D7C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  3190  000D7E  22DA               	addwfc	fsr2h,f,c
  3191  000D80  2ADE               	incf	postinc2,f,c
  3192  000D82  0E00               	movlw	0
  3193  000D84  22DD               	addwfc	postdec2,f,c
  3194                           
  3195                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[0];
  3196  000D86  EE20 F0C8          	lfsr	2,200
  3197  000D8A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  3198  000D8C  26D9               	addwf	fsr2l,f,c
  3199  000D8E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  3200  000D90  22DA               	addwfc	fsr2h,f,c
  3201  000D92  CFDE F0F0          	movff	postinc2,??_FastTransfer_buffer_put
  3202  000D96  CFDD F0F1          	movff	postdec2,??_FastTransfer_buffer_put+1
  3203  000D9A  0100               	movlb	0	; () banked
  3204  000D9C  51F0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  3205  000D9E  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  3206  000DA0  6ED9               	movwf	fsr2l,c
  3207  000DA2  0100               	movlb	0	; () banked
  3208  000DA4  51F1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  3209  000DA6  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  3210  000DA8  6EDA               	movwf	fsr2h,c
  3211  000DAA  C028  FFDF         	movff	_group,indf2
  3212                           
  3213                           ; BSR set to: 0
  3214                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  3215  000DAE  EE20 F0C8          	lfsr	2,200
  3216  000DB2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  3217  000DB4  26D9               	addwf	fsr2l,f,c
  3218  000DB6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  3219  000DB8  22DA               	addwfc	fsr2h,f,c
  3220  000DBA  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  3221  000DBE  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  3222  000DC2  0E00               	movlw	0
  3223  000DC4  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  3224  000DC6  0EC8               	movlw	200
  3225  000DC8  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  3226  000DCA  ECF0  F00F         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  3227  000DCE  EE20 F0C8          	lfsr	2,200
  3228  000DD2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  3229  000DD4  26D9               	addwf	fsr2l,f,c
  3230  000DD6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  3231  000DD8  22DA               	addwfc	fsr2h,f,c
  3232  000DDA  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  3233  000DDE  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  3234                           
  3235                           ;FastTransfer.c: 236: ++_this->count;
  3236  000DE2  EE20 F0CC          	lfsr	2,204
  3237  000DE6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  3238  000DE8  26D9               	addwf	fsr2l,f,c
  3239  000DEA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  3240  000DEC  22DA               	addwfc	fsr2h,f,c
  3241  000DEE  2ADE               	incf	postinc2,f,c
  3242  000DF0  0E00               	movlw	0
  3243  000DF2  22DD               	addwfc	postdec2,f,c
  3244                           
  3245                           ;FastTransfer.c: 237: _this->buf[_this->head] = group.parts[1];
  3246  000DF4  EE20 F0C8          	lfsr	2,200
  3247  000DF8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  3248  000DFA  26D9               	addwf	fsr2l,f,c
  3249  000DFC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  3250  000DFE  22DA               	addwfc	fsr2h,f,c
  3251  000E00  CFDE F0F0          	movff	postinc2,??_FastTransfer_buffer_put
  3252  000E04  CFDD F0F1          	movff	postdec2,??_FastTransfer_buffer_put+1
  3253  000E08  0100               	movlb	0	; () banked
  3254  000E0A  51F0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  3255  000E0C  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  3256  000E0E  6ED9               	movwf	fsr2l,c
  3257  000E10  0100               	movlb	0	; () banked
  3258  000E12  51F1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  3259  000E14  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  3260  000E16  6EDA               	movwf	fsr2h,c
  3261  000E18  C029  FFDF         	movff	_group+1,indf2
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;FastTransfer.c: 238: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  3265  000E1C  EE20 F0C8          	lfsr	2,200
  3266  000E20  5021               	movf	FastTransfer_buffer_put@_this,w,c
  3267  000E22  26D9               	addwf	fsr2l,f,c
  3268  000E24  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  3269  000E26  22DA               	addwfc	fsr2h,f,c
  3270  000E28  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  3271  000E2C  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  3272  000E30  0E00               	movlw	0
  3273  000E32  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  3274  000E34  0EC8               	movlw	200
  3275  000E36  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  3276  000E38  ECF0  F00F         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  3277  000E3C  EE20 F0C8          	lfsr	2,200
  3278  000E40  5021               	movf	FastTransfer_buffer_put@_this,w,c
  3279  000E42  26D9               	addwf	fsr2l,f,c
  3280  000E44  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  3281  000E46  22DA               	addwfc	fsr2h,f,c
  3282  000E48  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  3283  000E4C  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  3284                           
  3285                           ;FastTransfer.c: 239: ++_this->count;
  3286  000E50  EE20 F0CC          	lfsr	2,204
  3287  000E54  5021               	movf	FastTransfer_buffer_put@_this,w,c
  3288  000E56  26D9               	addwf	fsr2l,f,c
  3289  000E58  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  3290  000E5A  22DA               	addwfc	fsr2h,f,c
  3291  000E5C  2ADE               	incf	postinc2,f,c
  3292  000E5E  0E00               	movlw	0
  3293  000E60  22DD               	addwfc	postdec2,f,c
  3294  000E62  0012               	return	
  3295  000E64                     __end_of_FastTransfer_buffer_put:
  3296                           	opt stack 0
  3297                           tosu	equ	0xFFF
  3298                           tosh	equ	0xFFE
  3299                           tosl	equ	0xFFD
  3300                           pclath	equ	0xFFA
  3301                           tblptru	equ	0xFF8
  3302                           tblptrh	equ	0xFF7
  3303                           tblptrl	equ	0xFF6
  3304                           tablat	equ	0xFF5
  3305                           intcon	equ	0xFF2
  3306                           postinc0	equ	0xFEE
  3307                           wreg	equ	0xFE8
  3308                           indf2	equ	0xFDF
  3309                           postinc2	equ	0xFDE
  3310                           postdec2	equ	0xFDD
  3311                           plusw2	equ	0xFDB
  3312                           fsr2h	equ	0xFDA
  3313                           fsr2l	equ	0xFD9
  3314                           status	equ	0xFD8
  3315                           
  3316 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  3317 ;; Defined at:
  3318 ;;		line 276 in file "FastTransfer.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  value           2   26[COMRAM] const unsigned int 
  3321 ;;  modulus         2   28[COMRAM] const unsigned int 
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;  my_value        2   30[COMRAM] unsigned int 
  3324 ;; Return value:  Size  Location     Type
  3325 ;;                  2   26[COMRAM] unsigned int 
  3326 ;; Registers used:
  3327 ;;		wreg, status,2, status,0
  3328 ;; Tracked objects:
  3329 ;;		On entry : 0/0
  3330 ;;		On exit  : 0/0
  3331 ;;		Unchanged: 0/0
  3332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3333 ;;      Params:         4       0       0       0       0       0       0
  3334 ;;      Locals:         2       0       0       0       0       0       0
  3335 ;;      Temps:          0       0       0       0       0       0       0
  3336 ;;      Totals:         6       0       0       0       0       0       0
  3337 ;;Total ram usage:        6 bytes
  3338 ;; Hardware stack levels used:    1
  3339 ;; Hardware stack levels required when called:    4
  3340 ;; This function calls:
  3341 ;;		Nothing
  3342 ;; This function is called by:
  3343 ;;		_FastTransfer_buffer_put
  3344 ;;		_FastTransfer_buffer_get
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           	psect	text10
  3349  001FE0                     __ptext10:
  3350                           	opt stack 0
  3351  001FE0                     _FastTransfer_buffer_modulo_inc:
  3352                           	opt stack 22
  3353                           
  3354                           ;FastTransfer.c: 277: unsigned int my_value = value + 1;
  3355                           
  3356                           ;incstack = 0
  3357  001FE0  0E01               	movlw	1
  3358  001FE2  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  3359  001FE4  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  3360  001FE6  0E00               	movlw	0
  3361  001FE8  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  3362  001FEA  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  3363                           
  3364                           ;FastTransfer.c: 278: if (my_value >= modulus) {
  3365  001FEC  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  3366  001FEE  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  3367  001FF0  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  3368  001FF2  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  3369  001FF4  A0D8               	btfss	status,0,c
  3370  001FF6  D004               	goto	l5572
  3371                           
  3372                           ;FastTransfer.c: 279: my_value = 0;
  3373  001FF8  0E00               	movlw	0
  3374  001FFA  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  3375  001FFC  0E00               	movlw	0
  3376  001FFE  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  3377  002000                     l5572:
  3378                           
  3379                           ;FastTransfer.c: 280: }
  3380                           ;FastTransfer.c: 281: return (my_value);
  3381  002000  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  3382  002004  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  3383  002008  0012               	return	
  3384  00200A                     __end_of_FastTransfer_buffer_modulo_inc:
  3385                           	opt stack 0
  3386                           tosu	equ	0xFFF
  3387                           tosh	equ	0xFFE
  3388                           tosl	equ	0xFFD
  3389                           pclath	equ	0xFFA
  3390                           tblptru	equ	0xFF8
  3391                           tblptrh	equ	0xFF7
  3392                           tblptrl	equ	0xFF6
  3393                           tablat	equ	0xFF5
  3394                           intcon	equ	0xFF2
  3395                           postinc0	equ	0xFEE
  3396                           wreg	equ	0xFE8
  3397                           indf2	equ	0xFDF
  3398                           postinc2	equ	0xFDE
  3399                           postdec2	equ	0xFDD
  3400                           plusw2	equ	0xFDB
  3401                           fsr2h	equ	0xFDA
  3402                           fsr2l	equ	0xFD9
  3403                           status	equ	0xFD8
  3404                           
  3405 ;; *************** function _Delay *****************
  3406 ;; Defined at:
  3407 ;;		line 120 in file "main.c"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;  wait            2   26[COMRAM] int 
  3410 ;; Auto vars:     Size  Location     Type
  3411 ;;  x               2   29[COMRAM] int 
  3412 ;; Return value:  Size  Location     Type
  3413 ;;		None               void
  3414 ;; Registers used:
  3415 ;;		wreg, status,2, status,0
  3416 ;; Tracked objects:
  3417 ;;		On entry : 0/0
  3418 ;;		On exit  : 0/0
  3419 ;;		Unchanged: 0/0
  3420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3421 ;;      Params:         2       0       0       0       0       0       0
  3422 ;;      Locals:         2       0       0       0       0       0       0
  3423 ;;      Temps:          1       0       0       0       0       0       0
  3424 ;;      Totals:         5       0       0       0       0       0       0
  3425 ;;Total ram usage:        5 bytes
  3426 ;; Hardware stack levels used:    1
  3427 ;; Hardware stack levels required when called:    4
  3428 ;; This function calls:
  3429 ;;		Nothing
  3430 ;; This function is called by:
  3431 ;;		_respondECU
  3432 ;; This function uses a non-reentrant model
  3433 ;;
  3434                           
  3435                           	psect	text11
  3436  001F1E                     __ptext11:
  3437                           	opt stack 0
  3438  001F1E                     _Delay:
  3439                           	opt stack 24
  3440                           
  3441                           ;main.c: 121: int x;
  3442                           ;main.c: 122: for (x = 0; x < wait; x++) {
  3443                           
  3444                           ;incstack = 0
  3445  001F1E  0E00               	movlw	0
  3446  001F20  6E1F               	movwf	Delay@x+1,c
  3447  001F22  0E00               	movlw	0
  3448  001F24  6E1E               	movwf	Delay@x,c
  3449  001F26  D00A               	goto	l585
  3450  001F28                     l4050:
  3451                           
  3452                           ;main.c: 123: _delay((unsigned long)((1)*(16000000/4000.0)));
  3453  001F28  0E06               	movlw	6
  3454  001F2A  6E1D               	movwf	??_Delay& (0+255),c
  3455  001F2C  0E30               	movlw	48
  3456  001F2E                     u7107:
  3457  001F2E  2EE8               	decfsz	wreg,f,c
  3458  001F30  D7FE               	goto	u7107
  3459  001F32  2E1D               	decfsz	??_Delay& (0+255),f,c
  3460  001F34  D7FC               	goto	u7107
  3461  001F36  D000               	nop2	
  3462  001F38  4A1E               	infsnz	Delay@x,f,c
  3463  001F3A  2A1F               	incf	Delay@x+1,f,c
  3464  001F3C                     l585:
  3465  001F3C  501B               	movf	Delay@wait,w,c
  3466  001F3E  5C1E               	subwf	Delay@x,w,c
  3467  001F40  501F               	movf	Delay@x+1,w,c
  3468  001F42  0A80               	xorlw	128
  3469  001F44  6E1D               	movwf	??_Delay& (0+255),c
  3470  001F46  501C               	movf	Delay@wait+1,w,c
  3471  001F48  0A80               	xorlw	128
  3472  001F4A  581D               	subwfb	??_Delay& (0+255),w,c
  3473  001F4C  B0D8               	btfsc	status,0,c
  3474  001F4E  0012               	return	
  3475  001F50  D7EB               	goto	l4050
  3476  001F52                     __end_of_Delay:
  3477                           	opt stack 0
  3478                           tosu	equ	0xFFF
  3479                           tosh	equ	0xFFE
  3480                           tosl	equ	0xFFD
  3481                           pclath	equ	0xFFA
  3482                           tblptru	equ	0xFF8
  3483                           tblptrh	equ	0xFF7
  3484                           tblptrl	equ	0xFF6
  3485                           tablat	equ	0xFF5
  3486                           intcon	equ	0xFF2
  3487                           postinc0	equ	0xFEE
  3488                           wreg	equ	0xFE8
  3489                           indf2	equ	0xFDF
  3490                           postinc2	equ	0xFDE
  3491                           postdec2	equ	0xFDD
  3492                           plusw2	equ	0xFDB
  3493                           fsr2h	equ	0xFDA
  3494                           fsr2l	equ	0xFD9
  3495                           status	equ	0xFD8
  3496                           
  3497 ;; *************** function _receiveData *****************
  3498 ;; Defined at:
  3499 ;;		line 83 in file "FastTransfer.c"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;		None
  3502 ;; Auto vars:     Size  Location     Type
  3503 ;;  holder          3    3[BANK1 ] unsigned char [3]
  3504 ;;  crcHolder       1    7[BANK1 ] unsigned char 
  3505 ;;  holder          3    0[BANK1 ] unsigned char [3]
  3506 ;;  crcHolder       1    6[BANK1 ] unsigned char 
  3507 ;;  u               2    8[BANK1 ] int 
  3508 ;;  r               2   10[BANK1 ] int 
  3509 ;; Return value:  Size  Location     Type
  3510 ;;                  1    wreg      unsigned char 
  3511 ;; Registers used:
  3512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3513 ;; Tracked objects:
  3514 ;;		On entry : 0/0
  3515 ;;		On exit  : 0/0
  3516 ;;		Unchanged: 0/0
  3517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3518 ;;      Params:         0       0       0       0       0       0       0
  3519 ;;      Locals:         0       0      12       0       0       0       0
  3520 ;;      Temps:          0       6       0       0       0       0       0
  3521 ;;      Totals:         0       6      12       0       0       0       0
  3522 ;;Total ram usage:       18 bytes
  3523 ;; Hardware stack levels used:    1
  3524 ;; Hardware stack levels required when called:    8
  3525 ;; This function calls:
  3526 ;;		Absolute function
  3527 ;;		_CRC8
  3528 ;;		_CRCcheck
  3529 ;;		_Receive_available
  3530 ;;		_Receive_get
  3531 ;;		_Receive_peek
  3532 ;;		_Send_put
  3533 ;; This function is called by:
  3534 ;;		_updateComms
  3535 ;; This function uses a non-reentrant model
  3536 ;;
  3537                           
  3538                           	psect	text12
  3539  0000BA                     __ptext12:
  3540                           	opt stack 0
  3541  0000BA                     _receiveData:
  3542                           	opt stack 21
  3543                           
  3544                           ;FastTransfer.c: 86: if (rx_len == 0) {
  3545                           
  3546                           ;incstack = 0
  3547  0000BA  503F               	movf	_rx_len,w,c
  3548  0000BC  A4D8               	btfss	status,2,c
  3549  0000BE  D0B1               	goto	l6068
  3550                           
  3551                           ;FastTransfer.c: 88: if (serial_available() > 4) {
  3552  0000C0  D801               	call	u6478
  3553  0000C2  D00A               	goto	u6479
  3554  0000C4                     u6478:
  3555  0000C4  0005               	push	
  3556  0000C6  6EFA               	movwf	pclath,c
  3557  0000C8  5030               	movf	_serial_available,w,c
  3558  0000CA  6EFD               	movwf	tosl,c
  3559  0000CC  5031               	movf	_serial_available+1,w,c
  3560  0000CE  6EFE               	movwf	tosh,c
  3561  0000D0  50F8               	movf	tblptru,w,c
  3562  0000D2  6EFF               	movwf	tosu,c
  3563  0000D4  50FA               	movf	pclath,w,c
  3564  0000D6  0012               	return		;indir
  3565  0000D8                     u6479:
  3566  0000D8  BE1E               	btfsc	?_Receive_available+1,7,c
  3567  0000DA  D0A3               	goto	l6068
  3568  0000DC  501E               	movf	?_Receive_available+1,w,c
  3569  0000DE  E104               	bnz	u6480
  3570  0000E0  0E05               	movlw	5
  3571  0000E2  5C1D               	subwf	?_Receive_available,w,c
  3572  0000E4  A0D8               	btfss	status,0,c
  3573  0000E6  D09D               	goto	l6068
  3574  0000E8                     u6480:
  3575                           
  3576                           ;FastTransfer.c: 89: do { LATA3 = ~LATA3; } while(0);
  3577  0000E8  B689               	btfsc	3977,3,c	;volatile
  3578  0000EA  D002               	goto	u6490
  3579  0000EC  8689               	bsf	3977,3,c	;volatile
  3580  0000EE  D01B               	goto	l6044
  3581  0000F0                     u6490:
  3582  0000F0  9689               	bcf	3977,3,c	;volatile
  3583                           
  3584                           ;FastTransfer.c: 91: while (serial_read() != 0x06) {
  3585  0000F2  D019               	goto	l6044
  3586  0000F4                     l6036:
  3587                           
  3588                           ;FastTransfer.c: 95: alignErrorCounter++;
  3589  0000F4  0100               	movlb	0	; () banked
  3590  0000F6  4BC5               	infsnz	_alignErrorCounter& (0+255),f,b
  3591  0000F8  2BC6               	incf	(_alignErrorCounter+1)& (0+255),f,b
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;FastTransfer.c: 96: if (serial_available() < 5)
  3595  0000FA  D801               	call	u6518
  3596  0000FC  D00A               	goto	u6519
  3597  0000FE                     u6518:
  3598  0000FE  0005               	push	
  3599  000100  6EFA               	movwf	pclath,c
  3600  000102  5030               	movf	_serial_available,w,c
  3601  000104  6EFD               	movwf	tosl,c
  3602  000106  5031               	movf	_serial_available+1,w,c
  3603  000108  6EFE               	movwf	tosh,c
  3604  00010A  50F8               	movf	tblptru,w,c
  3605  00010C  6EFF               	movwf	tosu,c
  3606  00010E  50FA               	movf	pclath,w,c
  3607  000110  0012               	return		;indir
  3608  000112                     u6519:
  3609  000112  BE1E               	btfsc	?_Receive_available+1,7,c
  3610  000114  D006               	goto	l6040
  3611  000116  501E               	movf	?_Receive_available+1,w,c
  3612  000118  E106               	bnz	l6044
  3613  00011A  0E05               	movlw	5
  3614  00011C  5C1D               	subwf	?_Receive_available,w,c
  3615  00011E  B0D8               	btfsc	status,0,c
  3616  000120  D002               	goto	l6044
  3617  000122                     l6040:
  3618                           
  3619                           ;FastTransfer.c: 97: return 0;
  3620  000122  0E00               	movlw	0
  3621  000124  0012               	return	
  3622  000126                     l6044:
  3623  000126  D801               	call	u6538
  3624  000128  D00A               	goto	u6539
  3625  00012A                     u6538:
  3626  00012A  0005               	push	
  3627  00012C  6EFA               	movwf	pclath,c
  3628  00012E  5032               	movf	_serial_read,w,c
  3629  000130  6EFD               	movwf	tosl,c
  3630  000132  5033               	movf	_serial_read+1,w,c
  3631  000134  6EFE               	movwf	tosh,c
  3632  000136  50F8               	movf	tblptru,w,c
  3633  000138  6EFF               	movwf	tosu,c
  3634  00013A  50FA               	movf	pclath,w,c
  3635  00013C  0012               	return		;indir
  3636  00013E                     u6539:
  3637  00013E  0A06               	xorlw	6
  3638  000140  A4D8               	btfss	status,2,c
  3639  000142  D7D8               	goto	l6036
  3640                           
  3641                           ;FastTransfer.c: 98: }
  3642                           ;FastTransfer.c: 99: if (serial_read() == 0x85) {
  3643  000144  D801               	call	u6558
  3644  000146  D00A               	goto	u6559
  3645  000148                     u6558:
  3646  000148  0005               	push	
  3647  00014A  6EFA               	movwf	pclath,c
  3648  00014C  5032               	movf	_serial_read,w,c
  3649  00014E  6EFD               	movwf	tosl,c
  3650  000150  5033               	movf	_serial_read+1,w,c
  3651  000152  6EFE               	movwf	tosh,c
  3652  000154  50F8               	movf	tblptru,w,c
  3653  000156  6EFF               	movwf	tosu,c
  3654  000158  50FA               	movf	pclath,w,c
  3655  00015A  0012               	return		;indir
  3656  00015C                     u6559:
  3657  00015C  0A85               	xorlw	133
  3658  00015E  A4D8               	btfss	status,2,c
  3659  000160  D060               	goto	l6068
  3660                           
  3661                           ;FastTransfer.c: 101: rx_address = serial_read();
  3662  000162  D801               	call	u6578
  3663  000164  D00A               	goto	u6579
  3664  000166                     u6578:
  3665  000166  0005               	push	
  3666  000168  6EFA               	movwf	pclath,c
  3667  00016A  5032               	movf	_serial_read,w,c
  3668  00016C  6EFD               	movwf	tosl,c
  3669  00016E  5033               	movf	_serial_read+1,w,c
  3670  000170  6EFE               	movwf	tosh,c
  3671  000172  50F8               	movf	tblptru,w,c
  3672  000174  6EFF               	movwf	tosu,c
  3673  000176  50FA               	movf	pclath,w,c
  3674  000178  0012               	return		;indir
  3675  00017A                     u6579:
  3676  00017A  6E3D               	movwf	_rx_address,c
  3677                           
  3678                           ;FastTransfer.c: 102: returnAddress = serial_read();
  3679  00017C  D801               	call	u6588
  3680  00017E  D00A               	goto	u6589
  3681  000180                     u6588:
  3682  000180  0005               	push	
  3683  000182  6EFA               	movwf	pclath,c
  3684  000184  5032               	movf	_serial_read,w,c
  3685  000186  6EFD               	movwf	tosl,c
  3686  000188  5033               	movf	_serial_read+1,w,c
  3687  00018A  6EFE               	movwf	tosh,c
  3688  00018C  50F8               	movf	tblptru,w,c
  3689  00018E  6EFF               	movwf	tosu,c
  3690  000190  50FA               	movf	pclath,w,c
  3691  000192  0012               	return		;indir
  3692  000194                     u6589:
  3693  000194  6E3C               	movwf	_returnAddress,c
  3694                           
  3695                           ;FastTransfer.c: 103: rx_len = serial_read();
  3696  000196  D801               	call	u6598
  3697  000198  D00A               	goto	u6599
  3698  00019A                     u6598:
  3699  00019A  0005               	push	
  3700  00019C  6EFA               	movwf	pclath,c
  3701  00019E  5032               	movf	_serial_read,w,c
  3702  0001A0  6EFD               	movwf	tosl,c
  3703  0001A2  5033               	movf	_serial_read+1,w,c
  3704  0001A4  6EFE               	movwf	tosh,c
  3705  0001A6  50F8               	movf	tblptru,w,c
  3706  0001A8  6EFF               	movwf	tosu,c
  3707  0001AA  50FA               	movf	pclath,w,c
  3708  0001AC  0012               	return		;indir
  3709  0001AE                     u6599:
  3710  0001AE  6E3F               	movwf	_rx_len,c
  3711                           
  3712                           ;FastTransfer.c: 105: if (rx_address != moduleAddress) {
  3713  0001B0  503B               	movf	_moduleAddress,w,c
  3714  0001B2  183D               	xorwf	_rx_address,w,c
  3715  0001B4  B4D8               	btfsc	status,2,c
  3716  0001B6  D035               	goto	l6068
  3717                           
  3718                           ;FastTransfer.c: 106: addressErrorCounter++;
  3719  0001B8  0100               	movlb	0	; () banked
  3720  0001BA  4BC3               	infsnz	_addressErrorCounter& (0+255),f,b
  3721  0001BC  2BC4               	incf	(_addressErrorCounter+1)& (0+255),f,b
  3722                           
  3723                           ; BSR set to: 0
  3724                           ;FastTransfer.c: 109: int u;
  3725                           ;FastTransfer.c: 110: for (u = 0; u <= (rx_len + 1); u++) {
  3726  0001BE  0E00               	movlw	0
  3727  0001C0  0101               	movlb	1	; () banked
  3728  0001C2  6F42               	movwf	(receiveData@u+1)& (0+255),b
  3729  0001C4  0E00               	movlw	0
  3730  0001C6  6F41               	movwf	receiveData@u& (0+255),b
  3731  0001C8  D00F               	goto	l6060
  3732  0001CA                     l6056:
  3733                           
  3734                           ;FastTransfer.c: 111: serial_read();
  3735  0001CA  D801               	call	u6618
  3736  0001CC  D00A               	goto	l6058
  3737  0001CE                     u6618:
  3738  0001CE  0005               	push	
  3739  0001D0  6EFA               	movwf	pclath,c
  3740  0001D2  5032               	movf	_serial_read,w,c
  3741  0001D4  6EFD               	movwf	tosl,c
  3742  0001D6  5033               	movf	_serial_read+1,w,c
  3743  0001D8  6EFE               	movwf	tosh,c
  3744  0001DA  50F8               	movf	tblptru,w,c
  3745  0001DC  6EFF               	movwf	tosu,c
  3746  0001DE  50FA               	movf	pclath,w,c
  3747  0001E0  0012               	return		;indir
  3748  0001E2                     l6058:
  3749  0001E2  0101               	movlb	1	; () banked
  3750  0001E4  4B41               	infsnz	receiveData@u& (0+255),f,b
  3751  0001E6  2B42               	incf	(receiveData@u+1)& (0+255),f,b
  3752  0001E8                     l6060:
  3753                           
  3754                           ; BSR set to: 1
  3755  0001E8  503F               	movf	_rx_len,w,c
  3756  0001EA  0100               	movlb	0	; () banked
  3757  0001EC  6FF9               	movwf	??_receiveData& (0+255),b
  3758  0001EE  6BFA               	clrf	(??_receiveData+1)& (0+255),b
  3759  0001F0  0E01               	movlw	1
  3760  0001F2  0100               	movlb	0	; () banked
  3761  0001F4  27F9               	addwf	??_receiveData& (0+255),f,b
  3762  0001F6  0E00               	movlw	0
  3763  0001F8  23FA               	addwfc	(??_receiveData+1)& (0+255),f,b
  3764  0001FA  0101               	movlb	1	; () banked
  3765  0001FC  5141               	movf	receiveData@u& (0+255),w,b
  3766  0001FE  0100               	movlb	0	; () banked
  3767  000200  5DF9               	subwf	??_receiveData& (0+255),w,b
  3768  000202  0100               	movlb	0	; () banked
  3769  000204  51FA               	movf	(??_receiveData+1)& (0+255),w,b
  3770  000206  0A80               	xorlw	128
  3771  000208  0100               	movlb	0	; () banked
  3772  00020A  6FFB               	movwf	(??_receiveData+2)& (0+255),b
  3773  00020C  0101               	movlb	1	; () banked
  3774  00020E  5142               	movf	(receiveData@u+1)& (0+255),w,b
  3775  000210  0A80               	xorlw	128
  3776  000212  0100               	movlb	0	; () banked
  3777  000214  59FB               	subwfb	(??_receiveData+2)& (0+255),w,b
  3778  000216  B0D8               	btfsc	status,0,c
  3779  000218  D7D8               	goto	l6056
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;FastTransfer.c: 112: }
  3783                           ;FastTransfer.c: 113: rx_len = 0;
  3784                           
  3785                           ; BSR set to: 0
  3786  00021A  0E00               	movlw	0
  3787  00021C  6E3F               	movwf	_rx_len,c
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;FastTransfer.c: 114: return 0;
  3791  00021E  0E00               	movlw	0
  3792                           
  3793                           ; BSR set to: 0
  3794  000220  0012               	return	
  3795  000222                     l6068:
  3796                           
  3797                           ;FastTransfer.c: 115: }
  3798                           ;FastTransfer.c: 117: }
  3799                           ;FastTransfer.c: 118: }
  3800                           ;FastTransfer.c: 119: }
  3801                           ;FastTransfer.c: 122: if (rx_len != 0) {
  3802  000222  503F               	movf	_rx_len,w,c
  3803  000224  B4D8               	btfsc	status,2,c
  3804  000226  D2A6               	goto	l6192
  3805                           
  3806                           ;FastTransfer.c: 125: if (rx_array_inx == 0) {
  3807  000228  503E               	movf	_rx_array_inx,w,c
  3808  00022A  A4D8               	btfss	status,2,c
  3809  00022C  D044               	goto	l6092
  3810  00022E                     l6074:
  3811  00022E  D801               	call	u6658
  3812  000230  D00A               	goto	u6659
  3813  000232                     u6658:
  3814  000232  0005               	push	
  3815  000234  6EFA               	movwf	pclath,c
  3816  000236  5030               	movf	_serial_available,w,c
  3817  000238  6EFD               	movwf	tosl,c
  3818  00023A  5031               	movf	_serial_available+1,w,c
  3819  00023C  6EFE               	movwf	tosh,c
  3820  00023E  50F8               	movf	tblptru,w,c
  3821  000240  6EFF               	movwf	tosu,c
  3822  000242  50FA               	movf	pclath,w,c
  3823  000244  0012               	return		;indir
  3824  000246                     u6659:
  3825  000246  BE1E               	btfsc	?_Receive_available+1,7,c
  3826  000248  D7F2               	goto	l6074
  3827  00024A  501E               	movf	?_Receive_available+1,w,c
  3828  00024C  E103               	bnz	l6076
  3829  00024E  041D               	decf	?_Receive_available,w,c
  3830  000250  A0D8               	btfss	status,0,c
  3831  000252  D7ED               	goto	l6074
  3832  000254                     l6076:
  3833                           
  3834                           ;FastTransfer.c: 127: if (255 == serial_peek()) {
  3835  000254  D801               	call	u6678
  3836  000256  D00B               	goto	u6679
  3837  000258                     u6678:
  3838  000258  0005               	push	
  3839  00025A  0100               	movlb	0	; () banked
  3840  00025C  6EFA               	movwf	pclath,c
  3841  00025E  51D5               	movf	_serial_peek& (0+255),w,b
  3842  000260  6EFD               	movwf	tosl,c
  3843  000262  51D6               	movf	(_serial_peek+1)& (0+255),w,b
  3844  000264  6EFE               	movwf	tosh,c
  3845  000266  50F8               	movf	tblptru,w,c
  3846  000268  6EFF               	movwf	tosu,c
  3847  00026A  50FA               	movf	pclath,w,c
  3848  00026C  0012               	return		;indir
  3849  00026E                     u6679:
  3850  00026E  0AFF               	xorlw	255
  3851  000270  A4D8               	btfss	status,2,c
  3852  000272  D021               	goto	l6092
  3853                           
  3854                           ;FastTransfer.c: 128: CRCcheck();
  3855  000274  EC32  F007         	call	_CRCcheck	;wreg free
  3856                           
  3857                           ;FastTransfer.c: 129: rx_len = 0;
  3858  000278  0E00               	movlw	0
  3859  00027A  6E3F               	movwf	_rx_len,c
  3860                           
  3861                           ;FastTransfer.c: 130: rx_array_inx = 0;
  3862  00027C  0E00               	movlw	0
  3863  00027E  6E3E               	movwf	_rx_array_inx,c
  3864                           
  3865                           ;FastTransfer.c: 131: return 0;
  3866  000280  0E00               	movlw	0
  3867  000282  0012               	return	
  3868  000284                     l6088:
  3869                           
  3870                           ;FastTransfer.c: 137: rx_buffer[rx_array_inx++] = serial_read();
  3871  000284  D801               	call	u6698
  3872  000286  D00A               	goto	u6699
  3873  000288                     u6698:
  3874  000288  0005               	push	
  3875  00028A  6EFA               	movwf	pclath,c
  3876  00028C  5032               	movf	_serial_read,w,c
  3877  00028E  6EFD               	movwf	tosl,c
  3878  000290  5033               	movf	_serial_read+1,w,c
  3879  000292  6EFE               	movwf	tosh,c
  3880  000294  50F8               	movf	tblptru,w,c
  3881  000296  6EFF               	movwf	tosu,c
  3882  000298  50FA               	movf	pclath,w,c
  3883  00029A  0012               	return		;indir
  3884  00029C                     u6699:
  3885  00029C  0100               	movlb	0	; () banked
  3886  00029E  6FF9               	movwf	??_receiveData& (0+255),b
  3887  0002A0  503E               	movf	_rx_array_inx,w,c
  3888  0002A2  0D01               	mullw	1
  3889  0002A4  0E00               	movlw	low _rx_buffer
  3890  0002A6  24F3               	addwf	prodl,w,c
  3891  0002A8  6ED9               	movwf	fsr2l,c
  3892  0002AA  0E03               	movlw	high _rx_buffer
  3893  0002AC  20F4               	addwfc	prodh,w,c
  3894  0002AE  6EDA               	movwf	fsr2h,c
  3895  0002B0  C0F9  FFDF         	movff	??_receiveData,indf2
  3896                           
  3897                           ; BSR set to: 0
  3898  0002B4  2A3E               	incf	_rx_array_inx,f,c
  3899  0002B6                     l6092:
  3900  0002B6  D801               	call	u6708
  3901  0002B8  D00A               	goto	u6709
  3902  0002BA                     u6708:
  3903  0002BA  0005               	push	
  3904  0002BC  6EFA               	movwf	pclath,c
  3905  0002BE  5030               	movf	_serial_available,w,c
  3906  0002C0  6EFD               	movwf	tosl,c
  3907  0002C2  5031               	movf	_serial_available+1,w,c
  3908  0002C4  6EFE               	movwf	tosh,c
  3909  0002C6  50F8               	movf	tblptru,w,c
  3910  0002C8  6EFF               	movwf	tosu,c
  3911  0002CA  50FA               	movf	pclath,w,c
  3912  0002CC  0012               	return		;indir
  3913  0002CE                     u6709:
  3914  0002CE  501D               	movf	?_Receive_available,w,c
  3915  0002D0  101E               	iorwf	?_Receive_available+1,w,c
  3916  0002D2  B4D8               	btfsc	status,2,c
  3917  0002D4  D004               	goto	l6096
  3918  0002D6  503E               	movf	_rx_array_inx,w,c
  3919  0002D8  5C3F               	subwf	_rx_len,w,c
  3920  0002DA  B0D8               	btfsc	status,0,c
  3921  0002DC  D7D3               	goto	l6088
  3922  0002DE                     l6096:
  3923                           
  3924                           ;FastTransfer.c: 138: }
  3925                           ;FastTransfer.c: 140: if (rx_len == (rx_array_inx - 1)) {
  3926  0002DE  503F               	movf	_rx_len,w,c
  3927  0002E0  0100               	movlb	0	; () banked
  3928  0002E2  6FF9               	movwf	??_receiveData& (0+255),b
  3929  0002E4  6BFA               	clrf	(??_receiveData+1)& (0+255),b
  3930  0002E6  0EFF               	movlw	255
  3931  0002E8  0100               	movlb	0	; () banked
  3932  0002EA  6FFB               	movwf	(??_receiveData+2)& (0+255),b
  3933  0002EC  0EFF               	movlw	255
  3934  0002EE  0100               	movlb	0	; () banked
  3935  0002F0  6FFC               	movwf	(??_receiveData+3)& (0+255),b
  3936  0002F2  503E               	movf	_rx_array_inx,w,c
  3937  0002F4  0100               	movlb	0	; () banked
  3938  0002F6  6FFD               	movwf	(??_receiveData+4)& (0+255),b
  3939  0002F8  6BFE               	clrf	(??_receiveData+5)& (0+255),b
  3940  0002FA  0100               	movlb	0	; () banked
  3941  0002FC  51FB               	movf	(??_receiveData+2)& (0+255),w,b
  3942  0002FE  0100               	movlb	0	; () banked
  3943  000300  27FD               	addwf	(??_receiveData+4)& (0+255),f,b
  3944  000302  0100               	movlb	0	; () banked
  3945  000304  51FC               	movf	(??_receiveData+3)& (0+255),w,b
  3946  000306  0100               	movlb	0	; () banked
  3947  000308  23FE               	addwfc	(??_receiveData+5)& (0+255),f,b
  3948  00030A  0100               	movlb	0	; () banked
  3949  00030C  51F9               	movf	??_receiveData& (0+255),w,b
  3950  00030E  0100               	movlb	0	; () banked
  3951  000310  19FD               	xorwf	(??_receiveData+4)& (0+255),w,b
  3952  000312  E105               	bnz	u6731
  3953  000314  0100               	movlb	0	; () banked
  3954  000316  51FA               	movf	(??_receiveData+1)& (0+255),w,b
  3955  000318  0100               	movlb	0	; () banked
  3956  00031A  19FE               	xorwf	(??_receiveData+5)& (0+255),w,b
  3957  00031C  A4D8               	btfss	status,2,c
  3958  00031E                     u6731:
  3959  00031E  D22A               	goto	l6192
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;FastTransfer.c: 143: calc_CS = CRC8(rx_buffer, rx_len);
  3963  000320  0E00               	movlw	low _rx_buffer
  3964  000322  6E1B               	movwf	CRC8@data,c
  3965  000324  0E03               	movlw	high _rx_buffer
  3966  000326  6E1C               	movwf	CRC8@data+1,c
  3967  000328  C03F  F01D         	movff	_rx_len,CRC8@len
  3968  00032C  ECCE  F00E         	call	_CRC8	;wreg free
  3969  000330  6E38               	movwf	_calc_CS,c
  3970                           
  3971                           ;FastTransfer.c: 147: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  3972  000332  0EFF               	movlw	255
  3973  000334  0100               	movlb	0	; () banked
  3974  000336  6FF9               	movwf	??_receiveData& (0+255),b
  3975  000338  0EFF               	movlw	255
  3976  00033A  0100               	movlb	0	; () banked
  3977  00033C  6FFA               	movwf	(??_receiveData+1)& (0+255),b
  3978  00033E  503E               	movf	_rx_array_inx,w,c
  3979  000340  0100               	movlb	0	; () banked
  3980  000342  6FFB               	movwf	(??_receiveData+2)& (0+255),b
  3981  000344  6BFC               	clrf	(??_receiveData+3)& (0+255),b
  3982  000346  0100               	movlb	0	; () banked
  3983  000348  51F9               	movf	??_receiveData& (0+255),w,b
  3984  00034A  0100               	movlb	0	; () banked
  3985  00034C  27FB               	addwf	(??_receiveData+2)& (0+255),f,b
  3986  00034E  0100               	movlb	0	; () banked
  3987  000350  51FA               	movf	(??_receiveData+1)& (0+255),w,b
  3988  000352  0100               	movlb	0	; () banked
  3989  000354  23FC               	addwfc	(??_receiveData+3)& (0+255),f,b
  3990  000356  0E00               	movlw	low _rx_buffer
  3991  000358  0100               	movlb	0	; () banked
  3992  00035A  25FB               	addwf	(??_receiveData+2)& (0+255),w,b
  3993  00035C  6ED9               	movwf	fsr2l,c
  3994  00035E  0E03               	movlw	high _rx_buffer
  3995  000360  0100               	movlb	0	; () banked
  3996  000362  21FC               	addwfc	(??_receiveData+3)& (0+255),w,b
  3997  000364  6EDA               	movwf	fsr2h,c
  3998  000366  5038               	movf	_calc_CS,w,c
  3999  000368  18DE               	xorwf	postinc2,w,c
  4000  00036A  A4D8               	btfss	status,2,c
  4001  00036C  D13B               	goto	l6154
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;FastTransfer.c: 150: int r;
  4005                           ;FastTransfer.c: 151: for (r = 0; r < rx_len; r = r + 3) {
  4006  00036E  0E00               	movlw	0
  4007  000370  0101               	movlb	1	; () banked
  4008  000372  6F44               	movwf	(receiveData@r+1)& (0+255),b
  4009  000374  0E00               	movlw	0
  4010  000376  6F43               	movwf	receiveData@r& (0+255),b
  4011  000378  D05C               	goto	l6114
  4012  00037A                     l6104:
  4013                           
  4014                           ;FastTransfer.c: 152: if (rx_buffer[r] < maxDataAddress) {
  4015  00037A  0E00               	movlw	low _rx_buffer
  4016  00037C  0101               	movlb	1	; () banked
  4017  00037E  2543               	addwf	receiveData@r& (0+255),w,b
  4018  000380  6ED9               	movwf	fsr2l,c
  4019  000382  0E03               	movlw	high _rx_buffer
  4020  000384  0101               	movlb	1	; () banked
  4021  000386  2144               	addwfc	(receiveData@r+1)& (0+255),w,b
  4022  000388  6EDA               	movwf	fsr2h,c
  4023  00038A  503A               	movf	_maxDataAddress,w,c
  4024  00038C  5CDE               	subwf	postinc2,w,c
  4025  00038E  B0D8               	btfsc	status,0,c
  4026  000390  D043               	goto	l6110
  4027                           
  4028                           ; BSR set to: 1
  4029                           ;FastTransfer.c: 153: group.parts[0] = rx_buffer[r + 1];
  4030  000392  0E01               	movlw	1
  4031  000394  0101               	movlb	1	; () banked
  4032  000396  2543               	addwf	receiveData@r& (0+255),w,b
  4033  000398  0100               	movlb	0	; () banked
  4034  00039A  6FF9               	movwf	??_receiveData& (0+255),b
  4035  00039C  0E00               	movlw	0
  4036  00039E  0101               	movlb	1	; () banked
  4037  0003A0  2144               	addwfc	(receiveData@r+1)& (0+255),w,b
  4038  0003A2  0100               	movlb	0	; () banked
  4039  0003A4  6FFA               	movwf	(??_receiveData+1)& (0+255),b
  4040  0003A6  0E00               	movlw	low _rx_buffer
  4041  0003A8  0100               	movlb	0	; () banked
  4042  0003AA  25F9               	addwf	??_receiveData& (0+255),w,b
  4043  0003AC  6ED9               	movwf	fsr2l,c
  4044  0003AE  0E03               	movlw	high _rx_buffer
  4045  0003B0  0100               	movlb	0	; () banked
  4046  0003B2  21FA               	addwfc	(??_receiveData+1)& (0+255),w,b
  4047  0003B4  6EDA               	movwf	fsr2h,c
  4048  0003B6  50DF               	movf	indf2,w,c
  4049  0003B8  6E28               	movwf	_group,c
  4050                           
  4051                           ;FastTransfer.c: 154: group.parts[1] = rx_buffer[r + 2];
  4052  0003BA  0E02               	movlw	2
  4053  0003BC  0101               	movlb	1	; () banked
  4054  0003BE  2543               	addwf	receiveData@r& (0+255),w,b
  4055  0003C0  0100               	movlb	0	; () banked
  4056  0003C2  6FF9               	movwf	??_receiveData& (0+255),b
  4057  0003C4  0E00               	movlw	0
  4058  0003C6  0101               	movlb	1	; () banked
  4059  0003C8  2144               	addwfc	(receiveData@r+1)& (0+255),w,b
  4060  0003CA  0100               	movlb	0	; () banked
  4061  0003CC  6FFA               	movwf	(??_receiveData+1)& (0+255),b
  4062  0003CE  0E00               	movlw	low _rx_buffer
  4063  0003D0  0100               	movlb	0	; () banked
  4064  0003D2  25F9               	addwf	??_receiveData& (0+255),w,b
  4065  0003D4  6ED9               	movwf	fsr2l,c
  4066  0003D6  0E03               	movlw	high _rx_buffer
  4067  0003D8  0100               	movlb	0	; () banked
  4068  0003DA  21FA               	addwfc	(??_receiveData+1)& (0+255),w,b
  4069  0003DC  6EDA               	movwf	fsr2h,c
  4070  0003DE  50DF               	movf	indf2,w,c
  4071  0003E0  6E29               	movwf	_group+1,c
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;FastTransfer.c: 155: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  4075  0003E2  0E00               	movlw	low _rx_buffer
  4076  0003E4  0101               	movlb	1	; () banked
  4077  0003E6  2543               	addwf	receiveData@r& (0+255),w,b
  4078  0003E8  6ED9               	movwf	fsr2l,c
  4079  0003EA  0E03               	movlw	high _rx_buffer
  4080  0003EC  0101               	movlb	1	; () banked
  4081  0003EE  2144               	addwfc	(receiveData@r+1)& (0+255),w,b
  4082  0003F0  6EDA               	movwf	fsr2h,c
  4083  0003F2  50DF               	movf	indf2,w,c
  4084  0003F4  0100               	movlb	0	; () banked
  4085  0003F6  6FF9               	movwf	??_receiveData& (0+255),b
  4086  0003F8  0100               	movlb	0	; () banked
  4087  0003FA  51F9               	movf	??_receiveData& (0+255),w,b
  4088  0003FC  0D02               	mullw	2
  4089  0003FE  50F3               	movf	prodl,w,c
  4090  000400  0100               	movlb	0	; () banked
  4091  000402  25D1               	addwf	_receiveArrayAddress& (0+255),w,b
  4092  000404  6ED9               	movwf	fsr2l,c
  4093  000406  50F4               	movf	prodh,w,c
  4094  000408  0100               	movlb	0	; () banked
  4095  00040A  21D2               	addwfc	(_receiveArrayAddress+1)& (0+255),w,b
  4096  00040C  6EDA               	movwf	fsr2h,c
  4097  00040E  C028  FFDE         	movff	_group,postinc2
  4098  000412  C029  FFDD         	movff	_group+1,postdec2
  4099                           
  4100                           ;FastTransfer.c: 156: } else {
  4101  000416  D003               	goto	l6112
  4102  000418                     l6110:
  4103                           
  4104                           ;FastTransfer.c: 157: dataAdressErrorCounter++;
  4105  000418  0100               	movlb	0	; () banked
  4106  00041A  4BCB               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  4107  00041C  2BCC               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  4108  00041E                     l6112:
  4109                           
  4110                           ; BSR set to: 0
  4111  00041E  0E03               	movlw	3
  4112  000420  0101               	movlb	1	; () banked
  4113  000422  2543               	addwf	receiveData@r& (0+255),w,b
  4114  000424  0101               	movlb	1	; () banked
  4115  000426  6F43               	movwf	receiveData@r& (0+255),b
  4116  000428  0E00               	movlw	0
  4117  00042A  0101               	movlb	1	; () banked
  4118  00042C  2144               	addwfc	(receiveData@r+1)& (0+255),w,b
  4119  00042E  0101               	movlb	1	; () banked
  4120  000430  6F44               	movwf	(receiveData@r+1)& (0+255),b
  4121  000432                     l6114:
  4122                           
  4123                           ; BSR set to: 1
  4124  000432  503F               	movf	_rx_len,w,c
  4125  000434  0100               	movlb	0	; () banked
  4126  000436  6FF9               	movwf	??_receiveData& (0+255),b
  4127  000438  6BFA               	clrf	(??_receiveData+1)& (0+255),b
  4128  00043A  0100               	movlb	0	; () banked
  4129  00043C  51F9               	movf	??_receiveData& (0+255),w,b
  4130  00043E  0101               	movlb	1	; () banked
  4131  000440  5D43               	subwf	receiveData@r& (0+255),w,b
  4132  000442  0101               	movlb	1	; () banked
  4133  000444  5144               	movf	(receiveData@r+1)& (0+255),w,b
  4134  000446  0A80               	xorlw	128
  4135  000448  0100               	movlb	0	; () banked
  4136  00044A  6FFB               	movwf	(??_receiveData+2)& (0+255),b
  4137  00044C  0100               	movlb	0	; () banked
  4138  00044E  51FA               	movf	(??_receiveData+1)& (0+255),w,b
  4139  000450  0A80               	xorlw	128
  4140  000452  0100               	movlb	0	; () banked
  4141  000454  59FB               	subwfb	(??_receiveData+2)& (0+255),w,b
  4142  000456  A0D8               	btfss	status,0,c
  4143  000458  D790               	goto	l6104
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;FastTransfer.c: 158: }
  4147                           ;FastTransfer.c: 159: }
  4148                           ;FastTransfer.c: 162: if (AKNAKsend) {
  4149                           
  4150                           ; BSR set to: 0
  4151  00045A  5037               	movf	_AKNAKsend,w,c
  4152  00045C  B4D8               	btfsc	status,2,c
  4153  00045E  D0BC               	goto	l6144
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;FastTransfer.c: 163: unsigned char holder[3];
  4157                           ;FastTransfer.c: 164: holder[0] = 255;
  4158  000460  0101               	movlb	1	; () banked
  4159  000462  6939               	setf	receiveData@holder& (0+255),b
  4160                           
  4161                           ; BSR set to: 1
  4162                           ;FastTransfer.c: 165: holder[1] = 1;
  4163  000464  0E01               	movlw	1
  4164  000466  0101               	movlb	1	; () banked
  4165  000468  6F3A               	movwf	(receiveData@holder+1)& (0+255),b
  4166                           
  4167                           ; BSR set to: 1
  4168                           ;FastTransfer.c: 166: holder[2] = rx_buffer[rx_array_inx - 1];
  4169  00046A  0EFF               	movlw	255
  4170  00046C  0100               	movlb	0	; () banked
  4171  00046E  6FF9               	movwf	??_receiveData& (0+255),b
  4172  000470  0EFF               	movlw	255
  4173  000472  0100               	movlb	0	; () banked
  4174  000474  6FFA               	movwf	(??_receiveData+1)& (0+255),b
  4175  000476  503E               	movf	_rx_array_inx,w,c
  4176  000478  0100               	movlb	0	; () banked
  4177  00047A  6FFB               	movwf	(??_receiveData+2)& (0+255),b
  4178  00047C  6BFC               	clrf	(??_receiveData+3)& (0+255),b
  4179  00047E  0100               	movlb	0	; () banked
  4180  000480  51F9               	movf	??_receiveData& (0+255),w,b
  4181  000482  0100               	movlb	0	; () banked
  4182  000484  27FB               	addwf	(??_receiveData+2)& (0+255),f,b
  4183  000486  0100               	movlb	0	; () banked
  4184  000488  51FA               	movf	(??_receiveData+1)& (0+255),w,b
  4185  00048A  0100               	movlb	0	; () banked
  4186  00048C  23FC               	addwfc	(??_receiveData+3)& (0+255),f,b
  4187  00048E  0E00               	movlw	low _rx_buffer
  4188  000490  0100               	movlb	0	; () banked
  4189  000492  25FB               	addwf	(??_receiveData+2)& (0+255),w,b
  4190  000494  6ED9               	movwf	fsr2l,c
  4191  000496  0E03               	movlw	high _rx_buffer
  4192  000498  0100               	movlb	0	; () banked
  4193  00049A  21FC               	addwfc	(??_receiveData+3)& (0+255),w,b
  4194  00049C  6EDA               	movwf	fsr2h,c
  4195  00049E  50DF               	movf	indf2,w,c
  4196  0004A0  0101               	movlb	1	; () banked
  4197  0004A2  6F3B               	movwf	(receiveData@holder+2)& (0+255),b
  4198                           
  4199                           ; BSR set to: 1
  4200                           ;FastTransfer.c: 167: unsigned char crcHolder = CRC8(holder, 3);
  4201  0004A4  0E39               	movlw	low receiveData@holder
  4202  0004A6  6E1B               	movwf	CRC8@data,c
  4203  0004A8  0E01               	movlw	high receiveData@holder
  4204  0004AA  6E1C               	movwf	CRC8@data+1,c
  4205  0004AC  0E03               	movlw	3
  4206  0004AE  6E1D               	movwf	CRC8@len,c
  4207  0004B0  ECCE  F00E         	call	_CRC8	;wreg free
  4208  0004B4  0101               	movlb	1	; () banked
  4209  0004B6  6F3F               	movwf	receiveData@crcHolder& (0+255),b
  4210                           
  4211                           ; BSR set to: 1
  4212                           ;FastTransfer.c: 168: serial_write(0x06);
  4213  0004B8  D801               	call	u6788
  4214  0004BA  D00B               	goto	l6128
  4215  0004BC                     u6788:
  4216  0004BC  0005               	push	
  4217  0004BE  6EFA               	movwf	pclath,c
  4218  0004C0  5034               	movf	_serial_write,w,c
  4219  0004C2  6EFD               	movwf	tosl,c
  4220  0004C4  5035               	movf	_serial_write+1,w,c
  4221  0004C6  6EFE               	movwf	tosh,c
  4222  0004C8  50F8               	movf	tblptru,w,c
  4223  0004CA  6EFF               	movwf	tosu,c
  4224  0004CC  50FA               	movf	pclath,w,c
  4225  0004CE  0E06               	movlw	6
  4226  0004D0  0012               	return		;indir
  4227  0004D2                     l6128:
  4228                           
  4229                           ;FastTransfer.c: 169: serial_write(0x85);
  4230  0004D2  D801               	call	u6798
  4231  0004D4  D00B               	goto	l6130
  4232  0004D6                     u6798:
  4233  0004D6  0005               	push	
  4234  0004D8  6EFA               	movwf	pclath,c
  4235  0004DA  5034               	movf	_serial_write,w,c
  4236  0004DC  6EFD               	movwf	tosl,c
  4237  0004DE  5035               	movf	_serial_write+1,w,c
  4238  0004E0  6EFE               	movwf	tosh,c
  4239  0004E2  50F8               	movf	tblptru,w,c
  4240  0004E4  6EFF               	movwf	tosu,c
  4241  0004E6  50FA               	movf	pclath,w,c
  4242  0004E8  0E85               	movlw	133
  4243  0004EA  0012               	return		;indir
  4244  0004EC                     l6130:
  4245                           
  4246                           ;FastTransfer.c: 170: serial_write(returnAddress);
  4247  0004EC  D801               	call	u6808
  4248  0004EE  D00B               	goto	l6132
  4249  0004F0                     u6808:
  4250  0004F0  0005               	push	
  4251  0004F2  6EFA               	movwf	pclath,c
  4252  0004F4  5034               	movf	_serial_write,w,c
  4253  0004F6  6EFD               	movwf	tosl,c
  4254  0004F8  5035               	movf	_serial_write+1,w,c
  4255  0004FA  6EFE               	movwf	tosh,c
  4256  0004FC  50F8               	movf	tblptru,w,c
  4257  0004FE  6EFF               	movwf	tosu,c
  4258  000500  50FA               	movf	pclath,w,c
  4259  000502  503C               	movf	_returnAddress,w,c
  4260  000504  0012               	return		;indir
  4261  000506                     l6132:
  4262                           
  4263                           ;FastTransfer.c: 171: serial_write(moduleAddress);
  4264  000506  D801               	call	u6818
  4265  000508  D00B               	goto	l6134
  4266  00050A                     u6818:
  4267  00050A  0005               	push	
  4268  00050C  6EFA               	movwf	pclath,c
  4269  00050E  5034               	movf	_serial_write,w,c
  4270  000510  6EFD               	movwf	tosl,c
  4271  000512  5035               	movf	_serial_write+1,w,c
  4272  000514  6EFE               	movwf	tosh,c
  4273  000516  50F8               	movf	tblptru,w,c
  4274  000518  6EFF               	movwf	tosu,c
  4275  00051A  50FA               	movf	pclath,w,c
  4276  00051C  503B               	movf	_moduleAddress,w,c
  4277  00051E  0012               	return		;indir
  4278  000520                     l6134:
  4279                           
  4280                           ;FastTransfer.c: 172: serial_write(3);
  4281  000520  D801               	call	u6828
  4282  000522  D00B               	goto	l6136
  4283  000524                     u6828:
  4284  000524  0005               	push	
  4285  000526  6EFA               	movwf	pclath,c
  4286  000528  5034               	movf	_serial_write,w,c
  4287  00052A  6EFD               	movwf	tosl,c
  4288  00052C  5035               	movf	_serial_write+1,w,c
  4289  00052E  6EFE               	movwf	tosh,c
  4290  000530  50F8               	movf	tblptru,w,c
  4291  000532  6EFF               	movwf	tosu,c
  4292  000534  50FA               	movf	pclath,w,c
  4293  000536  0E03               	movlw	3
  4294  000538  0012               	return		;indir
  4295  00053A                     l6136:
  4296                           
  4297                           ;FastTransfer.c: 173: serial_write(255);
  4298  00053A  D801               	call	u6838
  4299  00053C  D00B               	goto	l6138
  4300  00053E                     u6838:
  4301  00053E  0005               	push	
  4302  000540  6EFA               	movwf	pclath,c
  4303  000542  5034               	movf	_serial_write,w,c
  4304  000544  6EFD               	movwf	tosl,c
  4305  000546  5035               	movf	_serial_write+1,w,c
  4306  000548  6EFE               	movwf	tosh,c
  4307  00054A  50F8               	movf	tblptru,w,c
  4308  00054C  6EFF               	movwf	tosu,c
  4309  00054E  50FA               	movf	pclath,w,c
  4310  000550  0EFF               	movlw	255
  4311  000552  0012               	return		;indir
  4312  000554                     l6138:
  4313                           
  4314                           ;FastTransfer.c: 174: serial_write(1);
  4315  000554  D801               	call	u6848
  4316  000556  D00B               	goto	l6140
  4317  000558                     u6848:
  4318  000558  0005               	push	
  4319  00055A  6EFA               	movwf	pclath,c
  4320  00055C  5034               	movf	_serial_write,w,c
  4321  00055E  6EFD               	movwf	tosl,c
  4322  000560  5035               	movf	_serial_write+1,w,c
  4323  000562  6EFE               	movwf	tosh,c
  4324  000564  50F8               	movf	tblptru,w,c
  4325  000566  6EFF               	movwf	tosu,c
  4326  000568  50FA               	movf	pclath,w,c
  4327  00056A  0E01               	movlw	1
  4328  00056C  0012               	return		;indir
  4329  00056E                     l6140:
  4330                           
  4331                           ;FastTransfer.c: 175: serial_write(rx_buffer[rx_array_inx - 1]);
  4332  00056E  D801               	call	u6858
  4333  000570  D025               	goto	l6142
  4334  000572                     u6858:
  4335  000572  0005               	push	
  4336  000574  6EFA               	movwf	pclath,c
  4337  000576  5034               	movf	_serial_write,w,c
  4338  000578  6EFD               	movwf	tosl,c
  4339  00057A  5035               	movf	_serial_write+1,w,c
  4340  00057C  6EFE               	movwf	tosh,c
  4341  00057E  50F8               	movf	tblptru,w,c
  4342  000580  6EFF               	movwf	tosu,c
  4343  000582  50FA               	movf	pclath,w,c
  4344  000584  0EFF               	movlw	255
  4345  000586  0100               	movlb	0	; () banked
  4346  000588  6FF9               	movwf	??_receiveData& (0+255),b
  4347  00058A  0EFF               	movlw	255
  4348  00058C  0100               	movlb	0	; () banked
  4349  00058E  6FFA               	movwf	(??_receiveData+1)& (0+255),b
  4350  000590  503E               	movf	_rx_array_inx,w,c
  4351  000592  0100               	movlb	0	; () banked
  4352  000594  6FFB               	movwf	(??_receiveData+2)& (0+255),b
  4353  000596  6BFC               	clrf	(??_receiveData+3)& (0+255),b
  4354  000598  0100               	movlb	0	; () banked
  4355  00059A  51F9               	movf	??_receiveData& (0+255),w,b
  4356  00059C  0100               	movlb	0	; () banked
  4357  00059E  27FB               	addwf	(??_receiveData+2)& (0+255),f,b
  4358  0005A0  0100               	movlb	0	; () banked
  4359  0005A2  51FA               	movf	(??_receiveData+1)& (0+255),w,b
  4360  0005A4  0100               	movlb	0	; () banked
  4361  0005A6  23FC               	addwfc	(??_receiveData+3)& (0+255),f,b
  4362  0005A8  0E00               	movlw	low _rx_buffer
  4363  0005AA  0100               	movlb	0	; () banked
  4364  0005AC  25FB               	addwf	(??_receiveData+2)& (0+255),w,b
  4365  0005AE  6ED9               	movwf	fsr2l,c
  4366  0005B0  0E03               	movlw	high _rx_buffer
  4367  0005B2  0100               	movlb	0	; () banked
  4368  0005B4  21FC               	addwfc	(??_receiveData+3)& (0+255),w,b
  4369  0005B6  6EDA               	movwf	fsr2h,c
  4370  0005B8  50DF               	movf	indf2,w,c
  4371  0005BA  0012               	return		;indir
  4372  0005BC                     l6142:
  4373                           
  4374                           ;FastTransfer.c: 176: serial_write(crcHolder);
  4375  0005BC  D801               	call	u6868
  4376  0005BE  D00C               	goto	l6144
  4377  0005C0                     u6868:
  4378  0005C0  0005               	push	
  4379  0005C2  6EFA               	movwf	pclath,c
  4380  0005C4  5034               	movf	_serial_write,w,c
  4381  0005C6  6EFD               	movwf	tosl,c
  4382  0005C8  5035               	movf	_serial_write+1,w,c
  4383  0005CA  6EFE               	movwf	tosh,c
  4384  0005CC  50F8               	movf	tblptru,w,c
  4385  0005CE  6EFF               	movwf	tosu,c
  4386  0005D0  50FA               	movf	pclath,w,c
  4387  0005D2  0101               	movlb	1	; () banked
  4388  0005D4  513F               	movf	receiveData@crcHolder& (0+255),w,b
  4389  0005D6  0012               	return		;indir
  4390  0005D8                     l6144:
  4391                           
  4392                           ;FastTransfer.c: 177: }
  4393                           ;FastTransfer.c: 181: rx_len = 0;
  4394  0005D8  0E00               	movlw	0
  4395  0005DA  6E3F               	movwf	_rx_len,c
  4396                           
  4397                           ;FastTransfer.c: 182: rx_array_inx = 0;
  4398  0005DC  0E00               	movlw	0
  4399  0005DE  6E3E               	movwf	_rx_array_inx,c
  4400                           
  4401                           ;FastTransfer.c: 183: return 1;
  4402  0005E0  0E01               	movlw	1
  4403  0005E2  0012               	return	
  4404  0005E4                     l6154:
  4405                           
  4406                           ;FastTransfer.c: 185: crcErrorCounter++;
  4407  0005E4  0100               	movlb	0	; () banked
  4408  0005E6  4BC9               	infsnz	_crcErrorCounter& (0+255),f,b
  4409  0005E8  2BCA               	incf	(_crcErrorCounter+1)& (0+255),f,b
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;FastTransfer.c: 187: if (AKNAKsend) {
  4413  0005EA  5037               	movf	_AKNAKsend,w,c
  4414  0005EC  B4D8               	btfsc	status,2,c
  4415  0005EE  D0BC               	goto	l6184
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;FastTransfer.c: 188: unsigned char holder[3];
  4419                           ;FastTransfer.c: 189: holder[0] = 255;
  4420  0005F0  0101               	movlb	1	; () banked
  4421  0005F2  693C               	setf	receiveData@holder_2492& (0+255),b
  4422                           
  4423                           ; BSR set to: 1
  4424                           ;FastTransfer.c: 190: holder[1] = 2;
  4425  0005F4  0E02               	movlw	2
  4426  0005F6  0101               	movlb	1	; () banked
  4427  0005F8  6F3D               	movwf	(receiveData@holder_2492+1)& (0+255),b
  4428                           
  4429                           ; BSR set to: 1
  4430                           ;FastTransfer.c: 191: holder[2] = rx_buffer[rx_array_inx - 1];
  4431  0005FA  0EFF               	movlw	255
  4432  0005FC  0100               	movlb	0	; () banked
  4433  0005FE  6FF9               	movwf	??_receiveData& (0+255),b
  4434  000600  0EFF               	movlw	255
  4435  000602  0100               	movlb	0	; () banked
  4436  000604  6FFA               	movwf	(??_receiveData+1)& (0+255),b
  4437  000606  503E               	movf	_rx_array_inx,w,c
  4438  000608  0100               	movlb	0	; () banked
  4439  00060A  6FFB               	movwf	(??_receiveData+2)& (0+255),b
  4440  00060C  6BFC               	clrf	(??_receiveData+3)& (0+255),b
  4441  00060E  0100               	movlb	0	; () banked
  4442  000610  51F9               	movf	??_receiveData& (0+255),w,b
  4443  000612  0100               	movlb	0	; () banked
  4444  000614  27FB               	addwf	(??_receiveData+2)& (0+255),f,b
  4445  000616  0100               	movlb	0	; () banked
  4446  000618  51FA               	movf	(??_receiveData+1)& (0+255),w,b
  4447  00061A  0100               	movlb	0	; () banked
  4448  00061C  23FC               	addwfc	(??_receiveData+3)& (0+255),f,b
  4449  00061E  0E00               	movlw	low _rx_buffer
  4450  000620  0100               	movlb	0	; () banked
  4451  000622  25FB               	addwf	(??_receiveData+2)& (0+255),w,b
  4452  000624  6ED9               	movwf	fsr2l,c
  4453  000626  0E03               	movlw	high _rx_buffer
  4454  000628  0100               	movlb	0	; () banked
  4455  00062A  21FC               	addwfc	(??_receiveData+3)& (0+255),w,b
  4456  00062C  6EDA               	movwf	fsr2h,c
  4457  00062E  50DF               	movf	indf2,w,c
  4458  000630  0101               	movlb	1	; () banked
  4459  000632  6F3E               	movwf	(receiveData@holder_2492+2)& (0+255),b
  4460                           
  4461                           ; BSR set to: 1
  4462                           ;FastTransfer.c: 192: unsigned char crcHolder = CRC8(holder, 3);
  4463  000634  0E3C               	movlw	low receiveData@holder_2492
  4464  000636  6E1B               	movwf	CRC8@data,c
  4465  000638  0E01               	movlw	high receiveData@holder_2492
  4466  00063A  6E1C               	movwf	CRC8@data+1,c
  4467  00063C  0E03               	movlw	3
  4468  00063E  6E1D               	movwf	CRC8@len,c
  4469  000640  ECCE  F00E         	call	_CRC8
  4470  000644  0101               	movlb	1	; () banked
  4471  000646  6F40               	movwf	receiveData@crcHolder_2493& (0+255),b
  4472                           
  4473                           ; BSR set to: 1
  4474                           ;FastTransfer.c: 193: serial_write(0x06);
  4475  000648  D801               	call	u6888
  4476  00064A  D00B               	goto	l6168
  4477  00064C                     u6888:
  4478  00064C  0005               	push	
  4479  00064E  6EFA               	movwf	pclath,c
  4480  000650  5034               	movf	_serial_write,w,c
  4481  000652  6EFD               	movwf	tosl,c
  4482  000654  5035               	movf	_serial_write+1,w,c
  4483  000656  6EFE               	movwf	tosh,c
  4484  000658  50F8               	movf	tblptru,w,c
  4485  00065A  6EFF               	movwf	tosu,c
  4486  00065C  50FA               	movf	pclath,w,c
  4487  00065E  0E06               	movlw	6
  4488  000660  0012               	return		;indir
  4489  000662                     l6168:
  4490                           
  4491                           ;FastTransfer.c: 194: serial_write(0x85);
  4492  000662  D801               	call	u6898
  4493  000664  D00B               	goto	l6170
  4494  000666                     u6898:
  4495  000666  0005               	push	
  4496  000668  6EFA               	movwf	pclath,c
  4497  00066A  5034               	movf	_serial_write,w,c
  4498  00066C  6EFD               	movwf	tosl,c
  4499  00066E  5035               	movf	_serial_write+1,w,c
  4500  000670  6EFE               	movwf	tosh,c
  4501  000672  50F8               	movf	tblptru,w,c
  4502  000674  6EFF               	movwf	tosu,c
  4503  000676  50FA               	movf	pclath,w,c
  4504  000678  0E85               	movlw	133
  4505  00067A  0012               	return		;indir
  4506  00067C                     l6170:
  4507                           
  4508                           ;FastTransfer.c: 195: serial_write(returnAddress);
  4509  00067C  D801               	call	u6908
  4510  00067E  D00B               	goto	l6172
  4511  000680                     u6908:
  4512  000680  0005               	push	
  4513  000682  6EFA               	movwf	pclath,c
  4514  000684  5034               	movf	_serial_write,w,c
  4515  000686  6EFD               	movwf	tosl,c
  4516  000688  5035               	movf	_serial_write+1,w,c
  4517  00068A  6EFE               	movwf	tosh,c
  4518  00068C  50F8               	movf	tblptru,w,c
  4519  00068E  6EFF               	movwf	tosu,c
  4520  000690  50FA               	movf	pclath,w,c
  4521  000692  503C               	movf	_returnAddress,w,c
  4522  000694  0012               	return		;indir
  4523  000696                     l6172:
  4524                           
  4525                           ;FastTransfer.c: 196: serial_write(moduleAddress);
  4526  000696  D801               	call	u6918
  4527  000698  D00B               	goto	l6174
  4528  00069A                     u6918:
  4529  00069A  0005               	push	
  4530  00069C  6EFA               	movwf	pclath,c
  4531  00069E  5034               	movf	_serial_write,w,c
  4532  0006A0  6EFD               	movwf	tosl,c
  4533  0006A2  5035               	movf	_serial_write+1,w,c
  4534  0006A4  6EFE               	movwf	tosh,c
  4535  0006A6  50F8               	movf	tblptru,w,c
  4536  0006A8  6EFF               	movwf	tosu,c
  4537  0006AA  50FA               	movf	pclath,w,c
  4538  0006AC  503B               	movf	_moduleAddress,w,c
  4539  0006AE  0012               	return		;indir
  4540  0006B0                     l6174:
  4541                           
  4542                           ;FastTransfer.c: 197: serial_write(3);
  4543  0006B0  D801               	call	u6928
  4544  0006B2  D00B               	goto	l6176
  4545  0006B4                     u6928:
  4546  0006B4  0005               	push	
  4547  0006B6  6EFA               	movwf	pclath,c
  4548  0006B8  5034               	movf	_serial_write,w,c
  4549  0006BA  6EFD               	movwf	tosl,c
  4550  0006BC  5035               	movf	_serial_write+1,w,c
  4551  0006BE  6EFE               	movwf	tosh,c
  4552  0006C0  50F8               	movf	tblptru,w,c
  4553  0006C2  6EFF               	movwf	tosu,c
  4554  0006C4  50FA               	movf	pclath,w,c
  4555  0006C6  0E03               	movlw	3
  4556  0006C8  0012               	return		;indir
  4557  0006CA                     l6176:
  4558                           
  4559                           ;FastTransfer.c: 198: serial_write(255);
  4560  0006CA  D801               	call	u6938
  4561  0006CC  D00B               	goto	l6178
  4562  0006CE                     u6938:
  4563  0006CE  0005               	push	
  4564  0006D0  6EFA               	movwf	pclath,c
  4565  0006D2  5034               	movf	_serial_write,w,c
  4566  0006D4  6EFD               	movwf	tosl,c
  4567  0006D6  5035               	movf	_serial_write+1,w,c
  4568  0006D8  6EFE               	movwf	tosh,c
  4569  0006DA  50F8               	movf	tblptru,w,c
  4570  0006DC  6EFF               	movwf	tosu,c
  4571  0006DE  50FA               	movf	pclath,w,c
  4572  0006E0  0EFF               	movlw	255
  4573  0006E2  0012               	return		;indir
  4574  0006E4                     l6178:
  4575                           
  4576                           ;FastTransfer.c: 199: serial_write(2);
  4577  0006E4  D801               	call	u6948
  4578  0006E6  D00B               	goto	l6180
  4579  0006E8                     u6948:
  4580  0006E8  0005               	push	
  4581  0006EA  6EFA               	movwf	pclath,c
  4582  0006EC  5034               	movf	_serial_write,w,c
  4583  0006EE  6EFD               	movwf	tosl,c
  4584  0006F0  5035               	movf	_serial_write+1,w,c
  4585  0006F2  6EFE               	movwf	tosh,c
  4586  0006F4  50F8               	movf	tblptru,w,c
  4587  0006F6  6EFF               	movwf	tosu,c
  4588  0006F8  50FA               	movf	pclath,w,c
  4589  0006FA  0E02               	movlw	2
  4590  0006FC  0012               	return		;indir
  4591  0006FE                     l6180:
  4592                           
  4593                           ;FastTransfer.c: 200: serial_write(rx_buffer[rx_array_inx - 1]);
  4594  0006FE  D801               	call	u6958
  4595  000700  D025               	goto	l6182
  4596  000702                     u6958:
  4597  000702  0005               	push	
  4598  000704  6EFA               	movwf	pclath,c
  4599  000706  5034               	movf	_serial_write,w,c
  4600  000708  6EFD               	movwf	tosl,c
  4601  00070A  5035               	movf	_serial_write+1,w,c
  4602  00070C  6EFE               	movwf	tosh,c
  4603  00070E  50F8               	movf	tblptru,w,c
  4604  000710  6EFF               	movwf	tosu,c
  4605  000712  50FA               	movf	pclath,w,c
  4606  000714  0EFF               	movlw	255
  4607  000716  0100               	movlb	0	; () banked
  4608  000718  6FF9               	movwf	??_receiveData& (0+255),b
  4609  00071A  0EFF               	movlw	255
  4610  00071C  0100               	movlb	0	; () banked
  4611  00071E  6FFA               	movwf	(??_receiveData+1)& (0+255),b
  4612  000720  503E               	movf	_rx_array_inx,w,c
  4613  000722  0100               	movlb	0	; () banked
  4614  000724  6FFB               	movwf	(??_receiveData+2)& (0+255),b
  4615  000726  6BFC               	clrf	(??_receiveData+3)& (0+255),b
  4616  000728  0100               	movlb	0	; () banked
  4617  00072A  51F9               	movf	??_receiveData& (0+255),w,b
  4618  00072C  0100               	movlb	0	; () banked
  4619  00072E  27FB               	addwf	(??_receiveData+2)& (0+255),f,b
  4620  000730  0100               	movlb	0	; () banked
  4621  000732  51FA               	movf	(??_receiveData+1)& (0+255),w,b
  4622  000734  0100               	movlb	0	; () banked
  4623  000736  23FC               	addwfc	(??_receiveData+3)& (0+255),f,b
  4624  000738  0E00               	movlw	low _rx_buffer
  4625  00073A  0100               	movlb	0	; () banked
  4626  00073C  25FB               	addwf	(??_receiveData+2)& (0+255),w,b
  4627  00073E  6ED9               	movwf	fsr2l,c
  4628  000740  0E03               	movlw	high _rx_buffer
  4629  000742  0100               	movlb	0	; () banked
  4630  000744  21FC               	addwfc	(??_receiveData+3)& (0+255),w,b
  4631  000746  6EDA               	movwf	fsr2h,c
  4632  000748  50DF               	movf	indf2,w,c
  4633  00074A  0012               	return		;indir
  4634  00074C                     l6182:
  4635                           
  4636                           ;FastTransfer.c: 201: serial_write(crcHolder);
  4637  00074C  D801               	call	u6968
  4638  00074E  D00C               	goto	l6184
  4639  000750                     u6968:
  4640  000750  0005               	push	
  4641  000752  6EFA               	movwf	pclath,c
  4642  000754  5034               	movf	_serial_write,w,c
  4643  000756  6EFD               	movwf	tosl,c
  4644  000758  5035               	movf	_serial_write+1,w,c
  4645  00075A  6EFE               	movwf	tosh,c
  4646  00075C  50F8               	movf	tblptru,w,c
  4647  00075E  6EFF               	movwf	tosu,c
  4648  000760  50FA               	movf	pclath,w,c
  4649  000762  0101               	movlb	1	; () banked
  4650  000764  5140               	movf	receiveData@crcHolder_2493& (0+255),w,b
  4651  000766  0012               	return		;indir
  4652  000768                     l6184:
  4653                           
  4654                           ;FastTransfer.c: 202: }
  4655                           ;FastTransfer.c: 205: rx_len = 0;
  4656  000768  0E00               	movlw	0
  4657  00076A  6E3F               	movwf	_rx_len,c
  4658                           
  4659                           ;FastTransfer.c: 206: rx_array_inx = 0;
  4660  00076C  0E00               	movlw	0
  4661  00076E  6E3E               	movwf	_rx_array_inx,c
  4662                           
  4663                           ;FastTransfer.c: 207: return 0;
  4664  000770  0E00               	movlw	0
  4665  000772  0012               	return	
  4666  000774                     l6192:
  4667                           
  4668                           ;FastTransfer.c: 208: }
  4669                           ;FastTransfer.c: 209: }
  4670                           ;FastTransfer.c: 210: }
  4671                           ;FastTransfer.c: 213: return 0;
  4672  000774  0E00               	movlw	0
  4673  000776  0012               	return	
  4674  000778                     __end_of_receiveData:
  4675                           	opt stack 0
  4676                           tosu	equ	0xFFF
  4677                           tosh	equ	0xFFE
  4678                           tosl	equ	0xFFD
  4679                           pclath	equ	0xFFA
  4680                           tblptru	equ	0xFF8
  4681                           tblptrh	equ	0xFF7
  4682                           tblptrl	equ	0xFF6
  4683                           tablat	equ	0xFF5
  4684                           prodh	equ	0xFF4
  4685                           prodl	equ	0xFF3
  4686                           intcon	equ	0xFF2
  4687                           postinc0	equ	0xFEE
  4688                           wreg	equ	0xFE8
  4689                           indf2	equ	0xFDF
  4690                           postinc2	equ	0xFDE
  4691                           postdec2	equ	0xFDD
  4692                           plusw2	equ	0xFDB
  4693                           fsr2h	equ	0xFDA
  4694                           fsr2l	equ	0xFD9
  4695                           status	equ	0xFD8
  4696                           
  4697 ;; *************** function _Send_put *****************
  4698 ;; Defined at:
  4699 ;;		line 130 in file "UART.c"
  4700 ;; Parameters:    Size  Location     Type
  4701 ;;  _data           1    wreg     unsigned char 
  4702 ;; Auto vars:     Size  Location     Type
  4703 ;;  _data           1    0[BANK0 ] unsigned char 
  4704 ;; Return value:  Size  Location     Type
  4705 ;;		None               void
  4706 ;; Registers used:
  4707 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4708 ;; Tracked objects:
  4709 ;;		On entry : 0/0
  4710 ;;		On exit  : 0/0
  4711 ;;		Unchanged: 0/0
  4712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4713 ;;      Params:         0       0       0       0       0       0       0
  4714 ;;      Locals:         0       1       0       0       0       0       0
  4715 ;;      Temps:          0       0       0       0       0       0       0
  4716 ;;      Totals:         0       1       0       0       0       0       0
  4717 ;;Total ram usage:        1 bytes
  4718 ;; Hardware stack levels used:    1
  4719 ;; Hardware stack levels required when called:    6
  4720 ;; This function calls:
  4721 ;;		_UART_buff_get
  4722 ;;		_UART_buff_put
  4723 ;; This function is called by:
  4724 ;;		_SYSTEM_Initialize
  4725 ;;		_putch
  4726 ;;		_sendData
  4727 ;;		_receiveData
  4728 ;; This function uses a non-reentrant model
  4729 ;;
  4730                           
  4731                           	psect	text13
  4732  001F84                     __ptext13:
  4733                           	opt stack 0
  4734  001F84                     _Send_put:
  4735                           	opt stack 21
  4736                           
  4737                           ;incstack = 0
  4738                           ;Send_put@_data stored from wreg
  4739  001F84  0100               	movlb	0	; () banked
  4740  001F86  6FF0               	movwf	Send_put@_data& (0+255),b
  4741                           
  4742                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  4743  001F88  0E00               	movlw	low _output_buffer
  4744  001F8A  6E21               	movwf	UART_buff_put@_this,c
  4745  001F8C  0E05               	movlw	high _output_buffer
  4746  001F8E  6E22               	movwf	UART_buff_put@_this+1,c
  4747  001F90  C0F0  F023         	movff	Send_put@_data,UART_buff_put@c
  4748  001F94  EC88  F008         	call	_UART_buff_put
  4749                           
  4750                           ;UART.c: 132: if (Transmit_stall == 1) {
  4751  001F98  0444               	decf	_Transmit_stall,w,c
  4752  001F9A  A4D8               	btfss	status,2,c
  4753  001F9C  0012               	return	
  4754                           
  4755                           ;UART.c: 133: Transmit_stall = 0;
  4756  001F9E  0E00               	movlw	0
  4757  001FA0  6E44               	movwf	_Transmit_stall,c
  4758                           
  4759                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  4760  001FA2  0E00               	movlw	low _output_buffer
  4761  001FA4  6E21               	movwf	UART_buff_get@_this,c
  4762  001FA6  0E05               	movlw	high _output_buffer
  4763  001FA8  6E22               	movwf	UART_buff_get@_this+1,c
  4764  001FAA  EC8B  F00C         	call	_UART_buff_get	;wreg free
  4765  001FAE  6EAD               	movwf	4013,c	;volatile
  4766                           
  4767                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  4768  001FB0  889D               	bsf	3997,4,c	;volatile
  4769  001FB2  0012               	return	
  4770  001FB4                     __end_of_Send_put:
  4771                           	opt stack 0
  4772                           tosu	equ	0xFFF
  4773                           tosh	equ	0xFFE
  4774                           tosl	equ	0xFFD
  4775                           pclath	equ	0xFFA
  4776                           tblptru	equ	0xFF8
  4777                           tblptrh	equ	0xFF7
  4778                           tblptrl	equ	0xFF6
  4779                           tablat	equ	0xFF5
  4780                           prodh	equ	0xFF4
  4781                           prodl	equ	0xFF3
  4782                           intcon	equ	0xFF2
  4783                           postinc0	equ	0xFEE
  4784                           wreg	equ	0xFE8
  4785                           indf2	equ	0xFDF
  4786                           postinc2	equ	0xFDE
  4787                           postdec2	equ	0xFDD
  4788                           plusw2	equ	0xFDB
  4789                           fsr2h	equ	0xFDA
  4790                           fsr2l	equ	0xFD9
  4791                           status	equ	0xFD8
  4792                           
  4793 ;; *************** function _UART_buff_put *****************
  4794 ;; Defined at:
  4795 ;;		line 68 in file "UART.c"
  4796 ;; Parameters:    Size  Location     Type
  4797 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  4798 ;;		 -> output_buffer(206), input_buffer(206), 
  4799 ;;  c               1   34[COMRAM] const unsigned char 
  4800 ;; Auto vars:     Size  Location     Type
  4801 ;;		None
  4802 ;; Return value:  Size  Location     Type
  4803 ;;		None               void
  4804 ;; Registers used:
  4805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4806 ;; Tracked objects:
  4807 ;;		On entry : 0/0
  4808 ;;		On exit  : 0/0
  4809 ;;		Unchanged: 0/0
  4810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4811 ;;      Params:         3       0       0       0       0       0       0
  4812 ;;      Locals:         0       0       0       0       0       0       0
  4813 ;;      Temps:          2       0       0       0       0       0       0
  4814 ;;      Totals:         5       0       0       0       0       0       0
  4815 ;;Total ram usage:        5 bytes
  4816 ;; Hardware stack levels used:    1
  4817 ;; Hardware stack levels required when called:    5
  4818 ;; This function calls:
  4819 ;;		_UART_buff_modulo_inc
  4820 ;; This function is called by:
  4821 ;;		_Send_put
  4822 ;; This function uses a non-reentrant model
  4823 ;;
  4824                           
  4825                           	psect	text14
  4826  001110                     __ptext14:
  4827                           	opt stack 0
  4828  001110                     _UART_buff_put:
  4829                           	opt stack 21
  4830                           
  4831                           ;UART.c: 69: if (_this->count < 200) {
  4832                           
  4833                           ;incstack = 0
  4834  001110  EE20 F0CC          	lfsr	2,204
  4835  001114  5021               	movf	UART_buff_put@_this,w,c
  4836  001116  26D9               	addwf	fsr2l,f,c
  4837  001118  5022               	movf	UART_buff_put@_this+1,w,c
  4838  00111A  22DA               	addwfc	fsr2h,f,c
  4839  00111C  0E01               	movlw	1
  4840  00111E  BEDB               	btfsc	plusw2,7,c
  4841  001120  D007               	goto	l5586
  4842  001122  0E01               	movlw	1
  4843  001124  50DB               	movf	plusw2,w,c
  4844  001126  E13A               	bnz	l5592
  4845  001128  0EC8               	movlw	200
  4846  00112A  5CDE               	subwf	postinc2,w,c
  4847  00112C  B0D8               	btfsc	status,0,c
  4848  00112E  D036               	goto	l5592
  4849  001130                     l5586:
  4850                           
  4851                           ;UART.c: 70: _this->buf[_this->head] = c;
  4852  001130  EE20 F0C8          	lfsr	2,200
  4853  001134  5021               	movf	UART_buff_put@_this,w,c
  4854  001136  26D9               	addwf	fsr2l,f,c
  4855  001138  5022               	movf	UART_buff_put@_this+1,w,c
  4856  00113A  22DA               	addwfc	fsr2h,f,c
  4857  00113C  CFDE F024          	movff	postinc2,??_UART_buff_put
  4858  001140  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  4859  001144  5024               	movf	??_UART_buff_put,w,c
  4860  001146  2421               	addwf	UART_buff_put@_this,w,c
  4861  001148  6ED9               	movwf	fsr2l,c
  4862  00114A  5025               	movf	??_UART_buff_put+1,w,c
  4863  00114C  2022               	addwfc	UART_buff_put@_this+1,w,c
  4864  00114E  6EDA               	movwf	fsr2h,c
  4865  001150  C023  FFDF         	movff	UART_buff_put@c,indf2
  4866                           
  4867                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  4868  001154  EE20 F0C8          	lfsr	2,200
  4869  001158  5021               	movf	UART_buff_put@_this,w,c
  4870  00115A  26D9               	addwf	fsr2l,f,c
  4871  00115C  5022               	movf	UART_buff_put@_this+1,w,c
  4872  00115E  22DA               	addwfc	fsr2h,f,c
  4873  001160  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4874  001164  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4875  001168  0E00               	movlw	0
  4876  00116A  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4877  00116C  0EC8               	movlw	200
  4878  00116E  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4879  001170  EC05  F010         	call	_UART_buff_modulo_inc	;wreg free
  4880  001174  EE20 F0C8          	lfsr	2,200
  4881  001178  5021               	movf	UART_buff_put@_this,w,c
  4882  00117A  26D9               	addwf	fsr2l,f,c
  4883  00117C  5022               	movf	UART_buff_put@_this+1,w,c
  4884  00117E  22DA               	addwfc	fsr2h,f,c
  4885  001180  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4886  001184  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4887                           
  4888                           ;UART.c: 72: ++_this->count;
  4889  001188  EE20 F0CC          	lfsr	2,204
  4890  00118C  5021               	movf	UART_buff_put@_this,w,c
  4891  00118E  26D9               	addwf	fsr2l,f,c
  4892  001190  5022               	movf	UART_buff_put@_this+1,w,c
  4893  001192  22DA               	addwfc	fsr2h,f,c
  4894  001194  2ADE               	incf	postinc2,f,c
  4895  001196  0E00               	movlw	0
  4896  001198  22DD               	addwfc	postdec2,f,c
  4897                           
  4898                           ;UART.c: 73: } else {
  4899  00119A  0012               	return	
  4900  00119C                     l5592:
  4901                           
  4902                           ;UART.c: 74: _this->buf[_this->head] = c;
  4903  00119C  EE20 F0C8          	lfsr	2,200
  4904  0011A0  5021               	movf	UART_buff_put@_this,w,c
  4905  0011A2  26D9               	addwf	fsr2l,f,c
  4906  0011A4  5022               	movf	UART_buff_put@_this+1,w,c
  4907  0011A6  22DA               	addwfc	fsr2h,f,c
  4908  0011A8  CFDE F024          	movff	postinc2,??_UART_buff_put
  4909  0011AC  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  4910  0011B0  5024               	movf	??_UART_buff_put,w,c
  4911  0011B2  2421               	addwf	UART_buff_put@_this,w,c
  4912  0011B4  6ED9               	movwf	fsr2l,c
  4913  0011B6  5025               	movf	??_UART_buff_put+1,w,c
  4914  0011B8  2022               	addwfc	UART_buff_put@_this+1,w,c
  4915  0011BA  6EDA               	movwf	fsr2h,c
  4916  0011BC  C023  FFDF         	movff	UART_buff_put@c,indf2
  4917                           
  4918                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  4919  0011C0  EE20 F0C8          	lfsr	2,200
  4920  0011C4  5021               	movf	UART_buff_put@_this,w,c
  4921  0011C6  26D9               	addwf	fsr2l,f,c
  4922  0011C8  5022               	movf	UART_buff_put@_this+1,w,c
  4923  0011CA  22DA               	addwfc	fsr2h,f,c
  4924  0011CC  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4925  0011D0  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4926  0011D4  0E00               	movlw	0
  4927  0011D6  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4928  0011D8  0EC8               	movlw	200
  4929  0011DA  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4930  0011DC  EC05  F010         	call	_UART_buff_modulo_inc	;wreg free
  4931  0011E0  EE20 F0C8          	lfsr	2,200
  4932  0011E4  5021               	movf	UART_buff_put@_this,w,c
  4933  0011E6  26D9               	addwf	fsr2l,f,c
  4934  0011E8  5022               	movf	UART_buff_put@_this+1,w,c
  4935  0011EA  22DA               	addwfc	fsr2h,f,c
  4936  0011EC  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4937  0011F0  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4938                           
  4939                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4940  0011F4  EE20 F0CA          	lfsr	2,202
  4941  0011F8  5021               	movf	UART_buff_put@_this,w,c
  4942  0011FA  26D9               	addwf	fsr2l,f,c
  4943  0011FC  5022               	movf	UART_buff_put@_this+1,w,c
  4944  0011FE  22DA               	addwfc	fsr2h,f,c
  4945  001200  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4946  001204  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4947  001208  0E00               	movlw	0
  4948  00120A  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4949  00120C  0EC8               	movlw	200
  4950  00120E  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4951  001210  EC05  F010         	call	_UART_buff_modulo_inc	;wreg free
  4952  001214  EE20 F0CA          	lfsr	2,202
  4953  001218  5021               	movf	UART_buff_put@_this,w,c
  4954  00121A  26D9               	addwf	fsr2l,f,c
  4955  00121C  5022               	movf	UART_buff_put@_this+1,w,c
  4956  00121E  22DA               	addwfc	fsr2h,f,c
  4957  001220  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4958  001224  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4959  001228  0012               	return	
  4960  00122A                     __end_of_UART_buff_put:
  4961                           	opt stack 0
  4962                           tosu	equ	0xFFF
  4963                           tosh	equ	0xFFE
  4964                           tosl	equ	0xFFD
  4965                           pclath	equ	0xFFA
  4966                           tblptru	equ	0xFF8
  4967                           tblptrh	equ	0xFF7
  4968                           tblptrl	equ	0xFF6
  4969                           tablat	equ	0xFF5
  4970                           prodh	equ	0xFF4
  4971                           prodl	equ	0xFF3
  4972                           intcon	equ	0xFF2
  4973                           postinc0	equ	0xFEE
  4974                           wreg	equ	0xFE8
  4975                           indf2	equ	0xFDF
  4976                           postinc2	equ	0xFDE
  4977                           postdec2	equ	0xFDD
  4978                           plusw2	equ	0xFDB
  4979                           fsr2h	equ	0xFDA
  4980                           fsr2l	equ	0xFD9
  4981                           status	equ	0xFD8
  4982                           
  4983 ;; *************** function _Receive_peek *****************
  4984 ;; Defined at:
  4985 ;;		line 118 in file "UART.c"
  4986 ;; Parameters:    Size  Location     Type
  4987 ;;		None
  4988 ;; Auto vars:     Size  Location     Type
  4989 ;;		None
  4990 ;; Return value:  Size  Location     Type
  4991 ;;                  1    wreg      unsigned char 
  4992 ;; Registers used:
  4993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4994 ;; Tracked objects:
  4995 ;;		On entry : 0/0
  4996 ;;		On exit  : 0/0
  4997 ;;		Unchanged: 0/0
  4998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4999 ;;      Params:         0       0       0       0       0       0       0
  5000 ;;      Locals:         0       0       0       0       0       0       0
  5001 ;;      Temps:          0       0       0       0       0       0       0
  5002 ;;      Totals:         0       0       0       0       0       0       0
  5003 ;;Total ram usage:        0 bytes
  5004 ;; Hardware stack levels used:    1
  5005 ;; Hardware stack levels required when called:    5
  5006 ;; This function calls:
  5007 ;;		_UART_buff_peek
  5008 ;; This function is called by:
  5009 ;;		_SYSTEM_Initialize
  5010 ;;		_receiveData
  5011 ;; This function uses a non-reentrant model
  5012 ;;
  5013                           
  5014                           	psect	text15
  5015  0021E4                     __ptext15:
  5016                           	opt stack 0
  5017  0021E4                     _Receive_peek:
  5018                           	opt stack 23
  5019                           
  5020                           ;UART.c: 119: return UART_buff_peek(&input_buffer);
  5021                           
  5022                           ;incstack = 0
  5023  0021E4  0E00               	movlw	low _input_buffer
  5024  0021E6  6E1B               	movwf	UART_buff_peek@_this,c
  5025  0021E8  0E04               	movlw	high _input_buffer
  5026  0021EA  6E1C               	movwf	UART_buff_peek@_this+1,c
  5027  0021EC  EC43  F010         	call	_UART_buff_peek	;wreg free
  5028  0021F0  0012               	return	
  5029  0021F2                     __end_of_Receive_peek:
  5030                           	opt stack 0
  5031                           tosu	equ	0xFFF
  5032                           tosh	equ	0xFFE
  5033                           tosl	equ	0xFFD
  5034                           pclath	equ	0xFFA
  5035                           tblptru	equ	0xFF8
  5036                           tblptrh	equ	0xFF7
  5037                           tblptrl	equ	0xFF6
  5038                           tablat	equ	0xFF5
  5039                           prodh	equ	0xFF4
  5040                           prodl	equ	0xFF3
  5041                           intcon	equ	0xFF2
  5042                           postinc0	equ	0xFEE
  5043                           wreg	equ	0xFE8
  5044                           indf2	equ	0xFDF
  5045                           postinc2	equ	0xFDE
  5046                           postdec2	equ	0xFDD
  5047                           plusw2	equ	0xFDB
  5048                           fsr2h	equ	0xFDA
  5049                           fsr2l	equ	0xFD9
  5050                           status	equ	0xFD8
  5051                           
  5052 ;; *************** function _UART_buff_peek *****************
  5053 ;; Defined at:
  5054 ;;		line 114 in file "UART.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  5057 ;;		 -> input_buffer(206), 
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;		None
  5060 ;; Return value:  Size  Location     Type
  5061 ;;                  1    wreg      unsigned char 
  5062 ;; Registers used:
  5063 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5069 ;;      Params:         2       0       0       0       0       0       0
  5070 ;;      Locals:         0       0       0       0       0       0       0
  5071 ;;      Temps:          2       0       0       0       0       0       0
  5072 ;;      Totals:         4       0       0       0       0       0       0
  5073 ;;Total ram usage:        4 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; Hardware stack levels required when called:    4
  5076 ;; This function calls:
  5077 ;;		Nothing
  5078 ;; This function is called by:
  5079 ;;		_Receive_peek
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083                           	psect	text16
  5084  002086                     __ptext16:
  5085                           	opt stack 0
  5086  002086                     _UART_buff_peek:
  5087                           	opt stack 23
  5088                           
  5089                           ;UART.c: 115: return _this->buf[_this->tail];
  5090                           
  5091                           ;incstack = 0
  5092  002086  EE20 F0CA          	lfsr	2,202
  5093  00208A  501B               	movf	UART_buff_peek@_this,w,c
  5094  00208C  26D9               	addwf	fsr2l,f,c
  5095  00208E  501C               	movf	UART_buff_peek@_this+1,w,c
  5096  002090  22DA               	addwfc	fsr2h,f,c
  5097  002092  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  5098  002096  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  5099  00209A  501D               	movf	??_UART_buff_peek,w,c
  5100  00209C  241B               	addwf	UART_buff_peek@_this,w,c
  5101  00209E  6ED9               	movwf	fsr2l,c
  5102  0020A0  501E               	movf	??_UART_buff_peek+1,w,c
  5103  0020A2  201C               	addwfc	UART_buff_peek@_this+1,w,c
  5104  0020A4  6EDA               	movwf	fsr2h,c
  5105  0020A6  50DF               	movf	indf2,w,c
  5106  0020A8  0012               	return	
  5107  0020AA                     __end_of_UART_buff_peek:
  5108                           	opt stack 0
  5109                           tosu	equ	0xFFF
  5110                           tosh	equ	0xFFE
  5111                           tosl	equ	0xFFD
  5112                           pclath	equ	0xFFA
  5113                           tblptru	equ	0xFF8
  5114                           tblptrh	equ	0xFF7
  5115                           tblptrl	equ	0xFF6
  5116                           tablat	equ	0xFF5
  5117                           prodh	equ	0xFF4
  5118                           prodl	equ	0xFF3
  5119                           intcon	equ	0xFF2
  5120                           postinc0	equ	0xFEE
  5121                           wreg	equ	0xFE8
  5122                           indf2	equ	0xFDF
  5123                           postinc2	equ	0xFDE
  5124                           postdec2	equ	0xFDD
  5125                           plusw2	equ	0xFDB
  5126                           fsr2h	equ	0xFDA
  5127                           fsr2l	equ	0xFD9
  5128                           status	equ	0xFD8
  5129                           
  5130 ;; *************** function _CRCcheck *****************
  5131 ;; Defined at:
  5132 ;;		line 376 in file "FastTransfer.c"
  5133 ;; Parameters:    Size  Location     Type
  5134 ;;		None
  5135 ;; Auto vars:     Size  Location     Type
  5136 ;;  rt              2    7[BANK0 ] int 
  5137 ;;  arrayHolder     3    4[BANK0 ] unsigned char [3]
  5138 ;;  calculatedCR    1    3[BANK0 ] unsigned char 
  5139 ;;  SentCRC         1    2[BANK0 ] unsigned char 
  5140 ;; Return value:  Size  Location     Type
  5141 ;;		None               void
  5142 ;; Registers used:
  5143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  5144 ;; Tracked objects:
  5145 ;;		On entry : 0/0
  5146 ;;		On exit  : 0/0
  5147 ;;		Unchanged: 0/0
  5148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5149 ;;      Params:         0       0       0       0       0       0       0
  5150 ;;      Locals:         0       7       0       0       0       0       0
  5151 ;;      Temps:          0       0       0       0       0       0       0
  5152 ;;      Totals:         0       7       0       0       0       0       0
  5153 ;;Total ram usage:        7 bytes
  5154 ;; Hardware stack levels used:    1
  5155 ;; Hardware stack levels required when called:    7
  5156 ;; This function calls:
  5157 ;;		Absolute function
  5158 ;;		_CRC8
  5159 ;;		_Receive_available
  5160 ;;		_Receive_get
  5161 ;;		_crcBufS_get
  5162 ;;		_crcBufS_status_put
  5163 ;; This function is called by:
  5164 ;;		_receiveData
  5165 ;; This function uses a non-reentrant model
  5166 ;;
  5167                           
  5168                           	psect	text17
  5169  000E64                     __ptext17:
  5170                           	opt stack 0
  5171  000E64                     _CRCcheck:
  5172                           	opt stack 21
  5173  000E64                     l5970:
  5174  000E64  D801               	call	u6338
  5175  000E66  D00A               	goto	u6339
  5176  000E68                     u6338:
  5177  000E68  0005               	push	
  5178  000E6A  6EFA               	movwf	pclath,c
  5179  000E6C  5030               	movf	_serial_available,w,c
  5180  000E6E  6EFD               	movwf	tosl,c
  5181  000E70  5031               	movf	_serial_available+1,w,c
  5182  000E72  6EFE               	movwf	tosh,c
  5183  000E74  50F8               	movf	tblptru,w,c
  5184  000E76  6EFF               	movwf	tosu,c
  5185  000E78  50FA               	movf	pclath,w,c
  5186  000E7A  0012               	return		;indir
  5187  000E7C                     u6339:
  5188  000E7C  BE1E               	btfsc	?_Receive_available+1,7,c
  5189  000E7E  D7F2               	goto	l5970
  5190  000E80  501E               	movf	?_Receive_available+1,w,c
  5191  000E82  E104               	bnz	l5972
  5192  000E84  0E04               	movlw	4
  5193  000E86  5C1D               	subwf	?_Receive_available,w,c
  5194  000E88  A0D8               	btfss	status,0,c
  5195  000E8A  D7EC               	goto	l5970
  5196  000E8C                     l5972:
  5197                           
  5198                           ;FastTransfer.c: 380: unsigned char arrayHolder[3];
  5199                           ;FastTransfer.c: 381: arrayHolder[0] = serial_read();
  5200  000E8C  D801               	call	u6358
  5201  000E8E  D00A               	goto	u6359
  5202  000E90                     u6358:
  5203  000E90  0005               	push	
  5204  000E92  6EFA               	movwf	pclath,c
  5205  000E94  5032               	movf	_serial_read,w,c
  5206  000E96  6EFD               	movwf	tosl,c
  5207  000E98  5033               	movf	_serial_read+1,w,c
  5208  000E9A  6EFE               	movwf	tosh,c
  5209  000E9C  50F8               	movf	tblptru,w,c
  5210  000E9E  6EFF               	movwf	tosu,c
  5211  000EA0  50FA               	movf	pclath,w,c
  5212  000EA2  0012               	return		;indir
  5213  000EA4                     u6359:
  5214  000EA4  0100               	movlb	0	; () banked
  5215  000EA6  6FF4               	movwf	CRCcheck@arrayHolder& (0+255),b
  5216                           
  5217                           ;FastTransfer.c: 382: arrayHolder[1] = serial_read();
  5218  000EA8  D801               	call	u6368
  5219  000EAA  D00A               	goto	u6369
  5220  000EAC                     u6368:
  5221  000EAC  0005               	push	
  5222  000EAE  6EFA               	movwf	pclath,c
  5223  000EB0  5032               	movf	_serial_read,w,c
  5224  000EB2  6EFD               	movwf	tosl,c
  5225  000EB4  5033               	movf	_serial_read+1,w,c
  5226  000EB6  6EFE               	movwf	tosh,c
  5227  000EB8  50F8               	movf	tblptru,w,c
  5228  000EBA  6EFF               	movwf	tosu,c
  5229  000EBC  50FA               	movf	pclath,w,c
  5230  000EBE  0012               	return		;indir
  5231  000EC0                     u6369:
  5232  000EC0  0100               	movlb	0	; () banked
  5233  000EC2  6FF5               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  5234                           
  5235                           ;FastTransfer.c: 383: arrayHolder[2] = serial_read();
  5236  000EC4  D801               	call	u6378
  5237  000EC6  D00A               	goto	u6379
  5238  000EC8                     u6378:
  5239  000EC8  0005               	push	
  5240  000ECA  6EFA               	movwf	pclath,c
  5241  000ECC  5032               	movf	_serial_read,w,c
  5242  000ECE  6EFD               	movwf	tosl,c
  5243  000ED0  5033               	movf	_serial_read+1,w,c
  5244  000ED2  6EFE               	movwf	tosh,c
  5245  000ED4  50F8               	movf	tblptru,w,c
  5246  000ED6  6EFF               	movwf	tosu,c
  5247  000ED8  50FA               	movf	pclath,w,c
  5248  000EDA  0012               	return		;indir
  5249  000EDC                     u6379:
  5250  000EDC  0100               	movlb	0	; () banked
  5251  000EDE  6FF6               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  5252                           
  5253                           ;FastTransfer.c: 384: unsigned char SentCRC = serial_read();
  5254  000EE0  D801               	call	u6388
  5255  000EE2  D00A               	goto	u6389
  5256  000EE4                     u6388:
  5257  000EE4  0005               	push	
  5258  000EE6  6EFA               	movwf	pclath,c
  5259  000EE8  5032               	movf	_serial_read,w,c
  5260  000EEA  6EFD               	movwf	tosl,c
  5261  000EEC  5033               	movf	_serial_read+1,w,c
  5262  000EEE  6EFE               	movwf	tosh,c
  5263  000EF0  50F8               	movf	tblptru,w,c
  5264  000EF2  6EFF               	movwf	tosu,c
  5265  000EF4  50FA               	movf	pclath,w,c
  5266  000EF6  0012               	return		;indir
  5267  000EF8                     u6389:
  5268  000EF8  0100               	movlb	0	; () banked
  5269  000EFA  6FF2               	movwf	CRCcheck@SentCRC& (0+255),b
  5270                           
  5271                           ; BSR set to: 0
  5272                           ;FastTransfer.c: 385: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  5273  000EFC  0EF4               	movlw	low CRCcheck@arrayHolder
  5274  000EFE  6E1B               	movwf	CRC8@data,c
  5275  000F00  0E00               	movlw	high CRCcheck@arrayHolder
  5276  000F02  6E1C               	movwf	CRC8@data+1,c
  5277  000F04  0E03               	movlw	3
  5278  000F06  6E1D               	movwf	CRC8@len,c
  5279  000F08  ECCE  F00E         	call	_CRC8	;wreg free
  5280  000F0C  0100               	movlb	0	; () banked
  5281  000F0E  6FF3               	movwf	CRCcheck@calculatedCRC& (0+255),b
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;FastTransfer.c: 388: if (SentCRC == calculatedCRC) {
  5285  000F10  0100               	movlb	0	; () banked
  5286  000F12  51F3               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  5287  000F14  0100               	movlb	0	; () banked
  5288  000F16  19F2               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  5289  000F18  A4D8               	btfss	status,2,c
  5290  000F1A  D04E               	goto	l6002
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;FastTransfer.c: 390: int rt;
  5294                           ;FastTransfer.c: 391: for (rt = 0; rt < 5; rt++) {
  5295  000F1C  0E00               	movlw	0
  5296  000F1E  0100               	movlb	0	; () banked
  5297  000F20  6FF8               	movwf	(CRCcheck@rt+1)& (0+255),b
  5298  000F22  0E00               	movlw	0
  5299  000F24  6FF7               	movwf	CRCcheck@rt& (0+255),b
  5300  000F26                     l5980:
  5301                           
  5302                           ; BSR set to: 0
  5303  000F26  0100               	movlb	0	; () banked
  5304  000F28  BFF8               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  5305  000F2A  D008               	goto	l5984
  5306  000F2C  0100               	movlb	0	; () banked
  5307  000F2E  51F8               	movf	(CRCcheck@rt+1)& (0+255),w,b
  5308  000F30  E147               	bnz	l1110
  5309  000F32  0E05               	movlw	5
  5310  000F34  0100               	movlb	0	; () banked
  5311  000F36  5DF7               	subwf	CRCcheck@rt& (0+255),w,b
  5312  000F38  B0D8               	btfsc	status,0,c
  5313  000F3A  0012               	return	
  5314  000F3C                     l5984:
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;FastTransfer.c: 392: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  5318  000F3C  0E28               	movlw	low _crc_buffer
  5319  000F3E  6E1B               	movwf	crcBufS_get@_this,c
  5320  000F40  0E01               	movlw	high _crc_buffer
  5321  000F42  6E1C               	movwf	crcBufS_get@_this+1,c
  5322  000F44  C0F7  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  5323  000F48  0E00               	movlw	0
  5324  000F4A  6E1E               	movwf	crcBufS_get@space,c
  5325  000F4C  EC2D  F00A         	call	_crcBufS_get	;wreg free
  5326  000F50  183C               	xorwf	_returnAddress,w,c
  5327  000F52  A4D8               	btfss	status,2,c
  5328  000F54  D02D               	goto	l5998
  5329                           
  5330                           ;FastTransfer.c: 393: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  5331  000F56  0E28               	movlw	low _crc_buffer
  5332  000F58  6E1B               	movwf	crcBufS_get@_this,c
  5333  000F5A  0E01               	movlw	high _crc_buffer
  5334  000F5C  6E1C               	movwf	crcBufS_get@_this+1,c
  5335  000F5E  C0F7  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  5336  000F62  0E01               	movlw	1
  5337  000F64  6E1E               	movwf	crcBufS_get@space,c
  5338  000F66  EC2D  F00A         	call	_crcBufS_get	;wreg free
  5339  000F6A  0100               	movlb	0	; () banked
  5340  000F6C  19F6               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  5341  000F6E  A4D8               	btfss	status,2,c
  5342  000F70  D01F               	goto	l5998
  5343                           
  5344                           ; BSR set to: 0
  5345                           ;FastTransfer.c: 394: if (arrayHolder[1] == 1) {
  5346  000F72  0100               	movlb	0	; () banked
  5347  000F74  05F5               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  5348  000F76  A4D8               	btfss	status,2,c
  5349  000F78  D00B               	goto	l5994
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 1);
  5353  000F7A  0E28               	movlw	low _crc_buffer
  5354  000F7C  6E1B               	movwf	crcBufS_status_put@_this,c
  5355  000F7E  0E01               	movlw	high _crc_buffer
  5356  000F80  6E1C               	movwf	crcBufS_status_put@_this+1,c
  5357  000F82  C0F7  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  5358  000F86  0E01               	movlw	1
  5359  000F88  6E1E               	movwf	crcBufS_status_put@status,c
  5360  000F8A  EC12  F00B         	call	_crcBufS_status_put	;wreg free
  5361                           
  5362                           ;FastTransfer.c: 396: break;
  5363  000F8E  0012               	return	
  5364  000F90                     l5994:
  5365  000F90  0E02               	movlw	2
  5366  000F92  0100               	movlb	0	; () banked
  5367  000F94  19F5               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  5368  000F96  A4D8               	btfss	status,2,c
  5369  000F98  D00B               	goto	l5998
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;FastTransfer.c: 398: crcBufS_status_put(&crc_buffer, rt, 2);
  5373  000F9A  0E28               	movlw	low _crc_buffer
  5374  000F9C  6E1B               	movwf	crcBufS_status_put@_this,c
  5375  000F9E  0E01               	movlw	high _crc_buffer
  5376  000FA0  6E1C               	movwf	crcBufS_status_put@_this+1,c
  5377  000FA2  C0F7  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  5378  000FA6  0E02               	movlw	2
  5379  000FA8  6E1E               	movwf	crcBufS_status_put@status,c
  5380  000FAA  EC12  F00B         	call	_crcBufS_status_put	;wreg free
  5381                           
  5382                           ;FastTransfer.c: 399: break;
  5383  000FAE  0012               	return	
  5384  000FB0                     l5998:
  5385  000FB0  0100               	movlb	0	; () banked
  5386  000FB2  4BF7               	infsnz	CRCcheck@rt& (0+255),f,b
  5387  000FB4  2BF8               	incf	(CRCcheck@rt+1)& (0+255),f,b
  5388  000FB6  D7B7               	goto	l5980
  5389  000FB8                     l6002:
  5390                           
  5391                           ; BSR set to: 0
  5392                           ;FastTransfer.c: 405: crcErrorCounter++;
  5393  000FB8  0100               	movlb	0	; () banked
  5394  000FBA  4BC9               	infsnz	_crcErrorCounter& (0+255),f,b
  5395  000FBC  2BCA               	incf	(_crcErrorCounter+1)& (0+255),f,b
  5396  000FBE  0012               	return	
  5397  000FC0                     l1110:
  5398  000FC0  0012               	return		;funcret
  5399  000FC2                     __end_of_CRCcheck:
  5400                           	opt stack 0
  5401                           tosu	equ	0xFFF
  5402                           tosh	equ	0xFFE
  5403                           tosl	equ	0xFFD
  5404                           pclath	equ	0xFFA
  5405                           tblptru	equ	0xFF8
  5406                           tblptrh	equ	0xFF7
  5407                           tblptrl	equ	0xFF6
  5408                           tablat	equ	0xFF5
  5409                           prodh	equ	0xFF4
  5410                           prodl	equ	0xFF3
  5411                           intcon	equ	0xFF2
  5412                           postinc0	equ	0xFEE
  5413                           wreg	equ	0xFE8
  5414                           indf2	equ	0xFDF
  5415                           postinc2	equ	0xFDE
  5416                           postdec2	equ	0xFDD
  5417                           plusw2	equ	0xFDB
  5418                           fsr2h	equ	0xFDA
  5419                           fsr2l	equ	0xFD9
  5420                           status	equ	0xFD8
  5421                           
  5422 ;; *************** function _crcBufS_status_put *****************
  5423 ;; Defined at:
  5424 ;;		line 339 in file "FastTransfer.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  5427 ;;		 -> crc_buffer(17), 
  5428 ;;  time            1   28[COMRAM] unsigned char 
  5429 ;;  status          1   29[COMRAM] unsigned char 
  5430 ;; Auto vars:     Size  Location     Type
  5431 ;;  wantedTime      2   34[COMRAM] int 
  5432 ;; Return value:  Size  Location     Type
  5433 ;;		None               void
  5434 ;; Registers used:
  5435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5436 ;; Tracked objects:
  5437 ;;		On entry : 0/0
  5438 ;;		On exit  : 0/0
  5439 ;;		Unchanged: 0/0
  5440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5441 ;;      Params:         4       0       0       0       0       0       0
  5442 ;;      Locals:         2       0       0       0       0       0       0
  5443 ;;      Temps:          4       0       0       0       0       0       0
  5444 ;;      Totals:        10       0       0       0       0       0       0
  5445 ;;Total ram usage:       10 bytes
  5446 ;; Hardware stack levels used:    1
  5447 ;; Hardware stack levels required when called:    4
  5448 ;; This function calls:
  5449 ;;		Nothing
  5450 ;; This function is called by:
  5451 ;;		_CRCcheck
  5452 ;; This function uses a non-reentrant model
  5453 ;;
  5454                           
  5455                           	psect	text18
  5456  001624                     __ptext18:
  5457                           	opt stack 0
  5458  001624                     _crcBufS_status_put:
  5459                           	opt stack 23
  5460                           
  5461                           ;FastTransfer.c: 340: if (time >= 5) {
  5462                           
  5463                           ;incstack = 0
  5464  001624  0E04               	movlw	4
  5465  001626  641D               	cpfsgt	crcBufS_status_put@time,c
  5466  001628  D002               	goto	l5754
  5467                           
  5468                           ;FastTransfer.c: 341: time = 5 - 1;
  5469  00162A  0E04               	movlw	4
  5470  00162C  6E1D               	movwf	crcBufS_status_put@time,c
  5471  00162E                     l5754:
  5472                           
  5473                           ;FastTransfer.c: 342: }
  5474                           ;FastTransfer.c: 343: time = time + 1;
  5475  00162E  281D               	incf	crcBufS_status_put@time,w,c
  5476  001630  6E1D               	movwf	crcBufS_status_put@time,c
  5477                           
  5478                           ;FastTransfer.c: 344: int wantedTime = time * 3;
  5479  001632  501D               	movf	crcBufS_status_put@time,w,c
  5480  001634  0D03               	mullw	3
  5481  001636  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  5482  00163A  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  5483                           
  5484                           ;FastTransfer.c: 345: if (wantedTime > _this->head) {
  5485  00163E  EE20 F00F          	lfsr	2,15
  5486  001642  501B               	movf	crcBufS_status_put@_this,w,c
  5487  001644  26D9               	addwf	fsr2l,f,c
  5488  001646  501C               	movf	crcBufS_status_put@_this+1,w,c
  5489  001648  22DA               	addwfc	fsr2h,f,c
  5490  00164A  5023               	movf	crcBufS_status_put@wantedTime,w,c
  5491  00164C  5CDE               	subwf	postinc2,w,c
  5492  00164E  50DE               	movf	postinc2,w,c
  5493  001650  0A80               	xorlw	128
  5494  001652  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  5495  001654  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  5496  001656  0A80               	xorlw	128
  5497  001658  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  5498  00165A  B0D8               	btfsc	status,0,c
  5499  00165C  D02B               	goto	l5762
  5500                           
  5501                           ;FastTransfer.c: 346: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  5502  00165E  EE20 F00F          	lfsr	2,15
  5503  001662  501B               	movf	crcBufS_status_put@_this,w,c
  5504  001664  26D9               	addwf	fsr2l,f,c
  5505  001666  501C               	movf	crcBufS_status_put@_this+1,w,c
  5506  001668  22DA               	addwfc	fsr2h,f,c
  5507  00166A  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  5508  00166E  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  5509  001672  1E1F               	comf	??_crcBufS_status_put,f,c
  5510  001674  1E20               	comf	??_crcBufS_status_put+1,f,c
  5511  001676  4A1F               	infsnz	??_crcBufS_status_put,f,c
  5512  001678  2A20               	incf	??_crcBufS_status_put+1,f,c
  5513  00167A  5023               	movf	crcBufS_status_put@wantedTime,w,c
  5514  00167C  261F               	addwf	??_crcBufS_status_put,f,c
  5515  00167E  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  5516  001680  2220               	addwfc	??_crcBufS_status_put+1,f,c
  5517  001682  1E1F               	comf	??_crcBufS_status_put,f,c
  5518  001684  1E20               	comf	??_crcBufS_status_put+1,f,c
  5519  001686  4A1F               	infsnz	??_crcBufS_status_put,f,c
  5520  001688  2A20               	incf	??_crcBufS_status_put+1,f,c
  5521  00168A  0E0F               	movlw	15
  5522  00168C  241F               	addwf	??_crcBufS_status_put,w,c
  5523  00168E  6E23               	movwf	crcBufS_status_put@wantedTime,c
  5524  001690  0E00               	movlw	0
  5525  001692  2020               	addwfc	??_crcBufS_status_put+1,w,c
  5526  001694  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  5527                           
  5528                           ;FastTransfer.c: 347: _this->buf[(wantedTime + 2)] = status;
  5529  001696  0E02               	movlw	2
  5530  001698  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  5531  00169A  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  5532  00169C  0E00               	movlw	0
  5533  00169E  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  5534  0016A0  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  5535  0016A2  501F               	movf	??_crcBufS_status_put,w,c
  5536  0016A4  241B               	addwf	crcBufS_status_put@_this,w,c
  5537  0016A6  6ED9               	movwf	fsr2l,c
  5538  0016A8  5020               	movf	??_crcBufS_status_put+1,w,c
  5539  0016AA  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  5540  0016AC  6EDA               	movwf	fsr2h,c
  5541  0016AE  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  5542                           
  5543                           ;FastTransfer.c: 348: } else {
  5544  0016B2  0012               	return	
  5545  0016B4                     l5762:
  5546                           
  5547                           ;FastTransfer.c: 349: _this->buf[(_this->head - wantedTime) + 2] = status;
  5548  0016B4  EE20 F00F          	lfsr	2,15
  5549  0016B8  501B               	movf	crcBufS_status_put@_this,w,c
  5550  0016BA  26D9               	addwf	fsr2l,f,c
  5551  0016BC  501C               	movf	crcBufS_status_put@_this+1,w,c
  5552  0016BE  22DA               	addwfc	fsr2h,f,c
  5553  0016C0  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  5554  0016C4  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  5555  0016C8  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  5556  0016CC  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  5557  0016D0  1E21               	comf	??_crcBufS_status_put+2,f,c
  5558  0016D2  1E22               	comf	??_crcBufS_status_put+3,f,c
  5559  0016D4  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  5560  0016D6  2A22               	incf	??_crcBufS_status_put+3,f,c
  5561  0016D8  501F               	movf	??_crcBufS_status_put,w,c
  5562  0016DA  2621               	addwf	??_crcBufS_status_put+2,f,c
  5563  0016DC  5020               	movf	??_crcBufS_status_put+1,w,c
  5564  0016DE  2222               	addwfc	??_crcBufS_status_put+3,f,c
  5565  0016E0  0E02               	movlw	2
  5566  0016E2  2621               	addwf	??_crcBufS_status_put+2,f,c
  5567  0016E4  0E00               	movlw	0
  5568  0016E6  2222               	addwfc	??_crcBufS_status_put+3,f,c
  5569  0016E8  5021               	movf	??_crcBufS_status_put+2,w,c
  5570  0016EA  241B               	addwf	crcBufS_status_put@_this,w,c
  5571  0016EC  6ED9               	movwf	fsr2l,c
  5572  0016EE  5022               	movf	??_crcBufS_status_put+3,w,c
  5573  0016F0  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  5574  0016F2  6EDA               	movwf	fsr2h,c
  5575  0016F4  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  5576  0016F8  0012               	return	
  5577  0016FA                     __end_of_crcBufS_status_put:
  5578                           	opt stack 0
  5579                           tosu	equ	0xFFF
  5580                           tosh	equ	0xFFE
  5581                           tosl	equ	0xFFD
  5582                           pclath	equ	0xFFA
  5583                           tblptru	equ	0xFF8
  5584                           tblptrh	equ	0xFF7
  5585                           tblptrl	equ	0xFF6
  5586                           tablat	equ	0xFF5
  5587                           prodh	equ	0xFF4
  5588                           prodl	equ	0xFF3
  5589                           intcon	equ	0xFF2
  5590                           postinc0	equ	0xFEE
  5591                           wreg	equ	0xFE8
  5592                           indf2	equ	0xFDF
  5593                           postinc2	equ	0xFDE
  5594                           postdec2	equ	0xFDD
  5595                           plusw2	equ	0xFDB
  5596                           fsr2h	equ	0xFDA
  5597                           fsr2l	equ	0xFD9
  5598                           status	equ	0xFD8
  5599                           
  5600 ;; *************** function _crcBufS_get *****************
  5601 ;; Defined at:
  5602 ;;		line 356 in file "FastTransfer.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  5605 ;;		 -> crc_buffer(17), 
  5606 ;;  time            1   28[COMRAM] unsigned char 
  5607 ;;  space           1   29[COMRAM] unsigned char 
  5608 ;; Auto vars:     Size  Location     Type
  5609 ;;  wantedTime      2    0[BANK0 ] int 
  5610 ;; Return value:  Size  Location     Type
  5611 ;;                  1    wreg      unsigned char 
  5612 ;; Registers used:
  5613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5614 ;; Tracked objects:
  5615 ;;		On entry : 0/0
  5616 ;;		On exit  : 0/0
  5617 ;;		Unchanged: 0/0
  5618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5619 ;;      Params:         4       0       0       0       0       0       0
  5620 ;;      Locals:         0       2       0       0       0       0       0
  5621 ;;      Temps:          6       0       0       0       0       0       0
  5622 ;;      Totals:        10       2       0       0       0       0       0
  5623 ;;Total ram usage:       12 bytes
  5624 ;; Hardware stack levels used:    1
  5625 ;; Hardware stack levels required when called:    4
  5626 ;; This function calls:
  5627 ;;		Nothing
  5628 ;; This function is called by:
  5629 ;;		_CRCcheck
  5630 ;;		_AKNAK
  5631 ;; This function uses a non-reentrant model
  5632 ;;
  5633                           
  5634                           	psect	text19
  5635  00145A                     __ptext19:
  5636                           	opt stack 0
  5637  00145A                     _crcBufS_get:
  5638                           	opt stack 23
  5639                           
  5640                           ;FastTransfer.c: 357: if (time >= 5) {
  5641                           
  5642                           ;incstack = 0
  5643  00145A  0E04               	movlw	4
  5644  00145C  641D               	cpfsgt	crcBufS_get@time,c
  5645  00145E  D002               	goto	l5730
  5646                           
  5647                           ;FastTransfer.c: 358: time = 5 - 1;
  5648  001460  0E04               	movlw	4
  5649  001462  6E1D               	movwf	crcBufS_get@time,c
  5650  001464                     l5730:
  5651                           
  5652                           ;FastTransfer.c: 359: }
  5653                           ;FastTransfer.c: 360: if (space >= 3) {
  5654  001464  0E02               	movlw	2
  5655  001466  641E               	cpfsgt	crcBufS_get@space,c
  5656  001468  D002               	goto	l5734
  5657                           
  5658                           ;FastTransfer.c: 361: space = 3 - 1;
  5659  00146A  0E02               	movlw	2
  5660  00146C  6E1E               	movwf	crcBufS_get@space,c
  5661  00146E                     l5734:
  5662                           
  5663                           ;FastTransfer.c: 362: }
  5664                           ;FastTransfer.c: 363: time = time + 1;
  5665  00146E  281D               	incf	crcBufS_get@time,w,c
  5666  001470  6E1D               	movwf	crcBufS_get@time,c
  5667                           
  5668                           ;FastTransfer.c: 364: int wantedTime = time * 3;
  5669  001472  501D               	movf	crcBufS_get@time,w,c
  5670  001474  0D03               	mullw	3
  5671  001476  CFF3 F0F0          	movff	prodl,crcBufS_get@wantedTime
  5672  00147A  CFF4 F0F1          	movff	prodh,crcBufS_get@wantedTime+1
  5673                           
  5674                           ;FastTransfer.c: 365: if (wantedTime > _this->head) {
  5675  00147E  EE20 F00F          	lfsr	2,15
  5676  001482  501B               	movf	crcBufS_get@_this,w,c
  5677  001484  26D9               	addwf	fsr2l,f,c
  5678  001486  501C               	movf	crcBufS_get@_this+1,w,c
  5679  001488  22DA               	addwfc	fsr2h,f,c
  5680  00148A  0100               	movlb	0	; () banked
  5681  00148C  51F0               	movf	crcBufS_get@wantedTime& (0+255),w,b
  5682  00148E  5CDE               	subwf	postinc2,w,c
  5683  001490  50DE               	movf	postinc2,w,c
  5684  001492  0A80               	xorlw	128
  5685  001494  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  5686  001496  0100               	movlb	0	; () banked
  5687  001498  51F1               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  5688  00149A  0A80               	xorlw	128
  5689  00149C  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  5690  00149E  B0D8               	btfsc	status,0,c
  5691  0014A0  D030               	goto	l5746
  5692                           
  5693                           ; BSR set to: 0
  5694                           ;FastTransfer.c: 366: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  5695  0014A2  EE20 F00F          	lfsr	2,15
  5696  0014A6  501B               	movf	crcBufS_get@_this,w,c
  5697  0014A8  26D9               	addwf	fsr2l,f,c
  5698  0014AA  501C               	movf	crcBufS_get@_this+1,w,c
  5699  0014AC  22DA               	addwfc	fsr2h,f,c
  5700  0014AE  CFDE F01F          	movff	postinc2,??_crcBufS_get
  5701  0014B2  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  5702  0014B6  1E1F               	comf	??_crcBufS_get,f,c
  5703  0014B8  1E20               	comf	??_crcBufS_get+1,f,c
  5704  0014BA  4A1F               	infsnz	??_crcBufS_get,f,c
  5705  0014BC  2A20               	incf	??_crcBufS_get+1,f,c
  5706  0014BE  0100               	movlb	0	; () banked
  5707  0014C0  51F0               	movf	crcBufS_get@wantedTime& (0+255),w,b
  5708  0014C2  261F               	addwf	??_crcBufS_get,f,c
  5709  0014C4  0100               	movlb	0	; () banked
  5710  0014C6  51F1               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  5711  0014C8  2220               	addwfc	??_crcBufS_get+1,f,c
  5712  0014CA  1E1F               	comf	??_crcBufS_get,f,c
  5713  0014CC  1E20               	comf	??_crcBufS_get+1,f,c
  5714  0014CE  4A1F               	infsnz	??_crcBufS_get,f,c
  5715  0014D0  2A20               	incf	??_crcBufS_get+1,f,c
  5716  0014D2  0E0F               	movlw	15
  5717  0014D4  241F               	addwf	??_crcBufS_get,w,c
  5718  0014D6  0100               	movlb	0	; () banked
  5719  0014D8  6FF0               	movwf	crcBufS_get@wantedTime& (0+255),b
  5720  0014DA  0E00               	movlw	0
  5721  0014DC  2020               	addwfc	??_crcBufS_get+1,w,c
  5722  0014DE  0100               	movlb	0	; () banked
  5723  0014E0  6FF1               	movwf	(crcBufS_get@wantedTime+1)& (0+255),b
  5724                           
  5725                           ;FastTransfer.c: 367: return (_this->buf[(wantedTime + space)]);
  5726  0014E2  501E               	movf	crcBufS_get@space,w,c
  5727  0014E4  0100               	movlb	0	; () banked
  5728  0014E6  25F0               	addwf	crcBufS_get@wantedTime& (0+255),w,b
  5729  0014E8  6E1F               	movwf	??_crcBufS_get& (0+255),c
  5730  0014EA  0E00               	movlw	0
  5731  0014EC  0100               	movlb	0	; () banked
  5732  0014EE  21F1               	addwfc	(crcBufS_get@wantedTime+1)& (0+255),w,b
  5733  0014F0  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  5734  0014F2  501F               	movf	??_crcBufS_get,w,c
  5735  0014F4  241B               	addwf	crcBufS_get@_this,w,c
  5736  0014F6  6ED9               	movwf	fsr2l,c
  5737  0014F8  5020               	movf	??_crcBufS_get+1,w,c
  5738  0014FA  201C               	addwfc	crcBufS_get@_this+1,w,c
  5739  0014FC  6EDA               	movwf	fsr2h,c
  5740  0014FE  50DF               	movf	indf2,w,c
  5741                           
  5742                           ; BSR set to: 0
  5743                           ;FastTransfer.c: 368: } else {
  5744                           
  5745                           ; BSR set to: 0
  5746  001500  0012               	return	
  5747  001502                     l5746:
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;FastTransfer.c: 369: return (_this->buf[(_this->head - wantedTime) + space]);
  5751  001502  EE20 F00F          	lfsr	2,15
  5752  001506  501B               	movf	crcBufS_get@_this,w,c
  5753  001508  26D9               	addwf	fsr2l,f,c
  5754  00150A  501C               	movf	crcBufS_get@_this+1,w,c
  5755  00150C  22DA               	addwfc	fsr2h,f,c
  5756  00150E  CFDE F01F          	movff	postinc2,??_crcBufS_get
  5757  001512  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  5758  001516  C0F0  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  5759  00151A  C0F1  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  5760  00151E  1E21               	comf	??_crcBufS_get+2,f,c
  5761  001520  1E22               	comf	??_crcBufS_get+3,f,c
  5762  001522  4A21               	infsnz	??_crcBufS_get+2,f,c
  5763  001524  2A22               	incf	??_crcBufS_get+3,f,c
  5764  001526  501E               	movf	crcBufS_get@space,w,c
  5765  001528  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  5766  00152A  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  5767  00152C  5021               	movf	??_crcBufS_get+2,w,c
  5768  00152E  2623               	addwf	??_crcBufS_get+4,f,c
  5769  001530  5022               	movf	??_crcBufS_get+3,w,c
  5770  001532  2224               	addwfc	??_crcBufS_get+5,f,c
  5771  001534  501F               	movf	??_crcBufS_get,w,c
  5772  001536  2623               	addwf	??_crcBufS_get+4,f,c
  5773  001538  5020               	movf	??_crcBufS_get+1,w,c
  5774  00153A  2224               	addwfc	??_crcBufS_get+5,f,c
  5775  00153C  5023               	movf	??_crcBufS_get+4,w,c
  5776  00153E  241B               	addwf	crcBufS_get@_this,w,c
  5777  001540  6ED9               	movwf	fsr2l,c
  5778  001542  5024               	movf	??_crcBufS_get+5,w,c
  5779  001544  201C               	addwfc	crcBufS_get@_this+1,w,c
  5780  001546  6EDA               	movwf	fsr2h,c
  5781  001548  50DF               	movf	indf2,w,c
  5782                           
  5783                           ; BSR set to: 0
  5784  00154A  0012               	return	
  5785  00154C                     __end_of_crcBufS_get:
  5786                           	opt stack 0
  5787                           tosu	equ	0xFFF
  5788                           tosh	equ	0xFFE
  5789                           tosl	equ	0xFFD
  5790                           pclath	equ	0xFFA
  5791                           tblptru	equ	0xFF8
  5792                           tblptrh	equ	0xFF7
  5793                           tblptrl	equ	0xFF6
  5794                           tablat	equ	0xFF5
  5795                           prodh	equ	0xFF4
  5796                           prodl	equ	0xFF3
  5797                           intcon	equ	0xFF2
  5798                           postinc0	equ	0xFEE
  5799                           wreg	equ	0xFE8
  5800                           indf2	equ	0xFDF
  5801                           postinc2	equ	0xFDE
  5802                           postdec2	equ	0xFDD
  5803                           plusw2	equ	0xFDB
  5804                           fsr2h	equ	0xFDA
  5805                           fsr2l	equ	0xFD9
  5806                           status	equ	0xFD8
  5807                           
  5808 ;; *************** function _Receive_get *****************
  5809 ;; Defined at:
  5810 ;;		line 126 in file "UART.c"
  5811 ;; Parameters:    Size  Location     Type
  5812 ;;		None
  5813 ;; Auto vars:     Size  Location     Type
  5814 ;;		None
  5815 ;; Return value:  Size  Location     Type
  5816 ;;                  1    wreg      unsigned char 
  5817 ;; Registers used:
  5818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5819 ;; Tracked objects:
  5820 ;;		On entry : 0/0
  5821 ;;		On exit  : 0/0
  5822 ;;		Unchanged: 0/0
  5823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5824 ;;      Params:         0       0       0       0       0       0       0
  5825 ;;      Locals:         0       0       0       0       0       0       0
  5826 ;;      Temps:          0       0       0       0       0       0       0
  5827 ;;      Totals:         0       0       0       0       0       0       0
  5828 ;;Total ram usage:        0 bytes
  5829 ;; Hardware stack levels used:    1
  5830 ;; Hardware stack levels required when called:    6
  5831 ;; This function calls:
  5832 ;;		_UART_buff_get
  5833 ;; This function is called by:
  5834 ;;		_SYSTEM_Initialize
  5835 ;;		_getch
  5836 ;;		_CRCcheck
  5837 ;;		_receiveData
  5838 ;; This function uses a non-reentrant model
  5839 ;;
  5840                           
  5841                           	psect	text20
  5842  0021F2                     __ptext20:
  5843                           	opt stack 0
  5844  0021F2                     _Receive_get:
  5845                           	opt stack 22
  5846                           
  5847                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  5848                           
  5849                           ; BSR set to: 0
  5850                           ;incstack = 0
  5851  0021F2  0E00               	movlw	low _input_buffer
  5852  0021F4  6E21               	movwf	UART_buff_get@_this,c
  5853  0021F6  0E04               	movlw	high _input_buffer
  5854  0021F8  6E22               	movwf	UART_buff_get@_this+1,c
  5855  0021FA  EC8B  F00C         	call	_UART_buff_get	;wreg free
  5856  0021FE  0012               	return	
  5857  002200                     __end_of_Receive_get:
  5858                           	opt stack 0
  5859                           tosu	equ	0xFFF
  5860                           tosh	equ	0xFFE
  5861                           tosl	equ	0xFFD
  5862                           pclath	equ	0xFFA
  5863                           tblptru	equ	0xFF8
  5864                           tblptrh	equ	0xFF7
  5865                           tblptrl	equ	0xFF6
  5866                           tablat	equ	0xFF5
  5867                           prodh	equ	0xFF4
  5868                           prodl	equ	0xFF3
  5869                           intcon	equ	0xFF2
  5870                           postinc0	equ	0xFEE
  5871                           wreg	equ	0xFE8
  5872                           indf2	equ	0xFDF
  5873                           postinc2	equ	0xFDE
  5874                           postdec2	equ	0xFDD
  5875                           plusw2	equ	0xFDB
  5876                           fsr2h	equ	0xFDA
  5877                           fsr2l	equ	0xFD9
  5878                           status	equ	0xFD8
  5879                           
  5880 ;; *************** function _UART_buff_get *****************
  5881 ;; Defined at:
  5882 ;;		line 81 in file "UART.c"
  5883 ;; Parameters:    Size  Location     Type
  5884 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  5885 ;;		 -> output_buffer(206), input_buffer(206), 
  5886 ;; Auto vars:     Size  Location     Type
  5887 ;;  c               1   36[COMRAM] unsigned char 
  5888 ;; Return value:  Size  Location     Type
  5889 ;;                  1    wreg      unsigned char 
  5890 ;; Registers used:
  5891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5892 ;; Tracked objects:
  5893 ;;		On entry : 0/0
  5894 ;;		On exit  : 0/0
  5895 ;;		Unchanged: 0/0
  5896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5897 ;;      Params:         2       0       0       0       0       0       0
  5898 ;;      Locals:         1       0       0       0       0       0       0
  5899 ;;      Temps:          2       0       0       0       0       0       0
  5900 ;;      Totals:         5       0       0       0       0       0       0
  5901 ;;Total ram usage:        5 bytes
  5902 ;; Hardware stack levels used:    1
  5903 ;; Hardware stack levels required when called:    5
  5904 ;; This function calls:
  5905 ;;		_UART_buff_modulo_inc
  5906 ;; This function is called by:
  5907 ;;		_Receive_get
  5908 ;;		_Send_put
  5909 ;; This function uses a non-reentrant model
  5910 ;;
  5911                           
  5912                           	psect	text21
  5913  001916                     __ptext21:
  5914                           	opt stack 0
  5915  001916                     _UART_buff_get:
  5916                           	opt stack 21
  5917                           
  5918                           ;UART.c: 82: unsigned char c;
  5919                           ;UART.c: 83: if (_this->count > 0) {
  5920                           
  5921                           ;incstack = 0
  5922  001916  EE20 F0CC          	lfsr	2,204
  5923  00191A  5021               	movf	UART_buff_get@_this,w,c
  5924  00191C  26D9               	addwf	fsr2l,f,c
  5925  00191E  5022               	movf	UART_buff_get@_this+1,w,c
  5926  001920  22DA               	addwfc	fsr2h,f,c
  5927  001922  0E01               	movlw	1
  5928  001924  BEDB               	btfsc	plusw2,7,c
  5929  001926  D03C               	goto	l5606
  5930  001928  0E01               	movlw	1
  5931  00192A  50DB               	movf	plusw2,w,c
  5932  00192C  E103               	bnz	u5910
  5933  00192E  04DE               	decf	postinc2,w,c
  5934  001930  A0D8               	btfss	status,0,c
  5935  001932  D036               	goto	l5606
  5936  001934                     u5910:
  5937                           
  5938                           ;UART.c: 84: c = _this->buf[_this->tail];
  5939  001934  EE20 F0CA          	lfsr	2,202
  5940  001938  5021               	movf	UART_buff_get@_this,w,c
  5941  00193A  26D9               	addwf	fsr2l,f,c
  5942  00193C  5022               	movf	UART_buff_get@_this+1,w,c
  5943  00193E  22DA               	addwfc	fsr2h,f,c
  5944  001940  CFDE F023          	movff	postinc2,??_UART_buff_get
  5945  001944  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  5946  001948  5023               	movf	??_UART_buff_get,w,c
  5947  00194A  2421               	addwf	UART_buff_get@_this,w,c
  5948  00194C  6ED9               	movwf	fsr2l,c
  5949  00194E  5024               	movf	??_UART_buff_get+1,w,c
  5950  001950  2022               	addwfc	UART_buff_get@_this+1,w,c
  5951  001952  6EDA               	movwf	fsr2h,c
  5952  001954  50DF               	movf	indf2,w,c
  5953  001956  6E25               	movwf	UART_buff_get@c,c
  5954                           
  5955                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  5956  001958  EE20 F0CA          	lfsr	2,202
  5957  00195C  5021               	movf	UART_buff_get@_this,w,c
  5958  00195E  26D9               	addwf	fsr2l,f,c
  5959  001960  5022               	movf	UART_buff_get@_this+1,w,c
  5960  001962  22DA               	addwfc	fsr2h,f,c
  5961  001964  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  5962  001968  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  5963  00196C  0E00               	movlw	0
  5964  00196E  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  5965  001970  0EC8               	movlw	200
  5966  001972  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  5967  001974  EC05  F010         	call	_UART_buff_modulo_inc	;wreg free
  5968  001978  EE20 F0CA          	lfsr	2,202
  5969  00197C  5021               	movf	UART_buff_get@_this,w,c
  5970  00197E  26D9               	addwf	fsr2l,f,c
  5971  001980  5022               	movf	UART_buff_get@_this+1,w,c
  5972  001982  22DA               	addwfc	fsr2h,f,c
  5973  001984  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  5974  001988  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  5975                           
  5976                           ;UART.c: 86: --_this->count;
  5977  00198C  EE20 F0CC          	lfsr	2,204
  5978  001990  5021               	movf	UART_buff_get@_this,w,c
  5979  001992  26D9               	addwf	fsr2l,f,c
  5980  001994  5022               	movf	UART_buff_get@_this+1,w,c
  5981  001996  22DA               	addwfc	fsr2h,f,c
  5982  001998  06DE               	decf	postinc2,f,c
  5983  00199A  0E00               	movlw	0
  5984  00199C  5ADD               	subwfb	postdec2,f,c
  5985                           
  5986                           ;UART.c: 87: } else {
  5987  00199E  D002               	goto	l1155
  5988  0019A0                     l5606:
  5989                           
  5990                           ;UART.c: 88: c = 0;
  5991  0019A0  0E00               	movlw	0
  5992  0019A2  6E25               	movwf	UART_buff_get@c,c
  5993  0019A4                     l1155:
  5994                           
  5995                           ;UART.c: 89: }
  5996                           ;UART.c: 90: return (c);
  5997  0019A4  5025               	movf	UART_buff_get@c,w,c
  5998  0019A6  0012               	return	
  5999  0019A8                     __end_of_UART_buff_get:
  6000                           	opt stack 0
  6001                           tosu	equ	0xFFF
  6002                           tosh	equ	0xFFE
  6003                           tosl	equ	0xFFD
  6004                           pclath	equ	0xFFA
  6005                           tblptru	equ	0xFF8
  6006                           tblptrh	equ	0xFF7
  6007                           tblptrl	equ	0xFF6
  6008                           tablat	equ	0xFF5
  6009                           prodh	equ	0xFF4
  6010                           prodl	equ	0xFF3
  6011                           intcon	equ	0xFF2
  6012                           postinc0	equ	0xFEE
  6013                           wreg	equ	0xFE8
  6014                           indf2	equ	0xFDF
  6015                           postinc2	equ	0xFDE
  6016                           postdec2	equ	0xFDD
  6017                           plusw2	equ	0xFDB
  6018                           fsr2h	equ	0xFDA
  6019                           fsr2l	equ	0xFD9
  6020                           status	equ	0xFD8
  6021                           
  6022 ;; *************** function _UART_buff_modulo_inc *****************
  6023 ;; Defined at:
  6024 ;;		line 106 in file "UART.c"
  6025 ;; Parameters:    Size  Location     Type
  6026 ;;  value           2   26[COMRAM] const unsigned int 
  6027 ;;  modulus         2   28[COMRAM] const unsigned int 
  6028 ;; Auto vars:     Size  Location     Type
  6029 ;;  my_value        2   30[COMRAM] unsigned int 
  6030 ;; Return value:  Size  Location     Type
  6031 ;;                  2   26[COMRAM] unsigned int 
  6032 ;; Registers used:
  6033 ;;		wreg, status,2, status,0
  6034 ;; Tracked objects:
  6035 ;;		On entry : 0/0
  6036 ;;		On exit  : 0/0
  6037 ;;		Unchanged: 0/0
  6038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6039 ;;      Params:         4       0       0       0       0       0       0
  6040 ;;      Locals:         2       0       0       0       0       0       0
  6041 ;;      Temps:          0       0       0       0       0       0       0
  6042 ;;      Totals:         6       0       0       0       0       0       0
  6043 ;;Total ram usage:        6 bytes
  6044 ;; Hardware stack levels used:    1
  6045 ;; Hardware stack levels required when called:    4
  6046 ;; This function calls:
  6047 ;;		Nothing
  6048 ;; This function is called by:
  6049 ;;		_UART_buff_put
  6050 ;;		_UART_buff_get
  6051 ;; This function uses a non-reentrant model
  6052 ;;
  6053                           
  6054                           	psect	text22
  6055  00200A                     __ptext22:
  6056                           	opt stack 0
  6057  00200A                     _UART_buff_modulo_inc:
  6058                           	opt stack 21
  6059                           
  6060                           ;UART.c: 107: unsigned int my_value = value + 1;
  6061                           
  6062                           ;incstack = 0
  6063  00200A  0E01               	movlw	1
  6064  00200C  241B               	addwf	UART_buff_modulo_inc@value,w,c
  6065  00200E  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  6066  002010  0E00               	movlw	0
  6067  002012  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  6068  002014  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  6069                           
  6070                           ;UART.c: 108: if (my_value >= modulus) {
  6071  002016  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  6072  002018  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  6073  00201A  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  6074  00201C  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  6075  00201E  A0D8               	btfss	status,0,c
  6076  002020  D004               	goto	l5564
  6077                           
  6078                           ;UART.c: 109: my_value = 0;
  6079  002022  0E00               	movlw	0
  6080  002024  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  6081  002026  0E00               	movlw	0
  6082  002028  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  6083  00202A                     l5564:
  6084                           
  6085                           ;UART.c: 110: }
  6086                           ;UART.c: 111: return (my_value);
  6087  00202A  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  6088  00202E  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  6089  002032  0012               	return	
  6090  002034                     __end_of_UART_buff_modulo_inc:
  6091                           	opt stack 0
  6092                           tosu	equ	0xFFF
  6093                           tosh	equ	0xFFE
  6094                           tosl	equ	0xFFD
  6095                           pclath	equ	0xFFA
  6096                           tblptru	equ	0xFF8
  6097                           tblptrh	equ	0xFF7
  6098                           tblptrl	equ	0xFF6
  6099                           tablat	equ	0xFF5
  6100                           prodh	equ	0xFF4
  6101                           prodl	equ	0xFF3
  6102                           intcon	equ	0xFF2
  6103                           postinc0	equ	0xFEE
  6104                           wreg	equ	0xFE8
  6105                           indf2	equ	0xFDF
  6106                           postinc2	equ	0xFDE
  6107                           postdec2	equ	0xFDD
  6108                           plusw2	equ	0xFDB
  6109                           fsr2h	equ	0xFDA
  6110                           fsr2l	equ	0xFD9
  6111                           status	equ	0xFD8
  6112                           
  6113 ;; *************** function _Receive_available *****************
  6114 ;; Defined at:
  6115 ;;		line 122 in file "UART.c"
  6116 ;; Parameters:    Size  Location     Type
  6117 ;;		None
  6118 ;; Auto vars:     Size  Location     Type
  6119 ;;		None
  6120 ;; Return value:  Size  Location     Type
  6121 ;;                  2   28[COMRAM] int 
  6122 ;; Registers used:
  6123 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6124 ;; Tracked objects:
  6125 ;;		On entry : 0/0
  6126 ;;		On exit  : 0/0
  6127 ;;		Unchanged: 0/0
  6128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6129 ;;      Params:         2       0       0       0       0       0       0
  6130 ;;      Locals:         0       0       0       0       0       0       0
  6131 ;;      Temps:          0       0       0       0       0       0       0
  6132 ;;      Totals:         2       0       0       0       0       0       0
  6133 ;;Total ram usage:        2 bytes
  6134 ;; Hardware stack levels used:    1
  6135 ;; Hardware stack levels required when called:    5
  6136 ;; This function calls:
  6137 ;;		_UART_buff_size
  6138 ;; This function is called by:
  6139 ;;		_SYSTEM_Initialize
  6140 ;;		_CRCcheck
  6141 ;;		_receiveData
  6142 ;; This function uses a non-reentrant model
  6143 ;;
  6144                           
  6145                           	psect	text23
  6146  00217E                     __ptext23:
  6147                           	opt stack 0
  6148  00217E                     _Receive_available:
  6149                           	opt stack 23
  6150                           
  6151                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  6152                           
  6153                           ;incstack = 0
  6154  00217E  0E00               	movlw	low _input_buffer
  6155  002180  6E1B               	movwf	UART_buff_size@_this,c
  6156  002182  0E04               	movlw	high _input_buffer
  6157  002184  6E1C               	movwf	UART_buff_size@_this+1,c
  6158  002186  ECCA  F010         	call	_UART_buff_size	;wreg free
  6159  00218A  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  6160  00218E  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  6161  002192  0012               	return	
  6162  002194                     __end_of_Receive_available:
  6163                           	opt stack 0
  6164                           tosu	equ	0xFFF
  6165                           tosh	equ	0xFFE
  6166                           tosl	equ	0xFFD
  6167                           pclath	equ	0xFFA
  6168                           tblptru	equ	0xFF8
  6169                           tblptrh	equ	0xFF7
  6170                           tblptrl	equ	0xFF6
  6171                           tablat	equ	0xFF5
  6172                           prodh	equ	0xFF4
  6173                           prodl	equ	0xFF3
  6174                           intcon	equ	0xFF2
  6175                           postinc0	equ	0xFEE
  6176                           wreg	equ	0xFE8
  6177                           indf2	equ	0xFDF
  6178                           postinc2	equ	0xFDE
  6179                           postdec2	equ	0xFDD
  6180                           plusw2	equ	0xFDB
  6181                           fsr2h	equ	0xFDA
  6182                           fsr2l	equ	0xFD9
  6183                           status	equ	0xFD8
  6184                           
  6185 ;; *************** function _UART_buff_size *****************
  6186 ;; Defined at:
  6187 ;;		line 102 in file "UART.c"
  6188 ;; Parameters:    Size  Location     Type
  6189 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  6190 ;;		 -> output_buffer(206), input_buffer(206), 
  6191 ;; Auto vars:     Size  Location     Type
  6192 ;;		None
  6193 ;; Return value:  Size  Location     Type
  6194 ;;                  2   26[COMRAM] int 
  6195 ;; Registers used:
  6196 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6197 ;; Tracked objects:
  6198 ;;		On entry : 0/0
  6199 ;;		On exit  : 0/0
  6200 ;;		Unchanged: 0/0
  6201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6202 ;;      Params:         2       0       0       0       0       0       0
  6203 ;;      Locals:         0       0       0       0       0       0       0
  6204 ;;      Temps:          0       0       0       0       0       0       0
  6205 ;;      Totals:         2       0       0       0       0       0       0
  6206 ;;Total ram usage:        2 bytes
  6207 ;; Hardware stack levels used:    1
  6208 ;; Hardware stack levels required when called:    4
  6209 ;; This function calls:
  6210 ;;		Nothing
  6211 ;; This function is called by:
  6212 ;;		_Receive_available
  6213 ;; This function uses a non-reentrant model
  6214 ;;
  6215                           
  6216                           	psect	text24
  6217  002194                     __ptext24:
  6218                           	opt stack 0
  6219  002194                     _UART_buff_size:
  6220                           	opt stack 23
  6221                           
  6222                           ;UART.c: 103: return (_this->count);
  6223                           
  6224                           ;incstack = 0
  6225  002194  EE20 F0CC          	lfsr	2,204
  6226  002198  501B               	movf	UART_buff_size@_this,w,c
  6227  00219A  26D9               	addwf	fsr2l,f,c
  6228  00219C  501C               	movf	UART_buff_size@_this+1,w,c
  6229  00219E  22DA               	addwfc	fsr2h,f,c
  6230  0021A0  CFDE F01B          	movff	postinc2,?_UART_buff_size
  6231  0021A4  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  6232  0021A8  0012               	return	
  6233  0021AA                     __end_of_UART_buff_size:
  6234                           	opt stack 0
  6235                           tosu	equ	0xFFF
  6236                           tosh	equ	0xFFE
  6237                           tosl	equ	0xFFD
  6238                           pclath	equ	0xFFA
  6239                           tblptru	equ	0xFF8
  6240                           tblptrh	equ	0xFF7
  6241                           tblptrl	equ	0xFF6
  6242                           tablat	equ	0xFF5
  6243                           prodh	equ	0xFF4
  6244                           prodl	equ	0xFF3
  6245                           intcon	equ	0xFF2
  6246                           postinc0	equ	0xFEE
  6247                           wreg	equ	0xFE8
  6248                           indf2	equ	0xFDF
  6249                           postinc2	equ	0xFDE
  6250                           postdec2	equ	0xFDD
  6251                           plusw2	equ	0xFDB
  6252                           fsr2h	equ	0xFDA
  6253                           fsr2l	equ	0xFD9
  6254                           status	equ	0xFD8
  6255                           
  6256 ;; *************** function _CRC8 *****************
  6257 ;; Defined at:
  6258 ;;		line 35 in file "FastTransfer.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;  data            2   26[COMRAM] PTR const unsigned char 
  6261 ;;		 -> CRCcheck@arrayHolder(3), receiveData@holder_2492(3), receiveData@holder(3), rx_buffer(200), 
  6262 ;;		 -> ring_buffer(206), NULL(0), 
  6263 ;;  len             1   28[COMRAM] unsigned char 
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;  sum             1   29[COMRAM] unsigned char 
  6266 ;;  tempI           1   31[COMRAM] unsigned char 
  6267 ;;  extract         1   30[COMRAM] unsigned char 
  6268 ;;  crc             1   32[COMRAM] unsigned char 
  6269 ;; Return value:  Size  Location     Type
  6270 ;;                  1    wreg      unsigned char 
  6271 ;; Registers used:
  6272 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6278 ;;      Params:         3       0       0       0       0       0       0
  6279 ;;      Locals:         4       0       0       0       0       0       0
  6280 ;;      Temps:          0       0       0       0       0       0       0
  6281 ;;      Totals:         7       0       0       0       0       0       0
  6282 ;;Total ram usage:        7 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; Hardware stack levels required when called:    4
  6285 ;; This function calls:
  6286 ;;		Nothing
  6287 ;; This function is called by:
  6288 ;;		_sendData
  6289 ;;		_receiveData
  6290 ;;		_CRCcheck
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           	psect	text25
  6295  001D9C                     __ptext25:
  6296                           	opt stack 0
  6297  001D9C                     _CRC8:
  6298                           	opt stack 23
  6299                           
  6300                           ;FastTransfer.c: 36: unsigned char crc = 0x00;
  6301                           
  6302                           ;incstack = 0
  6303  001D9C  0E00               	movlw	0
  6304  001D9E  6E21               	movwf	CRC8@crc,c
  6305                           
  6306                           ;FastTransfer.c: 37: while (len--) {
  6307  001DA0  D01C               	goto	l5692
  6308  001DA2                     l5676:
  6309                           
  6310                           ;FastTransfer.c: 38: unsigned char extract = *data++;
  6311  001DA2  C01B  FFD9         	movff	CRC8@data,fsr2l
  6312  001DA6  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  6313  001DAA  50DF               	movf	indf2,w,c
  6314  001DAC  6E1F               	movwf	CRC8@extract,c
  6315  001DAE  4A1B               	infsnz	CRC8@data,f,c
  6316  001DB0  2A1C               	incf	CRC8@data+1,f,c
  6317                           
  6318                           ;FastTransfer.c: 39: unsigned char tempI;
  6319                           ;FastTransfer.c: 40: for (tempI = 8; tempI; tempI--) {
  6320  001DB2  0E08               	movlw	8
  6321  001DB4  6E20               	movwf	CRC8@tempI,c
  6322  001DB6  D00E               	goto	l5690
  6323  001DB8                     l5682:
  6324                           
  6325                           ;FastTransfer.c: 41: unsigned char sum = (crc ^ extract) & 0x01;
  6326  001DB8  5021               	movf	CRC8@crc,w,c
  6327  001DBA  181F               	xorwf	CRC8@extract,w,c
  6328  001DBC  0B01               	andlw	1
  6329  001DBE  6E1E               	movwf	CRC8@sum,c
  6330                           
  6331                           ;FastTransfer.c: 42: crc >>= 1;
  6332  001DC0  90D8               	bcf	status,0,c
  6333  001DC2  3221               	rrcf	CRC8@crc,f,c
  6334                           
  6335                           ;FastTransfer.c: 43: if (sum) {
  6336  001DC4  501E               	movf	CRC8@sum,w,c
  6337  001DC6  B4D8               	btfsc	status,2,c
  6338  001DC8  D002               	goto	l994
  6339                           
  6340                           ;FastTransfer.c: 44: crc ^= 0x8C;
  6341  001DCA  0E8C               	movlw	140
  6342  001DCC  1A21               	xorwf	CRC8@crc,f,c
  6343  001DCE                     l994:
  6344                           
  6345                           ;FastTransfer.c: 45: }
  6346                           ;FastTransfer.c: 46: extract >>= 1;
  6347  001DCE  90D8               	bcf	status,0,c
  6348  001DD0  321F               	rrcf	CRC8@extract,f,c
  6349  001DD2  0620               	decf	CRC8@tempI,f,c
  6350  001DD4                     l5690:
  6351  001DD4  5020               	movf	CRC8@tempI,w,c
  6352  001DD6  A4D8               	btfss	status,2,c
  6353  001DD8  D7EF               	goto	l5682
  6354  001DDA                     l5692:
  6355  001DDA  061D               	decf	CRC8@len,f,c
  6356  001DDC  281D               	incf	CRC8@len,w,c
  6357  001DDE  A4D8               	btfss	status,2,c
  6358  001DE0  D7E0               	goto	l5676
  6359                           
  6360                           ;FastTransfer.c: 47: }
  6361                           ;FastTransfer.c: 48: }
  6362                           ;FastTransfer.c: 49: return crc;
  6363  001DE2  5021               	movf	CRC8@crc,w,c
  6364  001DE4  0012               	return	
  6365  001DE6                     __end_of_CRC8:
  6366                           	opt stack 0
  6367                           tosu	equ	0xFFF
  6368                           tosh	equ	0xFFE
  6369                           tosl	equ	0xFFD
  6370                           pclath	equ	0xFFA
  6371                           tblptru	equ	0xFF8
  6372                           tblptrh	equ	0xFF7
  6373                           tblptrl	equ	0xFF6
  6374                           tablat	equ	0xFF5
  6375                           prodh	equ	0xFF4
  6376                           prodl	equ	0xFF3
  6377                           intcon	equ	0xFF2
  6378                           postinc0	equ	0xFEE
  6379                           wreg	equ	0xFE8
  6380                           indf2	equ	0xFDF
  6381                           postinc2	equ	0xFDE
  6382                           postdec2	equ	0xFDD
  6383                           plusw2	equ	0xFDB
  6384                           fsr2h	equ	0xFDA
  6385                           fsr2l	equ	0xFD9
  6386                           status	equ	0xFD8
  6387                           
  6388 ;; *************** function _handleIndicators *****************
  6389 ;; Defined at:
  6390 ;;		line 35 in file "Communications.c"
  6391 ;; Parameters:    Size  Location     Type
  6392 ;;  receivedIndi    2    0[BANK0 ] int 
  6393 ;; Auto vars:     Size  Location     Type
  6394 ;;  i               2    5[BANK0 ] int 
  6395 ;; Return value:  Size  Location     Type
  6396 ;;		None               void
  6397 ;; Registers used:
  6398 ;;		wreg, status,2, status,0, cstack
  6399 ;; Tracked objects:
  6400 ;;		On entry : 0/0
  6401 ;;		On exit  : 0/0
  6402 ;;		Unchanged: 0/0
  6403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6404 ;;      Params:         0       2       0       0       0       0       0
  6405 ;;      Locals:         0       2       0       0       0       0       0
  6406 ;;      Temps:          0       3       0       0       0       0       0
  6407 ;;      Totals:         0       7       0       0       0       0       0
  6408 ;;Total ram usage:        7 bytes
  6409 ;; Hardware stack levels used:    1
  6410 ;; Hardware stack levels required when called:    6
  6411 ;; This function calls:
  6412 ;;		_SetLEDOut
  6413 ;; This function is called by:
  6414 ;;		_updateComms
  6415 ;; This function uses a non-reentrant model
  6416 ;;
  6417                           
  6418                           	psect	text26
  6419  001882                     __ptext26:
  6420                           	opt stack 0
  6421  001882                     _handleIndicators:
  6422                           	opt stack 23
  6423                           
  6424                           ;Communications.c: 36: static int oldIndicators = 0;
  6425                           ;Communications.c: 37: if (receivedIndicators != oldIndicators) {
  6426                           
  6427                           ;incstack = 0
  6428  001882  0100               	movlb	0	; () banked
  6429  001884  51DD               	movf	handleIndicators@oldIndicators& (0+255),w,b
  6430  001886  0100               	movlb	0	; () banked
  6431  001888  19F0               	xorwf	handleIndicators@receivedIndicators& (0+255),w,b
  6432  00188A  E106               	bnz	u6970
  6433  00188C  0100               	movlb	0	; () banked
  6434  00188E  51DE               	movf	(handleIndicators@oldIndicators+1)& (0+255),w,b
  6435  001890  0100               	movlb	0	; () banked
  6436  001892  19F1               	xorwf	(handleIndicators@receivedIndicators+1)& (0+255),w,b
  6437  001894  B4D8               	btfsc	status,2,c
  6438  001896  0012               	return	
  6439  001898                     u6970:
  6440                           
  6441                           ; BSR set to: 0
  6442                           ;Communications.c: 38: int i = 0;
  6443  001898  0E00               	movlw	0
  6444  00189A  0100               	movlb	0	; () banked
  6445  00189C  6FF6               	movwf	(handleIndicators@i+1)& (0+255),b
  6446  00189E  0E00               	movlw	0
  6447  0018A0  6FF5               	movwf	handleIndicators@i& (0+255),b
  6448                           
  6449                           ;Communications.c: 39: for (i = 0; i < 6; i++) {
  6450  0018A2  0E00               	movlw	0
  6451  0018A4  0100               	movlb	0	; () banked
  6452  0018A6  6FF6               	movwf	(handleIndicators@i+1)& (0+255),b
  6453  0018A8  0E00               	movlw	0
  6454  0018AA  6FF5               	movwf	handleIndicators@i& (0+255),b
  6455                           
  6456                           ; BSR set to: 0
  6457  0018AC  0100               	movlb	0	; () banked
  6458  0018AE  BFF6               	btfsc	(handleIndicators@i+1)& (0+255),7,b
  6459  0018B0  D008               	goto	l6216
  6460  0018B2  0100               	movlb	0	; () banked
  6461  0018B4  51F6               	movf	(handleIndicators@i+1)& (0+255),w,b
  6462  0018B6  E12A               	bnz	l913
  6463  0018B8  0E06               	movlw	6
  6464  0018BA  0100               	movlb	0	; () banked
  6465  0018BC  5DF5               	subwf	handleIndicators@i& (0+255),w,b
  6466  0018BE  B0D8               	btfsc	status,0,c
  6467  0018C0  D025               	goto	l913
  6468  0018C2                     l6216:
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;Communications.c: 40: SetLEDOut(i, ((receivedIndicators >> i)&0x01));
  6472  0018C2  C0F5  F01F         	movff	handleIndicators@i,SetLEDOut@lednum
  6473  0018C6  C0F6  F020         	movff	handleIndicators@i+1,SetLEDOut@lednum+1
  6474  0018CA  C0F5  F0F2         	movff	handleIndicators@i,??_handleIndicators
  6475  0018CE  C0F0  F0F3         	movff	handleIndicators@receivedIndicators,??_handleIndicators+1
  6476  0018D2  C0F1  F0F4         	movff	handleIndicators@receivedIndicators+1,??_handleIndicators+2
  6477  0018D6  0100               	movlb	0	; () banked
  6478  0018D8  2BF2               	incf	??_handleIndicators& (0+255),f,b
  6479  0018DA  D004               	goto	u6994
  6480  0018DC                     u6995:
  6481  0018DC  0100               	movlb	0	; () banked
  6482  0018DE  35F4               	rlcf	(??_handleIndicators+2)& (0+255),w,b
  6483  0018E0  33F4               	rrcf	(??_handleIndicators+2)& (0+255),f,b
  6484  0018E2  33F3               	rrcf	(??_handleIndicators+1)& (0+255),f,b
  6485  0018E4                     u6994:
  6486  0018E4  0100               	movlb	0	; () banked
  6487  0018E6  2FF2               	decfsz	??_handleIndicators& (0+255),f,b
  6488  0018E8  D7F9               	goto	u6995
  6489  0018EA  0E01               	movlw	1
  6490  0018EC  0100               	movlb	0	; () banked
  6491  0018EE  15F3               	andwf	(??_handleIndicators+1)& (0+255),w,b
  6492  0018F0  6E21               	movwf	SetLEDOut@state,c
  6493  0018F2  6A22               	clrf	SetLEDOut@state+1,c
  6494  0018F4  EC23  F005         	call	_SetLEDOut	;wreg free
  6495  0018F8  0100               	movlb	0	; () banked
  6496  0018FA  4BF5               	infsnz	handleIndicators@i& (0+255),f,b
  6497  0018FC  2BF6               	incf	(handleIndicators@i+1)& (0+255),f,b
  6498                           
  6499                           ; BSR set to: 0
  6500  0018FE  0100               	movlb	0	; () banked
  6501  001900  BFF6               	btfsc	(handleIndicators@i+1)& (0+255),7,b
  6502  001902  D7DF               	goto	l6216
  6503  001904  0100               	movlb	0	; () banked
  6504  001906  51F6               	movf	(handleIndicators@i+1)& (0+255),w,b
  6505  001908  E101               	bnz	u7000
  6506  00190A  D7D6               	goto	L2
  6507  00190C                     u7000:
  6508  00190C                     l913:
  6509                           
  6510                           ; BSR set to: 0
  6511                           ;Communications.c: 41: }
  6512                           ;Communications.c: 42: oldIndicators = receivedIndicators;
  6513  00190C  C0F0  F0DD         	movff	handleIndicators@receivedIndicators,handleIndicators@oldIndicators
  6514  001910  C0F1  F0DE         	movff	handleIndicators@receivedIndicators+1,handleIndicators@oldIndicators+1
  6515  001914  0012               	return	
  6516  001916                     __end_of_handleIndicators:
  6517                           	opt stack 0
  6518                           tosu	equ	0xFFF
  6519                           tosh	equ	0xFFE
  6520                           tosl	equ	0xFFD
  6521                           pclath	equ	0xFFA
  6522                           tblptru	equ	0xFF8
  6523                           tblptrh	equ	0xFF7
  6524                           tblptrl	equ	0xFF6
  6525                           tablat	equ	0xFF5
  6526                           prodh	equ	0xFF4
  6527                           prodl	equ	0xFF3
  6528                           intcon	equ	0xFF2
  6529                           postinc0	equ	0xFEE
  6530                           wreg	equ	0xFE8
  6531                           indf2	equ	0xFDF
  6532                           postinc2	equ	0xFDE
  6533                           postdec2	equ	0xFDD
  6534                           plusw2	equ	0xFDB
  6535                           fsr2h	equ	0xFDA
  6536                           fsr2l	equ	0xFD9
  6537                           status	equ	0xFD8
  6538                           
  6539 ;; *************** function _SetLEDOut *****************
  6540 ;; Defined at:
  6541 ;;		line 25 in file "IO.c"
  6542 ;; Parameters:    Size  Location     Type
  6543 ;;  lednum          2   30[COMRAM] int 
  6544 ;;  state           2   32[COMRAM] int 
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;		None
  6547 ;; Return value:  Size  Location     Type
  6548 ;;		None               void
  6549 ;; Registers used:
  6550 ;;		wreg, status,2, status,0, cstack
  6551 ;; Tracked objects:
  6552 ;;		On entry : 0/0
  6553 ;;		On exit  : 0/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6556 ;;      Params:         4       0       0       0       0       0       0
  6557 ;;      Locals:         0       0       0       0       0       0       0
  6558 ;;      Temps:          2       0       0       0       0       0       0
  6559 ;;      Totals:         6       0       0       0       0       0       0
  6560 ;;Total ram usage:        6 bytes
  6561 ;; Hardware stack levels used:    1
  6562 ;; Hardware stack levels required when called:    5
  6563 ;; This function calls:
  6564 ;;		_Off_Led
  6565 ;;		_setLED
  6566 ;; This function is called by:
  6567 ;;		_handleIndicators
  6568 ;; This function uses a non-reentrant model
  6569 ;;
  6570                           
  6571                           	psect	text27
  6572  000A46                     __ptext27:
  6573                           	opt stack 0
  6574  000A46                     _SetLEDOut:
  6575                           	opt stack 23
  6576                           
  6577                           ;IO.c: 26: switch (lednum) {
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;incstack = 0
  6581  000A46  D138               	goto	l5922
  6582  000A48                     l5788:
  6583                           
  6584                           ;IO.c: 28: if (state == 1) {
  6585  000A48  0421               	decf	SetLEDOut@state,w,c
  6586  000A4A  1022               	iorwf	SetLEDOut@state+1,w,c
  6587  000A4C  A4D8               	btfss	status,2,c
  6588  000A4E  D00D               	goto	l5796
  6589                           
  6590                           ;IO.c: 29: Off_Led(0);
  6591  000A50  0E00               	movlw	0
  6592  000A52  6E1C               	movwf	Off_Led@led+1,c
  6593  000A54  0E00               	movlw	0
  6594  000A56  6E1B               	movwf	Off_Led@led,c
  6595  000A58  EC7D  F00B         	call	_Off_Led	;wreg free
  6596                           
  6597                           ;IO.c: 30: do { LATC1 = 1; } while(0);
  6598  000A5C  828B               	bsf	3979,1,c	;volatile
  6599                           
  6600                           ;IO.c: 31: LED_array[0] = 1;
  6601  000A5E  0E00               	movlw	0
  6602  000A60  0100               	movlb	0	; () banked
  6603  000A62  6F89               	movwf	(_LED_array+1)& (0+255),b
  6604  000A64  0E01               	movlw	1
  6605  000A66  6F88               	movwf	_LED_array& (0+255),b
  6606                           
  6607                           ;IO.c: 32: } else if (state == 0) {
  6608  000A68  0012               	return	
  6609  000A6A                     l5796:
  6610  000A6A  5021               	movf	SetLEDOut@state,w,c
  6611  000A6C  1022               	iorwf	SetLEDOut@state+1,w,c
  6612  000A6E  A4D8               	btfss	status,2,c
  6613  000A70  D00D               	goto	l5804
  6614                           
  6615                           ;IO.c: 33: Off_Led(0);
  6616  000A72  0E00               	movlw	0
  6617  000A74  6E1C               	movwf	Off_Led@led+1,c
  6618  000A76  0E00               	movlw	0
  6619  000A78  6E1B               	movwf	Off_Led@led,c
  6620  000A7A  EC7D  F00B         	call	_Off_Led	;wreg free
  6621                           
  6622                           ;IO.c: 34: do { LATC1 = 0; } while(0);
  6623  000A7E  928B               	bcf	3979,1,c	;volatile
  6624                           
  6625                           ;IO.c: 35: LED_array[0] = 0;
  6626  000A80  0E00               	movlw	0
  6627  000A82  0100               	movlb	0	; () banked
  6628  000A84  6F89               	movwf	(_LED_array+1)& (0+255),b
  6629  000A86  0E00               	movlw	0
  6630  000A88  6F88               	movwf	_LED_array& (0+255),b
  6631                           
  6632                           ;IO.c: 36: }
  6633  000A8A  0012               	return	
  6634  000A8C                     l5804:
  6635                           
  6636                           ;IO.c: 37: else if (state == 2) {
  6637  000A8C  0E02               	movlw	2
  6638  000A8E  1821               	xorwf	SetLEDOut@state,w,c
  6639  000A90  1022               	iorwf	SetLEDOut@state+1,w,c
  6640  000A92  A4D8               	btfss	status,2,c
  6641  000A94  0012               	return	
  6642                           
  6643                           ;IO.c: 39: do { LATC1 = 0; } while(0);
  6644  000A96  928B               	bcf	3979,1,c	;volatile
  6645                           
  6646                           ;IO.c: 40: setLED(0);
  6647  000A98  0E00               	movlw	0
  6648  000A9A  6E1C               	movwf	setLED@led+1,c
  6649  000A9C  0E00               	movlw	0
  6650  000A9E  6E1B               	movwf	setLED@led,c
  6651  000AA0  ECE2  F00B         	call	_setLED	;wreg free
  6652                           
  6653                           ;IO.c: 41: LED_array[0] = 2;
  6654  000AA4  0E00               	movlw	0
  6655  000AA6  0100               	movlb	0	; () banked
  6656  000AA8  6F89               	movwf	(_LED_array+1)& (0+255),b
  6657  000AAA  0E02               	movlw	2
  6658  000AAC  6F88               	movwf	_LED_array& (0+255),b
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;IO.c: 43: }
  6662                           ;IO.c: 44: break;
  6663                           
  6664                           ; BSR set to: 0
  6665                           
  6666                           ; BSR set to: 0
  6667  000AAE  0012               	return	
  6668  000AB0                     l5810:
  6669                           
  6670                           ;IO.c: 47: if (state == 1) {
  6671  000AB0  0421               	decf	SetLEDOut@state,w,c
  6672  000AB2  1022               	iorwf	SetLEDOut@state+1,w,c
  6673  000AB4  A4D8               	btfss	status,2,c
  6674  000AB6  D00D               	goto	l5818
  6675                           
  6676                           ;IO.c: 48: Off_Led(1);
  6677  000AB8  0E00               	movlw	0
  6678  000ABA  6E1C               	movwf	Off_Led@led+1,c
  6679  000ABC  0E01               	movlw	1
  6680  000ABE  6E1B               	movwf	Off_Led@led,c
  6681  000AC0  EC7D  F00B         	call	_Off_Led	;wreg free
  6682                           
  6683                           ;IO.c: 49: do { LATA6 = 1; } while(0);
  6684  000AC4  8C89               	bsf	3977,6,c	;volatile
  6685                           
  6686                           ;IO.c: 50: LED_array[1] = 1;
  6687  000AC6  0E00               	movlw	0
  6688  000AC8  0100               	movlb	0	; () banked
  6689  000ACA  6F8B               	movwf	(_LED_array+3)& (0+255),b
  6690  000ACC  0E01               	movlw	1
  6691  000ACE  6F8A               	movwf	(_LED_array+2)& (0+255),b
  6692                           
  6693                           ;IO.c: 51: } else if (state == 0) {
  6694  000AD0  0012               	return	
  6695  000AD2                     l5818:
  6696  000AD2  5021               	movf	SetLEDOut@state,w,c
  6697  000AD4  1022               	iorwf	SetLEDOut@state+1,w,c
  6698  000AD6  A4D8               	btfss	status,2,c
  6699  000AD8  D00D               	goto	l5826
  6700                           
  6701                           ;IO.c: 52: Off_Led(1);
  6702  000ADA  0E00               	movlw	0
  6703  000ADC  6E1C               	movwf	Off_Led@led+1,c
  6704  000ADE  0E01               	movlw	1
  6705  000AE0  6E1B               	movwf	Off_Led@led,c
  6706  000AE2  EC7D  F00B         	call	_Off_Led	;wreg free
  6707                           
  6708                           ;IO.c: 53: do { LATA6 = 0; } while(0);
  6709  000AE6  9C89               	bcf	3977,6,c	;volatile
  6710                           
  6711                           ;IO.c: 54: LED_array[1] = 0;
  6712  000AE8  0E00               	movlw	0
  6713  000AEA  0100               	movlb	0	; () banked
  6714  000AEC  6F8B               	movwf	(_LED_array+3)& (0+255),b
  6715  000AEE  0E00               	movlw	0
  6716  000AF0  6F8A               	movwf	(_LED_array+2)& (0+255),b
  6717                           
  6718                           ;IO.c: 55: } else if (state == 2) {
  6719  000AF2  0012               	return	
  6720  000AF4                     l5826:
  6721  000AF4  0E02               	movlw	2
  6722  000AF6  1821               	xorwf	SetLEDOut@state,w,c
  6723  000AF8  1022               	iorwf	SetLEDOut@state+1,w,c
  6724  000AFA  A4D8               	btfss	status,2,c
  6725  000AFC  0012               	return	
  6726                           
  6727                           ;IO.c: 57: do { LATA6 = 0; } while(0);
  6728  000AFE  9C89               	bcf	3977,6,c	;volatile
  6729                           
  6730                           ;IO.c: 58: setLED(1);
  6731  000B00  0E00               	movlw	0
  6732  000B02  6E1C               	movwf	setLED@led+1,c
  6733  000B04  0E01               	movlw	1
  6734  000B06  6E1B               	movwf	setLED@led,c
  6735  000B08  ECE2  F00B         	call	_setLED	;wreg free
  6736                           
  6737                           ;IO.c: 59: LED_array[1] = 2;
  6738  000B0C  0E00               	movlw	0
  6739  000B0E  0100               	movlb	0	; () banked
  6740  000B10  6F8B               	movwf	(_LED_array+3)& (0+255),b
  6741  000B12  0E02               	movlw	2
  6742  000B14  6F8A               	movwf	(_LED_array+2)& (0+255),b
  6743                           
  6744                           ; BSR set to: 0
  6745                           ;IO.c: 61: }
  6746                           ;IO.c: 62: break;
  6747                           
  6748                           ; BSR set to: 0
  6749                           
  6750                           ; BSR set to: 0
  6751  000B16  0012               	return	
  6752  000B18                     l5832:
  6753                           
  6754                           ;IO.c: 64: if (state == 1) {
  6755  000B18  0421               	decf	SetLEDOut@state,w,c
  6756  000B1A  1022               	iorwf	SetLEDOut@state+1,w,c
  6757  000B1C  A4D8               	btfss	status,2,c
  6758  000B1E  D00D               	goto	l5840
  6759                           
  6760                           ;IO.c: 65: Off_Led(2);
  6761  000B20  0E00               	movlw	0
  6762  000B22  6E1C               	movwf	Off_Led@led+1,c
  6763  000B24  0E02               	movlw	2
  6764  000B26  6E1B               	movwf	Off_Led@led,c
  6765  000B28  EC7D  F00B         	call	_Off_Led	;wreg free
  6766                           
  6767                           ;IO.c: 66: do { LATA7 = 1; } while(0);
  6768  000B2C  8E89               	bsf	3977,7,c	;volatile
  6769                           
  6770                           ;IO.c: 67: LED_array[2] = 1;
  6771  000B2E  0E00               	movlw	0
  6772  000B30  0100               	movlb	0	; () banked
  6773  000B32  6F8D               	movwf	(_LED_array+5)& (0+255),b
  6774  000B34  0E01               	movlw	1
  6775  000B36  6F8C               	movwf	(_LED_array+4)& (0+255),b
  6776                           
  6777                           ;IO.c: 68: } else if (state == 0) {
  6778  000B38  0012               	return	
  6779  000B3A                     l5840:
  6780  000B3A  5021               	movf	SetLEDOut@state,w,c
  6781  000B3C  1022               	iorwf	SetLEDOut@state+1,w,c
  6782  000B3E  A4D8               	btfss	status,2,c
  6783  000B40  D00D               	goto	l5848
  6784                           
  6785                           ;IO.c: 69: Off_Led(2);
  6786  000B42  0E00               	movlw	0
  6787  000B44  6E1C               	movwf	Off_Led@led+1,c
  6788  000B46  0E02               	movlw	2
  6789  000B48  6E1B               	movwf	Off_Led@led,c
  6790  000B4A  EC7D  F00B         	call	_Off_Led	;wreg free
  6791                           
  6792                           ;IO.c: 70: do { LATA7 = 0; } while(0);
  6793  000B4E  9E89               	bcf	3977,7,c	;volatile
  6794                           
  6795                           ;IO.c: 71: LED_array[2] = 0;
  6796  000B50  0E00               	movlw	0
  6797  000B52  0100               	movlb	0	; () banked
  6798  000B54  6F8D               	movwf	(_LED_array+5)& (0+255),b
  6799  000B56  0E00               	movlw	0
  6800  000B58  6F8C               	movwf	(_LED_array+4)& (0+255),b
  6801                           
  6802                           ;IO.c: 72: } else if (state == 2) {
  6803  000B5A  0012               	return	
  6804  000B5C                     l5848:
  6805  000B5C  0E02               	movlw	2
  6806  000B5E  1821               	xorwf	SetLEDOut@state,w,c
  6807  000B60  1022               	iorwf	SetLEDOut@state+1,w,c
  6808  000B62  A4D8               	btfss	status,2,c
  6809  000B64  0012               	return	
  6810                           
  6811                           ;IO.c: 74: do { LATA7 = 0; } while(0);
  6812  000B66  9E89               	bcf	3977,7,c	;volatile
  6813                           
  6814                           ;IO.c: 75: setLED(2);
  6815  000B68  0E00               	movlw	0
  6816  000B6A  6E1C               	movwf	setLED@led+1,c
  6817  000B6C  0E02               	movlw	2
  6818  000B6E  6E1B               	movwf	setLED@led,c
  6819  000B70  ECE2  F00B         	call	_setLED	;wreg free
  6820                           
  6821                           ;IO.c: 77: LED_array[2] = 2;
  6822  000B74  0E00               	movlw	0
  6823  000B76  0100               	movlb	0	; () banked
  6824  000B78  6F8D               	movwf	(_LED_array+5)& (0+255),b
  6825  000B7A  0E02               	movlw	2
  6826  000B7C  6F8C               	movwf	(_LED_array+4)& (0+255),b
  6827                           
  6828                           ; BSR set to: 0
  6829                           ;IO.c: 79: }
  6830                           ;IO.c: 82: break;
  6831                           
  6832                           ; BSR set to: 0
  6833                           
  6834                           ; BSR set to: 0
  6835  000B7E  0012               	return	
  6836  000B80                     l5854:
  6837                           
  6838                           ;IO.c: 85: if (state == 1) {
  6839  000B80  0421               	decf	SetLEDOut@state,w,c
  6840  000B82  1022               	iorwf	SetLEDOut@state+1,w,c
  6841  000B84  A4D8               	btfss	status,2,c
  6842  000B86  D00D               	goto	l5862
  6843                           
  6844                           ;IO.c: 86: Off_Led(3);
  6845  000B88  0E00               	movlw	0
  6846  000B8A  6E1C               	movwf	Off_Led@led+1,c
  6847  000B8C  0E03               	movlw	3
  6848  000B8E  6E1B               	movwf	Off_Led@led,c
  6849  000B90  EC7D  F00B         	call	_Off_Led	;wreg free
  6850                           
  6851                           ;IO.c: 87: do { LATE2 = 1; } while(0);
  6852  000B94  848D               	bsf	3981,2,c	;volatile
  6853                           
  6854                           ;IO.c: 88: LED_array[3] = 1;
  6855  000B96  0E00               	movlw	0
  6856  000B98  0100               	movlb	0	; () banked
  6857  000B9A  6F8F               	movwf	(_LED_array+7)& (0+255),b
  6858  000B9C  0E01               	movlw	1
  6859  000B9E  6F8E               	movwf	(_LED_array+6)& (0+255),b
  6860                           
  6861                           ;IO.c: 89: } else if (state == 0) {
  6862  000BA0  0012               	return	
  6863  000BA2                     l5862:
  6864  000BA2  5021               	movf	SetLEDOut@state,w,c
  6865  000BA4  1022               	iorwf	SetLEDOut@state+1,w,c
  6866  000BA6  A4D8               	btfss	status,2,c
  6867  000BA8  D00D               	goto	l5870
  6868                           
  6869                           ;IO.c: 90: Off_Led(3);
  6870  000BAA  0E00               	movlw	0
  6871  000BAC  6E1C               	movwf	Off_Led@led+1,c
  6872  000BAE  0E03               	movlw	3
  6873  000BB0  6E1B               	movwf	Off_Led@led,c
  6874  000BB2  EC7D  F00B         	call	_Off_Led	;wreg free
  6875                           
  6876                           ;IO.c: 91: do { LATE2 = 0; } while(0);
  6877  000BB6  948D               	bcf	3981,2,c	;volatile
  6878                           
  6879                           ;IO.c: 92: LED_array[3] = 0;
  6880  000BB8  0E00               	movlw	0
  6881  000BBA  0100               	movlb	0	; () banked
  6882  000BBC  6F8F               	movwf	(_LED_array+7)& (0+255),b
  6883  000BBE  0E00               	movlw	0
  6884  000BC0  6F8E               	movwf	(_LED_array+6)& (0+255),b
  6885                           
  6886                           ;IO.c: 93: }
  6887  000BC2  0012               	return	
  6888  000BC4                     l5870:
  6889                           
  6890                           ;IO.c: 94: else if (state == 2) {
  6891  000BC4  0E02               	movlw	2
  6892  000BC6  1821               	xorwf	SetLEDOut@state,w,c
  6893  000BC8  1022               	iorwf	SetLEDOut@state+1,w,c
  6894  000BCA  A4D8               	btfss	status,2,c
  6895  000BCC  0012               	return	
  6896                           
  6897                           ;IO.c: 95: do { LATE2 = 0; } while(0);
  6898  000BCE  948D               	bcf	3981,2,c	;volatile
  6899                           
  6900                           ;IO.c: 96: setLED(3);
  6901  000BD0  0E00               	movlw	0
  6902  000BD2  6E1C               	movwf	setLED@led+1,c
  6903  000BD4  0E03               	movlw	3
  6904  000BD6  6E1B               	movwf	setLED@led,c
  6905  000BD8  ECE2  F00B         	call	_setLED	;wreg free
  6906                           
  6907                           ;IO.c: 97: LED_array[3] = 2;
  6908  000BDC  0E00               	movlw	0
  6909  000BDE  0100               	movlb	0	; () banked
  6910  000BE0  6F8F               	movwf	(_LED_array+7)& (0+255),b
  6911  000BE2  0E02               	movlw	2
  6912  000BE4  6F8E               	movwf	(_LED_array+6)& (0+255),b
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;IO.c: 99: }
  6916                           ;IO.c: 101: break;
  6917                           
  6918                           ; BSR set to: 0
  6919                           
  6920                           ; BSR set to: 0
  6921  000BE6  0012               	return	
  6922  000BE8                     l5876:
  6923                           
  6924                           ;IO.c: 103: if (state == 1) {
  6925  000BE8  0421               	decf	SetLEDOut@state,w,c
  6926  000BEA  1022               	iorwf	SetLEDOut@state+1,w,c
  6927  000BEC  A4D8               	btfss	status,2,c
  6928  000BEE  D00D               	goto	l5884
  6929                           
  6930                           ;IO.c: 104: Off_Led(4);
  6931  000BF0  0E00               	movlw	0
  6932  000BF2  6E1C               	movwf	Off_Led@led+1,c
  6933  000BF4  0E04               	movlw	4
  6934  000BF6  6E1B               	movwf	Off_Led@led,c
  6935  000BF8  EC7D  F00B         	call	_Off_Led	;wreg free
  6936                           
  6937                           ;IO.c: 105: do { LATE1 = 1; } while(0);
  6938  000BFC  828D               	bsf	3981,1,c	;volatile
  6939                           
  6940                           ;IO.c: 106: LED_array[4] = 1;
  6941  000BFE  0E00               	movlw	0
  6942  000C00  0100               	movlb	0	; () banked
  6943  000C02  6F91               	movwf	(_LED_array+9)& (0+255),b
  6944  000C04  0E01               	movlw	1
  6945  000C06  6F90               	movwf	(_LED_array+8)& (0+255),b
  6946                           
  6947                           ;IO.c: 107: } else if (state == 0) {
  6948  000C08  0012               	return	
  6949  000C0A                     l5884:
  6950  000C0A  5021               	movf	SetLEDOut@state,w,c
  6951  000C0C  1022               	iorwf	SetLEDOut@state+1,w,c
  6952  000C0E  A4D8               	btfss	status,2,c
  6953  000C10  D00D               	goto	l5892
  6954                           
  6955                           ;IO.c: 108: Off_Led(4);
  6956  000C12  0E00               	movlw	0
  6957  000C14  6E1C               	movwf	Off_Led@led+1,c
  6958  000C16  0E04               	movlw	4
  6959  000C18  6E1B               	movwf	Off_Led@led,c
  6960  000C1A  EC7D  F00B         	call	_Off_Led	;wreg free
  6961                           
  6962                           ;IO.c: 109: do { LATE1 = 0; } while(0);
  6963  000C1E  928D               	bcf	3981,1,c	;volatile
  6964                           
  6965                           ;IO.c: 110: LED_array[4] = 0;
  6966  000C20  0E00               	movlw	0
  6967  000C22  0100               	movlb	0	; () banked
  6968  000C24  6F91               	movwf	(_LED_array+9)& (0+255),b
  6969  000C26  0E00               	movlw	0
  6970  000C28  6F90               	movwf	(_LED_array+8)& (0+255),b
  6971                           
  6972                           ;IO.c: 111: }
  6973  000C2A  0012               	return	
  6974  000C2C                     l5892:
  6975                           
  6976                           ;IO.c: 112: else if (state == 2) {
  6977  000C2C  0E02               	movlw	2
  6978  000C2E  1821               	xorwf	SetLEDOut@state,w,c
  6979  000C30  1022               	iorwf	SetLEDOut@state+1,w,c
  6980  000C32  A4D8               	btfss	status,2,c
  6981  000C34  0012               	return	
  6982                           
  6983                           ;IO.c: 113: do { LATE1 = 0; } while(0);
  6984  000C36  928D               	bcf	3981,1,c	;volatile
  6985                           
  6986                           ;IO.c: 114: setLED(4);
  6987  000C38  0E00               	movlw	0
  6988  000C3A  6E1C               	movwf	setLED@led+1,c
  6989  000C3C  0E04               	movlw	4
  6990  000C3E  6E1B               	movwf	setLED@led,c
  6991  000C40  ECE2  F00B         	call	_setLED	;wreg free
  6992                           
  6993                           ;IO.c: 115: LED_array[4] = 2;
  6994  000C44  0E00               	movlw	0
  6995  000C46  0100               	movlb	0	; () banked
  6996  000C48  6F91               	movwf	(_LED_array+9)& (0+255),b
  6997  000C4A  0E02               	movlw	2
  6998  000C4C  6F90               	movwf	(_LED_array+8)& (0+255),b
  6999                           
  7000                           ; BSR set to: 0
  7001                           ;IO.c: 116: }
  7002                           ;IO.c: 118: break;
  7003                           
  7004                           ; BSR set to: 0
  7005                           
  7006                           ; BSR set to: 0
  7007  000C4E  0012               	return	
  7008  000C50                     l5898:
  7009                           
  7010                           ;IO.c: 120: if (state == 1) {
  7011  000C50  0421               	decf	SetLEDOut@state,w,c
  7012  000C52  1022               	iorwf	SetLEDOut@state+1,w,c
  7013  000C54  A4D8               	btfss	status,2,c
  7014  000C56  D00D               	goto	l5906
  7015                           
  7016                           ;IO.c: 121: Off_Led(5);
  7017  000C58  0E00               	movlw	0
  7018  000C5A  6E1C               	movwf	Off_Led@led+1,c
  7019  000C5C  0E05               	movlw	5
  7020  000C5E  6E1B               	movwf	Off_Led@led,c
  7021  000C60  EC7D  F00B         	call	_Off_Led	;wreg free
  7022                           
  7023                           ;IO.c: 122: do { LATE0 = 1; } while(0);
  7024  000C64  808D               	bsf	3981,0,c	;volatile
  7025                           
  7026                           ;IO.c: 123: LED_array[5] = 1;
  7027  000C66  0E00               	movlw	0
  7028  000C68  0100               	movlb	0	; () banked
  7029  000C6A  6F93               	movwf	(_LED_array+11)& (0+255),b
  7030  000C6C  0E01               	movlw	1
  7031  000C6E  6F92               	movwf	(_LED_array+10)& (0+255),b
  7032                           
  7033                           ;IO.c: 124: } else if (state == 0) {
  7034  000C70  0012               	return	
  7035  000C72                     l5906:
  7036  000C72  5021               	movf	SetLEDOut@state,w,c
  7037  000C74  1022               	iorwf	SetLEDOut@state+1,w,c
  7038  000C76  A4D8               	btfss	status,2,c
  7039  000C78  D00D               	goto	l5914
  7040                           
  7041                           ;IO.c: 125: Off_Led(5);
  7042  000C7A  0E00               	movlw	0
  7043  000C7C  6E1C               	movwf	Off_Led@led+1,c
  7044  000C7E  0E05               	movlw	5
  7045  000C80  6E1B               	movwf	Off_Led@led,c
  7046  000C82  EC7D  F00B         	call	_Off_Led	;wreg free
  7047                           
  7048                           ;IO.c: 126: do { LATE0 = 0; } while(0);
  7049  000C86  908D               	bcf	3981,0,c	;volatile
  7050                           
  7051                           ;IO.c: 127: LED_array[5] = 0;
  7052  000C88  0E00               	movlw	0
  7053  000C8A  0100               	movlb	0	; () banked
  7054  000C8C  6F93               	movwf	(_LED_array+11)& (0+255),b
  7055  000C8E  0E00               	movlw	0
  7056  000C90  6F92               	movwf	(_LED_array+10)& (0+255),b
  7057                           
  7058                           ;IO.c: 128: }
  7059  000C92  0012               	return	
  7060  000C94                     l5914:
  7061                           
  7062                           ;IO.c: 129: else if (state == 2) {
  7063  000C94  0E02               	movlw	2
  7064  000C96  1821               	xorwf	SetLEDOut@state,w,c
  7065  000C98  1022               	iorwf	SetLEDOut@state+1,w,c
  7066  000C9A  A4D8               	btfss	status,2,c
  7067  000C9C  0012               	return	
  7068                           
  7069                           ;IO.c: 130: do { LATE0 = 0; } while(0);
  7070  000C9E  908D               	bcf	3981,0,c	;volatile
  7071                           
  7072                           ;IO.c: 131: setLED(5);
  7073  000CA0  0E00               	movlw	0
  7074  000CA2  6E1C               	movwf	setLED@led+1,c
  7075  000CA4  0E05               	movlw	5
  7076  000CA6  6E1B               	movwf	setLED@led,c
  7077  000CA8  ECE2  F00B         	call	_setLED	;wreg free
  7078                           
  7079                           ;IO.c: 132: LED_array[5] = 2;
  7080  000CAC  0E00               	movlw	0
  7081  000CAE  0100               	movlb	0	; () banked
  7082  000CB0  6F93               	movwf	(_LED_array+11)& (0+255),b
  7083  000CB2  0E02               	movlw	2
  7084  000CB4  6F92               	movwf	(_LED_array+10)& (0+255),b
  7085                           
  7086                           ; BSR set to: 0
  7087                           ;IO.c: 138: }
  7088                           
  7089                           ; BSR set to: 0
  7090                           ;IO.c: 134: }
  7091                           ;IO.c: 137: break;
  7092                           
  7093                           ; BSR set to: 0
  7094                           
  7095                           ; BSR set to: 0
  7096  000CB6  0012               	return	
  7097  000CB8                     l5922:
  7098  000CB8  C01F  F023         	movff	SetLEDOut@lednum,??_SetLEDOut
  7099  000CBC  C020  F024         	movff	SetLEDOut@lednum+1,??_SetLEDOut+1
  7100                           
  7101                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7102                           ; Switch size 1, requested type "space"
  7103                           ; Number of cases is 1, Range of values is 0 to 0
  7104                           ; switch strategies available:
  7105                           ; Name         Instructions Cycles
  7106                           ; simple_byte            4     3 (average)
  7107                           ;	Chosen strategy is simple_byte
  7108  000CC0  5024               	movf	??_SetLEDOut+1,w,c
  7109  000CC2  0A00               	xorlw	0	; case 0
  7110  000CC4  A4D8               	btfss	status,2,c
  7111  000CC6  0012               	return	
  7112                           
  7113                           ; Switch size 1, requested type "space"
  7114                           ; Number of cases is 6, Range of values is 0 to 5
  7115                           ; switch strategies available:
  7116                           ; Name         Instructions Cycles
  7117                           ; simple_byte           19    10 (average)
  7118                           ;	Chosen strategy is simple_byte
  7119  000CC8  5023               	movf	??_SetLEDOut,w,c
  7120  000CCA  0A00               	xorlw	0	; case 0
  7121  000CCC  B4D8               	btfsc	status,2,c
  7122  000CCE  D6BC               	goto	l5788
  7123  000CD0  0A01               	xorlw	1	; case 1
  7124  000CD2  B4D8               	btfsc	status,2,c
  7125  000CD4  D6ED               	goto	l5810
  7126  000CD6  0A03               	xorlw	3	; case 2
  7127  000CD8  B4D8               	btfsc	status,2,c
  7128  000CDA  D71E               	goto	l5832
  7129  000CDC  0A01               	xorlw	1	; case 3
  7130  000CDE  B4D8               	btfsc	status,2,c
  7131  000CE0  D74F               	goto	l5854
  7132  000CE2  0A07               	xorlw	7	; case 4
  7133  000CE4  B4D8               	btfsc	status,2,c
  7134  000CE6  D780               	goto	l5876
  7135  000CE8  0A01               	xorlw	1	; case 5
  7136  000CEA  A4D8               	btfss	status,2,c
  7137  000CEC  0012               	return	
  7138  000CEE  D7B0               	goto	l5898
  7139  000CF0                     __end_of_SetLEDOut:
  7140                           	opt stack 0
  7141                           tosu	equ	0xFFF
  7142                           tosh	equ	0xFFE
  7143                           tosl	equ	0xFFD
  7144                           pclath	equ	0xFFA
  7145                           tblptru	equ	0xFF8
  7146                           tblptrh	equ	0xFF7
  7147                           tblptrl	equ	0xFF6
  7148                           tablat	equ	0xFF5
  7149                           prodh	equ	0xFF4
  7150                           prodl	equ	0xFF3
  7151                           intcon	equ	0xFF2
  7152                           postinc0	equ	0xFEE
  7153                           wreg	equ	0xFE8
  7154                           indf2	equ	0xFDF
  7155                           postinc2	equ	0xFDE
  7156                           postdec2	equ	0xFDD
  7157                           plusw2	equ	0xFDB
  7158                           fsr2h	equ	0xFDA
  7159                           fsr2l	equ	0xFD9
  7160                           status	equ	0xFD8
  7161                           
  7162 ;; *************** function _setLED *****************
  7163 ;; Defined at:
  7164 ;;		line 202 in file "tmr2.c"
  7165 ;; Parameters:    Size  Location     Type
  7166 ;;  led             2   26[COMRAM] int 
  7167 ;; Auto vars:     Size  Location     Type
  7168 ;;		None
  7169 ;; Return value:  Size  Location     Type
  7170 ;;		None               void
  7171 ;; Registers used:
  7172 ;;		wreg, status,2, status,0
  7173 ;; Tracked objects:
  7174 ;;		On entry : 0/0
  7175 ;;		On exit  : 0/0
  7176 ;;		Unchanged: 0/0
  7177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7178 ;;      Params:         2       0       0       0       0       0       0
  7179 ;;      Locals:         0       0       0       0       0       0       0
  7180 ;;      Temps:          2       0       0       0       0       0       0
  7181 ;;      Totals:         4       0       0       0       0       0       0
  7182 ;;Total ram usage:        4 bytes
  7183 ;; Hardware stack levels used:    1
  7184 ;; Hardware stack levels required when called:    4
  7185 ;; This function calls:
  7186 ;;		Nothing
  7187 ;; This function is called by:
  7188 ;;		_SetLEDOut
  7189 ;; This function uses a non-reentrant model
  7190 ;;
  7191                           
  7192                           	psect	text28
  7193  0017C4                     __ptext28:
  7194                           	opt stack 0
  7195  0017C4                     _setLED:
  7196                           	opt stack 23
  7197                           
  7198                           ;tmr2.c: 203: switch (led){
  7199                           
  7200                           ;incstack = 0
  7201  0017C4  D042               	goto	l5630
  7202  0017C6                     l5616:
  7203                           
  7204                           ;tmr2.c: 205: LEDNUM_ENAB[0]=1;
  7205  0017C6  0E00               	movlw	0
  7206  0017C8  0100               	movlb	0	; () banked
  7207  0017CA  6F99               	movwf	(_LEDNUM_ENAB+1)& (0+255),b
  7208  0017CC  0E01               	movlw	1
  7209  0017CE  6F98               	movwf	_LEDNUM_ENAB& (0+255),b
  7210                           
  7211                           ;tmr2.c: 206: LEDState[0]=0;
  7212  0017D0  0E00               	movlw	0
  7213  0017D2  0100               	movlb	0	; () banked
  7214  0017D4  6FA5               	movwf	(_LEDState+1)& (0+255),b
  7215  0017D6  0E00               	movlw	0
  7216  0017D8  6FA4               	movwf	_LEDState& (0+255),b
  7217                           
  7218                           ;tmr2.c: 207: break;
  7219  0017DA  0012               	return	
  7220  0017DC                     l5618:
  7221                           
  7222                           ;tmr2.c: 209: LEDNUM_ENAB[1]=1;
  7223  0017DC  0E00               	movlw	0
  7224  0017DE  0100               	movlb	0	; () banked
  7225  0017E0  6F9B               	movwf	(_LEDNUM_ENAB+3)& (0+255),b
  7226  0017E2  0E01               	movlw	1
  7227  0017E4  6F9A               	movwf	(_LEDNUM_ENAB+2)& (0+255),b
  7228                           
  7229                           ;tmr2.c: 210: LEDState[1]=0;
  7230  0017E6  0E00               	movlw	0
  7231  0017E8  0100               	movlb	0	; () banked
  7232  0017EA  6FA7               	movwf	(_LEDState+3)& (0+255),b
  7233  0017EC  0E00               	movlw	0
  7234  0017EE  6FA6               	movwf	(_LEDState+2)& (0+255),b
  7235                           
  7236                           ;tmr2.c: 211: break;
  7237  0017F0  0012               	return	
  7238  0017F2                     l5620:
  7239                           
  7240                           ;tmr2.c: 213: LEDNUM_ENAB[2]=1;
  7241  0017F2  0E00               	movlw	0
  7242  0017F4  0100               	movlb	0	; () banked
  7243  0017F6  6F9D               	movwf	(_LEDNUM_ENAB+5)& (0+255),b
  7244  0017F8  0E01               	movlw	1
  7245  0017FA  6F9C               	movwf	(_LEDNUM_ENAB+4)& (0+255),b
  7246                           
  7247                           ;tmr2.c: 214: LEDState[2]=0;
  7248  0017FC  0E00               	movlw	0
  7249  0017FE  0100               	movlb	0	; () banked
  7250  001800  6FA9               	movwf	(_LEDState+5)& (0+255),b
  7251  001802  0E00               	movlw	0
  7252  001804  6FA8               	movwf	(_LEDState+4)& (0+255),b
  7253                           
  7254                           ;tmr2.c: 215: break;
  7255  001806  0012               	return	
  7256  001808                     l5622:
  7257                           
  7258                           ;tmr2.c: 217: LEDNUM_ENAB[3]=1;
  7259  001808  0E00               	movlw	0
  7260  00180A  0100               	movlb	0	; () banked
  7261  00180C  6F9F               	movwf	(_LEDNUM_ENAB+7)& (0+255),b
  7262  00180E  0E01               	movlw	1
  7263  001810  6F9E               	movwf	(_LEDNUM_ENAB+6)& (0+255),b
  7264                           
  7265                           ;tmr2.c: 218: LEDState[3]=0;
  7266  001812  0E00               	movlw	0
  7267  001814  0100               	movlb	0	; () banked
  7268  001816  6FAB               	movwf	(_LEDState+7)& (0+255),b
  7269  001818  0E00               	movlw	0
  7270  00181A  6FAA               	movwf	(_LEDState+6)& (0+255),b
  7271                           
  7272                           ;tmr2.c: 219: break;
  7273  00181C  0012               	return	
  7274  00181E                     l5624:
  7275                           
  7276                           ;tmr2.c: 221: LEDNUM_ENAB[4]=1;
  7277  00181E  0E00               	movlw	0
  7278  001820  0100               	movlb	0	; () banked
  7279  001822  6FA1               	movwf	(_LEDNUM_ENAB+9)& (0+255),b
  7280  001824  0E01               	movlw	1
  7281  001826  6FA0               	movwf	(_LEDNUM_ENAB+8)& (0+255),b
  7282                           
  7283                           ;tmr2.c: 222: LEDState[4]=0;
  7284  001828  0E00               	movlw	0
  7285  00182A  0100               	movlb	0	; () banked
  7286  00182C  6FAD               	movwf	(_LEDState+9)& (0+255),b
  7287  00182E  0E00               	movlw	0
  7288  001830  6FAC               	movwf	(_LEDState+8)& (0+255),b
  7289                           
  7290                           ;tmr2.c: 223: break;
  7291  001832  0012               	return	
  7292  001834                     l5626:
  7293                           
  7294                           ;tmr2.c: 225: LEDNUM_ENAB[5]=1;
  7295  001834  0E00               	movlw	0
  7296  001836  0100               	movlb	0	; () banked
  7297  001838  6FA3               	movwf	(_LEDNUM_ENAB+11)& (0+255),b
  7298  00183A  0E01               	movlw	1
  7299  00183C  6FA2               	movwf	(_LEDNUM_ENAB+10)& (0+255),b
  7300                           
  7301                           ;tmr2.c: 226: LEDState[5]=0;
  7302  00183E  0E00               	movlw	0
  7303  001840  0100               	movlb	0	; () banked
  7304  001842  6FAF               	movwf	(_LEDState+11)& (0+255),b
  7305  001844  0E00               	movlw	0
  7306  001846  6FAE               	movwf	(_LEDState+10)& (0+255),b
  7307                           
  7308                           ; BSR set to: 0
  7309                           ;tmr2.c: 228: }
  7310                           
  7311                           ;tmr2.c: 227: break;
  7312  001848  0012               	return	
  7313  00184A                     l5630:
  7314  00184A  C01B  F01D         	movff	setLED@led,??_setLED
  7315  00184E  C01C  F01E         	movff	setLED@led+1,??_setLED+1
  7316                           
  7317                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7318                           ; Switch size 1, requested type "space"
  7319                           ; Number of cases is 1, Range of values is 0 to 0
  7320                           ; switch strategies available:
  7321                           ; Name         Instructions Cycles
  7322                           ; simple_byte            4     3 (average)
  7323                           ;	Chosen strategy is simple_byte
  7324  001852  501E               	movf	??_setLED+1,w,c
  7325  001854  0A00               	xorlw	0	; case 0
  7326  001856  A4D8               	btfss	status,2,c
  7327  001858  0012               	return	
  7328                           
  7329                           ; Switch size 1, requested type "space"
  7330                           ; Number of cases is 6, Range of values is 0 to 5
  7331                           ; switch strategies available:
  7332                           ; Name         Instructions Cycles
  7333                           ; simple_byte           19    10 (average)
  7334                           ;	Chosen strategy is simple_byte
  7335  00185A  501D               	movf	??_setLED,w,c
  7336  00185C  0A00               	xorlw	0	; case 0
  7337  00185E  B4D8               	btfsc	status,2,c
  7338  001860  D7B2               	goto	l5616
  7339  001862  0A01               	xorlw	1	; case 1
  7340  001864  B4D8               	btfsc	status,2,c
  7341  001866  D7BA               	goto	l5618
  7342  001868  0A03               	xorlw	3	; case 2
  7343  00186A  B4D8               	btfsc	status,2,c
  7344  00186C  D7C2               	goto	l5620
  7345  00186E  0A01               	xorlw	1	; case 3
  7346  001870  B4D8               	btfsc	status,2,c
  7347  001872  D7CA               	goto	l5622
  7348  001874  0A07               	xorlw	7	; case 4
  7349  001876  B4D8               	btfsc	status,2,c
  7350  001878  D7D2               	goto	l5624
  7351  00187A  0A01               	xorlw	1	; case 5
  7352  00187C  A4D8               	btfss	status,2,c
  7353  00187E  0012               	return	
  7354  001880  D7D9               	goto	l5626
  7355  001882                     __end_of_setLED:
  7356                           	opt stack 0
  7357                           tosu	equ	0xFFF
  7358                           tosh	equ	0xFFE
  7359                           tosl	equ	0xFFD
  7360                           pclath	equ	0xFFA
  7361                           tblptru	equ	0xFF8
  7362                           tblptrh	equ	0xFF7
  7363                           tblptrl	equ	0xFF6
  7364                           tablat	equ	0xFF5
  7365                           prodh	equ	0xFF4
  7366                           prodl	equ	0xFF3
  7367                           intcon	equ	0xFF2
  7368                           postinc0	equ	0xFEE
  7369                           wreg	equ	0xFE8
  7370                           indf2	equ	0xFDF
  7371                           postinc2	equ	0xFDE
  7372                           postdec2	equ	0xFDD
  7373                           plusw2	equ	0xFDB
  7374                           fsr2h	equ	0xFDA
  7375                           fsr2l	equ	0xFD9
  7376                           status	equ	0xFD8
  7377                           
  7378 ;; *************** function _Off_Led *****************
  7379 ;; Defined at:
  7380 ;;		line 230 in file "tmr2.c"
  7381 ;; Parameters:    Size  Location     Type
  7382 ;;  led             2   26[COMRAM] int 
  7383 ;; Auto vars:     Size  Location     Type
  7384 ;;		None
  7385 ;; Return value:  Size  Location     Type
  7386 ;;		None               void
  7387 ;; Registers used:
  7388 ;;		wreg, status,2, status,0
  7389 ;; Tracked objects:
  7390 ;;		On entry : 0/0
  7391 ;;		On exit  : 0/0
  7392 ;;		Unchanged: 0/0
  7393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7394 ;;      Params:         2       0       0       0       0       0       0
  7395 ;;      Locals:         0       0       0       0       0       0       0
  7396 ;;      Temps:          2       0       0       0       0       0       0
  7397 ;;      Totals:         4       0       0       0       0       0       0
  7398 ;;Total ram usage:        4 bytes
  7399 ;; Hardware stack levels used:    1
  7400 ;; Hardware stack levels required when called:    4
  7401 ;; This function calls:
  7402 ;;		Nothing
  7403 ;; This function is called by:
  7404 ;;		_SetLEDOut
  7405 ;; This function uses a non-reentrant model
  7406 ;;
  7407                           
  7408                           	psect	text29
  7409  0016FA                     __ptext29:
  7410                           	opt stack 0
  7411  0016FA                     _Off_Led:
  7412                           	opt stack 23
  7413                           
  7414                           ;tmr2.c: 231: switch (led){
  7415                           
  7416                           ;incstack = 0
  7417  0016FA  D048               	goto	l5664
  7418  0016FC                     l5638:
  7419                           
  7420                           ;tmr2.c: 233: LEDNUM_ENAB[0]=0;
  7421  0016FC  0E00               	movlw	0
  7422  0016FE  0100               	movlb	0	; () banked
  7423  001700  6F99               	movwf	(_LEDNUM_ENAB+1)& (0+255),b
  7424  001702  0E00               	movlw	0
  7425  001704  6F98               	movwf	_LEDNUM_ENAB& (0+255),b
  7426                           
  7427                           ;tmr2.c: 234: LEDState[0]=0;
  7428  001706  0E00               	movlw	0
  7429  001708  0100               	movlb	0	; () banked
  7430  00170A  6FA5               	movwf	(_LEDState+1)& (0+255),b
  7431  00170C  0E00               	movlw	0
  7432  00170E  6FA4               	movwf	_LEDState& (0+255),b
  7433                           
  7434                           ; BSR set to: 0
  7435                           
  7436                           ; BSR set to: 0
  7437                           
  7438                           ;tmr2.c: 235: do { LATC1 = 0; } while(0);
  7439  001710  928B               	bcf	3979,1,c	;volatile
  7440                           
  7441                           ; BSR set to: 0
  7442                           ;tmr2.c: 236: break;
  7443  001712  0012               	return	
  7444  001714                     l5642:
  7445                           
  7446                           ;tmr2.c: 238: LEDNUM_ENAB[1]=0;
  7447  001714  0E00               	movlw	0
  7448  001716  0100               	movlb	0	; () banked
  7449  001718  6F9B               	movwf	(_LEDNUM_ENAB+3)& (0+255),b
  7450  00171A  0E00               	movlw	0
  7451  00171C  6F9A               	movwf	(_LEDNUM_ENAB+2)& (0+255),b
  7452                           
  7453                           ;tmr2.c: 239: LEDState[1]=0;
  7454  00171E  0E00               	movlw	0
  7455  001720  0100               	movlb	0	; () banked
  7456  001722  6FA7               	movwf	(_LEDState+3)& (0+255),b
  7457  001724  0E00               	movlw	0
  7458  001726  6FA6               	movwf	(_LEDState+2)& (0+255),b
  7459                           
  7460                           ; BSR set to: 0
  7461                           
  7462                           ; BSR set to: 0
  7463                           
  7464                           ;tmr2.c: 240: do { LATA6 = 0; } while(0);
  7465  001728  9C89               	bcf	3977,6,c	;volatile
  7466                           
  7467                           ; BSR set to: 0
  7468                           ;tmr2.c: 241: break;
  7469  00172A  0012               	return	
  7470  00172C                     l5646:
  7471                           
  7472                           ;tmr2.c: 243: LEDNUM_ENAB[2]=0;
  7473  00172C  0E00               	movlw	0
  7474  00172E  0100               	movlb	0	; () banked
  7475  001730  6F9D               	movwf	(_LEDNUM_ENAB+5)& (0+255),b
  7476  001732  0E00               	movlw	0
  7477  001734  6F9C               	movwf	(_LEDNUM_ENAB+4)& (0+255),b
  7478                           
  7479                           ;tmr2.c: 244: LEDState[2]=0;
  7480  001736  0E00               	movlw	0
  7481  001738  0100               	movlb	0	; () banked
  7482  00173A  6FA9               	movwf	(_LEDState+5)& (0+255),b
  7483  00173C  0E00               	movlw	0
  7484  00173E  6FA8               	movwf	(_LEDState+4)& (0+255),b
  7485                           
  7486                           ; BSR set to: 0
  7487                           
  7488                           ; BSR set to: 0
  7489                           
  7490                           ;tmr2.c: 245: do { LATA7 = 0; } while(0);
  7491  001740  9E89               	bcf	3977,7,c	;volatile
  7492                           
  7493                           ; BSR set to: 0
  7494                           ;tmr2.c: 246: break;
  7495  001742  0012               	return	
  7496  001744                     l5650:
  7497                           
  7498                           ;tmr2.c: 248: LEDNUM_ENAB[3]=0;
  7499  001744  0E00               	movlw	0
  7500  001746  0100               	movlb	0	; () banked
  7501  001748  6F9F               	movwf	(_LEDNUM_ENAB+7)& (0+255),b
  7502  00174A  0E00               	movlw	0
  7503  00174C  6F9E               	movwf	(_LEDNUM_ENAB+6)& (0+255),b
  7504                           
  7505                           ;tmr2.c: 249: LEDState[3]=0;
  7506  00174E  0E00               	movlw	0
  7507  001750  0100               	movlb	0	; () banked
  7508  001752  6FAB               	movwf	(_LEDState+7)& (0+255),b
  7509  001754  0E00               	movlw	0
  7510  001756  6FAA               	movwf	(_LEDState+6)& (0+255),b
  7511                           
  7512                           ; BSR set to: 0
  7513                           
  7514                           ; BSR set to: 0
  7515                           
  7516                           ;tmr2.c: 250: do { LATE2 = 0; } while(0);
  7517  001758  948D               	bcf	3981,2,c	;volatile
  7518                           
  7519                           ; BSR set to: 0
  7520                           ;tmr2.c: 251: break;
  7521  00175A  0012               	return	
  7522  00175C                     l5654:
  7523                           
  7524                           ;tmr2.c: 253: LEDNUM_ENAB[4]=0;
  7525  00175C  0E00               	movlw	0
  7526  00175E  0100               	movlb	0	; () banked
  7527  001760  6FA1               	movwf	(_LEDNUM_ENAB+9)& (0+255),b
  7528  001762  0E00               	movlw	0
  7529  001764  6FA0               	movwf	(_LEDNUM_ENAB+8)& (0+255),b
  7530                           
  7531                           ;tmr2.c: 254: LEDState[4]=0;
  7532  001766  0E00               	movlw	0
  7533  001768  0100               	movlb	0	; () banked
  7534  00176A  6FAD               	movwf	(_LEDState+9)& (0+255),b
  7535  00176C  0E00               	movlw	0
  7536  00176E  6FAC               	movwf	(_LEDState+8)& (0+255),b
  7537                           
  7538                           ; BSR set to: 0
  7539                           
  7540                           ; BSR set to: 0
  7541                           
  7542                           ;tmr2.c: 255: do { LATE1 = 0; } while(0);
  7543  001770  928D               	bcf	3981,1,c	;volatile
  7544                           
  7545                           ; BSR set to: 0
  7546                           ;tmr2.c: 256: break;
  7547  001772  0012               	return	
  7548  001774                     l5658:
  7549                           
  7550                           ;tmr2.c: 258: LEDNUM_ENAB[5]=0;
  7551  001774  0E00               	movlw	0
  7552  001776  0100               	movlb	0	; () banked
  7553  001778  6FA3               	movwf	(_LEDNUM_ENAB+11)& (0+255),b
  7554  00177A  0E00               	movlw	0
  7555  00177C  6FA2               	movwf	(_LEDNUM_ENAB+10)& (0+255),b
  7556                           
  7557                           ;tmr2.c: 259: LEDState[5]=0;
  7558  00177E  0E00               	movlw	0
  7559  001780  0100               	movlb	0	; () banked
  7560  001782  6FAF               	movwf	(_LEDState+11)& (0+255),b
  7561  001784  0E00               	movlw	0
  7562  001786  6FAE               	movwf	(_LEDState+10)& (0+255),b
  7563                           
  7564                           ; BSR set to: 0
  7565                           
  7566                           ; BSR set to: 0
  7567                           
  7568                           ;tmr2.c: 260: do { LATE0 = 0; } while(0) ;
  7569  001788  908D               	bcf	3981,0,c	;volatile
  7570                           
  7571                           ; BSR set to: 0
  7572                           ;tmr2.c: 262: }
  7573                           
  7574                           ; BSR set to: 0
  7575                           ;tmr2.c: 261: break;
  7576  00178A  0012               	return	
  7577  00178C                     l5664:
  7578  00178C  C01B  F01D         	movff	Off_Led@led,??_Off_Led
  7579  001790  C01C  F01E         	movff	Off_Led@led+1,??_Off_Led+1
  7580                           
  7581                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7582                           ; Switch size 1, requested type "space"
  7583                           ; Number of cases is 1, Range of values is 0 to 0
  7584                           ; switch strategies available:
  7585                           ; Name         Instructions Cycles
  7586                           ; simple_byte            4     3 (average)
  7587                           ;	Chosen strategy is simple_byte
  7588  001794  501E               	movf	??_Off_Led+1,w,c
  7589  001796  0A00               	xorlw	0	; case 0
  7590  001798  A4D8               	btfss	status,2,c
  7591  00179A  0012               	return	
  7592                           
  7593                           ; Switch size 1, requested type "space"
  7594                           ; Number of cases is 6, Range of values is 0 to 5
  7595                           ; switch strategies available:
  7596                           ; Name         Instructions Cycles
  7597                           ; simple_byte           19    10 (average)
  7598                           ;	Chosen strategy is simple_byte
  7599  00179C  501D               	movf	??_Off_Led,w,c
  7600  00179E  0A00               	xorlw	0	; case 0
  7601  0017A0  B4D8               	btfsc	status,2,c
  7602  0017A2  D7AC               	goto	l5638
  7603  0017A4  0A01               	xorlw	1	; case 1
  7604  0017A6  B4D8               	btfsc	status,2,c
  7605  0017A8  D7B5               	goto	l5642
  7606  0017AA  0A03               	xorlw	3	; case 2
  7607  0017AC  B4D8               	btfsc	status,2,c
  7608  0017AE  D7BE               	goto	l5646
  7609  0017B0  0A01               	xorlw	1	; case 3
  7610  0017B2  B4D8               	btfsc	status,2,c
  7611  0017B4  D7C7               	goto	l5650
  7612  0017B6  0A07               	xorlw	7	; case 4
  7613  0017B8  B4D8               	btfsc	status,2,c
  7614  0017BA  D7D0               	goto	l5654
  7615  0017BC  0A01               	xorlw	1	; case 5
  7616  0017BE  A4D8               	btfss	status,2,c
  7617  0017C0  0012               	return	
  7618  0017C2  D7D8               	goto	l5658
  7619  0017C4                     __end_of_Off_Led:
  7620                           	opt stack 0
  7621                           tosu	equ	0xFFF
  7622                           tosh	equ	0xFFE
  7623                           tosl	equ	0xFFD
  7624                           pclath	equ	0xFFA
  7625                           tblptru	equ	0xFF8
  7626                           tblptrh	equ	0xFF7
  7627                           tblptrl	equ	0xFF6
  7628                           tablat	equ	0xFF5
  7629                           prodh	equ	0xFF4
  7630                           prodl	equ	0xFF3
  7631                           intcon	equ	0xFF2
  7632                           postinc0	equ	0xFEE
  7633                           wreg	equ	0xFE8
  7634                           indf2	equ	0xFDF
  7635                           postinc2	equ	0xFDE
  7636                           postdec2	equ	0xFDD
  7637                           plusw2	equ	0xFDB
  7638                           fsr2h	equ	0xFDA
  7639                           fsr2l	equ	0xFD9
  7640                           status	equ	0xFD8
  7641                           
  7642 ;; *************** function _TBbarGraphs *****************
  7643 ;; Defined at:
  7644 ;;		line 47 in file "Communications.c"
  7645 ;; Parameters:    Size  Location     Type
  7646 ;;  t               2   26[COMRAM] int 
  7647 ;;  b               2   28[COMRAM] int 
  7648 ;; Auto vars:     Size  Location     Type
  7649 ;;		None
  7650 ;; Return value:  Size  Location     Type
  7651 ;;		None               void
  7652 ;; Registers used:
  7653 ;;		None
  7654 ;; Tracked objects:
  7655 ;;		On entry : 0/0
  7656 ;;		On exit  : 0/0
  7657 ;;		Unchanged: 0/0
  7658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7659 ;;      Params:         4       0       0       0       0       0       0
  7660 ;;      Locals:         0       0       0       0       0       0       0
  7661 ;;      Temps:          0       0       0       0       0       0       0
  7662 ;;      Totals:         4       0       0       0       0       0       0
  7663 ;;Total ram usage:        4 bytes
  7664 ;; Hardware stack levels used:    1
  7665 ;; Hardware stack levels required when called:    4
  7666 ;; This function calls:
  7667 ;;		Nothing
  7668 ;; This function is called by:
  7669 ;;		_updateComms
  7670 ;; This function uses a non-reentrant model
  7671 ;;
  7672                           
  7673                           	psect	text30
  7674  0021C0                     __ptext30:
  7675                           	opt stack 0
  7676  0021C0                     _TBbarGraphs:
  7677                           	opt stack 25
  7678                           
  7679                           ;Communications.c: 48: throttle = t;
  7680                           
  7681                           ;incstack = 0
  7682  0021C0  C01B  F0D7         	movff	TBbarGraphs@t,_throttle
  7683  0021C4  C01C  F0D8         	movff	TBbarGraphs@t+1,_throttle+1
  7684                           
  7685                           ;Communications.c: 49: brake = b;
  7686  0021C8  C01D  F0C7         	movff	TBbarGraphs@b,_brake
  7687  0021CC  C01E  F0C8         	movff	TBbarGraphs@b+1,_brake+1
  7688  0021D0  0012               	return		;funcret
  7689  0021D2                     __end_of_TBbarGraphs:
  7690                           	opt stack 0
  7691                           tosu	equ	0xFFF
  7692                           tosh	equ	0xFFE
  7693                           tosl	equ	0xFFD
  7694                           pclath	equ	0xFFA
  7695                           tblptru	equ	0xFF8
  7696                           tblptrh	equ	0xFF7
  7697                           tblptrl	equ	0xFF6
  7698                           tablat	equ	0xFF5
  7699                           prodh	equ	0xFF4
  7700                           prodl	equ	0xFF3
  7701                           intcon	equ	0xFF2
  7702                           postinc0	equ	0xFEE
  7703                           wreg	equ	0xFE8
  7704                           indf2	equ	0xFDF
  7705                           postinc2	equ	0xFDE
  7706                           postdec2	equ	0xFDD
  7707                           plusw2	equ	0xFDB
  7708                           fsr2h	equ	0xFDA
  7709                           fsr2l	equ	0xFD9
  7710                           status	equ	0xFD8
  7711                           
  7712 ;; *************** function _SYSTEM_Initialize *****************
  7713 ;; Defined at:
  7714 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7715 ;; Parameters:    Size  Location     Type
  7716 ;;		None
  7717 ;; Auto vars:     Size  Location     Type
  7718 ;;		None
  7719 ;; Return value:  Size  Location     Type
  7720 ;;		None               void
  7721 ;; Registers used:
  7722 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7723 ;; Tracked objects:
  7724 ;;		On entry : 0/0
  7725 ;;		On exit  : 0/0
  7726 ;;		Unchanged: 0/0
  7727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7728 ;;      Params:         0       0       0       0       0       0       0
  7729 ;;      Locals:         0       0       0       0       0       0       0
  7730 ;;      Temps:          0       0       0       0       0       0       0
  7731 ;;      Totals:         0       0       0       0       0       0       0
  7732 ;;Total ram usage:        0 bytes
  7733 ;; Hardware stack levels used:    1
  7734 ;; Hardware stack levels required when called:    7
  7735 ;; This function calls:
  7736 ;;		_ADC_Initialize
  7737 ;;		_EUSART1_Initialize
  7738 ;;		_I2C1_Initialize
  7739 ;;		_INTERRUPT_Initialize
  7740 ;;		_OSCILLATOR_Initialize
  7741 ;;		_PIN_MANAGER_Initialize
  7742 ;;		_TMR0_Initialize
  7743 ;;		_begin
  7744 ;; This function is called by:
  7745 ;;		_main
  7746 ;; This function uses a non-reentrant model
  7747 ;;
  7748                           
  7749                           	psect	text31
  7750  001BBC                     __ptext31:
  7751                           	opt stack 0
  7752  001BBC                     _SYSTEM_Initialize:
  7753                           	opt stack 23
  7754                           
  7755                           ;mcc.c: 114: OSCILLATOR_Initialize();
  7756                           
  7757                           ;incstack = 0
  7758  001BBC  EC00  F011         	call	_OSCILLATOR_Initialize	;wreg free
  7759                           
  7760                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  7761  001BC0  EC7B  F00E         	call	_PIN_MANAGER_Initialize	;wreg free
  7762                           
  7763                           ;mcc.c: 116: INTERRUPT_Initialize();
  7764  001BC4  ECE9  F010         	call	_INTERRUPT_Initialize	;wreg free
  7765                           
  7766                           ;mcc.c: 117: ADC_Initialize();
  7767  001BC8  ECB3  F010         	call	_ADC_Initialize	;wreg free
  7768                           
  7769                           ;mcc.c: 118: TMR0_Initialize();
  7770  001BCC  EC86  F010         	call	_TMR0_Initialize	;wreg free
  7771                           
  7772                           ;mcc.c: 120: EUSART1_Initialize();
  7773  001BD0  EC53  F00F         	call	_EUSART1_Initialize	;wreg free
  7774                           
  7775                           ;mcc.c: 121: begin(receiveArray, sizeof (receiveArray), 3, 0, Send_put, Receive_get, Rec
      +                          eive_available, Receive_peek);
  7776  001BD4  0E00               	movlw	low _receiveArray
  7777  001BD6  0100               	movlb	0	; () banked
  7778  001BD8  6FF0               	movwf	begin@ptr& (0+255),b
  7779  001BDA  0E01               	movlw	high _receiveArray
  7780  001BDC  0100               	movlb	0	; () banked
  7781  001BDE  6FF1               	movwf	(begin@ptr+1)& (0+255),b
  7782  001BE0  0E28               	movlw	40
  7783  001BE2  0100               	movlb	0	; () banked
  7784  001BE4  6FF2               	movwf	begin@maxSize& (0+255),b
  7785  001BE6  0E03               	movlw	3
  7786  001BE8  0100               	movlb	0	; () banked
  7787  001BEA  6FF3               	movwf	begin@givenAddress& (0+255),b
  7788  001BEC  0E00               	movlw	0
  7789  001BEE  0100               	movlb	0	; () banked
  7790  001BF0  6FF4               	movwf	begin@error& (0+255),b
  7791  001BF2  0E84               	movlw	low _Send_put
  7792  001BF4  0100               	movlb	0	; () banked
  7793  001BF6  6FF5               	movwf	begin@stufftosend& (0+255),b
  7794  001BF8  0E1F               	movlw	high _Send_put
  7795  001BFA  0100               	movlb	0	; () banked
  7796  001BFC  6FF6               	movwf	(begin@stufftosend+1)& (0+255),b
  7797  001BFE  0EF2               	movlw	low _Receive_get
  7798  001C00  0100               	movlb	0	; () banked
  7799  001C02  6FF7               	movwf	begin@stufftoreceive& (0+255),b
  7800  001C04  0E21               	movlw	high _Receive_get
  7801  001C06  0100               	movlb	0	; () banked
  7802  001C08  6FF8               	movwf	(begin@stufftoreceive+1)& (0+255),b
  7803  001C0A  0E7E               	movlw	low _Receive_available
  7804  001C0C  0100               	movlb	0	; () banked
  7805  001C0E  6FF9               	movwf	begin@stuffavailable& (0+255),b
  7806  001C10  0E21               	movlw	high _Receive_available
  7807  001C12  0100               	movlb	0	; () banked
  7808  001C14  6FFA               	movwf	(begin@stuffavailable+1)& (0+255),b
  7809  001C16  0EE4               	movlw	low _Receive_peek
  7810  001C18  0100               	movlb	0	; () banked
  7811  001C1A  6FFB               	movwf	begin@stuffpeek& (0+255),b
  7812  001C1C  0E21               	movlw	high _Receive_peek
  7813  001C1E  0100               	movlb	0	; () banked
  7814  001C20  6FFC               	movwf	(begin@stuffpeek+1)& (0+255),b
  7815  001C22  EC4C  F00E         	call	_begin	;wreg free
  7816                           
  7817                           ;mcc.c: 122: I2C1_Initialize();
  7818  001C26  EC35  F00F         	call	_I2C1_Initialize	;wreg free
  7819  001C2A  0012               	return		;funcret
  7820  001C2C                     __end_of_SYSTEM_Initialize:
  7821                           	opt stack 0
  7822                           tosu	equ	0xFFF
  7823                           tosh	equ	0xFFE
  7824                           tosl	equ	0xFFD
  7825                           pclath	equ	0xFFA
  7826                           tblptru	equ	0xFF8
  7827                           tblptrh	equ	0xFF7
  7828                           tblptrl	equ	0xFF6
  7829                           tablat	equ	0xFF5
  7830                           prodh	equ	0xFF4
  7831                           prodl	equ	0xFF3
  7832                           intcon	equ	0xFF2
  7833                           postinc0	equ	0xFEE
  7834                           wreg	equ	0xFE8
  7835                           indf2	equ	0xFDF
  7836                           postinc2	equ	0xFDE
  7837                           postdec2	equ	0xFDD
  7838                           plusw2	equ	0xFDB
  7839                           fsr2h	equ	0xFDA
  7840                           fsr2l	equ	0xFD9
  7841                           status	equ	0xFD8
  7842                           
  7843 ;; *************** function _begin *****************
  7844 ;; Defined at:
  7845 ;;		line 19 in file "FastTransfer.c"
  7846 ;; Parameters:    Size  Location     Type
  7847 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  7848 ;;		 -> receiveArray(40), 
  7849 ;;  maxSize         1    2[BANK0 ] unsigned char 
  7850 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  7851 ;;  error           1    4[BANK0 ] unsigned char 
  7852 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  7853 ;;		 -> Send_put(0), 
  7854 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  7855 ;;		 -> Receive_get(1), 
  7856 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  7857 ;;		 -> Receive_available(2), 
  7858 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  7859 ;;		 -> Receive_peek(1), 
  7860 ;; Auto vars:     Size  Location     Type
  7861 ;;		None
  7862 ;; Return value:  Size  Location     Type
  7863 ;;		None               void
  7864 ;; Registers used:
  7865 ;;		wreg, status,2, status,0, cstack
  7866 ;; Tracked objects:
  7867 ;;		On entry : 0/0
  7868 ;;		On exit  : 0/0
  7869 ;;		Unchanged: 0/0
  7870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7871 ;;      Params:         0      13       0       0       0       0       0
  7872 ;;      Locals:         0       0       0       0       0       0       0
  7873 ;;      Temps:          0       0       0       0       0       0       0
  7874 ;;      Totals:         0      13       0       0       0       0       0
  7875 ;;Total ram usage:       13 bytes
  7876 ;; Hardware stack levels used:    1
  7877 ;; Hardware stack levels required when called:    5
  7878 ;; This function calls:
  7879 ;;		___awdiv
  7880 ;; This function is called by:
  7881 ;;		_SYSTEM_Initialize
  7882 ;; This function uses a non-reentrant model
  7883 ;;
  7884                           
  7885                           	psect	text32
  7886  001C98                     __ptext32:
  7887                           	opt stack 0
  7888  001C98                     _begin:
  7889                           	opt stack 24
  7890                           
  7891                           ;FastTransfer.c: 20: receiveArrayAddress = ptr;
  7892                           
  7893                           ;incstack = 0
  7894  001C98  C0F0  F0D1         	movff	begin@ptr,_receiveArrayAddress
  7895  001C9C  C0F1  F0D2         	movff	begin@ptr+1,_receiveArrayAddress+1
  7896                           
  7897                           ;FastTransfer.c: 21: moduleAddress = givenAddress;
  7898  001CA0  C0F3  F03B         	movff	begin@givenAddress,_moduleAddress
  7899                           
  7900                           ;FastTransfer.c: 22: serial_write = stufftosend;
  7901  001CA4  C0F5  F034         	movff	begin@stufftosend,_serial_write
  7902  001CA8  C0F6  F035         	movff	begin@stufftosend+1,_serial_write+1
  7903                           
  7904                           ;FastTransfer.c: 23: serial_available = stuffavailable;
  7905  001CAC  C0F9  F030         	movff	begin@stuffavailable,_serial_available
  7906  001CB0  C0FA  F031         	movff	begin@stuffavailable+1,_serial_available+1
  7907                           
  7908                           ;FastTransfer.c: 24: serial_peek = stuffpeek;
  7909  001CB4  C0FB  F0D5         	movff	begin@stuffpeek,_serial_peek
  7910  001CB8  C0FC  F0D6         	movff	begin@stuffpeek+1,_serial_peek+1
  7911                           
  7912                           ;FastTransfer.c: 25: serial_read = stufftoreceive;
  7913  001CBC  C0F7  F032         	movff	begin@stufftoreceive,_serial_read
  7914  001CC0  C0F8  F033         	movff	begin@stufftoreceive+1,_serial_read+1
  7915                           
  7916                           ;FastTransfer.c: 26: maxDataAddress = maxSize / 2;
  7917  001CC4  C0F2  F01B         	movff	begin@maxSize,___awdiv@dividend
  7918  001CC8  6A1C               	clrf	___awdiv@dividend+1,c
  7919  001CCA  0E00               	movlw	0
  7920  001CCC  6E1E               	movwf	___awdiv@divisor+1,c
  7921  001CCE  0E02               	movlw	2
  7922  001CD0  6E1D               	movwf	___awdiv@divisor,c
  7923  001CD2  EC62  F00D         	call	___awdiv	;wreg free
  7924  001CD6  501B               	movf	?___awdiv,w,c
  7925  001CD8  6E3A               	movwf	_maxDataAddress,c
  7926                           
  7927                           ;FastTransfer.c: 27: sendStructAddress = (unsigned char*) & ring_buffer;
  7928  001CDA  0E00               	movlw	low _ring_buffer
  7929  001CDC  0100               	movlb	0	; () banked
  7930  001CDE  6FD3               	movwf	_sendStructAddress& (0+255),b
  7931  001CE0  0E02               	movlw	high _ring_buffer
  7932  001CE2  0100               	movlb	0	; () banked
  7933  001CE4  6FD4               	movwf	(_sendStructAddress+1)& (0+255),b
  7934                           
  7935                           ; BSR set to: 0
  7936                           ;FastTransfer.c: 28: AKNAKsend = error;
  7937  001CE6  C0F4  F037         	movff	begin@error,_AKNAKsend
  7938                           
  7939                           ; BSR set to: 0
  7940                           ;FastTransfer.c: 29: alignErrorCounter = 0;
  7941  001CEA  0E00               	movlw	0
  7942  001CEC  0100               	movlb	0	; () banked
  7943  001CEE  6FC6               	movwf	(_alignErrorCounter+1)& (0+255),b
  7944  001CF0  0E00               	movlw	0
  7945  001CF2  6FC5               	movwf	_alignErrorCounter& (0+255),b
  7946                           
  7947                           ; BSR set to: 0
  7948  001CF4  0012               	return		;funcret
  7949  001CF6                     __end_of_begin:
  7950                           	opt stack 0
  7951                           tosu	equ	0xFFF
  7952                           tosh	equ	0xFFE
  7953                           tosl	equ	0xFFD
  7954                           pclath	equ	0xFFA
  7955                           tblptru	equ	0xFF8
  7956                           tblptrh	equ	0xFF7
  7957                           tblptrl	equ	0xFF6
  7958                           tablat	equ	0xFF5
  7959                           prodh	equ	0xFF4
  7960                           prodl	equ	0xFF3
  7961                           intcon	equ	0xFF2
  7962                           postinc0	equ	0xFEE
  7963                           wreg	equ	0xFE8
  7964                           indf2	equ	0xFDF
  7965                           postinc2	equ	0xFDE
  7966                           postdec2	equ	0xFDD
  7967                           plusw2	equ	0xFDB
  7968                           fsr2h	equ	0xFDA
  7969                           fsr2l	equ	0xFD9
  7970                           status	equ	0xFD8
  7971                           
  7972 ;; *************** function ___awdiv *****************
  7973 ;; Defined at:
  7974 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  7975 ;; Parameters:    Size  Location     Type
  7976 ;;  dividend        2   26[COMRAM] int 
  7977 ;;  divisor         2   28[COMRAM] int 
  7978 ;; Auto vars:     Size  Location     Type
  7979 ;;  quotient        2   32[COMRAM] int 
  7980 ;;  sign            1   31[COMRAM] unsigned char 
  7981 ;;  counter         1   30[COMRAM] unsigned char 
  7982 ;; Return value:  Size  Location     Type
  7983 ;;                  2   26[COMRAM] int 
  7984 ;; Registers used:
  7985 ;;		wreg, status,2, status,0
  7986 ;; Tracked objects:
  7987 ;;		On entry : 0/0
  7988 ;;		On exit  : 0/0
  7989 ;;		Unchanged: 0/0
  7990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7991 ;;      Params:         4       0       0       0       0       0       0
  7992 ;;      Locals:         4       0       0       0       0       0       0
  7993 ;;      Temps:          0       0       0       0       0       0       0
  7994 ;;      Totals:         8       0       0       0       0       0       0
  7995 ;;Total ram usage:        8 bytes
  7996 ;; Hardware stack levels used:    1
  7997 ;; Hardware stack levels required when called:    4
  7998 ;; This function calls:
  7999 ;;		Nothing
  8000 ;; This function is called by:
  8001 ;;		_begin
  8002 ;;		_LEDsetBar
  8003 ;; This function uses a non-reentrant model
  8004 ;;
  8005                           
  8006                           	psect	text33
  8007  001AC4                     __ptext33:
  8008                           	opt stack 0
  8009  001AC4                     ___awdiv:
  8010                           	opt stack 24
  8011                           
  8012                           ; BSR set to: 0
  8013                           ;incstack = 0
  8014  001AC4  0E00               	movlw	0
  8015  001AC6  6E20               	movwf	___awdiv@sign,c
  8016  001AC8  AE1E               	btfss	___awdiv@divisor+1,7,c
  8017  001ACA  D006               	goto	l4316
  8018  001ACC  6C1D               	negf	___awdiv@divisor,c
  8019  001ACE  1E1E               	comf	___awdiv@divisor+1,f,c
  8020  001AD0  B0D8               	btfsc	status,0,c
  8021  001AD2  2A1E               	incf	___awdiv@divisor+1,f,c
  8022  001AD4  0E01               	movlw	1
  8023  001AD6  6E20               	movwf	___awdiv@sign,c
  8024  001AD8                     l4316:
  8025  001AD8  AE1C               	btfss	___awdiv@dividend+1,7,c
  8026  001ADA  D006               	goto	l4322
  8027  001ADC  6C1B               	negf	___awdiv@dividend,c
  8028  001ADE  1E1C               	comf	___awdiv@dividend+1,f,c
  8029  001AE0  B0D8               	btfsc	status,0,c
  8030  001AE2  2A1C               	incf	___awdiv@dividend+1,f,c
  8031  001AE4  0E01               	movlw	1
  8032  001AE6  1A20               	xorwf	___awdiv@sign,f,c
  8033  001AE8                     l4322:
  8034  001AE8  0E00               	movlw	0
  8035  001AEA  6E22               	movwf	___awdiv@quotient+1,c
  8036  001AEC  0E00               	movlw	0
  8037  001AEE  6E21               	movwf	___awdiv@quotient,c
  8038  001AF0  501D               	movf	___awdiv@divisor,w,c
  8039  001AF2  101E               	iorwf	___awdiv@divisor+1,w,c
  8040  001AF4  B4D8               	btfsc	status,2,c
  8041  001AF6  D01C               	goto	l4344
  8042  001AF8  0E01               	movlw	1
  8043  001AFA  6E1F               	movwf	___awdiv@counter,c
  8044  001AFC  D004               	goto	l4330
  8045  001AFE                     l4328:
  8046  001AFE  90D8               	bcf	status,0,c
  8047  001B00  361D               	rlcf	___awdiv@divisor,f,c
  8048  001B02  361E               	rlcf	___awdiv@divisor+1,f,c
  8049  001B04  2A1F               	incf	___awdiv@counter,f,c
  8050  001B06                     l4330:
  8051  001B06  AE1E               	btfss	___awdiv@divisor+1,7,c
  8052  001B08  D7FA               	goto	l4328
  8053  001B0A                     l4332:
  8054  001B0A  90D8               	bcf	status,0,c
  8055  001B0C  3621               	rlcf	___awdiv@quotient,f,c
  8056  001B0E  3622               	rlcf	___awdiv@quotient+1,f,c
  8057  001B10  501D               	movf	___awdiv@divisor,w,c
  8058  001B12  5C1B               	subwf	___awdiv@dividend,w,c
  8059  001B14  501E               	movf	___awdiv@divisor+1,w,c
  8060  001B16  581C               	subwfb	___awdiv@dividend+1,w,c
  8061  001B18  A0D8               	btfss	status,0,c
  8062  001B1A  D005               	goto	l4340
  8063  001B1C  501D               	movf	___awdiv@divisor,w,c
  8064  001B1E  5E1B               	subwf	___awdiv@dividend,f,c
  8065  001B20  501E               	movf	___awdiv@divisor+1,w,c
  8066  001B22  5A1C               	subwfb	___awdiv@dividend+1,f,c
  8067  001B24  8021               	bsf	___awdiv@quotient,0,c
  8068  001B26                     l4340:
  8069  001B26  90D8               	bcf	status,0,c
  8070  001B28  321E               	rrcf	___awdiv@divisor+1,f,c
  8071  001B2A  321D               	rrcf	___awdiv@divisor,f,c
  8072  001B2C  2E1F               	decfsz	___awdiv@counter,f,c
  8073  001B2E  D7ED               	goto	l4332
  8074  001B30                     l4344:
  8075  001B30  5020               	movf	___awdiv@sign,w,c
  8076  001B32  B4D8               	btfsc	status,2,c
  8077  001B34  D004               	goto	l4348
  8078  001B36  6C21               	negf	___awdiv@quotient,c
  8079  001B38  1E22               	comf	___awdiv@quotient+1,f,c
  8080  001B3A  B0D8               	btfsc	status,0,c
  8081  001B3C  2A22               	incf	___awdiv@quotient+1,f,c
  8082  001B3E                     l4348:
  8083  001B3E  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  8084  001B42  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  8085  001B46  0012               	return	
  8086  001B48                     __end_of___awdiv:
  8087                           	opt stack 0
  8088                           tosu	equ	0xFFF
  8089                           tosh	equ	0xFFE
  8090                           tosl	equ	0xFFD
  8091                           pclath	equ	0xFFA
  8092                           tblptru	equ	0xFF8
  8093                           tblptrh	equ	0xFF7
  8094                           tblptrl	equ	0xFF6
  8095                           tablat	equ	0xFF5
  8096                           prodh	equ	0xFF4
  8097                           prodl	equ	0xFF3
  8098                           intcon	equ	0xFF2
  8099                           postinc0	equ	0xFEE
  8100                           wreg	equ	0xFE8
  8101                           indf2	equ	0xFDF
  8102                           postinc2	equ	0xFDE
  8103                           postdec2	equ	0xFDD
  8104                           plusw2	equ	0xFDB
  8105                           fsr2h	equ	0xFDA
  8106                           fsr2l	equ	0xFD9
  8107                           status	equ	0xFD8
  8108                           
  8109 ;; *************** function _TMR0_Initialize *****************
  8110 ;; Defined at:
  8111 ;;		line 23 in file "tmr0.c"
  8112 ;; Parameters:    Size  Location     Type
  8113 ;;		None
  8114 ;; Auto vars:     Size  Location     Type
  8115 ;;		None
  8116 ;; Return value:  Size  Location     Type
  8117 ;;		None               void
  8118 ;; Registers used:
  8119 ;;		wreg, status,2, cstack
  8120 ;; Tracked objects:
  8121 ;;		On entry : 0/0
  8122 ;;		On exit  : 0/0
  8123 ;;		Unchanged: 0/0
  8124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8125 ;;      Params:         0       0       0       0       0       0       0
  8126 ;;      Locals:         0       0       0       0       0       0       0
  8127 ;;      Temps:          0       0       0       0       0       0       0
  8128 ;;      Totals:         0       0       0       0       0       0       0
  8129 ;;Total ram usage:        0 bytes
  8130 ;; Hardware stack levels used:    1
  8131 ;; Hardware stack levels required when called:    5
  8132 ;; This function calls:
  8133 ;;		_TMR0_StartTimer
  8134 ;; This function is called by:
  8135 ;;		_SYSTEM_Initialize
  8136 ;; This function uses a non-reentrant model
  8137 ;;
  8138                           
  8139                           	psect	text34
  8140  00210C                     __ptext34:
  8141                           	opt stack 0
  8142  00210C                     _TMR0_Initialize:
  8143                           	opt stack 24
  8144                           
  8145                           ;tmr0.c: 27: T0CON = 0x94;
  8146                           
  8147                           ;incstack = 0
  8148  00210C  0E94               	movlw	148
  8149  00210E  6ED5               	movwf	4053,c	;volatile
  8150                           
  8151                           ;tmr0.c: 30: TMR0H = 0xCF;
  8152  002110  0ECF               	movlw	207
  8153  002112  6ED7               	movwf	4055,c	;volatile
  8154                           
  8155                           ;tmr0.c: 33: TMR0L = 0x2C;
  8156  002114  0E2C               	movlw	44
  8157  002116  6ED6               	movwf	4054,c	;volatile
  8158                           
  8159                           ;tmr0.c: 36: timer0ReloadVal16bit = 53036;
  8160  002118  0ECF               	movlw	207
  8161  00211A  6E43               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  8162  00211C  0E2C               	movlw	44
  8163  00211E  6E42               	movwf	_timer0ReloadVal16bit,c	;volatile
  8164                           
  8165                           ;tmr0.c: 39: INTCONbits.TMR0IF = 0;
  8166  002120  94F2               	bcf	intcon,2,c	;volatile
  8167                           
  8168                           ;tmr0.c: 42: INTCONbits.TMR0IE = 1;
  8169  002122  8AF2               	bsf	intcon,5,c	;volatile
  8170                           
  8171                           ;tmr0.c: 45: TMR0_StartTimer();
  8172  002124  EC0C  F011         	call	_TMR0_StartTimer	;wreg free
  8173  002128  0012               	return		;funcret
  8174  00212A                     __end_of_TMR0_Initialize:
  8175                           	opt stack 0
  8176                           tosu	equ	0xFFF
  8177                           tosh	equ	0xFFE
  8178                           tosl	equ	0xFFD
  8179                           pclath	equ	0xFFA
  8180                           tblptru	equ	0xFF8
  8181                           tblptrh	equ	0xFF7
  8182                           tblptrl	equ	0xFF6
  8183                           tablat	equ	0xFF5
  8184                           prodh	equ	0xFF4
  8185                           prodl	equ	0xFF3
  8186                           intcon	equ	0xFF2
  8187                           postinc0	equ	0xFEE
  8188                           wreg	equ	0xFE8
  8189                           indf2	equ	0xFDF
  8190                           postinc2	equ	0xFDE
  8191                           postdec2	equ	0xFDD
  8192                           plusw2	equ	0xFDB
  8193                           fsr2h	equ	0xFDA
  8194                           fsr2l	equ	0xFD9
  8195                           status	equ	0xFD8
  8196                           
  8197 ;; *************** function _TMR0_StartTimer *****************
  8198 ;; Defined at:
  8199 ;;		line 48 in file "tmr0.c"
  8200 ;; Parameters:    Size  Location     Type
  8201 ;;		None
  8202 ;; Auto vars:     Size  Location     Type
  8203 ;;		None
  8204 ;; Return value:  Size  Location     Type
  8205 ;;		None               void
  8206 ;; Registers used:
  8207 ;;		None
  8208 ;; Tracked objects:
  8209 ;;		On entry : 0/0
  8210 ;;		On exit  : 0/0
  8211 ;;		Unchanged: 0/0
  8212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8213 ;;      Params:         0       0       0       0       0       0       0
  8214 ;;      Locals:         0       0       0       0       0       0       0
  8215 ;;      Temps:          0       0       0       0       0       0       0
  8216 ;;      Totals:         0       0       0       0       0       0       0
  8217 ;;Total ram usage:        0 bytes
  8218 ;; Hardware stack levels used:    1
  8219 ;; Hardware stack levels required when called:    4
  8220 ;; This function calls:
  8221 ;;		Nothing
  8222 ;; This function is called by:
  8223 ;;		_TMR0_Initialize
  8224 ;; This function uses a non-reentrant model
  8225 ;;
  8226                           
  8227                           	psect	text35
  8228  002218                     __ptext35:
  8229                           	opt stack 0
  8230  002218                     _TMR0_StartTimer:
  8231                           	opt stack 24
  8232                           
  8233                           ;tmr0.c: 50: T0CONbits.TMR0ON = 1;
  8234                           
  8235                           ;incstack = 0
  8236  002218  8ED5               	bsf	4053,7,c	;volatile
  8237  00221A  0012               	return		;funcret
  8238  00221C                     __end_of_TMR0_StartTimer:
  8239                           	opt stack 0
  8240                           tosu	equ	0xFFF
  8241                           tosh	equ	0xFFE
  8242                           tosl	equ	0xFFD
  8243                           pclath	equ	0xFFA
  8244                           tblptru	equ	0xFF8
  8245                           tblptrh	equ	0xFF7
  8246                           tblptrl	equ	0xFF6
  8247                           tablat	equ	0xFF5
  8248                           prodh	equ	0xFF4
  8249                           prodl	equ	0xFF3
  8250                           intcon	equ	0xFF2
  8251                           postinc0	equ	0xFEE
  8252                           wreg	equ	0xFE8
  8253                           indf2	equ	0xFDF
  8254                           postinc2	equ	0xFDE
  8255                           postdec2	equ	0xFDD
  8256                           plusw2	equ	0xFDB
  8257                           fsr2h	equ	0xFDA
  8258                           fsr2l	equ	0xFD9
  8259                           status	equ	0xFD8
  8260                           
  8261 ;; *************** function _PIN_MANAGER_Initialize *****************
  8262 ;; Defined at:
  8263 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  8264 ;; Parameters:    Size  Location     Type
  8265 ;;		None
  8266 ;; Auto vars:     Size  Location     Type
  8267 ;;		None
  8268 ;; Return value:  Size  Location     Type
  8269 ;;		None               void
  8270 ;; Registers used:
  8271 ;;		wreg, status,2
  8272 ;; Tracked objects:
  8273 ;;		On entry : 0/0
  8274 ;;		On exit  : 0/0
  8275 ;;		Unchanged: 0/0
  8276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8277 ;;      Params:         0       0       0       0       0       0       0
  8278 ;;      Locals:         0       0       0       0       0       0       0
  8279 ;;      Temps:          0       0       0       0       0       0       0
  8280 ;;      Totals:         0       0       0       0       0       0       0
  8281 ;;Total ram usage:        0 bytes
  8282 ;; Hardware stack levels used:    1
  8283 ;; Hardware stack levels required when called:    4
  8284 ;; This function calls:
  8285 ;;		Nothing
  8286 ;; This function is called by:
  8287 ;;		_SYSTEM_Initialize
  8288 ;; This function uses a non-reentrant model
  8289 ;;
  8290                           
  8291                           	psect	text36
  8292  001CF6                     __ptext36:
  8293                           	opt stack 0
  8294  001CF6                     _PIN_MANAGER_Initialize:
  8295                           	opt stack 25
  8296                           
  8297                           ;pin_manager.c: 52: LATA = 0x00;
  8298                           
  8299                           ;incstack = 0
  8300  001CF6  0E00               	movlw	0
  8301  001CF8  6E89               	movwf	3977,c	;volatile
  8302                           
  8303                           ;pin_manager.c: 53: TRISA = 0xF7;
  8304  001CFA  0EF7               	movlw	247
  8305  001CFC  6E92               	movwf	3986,c	;volatile
  8306                           
  8307                           ;pin_manager.c: 54: ANSELA = 0x20;
  8308  001CFE  0E20               	movlw	32
  8309  001D00  010F               	movlb	15	; () banked
  8310  001D02  6F38               	movwf	56,b	;volatile
  8311                           
  8312                           ;pin_manager.c: 56: LATB = 0x00;
  8313  001D04  0E00               	movlw	0
  8314  001D06  6E8A               	movwf	3978,c	;volatile
  8315                           
  8316                           ;pin_manager.c: 57: TRISB = 0xD7;
  8317  001D08  0ED7               	movlw	215
  8318  001D0A  6E93               	movwf	3987,c	;volatile
  8319                           
  8320                           ;pin_manager.c: 58: ANSELB = 0x00;
  8321  001D0C  0E00               	movlw	0
  8322  001D0E  010F               	movlb	15	; () banked
  8323  001D10  6F39               	movwf	57,b	;volatile
  8324                           
  8325                           ;pin_manager.c: 59: WPUB = 0x00;
  8326  001D12  0E00               	movlw	0
  8327  001D14  6E61               	movwf	3937,c	;volatile
  8328                           
  8329                           ;pin_manager.c: 61: LATC = 0x18;
  8330  001D16  0E18               	movlw	24
  8331  001D18  6E8B               	movwf	3979,c	;volatile
  8332                           
  8333                           ;pin_manager.c: 62: TRISC = 0xDF;
  8334  001D1A  0EDF               	movlw	223
  8335  001D1C  6E94               	movwf	3988,c	;volatile
  8336                           
  8337                           ;pin_manager.c: 65: LATD = 0x00;
  8338  001D1E  0E00               	movlw	0
  8339  001D20  6E8C               	movwf	3980,c	;volatile
  8340                           
  8341                           ;pin_manager.c: 66: TRISD = 0xFD;
  8342  001D22  0EFD               	movlw	253
  8343  001D24  6E95               	movwf	3989,c	;volatile
  8344                           
  8345                           ;pin_manager.c: 67: ANSELD = 0xDD;
  8346  001D26  0EDD               	movlw	221
  8347  001D28  010F               	movlb	15	; () banked
  8348  001D2A  6F3B               	movwf	59,b	;volatile
  8349                           
  8350                           ;pin_manager.c: 69: LATE = 0x00;
  8351  001D2C  0E00               	movlw	0
  8352  001D2E  6E8D               	movwf	3981,c	;volatile
  8353                           
  8354                           ;pin_manager.c: 70: TRISE = 0x00;
  8355  001D30  0E00               	movlw	0
  8356  001D32  6E96               	movwf	3990,c	;volatile
  8357                           
  8358                           ;pin_manager.c: 71: ANSELE = 0x00;
  8359  001D34  0E00               	movlw	0
  8360  001D36  010F               	movlb	15	; () banked
  8361  001D38  6F3C               	movwf	60,b	;volatile
  8362                           
  8363                           ;pin_manager.c: 73: ANSELC = 0xE4;
  8364  001D3A  0EE4               	movlw	228
  8365  001D3C  010F               	movlb	15	; () banked
  8366  001D3E  6F3A               	movwf	58,b	;volatile
  8367                           
  8368                           ; BSR set to: 15
  8369                           ;pin_manager.c: 77: TRISCbits.TRISC5=0;
  8370  001D40  9A94               	bcf	3988,5,c	;volatile
  8371                           
  8372                           ; BSR set to: 15
  8373                           ;pin_manager.c: 78: INTCON2bits.nRBPU = 0x01;
  8374  001D42  8EF1               	bsf	intcon2,7,c	;volatile
  8375                           
  8376                           ; BSR set to: 15
  8377                           ;pin_manager.c: 81: LATCbits.LATC5 = 0;
  8378  001D44  9A8B               	bcf	3979,5,c	;volatile
  8379                           
  8380                           ; BSR set to: 15
  8381                           ;pin_manager.c: 82: TRISCbits.RC1 = 0;
  8382  001D46  9294               	bcf	3988,1,c	;volatile
  8383                           
  8384                           ; BSR set to: 15
  8385                           ;pin_manager.c: 83: TRISAbits.RA6 = 0;
  8386  001D48  9C92               	bcf	3986,6,c	;volatile
  8387                           
  8388                           ; BSR set to: 15
  8389  001D4A  0012               	return		;funcret
  8390  001D4C                     __end_of_PIN_MANAGER_Initialize:
  8391                           	opt stack 0
  8392                           tosu	equ	0xFFF
  8393                           tosh	equ	0xFFE
  8394                           tosl	equ	0xFFD
  8395                           pclath	equ	0xFFA
  8396                           tblptru	equ	0xFF8
  8397                           tblptrh	equ	0xFF7
  8398                           tblptrl	equ	0xFF6
  8399                           tablat	equ	0xFF5
  8400                           prodh	equ	0xFF4
  8401                           prodl	equ	0xFF3
  8402                           intcon	equ	0xFF2
  8403                           intcon2	equ	0xFF1
  8404                           postinc0	equ	0xFEE
  8405                           wreg	equ	0xFE8
  8406                           indf2	equ	0xFDF
  8407                           postinc2	equ	0xFDE
  8408                           postdec2	equ	0xFDD
  8409                           plusw2	equ	0xFDB
  8410                           fsr2h	equ	0xFDA
  8411                           fsr2l	equ	0xFD9
  8412                           status	equ	0xFD8
  8413                           
  8414 ;; *************** function _OSCILLATOR_Initialize *****************
  8415 ;; Defined at:
  8416 ;;		line 125 in file "mcc_generated_files/mcc.c"
  8417 ;; Parameters:    Size  Location     Type
  8418 ;;		None
  8419 ;; Auto vars:     Size  Location     Type
  8420 ;;		None
  8421 ;; Return value:  Size  Location     Type
  8422 ;;		None               void
  8423 ;; Registers used:
  8424 ;;		wreg, status,2
  8425 ;; Tracked objects:
  8426 ;;		On entry : 0/0
  8427 ;;		On exit  : 0/0
  8428 ;;		Unchanged: 0/0
  8429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8430 ;;      Params:         0       0       0       0       0       0       0
  8431 ;;      Locals:         0       0       0       0       0       0       0
  8432 ;;      Temps:          0       0       0       0       0       0       0
  8433 ;;      Totals:         0       0       0       0       0       0       0
  8434 ;;Total ram usage:        0 bytes
  8435 ;; Hardware stack levels used:    1
  8436 ;; Hardware stack levels required when called:    4
  8437 ;; This function calls:
  8438 ;;		Nothing
  8439 ;; This function is called by:
  8440 ;;		_SYSTEM_Initialize
  8441 ;; This function uses a non-reentrant model
  8442 ;;
  8443                           
  8444                           	psect	text37
  8445  002200                     __ptext37:
  8446                           	opt stack 0
  8447  002200                     _OSCILLATOR_Initialize:
  8448                           	opt stack 25
  8449                           
  8450                           ;mcc.c: 128: OSCCON = 0x72;
  8451                           
  8452                           ; BSR set to: 15
  8453                           ;incstack = 0
  8454  002200  0E72               	movlw	114
  8455  002202  6ED3               	movwf	4051,c	;volatile
  8456                           
  8457                           ;mcc.c: 130: OSCCON2 = 0x04;
  8458  002204  0E04               	movlw	4
  8459  002206  6ED2               	movwf	4050,c	;volatile
  8460                           
  8461                           ;mcc.c: 132: OSCTUNE = 0x00;
  8462  002208  0E00               	movlw	0
  8463  00220A  6E9B               	movwf	3995,c	;volatile
  8464  00220C  0012               	return		;funcret
  8465  00220E                     __end_of_OSCILLATOR_Initialize:
  8466                           	opt stack 0
  8467                           tosu	equ	0xFFF
  8468                           tosh	equ	0xFFE
  8469                           tosl	equ	0xFFD
  8470                           pclath	equ	0xFFA
  8471                           tblptru	equ	0xFF8
  8472                           tblptrh	equ	0xFF7
  8473                           tblptrl	equ	0xFF6
  8474                           tablat	equ	0xFF5
  8475                           prodh	equ	0xFF4
  8476                           prodl	equ	0xFF3
  8477                           intcon	equ	0xFF2
  8478                           intcon2	equ	0xFF1
  8479                           postinc0	equ	0xFEE
  8480                           wreg	equ	0xFE8
  8481                           indf2	equ	0xFDF
  8482                           postinc2	equ	0xFDE
  8483                           postdec2	equ	0xFDD
  8484                           plusw2	equ	0xFDB
  8485                           fsr2h	equ	0xFDA
  8486                           fsr2l	equ	0xFD9
  8487                           status	equ	0xFD8
  8488                           
  8489 ;; *************** function _INTERRUPT_Initialize *****************
  8490 ;; Defined at:
  8491 ;;		line 5 in file "mcc_generated_files/interrupt_manager.c"
  8492 ;; Parameters:    Size  Location     Type
  8493 ;;		None
  8494 ;; Auto vars:     Size  Location     Type
  8495 ;;		None
  8496 ;; Return value:  Size  Location     Type
  8497 ;;		None               void
  8498 ;; Registers used:
  8499 ;;		None
  8500 ;; Tracked objects:
  8501 ;;		On entry : 0/0
  8502 ;;		On exit  : 0/0
  8503 ;;		Unchanged: 0/0
  8504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8505 ;;      Params:         0       0       0       0       0       0       0
  8506 ;;      Locals:         0       0       0       0       0       0       0
  8507 ;;      Temps:          0       0       0       0       0       0       0
  8508 ;;      Totals:         0       0       0       0       0       0       0
  8509 ;;Total ram usage:        0 bytes
  8510 ;; Hardware stack levels used:    1
  8511 ;; Hardware stack levels required when called:    4
  8512 ;; This function calls:
  8513 ;;		Nothing
  8514 ;; This function is called by:
  8515 ;;		_SYSTEM_Initialize
  8516 ;; This function uses a non-reentrant model
  8517 ;;
  8518                           
  8519                           	psect	text38
  8520  0021D2                     __ptext38:
  8521                           	opt stack 0
  8522  0021D2                     _INTERRUPT_Initialize:
  8523                           	opt stack 25
  8524                           
  8525                           ;interrupt_manager.c: 8: RCONbits.IPEN = 0;
  8526                           
  8527                           ;incstack = 0
  8528  0021D2  9ED0               	bcf	4048,7,c	;volatile
  8529                           
  8530                           ;interrupt_manager.c: 13: IPR1bits.RC1IP = 0;
  8531  0021D4  9A9F               	bcf	3999,5,c	;volatile
  8532                           
  8533                           ;interrupt_manager.c: 15: IPR1bits.TX1IP = 0;
  8534  0021D6  989F               	bcf	3999,4,c	;volatile
  8535                           
  8536                           ;interrupt_manager.c: 17: INTCON2bits.TMR0IP = 0;
  8537  0021D8  94F1               	bcf	intcon2,2,c	;volatile
  8538                           
  8539                           ;interrupt_manager.c: 19: IPR1bits.ADIP = 0;
  8540  0021DA  9C9F               	bcf	3999,6,c	;volatile
  8541                           
  8542                           ;interrupt_manager.c: 21: IPR1bits.SSP1IP = 0;
  8543  0021DC  969F               	bcf	3999,3,c	;volatile
  8544                           
  8545                           ;interrupt_manager.c: 23: IPR2bits.BCL1IP = 0;
  8546  0021DE  96A2               	bcf	4002,3,c	;volatile
  8547                           
  8548                           ;interrupt_manager.c: 24: IPR1bits.TMR2IP=0;
  8549  0021E0  929F               	bcf	3999,1,c	;volatile
  8550  0021E2  0012               	return		;funcret
  8551  0021E4                     __end_of_INTERRUPT_Initialize:
  8552                           	opt stack 0
  8553                           tosu	equ	0xFFF
  8554                           tosh	equ	0xFFE
  8555                           tosl	equ	0xFFD
  8556                           pclath	equ	0xFFA
  8557                           tblptru	equ	0xFF8
  8558                           tblptrh	equ	0xFF7
  8559                           tblptrl	equ	0xFF6
  8560                           tablat	equ	0xFF5
  8561                           prodh	equ	0xFF4
  8562                           prodl	equ	0xFF3
  8563                           intcon	equ	0xFF2
  8564                           intcon2	equ	0xFF1
  8565                           postinc0	equ	0xFEE
  8566                           wreg	equ	0xFE8
  8567                           indf2	equ	0xFDF
  8568                           postinc2	equ	0xFDE
  8569                           postdec2	equ	0xFDD
  8570                           plusw2	equ	0xFDB
  8571                           fsr2h	equ	0xFDA
  8572                           fsr2l	equ	0xFD9
  8573                           status	equ	0xFD8
  8574                           
  8575 ;; *************** function _I2C1_Initialize *****************
  8576 ;; Defined at:
  8577 ;;		line 151 in file "mcc_generated_files/i2c1.c"
  8578 ;; Parameters:    Size  Location     Type
  8579 ;;		None
  8580 ;; Auto vars:     Size  Location     Type
  8581 ;;		None
  8582 ;; Return value:  Size  Location     Type
  8583 ;;		None               void
  8584 ;; Registers used:
  8585 ;;		wreg, status,2, status,0
  8586 ;; Tracked objects:
  8587 ;;		On entry : 0/0
  8588 ;;		On exit  : 0/0
  8589 ;;		Unchanged: 0/0
  8590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8591 ;;      Params:         0       0       0       0       0       0       0
  8592 ;;      Locals:         0       0       0       0       0       0       0
  8593 ;;      Temps:          0       0       0       0       0       0       0
  8594 ;;      Totals:         0       0       0       0       0       0       0
  8595 ;;Total ram usage:        0 bytes
  8596 ;; Hardware stack levels used:    1
  8597 ;; Hardware stack levels required when called:    4
  8598 ;; This function calls:
  8599 ;;		Nothing
  8600 ;; This function is called by:
  8601 ;;		_SYSTEM_Initialize
  8602 ;; This function uses a non-reentrant model
  8603 ;;
  8604                           
  8605                           	psect	text39
  8606  001E6A                     __ptext39:
  8607                           	opt stack 0
  8608  001E6A                     _I2C1_Initialize:
  8609                           	opt stack 25
  8610                           
  8611                           ;i2c1.c: 153: i2c1_object.pTrHead = i2c1_tr_queue;
  8612                           
  8613                           ;incstack = 0
  8614  001E6A  0EE9               	movlw	low _i2c1_tr_queue
  8615  001E6C  0100               	movlb	0	; () banked
  8616  001E6E  6FBA               	movwf	(_i2c1_object+2)& (0+255),b
  8617  001E70  0E00               	movlw	high _i2c1_tr_queue
  8618  001E72  0100               	movlb	0	; () banked
  8619  001E74  6FBB               	movwf	(_i2c1_object+3)& (0+255),b
  8620                           
  8621                           ;i2c1.c: 154: i2c1_object.pTrTail = i2c1_tr_queue;
  8622  001E76  0EE9               	movlw	low _i2c1_tr_queue
  8623  001E78  0100               	movlb	0	; () banked
  8624  001E7A  6FB8               	movwf	_i2c1_object& (0+255),b
  8625  001E7C  0E00               	movlw	high _i2c1_tr_queue
  8626  001E7E  0100               	movlb	0	; () banked
  8627  001E80  6FB9               	movwf	(_i2c1_object+1)& (0+255),b
  8628                           
  8629                           ; BSR set to: 0
  8630                           ;i2c1.c: 155: i2c1_object.trStatus.s.empty = 1;
  8631  001E82  0100               	movlb	0	; () banked
  8632  001E84  83BC               	bsf	(_i2c1_object+4)& (0+255),1,b
  8633                           
  8634                           ; BSR set to: 0
  8635                           ;i2c1.c: 156: i2c1_object.trStatus.s.full = 0;
  8636  001E86  0100               	movlb	0	; () banked
  8637  001E88  91BC               	bcf	(_i2c1_object+4)& (0+255),0,b
  8638                           
  8639                           ; BSR set to: 0
  8640                           ;i2c1.c: 158: i2c1_object.i2cErrors = 0;
  8641  001E8A  0E00               	movlw	0
  8642  001E8C  0100               	movlb	0	; () banked
  8643  001E8E  6FBE               	movwf	(_i2c1_object+6)& (0+255),b
  8644                           
  8645                           ; BSR set to: 0
  8646                           ;i2c1.c: 161: SSP1STAT = 0x80;
  8647  001E90  0E80               	movlw	128
  8648  001E92  6EC7               	movwf	4039,c	;volatile
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;i2c1.c: 163: SSP1CON1 = 0x28;
  8652  001E94  0E28               	movlw	40
  8653  001E96  6EC6               	movwf	4038,c	;volatile
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;i2c1.c: 165: SSP1CON3 = 0x00;
  8657  001E98  0E00               	movlw	0
  8658  001E9A  6ECB               	movwf	4043,c	;volatile
  8659                           
  8660                           ; BSR set to: 0
  8661                           ;i2c1.c: 167: SSP1ADD = 0x03;
  8662  001E9C  0E03               	movlw	3
  8663  001E9E  6EC8               	movwf	4040,c	;volatile
  8664                           
  8665                           ; BSR set to: 0
  8666                           ;i2c1.c: 171: PIR1bits.SSP1IF = 0;
  8667  001EA0  969E               	bcf	3998,3,c	;volatile
  8668                           
  8669                           ; BSR set to: 0
  8670                           ;i2c1.c: 173: PIE1bits.SSP1IE = 1;
  8671  001EA2  869D               	bsf	3997,3,c	;volatile
  8672                           
  8673                           ; BSR set to: 0
  8674  001EA4  0012               	return		;funcret
  8675  001EA6                     __end_of_I2C1_Initialize:
  8676                           	opt stack 0
  8677                           tosu	equ	0xFFF
  8678                           tosh	equ	0xFFE
  8679                           tosl	equ	0xFFD
  8680                           pclath	equ	0xFFA
  8681                           tblptru	equ	0xFF8
  8682                           tblptrh	equ	0xFF7
  8683                           tblptrl	equ	0xFF6
  8684                           tablat	equ	0xFF5
  8685                           prodh	equ	0xFF4
  8686                           prodl	equ	0xFF3
  8687                           intcon	equ	0xFF2
  8688                           intcon2	equ	0xFF1
  8689                           postinc0	equ	0xFEE
  8690                           wreg	equ	0xFE8
  8691                           indf2	equ	0xFDF
  8692                           postinc2	equ	0xFDE
  8693                           postdec2	equ	0xFDD
  8694                           plusw2	equ	0xFDB
  8695                           fsr2h	equ	0xFDA
  8696                           fsr2l	equ	0xFD9
  8697                           status	equ	0xFD8
  8698                           
  8699 ;; *************** function _EUSART1_Initialize *****************
  8700 ;; Defined at:
  8701 ;;		line 21 in file "UART.c"
  8702 ;; Parameters:    Size  Location     Type
  8703 ;;		None
  8704 ;; Auto vars:     Size  Location     Type
  8705 ;;		None
  8706 ;; Return value:  Size  Location     Type
  8707 ;;		None               void
  8708 ;; Registers used:
  8709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8710 ;; Tracked objects:
  8711 ;;		On entry : 0/0
  8712 ;;		On exit  : 0/0
  8713 ;;		Unchanged: 0/0
  8714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8715 ;;      Params:         0       0       0       0       0       0       0
  8716 ;;      Locals:         0       0       0       0       0       0       0
  8717 ;;      Temps:          0       0       0       0       0       0       0
  8718 ;;      Totals:         0       0       0       0       0       0       0
  8719 ;;Total ram usage:        0 bytes
  8720 ;; Hardware stack levels used:    1
  8721 ;; Hardware stack levels required when called:    6
  8722 ;; This function calls:
  8723 ;;		_UART_buff_init
  8724 ;; This function is called by:
  8725 ;;		_SYSTEM_Initialize
  8726 ;; This function uses a non-reentrant model
  8727 ;;
  8728                           
  8729                           	psect	text40
  8730  001EA6                     __ptext40:
  8731                           	opt stack 0
  8732  001EA6                     _EUSART1_Initialize:
  8733                           	opt stack 23
  8734                           
  8735                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  8736                           
  8737                           ; BSR set to: 0
  8738                           ;incstack = 0
  8739  001EA6  9A9D               	bcf	3997,5,c	;volatile
  8740                           
  8741                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  8742  001EA8  989D               	bcf	3997,4,c	;volatile
  8743                           
  8744                           ;UART.c: 29: BAUD1CON = 0x48;
  8745  001EAA  0E48               	movlw	72
  8746  001EAC  6EB8               	movwf	4024,c	;volatile
  8747                           
  8748                           ;UART.c: 32: RC1STA = 0x98;
  8749  001EAE  0E98               	movlw	152
  8750  001EB0  6EAB               	movwf	4011,c	;volatile
  8751                           
  8752                           ;UART.c: 35: TX1STA = 0x26;
  8753  001EB2  0E26               	movlw	38
  8754  001EB4  6EAC               	movwf	4012,c	;volatile
  8755                           
  8756                           ;UART.c: 38: SPBRG1 = (((16000000/38400)/4)-1);
  8757  001EB6  0E67               	movlw	103
  8758  001EB8  6EAF               	movwf	4015,c	;volatile
  8759                           
  8760                           ;UART.c: 41: SPBRGH1 = 0x00;
  8761  001EBA  0E00               	movlw	0
  8762  001EBC  6EB0               	movwf	4016,c	;volatile
  8763                           
  8764                           ;UART.c: 44: TXREG1 = 0x00;
  8765  001EBE  0E00               	movlw	0
  8766  001EC0  6EAD               	movwf	4013,c	;volatile
  8767                           
  8768                           ;UART.c: 47: RCREG1 = 0x00;
  8769  001EC2  0E00               	movlw	0
  8770  001EC4  6EAE               	movwf	4014,c	;volatile
  8771                           
  8772                           ;UART.c: 49: UART_buff_init(&input_buffer);
  8773  001EC6  0E00               	movlw	low _input_buffer
  8774  001EC8  6E23               	movwf	UART_buff_init@_this,c
  8775  001ECA  0E04               	movlw	high _input_buffer
  8776  001ECC  6E24               	movwf	UART_buff_init@_this+1,c
  8777  001ECE  EC95  F010         	call	_UART_buff_init	;wreg free
  8778                           
  8779                           ;UART.c: 50: UART_buff_init(&output_buffer);
  8780  001ED2  0E00               	movlw	low _output_buffer
  8781  001ED4  6E23               	movwf	UART_buff_init@_this,c
  8782  001ED6  0E05               	movlw	high _output_buffer
  8783  001ED8  6E24               	movwf	UART_buff_init@_this+1,c
  8784  001EDA  EC95  F010         	call	_UART_buff_init	;wreg free
  8785                           
  8786                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  8787  001EDE  8A9D               	bsf	3997,5,c	;volatile
  8788  001EE0  0012               	return		;funcret
  8789  001EE2                     __end_of_EUSART1_Initialize:
  8790                           	opt stack 0
  8791                           tosu	equ	0xFFF
  8792                           tosh	equ	0xFFE
  8793                           tosl	equ	0xFFD
  8794                           pclath	equ	0xFFA
  8795                           tblptru	equ	0xFF8
  8796                           tblptrh	equ	0xFF7
  8797                           tblptrl	equ	0xFF6
  8798                           tablat	equ	0xFF5
  8799                           prodh	equ	0xFF4
  8800                           prodl	equ	0xFF3
  8801                           intcon	equ	0xFF2
  8802                           intcon2	equ	0xFF1
  8803                           postinc0	equ	0xFEE
  8804                           wreg	equ	0xFE8
  8805                           indf2	equ	0xFDF
  8806                           postinc2	equ	0xFDE
  8807                           postdec2	equ	0xFDD
  8808                           plusw2	equ	0xFDB
  8809                           fsr2h	equ	0xFDA
  8810                           fsr2l	equ	0xFD9
  8811                           status	equ	0xFD8
  8812                           
  8813 ;; *************** function _UART_buff_init *****************
  8814 ;; Defined at:
  8815 ;;		line 56 in file "UART.c"
  8816 ;; Parameters:    Size  Location     Type
  8817 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  8818 ;;		 -> output_buffer(206), input_buffer(206), 
  8819 ;; Auto vars:     Size  Location     Type
  8820 ;;		None
  8821 ;; Return value:  Size  Location     Type
  8822 ;;		None               void
  8823 ;; Registers used:
  8824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8825 ;; Tracked objects:
  8826 ;;		On entry : 0/0
  8827 ;;		On exit  : 0/0
  8828 ;;		Unchanged: 0/0
  8829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8830 ;;      Params:         2       0       0       0       0       0       0
  8831 ;;      Locals:         0       0       0       0       0       0       0
  8832 ;;      Temps:          0       0       0       0       0       0       0
  8833 ;;      Totals:         2       0       0       0       0       0       0
  8834 ;;Total ram usage:        2 bytes
  8835 ;; Hardware stack levels used:    1
  8836 ;; Hardware stack levels required when called:    5
  8837 ;; This function calls:
  8838 ;;		_memset
  8839 ;; This function is called by:
  8840 ;;		_EUSART1_Initialize
  8841 ;; This function uses a non-reentrant model
  8842 ;;
  8843                           
  8844                           	psect	text41
  8845  00212A                     __ptext41:
  8846                           	opt stack 0
  8847  00212A                     _UART_buff_init:
  8848                           	opt stack 23
  8849                           
  8850                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  8851                           
  8852                           ;incstack = 0
  8853  00212A  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  8854  00212E  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  8855  002132  0E00               	movlw	0
  8856  002134  6E1E               	movwf	memset@c+1,c
  8857  002136  0E00               	movlw	0
  8858  002138  6E1D               	movwf	memset@c,c
  8859  00213A  0E00               	movlw	0
  8860  00213C  6E20               	movwf	memset@n+1,c
  8861  00213E  0ECE               	movlw	206
  8862  002140  6E1F               	movwf	memset@n,c
  8863  002142  ECDA  F00F         	call	_memset	;wreg free
  8864  002146  0012               	return		;funcret
  8865  002148                     __end_of_UART_buff_init:
  8866                           	opt stack 0
  8867                           tosu	equ	0xFFF
  8868                           tosh	equ	0xFFE
  8869                           tosl	equ	0xFFD
  8870                           pclath	equ	0xFFA
  8871                           tblptru	equ	0xFF8
  8872                           tblptrh	equ	0xFF7
  8873                           tblptrl	equ	0xFF6
  8874                           tablat	equ	0xFF5
  8875                           prodh	equ	0xFF4
  8876                           prodl	equ	0xFF3
  8877                           intcon	equ	0xFF2
  8878                           intcon2	equ	0xFF1
  8879                           postinc0	equ	0xFEE
  8880                           wreg	equ	0xFE8
  8881                           indf2	equ	0xFDF
  8882                           postinc2	equ	0xFDE
  8883                           postdec2	equ	0xFDD
  8884                           plusw2	equ	0xFDB
  8885                           fsr2h	equ	0xFDA
  8886                           fsr2l	equ	0xFD9
  8887                           status	equ	0xFD8
  8888                           
  8889 ;; *************** function _memset *****************
  8890 ;; Defined at:
  8891 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\memset.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;  p1              2   26[COMRAM] PTR void 
  8894 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  8895 ;;  c               2   28[COMRAM] int 
  8896 ;;  n               2   30[COMRAM] unsigned int 
  8897 ;; Auto vars:     Size  Location     Type
  8898 ;;  p               2   32[COMRAM] PTR unsigned char 
  8899 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  8900 ;; Return value:  Size  Location     Type
  8901 ;;                  2   26[COMRAM] PTR void 
  8902 ;; Registers used:
  8903 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8904 ;; Tracked objects:
  8905 ;;		On entry : 0/0
  8906 ;;		On exit  : 0/0
  8907 ;;		Unchanged: 0/0
  8908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8909 ;;      Params:         6       0       0       0       0       0       0
  8910 ;;      Locals:         2       0       0       0       0       0       0
  8911 ;;      Temps:          0       0       0       0       0       0       0
  8912 ;;      Totals:         8       0       0       0       0       0       0
  8913 ;;Total ram usage:        8 bytes
  8914 ;; Hardware stack levels used:    1
  8915 ;; Hardware stack levels required when called:    4
  8916 ;; This function calls:
  8917 ;;		Nothing
  8918 ;; This function is called by:
  8919 ;;		_FastTransfer_buffer_flush
  8920 ;;		_UART_buff_init
  8921 ;;		_UART_buff_flush
  8922 ;; This function uses a non-reentrant model
  8923 ;;
  8924                           
  8925                           	psect	text42
  8926  001FB4                     __ptext42:
  8927                           	opt stack 0
  8928  001FB4                     _memset:
  8929                           	opt stack 22
  8930                           
  8931                           ;incstack = 0
  8932  001FB4  C01B  F021         	movff	memset@p1,memset@p
  8933  001FB8  C01C  F022         	movff	memset@p1+1,memset@p+1
  8934  001FBC  D008               	goto	l5582
  8935  001FBE                     l5578:
  8936  001FBE  C021  FFD9         	movff	memset@p,fsr2l
  8937  001FC2  C022  FFDA         	movff	memset@p+1,fsr2h
  8938  001FC6  C01D  FFDF         	movff	memset@c,indf2
  8939  001FCA  4A21               	infsnz	memset@p,f,c
  8940  001FCC  2A22               	incf	memset@p+1,f,c
  8941  001FCE                     l5582:
  8942  001FCE  061F               	decf	memset@n,f,c
  8943  001FD0  A0D8               	btfss	status,0,c
  8944  001FD2  0620               	decf	memset@n+1,f,c
  8945  001FD4  281F               	incf	memset@n,w,c
  8946  001FD6  E1F3               	bnz	l5578
  8947  001FD8  2820               	incf	memset@n+1,w,c
  8948  001FDA  B4D8               	btfsc	status,2,c
  8949  001FDC  0012               	return	
  8950  001FDE  D7EF               	goto	l5578
  8951  001FE0                     __end_of_memset:
  8952                           	opt stack 0
  8953                           tosu	equ	0xFFF
  8954                           tosh	equ	0xFFE
  8955                           tosl	equ	0xFFD
  8956                           pclath	equ	0xFFA
  8957                           tblptru	equ	0xFF8
  8958                           tblptrh	equ	0xFF7
  8959                           tblptrl	equ	0xFF6
  8960                           tablat	equ	0xFF5
  8961                           prodh	equ	0xFF4
  8962                           prodl	equ	0xFF3
  8963                           intcon	equ	0xFF2
  8964                           intcon2	equ	0xFF1
  8965                           postinc0	equ	0xFEE
  8966                           wreg	equ	0xFE8
  8967                           indf2	equ	0xFDF
  8968                           postinc2	equ	0xFDE
  8969                           postdec2	equ	0xFDD
  8970                           plusw2	equ	0xFDB
  8971                           fsr2h	equ	0xFDA
  8972                           fsr2l	equ	0xFD9
  8973                           status	equ	0xFD8
  8974                           
  8975 ;; *************** function _ADC_Initialize *****************
  8976 ;; Defined at:
  8977 ;;		line 59 in file "mcc_generated_files/adc.c"
  8978 ;; Parameters:    Size  Location     Type
  8979 ;;		None
  8980 ;; Auto vars:     Size  Location     Type
  8981 ;;		None
  8982 ;; Return value:  Size  Location     Type
  8983 ;;		None               void
  8984 ;; Registers used:
  8985 ;;		wreg, status,2
  8986 ;; Tracked objects:
  8987 ;;		On entry : 0/0
  8988 ;;		On exit  : 0/0
  8989 ;;		Unchanged: 0/0
  8990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8991 ;;      Params:         0       0       0       0       0       0       0
  8992 ;;      Locals:         0       0       0       0       0       0       0
  8993 ;;      Temps:          0       0       0       0       0       0       0
  8994 ;;      Totals:         0       0       0       0       0       0       0
  8995 ;;Total ram usage:        0 bytes
  8996 ;; Hardware stack levels used:    1
  8997 ;; Hardware stack levels required when called:    4
  8998 ;; This function calls:
  8999 ;;		Nothing
  9000 ;; This function is called by:
  9001 ;;		_SYSTEM_Initialize
  9002 ;; This function uses a non-reentrant model
  9003 ;;
  9004                           
  9005                           	psect	text43
  9006  002166                     __ptext43:
  9007                           	opt stack 0
  9008  002166                     _ADC_Initialize:
  9009                           	opt stack 25
  9010                           
  9011                           ;adc.c: 64: ADCON0 = 0x01;
  9012                           
  9013                           ;incstack = 0
  9014  002166  0E01               	movlw	1
  9015  002168  6EC2               	movwf	4034,c	;volatile
  9016                           
  9017                           ;adc.c: 67: ADCON1 = 0x80;
  9018  00216A  0E80               	movlw	128
  9019  00216C  6EC1               	movwf	4033,c	;volatile
  9020                           
  9021                           ;adc.c: 70: ADCON2 = 0x05;
  9022  00216E  0E05               	movlw	5
  9023  002170  6EC0               	movwf	4032,c	;volatile
  9024                           
  9025                           ;adc.c: 73: ADRESL = 0x00;
  9026  002172  0E00               	movlw	0
  9027  002174  6EC3               	movwf	4035,c	;volatile
  9028                           
  9029                           ;adc.c: 76: ADRESH = 0x00;
  9030  002176  0E00               	movlw	0
  9031  002178  6EC4               	movwf	4036,c	;volatile
  9032                           
  9033                           ;adc.c: 79: PIE1bits.ADIE = 1;
  9034  00217A  8C9D               	bsf	3997,6,c	;volatile
  9035  00217C  0012               	return		;funcret
  9036  00217E                     __end_of_ADC_Initialize:
  9037                           	opt stack 0
  9038                           tosu	equ	0xFFF
  9039                           tosh	equ	0xFFE
  9040                           tosl	equ	0xFFD
  9041                           pclath	equ	0xFFA
  9042                           tblptru	equ	0xFF8
  9043                           tblptrh	equ	0xFF7
  9044                           tblptrl	equ	0xFF6
  9045                           tablat	equ	0xFF5
  9046                           prodh	equ	0xFF4
  9047                           prodl	equ	0xFF3
  9048                           intcon	equ	0xFF2
  9049                           intcon2	equ	0xFF1
  9050                           postinc0	equ	0xFEE
  9051                           wreg	equ	0xFE8
  9052                           indf2	equ	0xFDF
  9053                           postinc2	equ	0xFDE
  9054                           postdec2	equ	0xFDD
  9055                           plusw2	equ	0xFDB
  9056                           fsr2h	equ	0xFDA
  9057                           fsr2l	equ	0xFD9
  9058                           status	equ	0xFD8
  9059                           
  9060 ;; *************** function _GetTime *****************
  9061 ;; Defined at:
  9062 ;;		line 97 in file "tmr0.c"
  9063 ;; Parameters:    Size  Location     Type
  9064 ;;		None
  9065 ;; Auto vars:     Size  Location     Type
  9066 ;;		None
  9067 ;; Return value:  Size  Location     Type
  9068 ;;                  2   26[COMRAM] int 
  9069 ;; Registers used:
  9070 ;;		None
  9071 ;; Tracked objects:
  9072 ;;		On entry : 0/0
  9073 ;;		On exit  : 0/0
  9074 ;;		Unchanged: 0/0
  9075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9076 ;;      Params:         2       0       0       0       0       0       0
  9077 ;;      Locals:         0       0       0       0       0       0       0
  9078 ;;      Temps:          0       0       0       0       0       0       0
  9079 ;;      Totals:         2       0       0       0       0       0       0
  9080 ;;Total ram usage:        2 bytes
  9081 ;; Hardware stack levels used:    1
  9082 ;; Hardware stack levels required when called:    4
  9083 ;; This function calls:
  9084 ;;		Nothing
  9085 ;; This function is called by:
  9086 ;;		_main
  9087 ;; This function uses a non-reentrant model
  9088 ;;
  9089                           
  9090                           	psect	text44
  9091  00220E                     __ptext44:
  9092                           	opt stack 0
  9093  00220E                     _GetTime:
  9094                           	opt stack 26
  9095                           
  9096                           ;tmr0.c: 98: return time;
  9097                           
  9098                           ;incstack = 0
  9099  00220E  C0D9  F01B         	movff	_time,?_GetTime
  9100  002212  C0DA  F01C         	movff	_time+1,?_GetTime+1
  9101  002216  0012               	return		;funcret
  9102  002218                     __end_of_GetTime:
  9103                           	opt stack 0
  9104                           tosu	equ	0xFFF
  9105                           tosh	equ	0xFFE
  9106                           tosl	equ	0xFFD
  9107                           pclath	equ	0xFFA
  9108                           tblptru	equ	0xFF8
  9109                           tblptrh	equ	0xFF7
  9110                           tblptrl	equ	0xFF6
  9111                           tablat	equ	0xFF5
  9112                           prodh	equ	0xFF4
  9113                           prodl	equ	0xFF3
  9114                           intcon	equ	0xFF2
  9115                           intcon2	equ	0xFF1
  9116                           postinc0	equ	0xFEE
  9117                           wreg	equ	0xFE8
  9118                           indf2	equ	0xFDF
  9119                           postinc2	equ	0xFDE
  9120                           postdec2	equ	0xFDD
  9121                           plusw2	equ	0xFDB
  9122                           fsr2h	equ	0xFDA
  9123                           fsr2l	equ	0xFD9
  9124                           status	equ	0xFD8
  9125                           
  9126 ;; *************** function _INTERRUPT_InterruptManager *****************
  9127 ;; Defined at:
  9128 ;;		line 28 in file "mcc_generated_files/interrupt_manager.c"
  9129 ;; Parameters:    Size  Location     Type
  9130 ;;		None
  9131 ;; Auto vars:     Size  Location     Type
  9132 ;;		None
  9133 ;; Return value:  Size  Location     Type
  9134 ;;		None               void
  9135 ;; Registers used:
  9136 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9137 ;; Tracked objects:
  9138 ;;		On entry : 0/0
  9139 ;;		On exit  : 0/0
  9140 ;;		Unchanged: 0/0
  9141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9142 ;;      Params:         0       0       0       0       0       0       0
  9143 ;;      Locals:         0       0       0       0       0       0       0
  9144 ;;      Temps:         14       0       0       0       0       0       0
  9145 ;;      Totals:        14       0       0       0       0       0       0
  9146 ;;Total ram usage:       14 bytes
  9147 ;; Hardware stack levels used:    1
  9148 ;; Hardware stack levels required when called:    3
  9149 ;; This function calls:
  9150 ;;		_EUSART1_Receive_ISR
  9151 ;;		_EUSART1_Transmit_ISR
  9152 ;;		_I2C1_BusCollisionISR
  9153 ;;		_I2C1_ISR
  9154 ;;		_TMR0_ISR
  9155 ;; This function is called by:
  9156 ;;		Interrupt level 2
  9157 ;; This function uses a non-reentrant model
  9158 ;;
  9159                           
  9160                           	psect	intcode
  9161  000008                     __pintcode:
  9162                           	opt stack 0
  9163  000008                     _INTERRUPT_InterruptManager:
  9164                           	opt stack 21
  9165                           
  9166                           ;incstack = 0
  9167  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9168  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  9169  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  9170  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  9171  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  9172  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  9173  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  9174  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  9175  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  9176  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  9177  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  9178  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  9179  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  9180  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  9181  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  9182                           
  9183                           ;interrupt_manager.c: 31: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  9184  000042  BA9D               	btfsc	3997,5,c	;volatile
  9185  000044  AA9E               	btfss	3998,5,c	;volatile
  9186  000046  D003               	goto	i2l267
  9187                           
  9188                           ;interrupt_manager.c: 32: {
  9189                           ;interrupt_manager.c: 33: EUSART1_Receive_ISR();
  9190  000048  ECA4  F010         	call	_EUSART1_Receive_ISR	;wreg free
  9191                           
  9192                           ;interrupt_manager.c: 34: }
  9193  00004C  D00B               	goto	i2l5054
  9194  00004E                     i2l267:
  9195                           
  9196                           ;interrupt_manager.c: 35: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  9197  00004E  B89D               	btfsc	3997,4,c	;volatile
  9198  000050  A89E               	btfss	3998,4,c	;volatile
  9199  000052  D003               	goto	i2l269
  9200                           
  9201                           ;interrupt_manager.c: 36: {
  9202                           ;interrupt_manager.c: 37: EUSART1_Transmit_ISR();
  9203  000054  ECA9  F00F         	call	_EUSART1_Transmit_ISR	;wreg free
  9204                           
  9205                           ;interrupt_manager.c: 38: }
  9206  000058  D005               	goto	i2l5054
  9207  00005A                     i2l269:
  9208                           
  9209                           ;interrupt_manager.c: 39: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  9210  00005A  BAF2               	btfsc	intcon,5,c	;volatile
  9211  00005C  A4F2               	btfss	intcon,2,c	;volatile
  9212  00005E  D002               	goto	i2l5054
  9213                           
  9214                           ;interrupt_manager.c: 40: {
  9215                           ;interrupt_manager.c: 41: TMR0_ISR();
  9216  000060  EC71  F00F         	call	_TMR0_ISR	;wreg free
  9217  000064                     i2l5054:
  9218                           
  9219                           ;interrupt_manager.c: 42: }
  9220                           ;interrupt_manager.c: 43: if(PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1)
  9221  000064  B6A0               	btfsc	4000,3,c	;volatile
  9222  000066  A6A1               	btfss	4001,3,c	;volatile
  9223  000068  D003               	goto	i2l272
  9224                           
  9225                           ;interrupt_manager.c: 44: {
  9226                           ;interrupt_manager.c: 45: I2C1_BusCollisionISR();
  9227  00006A  EC0E  F011         	call	_I2C1_BusCollisionISR	;wreg free
  9228                           
  9229                           ;interrupt_manager.c: 46: }
  9230  00006E  D005               	goto	i2l276
  9231  000070                     i2l272:
  9232                           
  9233                           ;interrupt_manager.c: 47: else if(PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1)
  9234  000070  B69D               	btfsc	3997,3,c	;volatile
  9235  000072  A69E               	btfss	3998,3,c	;volatile
  9236  000074  D002               	goto	i2l276
  9237                           
  9238                           ;interrupt_manager.c: 48: {
  9239                           ;interrupt_manager.c: 49: I2C1_ISR();
  9240  000076  ECBC  F003         	call	_I2C1_ISR	;wreg free
  9241  00007A                     i2l276:
  9242  00007A  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  9243  00007E  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  9244  000082  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  9245  000086  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  9246  00008A  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  9247  00008E  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  9248  000092  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  9249  000096  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  9250  00009A  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  9251  00009E  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  9252  0000A2  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  9253  0000A6  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  9254  0000AA  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  9255  0000AE  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  9256  0000B2  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9257  0000B4  0011               	retfie		f
  9258  0000B6                     __end_of_INTERRUPT_InterruptManager:
  9259                           	opt stack 0
  9260                           tosu	equ	0xFFF
  9261                           tosh	equ	0xFFE
  9262                           tosl	equ	0xFFD
  9263                           pclatu	equ	0xFFB
  9264                           pclath	equ	0xFFA
  9265                           tblptru	equ	0xFF8
  9266                           tblptrh	equ	0xFF7
  9267                           tblptrl	equ	0xFF6
  9268                           tablat	equ	0xFF5
  9269                           prodh	equ	0xFF4
  9270                           prodl	equ	0xFF3
  9271                           intcon	equ	0xFF2
  9272                           intcon2	equ	0xFF1
  9273                           postinc0	equ	0xFEE
  9274                           fsr0h	equ	0xFEA
  9275                           fsr0l	equ	0xFE9
  9276                           wreg	equ	0xFE8
  9277                           fsr1h	equ	0xFE2
  9278                           fsr1l	equ	0xFE1
  9279                           indf2	equ	0xFDF
  9280                           postinc2	equ	0xFDE
  9281                           postdec2	equ	0xFDD
  9282                           plusw2	equ	0xFDB
  9283                           fsr2h	equ	0xFDA
  9284                           fsr2l	equ	0xFD9
  9285                           status	equ	0xFD8
  9286                           
  9287 ;; *************** function _TMR0_ISR *****************
  9288 ;; Defined at:
  9289 ;;		line 82 in file "tmr0.c"
  9290 ;; Parameters:    Size  Location     Type
  9291 ;;		None
  9292 ;; Auto vars:     Size  Location     Type
  9293 ;;  x               2    4[COMRAM] int 
  9294 ;; Return value:  Size  Location     Type
  9295 ;;		None               void
  9296 ;; Registers used:
  9297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9298 ;; Tracked objects:
  9299 ;;		On entry : 0/0
  9300 ;;		On exit  : 0/0
  9301 ;;		Unchanged: 0/0
  9302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9303 ;;      Params:         0       0       0       0       0       0       0
  9304 ;;      Locals:         2       0       0       0       0       0       0
  9305 ;;      Temps:          0       0       0       0       0       0       0
  9306 ;;      Totals:         2       0       0       0       0       0       0
  9307 ;;Total ram usage:        2 bytes
  9308 ;; Hardware stack levels used:    1
  9309 ;; Hardware stack levels required when called:    1
  9310 ;; This function calls:
  9311 ;;		_ReadButtonState
  9312 ;; This function is called by:
  9313 ;;		_INTERRUPT_InterruptManager
  9314 ;; This function uses a non-reentrant model
  9315 ;;
  9316                           
  9317                           	psect	text46
  9318  001EE2                     __ptext46:
  9319                           	opt stack 0
  9320  001EE2                     _TMR0_ISR:
  9321                           	opt stack 22
  9322                           
  9323                           ;tmr0.c: 85: TMR0H = timer0ReloadVal16bit >> 8;
  9324                           
  9325                           ;incstack = 0
  9326  001EE2  5043               	movf	_timer0ReloadVal16bit+1,w,c	;volatile
  9327  001EE4  6ED7               	movwf	4055,c	;volatile
  9328                           
  9329                           ;tmr0.c: 86: TMR0L = (uint8_t) timer0ReloadVal16bit;
  9330  001EE6  C042  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
  9331                           
  9332                           ;tmr0.c: 88: for (int x = 0; x < 8; x++) {
  9333  001EEA  0E00               	movlw	0
  9334  001EEC  6E06               	movwf	TMR0_ISR@x+1,c
  9335  001EEE  0E00               	movlw	0
  9336  001EF0  6E05               	movwf	TMR0_ISR@x,c
  9337  001EF2                     i2l4886:
  9338  001EF2  BE06               	btfsc	TMR0_ISR@x+1,7,c
  9339  001EF4  D006               	goto	i2l4890
  9340  001EF6  5006               	movf	TMR0_ISR@x+1,w,c
  9341  001EF8  E10D               	bnz	i2l4896
  9342  001EFA  0E08               	movlw	8
  9343  001EFC  5C05               	subwf	TMR0_ISR@x,w,c
  9344  001EFE  B0D8               	btfsc	status,0,c
  9345  001F00  D009               	goto	i2l4896
  9346  001F02                     i2l4890:
  9347                           
  9348                           ;tmr0.c: 89: ReadButtonState(x);
  9349  001F02  C005  F001         	movff	TMR0_ISR@x,ReadButtonState@btnnum
  9350  001F06  C006  F002         	movff	TMR0_ISR@x+1,ReadButtonState@btnnum+1
  9351  001F0A  ECA2  F009         	call	_ReadButtonState	;wreg free
  9352  001F0E  4A05               	infsnz	TMR0_ISR@x,f,c
  9353  001F10  2A06               	incf	TMR0_ISR@x+1,f,c
  9354  001F12  D7EF               	goto	i2l4886
  9355  001F14                     i2l4896:
  9356                           
  9357                           ;tmr0.c: 90: }
  9358                           ;tmr0.c: 91: time++;
  9359  001F14  0100               	movlb	0	; () banked
  9360  001F16  4BD9               	infsnz	_time& (0+255),f,b
  9361  001F18  2BDA               	incf	(_time+1)& (0+255),f,b
  9362                           
  9363                           ; BSR set to: 0
  9364                           ;tmr0.c: 94: INTCONbits.TMR0IF = 0;
  9365  001F1A  94F2               	bcf	intcon,2,c	;volatile
  9366                           
  9367                           ; BSR set to: 0
  9368  001F1C  0012               	return		;funcret
  9369  001F1E                     __end_of_TMR0_ISR:
  9370                           	opt stack 0
  9371                           tosu	equ	0xFFF
  9372                           tosh	equ	0xFFE
  9373                           tosl	equ	0xFFD
  9374                           pclatu	equ	0xFFB
  9375                           pclath	equ	0xFFA
  9376                           tblptru	equ	0xFF8
  9377                           tblptrh	equ	0xFF7
  9378                           tblptrl	equ	0xFF6
  9379                           tablat	equ	0xFF5
  9380                           prodh	equ	0xFF4
  9381                           prodl	equ	0xFF3
  9382                           intcon	equ	0xFF2
  9383                           intcon2	equ	0xFF1
  9384                           postinc0	equ	0xFEE
  9385                           fsr0h	equ	0xFEA
  9386                           fsr0l	equ	0xFE9
  9387                           wreg	equ	0xFE8
  9388                           fsr1h	equ	0xFE2
  9389                           fsr1l	equ	0xFE1
  9390                           indf2	equ	0xFDF
  9391                           postinc2	equ	0xFDE
  9392                           postdec2	equ	0xFDD
  9393                           plusw2	equ	0xFDB
  9394                           fsr2h	equ	0xFDA
  9395                           fsr2l	equ	0xFD9
  9396                           status	equ	0xFD8
  9397                           
  9398 ;; *************** function _ReadButtonState *****************
  9399 ;; Defined at:
  9400 ;;		line 154 in file "IO.c"
  9401 ;; Parameters:    Size  Location     Type
  9402 ;;  btnnum          2    0[COMRAM] int 
  9403 ;; Auto vars:     Size  Location     Type
  9404 ;;		None
  9405 ;; Return value:  Size  Location     Type
  9406 ;;		None               void
  9407 ;; Registers used:
  9408 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9409 ;; Tracked objects:
  9410 ;;		On entry : 0/0
  9411 ;;		On exit  : 0/0
  9412 ;;		Unchanged: 0/0
  9413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9414 ;;      Params:         2       0       0       0       0       0       0
  9415 ;;      Locals:         0       0       0       0       0       0       0
  9416 ;;      Temps:          2       0       0       0       0       0       0
  9417 ;;      Totals:         4       0       0       0       0       0       0
  9418 ;;Total ram usage:        4 bytes
  9419 ;; Hardware stack levels used:    1
  9420 ;; This function calls:
  9421 ;;		Nothing
  9422 ;; This function is called by:
  9423 ;;		_TMR0_ISR
  9424 ;; This function uses a non-reentrant model
  9425 ;;
  9426                           
  9427                           	psect	text47
  9428  001344                     __ptext47:
  9429                           	opt stack 0
  9430  001344                     _ReadButtonState:
  9431                           	opt stack 22
  9432                           
  9433                           ;IO.c: 155: switch (btnnum) {
  9434                           
  9435                           ; BSR set to: 0
  9436                           ;incstack = 0
  9437  001344  D068               	goto	i2l4464
  9438  001346                     i2l4446:
  9439                           
  9440                           ;IO.c: 157: butnarray[btnnum] = PORTDbits.RD5;
  9441  001346  0EB0               	movlw	low _butnarray
  9442  001348  2401               	addwf	ReadButtonState@btnnum,w,c
  9443  00134A  6ED9               	movwf	fsr2l,c
  9444  00134C  0E00               	movlw	high _butnarray
  9445  00134E  2002               	addwfc	ReadButtonState@btnnum+1,w,c
  9446  001350  6EDA               	movwf	fsr2h,c
  9447  001352  AA83               	btfss	3971,5,c	;volatile
  9448  001354  D002               	goto	i2u372_40
  9449  001356  0E01               	movlw	1
  9450  001358  D001               	goto	i2u372_46
  9451  00135A                     i2u372_40:
  9452  00135A  0E00               	movlw	0
  9453  00135C                     i2u372_46:
  9454  00135C  6EDF               	movwf	indf2,c
  9455                           
  9456                           ;IO.c: 158: break;
  9457  00135E  0012               	return	
  9458  001360                     i2l4448:
  9459                           
  9460                           ;IO.c: 160: butnarray[btnnum] = PORTBbits.RB0;
  9461  001360  0EB0               	movlw	low _butnarray
  9462  001362  2401               	addwf	ReadButtonState@btnnum,w,c
  9463  001364  6ED9               	movwf	fsr2l,c
  9464  001366  0E00               	movlw	high _butnarray
  9465  001368  2002               	addwfc	ReadButtonState@btnnum+1,w,c
  9466  00136A  6EDA               	movwf	fsr2h,c
  9467  00136C  A081               	btfss	3969,0,c	;volatile
  9468  00136E  D002               	goto	i2u373_40
  9469  001370  0E01               	movlw	1
  9470  001372  D001               	goto	i2u373_46
  9471  001374                     i2u373_40:
  9472  001374  0E00               	movlw	0
  9473  001376                     i2u373_46:
  9474  001376  6EDF               	movwf	indf2,c
  9475                           
  9476                           ;IO.c: 161: break;
  9477  001378  0012               	return	
  9478  00137A                     i2l4450:
  9479                           
  9480                           ;IO.c: 163: butnarray[btnnum] = PORTBbits.RB1;
  9481  00137A  0EB0               	movlw	low _butnarray
  9482  00137C  2401               	addwf	ReadButtonState@btnnum,w,c
  9483  00137E  6ED9               	movwf	fsr2l,c
  9484  001380  0E00               	movlw	high _butnarray
  9485  001382  2002               	addwfc	ReadButtonState@btnnum+1,w,c
  9486  001384  6EDA               	movwf	fsr2h,c
  9487  001386  A281               	btfss	3969,1,c	;volatile
  9488  001388  D002               	goto	i2u374_40
  9489  00138A  0E01               	movlw	1
  9490  00138C  D001               	goto	i2u374_46
  9491  00138E                     i2u374_40:
  9492  00138E  0E00               	movlw	0
  9493  001390                     i2u374_46:
  9494  001390  6EDF               	movwf	indf2,c
  9495                           
  9496                           ;IO.c: 164: break;
  9497  001392  0012               	return	
  9498  001394                     i2l4452:
  9499                           
  9500                           ;IO.c: 166: butnarray[btnnum] = PORTBbits.RB2;
  9501  001394  0EB0               	movlw	low _butnarray
  9502  001396  2401               	addwf	ReadButtonState@btnnum,w,c
  9503  001398  6ED9               	movwf	fsr2l,c
  9504  00139A  0E00               	movlw	high _butnarray
  9505  00139C  2002               	addwfc	ReadButtonState@btnnum+1,w,c
  9506  00139E  6EDA               	movwf	fsr2h,c
  9507  0013A0  A481               	btfss	3969,2,c	;volatile
  9508  0013A2  D002               	goto	i2u375_40
  9509  0013A4  0E01               	movlw	1
  9510  0013A6  D001               	goto	i2u375_46
  9511  0013A8                     i2u375_40:
  9512  0013A8  0E00               	movlw	0
  9513  0013AA                     i2u375_46:
  9514  0013AA  6EDF               	movwf	indf2,c
  9515                           
  9516                           ;IO.c: 167: break;
  9517  0013AC  0012               	return	
  9518  0013AE                     i2l4454:
  9519                           
  9520                           ;IO.c: 169: butnarray[btnnum] = PORTBbits.RB4;
  9521  0013AE  0EB0               	movlw	low _butnarray
  9522  0013B0  2401               	addwf	ReadButtonState@btnnum,w,c
  9523  0013B2  6ED9               	movwf	fsr2l,c
  9524  0013B4  0E00               	movlw	high _butnarray
  9525  0013B6  2002               	addwfc	ReadButtonState@btnnum+1,w,c
  9526  0013B8  6EDA               	movwf	fsr2h,c
  9527  0013BA  A881               	btfss	3969,4,c	;volatile
  9528  0013BC  D002               	goto	i2u376_40
  9529  0013BE  0E01               	movlw	1
  9530  0013C0  D001               	goto	i2u376_46
  9531  0013C2                     i2u376_40:
  9532  0013C2  0E00               	movlw	0
  9533  0013C4                     i2u376_46:
  9534  0013C4  6EDF               	movwf	indf2,c
  9535                           
  9536                           ;IO.c: 170: break;
  9537  0013C6  0012               	return	
  9538  0013C8                     i2l4456:
  9539                           
  9540                           ;IO.c: 172: butnarray[btnnum] = PORTAbits.RA0;
  9541  0013C8  0EB0               	movlw	low _butnarray
  9542  0013CA  2401               	addwf	ReadButtonState@btnnum,w,c
  9543  0013CC  6ED9               	movwf	fsr2l,c
  9544  0013CE  0E00               	movlw	high _butnarray
  9545  0013D0  2002               	addwfc	ReadButtonState@btnnum+1,w,c
  9546  0013D2  6EDA               	movwf	fsr2h,c
  9547  0013D4  A080               	btfss	3968,0,c	;volatile
  9548  0013D6  D002               	goto	i2u377_40
  9549  0013D8  0E01               	movlw	1
  9550  0013DA  D001               	goto	i2u377_46
  9551  0013DC                     i2u377_40:
  9552  0013DC  0E00               	movlw	0
  9553  0013DE                     i2u377_46:
  9554  0013DE  6EDF               	movwf	indf2,c
  9555                           
  9556                           ;IO.c: 173: break;
  9557  0013E0  0012               	return	
  9558  0013E2                     i2l4458:
  9559                           
  9560                           ;IO.c: 175: butnarray[btnnum] = PORTAbits.RA1;
  9561  0013E2  0EB0               	movlw	low _butnarray
  9562  0013E4  2401               	addwf	ReadButtonState@btnnum,w,c
  9563  0013E6  6ED9               	movwf	fsr2l,c
  9564  0013E8  0E00               	movlw	high _butnarray
  9565  0013EA  2002               	addwfc	ReadButtonState@btnnum+1,w,c
  9566  0013EC  6EDA               	movwf	fsr2h,c
  9567  0013EE  A280               	btfss	3968,1,c	;volatile
  9568  0013F0  D002               	goto	i2u378_40
  9569  0013F2  0E01               	movlw	1
  9570  0013F4  D001               	goto	i2u378_46
  9571  0013F6                     i2u378_40:
  9572  0013F6  0E00               	movlw	0
  9573  0013F8                     i2u378_46:
  9574  0013F8  6EDF               	movwf	indf2,c
  9575                           
  9576                           ;IO.c: 176: break;
  9577  0013FA  0012               	return	
  9578  0013FC                     i2l4460:
  9579                           
  9580                           ;IO.c: 178: butnarray[btnnum] = PORTAbits.RA2;
  9581  0013FC  0EB0               	movlw	low _butnarray
  9582  0013FE  2401               	addwf	ReadButtonState@btnnum,w,c
  9583  001400  6ED9               	movwf	fsr2l,c
  9584  001402  0E00               	movlw	high _butnarray
  9585  001404  2002               	addwfc	ReadButtonState@btnnum+1,w,c
  9586  001406  6EDA               	movwf	fsr2h,c
  9587  001408  A480               	btfss	3968,2,c	;volatile
  9588  00140A  D002               	goto	i2u379_40
  9589  00140C  0E01               	movlw	1
  9590  00140E  D001               	goto	i2u379_46
  9591  001410                     i2u379_40:
  9592  001410  0E00               	movlw	0
  9593  001412                     i2u379_46:
  9594  001412  6EDF               	movwf	indf2,c
  9595                           
  9596                           ;IO.c: 181: }
  9597                           
  9598                           ;IO.c: 179: break;
  9599  001414  0012               	return	
  9600  001416                     i2l4464:
  9601  001416  C001  F003         	movff	ReadButtonState@btnnum,??_ReadButtonState
  9602  00141A  C002  F004         	movff	ReadButtonState@btnnum+1,??_ReadButtonState+1
  9603                           
  9604                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9605                           ; Switch size 1, requested type "space"
  9606                           ; Number of cases is 1, Range of values is 0 to 0
  9607                           ; switch strategies available:
  9608                           ; Name         Instructions Cycles
  9609                           ; simple_byte            4     3 (average)
  9610                           ;	Chosen strategy is simple_byte
  9611  00141E  5004               	movf	??_ReadButtonState+1,w,c
  9612  001420  0A00               	xorlw	0	; case 0
  9613  001422  A4D8               	btfss	status,2,c
  9614  001424  0012               	return	
  9615                           
  9616                           ; Switch size 1, requested type "space"
  9617                           ; Number of cases is 8, Range of values is 0 to 7
  9618                           ; switch strategies available:
  9619                           ; Name         Instructions Cycles
  9620                           ; simple_byte           25    13 (average)
  9621                           ;	Chosen strategy is simple_byte
  9622  001426  5003               	movf	??_ReadButtonState,w,c
  9623  001428  0A00               	xorlw	0	; case 0
  9624  00142A  B4D8               	btfsc	status,2,c
  9625  00142C  D78C               	goto	i2l4446
  9626  00142E  0A01               	xorlw	1	; case 1
  9627  001430  B4D8               	btfsc	status,2,c
  9628  001432  D796               	goto	i2l4448
  9629  001434  0A03               	xorlw	3	; case 2
  9630  001436  B4D8               	btfsc	status,2,c
  9631  001438  D7A0               	goto	i2l4450
  9632  00143A  0A01               	xorlw	1	; case 3
  9633  00143C  B4D8               	btfsc	status,2,c
  9634  00143E  D7AA               	goto	i2l4452
  9635  001440  0A07               	xorlw	7	; case 4
  9636  001442  B4D8               	btfsc	status,2,c
  9637  001444  D7B4               	goto	i2l4454
  9638  001446  0A01               	xorlw	1	; case 5
  9639  001448  B4D8               	btfsc	status,2,c
  9640  00144A  D7BE               	goto	i2l4456
  9641  00144C  0A03               	xorlw	3	; case 6
  9642  00144E  B4D8               	btfsc	status,2,c
  9643  001450  D7C8               	goto	i2l4458
  9644  001452  0A01               	xorlw	1	; case 7
  9645  001454  A4D8               	btfss	status,2,c
  9646  001456  0012               	return	
  9647  001458  D7D1               	goto	i2l4460
  9648  00145A                     __end_of_ReadButtonState:
  9649                           	opt stack 0
  9650                           tosu	equ	0xFFF
  9651                           tosh	equ	0xFFE
  9652                           tosl	equ	0xFFD
  9653                           pclatu	equ	0xFFB
  9654                           pclath	equ	0xFFA
  9655                           tblptru	equ	0xFF8
  9656                           tblptrh	equ	0xFF7
  9657                           tblptrl	equ	0xFF6
  9658                           tablat	equ	0xFF5
  9659                           prodh	equ	0xFF4
  9660                           prodl	equ	0xFF3
  9661                           intcon	equ	0xFF2
  9662                           intcon2	equ	0xFF1
  9663                           postinc0	equ	0xFEE
  9664                           fsr0h	equ	0xFEA
  9665                           fsr0l	equ	0xFE9
  9666                           wreg	equ	0xFE8
  9667                           fsr1h	equ	0xFE2
  9668                           fsr1l	equ	0xFE1
  9669                           indf2	equ	0xFDF
  9670                           postinc2	equ	0xFDE
  9671                           postdec2	equ	0xFDD
  9672                           plusw2	equ	0xFDB
  9673                           fsr2h	equ	0xFDA
  9674                           fsr2l	equ	0xFD9
  9675                           status	equ	0xFD8
  9676                           
  9677 ;; *************** function _I2C1_ISR *****************
  9678 ;; Defined at:
  9679 ;;		line 186 in file "mcc_generated_files/i2c1.c"
  9680 ;; Parameters:    Size  Location     Type
  9681 ;;		None
  9682 ;; Auto vars:     Size  Location     Type
  9683 ;;		None
  9684 ;; Return value:  Size  Location     Type
  9685 ;;		None               void
  9686 ;; Registers used:
  9687 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9688 ;; Tracked objects:
  9689 ;;		On entry : 0/0
  9690 ;;		On exit  : 0/0
  9691 ;;		Unchanged: 0/0
  9692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9693 ;;      Params:         0       0       0       0       0       0       0
  9694 ;;      Locals:         0       0       0       0       0       0       0
  9695 ;;      Temps:          2       0       0       0       0       0       0
  9696 ;;      Totals:         2       0       0       0       0       0       0
  9697 ;;Total ram usage:        2 bytes
  9698 ;; Hardware stack levels used:    1
  9699 ;; Hardware stack levels required when called:    1
  9700 ;; This function calls:
  9701 ;;		_I2C1_FunctionComplete
  9702 ;;		_I2C1_Stop
  9703 ;; This function is called by:
  9704 ;;		_INTERRUPT_InterruptManager
  9705 ;; This function uses a non-reentrant model
  9706 ;;
  9707                           
  9708                           	psect	text48
  9709  000778                     __ptext48:
  9710                           	opt stack 0
  9711  000778                     _I2C1_ISR:
  9712                           	opt stack 22
  9713                           
  9714                           ;i2c1.c: 189: static uint8_t *pi2c_buf_ptr;
  9715                           ;i2c1.c: 190: static uint16_t i2c_address = 0;
  9716                           ;i2c1.c: 191: static int i2c_bytes_left = 0;
  9717                           ;i2c1.c: 192: static uint8_t i2c_10bit_address_restart = 0;
  9718                           ;i2c1.c: 194: PIR1bits.SSP1IF = 0;
  9719                           
  9720                           ;incstack = 0
  9721  000778  969E               	bcf	3998,3,c	;volatile
  9722                           
  9723                           ;i2c1.c: 198: if(SSP1CON1bits.WCOL)
  9724  00077A  AEC6               	btfss	4038,7,c	;volatile
  9725  00077C  D141               	goto	i2l4866
  9726                           
  9727                           ;i2c1.c: 199: {
  9728                           ;i2c1.c: 201: SSP1CON1bits.WCOL = 0;
  9729  00077E  9EC6               	bcf	4038,7,c	;volatile
  9730                           
  9731                           ;i2c1.c: 202: i2c1_state = S_MASTER_IDLE;
  9732  000780  0E00               	movlw	0
  9733  000782  6E39               	movwf	_i2c1_state,c
  9734                           
  9735                           ;i2c1.c: 203: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
  9736  000784  EE20 F003          	lfsr	2,3
  9737  000788  502C               	movf	_p_i2c1_current,w,c
  9738  00078A  26D9               	addwf	fsr2l,f,c
  9739  00078C  502D               	movf	_p_i2c1_current+1,w,c
  9740  00078E  22DA               	addwfc	fsr2h,f,c
  9741  000790  CFDE F004          	movff	postinc2,??_I2C1_ISR
  9742  000794  CFDD F005          	movff	postdec2,??_I2C1_ISR+1
  9743  000798  C004  FFD9         	movff	??_I2C1_ISR,fsr2l
  9744  00079C  C005  FFDA         	movff	??_I2C1_ISR+1,fsr2h
  9745  0007A0  0E01               	movlw	1
  9746  0007A2  6EDF               	movwf	indf2,c
  9747                           
  9748                           ;i2c1.c: 206: p_i2c1_current = (0);
  9749  0007A4  0E00               	movlw	0
  9750  0007A6  6E2C               	movwf	_p_i2c1_current,c
  9751  0007A8  0E00               	movlw	0
  9752  0007AA  6E2D               	movwf	_p_i2c1_current+1,c
  9753                           
  9754                           ;i2c1.c: 208: return;
  9755  0007AC  0012               	return	
  9756  0007AE                     i2l60:
  9757                           
  9758                           ;i2c1.c: 216: if(i2c1_object.trStatus.s.empty != 1)
  9759  0007AE  0100               	movlb	0	; () banked
  9760  0007B0  B3BC               	btfsc	(_i2c1_object+4)& (0+255),1,b
  9761  0007B2  0012               	return	
  9762                           
  9763                           ; BSR set to: 0
  9764                           ;i2c1.c: 217: {
  9765                           ;i2c1.c: 219: p_i2c1_current = i2c1_object.pTrHead;
  9766  0007B4  C0BA  F02C         	movff	_i2c1_object+2,_p_i2c1_current
  9767  0007B8  C0BB  F02D         	movff	_i2c1_object+3,_p_i2c1_current+1
  9768                           
  9769                           ; BSR set to: 0
  9770                           ;i2c1.c: 220: i2c1_trb_count = i2c1_object.pTrHead->count;
  9771  0007BC  C0BA  FFD9         	movff	_i2c1_object+2,fsr2l
  9772  0007C0  C0BB  FFDA         	movff	_i2c1_object+3,fsr2h
  9773  0007C4  50DF               	movf	indf2,w,c
  9774  0007C6  6E04               	movwf	??_I2C1_ISR& (0+255),c
  9775  0007C8  5004               	movf	??_I2C1_ISR,w,c
  9776  0007CA  6E2A               	movwf	_i2c1_trb_count,c
  9777  0007CC  6A2B               	clrf	_i2c1_trb_count+1,c
  9778                           
  9779                           ; BSR set to: 0
  9780                           ;i2c1.c: 221: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
  9781  0007CE  0100               	movlb	0	; () banked
  9782  0007D0  EE20 F001          	lfsr	2,1
  9783  0007D4  51BA               	movf	(_i2c1_object+2)& (0+255),w,b
  9784  0007D6  26D9               	addwf	fsr2l,f,c
  9785  0007D8  51BB               	movf	(_i2c1_object+3)& (0+255),w,b
  9786  0007DA  22DA               	addwfc	fsr2h,f,c
  9787  0007DC  CFDE F02E          	movff	postinc2,_p_i2c1_trb_current
  9788  0007E0  CFDD F02F          	movff	postdec2,_p_i2c1_trb_current+1
  9789                           
  9790                           ;i2c1.c: 223: i2c1_object.pTrHead++;
  9791  0007E4  0E05               	movlw	5
  9792  0007E6  0100               	movlb	0	; () banked
  9793  0007E8  27BA               	addwf	(_i2c1_object+2)& (0+255),f,b
  9794  0007EA  0E00               	movlw	0
  9795  0007EC  23BB               	addwfc	(_i2c1_object+3)& (0+255),f,b
  9796                           
  9797                           ;i2c1.c: 226: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
  9798  0007EE  0EEE               	movlw	low (_i2c1_tr_queue+5)
  9799  0007F0  0100               	movlb	0	; () banked
  9800  0007F2  19BA               	xorwf	(_i2c1_object+2)& (0+255),w,b
  9801  0007F4  E10B               	bnz	i2l4760
  9802  0007F6  0E00               	movlw	high (_i2c1_tr_queue+5)
  9803  0007F8  0100               	movlb	0	; () banked
  9804  0007FA  19BB               	xorwf	(_i2c1_object+3)& (0+255),w,b
  9805  0007FC  A4D8               	btfss	status,2,c
  9806  0007FE  D006               	goto	i2l4760
  9807                           
  9808                           ; BSR set to: 0
  9809                           ;i2c1.c: 227: {
  9810                           ;i2c1.c: 229: i2c1_object.pTrHead = i2c1_tr_queue;
  9811  000800  0EE9               	movlw	low _i2c1_tr_queue
  9812  000802  0100               	movlb	0	; () banked
  9813  000804  6FBA               	movwf	(_i2c1_object+2)& (0+255),b
  9814  000806  0E00               	movlw	high _i2c1_tr_queue
  9815  000808  0100               	movlb	0	; () banked
  9816  00080A  6FBB               	movwf	(_i2c1_object+3)& (0+255),b
  9817  00080C                     i2l4760:
  9818                           
  9819                           ; BSR set to: 0
  9820                           ;i2c1.c: 230: }
  9821                           ;i2c1.c: 234: i2c1_object.trStatus.s.full = 0;
  9822  00080C  0100               	movlb	0	; () banked
  9823  00080E  91BC               	bcf	(_i2c1_object+4)& (0+255),0,b
  9824                           
  9825                           ;i2c1.c: 237: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
  9826  000810  0100               	movlb	0	; () banked
  9827  000812  51B8               	movf	_i2c1_object& (0+255),w,b
  9828  000814  0100               	movlb	0	; () banked
  9829  000816  19BA               	xorwf	(_i2c1_object+2)& (0+255),w,b
  9830  000818  E108               	bnz	i2l63
  9831  00081A  0100               	movlb	0	; () banked
  9832  00081C  51B9               	movf	(_i2c1_object+1)& (0+255),w,b
  9833  00081E  0100               	movlb	0	; () banked
  9834  000820  19BB               	xorwf	(_i2c1_object+3)& (0+255),w,b
  9835  000822  A4D8               	btfss	status,2,c
  9836  000824  D002               	goto	i2l63
  9837                           
  9838                           ; BSR set to: 0
  9839                           ;i2c1.c: 238: {
  9840                           ;i2c1.c: 240: i2c1_object.trStatus.s.empty = 1;
  9841  000826  0100               	movlb	0	; () banked
  9842  000828  83BC               	bsf	(_i2c1_object+4)& (0+255),1,b
  9843  00082A                     i2l63:
  9844                           
  9845                           ; BSR set to: 0
  9846                           ;i2c1.c: 241: }
  9847                           ;i2c1.c: 244: SSP1CON2bits.SEN = 1;
  9848  00082A  80C5               	bsf	4037,0,c	;volatile
  9849                           
  9850                           ; BSR set to: 0
  9851                           ;i2c1.c: 247: i2c1_state = S_MASTER_SEND_ADDR;
  9852  00082C  0E02               	movlw	2
  9853  00082E  6E39               	movwf	_i2c1_state,c
  9854                           
  9855                           ; BSR set to: 0
  9856                           ;i2c1.c: 248: }
  9857                           ;i2c1.c: 250: break;
  9858  000830  0012               	return	
  9859  000832                     i2l65:
  9860                           
  9861                           ;i2c1.c: 257: SSP1CON2bits.RSEN = 1;
  9862  000832  82C5               	bsf	4037,1,c	;volatile
  9863                           
  9864                           ;i2c1.c: 260: i2c1_state = S_MASTER_SEND_ADDR;
  9865  000834  0E02               	movlw	2
  9866  000836  6E39               	movwf	_i2c1_state,c
  9867                           
  9868                           ;i2c1.c: 262: break;
  9869  000838  0012               	return	
  9870  00083A                     i2l66:
  9871                           
  9872                           ;i2c1.c: 266: if(SSP1CON2bits.ACKSTAT)
  9873  00083A  ACC5               	btfss	4037,6,c	;volatile
  9874  00083C  D006               	goto	i2l4772
  9875                           
  9876                           ;i2c1.c: 267: {
  9877                           ;i2c1.c: 268: i2c1_object.i2cErrors++;
  9878  00083E  0100               	movlb	0	; () banked
  9879  000840  2BBE               	incf	(_i2c1_object+6)& (0+255),f,b
  9880                           
  9881                           ; BSR set to: 0
  9882                           ;i2c1.c: 269: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
  9883  000842  0E04               	movlw	4
  9884  000844  EC16  F00F         	call	_I2C1_Stop
  9885                           
  9886                           ;i2c1.c: 270: }
  9887  000848  0012               	return	
  9888  00084A                     i2l4772:
  9889                           
  9890                           ;i2c1.c: 271: else
  9891                           ;i2c1.c: 272: {
  9892                           ;i2c1.c: 274: SSP1BUF = (i2c_address >> 1) & 0x00FF;
  9893  00084A  90D8               	bcf	status,0,c
  9894  00084C  3041               	rrcf	I2C1_ISR@i2c_address+1,w,c
  9895  00084E  6E05               	movwf	(??_I2C1_ISR+1)& (0+255),c
  9896  000850  3040               	rrcf	I2C1_ISR@i2c_address,w,c
  9897  000852  6E04               	movwf	??_I2C1_ISR& (0+255),c
  9898  000854  5004               	movf	??_I2C1_ISR,w,c
  9899  000856  6EC9               	movwf	4041,c	;volatile
  9900                           
  9901                           ;i2c1.c: 277: if(i2c_address & 0x01)
  9902  000858  A040               	btfss	I2C1_ISR@i2c_address,0,c
  9903  00085A  D003               	goto	i2l4778
  9904                           
  9905                           ;i2c1.c: 278: {
  9906                           ;i2c1.c: 281: i2c1_state = S_MASTER_10BIT_RESTART;
  9907  00085C  0E0B               	movlw	11
  9908  00085E  6E39               	movwf	_i2c1_state,c
  9909                           
  9910                           ;i2c1.c: 282: }
  9911  000860  0012               	return	
  9912  000862                     i2l4778:
  9913                           
  9914                           ;i2c1.c: 283: else
  9915                           ;i2c1.c: 284: {
  9916                           ;i2c1.c: 286: i2c1_state = S_MASTER_SEND_DATA;
  9917  000862  0E03               	movlw	3
  9918  000864  6E39               	movwf	_i2c1_state,c
  9919                           
  9920                           ;i2c1.c: 287: }
  9921                           ;i2c1.c: 288: }
  9922                           ;i2c1.c: 290: break;
  9923  000866  0012               	return	
  9924  000868                     i2l71:
  9925                           
  9926                           ;i2c1.c: 294: if(SSP1CON2bits.ACKSTAT)
  9927  000868  ACC5               	btfss	4037,6,c	;volatile
  9928  00086A  D006               	goto	i2l72
  9929                           
  9930                           ;i2c1.c: 295: {
  9931                           ;i2c1.c: 296: i2c1_object.i2cErrors++;
  9932  00086C  0100               	movlb	0	; () banked
  9933  00086E  2BBE               	incf	(_i2c1_object+6)& (0+255),f,b
  9934                           
  9935                           ; BSR set to: 0
  9936                           ;i2c1.c: 297: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
  9937  000870  0E04               	movlw	4
  9938  000872  EC16  F00F         	call	_I2C1_Stop
  9939                           
  9940                           ;i2c1.c: 298: }
  9941  000876  0012               	return	
  9942  000878                     i2l72:
  9943                           
  9944                           ;i2c1.c: 299: else
  9945                           ;i2c1.c: 300: {
  9946                           ;i2c1.c: 303: SSP1CON2bits.RSEN = 1;
  9947  000878  82C5               	bsf	4037,1,c	;volatile
  9948                           
  9949                           ;i2c1.c: 307: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
  9950  00087A  C040  F004         	movff	I2C1_ISR@i2c_address,??_I2C1_ISR
  9951  00087E  C041  F005         	movff	I2C1_ISR@i2c_address+1,??_I2C1_ISR+1
  9952  000882  C005  F004         	movff	??_I2C1_ISR+1,??_I2C1_ISR
  9953  000886  6A05               	clrf	??_I2C1_ISR+1,c
  9954  000888  0E06               	movlw	6
  9955  00088A  1604               	andwf	??_I2C1_ISR,f,c
  9956  00088C  0E00               	movlw	0
  9957  00088E  1605               	andwf	??_I2C1_ISR+1,f,c
  9958  000890  0EF0               	movlw	240
  9959  000892  1004               	iorwf	??_I2C1_ISR,w,c
  9960  000894  6E40               	movwf	I2C1_ISR@i2c_address,c
  9961  000896  5005               	movf	??_I2C1_ISR+1,w,c
  9962  000898  6E41               	movwf	I2C1_ISR@i2c_address+1,c
  9963                           
  9964                           ;i2c1.c: 310: i2c_address |= 0x0001;
  9965  00089A  8040               	bsf	I2C1_ISR@i2c_address,0,c
  9966                           
  9967                           ;i2c1.c: 313: i2c_10bit_address_restart = 1;
  9968  00089C  0E01               	movlw	1
  9969  00089E  6E36               	movwf	I2C1_ISR@i2c_10bit_address_restart,c
  9970                           
  9971                           ;i2c1.c: 316: i2c1_state = S_MASTER_SEND_ADDR;
  9972  0008A0  0E02               	movlw	2
  9973  0008A2  6E39               	movwf	_i2c1_state,c
  9974                           
  9975                           ;i2c1.c: 317: }
  9976                           ;i2c1.c: 319: break;
  9977  0008A4  0012               	return	
  9978  0008A6                     i2l4792:
  9979                           
  9980                           ;i2c1.c: 334: if(i2c_10bit_address_restart != 1)
  9981  0008A6  0436               	decf	I2C1_ISR@i2c_10bit_address_restart,w,c
  9982  0008A8  B4D8               	btfsc	status,2,c
  9983  0008AA  D01E               	goto	i2l76
  9984                           
  9985                           ;i2c1.c: 335: {
  9986                           ;i2c1.c: 337: i2c_address = p_i2c1_trb_current->address;
  9987  0008AC  C02E  FFD9         	movff	_p_i2c1_trb_current,fsr2l
  9988  0008B0  C02F  FFDA         	movff	_p_i2c1_trb_current+1,fsr2h
  9989  0008B4  CFDE F040          	movff	postinc2,I2C1_ISR@i2c_address
  9990  0008B8  CFDD F041          	movff	postdec2,I2C1_ISR@i2c_address+1
  9991                           
  9992                           ;i2c1.c: 338: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
  9993  0008BC  EE20 F003          	lfsr	2,3
  9994  0008C0  502E               	movf	_p_i2c1_trb_current,w,c
  9995  0008C2  26D9               	addwf	fsr2l,f,c
  9996  0008C4  502F               	movf	_p_i2c1_trb_current+1,w,c
  9997  0008C6  22DA               	addwfc	fsr2h,f,c
  9998  0008C8  CFDE F026          	movff	postinc2,I2C1_ISR@pi2c_buf_ptr
  9999  0008CC  CFDD F027          	movff	postdec2,I2C1_ISR@pi2c_buf_ptr+1
 10000                           
 10001                           ;i2c1.c: 339: i2c_bytes_left = p_i2c1_trb_current->length;
 10002  0008D0  EE20 F002          	lfsr	2,2
 10003  0008D4  502E               	movf	_p_i2c1_trb_current,w,c
 10004  0008D6  26D9               	addwf	fsr2l,f,c
 10005  0008D8  502F               	movf	_p_i2c1_trb_current+1,w,c
 10006  0008DA  22DA               	addwfc	fsr2h,f,c
 10007  0008DC  50DF               	movf	indf2,w,c
 10008  0008DE  6E04               	movwf	??_I2C1_ISR& (0+255),c
 10009  0008E0  5004               	movf	??_I2C1_ISR,w,c
 10010  0008E2  0100               	movlb	0	; () banked
 10011  0008E4  6FBF               	movwf	I2C1_ISR@i2c_bytes_left& (0+255),b
 10012  0008E6  6BC0               	clrf	(I2C1_ISR@i2c_bytes_left+1)& (0+255),b
 10013  0008E8                     i2l76:
 10014                           
 10015                           ;i2c1.c: 362: else
 10016                           ;i2c1.c: 363: {
 10017                           ;i2c1.c: 365: SSP1BUF = i2c_address;
 10018  0008E8  C040  FFC9         	movff	I2C1_ISR@i2c_address,4041	;volatile
 10019                           
 10020                           ;i2c1.c: 366: if(i2c_address & 0x01)
 10021  0008EC  A040               	btfss	I2C1_ISR@i2c_address,0,c
 10022  0008EE  D003               	goto	i2l4812
 10023                           
 10024                           ;i2c1.c: 367: {
 10025                           ;i2c1.c: 369: i2c1_state = S_MASTER_ACK_ADDR;
 10026  0008F0  0E05               	movlw	5
 10027  0008F2  6E39               	movwf	_i2c1_state,c
 10028                           
 10029                           ;i2c1.c: 370: }
 10030  0008F4  0012               	return	
 10031  0008F6                     i2l4812:
 10032                           
 10033                           ;i2c1.c: 371: else
 10034                           ;i2c1.c: 372: {
 10035                           ;i2c1.c: 374: i2c1_state = S_MASTER_SEND_DATA;
 10036  0008F6  0E03               	movlw	3
 10037  0008F8  6E39               	movwf	_i2c1_state,c
 10038                           
 10039                           ;i2c1.c: 375: }
 10040                           ;i2c1.c: 376: }
 10041                           ;i2c1.c: 377: break;
 10042  0008FA  0012               	return	
 10043  0008FC                     i2l82:
 10044                           
 10045                           ;i2c1.c: 382: if(SSP1CON2bits.ACKSTAT)
 10046  0008FC  ACC5               	btfss	4037,6,c	;volatile
 10047  0008FE  D007               	goto	i2l4820
 10048                           
 10049                           ;i2c1.c: 383: {
 10050                           ;i2c1.c: 385: i2c1_object.i2cErrors++;
 10051  000900  0100               	movlb	0	; () banked
 10052  000902  2BBE               	incf	(_i2c1_object+6)& (0+255),f,b
 10053                           
 10054                           ; BSR set to: 0
 10055                           ;i2c1.c: 388: SSP1CON2bits.ACKSTAT = 0;
 10056  000904  9CC5               	bcf	4037,6,c	;volatile
 10057                           
 10058                           ; BSR set to: 0
 10059                           ;i2c1.c: 391: I2C1_Stop(I2C1_DATA_NO_ACK);
 10060  000906  0E05               	movlw	5
 10061  000908  EC16  F00F         	call	_I2C1_Stop
 10062                           
 10063                           ;i2c1.c: 393: }
 10064  00090C  0012               	return	
 10065  00090E                     i2l4820:
 10066                           
 10067                           ;i2c1.c: 394: else
 10068                           ;i2c1.c: 395: {
 10069                           ;i2c1.c: 397: if(i2c_bytes_left-- == 0U)
 10070  00090E  0100               	movlb	0	; () banked
 10071  000910  51BF               	movf	I2C1_ISR@i2c_bytes_left& (0+255),w,b
 10072  000912  6E04               	movwf	??_I2C1_ISR& (0+255),c
 10073  000914  0100               	movlb	0	; () banked
 10074  000916  51C0               	movf	(I2C1_ISR@i2c_bytes_left+1)& (0+255),w,b
 10075  000918  6E05               	movwf	(??_I2C1_ISR+1)& (0+255),c
 10076  00091A  0E01               	movlw	1
 10077  00091C  0100               	movlb	0	; () banked
 10078  00091E  5FBF               	subwf	I2C1_ISR@i2c_bytes_left& (0+255),f,b
 10079  000920  0E00               	movlw	0
 10080  000922  0100               	movlb	0	; () banked
 10081  000924  5BC0               	subwfb	(I2C1_ISR@i2c_bytes_left+1)& (0+255),f,b
 10082  000926  5004               	movf	??_I2C1_ISR,w,c
 10083  000928  1005               	iorwf	??_I2C1_ISR+1,w,c
 10084  00092A  A4D8               	btfss	status,2,c
 10085  00092C  D013               	goto	i2l4828
 10086                           
 10087                           ; BSR set to: 0
 10088                           ;i2c1.c: 398: {
 10089                           ;i2c1.c: 402: p_i2c1_trb_current++;
 10090  00092E  0E05               	movlw	5
 10091  000930  262E               	addwf	_p_i2c1_trb_current,f,c
 10092  000932  0E00               	movlw	0
 10093  000934  222F               	addwfc	_p_i2c1_trb_current+1,f,c
 10094                           
 10095                           ;i2c1.c: 405: if(--i2c1_trb_count == 0)
 10096  000936  062A               	decf	_i2c1_trb_count,f,c
 10097  000938  A0D8               	btfss	status,0,c
 10098  00093A  062B               	decf	_i2c1_trb_count+1,f,c
 10099  00093C  502A               	movf	_i2c1_trb_count,w,c
 10100  00093E  102B               	iorwf	_i2c1_trb_count+1,w,c
 10101  000940  A4D8               	btfss	status,2,c
 10102  000942  D004               	goto	i2l86
 10103                           
 10104                           ; BSR set to: 0
 10105                           ;i2c1.c: 406: {
 10106                           ;i2c1.c: 407: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 10107  000944  0E00               	movlw	0
 10108  000946  EC16  F00F         	call	_I2C1_Stop
 10109                           
 10110                           ;i2c1.c: 408: }
 10111  00094A  0012               	return	
 10112  00094C                     i2l86:
 10113                           
 10114                           ; BSR set to: 0
 10115                           ;i2c1.c: 409: else
 10116                           ;i2c1.c: 410: {
 10117                           ;i2c1.c: 417: SSP1CON2bits.RSEN = 1;
 10118  00094C  82C5               	bsf	4037,1,c	;volatile
 10119                           
 10120                           ; BSR set to: 0
 10121                           ;i2c1.c: 420: i2c1_state = S_MASTER_SEND_ADDR;
 10122  00094E  0E02               	movlw	2
 10123  000950  6E39               	movwf	_i2c1_state,c
 10124                           
 10125                           ; BSR set to: 0
 10126                           ;i2c1.c: 422: }
 10127                           ;i2c1.c: 423: }
 10128  000952  0012               	return	
 10129  000954                     i2l4828:
 10130                           
 10131                           ; BSR set to: 0
 10132                           ;i2c1.c: 424: else
 10133                           ;i2c1.c: 425: {
 10134                           ;i2c1.c: 427: SSP1BUF = *pi2c_buf_ptr++;
 10135  000954  C026  FFF6         	movff	I2C1_ISR@pi2c_buf_ptr,tblptrl
 10136  000958  C027  FFF7         	movff	I2C1_ISR@pi2c_buf_ptr+1,tblptrh
 10137  00095C  6AF8               	clrf	tblptru,c
 10138  00095E  0E05               	movlw	(high __ramtop+-1)
 10139  000960  64F7               	cpfsgt	tblptrh,c
 10140  000962  D003               	bra	i2u460_47
 10141  000964  0008               	tblrd		*
 10142  000966  50F5               	movf	tablat,w,c
 10143  000968  D005               	bra	i2u460_40
 10144  00096A                     i2u460_47:
 10145  00096A  CFF6 FFE9          	movff	tblptrl,fsr0l
 10146  00096E  CFF7 FFEA          	movff	tblptrh,fsr0h
 10147  000972  50EF               	movf	indf0,w,c
 10148  000974                     i2u460_40:
 10149  000974  6EC9               	movwf	4041,c	;volatile
 10150  000976  4A26               	infsnz	I2C1_ISR@pi2c_buf_ptr,f,c
 10151  000978  2A27               	incf	I2C1_ISR@pi2c_buf_ptr+1,f,c
 10152                           
 10153                           ;i2c1.c: 428: }
 10154                           ;i2c1.c: 429: }
 10155                           ;i2c1.c: 430: break;
 10156  00097A  0012               	return	
 10157  00097C                     i2l89:
 10158                           
 10159                           ;i2c1.c: 435: if(SSP1CON2bits.ACKSTAT)
 10160  00097C  ACC5               	btfss	4037,6,c	;volatile
 10161  00097E  D007               	goto	i2l90
 10162                           
 10163                           ;i2c1.c: 436: {
 10164                           ;i2c1.c: 439: i2c1_object.i2cErrors++;
 10165  000980  0100               	movlb	0	; () banked
 10166  000982  2BBE               	incf	(_i2c1_object+6)& (0+255),f,b
 10167                           
 10168                           ; BSR set to: 0
 10169                           ;i2c1.c: 442: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 10170  000984  0E04               	movlw	4
 10171  000986  EC16  F00F         	call	_I2C1_Stop
 10172                           
 10173                           ;i2c1.c: 445: SSP1CON2bits.ACKSTAT = 0;
 10174  00098A  9CC5               	bcf	4037,6,c	;volatile
 10175                           
 10176                           ;i2c1.c: 446: }
 10177  00098C  0012               	return	
 10178  00098E                     i2l90:
 10179                           
 10180                           ;i2c1.c: 447: else
 10181                           ;i2c1.c: 448: {
 10182                           ;i2c1.c: 449: SSP1CON2bits.RCEN = 1;
 10183  00098E  86C5               	bsf	4037,3,c	;volatile
 10184                           
 10185                           ;i2c1.c: 450: i2c1_state = S_MASTER_ACK_RCV_DATA;
 10186  000990  0E08               	movlw	8
 10187  000992  6E39               	movwf	_i2c1_state,c
 10188                           
 10189                           ;i2c1.c: 451: }
 10190                           ;i2c1.c: 452: break;
 10191  000994  0012               	return	
 10192  000996                     i2l4840:
 10193                           
 10194                           ;i2c1.c: 459: i2c1_state = S_MASTER_ACK_RCV_DATA;
 10195  000996  0E08               	movlw	8
 10196  000998  6E39               	movwf	_i2c1_state,c
 10197                           
 10198                           ;i2c1.c: 462: SSP1CON2bits.RCEN = 1;
 10199  00099A  86C5               	bsf	4037,3,c	;volatile
 10200                           
 10201                           ;i2c1.c: 464: break;
 10202  00099C  0012               	return	
 10203  00099E                     i2l4844:
 10204                           
 10205                           ;i2c1.c: 469: *pi2c_buf_ptr++ = SSP1BUF;
 10206  00099E  C026  FFF6         	movff	I2C1_ISR@pi2c_buf_ptr,tblptrl
 10207  0009A2  C027  FFF7         	movff	I2C1_ISR@pi2c_buf_ptr+1,tblptrh
 10208  0009A6  6AF8               	clrf	tblptru,c
 10209  0009A8  0E05               	movlw	(high __ramtop+-1)
 10210  0009AA  64F7               	cpfsgt	tblptrh,c
 10211  0009AC  D004               	bra	i2u462_47
 10212  0009AE  CFC9 FFF5          	movff	4041,tablat	;volatile
 10213  0009B2  000C               	tblwt		*
 10214  0009B4  D006               	bra	i2u462_40
 10215  0009B6                     i2u462_47:
 10216  0009B6  CFF6 FFE9          	movff	tblptrl,fsr0l
 10217  0009BA  CFF7 FFEA          	movff	tblptrh,fsr0h
 10218  0009BE  CFC9 FFEF          	movff	4041,indf0	;volatile
 10219  0009C2                     i2u462_40:
 10220  0009C2  4A26               	infsnz	I2C1_ISR@pi2c_buf_ptr,f,c
 10221  0009C4  2A27               	incf	I2C1_ISR@pi2c_buf_ptr+1,f,c
 10222                           
 10223                           ;i2c1.c: 472: if(--i2c_bytes_left)
 10224  0009C6  0100               	movlb	0	; () banked
 10225  0009C8  07BF               	decf	I2C1_ISR@i2c_bytes_left& (0+255),f,b
 10226  0009CA  A0D8               	btfss	status,0,c
 10227  0009CC  07C0               	decf	(I2C1_ISR@i2c_bytes_left+1)& (0+255),f,b
 10228  0009CE  0100               	movlb	0	; () banked
 10229  0009D0  51BF               	movf	I2C1_ISR@i2c_bytes_left& (0+255),w,b
 10230  0009D2  0100               	movlb	0	; () banked
 10231  0009D4  11C0               	iorwf	(I2C1_ISR@i2c_bytes_left+1)& (0+255),w,b
 10232  0009D6  B4D8               	btfsc	status,2,c
 10233  0009D8  D004               	goto	i2l94
 10234                           
 10235                           ; BSR set to: 0
 10236                           ;i2c1.c: 473: {
 10237                           ;i2c1.c: 479: SSP1CON2bits.ACKDT = 0;
 10238  0009DA  9AC5               	bcf	4037,5,c	;volatile
 10239                           
 10240                           ; BSR set to: 0
 10241                           ;i2c1.c: 482: i2c1_state = S_MASTER_RCV_DATA;
 10242  0009DC  0E06               	movlw	6
 10243  0009DE  6E39               	movwf	_i2c1_state,c
 10244                           
 10245                           ;i2c1.c: 483: }
 10246  0009E0  D003               	goto	i2l4856
 10247  0009E2                     i2l94:
 10248                           
 10249                           ; BSR set to: 0
 10250                           ;i2c1.c: 484: else
 10251                           ;i2c1.c: 485: {
 10252                           ;i2c1.c: 489: SSP1CON2bits.ACKDT = 1;
 10253  0009E2  8AC5               	bsf	4037,5,c	;volatile
 10254                           
 10255                           ; BSR set to: 0
 10256                           ;i2c1.c: 491: I2C1_FunctionComplete();
 10257  0009E4  EC66  F010         	call	_I2C1_FunctionComplete	;wreg free
 10258  0009E8                     i2l4856:
 10259                           
 10260                           ;i2c1.c: 492: }
 10261                           ;i2c1.c: 495: SSP1CON2bits.ACKEN = 1;
 10262  0009E8  88C5               	bsf	4037,4,c	;volatile
 10263                           
 10264                           ;i2c1.c: 496: break;
 10265  0009EA  0012               	return	
 10266  0009EC                     i2l4858:
 10267                           
 10268                           ;i2c1.c: 499: case S_MASTER_SEND_STOP:
 10269                           ;i2c1.c: 502: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 10270  0009EC  0E00               	movlw	0
 10271  0009EE  EC16  F00F         	call	_I2C1_Stop
 10272                           
 10273                           ;i2c1.c: 503: break;
 10274  0009F2  0012               	return	
 10275  0009F4                     i2l4860:
 10276                           
 10277                           ;i2c1.c: 509: i2c1_object.i2cErrors++;
 10278  0009F4  0100               	movlb	0	; () banked
 10279  0009F6  2BBE               	incf	(_i2c1_object+6)& (0+255),f,b
 10280                           
 10281                           ; BSR set to: 0
 10282                           ;i2c1.c: 510: I2C1_Stop(I2C1_LOST_STATE);
 10283  0009F8  0E06               	movlw	6
 10284  0009FA  EC16  F00F         	call	_I2C1_Stop
 10285                           
 10286                           ;i2c1.c: 513: }
 10287                           
 10288                           ;i2c1.c: 511: break;
 10289  0009FE  0012               	return	
 10290  000A00                     i2l4866:
 10291  000A00  5039               	movf	_i2c1_state,w,c
 10292                           
 10293                           ; Switch size 1, requested type "space"
 10294                           ; Number of cases is 11, Range of values is 0 to 11
 10295                           ; switch strategies available:
 10296                           ; Name         Instructions Cycles
 10297                           ; simple_byte           34    18 (average)
 10298                           ;	Chosen strategy is simple_byte
 10299  000A02  0A00               	xorlw	0	; case 0
 10300  000A04  B4D8               	btfsc	status,2,c
 10301  000A06  D6D3               	goto	i2l60
 10302  000A08  0A01               	xorlw	1	; case 1
 10303  000A0A  B4D8               	btfsc	status,2,c
 10304  000A0C  D712               	goto	i2l65
 10305  000A0E  0A03               	xorlw	3	; case 2
 10306  000A10  B4D8               	btfsc	status,2,c
 10307  000A12  D749               	goto	i2l4792
 10308  000A14  0A01               	xorlw	1	; case 3
 10309  000A16  B4D8               	btfsc	status,2,c
 10310  000A18  D771               	goto	i2l82
 10311  000A1A  0A07               	xorlw	7	; case 4
 10312  000A1C  B4D8               	btfsc	status,2,c
 10313  000A1E  D7E6               	goto	i2l4858
 10314  000A20  0A01               	xorlw	1	; case 5
 10315  000A22  B4D8               	btfsc	status,2,c
 10316  000A24  D7AB               	goto	i2l89
 10317  000A26  0A03               	xorlw	3	; case 6
 10318  000A28  B4D8               	btfsc	status,2,c
 10319  000A2A  D7B5               	goto	i2l4840
 10320  000A2C  0A01               	xorlw	1	; case 7
 10321  000A2E  B4D8               	btfsc	status,2,c
 10322  000A30  D7DD               	goto	i2l4858
 10323  000A32  0A0F               	xorlw	15	; case 8
 10324  000A34  B4D8               	btfsc	status,2,c
 10325  000A36  D7B3               	goto	i2l4844
 10326  000A38  0A02               	xorlw	2	; case 10
 10327  000A3A  B4D8               	btfsc	status,2,c
 10328  000A3C  D6FE               	goto	i2l66
 10329  000A3E  0A01               	xorlw	1	; case 11
 10330  000A40  B4D8               	btfsc	status,2,c
 10331  000A42  D712               	goto	i2l71
 10332  000A44  D7D7               	goto	i2l4860
 10333  000A46                     __end_of_I2C1_ISR:
 10334                           	opt stack 0
 10335                           tosu	equ	0xFFF
 10336                           tosh	equ	0xFFE
 10337                           tosl	equ	0xFFD
 10338                           pclatu	equ	0xFFB
 10339                           pclath	equ	0xFFA
 10340                           tblptru	equ	0xFF8
 10341                           tblptrh	equ	0xFF7
 10342                           tblptrl	equ	0xFF6
 10343                           tablat	equ	0xFF5
 10344                           prodh	equ	0xFF4
 10345                           prodl	equ	0xFF3
 10346                           intcon	equ	0xFF2
 10347                           intcon2	equ	0xFF1
 10348                           indf0	equ	0xFEF
 10349                           postinc0	equ	0xFEE
 10350                           fsr0h	equ	0xFEA
 10351                           fsr0l	equ	0xFE9
 10352                           wreg	equ	0xFE8
 10353                           fsr1h	equ	0xFE2
 10354                           fsr1l	equ	0xFE1
 10355                           indf2	equ	0xFDF
 10356                           postinc2	equ	0xFDE
 10357                           postdec2	equ	0xFDD
 10358                           plusw2	equ	0xFDB
 10359                           fsr2h	equ	0xFDA
 10360                           fsr2l	equ	0xFD9
 10361                           status	equ	0xFD8
 10362                           
 10363 ;; *************** function _I2C1_Stop *****************
 10364 ;; Defined at:
 10365 ;;		line 534 in file "mcc_generated_files/i2c1.c"
 10366 ;; Parameters:    Size  Location     Type
 10367 ;;  completion_c    1    wreg     enum E8795
 10368 ;; Auto vars:     Size  Location     Type
 10369 ;;  completion_c    1    2[COMRAM] enum E8795
 10370 ;; Return value:  Size  Location     Type
 10371 ;;		None               void
 10372 ;; Registers used:
 10373 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10374 ;; Tracked objects:
 10375 ;;		On entry : 0/0
 10376 ;;		On exit  : 0/0
 10377 ;;		Unchanged: 0/0
 10378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10379 ;;      Params:         0       0       0       0       0       0       0
 10380 ;;      Locals:         1       0       0       0       0       0       0
 10381 ;;      Temps:          2       0       0       0       0       0       0
 10382 ;;      Totals:         3       0       0       0       0       0       0
 10383 ;;Total ram usage:        3 bytes
 10384 ;; Hardware stack levels used:    1
 10385 ;; This function calls:
 10386 ;;		Nothing
 10387 ;; This function is called by:
 10388 ;;		_I2C1_ISR
 10389 ;; This function uses a non-reentrant model
 10390 ;;
 10391                           
 10392                           	psect	text49
 10393  001E2C                     __ptext49:
 10394                           	opt stack 0
 10395  001E2C                     _I2C1_Stop:
 10396                           	opt stack 22
 10397                           
 10398                           ;incstack = 0
 10399                           ;I2C1_Stop@completion_code stored from wreg
 10400  001E2C  6E03               	movwf	I2C1_Stop@completion_code,c
 10401                           
 10402                           ;i2c1.c: 537: SSP1CON2bits.PEN = 1;
 10403  001E2E  84C5               	bsf	4037,2,c	;volatile
 10404                           
 10405                           ;i2c1.c: 540: if (p_i2c1_current->pTrFlag != (0))
 10406  001E30  EE20 F003          	lfsr	2,3
 10407  001E34  502C               	movf	_p_i2c1_current,w,c
 10408  001E36  26D9               	addwf	fsr2l,f,c
 10409  001E38  502D               	movf	_p_i2c1_current+1,w,c
 10410  001E3A  22DA               	addwfc	fsr2h,f,c
 10411  001E3C  50DE               	movf	postinc2,w,c
 10412  001E3E  10DE               	iorwf	postinc2,w,c
 10413  001E40  B4D8               	btfsc	status,2,c
 10414  001E42  D010               	goto	i2l4386
 10415                           
 10416                           ;i2c1.c: 541: {
 10417                           ;i2c1.c: 543: *(p_i2c1_current->pTrFlag) = completion_code;
 10418  001E44  EE20 F003          	lfsr	2,3
 10419  001E48  502C               	movf	_p_i2c1_current,w,c
 10420  001E4A  26D9               	addwf	fsr2l,f,c
 10421  001E4C  502D               	movf	_p_i2c1_current+1,w,c
 10422  001E4E  22DA               	addwfc	fsr2h,f,c
 10423  001E50  CFDE F001          	movff	postinc2,??_I2C1_Stop
 10424  001E54  CFDD F002          	movff	postdec2,??_I2C1_Stop+1
 10425  001E58  C001  FFD9         	movff	??_I2C1_Stop,fsr2l
 10426  001E5C  C002  FFDA         	movff	??_I2C1_Stop+1,fsr2h
 10427  001E60  C003  FFDF         	movff	I2C1_Stop@completion_code,indf2
 10428  001E64                     i2l4386:
 10429                           
 10430                           ;i2c1.c: 544: }
 10431                           ;i2c1.c: 547: i2c1_state = S_MASTER_IDLE;
 10432  001E64  0E00               	movlw	0
 10433  001E66  6E39               	movwf	_i2c1_state,c
 10434  001E68  0012               	return		;funcret
 10435  001E6A                     __end_of_I2C1_Stop:
 10436                           	opt stack 0
 10437                           tosu	equ	0xFFF
 10438                           tosh	equ	0xFFE
 10439                           tosl	equ	0xFFD
 10440                           pclatu	equ	0xFFB
 10441                           pclath	equ	0xFFA
 10442                           tblptru	equ	0xFF8
 10443                           tblptrh	equ	0xFF7
 10444                           tblptrl	equ	0xFF6
 10445                           tablat	equ	0xFF5
 10446                           prodh	equ	0xFF4
 10447                           prodl	equ	0xFF3
 10448                           intcon	equ	0xFF2
 10449                           intcon2	equ	0xFF1
 10450                           indf0	equ	0xFEF
 10451                           postinc0	equ	0xFEE
 10452                           fsr0h	equ	0xFEA
 10453                           fsr0l	equ	0xFE9
 10454                           wreg	equ	0xFE8
 10455                           fsr1h	equ	0xFE2
 10456                           fsr1l	equ	0xFE1
 10457                           indf2	equ	0xFDF
 10458                           postinc2	equ	0xFDE
 10459                           postdec2	equ	0xFDD
 10460                           plusw2	equ	0xFDB
 10461                           fsr2h	equ	0xFDA
 10462                           fsr2l	equ	0xFD9
 10463                           status	equ	0xFD8
 10464                           
 10465 ;; *************** function _I2C1_FunctionComplete *****************
 10466 ;; Defined at:
 10467 ;;		line 516 in file "mcc_generated_files/i2c1.c"
 10468 ;; Parameters:    Size  Location     Type
 10469 ;;		None
 10470 ;; Auto vars:     Size  Location     Type
 10471 ;;		None
 10472 ;; Return value:  Size  Location     Type
 10473 ;;		None               void
 10474 ;; Registers used:
 10475 ;;		wreg, status,2, status,0
 10476 ;; Tracked objects:
 10477 ;;		On entry : 0/0
 10478 ;;		On exit  : 0/0
 10479 ;;		Unchanged: 0/0
 10480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10481 ;;      Params:         0       0       0       0       0       0       0
 10482 ;;      Locals:         0       0       0       0       0       0       0
 10483 ;;      Temps:          0       0       0       0       0       0       0
 10484 ;;      Totals:         0       0       0       0       0       0       0
 10485 ;;Total ram usage:        0 bytes
 10486 ;; Hardware stack levels used:    1
 10487 ;; This function calls:
 10488 ;;		Nothing
 10489 ;; This function is called by:
 10490 ;;		_I2C1_ISR
 10491 ;; This function uses a non-reentrant model
 10492 ;;
 10493                           
 10494                           	psect	text50
 10495  0020CC                     __ptext50:
 10496                           	opt stack 0
 10497  0020CC                     _I2C1_FunctionComplete:
 10498                           	opt stack 22
 10499                           
 10500                           ;i2c1.c: 520: p_i2c1_trb_current++;
 10501                           
 10502                           ;incstack = 0
 10503  0020CC  0E05               	movlw	5
 10504  0020CE  262E               	addwf	_p_i2c1_trb_current,f,c
 10505  0020D0  0E00               	movlw	0
 10506  0020D2  222F               	addwfc	_p_i2c1_trb_current+1,f,c
 10507                           
 10508                           ;i2c1.c: 523: if(--i2c1_trb_count == 0)
 10509  0020D4  062A               	decf	_i2c1_trb_count,f,c
 10510  0020D6  A0D8               	btfss	status,0,c
 10511  0020D8  062B               	decf	_i2c1_trb_count+1,f,c
 10512  0020DA  502A               	movf	_i2c1_trb_count,w,c
 10513  0020DC  102B               	iorwf	_i2c1_trb_count+1,w,c
 10514  0020DE  A4D8               	btfss	status,2,c
 10515  0020E0  D003               	goto	i2l4392
 10516                           
 10517                           ;i2c1.c: 524: {
 10518                           ;i2c1.c: 525: i2c1_state = S_MASTER_SEND_STOP;
 10519  0020E2  0E04               	movlw	4
 10520  0020E4  6E39               	movwf	_i2c1_state,c
 10521                           
 10522                           ;i2c1.c: 526: }
 10523  0020E6  0012               	return	
 10524  0020E8                     i2l4392:
 10525                           
 10526                           ;i2c1.c: 527: else
 10527                           ;i2c1.c: 528: {
 10528                           ;i2c1.c: 529: i2c1_state = S_MASTER_RESTART;
 10529  0020E8  0E01               	movlw	1
 10530  0020EA  6E39               	movwf	_i2c1_state,c
 10531  0020EC  0012               	return	
 10532  0020EE                     __end_of_I2C1_FunctionComplete:
 10533                           	opt stack 0
 10534                           tosu	equ	0xFFF
 10535                           tosh	equ	0xFFE
 10536                           tosl	equ	0xFFD
 10537                           pclatu	equ	0xFFB
 10538                           pclath	equ	0xFFA
 10539                           tblptru	equ	0xFF8
 10540                           tblptrh	equ	0xFF7
 10541                           tblptrl	equ	0xFF6
 10542                           tablat	equ	0xFF5
 10543                           prodh	equ	0xFF4
 10544                           prodl	equ	0xFF3
 10545                           intcon	equ	0xFF2
 10546                           intcon2	equ	0xFF1
 10547                           indf0	equ	0xFEF
 10548                           postinc0	equ	0xFEE
 10549                           fsr0h	equ	0xFEA
 10550                           fsr0l	equ	0xFE9
 10551                           wreg	equ	0xFE8
 10552                           fsr1h	equ	0xFE2
 10553                           fsr1l	equ	0xFE1
 10554                           indf2	equ	0xFDF
 10555                           postinc2	equ	0xFDE
 10556                           postdec2	equ	0xFDD
 10557                           plusw2	equ	0xFDB
 10558                           fsr2h	equ	0xFDA
 10559                           fsr2l	equ	0xFD9
 10560                           status	equ	0xFD8
 10561                           
 10562 ;; *************** function _I2C1_BusCollisionISR *****************
 10563 ;; Defined at:
 10564 ;;		line 681 in file "mcc_generated_files/i2c1.c"
 10565 ;; Parameters:    Size  Location     Type
 10566 ;;		None
 10567 ;; Auto vars:     Size  Location     Type
 10568 ;;		None
 10569 ;; Return value:  Size  Location     Type
 10570 ;;		None               void
 10571 ;; Registers used:
 10572 ;;		None
 10573 ;; Tracked objects:
 10574 ;;		On entry : 0/0
 10575 ;;		On exit  : 0/0
 10576 ;;		Unchanged: 0/0
 10577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10578 ;;      Params:         0       0       0       0       0       0       0
 10579 ;;      Locals:         0       0       0       0       0       0       0
 10580 ;;      Temps:          0       0       0       0       0       0       0
 10581 ;;      Totals:         0       0       0       0       0       0       0
 10582 ;;Total ram usage:        0 bytes
 10583 ;; Hardware stack levels used:    1
 10584 ;; This function calls:
 10585 ;;		Nothing
 10586 ;; This function is called by:
 10587 ;;		_INTERRUPT_InterruptManager
 10588 ;; This function uses a non-reentrant model
 10589 ;;
 10590                           
 10591                           	psect	text51
 10592  00221C                     __ptext51:
 10593                           	opt stack 0
 10594  00221C                     _I2C1_BusCollisionISR:
 10595                           	opt stack 23
 10596                           
 10597                           ;incstack = 0
 10598  00221C  0012               	return		;funcret
 10599  00221E                     __end_of_I2C1_BusCollisionISR:
 10600                           	opt stack 0
 10601                           tosu	equ	0xFFF
 10602                           tosh	equ	0xFFE
 10603                           tosl	equ	0xFFD
 10604                           pclatu	equ	0xFFB
 10605                           pclath	equ	0xFFA
 10606                           tblptru	equ	0xFF8
 10607                           tblptrh	equ	0xFF7
 10608                           tblptrl	equ	0xFF6
 10609                           tablat	equ	0xFF5
 10610                           prodh	equ	0xFF4
 10611                           prodl	equ	0xFF3
 10612                           intcon	equ	0xFF2
 10613                           intcon2	equ	0xFF1
 10614                           indf0	equ	0xFEF
 10615                           postinc0	equ	0xFEE
 10616                           fsr0h	equ	0xFEA
 10617                           fsr0l	equ	0xFE9
 10618                           wreg	equ	0xFE8
 10619                           fsr1h	equ	0xFE2
 10620                           fsr1l	equ	0xFE1
 10621                           indf2	equ	0xFDF
 10622                           postinc2	equ	0xFDE
 10623                           postdec2	equ	0xFDD
 10624                           plusw2	equ	0xFDB
 10625                           fsr2h	equ	0xFDA
 10626                           fsr2l	equ	0xFD9
 10627                           status	equ	0xFD8
 10628                           
 10629 ;; *************** function _EUSART1_Transmit_ISR *****************
 10630 ;; Defined at:
 10631 ;;		line 150 in file "UART.c"
 10632 ;; Parameters:    Size  Location     Type
 10633 ;;		None
 10634 ;; Auto vars:     Size  Location     Type
 10635 ;;		None
 10636 ;; Return value:  Size  Location     Type
 10637 ;;		None               void
 10638 ;; Registers used:
 10639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10640 ;; Tracked objects:
 10641 ;;		On entry : 0/0
 10642 ;;		On exit  : 0/0
 10643 ;;		Unchanged: 0/0
 10644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10645 ;;      Params:         0       0       0       0       0       0       0
 10646 ;;      Locals:         0       0       0       0       0       0       0
 10647 ;;      Temps:          0       0       0       0       0       0       0
 10648 ;;      Totals:         0       0       0       0       0       0       0
 10649 ;;Total ram usage:        0 bytes
 10650 ;; Hardware stack levels used:    1
 10651 ;; Hardware stack levels required when called:    2
 10652 ;; This function calls:
 10653 ;;		i2_UART_buff_get
 10654 ;;		i2_UART_buff_size
 10655 ;; This function is called by:
 10656 ;;		_INTERRUPT_InterruptManager
 10657 ;; This function uses a non-reentrant model
 10658 ;;
 10659                           
 10660                           	psect	text52
 10661  001F52                     __ptext52:
 10662                           	opt stack 0
 10663  001F52                     _EUSART1_Transmit_ISR:
 10664                           	opt stack 21
 10665                           
 10666                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
 10667                           
 10668                           ;incstack = 0
 10669  001F52  0E00               	movlw	low _output_buffer
 10670  001F54  6E01               	movwf	i2UART_buff_size@_this,c
 10671  001F56  0E05               	movlw	high _output_buffer
 10672  001F58  6E02               	movwf	i2UART_buff_size@_this+1,c
 10673  001F5A  ECD5  F010         	call	i2_UART_buff_size	;wreg free
 10674  001F5E  BE02               	btfsc	?i2_UART_buff_size+1,7,c
 10675  001F60  D00D               	goto	i2l4878
 10676  001F62  5002               	movf	?i2_UART_buff_size+1,w,c
 10677  001F64  E103               	bnz	i2u465_40
 10678  001F66  0401               	decf	?i2_UART_buff_size,w,c
 10679  001F68  A0D8               	btfss	status,0,c
 10680  001F6A  D008               	goto	i2l4878
 10681  001F6C                     i2u465_40:
 10682                           
 10683                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
 10684  001F6C  0E00               	movlw	low _output_buffer
 10685  001F6E  6E07               	movwf	i2UART_buff_get@_this,c
 10686  001F70  0E05               	movlw	high _output_buffer
 10687  001F72  6E08               	movwf	i2UART_buff_get@_this+1,c
 10688  001F74  ECD4  F00C         	call	i2_UART_buff_get	;wreg free
 10689  001F78  6EAD               	movwf	4013,c	;volatile
 10690                           
 10691                           ;UART.c: 154: } else {
 10692  001F7A  0012               	return	
 10693  001F7C                     i2l4878:
 10694                           
 10695                           ;UART.c: 155: Transmit_stall = 1;
 10696  001F7C  0E01               	movlw	1
 10697  001F7E  6E44               	movwf	_Transmit_stall,c
 10698                           
 10699                           ;UART.c: 156: PIE1bits.TX1IE = 0;
 10700  001F80  989D               	bcf	3997,4,c	;volatile
 10701  001F82  0012               	return	
 10702  001F84                     __end_of_EUSART1_Transmit_ISR:
 10703                           	opt stack 0
 10704                           tosu	equ	0xFFF
 10705                           tosh	equ	0xFFE
 10706                           tosl	equ	0xFFD
 10707                           pclatu	equ	0xFFB
 10708                           pclath	equ	0xFFA
 10709                           tblptru	equ	0xFF8
 10710                           tblptrh	equ	0xFF7
 10711                           tblptrl	equ	0xFF6
 10712                           tablat	equ	0xFF5
 10713                           prodh	equ	0xFF4
 10714                           prodl	equ	0xFF3
 10715                           intcon	equ	0xFF2
 10716                           intcon2	equ	0xFF1
 10717                           indf0	equ	0xFEF
 10718                           postinc0	equ	0xFEE
 10719                           fsr0h	equ	0xFEA
 10720                           fsr0l	equ	0xFE9
 10721                           wreg	equ	0xFE8
 10722                           fsr1h	equ	0xFE2
 10723                           fsr1l	equ	0xFE1
 10724                           indf2	equ	0xFDF
 10725                           postinc2	equ	0xFDE
 10726                           postdec2	equ	0xFDD
 10727                           plusw2	equ	0xFDB
 10728                           fsr2h	equ	0xFDA
 10729                           fsr2l	equ	0xFD9
 10730                           status	equ	0xFD8
 10731                           
 10732 ;; *************** function i2_UART_buff_size *****************
 10733 ;; Defined at:
 10734 ;;		line 102 in file "UART.c"
 10735 ;; Parameters:    Size  Location     Type
 10736 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
 10737 ;;		 -> output_buffer(206), input_buffer(206), 
 10738 ;; Auto vars:     Size  Location     Type
 10739 ;;		None
 10740 ;; Return value:  Size  Location     Type
 10741 ;;                  2    0[COMRAM] int 
 10742 ;; Registers used:
 10743 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10744 ;; Tracked objects:
 10745 ;;		On entry : 0/0
 10746 ;;		On exit  : 0/0
 10747 ;;		Unchanged: 0/0
 10748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10749 ;;      Params:         2       0       0       0       0       0       0
 10750 ;;      Locals:         0       0       0       0       0       0       0
 10751 ;;      Temps:          0       0       0       0       0       0       0
 10752 ;;      Totals:         2       0       0       0       0       0       0
 10753 ;;Total ram usage:        2 bytes
 10754 ;; Hardware stack levels used:    1
 10755 ;; This function calls:
 10756 ;;		Nothing
 10757 ;; This function is called by:
 10758 ;;		_EUSART1_Transmit_ISR
 10759 ;; This function uses a non-reentrant model
 10760 ;;
 10761                           
 10762                           	psect	text53
 10763  0021AA                     __ptext53:
 10764                           	opt stack 0
 10765  0021AA                     i2_UART_buff_size:
 10766                           	opt stack 22
 10767                           
 10768                           ;UART.c: 103: return (_this->count);
 10769                           
 10770                           ;incstack = 0
 10771  0021AA  EE20 F0CC          	lfsr	2,204
 10772  0021AE  5001               	movf	i2UART_buff_size@_this,w,c
 10773  0021B0  26D9               	addwf	fsr2l,f,c
 10774  0021B2  5002               	movf	i2UART_buff_size@_this+1,w,c
 10775  0021B4  22DA               	addwfc	fsr2h,f,c
 10776  0021B6  CFDE F001          	movff	postinc2,?i2_UART_buff_size
 10777  0021BA  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
 10778  0021BE  0012               	return	
 10779  0021C0                     __end_ofi2_UART_buff_size:
 10780                           	opt stack 0
 10781                           tosu	equ	0xFFF
 10782                           tosh	equ	0xFFE
 10783                           tosl	equ	0xFFD
 10784                           pclatu	equ	0xFFB
 10785                           pclath	equ	0xFFA
 10786                           tblptru	equ	0xFF8
 10787                           tblptrh	equ	0xFF7
 10788                           tblptrl	equ	0xFF6
 10789                           tablat	equ	0xFF5
 10790                           prodh	equ	0xFF4
 10791                           prodl	equ	0xFF3
 10792                           intcon	equ	0xFF2
 10793                           intcon2	equ	0xFF1
 10794                           indf0	equ	0xFEF
 10795                           postinc0	equ	0xFEE
 10796                           fsr0h	equ	0xFEA
 10797                           fsr0l	equ	0xFE9
 10798                           wreg	equ	0xFE8
 10799                           fsr1h	equ	0xFE2
 10800                           fsr1l	equ	0xFE1
 10801                           indf2	equ	0xFDF
 10802                           postinc2	equ	0xFDE
 10803                           postdec2	equ	0xFDD
 10804                           plusw2	equ	0xFDB
 10805                           fsr2h	equ	0xFDA
 10806                           fsr2l	equ	0xFD9
 10807                           status	equ	0xFD8
 10808                           
 10809 ;; *************** function i2_UART_buff_get *****************
 10810 ;; Defined at:
 10811 ;;		line 81 in file "UART.c"
 10812 ;; Parameters:    Size  Location     Type
 10813 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 10814 ;;		 -> output_buffer(206), input_buffer(206), 
 10815 ;; Auto vars:     Size  Location     Type
 10816 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
 10817 ;; Return value:  Size  Location     Type
 10818 ;;                  1    wreg      unsigned char 
 10819 ;; Registers used:
 10820 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10821 ;; Tracked objects:
 10822 ;;		On entry : 0/0
 10823 ;;		On exit  : 0/0
 10824 ;;		Unchanged: 0/0
 10825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10826 ;;      Params:         2       0       0       0       0       0       0
 10827 ;;      Locals:         1       0       0       0       0       0       0
 10828 ;;      Temps:          2       0       0       0       0       0       0
 10829 ;;      Totals:         5       0       0       0       0       0       0
 10830 ;;Total ram usage:        5 bytes
 10831 ;; Hardware stack levels used:    1
 10832 ;; Hardware stack levels required when called:    1
 10833 ;; This function calls:
 10834 ;;		i2_UART_buff_modulo_inc
 10835 ;; This function is called by:
 10836 ;;		_EUSART1_Transmit_ISR
 10837 ;; This function uses a non-reentrant model
 10838 ;;
 10839                           
 10840                           	psect	text54
 10841  0019A8                     __ptext54:
 10842                           	opt stack 0
 10843  0019A8                     i2_UART_buff_get:
 10844                           	opt stack 21
 10845                           
 10846                           ;UART.c: 82: unsigned char c;
 10847                           ;UART.c: 83: if (_this->count > 0) {
 10848                           
 10849                           ;incstack = 0
 10850  0019A8  EE20 F0CC          	lfsr	2,204
 10851  0019AC  5007               	movf	i2UART_buff_get@_this,w,c
 10852  0019AE  26D9               	addwf	fsr2l,f,c
 10853  0019B0  5008               	movf	i2UART_buff_get@_this+1,w,c
 10854  0019B2  22DA               	addwfc	fsr2h,f,c
 10855  0019B4  0E01               	movlw	1
 10856  0019B6  BEDB               	btfsc	plusw2,7,c
 10857  0019B8  D03C               	goto	i2l4732
 10858  0019BA  0E01               	movlw	1
 10859  0019BC  50DB               	movf	plusw2,w,c
 10860  0019BE  E103               	bnz	i2u445_40
 10861  0019C0  04DE               	decf	postinc2,w,c
 10862  0019C2  A0D8               	btfss	status,0,c
 10863  0019C4  D036               	goto	i2l4732
 10864  0019C6                     i2u445_40:
 10865                           
 10866                           ;UART.c: 84: c = _this->buf[_this->tail];
 10867  0019C6  EE20 F0CA          	lfsr	2,202
 10868  0019CA  5007               	movf	i2UART_buff_get@_this,w,c
 10869  0019CC  26D9               	addwf	fsr2l,f,c
 10870  0019CE  5008               	movf	i2UART_buff_get@_this+1,w,c
 10871  0019D0  22DA               	addwfc	fsr2h,f,c
 10872  0019D2  CFDE F009          	movff	postinc2,??i2_UART_buff_get
 10873  0019D6  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
 10874  0019DA  5009               	movf	??i2_UART_buff_get,w,c
 10875  0019DC  2407               	addwf	i2UART_buff_get@_this,w,c
 10876  0019DE  6ED9               	movwf	fsr2l,c
 10877  0019E0  500A               	movf	??i2_UART_buff_get+1,w,c
 10878  0019E2  2008               	addwfc	i2UART_buff_get@_this+1,w,c
 10879  0019E4  6EDA               	movwf	fsr2h,c
 10880  0019E6  50DF               	movf	indf2,w,c
 10881  0019E8  6E0B               	movwf	i2UART_buff_get@c,c
 10882                           
 10883                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
 10884  0019EA  EE20 F0CA          	lfsr	2,202
 10885  0019EE  5007               	movf	i2UART_buff_get@_this,w,c
 10886  0019F0  26D9               	addwf	fsr2l,f,c
 10887  0019F2  5008               	movf	i2UART_buff_get@_this+1,w,c
 10888  0019F4  22DA               	addwfc	fsr2h,f,c
 10889  0019F6  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10890  0019FA  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10891  0019FE  0E00               	movlw	0
 10892  001A00  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10893  001A02  0EC8               	movlw	200
 10894  001A04  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10895  001A06  EC1A  F010         	call	i2_UART_buff_modulo_inc	;wreg free
 10896  001A0A  EE20 F0CA          	lfsr	2,202
 10897  001A0E  5007               	movf	i2UART_buff_get@_this,w,c
 10898  001A10  26D9               	addwf	fsr2l,f,c
 10899  001A12  5008               	movf	i2UART_buff_get@_this+1,w,c
 10900  001A14  22DA               	addwfc	fsr2h,f,c
 10901  001A16  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10902  001A1A  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10903                           
 10904                           ;UART.c: 86: --_this->count;
 10905  001A1E  EE20 F0CC          	lfsr	2,204
 10906  001A22  5007               	movf	i2UART_buff_get@_this,w,c
 10907  001A24  26D9               	addwf	fsr2l,f,c
 10908  001A26  5008               	movf	i2UART_buff_get@_this+1,w,c
 10909  001A28  22DA               	addwfc	fsr2h,f,c
 10910  001A2A  06DE               	decf	postinc2,f,c
 10911  001A2C  0E00               	movlw	0
 10912  001A2E  5ADD               	subwfb	postdec2,f,c
 10913                           
 10914                           ;UART.c: 87: } else {
 10915  001A30  D002               	goto	i2l1155
 10916  001A32                     i2l4732:
 10917                           
 10918                           ;UART.c: 88: c = 0;
 10919  001A32  0E00               	movlw	0
 10920  001A34  6E0B               	movwf	i2UART_buff_get@c,c
 10921  001A36                     i2l1155:
 10922                           
 10923                           ;UART.c: 89: }
 10924                           ;UART.c: 90: return (c);
 10925  001A36  500B               	movf	i2UART_buff_get@c,w,c
 10926  001A38  0012               	return	
 10927  001A3A                     __end_ofi2_UART_buff_get:
 10928                           	opt stack 0
 10929                           tosu	equ	0xFFF
 10930                           tosh	equ	0xFFE
 10931                           tosl	equ	0xFFD
 10932                           pclatu	equ	0xFFB
 10933                           pclath	equ	0xFFA
 10934                           tblptru	equ	0xFF8
 10935                           tblptrh	equ	0xFF7
 10936                           tblptrl	equ	0xFF6
 10937                           tablat	equ	0xFF5
 10938                           prodh	equ	0xFF4
 10939                           prodl	equ	0xFF3
 10940                           intcon	equ	0xFF2
 10941                           intcon2	equ	0xFF1
 10942                           indf0	equ	0xFEF
 10943                           postinc0	equ	0xFEE
 10944                           fsr0h	equ	0xFEA
 10945                           fsr0l	equ	0xFE9
 10946                           wreg	equ	0xFE8
 10947                           fsr1h	equ	0xFE2
 10948                           fsr1l	equ	0xFE1
 10949                           indf2	equ	0xFDF
 10950                           postinc2	equ	0xFDE
 10951                           postdec2	equ	0xFDD
 10952                           plusw2	equ	0xFDB
 10953                           fsr2h	equ	0xFDA
 10954                           fsr2l	equ	0xFD9
 10955                           status	equ	0xFD8
 10956                           
 10957 ;; *************** function _EUSART1_Receive_ISR *****************
 10958 ;; Defined at:
 10959 ;;		line 139 in file "UART.c"
 10960 ;; Parameters:    Size  Location     Type
 10961 ;;		None
 10962 ;; Auto vars:     Size  Location     Type
 10963 ;;  data            1   11[COMRAM] unsigned char 
 10964 ;; Return value:  Size  Location     Type
 10965 ;;		None               void
 10966 ;; Registers used:
 10967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10968 ;; Tracked objects:
 10969 ;;		On entry : 0/0
 10970 ;;		On exit  : 0/0
 10971 ;;		Unchanged: 0/0
 10972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10973 ;;      Params:         0       0       0       0       0       0       0
 10974 ;;      Locals:         1       0       0       0       0       0       0
 10975 ;;      Temps:          0       0       0       0       0       0       0
 10976 ;;      Totals:         1       0       0       0       0       0       0
 10977 ;;Total ram usage:        1 bytes
 10978 ;; Hardware stack levels used:    1
 10979 ;; Hardware stack levels required when called:    2
 10980 ;; This function calls:
 10981 ;;		i2_UART_buff_put
 10982 ;; This function is called by:
 10983 ;;		_INTERRUPT_InterruptManager
 10984 ;; This function uses a non-reentrant model
 10985 ;;
 10986                           
 10987                           	psect	text55
 10988  002148                     __ptext55:
 10989                           	opt stack 0
 10990  002148                     _EUSART1_Receive_ISR:
 10991                           	opt stack 21
 10992                           
 10993                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
 10994                           
 10995                           ;incstack = 0
 10996  002148  A2AB               	btfss	4011,1,c	;volatile
 10997  00214A  D002               	goto	i2l1186
 10998                           
 10999                           ;UART.c: 143: RC1STAbits.CREN = 0;
 11000  00214C  98AB               	bcf	4011,4,c	;volatile
 11001                           
 11002                           ;UART.c: 144: RC1STAbits.CREN = 1;
 11003  00214E  88AB               	bsf	4011,4,c	;volatile
 11004  002150                     i2l1186:
 11005                           
 11006                           ;UART.c: 145: }
 11007                           ;UART.c: 146: unsigned char data = RCREG1;
 11008  002150  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
 11009                           
 11010                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
 11011  002154  0E00               	movlw	low _input_buffer
 11012  002156  6E07               	movwf	i2UART_buff_put@_this,c
 11013  002158  0E04               	movlw	high _input_buffer
 11014  00215A  6E08               	movwf	i2UART_buff_put@_this+1,c
 11015  00215C  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
 11016  002160  EC15  F009         	call	i2_UART_buff_put	;wreg free
 11017  002164  0012               	return		;funcret
 11018  002166                     __end_of_EUSART1_Receive_ISR:
 11019                           	opt stack 0
 11020                           tosu	equ	0xFFF
 11021                           tosh	equ	0xFFE
 11022                           tosl	equ	0xFFD
 11023                           pclatu	equ	0xFFB
 11024                           pclath	equ	0xFFA
 11025                           tblptru	equ	0xFF8
 11026                           tblptrh	equ	0xFF7
 11027                           tblptrl	equ	0xFF6
 11028                           tablat	equ	0xFF5
 11029                           prodh	equ	0xFF4
 11030                           prodl	equ	0xFF3
 11031                           intcon	equ	0xFF2
 11032                           intcon2	equ	0xFF1
 11033                           indf0	equ	0xFEF
 11034                           postinc0	equ	0xFEE
 11035                           fsr0h	equ	0xFEA
 11036                           fsr0l	equ	0xFE9
 11037                           wreg	equ	0xFE8
 11038                           fsr1h	equ	0xFE2
 11039                           fsr1l	equ	0xFE1
 11040                           indf2	equ	0xFDF
 11041                           postinc2	equ	0xFDE
 11042                           postdec2	equ	0xFDD
 11043                           plusw2	equ	0xFDB
 11044                           fsr2h	equ	0xFDA
 11045                           fsr2l	equ	0xFD9
 11046                           status	equ	0xFD8
 11047                           
 11048 ;; *************** function i2_UART_buff_put *****************
 11049 ;; Defined at:
 11050 ;;		line 68 in file "UART.c"
 11051 ;; Parameters:    Size  Location     Type
 11052 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 11053 ;;		 -> output_buffer(206), input_buffer(206), 
 11054 ;;  c               1    8[COMRAM] const unsigned char 
 11055 ;; Auto vars:     Size  Location     Type
 11056 ;;		None
 11057 ;; Return value:  Size  Location     Type
 11058 ;;		None               void
 11059 ;; Registers used:
 11060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11061 ;; Tracked objects:
 11062 ;;		On entry : 0/0
 11063 ;;		On exit  : 0/0
 11064 ;;		Unchanged: 0/0
 11065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11066 ;;      Params:         3       0       0       0       0       0       0
 11067 ;;      Locals:         0       0       0       0       0       0       0
 11068 ;;      Temps:          2       0       0       0       0       0       0
 11069 ;;      Totals:         5       0       0       0       0       0       0
 11070 ;;Total ram usage:        5 bytes
 11071 ;; Hardware stack levels used:    1
 11072 ;; Hardware stack levels required when called:    1
 11073 ;; This function calls:
 11074 ;;		i2_UART_buff_modulo_inc
 11075 ;; This function is called by:
 11076 ;;		_EUSART1_Receive_ISR
 11077 ;; This function uses a non-reentrant model
 11078 ;;
 11079                           
 11080                           	psect	text56
 11081  00122A                     __ptext56:
 11082                           	opt stack 0
 11083  00122A                     i2_UART_buff_put:
 11084                           	opt stack 21
 11085                           
 11086                           ;UART.c: 69: if (_this->count < 200) {
 11087                           
 11088                           ;incstack = 0
 11089  00122A  EE20 F0CC          	lfsr	2,204
 11090  00122E  5007               	movf	i2UART_buff_put@_this,w,c
 11091  001230  26D9               	addwf	fsr2l,f,c
 11092  001232  5008               	movf	i2UART_buff_put@_this+1,w,c
 11093  001234  22DA               	addwfc	fsr2h,f,c
 11094  001236  0E01               	movlw	1
 11095  001238  BEDB               	btfsc	plusw2,7,c
 11096  00123A  D007               	goto	i2l4712
 11097  00123C  0E01               	movlw	1
 11098  00123E  50DB               	movf	plusw2,w,c
 11099  001240  E13A               	bnz	i2l4718
 11100  001242  0EC8               	movlw	200
 11101  001244  5CDE               	subwf	postinc2,w,c
 11102  001246  B0D8               	btfsc	status,0,c
 11103  001248  D036               	goto	i2l4718
 11104  00124A                     i2l4712:
 11105                           
 11106                           ;UART.c: 70: _this->buf[_this->head] = c;
 11107  00124A  EE20 F0C8          	lfsr	2,200
 11108  00124E  5007               	movf	i2UART_buff_put@_this,w,c
 11109  001250  26D9               	addwf	fsr2l,f,c
 11110  001252  5008               	movf	i2UART_buff_put@_this+1,w,c
 11111  001254  22DA               	addwfc	fsr2h,f,c
 11112  001256  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 11113  00125A  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 11114  00125E  500A               	movf	??i2_UART_buff_put,w,c
 11115  001260  2407               	addwf	i2UART_buff_put@_this,w,c
 11116  001262  6ED9               	movwf	fsr2l,c
 11117  001264  500B               	movf	??i2_UART_buff_put+1,w,c
 11118  001266  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 11119  001268  6EDA               	movwf	fsr2h,c
 11120  00126A  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 11121                           
 11122                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
 11123  00126E  EE20 F0C8          	lfsr	2,200
 11124  001272  5007               	movf	i2UART_buff_put@_this,w,c
 11125  001274  26D9               	addwf	fsr2l,f,c
 11126  001276  5008               	movf	i2UART_buff_put@_this+1,w,c
 11127  001278  22DA               	addwfc	fsr2h,f,c
 11128  00127A  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 11129  00127E  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 11130  001282  0E00               	movlw	0
 11131  001284  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 11132  001286  0EC8               	movlw	200
 11133  001288  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 11134  00128A  EC1A  F010         	call	i2_UART_buff_modulo_inc	;wreg free
 11135  00128E  EE20 F0C8          	lfsr	2,200
 11136  001292  5007               	movf	i2UART_buff_put@_this,w,c
 11137  001294  26D9               	addwf	fsr2l,f,c
 11138  001296  5008               	movf	i2UART_buff_put@_this+1,w,c
 11139  001298  22DA               	addwfc	fsr2h,f,c
 11140  00129A  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 11141  00129E  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 11142                           
 11143                           ;UART.c: 72: ++_this->count;
 11144  0012A2  EE20 F0CC          	lfsr	2,204
 11145  0012A6  5007               	movf	i2UART_buff_put@_this,w,c
 11146  0012A8  26D9               	addwf	fsr2l,f,c
 11147  0012AA  5008               	movf	i2UART_buff_put@_this+1,w,c
 11148  0012AC  22DA               	addwfc	fsr2h,f,c
 11149  0012AE  2ADE               	incf	postinc2,f,c
 11150  0012B0  0E00               	movlw	0
 11151  0012B2  22DD               	addwfc	postdec2,f,c
 11152                           
 11153                           ;UART.c: 73: } else {
 11154  0012B4  0012               	return	
 11155  0012B6                     i2l4718:
 11156                           
 11157                           ;UART.c: 74: _this->buf[_this->head] = c;
 11158  0012B6  EE20 F0C8          	lfsr	2,200
 11159  0012BA  5007               	movf	i2UART_buff_put@_this,w,c
 11160  0012BC  26D9               	addwf	fsr2l,f,c
 11161  0012BE  5008               	movf	i2UART_buff_put@_this+1,w,c
 11162  0012C0  22DA               	addwfc	fsr2h,f,c
 11163  0012C2  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 11164  0012C6  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 11165  0012CA  500A               	movf	??i2_UART_buff_put,w,c
 11166  0012CC  2407               	addwf	i2UART_buff_put@_this,w,c
 11167  0012CE  6ED9               	movwf	fsr2l,c
 11168  0012D0  500B               	movf	??i2_UART_buff_put+1,w,c
 11169  0012D2  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 11170  0012D4  6EDA               	movwf	fsr2h,c
 11171  0012D6  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 11172                           
 11173                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
 11174  0012DA  EE20 F0C8          	lfsr	2,200
 11175  0012DE  5007               	movf	i2UART_buff_put@_this,w,c
 11176  0012E0  26D9               	addwf	fsr2l,f,c
 11177  0012E2  5008               	movf	i2UART_buff_put@_this+1,w,c
 11178  0012E4  22DA               	addwfc	fsr2h,f,c
 11179  0012E6  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 11180  0012EA  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 11181  0012EE  0E00               	movlw	0
 11182  0012F0  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 11183  0012F2  0EC8               	movlw	200
 11184  0012F4  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 11185  0012F6  EC1A  F010         	call	i2_UART_buff_modulo_inc	;wreg free
 11186  0012FA  EE20 F0C8          	lfsr	2,200
 11187  0012FE  5007               	movf	i2UART_buff_put@_this,w,c
 11188  001300  26D9               	addwf	fsr2l,f,c
 11189  001302  5008               	movf	i2UART_buff_put@_this+1,w,c
 11190  001304  22DA               	addwfc	fsr2h,f,c
 11191  001306  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 11192  00130A  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 11193                           
 11194                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
 11195  00130E  EE20 F0CA          	lfsr	2,202
 11196  001312  5007               	movf	i2UART_buff_put@_this,w,c
 11197  001314  26D9               	addwf	fsr2l,f,c
 11198  001316  5008               	movf	i2UART_buff_put@_this+1,w,c
 11199  001318  22DA               	addwfc	fsr2h,f,c
 11200  00131A  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 11201  00131E  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 11202  001322  0E00               	movlw	0
 11203  001324  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 11204  001326  0EC8               	movlw	200
 11205  001328  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 11206  00132A  EC1A  F010         	call	i2_UART_buff_modulo_inc	;wreg free
 11207  00132E  EE20 F0CA          	lfsr	2,202
 11208  001332  5007               	movf	i2UART_buff_put@_this,w,c
 11209  001334  26D9               	addwf	fsr2l,f,c
 11210  001336  5008               	movf	i2UART_buff_put@_this+1,w,c
 11211  001338  22DA               	addwfc	fsr2h,f,c
 11212  00133A  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 11213  00133E  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 11214  001342  0012               	return	
 11215  001344                     __end_ofi2_UART_buff_put:
 11216                           	opt stack 0
 11217                           tosu	equ	0xFFF
 11218                           tosh	equ	0xFFE
 11219                           tosl	equ	0xFFD
 11220                           pclatu	equ	0xFFB
 11221                           pclath	equ	0xFFA
 11222                           tblptru	equ	0xFF8
 11223                           tblptrh	equ	0xFF7
 11224                           tblptrl	equ	0xFF6
 11225                           tablat	equ	0xFF5
 11226                           prodh	equ	0xFF4
 11227                           prodl	equ	0xFF3
 11228                           intcon	equ	0xFF2
 11229                           intcon2	equ	0xFF1
 11230                           indf0	equ	0xFEF
 11231                           postinc0	equ	0xFEE
 11232                           fsr0h	equ	0xFEA
 11233                           fsr0l	equ	0xFE9
 11234                           wreg	equ	0xFE8
 11235                           fsr1h	equ	0xFE2
 11236                           fsr1l	equ	0xFE1
 11237                           indf2	equ	0xFDF
 11238                           postinc2	equ	0xFDE
 11239                           postdec2	equ	0xFDD
 11240                           plusw2	equ	0xFDB
 11241                           fsr2h	equ	0xFDA
 11242                           fsr2l	equ	0xFD9
 11243                           status	equ	0xFD8
 11244                           
 11245 ;; *************** function i2_UART_buff_modulo_inc *****************
 11246 ;; Defined at:
 11247 ;;		line 106 in file "UART.c"
 11248 ;; Parameters:    Size  Location     Type
 11249 ;;  value           2    0[COMRAM] const unsigned int 
 11250 ;;  modulus         2    2[COMRAM] const unsigned int 
 11251 ;; Auto vars:     Size  Location     Type
 11252 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
 11253 ;; Return value:  Size  Location     Type
 11254 ;;                  2    0[COMRAM] unsigned int 
 11255 ;; Registers used:
 11256 ;;		wreg, status,2, status,0
 11257 ;; Tracked objects:
 11258 ;;		On entry : 0/0
 11259 ;;		On exit  : 0/0
 11260 ;;		Unchanged: 0/0
 11261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11262 ;;      Params:         4       0       0       0       0       0       0
 11263 ;;      Locals:         2       0       0       0       0       0       0
 11264 ;;      Temps:          0       0       0       0       0       0       0
 11265 ;;      Totals:         6       0       0       0       0       0       0
 11266 ;;Total ram usage:        6 bytes
 11267 ;; Hardware stack levels used:    1
 11268 ;; This function calls:
 11269 ;;		Nothing
 11270 ;; This function is called by:
 11271 ;;		i2_UART_buff_put
 11272 ;;		i2_UART_buff_get
 11273 ;; This function uses a non-reentrant model
 11274 ;;
 11275                           
 11276                           	psect	text57
 11277  002034                     __ptext57:
 11278                           	opt stack 0
 11279  002034                     i2_UART_buff_modulo_inc:
 11280                           	opt stack 21
 11281                           
 11282                           ;UART.c: 107: unsigned int my_value = value + 1;
 11283                           
 11284                           ;incstack = 0
 11285  002034  0E01               	movlw	1
 11286  002036  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
 11287  002038  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 11288  00203A  0E00               	movlw	0
 11289  00203C  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
 11290  00203E  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 11291                           
 11292                           ;UART.c: 108: if (my_value >= modulus) {
 11293  002040  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
 11294  002042  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
 11295  002044  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
 11296  002046  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
 11297  002048  A0D8               	btfss	status,0,c
 11298  00204A  D004               	goto	i2l4356
 11299                           
 11300                           ;UART.c: 109: my_value = 0;
 11301  00204C  0E00               	movlw	0
 11302  00204E  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 11303  002050  0E00               	movlw	0
 11304  002052  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 11305  002054                     i2l4356:
 11306                           
 11307                           ;UART.c: 110: }
 11308                           ;UART.c: 111: return (my_value);
 11309  002054  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
 11310  002058  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
 11311  00205C  0012               	return	
 11312  00205E                     __end_ofi2_UART_buff_modulo_inc:
 11313                           	opt stack 0
 11314                           tosu	equ	0xFFF
 11315                           tosh	equ	0xFFE
 11316                           tosl	equ	0xFFD
 11317                           pclatu	equ	0xFFB
 11318                           pclath	equ	0xFFA
 11319                           tblptru	equ	0xFF8
 11320                           tblptrh	equ	0xFF7
 11321                           tblptrl	equ	0xFF6
 11322                           tablat	equ	0xFF5
 11323                           prodh	equ	0xFF4
 11324                           prodl	equ	0xFF3
 11325                           intcon	equ	0xFF2
 11326                           intcon2	equ	0xFF1
 11327                           indf0	equ	0xFEF
 11328                           postinc0	equ	0xFEE
 11329                           fsr0h	equ	0xFEA
 11330                           fsr0l	equ	0xFE9
 11331                           wreg	equ	0xFE8
 11332                           fsr1h	equ	0xFE2
 11333                           fsr1l	equ	0xFE1
 11334                           indf2	equ	0xFDF
 11335                           postinc2	equ	0xFDE
 11336                           postdec2	equ	0xFDD
 11337                           plusw2	equ	0xFDB
 11338                           fsr2h	equ	0xFDA
 11339                           fsr2l	equ	0xFD9
 11340                           status	equ	0xFD8
 11341                           tosu	equ	0xFFF
 11342                           tosh	equ	0xFFE
 11343                           tosl	equ	0xFFD
 11344                           pclatu	equ	0xFFB
 11345                           pclath	equ	0xFFA
 11346                           tblptru	equ	0xFF8
 11347                           tblptrh	equ	0xFF7
 11348                           tblptrl	equ	0xFF6
 11349                           tablat	equ	0xFF5
 11350                           prodh	equ	0xFF4
 11351                           prodl	equ	0xFF3
 11352                           intcon	equ	0xFF2
 11353                           intcon2	equ	0xFF1
 11354                           indf0	equ	0xFEF
 11355                           postinc0	equ	0xFEE
 11356                           fsr0h	equ	0xFEA
 11357                           fsr0l	equ	0xFE9
 11358                           wreg	equ	0xFE8
 11359                           fsr1h	equ	0xFE2
 11360                           fsr1l	equ	0xFE1
 11361                           indf2	equ	0xFDF
 11362                           postinc2	equ	0xFDE
 11363                           postdec2	equ	0xFDD
 11364                           plusw2	equ	0xFDB
 11365                           fsr2h	equ	0xFDA
 11366                           fsr2l	equ	0xFD9
 11367                           status	equ	0xFD8
 11368                           
 11369                           	psect	text58
 11370  000000                     __ptext58:
 11371                           	opt stack 0
 11372                           tosu	equ	0xFFF
 11373                           tosh	equ	0xFFE
 11374                           tosl	equ	0xFFD
 11375                           pclatu	equ	0xFFB
 11376                           pclath	equ	0xFFA
 11377                           tblptru	equ	0xFF8
 11378                           tblptrh	equ	0xFF7
 11379                           tblptrl	equ	0xFF6
 11380                           tablat	equ	0xFF5
 11381                           prodh	equ	0xFF4
 11382                           prodl	equ	0xFF3
 11383                           intcon	equ	0xFF2
 11384                           intcon2	equ	0xFF1
 11385                           indf0	equ	0xFEF
 11386                           postinc0	equ	0xFEE
 11387                           fsr0h	equ	0xFEA
 11388                           fsr0l	equ	0xFE9
 11389                           wreg	equ	0xFE8
 11390                           fsr1h	equ	0xFE2
 11391                           fsr1l	equ	0xFE1
 11392                           indf2	equ	0xFDF
 11393                           postinc2	equ	0xFDE
 11394                           postdec2	equ	0xFDD
 11395                           plusw2	equ	0xFDB
 11396                           fsr2h	equ	0xFDA
 11397                           fsr2l	equ	0xFD9
 11398                           status	equ	0xFD8
 11399                           
 11400                           	psect	rparam
 11401  0000                     tosu	equ	0xFFF
 11402                           tosh	equ	0xFFE
 11403                           tosl	equ	0xFFD
 11404                           pclatu	equ	0xFFB
 11405                           pclath	equ	0xFFA
 11406                           tblptru	equ	0xFF8
 11407                           tblptrh	equ	0xFF7
 11408                           tblptrl	equ	0xFF6
 11409                           tablat	equ	0xFF5
 11410                           prodh	equ	0xFF4
 11411                           prodl	equ	0xFF3
 11412                           intcon	equ	0xFF2
 11413                           intcon2	equ	0xFF1
 11414                           indf0	equ	0xFEF
 11415                           postinc0	equ	0xFEE
 11416                           fsr0h	equ	0xFEA
 11417                           fsr0l	equ	0xFE9
 11418                           wreg	equ	0xFE8
 11419                           fsr1h	equ	0xFE2
 11420                           fsr1l	equ	0xFE1
 11421                           indf2	equ	0xFDF
 11422                           postinc2	equ	0xFDE
 11423                           postdec2	equ	0xFDD
 11424                           plusw2	equ	0xFDB
 11425                           fsr2h	equ	0xFDA
 11426                           fsr2l	equ	0xFD9
 11427                           status	equ	0xFD8
 11428                           
 11429                           	psect	temp
 11430  000045                     btemp:
 11431                           	opt stack 0
 11432  000045                     	ds	1
 11433  0000                     int$flags	set	btemp
 11434                           tosu	equ	0xFFF
 11435                           tosh	equ	0xFFE
 11436                           tosl	equ	0xFFD
 11437                           pclatu	equ	0xFFB
 11438                           pclath	equ	0xFFA
 11439                           tblptru	equ	0xFF8
 11440                           tblptrh	equ	0xFF7
 11441                           tblptrl	equ	0xFF6
 11442                           tablat	equ	0xFF5
 11443                           prodh	equ	0xFF4
 11444                           prodl	equ	0xFF3
 11445                           intcon	equ	0xFF2
 11446                           intcon2	equ	0xFF1
 11447                           indf0	equ	0xFEF
 11448                           postinc0	equ	0xFEE
 11449                           fsr0h	equ	0xFEA
 11450                           fsr0l	equ	0xFE9
 11451                           wreg	equ	0xFE8
 11452                           fsr1h	equ	0xFE2
 11453                           fsr1l	equ	0xFE1
 11454                           indf2	equ	0xFDF
 11455                           postinc2	equ	0xFDE
 11456                           postdec2	equ	0xFDD
 11457                           plusw2	equ	0xFDB
 11458                           fsr2h	equ	0xFDA
 11459                           fsr2l	equ	0xFD9
 11460                           status	equ	0xFD8


Data Sizes:
    Strings     28
    Constant    1040
    Data        1
    BSS         1047
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      68
    BANK0           160     15     159
    BANK1           256     12      69
    BANK2           256      0     206
    BANK3           256      0     200
    BANK4           256      0     206
    BANK5           256      0     206

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0
		 -> picture(CODE[272]), oledPutChar@bytes(COMRAM[9]), Buff(BANK0[2]), LEDwriteDisplay@writeBuffer(COMRAM[20]), 
		 -> LEDbegin@writeBuffer(COMRAM[3]), LEDblinkRate@writeBuffer(COMRAM[2]), LEDBsetBrightness@writeBuffer(COMRAM[2]), 

    i2c1_tr_queue.pTrFlag	PTR enum E8795 size(2) Largest target is 0
		 -> Display@status(COMRAM[1]), oledPutChar@status(COMRAM[1]), OLED_command@status(COMRAM[1]), LEDwriteDisplay@status(COMRAM[1]), 
		 -> LEDbegin@status(COMRAM[1]), LEDblinkRate@status(COMRAM[1]), LEDBsetBrightness@status(COMRAM[1]), 

    i2c1_tr_queue.ptrb_list	PTR struct . size(2) Largest target is 0
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 20
		 -> SetData@s(COMRAM[20]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 20
		 -> SetData@s(COMRAM[20]), 

    sp__memmove	PTR void  size(2) Largest target is 9
		 -> oledPutChar@bytes(COMRAM[9]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK4[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK1[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK1[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK1[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK5[206]), input_buffer(BANK4[206]), ring_buffer(BANK2[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK2[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK2[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_2492(BANK1[3]), receiveData@holder(BANK1[3]), rx_buffer(BANK3[200]), 
		 -> ring_buffer(BANK2[206]), NULL(NULL[0]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> ring_buffer(BANK2[206]), NULL(NULL[0]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 40
		 -> receiveArray(BANK1[40]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 40
		 -> receiveArray(BANK1[40]), NULL(NULL[0]), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 0
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 272
		 -> picture(CODE[272]), oledPutChar@bytes(COMRAM[9]), Buff(BANK0[2]), LEDwriteDisplay@writeBuffer(COMRAM[20]), 
		 -> LEDbegin@writeBuffer(COMRAM[3]), LEDblinkRate@writeBuffer(COMRAM[2]), LEDBsetBrightness@writeBuffer(COMRAM[2]), 

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 272
		 -> picture(CODE[272]), oledPutChar@bytes(COMRAM[9]), Buff(BANK0[2]), LEDwriteDisplay@writeBuffer(COMRAM[20]), 
		 -> LEDbegin@writeBuffer(COMRAM[3]), LEDblinkRate@writeBuffer(COMRAM[2]), LEDBsetBrightness@writeBuffer(COMRAM[2]), 

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 272
		 -> picture(CODE[272]), oledPutChar@bytes(COMRAM[9]), Buff(BANK0[2]), LEDwriteDisplay@writeBuffer(COMRAM[20]), 
		 -> LEDbegin@writeBuffer(COMRAM[3]), LEDblinkRate@writeBuffer(COMRAM[2]), LEDBsetBrightness@writeBuffer(COMRAM[2]), 

    i2c1_object.pTrTail.pTrFlag	PTR enum E8795 size(2) Largest target is 1
		 -> Display@status(COMRAM[1]), oledPutChar@status(COMRAM[1]), OLED_command@status(COMRAM[1]), LEDwriteDisplay@status(COMRAM[1]), 
		 -> LEDbegin@status(COMRAM[1]), LEDblinkRate@status(COMRAM[1]), LEDBsetBrightness@status(COMRAM[1]), 

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    F8907.pbuffer	PTR unsigned char  size(2) Largest target is 272
		 -> picture(CODE[272]), oledPutChar@bytes(COMRAM[9]), Buff(BANK0[2]), LEDwriteDisplay@writeBuffer(COMRAM[20]), 
		 -> LEDbegin@writeBuffer(COMRAM[3]), LEDblinkRate@writeBuffer(COMRAM[2]), LEDBsetBrightness@writeBuffer(COMRAM[2]), 

    F8902.pbuffer	PTR unsigned char  size(2) Largest target is 272
		 -> picture(CODE[272]), oledPutChar@bytes(COMRAM[9]), Buff(BANK0[2]), LEDwriteDisplay@writeBuffer(COMRAM[20]), 
		 -> LEDbegin@writeBuffer(COMRAM[3]), LEDblinkRate@writeBuffer(COMRAM[2]), LEDBsetBrightness@writeBuffer(COMRAM[2]), 

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 272
		 -> picture(CODE[272]), oledPutChar@bytes(COMRAM[9]), Buff(BANK0[2]), LEDwriteDisplay@writeBuffer(COMRAM[20]), 
		 -> LEDbegin@writeBuffer(COMRAM[3]), LEDblinkRate@writeBuffer(COMRAM[2]), LEDblinkRate@b(COMRAM[2]), LEDBsetBrightness@writeBuffer(COMRAM[2]), 
		 -> LEDBsetBrightness@b(COMRAM[2]), I2C1_ISR@i2c_address(COMRAM[2]), NULL(NULL[0]), 

    S21$pbuffer	PTR unsigned char  size(2) Largest target is 272
		 -> picture(CODE[272]), oledPutChar@bytes(COMRAM[9]), Buff(BANK0[2]), LEDwriteDisplay@writeBuffer(COMRAM[20]), 
		 -> LEDbegin@writeBuffer(COMRAM[3]), LEDblinkRate@writeBuffer(COMRAM[2]), LEDBsetBrightness@writeBuffer(COMRAM[2]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 272
		 -> picture(CODE[272]), oledPutChar@bytes(COMRAM[9]), Buff(BANK0[2]), LEDwriteDisplay@writeBuffer(COMRAM[20]), 
		 -> LEDbegin@writeBuffer(COMRAM[3]), LEDblinkRate@writeBuffer(COMRAM[2]), LEDBsetBrightness@writeBuffer(COMRAM[2]), 

    p_i2c1_trb_current	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E8795 size(2) Largest target is 1
		 -> Display@status(COMRAM[1]), oledPutChar@status(COMRAM[1]), OLED_command@status(COMRAM[1]), LEDwriteDisplay@status(COMRAM[1]), 
		 -> LEDbegin@status(COMRAM[1]), LEDblinkRate@status(COMRAM[1]), LEDBsetBrightness@status(COMRAM[1]), 

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    S33$pTrFlag	PTR enum E8795 size(2) Largest target is 1
		 -> Display@status(COMRAM[1]), oledPutChar@status(COMRAM[1]), OLED_command@status(COMRAM[1]), LEDwriteDisplay@status(COMRAM[1]), 
		 -> LEDbegin@status(COMRAM[1]), LEDblinkRate@status(COMRAM[1]), LEDBsetBrightness@status(COMRAM[1]), 

    p_i2c1_current.pTrFlag	PTR enum E8795 size(2) Largest target is 1
		 -> Display@status(COMRAM[1]), oledPutChar@status(COMRAM[1]), OLED_command@status(COMRAM[1]), LEDwriteDisplay@status(COMRAM[1]), 
		 -> LEDbegin@status(COMRAM[1]), LEDblinkRate@status(COMRAM[1]), LEDBsetBrightness@status(COMRAM[1]), 

    S33$ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    p_i2c1_current.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[5]), I2C1_MasterWrite@trBlock(BANK0[5]), 

    p_i2c1_current	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[5]), NULL(NULL[0]), 

    S44$pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[5]), 

    i2c1_object.pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[5]), 

    S44$pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[5]), 

    i2c1_object.pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[5]), 


Critical Paths under _main in COMRAM

    _respondECU->_buttonsCollector
    _FastTransfer_buffer_flush->_memset
    _buttonsCollector->_GetButtonState
    _ToSend->_FastTransfer_buffer_put
    _ToSend->_buttonsCollector
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _handleIndicators->_SetLEDOut
    _SetLEDOut->_Off_Led
    _SetLEDOut->_setLED
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _TMR0_ISR->_ReadButtonState
    _I2C1_ISR->_I2C1_Stop
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _sendData->_FastTransfer_buffer_flush
    _ToSend->_buttonsCollector
    _receiveData->_CRCcheck
    _CRCcheck->_crcBufS_get
    _SYSTEM_Initialize->_begin

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _updateComms->_receiveData

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   24144
                     _GetButtonState
                            _GetTime
                  _SYSTEM_Initialize
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   21396
                        _TBbarGraphs
                   _handleIndicators
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    8015
                              _Delay
                             _ToSend
                   _buttonsCollector
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    5704
                                              4 BANK0      5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                              0 BANK0      4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _buttonsCollector                                     9     7      2     386
                                             32 COMRAM     5     3      2
                                              0 BANK0      4     4      0
                     _GetButtonState
 ---------------------------------------------------------------------------------
 (4) _GetButtonState                                       6     4      2     185
                                             26 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1751
                                              4 BANK0      3     1      2
            _FastTransfer_buffer_put
                   _buttonsCollector (ARG)
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     174
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0   10715
                                              9 BANK0      6     6      0
                                              0 BANK1     12    12      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                              0 BANK0      1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                              2 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    10     6      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _handleIndicators                                     7     5      2    2494
                                              0 BANK0      7     5      2
                          _SetLEDOut
 ---------------------------------------------------------------------------------
 (3) _SetLEDOut                                            6     2      4    2191
                                             30 COMRAM     6     2      4
                            _Off_Led
                             _setLED
 ---------------------------------------------------------------------------------
 (4) _setLED                                               4     2      2     493
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _Off_Led                                              4     2      2     955
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _TBbarGraphs                                          4     0      4     172
                                             26 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2563
                     _ADC_Initialize
                 _EUSART1_Initialize
                    _I2C1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (2) _begin                                               13     0     13    1548
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     684
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2    1015
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              2     0      2       0
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    1561
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
               _I2C1_BusCollisionISR
                           _I2C1_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             2     2      0     330
                                              4 COMRAM     2     2      0
                    _ReadButtonState
 ---------------------------------------------------------------------------------
 (9) _ReadButtonState                                      4     2      2     262
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _I2C1_ISR                                             2     2      0      22
                                              3 COMRAM     2     2      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (9) _I2C1_Stop                                            3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) _I2C1_FunctionComplete                                0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C1_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetButtonState
   _GetTime
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _I2C1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
     _begin
       ___awdiv
   _updateComms
     _TBbarGraphs
     _handleIndicators
       _SetLEDOut
         _Off_Led
         _setLED
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _respondECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
         _buttonsCollector (ARG)
           _GetButtonState
       _buttonsCollector
         _GetButtonState
       _sendData
         Absolute function(Fake) *
         _CRC8 *
         _FastTransfer_buffer_flush *
           _memset
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop
   _TMR0_ISR
     _ReadButtonState

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0      CE      15       80.5%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C8      11       78.1%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      C      45       6       27.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      F      9F       4       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     45A       9        0.0%
DATA                 0      0     45A      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Aug 28 23:05:01 2016

      __end_of_FastTransfer_buffer_flush 1C98                   i2_UART_buff_modulo_inc 2034  
                                      _i 00CD                                        _k 00CF  
                           _rx_array_inx 003E                             ___awdiv@sign 0020  
                             Off_Led@led 001B                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                                      l913 190C  
                                    l585 1F3C                                      l921 1ABA  
                                    l994 1DCE                             __CFG_CPB$OFF 000000  
                                    _PR2 000FBB                             __CFG_CPD$OFF 000000  
   FastTransfer_buffer_flush@clearBuffer 00F2                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
                            _TBbarGraphs 21C0            i2UART_buff_modulo_inc@modulus 0003  
                           __CFG_LVP$OFF 000000                         __end_of_I2C1_ISR 0A46  
                                   l1110 0FC0                                     l1155 19A4  
                                   l4050 1F28                                     l4330 1B06  
                                   l4322 1AE8                                     l6002 0FB8  
                                   l4340 1B26                                     l4332 1B0A  
                                   l4316 1AD8                                     l6110 0418  
                                   l4328 1AFE                                     l4344 1B30  
                                   l6112 041E                                     l6104 037A  
                                   l6040 0122                                     l6130 04EC  
                                   l6114 0432                                     l4348 1B3E  
                                   l6140 056E                                     l6132 0506  
                                   l6060 01E8                                     l6036 00F4  
                                   l6044 0126                                     l6142 05BC  
                                   l6134 0520                                     l6216 18C2  
                                   l6136 053A                                     l6128 04D2  
                                   l6144 05D8                                     l6056 01CA  
                                   l6170 067C                                     l6138 0554  
                                   l6154 05E4                                     l6074 022E  
                                   l6058 01E2                                     l5620 17F2  
                                   l6180 06FE                                     l6172 0696  
                                   l6076 0254                                     l6092 02B6  
                                   l6068 0222                                     l5622 1808  
                                   l5630 184A                                     l5606 19A0  
                                   l6182 074C                                     l6174 06B0  
                                   l6238 1D60                                     l5624 181E  
                                   l5616 17C6                                     l6176 06CA  
                                   l6168 0662                                     l6184 0768  
                                   l6096 02DE                                     l6088 0284  
                                   l6192 0774                                     l5712 0D18  
                   receiveData@crcHolder 013F                                     l5650 1744  
                                   l5642 1714                                     l5626 1834  
                                   l5618 17DC                                     l5810 0AB0  
                                   l5730 1464                                     l6178 06E4  
                                   l6258 20B6                                     l5804 0A8C  
                                   l5564 202A                                     l5572 2000  
                                   l5582 1FCE                                     l5654 175C  
                                   l5646 172C                                     l5638 16FC  
                                   l5734 146E                                     l5664 178C  
                                   l5840 0B3A                                     l5832 0B18  
                                   l5592 119C                                     l5578 1FBE  
                                   l5658 1774                                     l5914 0C94  
                                   l5906 0C72                                     l5826 0AF4  
                                   l5818 0AD2                                     l5922 0CB8  
                                   l5682 1DB8                                     l5690 1DD4  
                                   l5746 1502                                     l5762 16B4  
                                   l5754 162E                                     l5586 1130  
                                   l5676 1DA2                                     l5692 1DDA  
                                   l5870 0BC4                                     l5862 0BA2  
                                   l5854 0B80                                     l5950 102A  
                                   l5848 0B5C                                     l5936 1A6E  
                                   l5960 10A0                                     l5952 1044  
                                   l5970 0E64                                     l5954 1060  
                                   l5946 0FF4                                     l5892 0C2C  
                                   l5884 0C0A                                     l5876 0BE8  
                                   l5796 0A6A                                     l5788 0A48  
                                   l5980 0F26                                     l5972 0E8C  
                                   l5964 10DC                                     l5956 106C  
                                   l5948 100E                                     l5958 109A  
                                   l5984 0F3C                                     l5898 0C50  
                                   l5994 0F90                                     l5998 0FB0  
                                   STR_1 7FE3                                     STR_2 7FFC  
                                   STR_3 7FF6                                     STR_4 7FEE  
                                   _CRC8 1D9C                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATC 000F8B  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   u7000 190C                                     u7020 1D5E  
                                   u6240 1ABA                                     u6234 1A8E  
                                   u7107 1F2E                                     u6235 1A88  
                                   u6308 1070                                     u6328 10C4  
                                   u6338 0E68                                     u6258 0FDE  
                                   u6339 0E7C                                     i2l60 07AE  
                                   u6268 0FF8                                     u5910 1934  
                                   u6358 0E90                                     u6518 00FE  
                                   u6278 1012                                     i2l71 0868  
                                   i2l63 082A                                     u6359 0EA4  
                                   u6519 0112                                     i2l72 0878  
                                   u6368 0EAC                                     u6480 00E8  
                                   u6288 102E                                     i2l65 0832  
                                   u6369 0EC0                                     i2l90 098E  
                                   i2l82 08FC                                     i2l66 083A  
                                   u6378 0EC8                                     u6618 01CE  
                                   u6538 012A                                     u6490 00F0  
                                   u6298 1048                                     u6379 0EDC  
                                   u6731 031E                                     u6539 013E  
                                   i2l76 08E8                                     u6388 0EE4  
                                   u6708 02BA                                     u6389 0EF8  
                                   u6709 02CE                                     i2l94 09E2  
                                   i2l86 094C                                     u6558 0148  
                                   u6478 00C4                                     u5950 160E  
                                   u6559 015C                                     u6479 00D8  
                                   u6808 04F0                                     i2l89 097C  
                                   u6818 050A                                     u6658 0232  
                                   u6578 0166                                     u6659 0246  
                                   u6579 017A                                     u5971 0D16  
                                   u6908 0680                                     u6828 0524  
                                   u6588 0180                                     u6589 0194  
                                   u6918 069A                                     u6838 053E  
                                   u6678 0258                                     u6598 019A  
                                   u6679 026E                                     u6599 01AE  
                                   u6928 06B4                                     u6848 0558  
                                   u6970 1898                                     u6938 06CE  
                                   u6858 0572                                     u6698 0288  
                                   u6699 029C                                     u6948 06E8  
                                   u6868 05C0                                     u6788 04BC  
                                   u6958 0702                                     u6798 04D6  
                                   u6968 0750                                     u6888 064C  
                                   u6994 18E4                                     u6898 0666  
                                   u6995 18DC                                     _TMR2 000FBC  
                                   _WPUB 000F61                                     _Buff 00EE  
                                   _main 20AA                          _TMR0_StartTimer 2218  
                                   _time 00D9                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     indf0 000FEF  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     btemp 0045  
                          __CFG_BORV$190 000000                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 0E64                                     start 00B6  
                          __CFG_IESO$OFF 000000                          __end_of_GetTime 2218  
                           ___param_bank 000010                          __end_of_Off_Led 17C4  
         i2UART_buff_modulo_inc@my_value 0005                         _handleIndicators 1882  
                                  ?_CRC8 001B                  __end_of_TMR0_Initialize 212A  
                             _i2c1_state 0039                         __end_of_CRCcheck 0FC2  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 220E  
                     crcBufS_put@address 001D                                    ?_main 0001  
                        __end_of___awdiv 1B48                        __end_of_I2C1_Stop 1E6A  
                                  _T0CON 000FD5                          ___awdiv@divisor 001D  
                                  _T2CON 000FBA                                    _LATA3 007C4B  
                                  _LATC1 007C59                                    _LATA6 007C4E  
                                  _LATA7 007C4F                                    _LATE0 007C68  
                                  _LATE1 007C69                                    _LATE2 007C6A  
                         __CFG_DEBUG$OFF 000000                                    i2l272 0070  
                                  i2l267 004E                                    i2l276 007A  
                                  i2l269 005A                          ___awdiv@counter 001F  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96                                    _Delay 1F1E  
           __end_of_I2C1_BusCollisionISR 221E                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                        ?_buttonsCollector 0021  
                   _EUSART1_Transmit_ISR 1F52                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                      ??_I2C1_Initialize 001B                         __end_of_TMR0_ISR 1F1E  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _begin 1C98  
                         __CFG_EBTRB$OFF 000000                                    _brake 00C7  
                     ??_buttonsCollector 0023                                    _group 0028  
                     __CFG_MCLRE$EXTMCLR 000000                          __end_of_picture 7FE3  
                                  pclath 000FFA                                    tablat 000FF5  
                          ??_Receive_get 0026                     __size_of_crcBufS_get 00F2  
                                  plusw2 000FDB                           begin@stuffpeek 00FB  
                   __size_of_crcBufS_put 00D8                                    status 000FD8  
                         __CFG_HFOFST$ON 000000                             ?_receiveData 0001  
                         SetLEDOut@state 0021                        ??_ReadButtonState 0003  
                         __CFG_PBADEN$ON 000000                             __end_of_CRC8 1DE6  
                        CRCcheck@SentCRC 00F2                          __initialization 1B48  
             __end_of_EUSART1_Initialize 1EE2                             __end_of_main 20CC  
                             ToSend@what 00F4                                   ??_CRC8 001E  
            ?_INTERRUPT_InterruptManager 0001                         __end_of_OledFont 7ED3  
                            _i2c1_object 00B8                                   ??_main 0026  
                          __activetblptr 000002                         __end_of_Send_put 1FB4  
              __size_ofi2_UART_buff_size 0016                                   ?_Delay 001B  
                  ?_EUSART1_Transmit_ISR 0001            FastTransfer_buffer_put@towhat 0024  
                          ?_Receive_peek 0001                                   ?_begin 00F0  
                __end_of_TMR0_StartTimer 221C                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                                   _ADCON2 000FC0  
                                 _ADRESH 000FC4                                   _ADRESL 000FC3  
                       ___awdiv@dividend 001B                                   _ANSELA 000F38  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                                   _ANSELE 000F3C  
                        i2_UART_buff_get 19A8                                   _RC1STA 000FAB  
                                 i2l1155 1A36                          i2_UART_buff_put 122A  
                                 i2l1186 2150                           __CFG_WDTEN$OFF 000000  
                                 Delay@x 001E                                   i2l5054 0064  
            UART_buff_modulo_inc@modulus 001D                                   i2l4450 137A  
                                 i2l4356 2054                                   i2l4460 13FC  
                                 i2l4452 1394                                   i2l4454 13AE  
                                 i2l4446 1346                                   i2l4712 124A  
                                 i2l4392 20E8                                   i2l4456 13C8  
                                 i2l4448 1360                                   i2l4464 1416  
                                 i2l4386 1E64                                   i2l4458 13E2  
                                 i2l4732 1A32                                   i2l4820 090E  
                                 i2l4812 08F6                                   i2l4718 12B6  
                                 i2l4840 0996                                   i2l4760 080C  
                                 i2l4860 09F4                                   i2l4844 099E  
                                 i2l4828 0954                                   i2l4772 084A  
                                 i2l4856 09E8                                   i2l4792 08A6  
                                 i2l4858 09EC                                   i2l4778 0862  
                                 i2l4866 0A00                                   i2l4890 1F02  
                         _GetButtonState 205E                                   i2l4878 1F7C  
                                 i2l4886 1EF2                                   i2l4896 1F14  
                                 _RCREG1 000FAE                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                                ??_GetTime 001D  
                                 _TX1STA 000FAC                                   _TXREG1 000FAD  
                              ??_Off_Led 001D                       __size_of_SetLEDOut 02AA  
                         __CFG_XINST$OFF 000000                                   _ToSend 20EE  
                    __end_of_Receive_get 2200                         crcBufS_get@_this 001B  
            ??_FastTransfer_buffer_flush 0023                           _p_i2c1_current 002C  
                          _output_buffer 0500                         crcBufS_get@space 001E  
                              ??___awdiv 001F                                CRC8@tempI 0020  
                         __CFG_STVREN$ON 000000                         ?_TMR0_Initialize 0001  
                                 _setLED 17C4                                   _memset 1FB4  
                              ?_I2C1_ISR 0001                                   clear_0 1B4E  
                                 clear_1 1B5A                                   clear_2 1B66  
                                 clear_3 1B72                                   clear_4 1B7E  
                                 clear_5 1B8A                                   clear_6 1B96  
                       ___awdiv@quotient 0021                                   _rx_len 003F  
                       __end_of_sendData 1110                             __pdataCOMRAM 0044  
                          Send_put@_data 00F0                             __mediumconst 7BD2  
                         ??_Receive_peek 001F                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 0174             __end_of_UART_buff_modulo_inc 2034  
                 __end_of_GetButtonState 2086            __size_of_INTERRUPT_Initialize 0012  
                        SetLEDOut@lednum 001F                        _SYSTEM_Initialize 1BBC  
                             __accesstop 0060                  __end_of__initialization 1BAE  
                              ?_CRCcheck 0001                       ?_SYSTEM_Initialize 0001  
                          ___rparam_used 000001                  ?i2_UART_buff_modulo_inc 0001  
                         _i2c1_trb_count 002A                             ?_updateComms 0001  
                           TBbarGraphs@b 001D                             TBbarGraphs@t 001B  
                          __end_of_Delay 1F52                    _I2C1_FunctionComplete 20CC  
                   _I2C1_BusCollisionISR 221C                           __pcstackCOMRAM 0001  
                     _crcBufS_status_put 1624                      ??_SYSTEM_Initialize 0025  
                       crcBufS_put@_this 001B                            __end_of_begin 1CF6  
                              ?_TMR0_ISR 0001   __end_of_FastTransfer_buffer_modulo_inc 200A  
__size_of_FastTransfer_buffer_modulo_inc 002A           _FastTransfer_buffer_modulo_inc 1FE0  
                             ??_I2C1_ISR 0004             FastTransfer_buffer_put@_this 0021  
                            ToSend@where 00F6                       UART_buff_get@_this 0021  
                    ?_crcBufS_status_put 001B                    __end_of_UART_buff_get 19A8  
                 ??_EUSART1_Transmit_ISR 000C                    __end_of_UART_buff_put 122A  
                      __end_of_SetLEDOut 0CF0                                  ??_Delay 001D  
                __end_ofi2_UART_buff_get 1A3A                  __end_ofi2_UART_buff_put 1344  
                           ?_TBbarGraphs 001B              __end_of_EUSART1_Receive_ISR 2166  
              _FastTransfer_buffer_flush 1C2C                                  CRC8@crc 0021  
                                CRC8@len 001D                                  CRC8@sum 001E  
                                ??_begin 0023                         ?_TMR0_StartTimer 0001  
                        ?_GetButtonState 001B                __end_of_SYSTEM_Initialize 1C2C  
               __end_of_handleIndicators 1916                   receiveData@holder_2492 013C  
                    _addressErrorCounter 00C3                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                             __pbssBANK5 0500                          __CFG_PLLCFG$OFF 000000  
                            _Receive_get 21F2                               ??_CRCcheck 0026  
                   ??_crcBufS_status_put 001F           __end_ofi2_UART_buff_modulo_inc 205E  
                             __pnvCOMRAM 0042                        begin@givenAddress 00F3  
                __size_of_UART_buff_init 001E                  __size_of_UART_buff_peek 0024  
                __size_of_UART_buff_size 0016                                ?_Send_put 0001  
                  ?_I2C1_BusCollisionISR 0001                     __size_of_receiveData 06BE  
                                ?_ToSend 00F4                       __CFG_CCP2MX$PORTC1 000000  
                             ??_TMR0_ISR 0005                       __CFG_CCP3MX$PORTB5 000000  
    FastTransfer_buffer_modulo_inc@value 001B                          _I2C1_Initialize 1E6A  
                                ?_setLED 001B                                  ?_memset 001B  
                             _crc_buffer 0128                                TMR0_ISR@x 0005  
                __size_of_ADC_Initialize 0018                       UART_buff_put@_this 0021  
                       i2_UART_buff_size 21AA              i2UART_buff_modulo_inc@value 0001  
                                _OSCCON2 000FD2                                _I2C1_Stop 1E2C  
                      _Receive_available 217E             UART_buff_modulo_inc@my_value 001F  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                                  _SSP1ADD 000FC8  
                    sendData@whereToSend 00F5                          _ReadButtonState 1344  
                    _receiveArrayAddress 00D1                                  _SSP1BUF 000FC9  
                     ?_Receive_available 001D                               begin@error 00F4  
                                _GetTime 220E                                  _Off_Led 16FA  
                    ??_Receive_available 001F                                ?_sendData 0001  
                      _alignErrorCounter 00C5                          __CFG_PWRTEN$OFF 000000  
              __size_of_buttonsCollector 008A                   ?_I2C1_FunctionComplete 0001  
                             ??_Send_put 0026                                  __Hparam 0000  
                                __Lparam 0000                          __size_of_ToSend 001E  
                     _p_i2c1_trb_current 002E                     __end_of_Receive_peek 21F2  
                              _AKNAKsend 0037                                  ___awdiv 1AC4  
                   _UART_buff_modulo_inc 200A                                  _calc_CS 0038  
                                __pcinit 1B48                          __size_of_setLED 00BE  
                        __size_of_memset 002C                                  __ramtop 0600  
                       i2UART_buff_get@c 000B                                  __ptext0 20AA  
                                __ptext1 1D4C                                  __ptext2 1DE6  
                                __ptext3 0FC2                                  __ptext4 154C  
                                __ptext5 1C2C                                  __ptext6 1A3A  
                                __ptext7 205E                                  __ptext8 20EE  
                                __ptext9 0CF0                                _T0CONbits 000FD5  
                       i2UART_buff_put@c 0009                    _OSCILLATOR_Initialize 2200  
              __end_of_Receive_available 2194                                _T2CONbits 000FBA  
                _FastTransfer_buffer_put 0CF0                    CRCcheck@calculatedCRC 00F3  
                     _EUSART1_Initialize 1EA6                         ?i2_UART_buff_get 0007  
               ??_PIN_MANAGER_Initialize 001B                                  _picture 7ED3  
                       ?i2_UART_buff_put 0007                               ?_I2C1_Stop 0001  
           crcBufS_status_put@wantedTime 0023                                  _timeOut 00DB  
                          ??_crcBufS_get 001F                            ??_crcBufS_put 0020  
             __size_of_SYSTEM_Initialize 0070                     I2C1_ISR@pi2c_buf_ptr 0026  
                   end_of_initialization 1BAE                                Delay@wait 001B  
                    ?_EUSART1_Initialize 0001                                _LED_array 0088  
                                memset@c 001D                                  memset@n 001F  
                                memset@p 0021                            __Lmediumconst 7BD2  
                 ??_I2C1_BusCollisionISR 0001                               ??_sendData 00F4  
                __end_of_I2C1_Initialize 1EA6                    ?_UART_buff_modulo_inc 001B  
                   __size_of_updateComms 0050                                  postdec2 000FDD  
                                postinc0 000FEE                                  postinc2 000FDE  
                             _respondECU 1DE6                    ReadButtonState@btnnum 0001  
                       begin@stufftosend 00F5                      CRCcheck@arrayHolder 00F4  
                   ??_EUSART1_Initialize 0025                                _PORTAbits 000F80  
                              _PORTBbits 000F81                                _PORTDbits 000F83  
                __end_of_ReadButtonState 145A                   _dataAdressErrorCounter 00CB  
                      __size_of_I2C1_ISR 02CE                               _rx_address 003D  
                              _TRISAbits 000F92                                _TRISCbits 000F94  
                   __size_of_TBbarGraphs 0012        I2C1_ISR@i2c_10bit_address_restart 0036  
                           begin@maxSize 00F2       __size_of_FastTransfer_buffer_flush 006C  
                  i2UART_buff_size@_this 0001                           _UART_buff_init 212A  
                         _UART_buff_peek 2086                           _UART_buff_size 2194  
                    __end_of_crcBufS_get 154C                      __end_of_crcBufS_put 1624  
                      __size_of_CRCcheck 015E                            _moduleAddress 003B  
                   _timer0ReloadVal16bit 0042                               CRCcheck@rt 00F7  
                         __end_of_ToSend 210C             __end_of_INTERRUPT_Initialize 21E4  
           _TMR2_DefaultInterruptHandler 000000                          _crcErrorCounter 00C9  
                I2C1_MasterWrite@trBlock 00E4                        crcBufS_put@oldCRC 001E  
                          __pidataCOMRAM 221E                        __size_of_TMR0_ISR 003C  
               I2C1_Stop@completion_code 0003                           _ADC_Initialize 2166  
              ??_FastTransfer_buffer_put 00F0                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_setLED 1882                           __end_of_memset 1FE0  
                      crcBufS_put@status 001F                  buttonsCollector@sendVal 00F0  
                           receiveData@r 0143               __size_of_Receive_available 0016  
                           receiveData@u 0141                         ??_GetButtonState 001D  
                    start_initialization 1B48                              ??_I2C1_Stop 0001  
               __size_of_TMR0_Initialize 001E          __size_of_PIN_MANAGER_Initialize 0056  
                  crcBufS_get@wantedTime 00F0                                _SetLEDOut 0A46  
                      ?_handleIndicators 00F0                   __end_of_UART_buff_init 2148  
                 __end_of_UART_buff_peek 20AA                           UART_buff_get@c 0025  
                 __end_of_UART_buff_size 21AA                             ?_Receive_get 0001  
                         UART_buff_put@c 0023                       ??_handleIndicators 00F2  
                  __size_of_Receive_peek 000E                         _buttonsCollector 1A3A  
               __end_ofi2_UART_buff_size 21C0                         ?_I2C1_Initialize 0001  
                               ??_ToSend 0026                   ??_UART_buff_modulo_inc 001F  
                               CRC8@data 001B                          crcBufS_get@time 001D  
                      __size_of_Send_put 0030                              ?_respondECU 0001  
                 __end_of_ADC_Initialize 217E                                 ??_setLED 001D  
                               ??_memset 0021                        handleIndicators@i 00F5  
                       ?_ReadButtonState 0001                              __pbssCOMRAM 0026  
          __size_of_EUSART1_Transmit_ISR 0032                            __pcstackBANK0 00F0  
                          __pcstackBANK1 0139                            _i2c1_tr_queue 00E9  
                           _Receive_peek 21E4                               ?_SetLEDOut 001F  
                    UART_buff_init@_this 0023                              _crcBufS_get 145A  
                    UART_buff_peek@_this 001B                              _crcBufS_put 154C  
                        ?_UART_buff_init 0023                          ?_UART_buff_peek 001B  
                        ?_UART_buff_size 001B                  ??_I2C1_FunctionComplete 0001  
           __size_of_EUSART1_Receive_ISR 001E                                 ?_GetTime 001B  
                          ??_receiveData 00F9              __size_of_crcBufS_status_put 00D6  
                             sendData@CS 00F6                                 ?_Off_Led 001B  
               __size_of_TMR0_StartTimer 0004                   __size_of_UART_buff_get 0092  
                 __size_of_UART_buff_put 011A                   _PIN_MANAGER_Initialize 1CF6  
                      __size_of_sendData 014E                                __pintcode 0008  
                          __pmediumconst 7BD2                                 ?___awdiv 001B  
                        ?_ADC_Initialize 0001                                 _I2C1_ISR 0778  
           ??_INTERRUPT_InterruptManager 000D                     i2UART_buff_get@_this 0007  
                               _BAUD1CON 000FB8                        buttonsCollector@i 00F2  
                         __size_of_Delay 0034                                _butnarray 00B0  
                         __size_of_begin 005E                      __size_of_respondECU 0046  
                   _INTERRUPT_Initialize 21D2                     GetButtonState@btnnum 001B  
                           _receiveArray 0100                              _LEDNUM_ENAB 0098  
                 I2C1_MasterRead@trBlock 00DF                        ??_TMR0_Initialize 001B  
                               _CRCcheck 0E64                                 _LATCbits 000F8B  
                               _LEDState 00A4                      UART_buff_size@_this 001B  
                               _IPR1bits 000F9F                                 _IPR2bits 000FA2  
                               _PIE1bits 000F9D                                 _PIE2bits 000FA0  
    __size_of_INTERRUPT_InterruptManager 00AE                                 _PIR1bits 000F9E  
                               _PIR2bits 000FA1                                 i2u460_40 0974  
                               i2u372_40 135A                                 i2u372_46 135C  
                               i2u460_47 096A                                 i2u445_40 19C6  
                               i2u373_40 1374                                 i2u373_46 1376  
                               i2u462_40 09C2                                 i2u374_40 138E  
                               i2u374_46 1390                                 i2u462_47 09B6  
                               i2u375_40 13A8                                 i2u375_46 13AA  
                               i2u376_40 13C2                                 i2u376_46 13C4  
                               i2u465_40 1F6C                                 i2u377_40 13DC  
                               i2u377_46 13DE                                 i2u378_40 13F6  
                               i2u378_46 13F8                                 i2u379_40 1410  
                               i2u379_46 1412                      begin@stuffavailable 00F9  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 0778                                 _SSP1CON1 000FC6  
                               _SSP1CON3 000FCB                                 _TMR0_ISR 1EE2  
                               _SSP1STAT 000FC7           FastTransfer_buffer_flush@_this 00F0  
                           _input_buffer 0400                                _rx_buffer 0300  
                             _ADCON0bits 000FC2                     i2UART_buff_put@_this 0007  
                          _UART_buff_get 1916                            _UART_buff_put 1110  
               ??i2_UART_buff_modulo_inc 0005                              ??_SetLEDOut 0023  
                            _INTCON2bits 000FF1                    ?_INTERRUPT_Initialize 0001  
                      _sendStructAddress 00D3                 __size_ofi2_UART_buff_get 0092  
               __size_ofi2_UART_buff_put 011A                                 _OledFont 7BD3  
                       __size_of_GetTime 000A                            ??_updateComms 0026  
                   __size_of_Receive_get 000E                         __size_of_Off_Led 00CA  
                               __Hrparam 0000                                 _Send_put 1F84  
          __size_of_I2C1_BusCollisionISR 0002                                 __Lrparam 0000  
                     __CFG_BOREN$SBORDIS 000000                                setLED@led 001B  
                 I2C1_ISR@i2c_bytes_left 00BF                        __CFG_P2BMX$PORTD2 000000  
                ??_OSCILLATOR_Initialize 001B                        ??_TMR0_StartTimer 001B  
                       __size_of___awdiv 0084              __size_of_EUSART1_Initialize 003C  
                    begin@stufftoreceive 00F7                           ?_UART_buff_get 0021  
                         ?_UART_buff_put 0021                              CRC8@extract 001F  
               __end_of_buttonsCollector 1AC4                                sendData@i 00F7  
                          ??_TBbarGraphs 001F                      I2C1_ISR@i2c_address 0040  
               crcBufS_status_put@status 001E                                 __ptext10 1FE0  
                               __ptext11 1F1E                                 __ptext20 21F2  
                               __ptext12 00BA                                 __ptext21 1916  
                               __ptext13 1F84                                 __ptext30 21C0  
                               __ptext22 200A                                 __ptext14 1110  
                               __ptext31 1BBC                                 __ptext23 217E  
                               __ptext15 21E4                                 __ptext40 1EA6  
                               __ptext32 1C98                                 __ptext24 2194  
                               __ptext16 2086                                 __ptext41 212A  
                               __ptext33 1AC4                                 __ptext25 1D9C  
                               __ptext17 0E64                                 __ptext50 20CC  
                               __ptext42 1FB4                                 __ptext34 210C  
                               __ptext26 1882                                 __ptext18 1624  
                               __ptext51 221C                                 __ptext43 2166  
                               __ptext35 2218                                 __ptext27 0A46  
                               __ptext19 145A                                 __ptext52 1F52  
                               __ptext44 220E                                 __ptext36 1CF6  
                               __ptext28 17C4                                 __ptext53 21AA  
                               __ptext37 2200                                 __ptext29 16FA  
                               __ptext54 19A8                                 __ptext46 1EE2  
                               __ptext38 21D2                                 __ptext55 2148  
                               __ptext47 1344                                 __ptext39 1E6A  
                               __ptext56 122A                                 __ptext48 0778  
                               __ptext57 2034                                 __ptext49 1E2C  
                               __ptext58 0000                             _SSP1CON1bits 000FC6  
                           _SSP1CON2bits 000FC5                            __size_of_CRC8 004A  
                               begin@ptr 00F0                  EUSART1_Receive_ISR@data 000C  
                          _returnAddress 003C                            __size_of_main 0022  
                            _receiveData 00BA                           _Transmit_stall 0044  
                               _sendData 0FC2                        ?i2_UART_buff_size 0001  
                             _RC1STAbits 000FAB                             ??_respondECU 0026  
                     ??i2_UART_buff_size 0003                                 int$flags 0045  
              __size_of_handleIndicators 0094            handleIndicators@oldIndicators 00DD  
                           _serial_write 0034                                 _throttle 00D7  
                    __end_of_updateComms 1D9C       __end_of_INTERRUPT_InterruptManager 00B6  
             _INTERRUPT_InterruptManager 0008                      _EUSART1_Receive_ISR 2148  
                      receiveData@holder 0139                               _INTCONbits 000FF2  
              UART_buff_modulo_inc@value 001B       handleIndicators@receivedIndicators 00F0  
                       ??_UART_buff_init 0025                         ??_UART_buff_peek 001D  
                       ??_UART_buff_size 001D                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 0030  
        __size_ofi2_UART_buff_modulo_inc 002A                             ?_crcBufS_get 001B  
                           ?_crcBufS_put 001B                                 intlevel2 0000  
                crcBufS_status_put@_this 001B                       __end_of_respondECU 1E2C  
                    __end_of_TBbarGraphs 21D2                     ?_EUSART1_Receive_ISR 0001  
 FastTransfer_buffer_modulo_inc@my_value 001F           FastTransfer_buffer_put@towhere 0023  
                ?_PIN_MANAGER_Initialize 0001           __size_of_I2C1_FunctionComplete 0022  
          __end_of_I2C1_FunctionComplete 20EE             __end_of_EUSART1_Transmit_ISR 1F84  
                            _ring_buffer 0200                         ??_ADC_Initialize 001B  
             ?_FastTransfer_buffer_flush 00F0                        ??i2_UART_buff_get 0009  
                            _serial_peek 00D5                              _serial_read 0032  
                      ??i2_UART_buff_put 000A                 ?_FastTransfer_buffer_put 0021  
          __size_of_UART_buff_modulo_inc 002A                 __size_of_I2C1_Initialize 003C  
                        ??_UART_buff_get 0023                          ??_UART_buff_put 0024  
  FastTransfer_buffer_modulo_inc@modulus 001D                   crcBufS_status_put@time 001D  
                        _TMR0_Initialize 210C                receiveData@crcHolder_2493 0140  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 003A  
               __size_of_ReadButtonState 0116               __end_of_crcBufS_status_put 16FA  
                  ??_EUSART1_Receive_ISR 000C           __end_of_PIN_MANAGER_Initialize 1D4C  
       ??_FastTransfer_buffer_modulo_inc 001F          ?_FastTransfer_buffer_modulo_inc 001B  
                __size_of_GetButtonState 0028                       __size_of_I2C1_Stop 003E  
                          _displaybuffer 0060                        __CFG_FOSC$INTIO67 000000  
                  _TMR2_InterruptHandler 00C1                              _updateComms 1D4C  
