

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Sep 30 09:25:27 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    66  0000                     
    67                           	psect	idataCOMRAM
    68  001862                     __pidataCOMRAM:
    69                           	opt stack 0
    70                           
    71                           ;initializer for _Transmit_stall
    72  001862  01                 	db	1
    73  0000                     _ANSELA	set	3896
    74  0000                     _ANSELC	set	3898
    75  0000                     _ANSELD	set	3899
    76  0000                     _BAUD1CON	set	4024
    77  0000                     _INTCONbits	set	4082
    78  0000                     _IPR1bits	set	3999
    79  0000                     _IPR2bits	set	4002
    80  0000                     _LATAbits	set	3977
    81  0000                     _LATCbits	set	3979
    82  0000                     _LATDbits	set	3980
    83  0000                     _OSCCON	set	4051
    84  0000                     _OSCCON2	set	4050
    85  0000                     _OSCTUNE	set	3995
    86  0000                     _PIE1bits	set	3997
    87  0000                     _PIR1bits	set	3998
    88  0000                     _RC1STA	set	4011
    89  0000                     _RC1STAbits	set	4011
    90  0000                     _RCONbits	set	4048
    91  0000                     _RCREG1	set	4014
    92  0000                     _SPBRG1	set	4015
    93  0000                     _SPBRGH1	set	4016
    94  0000                     _T0CON	set	4053
    95  0000                     _T0CONbits	set	4053
    96  0000                     _TMR0H	set	4055
    97  0000                     _TMR0L	set	4054
    98  0000                     _TRISAbits	set	3986
    99  0000                     _TRISCbits	set	3988
   100  0000                     _TRISDbits	set	3989
   101  0000                     _TX1STA	set	4012
   102  0000                     _TXREG1	set	4013
   103                           
   104                           ; #config settings
   105  0000                     
   106                           	psect	cinit
   107  001328                     __pcinit:
   108                           	opt stack 0
   109  001328                     start_initialization:
   110                           	opt stack 0
   111  001328                     __initialization:
   112                           	opt stack 0
   113                           
   114                           ; Clear objects allocated to BANK4 (206 bytes)
   115  001328  EE04  F000         	lfsr	0,__pbssBANK4
   116  00132C  0ECE               	movlw	206
   117  00132E                     clear_0:
   118  00132E  6AEE               	clrf	postinc0,c
   119  001330  06E8               	decf	wreg,f,c
   120  001332  E1FD               	bnz	clear_0
   121                           
   122                           ; Clear objects allocated to BANK3 (206 bytes)
   123  001334  EE03  F000         	lfsr	0,__pbssBANK3
   124  001338  0ECE               	movlw	206
   125  00133A                     clear_1:
   126  00133A  6AEE               	clrf	postinc0,c
   127  00133C  06E8               	decf	wreg,f,c
   128  00133E  E1FD               	bnz	clear_1
   129                           
   130                           ; Clear objects allocated to BANK2 (200 bytes)
   131  001340  EE02  F000         	lfsr	0,__pbssBANK2
   132  001344  0EC8               	movlw	200
   133  001346                     clear_2:
   134  001346  6AEE               	clrf	postinc0,c
   135  001348  06E8               	decf	wreg,f,c
   136  00134A  E1FD               	bnz	clear_2
   137                           
   138                           ; Clear objects allocated to BANK1 (206 bytes)
   139  00134C  EE01  F000         	lfsr	0,__pbssBANK1
   140  001350  0ECE               	movlw	206
   141  001352                     clear_3:
   142  001352  6AEE               	clrf	postinc0,c
   143  001354  06E8               	decf	wreg,f,c
   144  001356  E1FD               	bnz	clear_3
   145                           
   146                           ; Clear objects allocated to BANK0 (35 bytes)
   147  001358  EE00  F060         	lfsr	0,__pbssBANK0
   148  00135C  0E23               	movlw	35
   149  00135E                     clear_4:
   150  00135E  6AEE               	clrf	postinc0,c
   151  001360  06E8               	decf	wreg,f,c
   152  001362  E1FD               	bnz	clear_4
   153                           
   154                           ; Clear objects allocated to COMRAM (30 bytes)
   155  001364  EE00  F026         	lfsr	0,__pbssCOMRAM
   156  001368  0E1E               	movlw	30
   157  00136A                     clear_5:
   158  00136A  6AEE               	clrf	postinc0,c
   159  00136C  06E8               	decf	wreg,f,c
   160  00136E  E1FD               	bnz	clear_5
   161                           
   162                           ; Initialize objects allocated to COMRAM (1 bytes)
   163                           ; load TBLPTR registers with __pidataCOMRAM
   164  001370  0E62               	movlw	low __pidataCOMRAM
   165  001372  6EF6               	movwf	tblptrl,c
   166  001374  0E18               	movlw	high __pidataCOMRAM
   167  001376  6EF7               	movwf	tblptrh,c
   168  001378  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   169  00137A  6EF8               	movwf	tblptru,c
   170  00137C  0009               	tblrd		*+	;fetch initializer
   171  00137E  CFF5 F044          	movff	tablat,__pdataCOMRAM
   172  001382                     end_of_initialization:
   173                           	opt stack 0
   174  001382                     __end_of__initialization:
   175                           	opt stack 0
   176  001382  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   177  001384  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   178  001386  0E00               	movlw	low (__Lmediumconst shr (0+16))
   179  001388  6EF8               	movwf	tblptru,c
   180  00138A  0100               	movlb	0
   181  00138C  EF08  F00B         	goto	_main	;jump to C main() function
   182                           tblptru	equ	0xFF8
   183                           tblptrh	equ	0xFF7
   184                           tblptrl	equ	0xFF6
   185                           tablat	equ	0xFF5
   186                           postinc0	equ	0xFEE
   187                           wreg	equ	0xFE8
   188                           
   189                           	psect	bssCOMRAM
   190  000026                     __pbssCOMRAM:
   191                           	opt stack 0
   192  000026                     _alignErrorCounter:
   193                           	opt stack 0
   194  000026                     	ds	2
   195  000028                     _crcErrorCounter:
   196                           	opt stack 0
   197  000028                     	ds	2
   198  00002A                     _group:
   199                           	opt stack 0
   200  00002A                     	ds	2
   201  00002C                     _receiveArrayAddress:
   202                           	opt stack 0
   203  00002C                     	ds	2
   204  00002E                     _sendStructAddress:
   205                           	opt stack 0
   206  00002E                     	ds	2
   207  000030                     _serial_available:
   208                           	opt stack 0
   209  000030                     	ds	2
   210  000032                     _serial_peek:
   211                           	opt stack 0
   212  000032                     	ds	2
   213  000034                     _serial_read:
   214                           	opt stack 0
   215  000034                     	ds	2
   216  000036                     _serial_write:
   217                           	opt stack 0
   218  000036                     	ds	2
   219  000038                     _timer0ReloadVal16bit:
   220                           	opt stack 0
   221  000038                     	ds	2
   222  00003A                     _AKNAKsend:
   223                           	opt stack 0
   224  00003A                     	ds	1
   225  00003B                     _ByteHigh:
   226                           	opt stack 0
   227  00003B                     	ds	1
   228  00003C                     _ByteLow:
   229                           	opt stack 0
   230  00003C                     	ds	1
   231  00003D                     _calc_CS:
   232                           	opt stack 0
   233  00003D                     	ds	1
   234  00003E                     _maxDataAddress:
   235                           	opt stack 0
   236  00003E                     	ds	1
   237  00003F                     _moduleAddress:
   238                           	opt stack 0
   239  00003F                     	ds	1
   240  000040                     _returnAddress:
   241                           	opt stack 0
   242  000040                     	ds	1
   243  000041                     _rx_address:
   244                           	opt stack 0
   245  000041                     	ds	1
   246  000042                     _rx_array_inx:
   247                           	opt stack 0
   248  000042                     	ds	1
   249  000043                     _rx_len:
   250                           	opt stack 0
   251  000043                     	ds	1
   252                           tblptru	equ	0xFF8
   253                           tblptrh	equ	0xFF7
   254                           tblptrl	equ	0xFF6
   255                           tablat	equ	0xFF5
   256                           postinc0	equ	0xFEE
   257                           wreg	equ	0xFE8
   258                           
   259                           	psect	dataCOMRAM
   260  000044                     __pdataCOMRAM:
   261                           	opt stack 0
   262  000044                     _Transmit_stall:
   263                           	opt stack 0
   264  000044                     	ds	1
   265                           tblptru	equ	0xFF8
   266                           tblptrh	equ	0xFF7
   267                           tblptrl	equ	0xFF6
   268                           tablat	equ	0xFF5
   269                           postinc0	equ	0xFEE
   270                           wreg	equ	0xFE8
   271                           
   272                           	psect	bssBANK0
   273  000060                     __pbssBANK0:
   274                           	opt stack 0
   275  000060                     _time:
   276                           	opt stack 0
   277  000060                     	ds	4
   278  000064                     _addressErrorCounter:
   279                           	opt stack 0
   280  000064                     	ds	2
   281  000066                     _dataAdressErrorCounter:
   282                           	opt stack 0
   283  000066                     	ds	2
   284  000068                     _crc_buffer:
   285                           	opt stack 0
   286  000068                     	ds	17
   287  000079                     _receiveArray:
   288                           	opt stack 0
   289  000079                     	ds	10
   290                           tblptru	equ	0xFF8
   291                           tblptrh	equ	0xFF7
   292                           tblptrl	equ	0xFF6
   293                           tablat	equ	0xFF5
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           
   297                           	psect	bssBANK1
   298  000100                     __pbssBANK1:
   299                           	opt stack 0
   300  000100                     _ring_buffer:
   301                           	opt stack 0
   302  000100                     	ds	206
   303                           tblptru	equ	0xFF8
   304                           tblptrh	equ	0xFF7
   305                           tblptrl	equ	0xFF6
   306                           tablat	equ	0xFF5
   307                           postinc0	equ	0xFEE
   308                           wreg	equ	0xFE8
   309                           
   310                           	psect	bssBANK2
   311  000200                     __pbssBANK2:
   312                           	opt stack 0
   313  000200                     _rx_buffer:
   314                           	opt stack 0
   315  000200                     	ds	200
   316                           tblptru	equ	0xFF8
   317                           tblptrh	equ	0xFF7
   318                           tblptrl	equ	0xFF6
   319                           tablat	equ	0xFF5
   320                           postinc0	equ	0xFEE
   321                           wreg	equ	0xFE8
   322                           
   323                           	psect	bssBANK3
   324  000300                     __pbssBANK3:
   325                           	opt stack 0
   326  000300                     _input_buffer:
   327                           	opt stack 0
   328  000300                     	ds	206
   329                           tblptru	equ	0xFF8
   330                           tblptrh	equ	0xFF7
   331                           tblptrl	equ	0xFF6
   332                           tablat	equ	0xFF5
   333                           postinc0	equ	0xFEE
   334                           wreg	equ	0xFE8
   335                           
   336                           	psect	bssBANK4
   337  000400                     __pbssBANK4:
   338                           	opt stack 0
   339  000400                     _output_buffer:
   340                           	opt stack 0
   341  000400                     	ds	206
   342                           tblptru	equ	0xFF8
   343                           tblptrh	equ	0xFF7
   344                           tblptrl	equ	0xFF6
   345                           tablat	equ	0xFF5
   346                           postinc0	equ	0xFEE
   347                           wreg	equ	0xFE8
   348                           
   349                           	psect	cstackBANK0
   350  000083                     __pcstackBANK0:
   351                           	opt stack 0
   352  000083                     ??_FastTransfer_buffer_put:
   353  000083                     Send_put@_data:
   354                           	opt stack 0
   355  000083                     begin@ptr:
   356                           	opt stack 0
   357  000083                     FastTransfer_buffer_flush@_this:
   358                           	opt stack 0
   359  000083                     crcBufS_get@wantedTime:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x0
   363  000083                     	ds	2
   364  000085                     begin@maxSize:
   365                           	opt stack 0
   366  000085                     CRCcheck@SentCRC:
   367                           	opt stack 0
   368  000085                     ToSend@what:
   369                           	opt stack 0
   370  000085                     FastTransfer_buffer_flush@clearBuffer:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x2
   374  000085                     	ds	1
   375  000086                     begin@givenAddress:
   376                           	opt stack 0
   377  000086                     CRCcheck@calculatedCRC:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0x3
   381  000086                     	ds	1
   382  000087                     ??_sendData:
   383  000087                     begin@error:
   384                           	opt stack 0
   385  000087                     ToSend@where:
   386                           	opt stack 0
   387  000087                     CRCcheck@arrayHolder:
   388                           	opt stack 0
   389                           
   390                           ; 3 bytes @ 0x4
   391  000087                     	ds	1
   392  000088                     sendData@whereToSend:
   393                           	opt stack 0
   394  000088                     begin@stufftosend:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x5
   398  000088                     	ds	1
   399  000089                     sendData@CS:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x6
   403  000089                     	ds	1
   404  00008A                     begin@stufftoreceive:
   405                           	opt stack 0
   406  00008A                     sendData@i:
   407                           	opt stack 0
   408  00008A                     CRCcheck@rt:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x7
   412  00008A                     	ds	2
   413  00008C                     ??_receiveData:
   414  00008C                     ??_respondECU:
   415  00008C                     begin@stuffavailable:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x9
   419  00008C                     	ds	2
   420  00008E                     begin@stuffpeek:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0xB
   424  00008E                     	ds	4
   425  000092                     receiveData@holder:
   426                           	opt stack 0
   427                           
   428                           ; 3 bytes @ 0xF
   429  000092                     	ds	3
   430  000095                     receiveData@holder_329:
   431                           	opt stack 0
   432                           
   433                           ; 3 bytes @ 0x12
   434  000095                     	ds	3
   435  000098                     receiveData@crcHolder:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x15
   439  000098                     	ds	1
   440  000099                     receiveData@crcHolder_330:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0x16
   444  000099                     	ds	1
   445  00009A                     receiveData@u:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x17
   449  00009A                     	ds	2
   450  00009C                     receiveData@r:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x19
   454  00009C                     	ds	2
   455                           tblptru	equ	0xFF8
   456                           tblptrh	equ	0xFF7
   457                           tblptrl	equ	0xFF6
   458                           tablat	equ	0xFF5
   459                           postinc0	equ	0xFEE
   460                           wreg	equ	0xFE8
   461                           
   462                           	psect	cstackCOMRAM
   463  000001                     __pcstackCOMRAM:
   464                           	opt stack 0
   465  000001                     ?i2_UART_buff_size:
   466                           	opt stack 0
   467  000001                     ?i2_UART_buff_modulo_inc:
   468                           	opt stack 0
   469  000001                     i2UART_buff_size@_this:
   470                           	opt stack 0
   471  000001                     i2UART_buff_modulo_inc@value:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x0
   475  000001                     	ds	2
   476  000003                     i2UART_buff_modulo_inc@modulus:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x2
   480  000003                     	ds	2
   481  000005                     i2UART_buff_modulo_inc@my_value:
   482                           	opt stack 0
   483                           
   484                           ; 2 bytes @ 0x4
   485  000005                     	ds	2
   486  000007                     i2UART_buff_put@_this:
   487                           	opt stack 0
   488  000007                     i2UART_buff_get@_this:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x6
   492  000007                     	ds	2
   493  000009                     ??i2_UART_buff_get:
   494  000009                     i2UART_buff_put@c:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0x8
   498  000009                     	ds	1
   499  00000A                     ??i2_UART_buff_put:
   500                           
   501                           ; 1 bytes @ 0x9
   502  00000A                     	ds	1
   503  00000B                     i2UART_buff_get@c:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0xA
   507  00000B                     	ds	1
   508  00000C                     EUSART1_Receive_ISR@data:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0xB
   512  00000C                     	ds	1
   513  00000D                     ??_INTERRUPT_InterruptManager:
   514                           
   515                           ; 1 bytes @ 0xC
   516  00000D                     	ds	14
   517  00001B                     ??_ReadFaults:
   518  00001B                     ?_FastTransfer_buffer_modulo_inc:
   519                           	opt stack 0
   520  00001B                     ?_UART_buff_modulo_inc:
   521                           	opt stack 0
   522  00001B                     ?_UART_buff_size:
   523                           	opt stack 0
   524  00001B                     ?___awdiv:
   525                           	opt stack 0
   526  00001B                     ?_GetTime:
   527                           	opt stack 0
   528  00001B                     GetFaults@num:
   529                           	opt stack 0
   530  00001B                     CRC8@data:
   531                           	opt stack 0
   532  00001B                     FastTransfer_buffer_modulo_inc@value:
   533                           	opt stack 0
   534  00001B                     crcBufS_put@_this:
   535                           	opt stack 0
   536  00001B                     crcBufS_status_put@_this:
   537                           	opt stack 0
   538  00001B                     crcBufS_get@_this:
   539                           	opt stack 0
   540  00001B                     UART_buff_size@_this:
   541                           	opt stack 0
   542  00001B                     UART_buff_modulo_inc@value:
   543                           	opt stack 0
   544  00001B                     UART_buff_peek@_this:
   545                           	opt stack 0
   546  00001B                     Delay@wait:
   547                           	opt stack 0
   548  00001B                     ___awdiv@dividend:
   549                           	opt stack 0
   550  00001B                     memset@p1:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0x1A
   554  00001B                     	ds	2
   555  00001D                     ??_Delay:
   556  00001D                     ??_UART_buff_peek:
   557  00001D                     ?_Receive_available:
   558                           	opt stack 0
   559  00001D                     CRC8@len:
   560                           	opt stack 0
   561  00001D                     crcBufS_put@address:
   562                           	opt stack 0
   563  00001D                     crcBufS_status_put@time:
   564                           	opt stack 0
   565  00001D                     crcBufS_get@time:
   566                           	opt stack 0
   567  00001D                     FastTransfer_buffer_modulo_inc@modulus:
   568                           	opt stack 0
   569  00001D                     UART_buff_modulo_inc@modulus:
   570                           	opt stack 0
   571  00001D                     ___awdiv@divisor:
   572                           	opt stack 0
   573  00001D                     memset@c:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x1C
   577  00001D                     	ds	1
   578  00001E                     CRC8@sum:
   579                           	opt stack 0
   580  00001E                     crcBufS_put@oldCRC:
   581                           	opt stack 0
   582  00001E                     crcBufS_status_put@status:
   583                           	opt stack 0
   584  00001E                     crcBufS_get@space:
   585                           	opt stack 0
   586  00001E                     Delay@x:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x1D
   590  00001E                     	ds	1
   591  00001F                     ??_crcBufS_get:
   592  00001F                     ??_crcBufS_status_put:
   593  00001F                     CRC8@extract:
   594                           	opt stack 0
   595  00001F                     crcBufS_put@status:
   596                           	opt stack 0
   597  00001F                     ___awdiv@counter:
   598                           	opt stack 0
   599  00001F                     FastTransfer_buffer_modulo_inc@my_value:
   600                           	opt stack 0
   601  00001F                     UART_buff_modulo_inc@my_value:
   602                           	opt stack 0
   603  00001F                     memset@n:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x1E
   607  00001F                     	ds	1
   608  000020                     ??_crcBufS_put:
   609  000020                     CRC8@tempI:
   610                           	opt stack 0
   611  000020                     ___awdiv@sign:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x1F
   615  000020                     	ds	1
   616  000021                     CRC8@crc:
   617                           	opt stack 0
   618  000021                     FastTransfer_buffer_put@_this:
   619                           	opt stack 0
   620  000021                     UART_buff_put@_this:
   621                           	opt stack 0
   622  000021                     UART_buff_get@_this:
   623                           	opt stack 0
   624  000021                     ___awdiv@quotient:
   625                           	opt stack 0
   626  000021                     memset@p:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x20
   630  000021                     	ds	2
   631  000023                     ??_UART_buff_get:
   632  000023                     FastTransfer_buffer_put@towhere:
   633                           	opt stack 0
   634  000023                     UART_buff_put@c:
   635                           	opt stack 0
   636  000023                     crcBufS_status_put@wantedTime:
   637                           	opt stack 0
   638  000023                     UART_buff_init@_this:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0x22
   642  000023                     	ds	1
   643  000024                     ??_UART_buff_put:
   644  000024                     FastTransfer_buffer_put@towhat:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x23
   648  000024                     	ds	1
   649  000025                     UART_buff_get@c:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x24
   653  000025                     	ds	1
   654  000026                     tblptru	equ	0xFF8
   655                           tblptrh	equ	0xFF7
   656                           tblptrl	equ	0xFF6
   657                           tablat	equ	0xFF5
   658                           postinc0	equ	0xFEE
   659                           wreg	equ	0xFE8
   660                           
   661                           ; 1 bytes @ 0x25
   662 ;;
   663 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   664 ;;
   665 ;; *************** function _main *****************
   666 ;; Defined at:
   667 ;;		line 23 in file "Main.c"
   668 ;; Parameters:    Size  Location     Type
   669 ;;		None
   670 ;; Auto vars:     Size  Location     Type
   671 ;;		None
   672 ;; Return value:  Size  Location     Type
   673 ;;                  1    wreg      void 
   674 ;; Registers used:
   675 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   676 ;; Tracked objects:
   677 ;;		On entry : 0/0
   678 ;;		On exit  : 0/0
   679 ;;		Unchanged: 0/0
   680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   681 ;;      Params:         0       0       0       0       0       0       0
   682 ;;      Locals:         0       0       0       0       0       0       0
   683 ;;      Temps:          0       0       0       0       0       0       0
   684 ;;      Totals:         0       0       0       0       0       0       0
   685 ;;Total ram usage:        0 bytes
   686 ;; Hardware stack levels required when called:   10
   687 ;; This function calls:
   688 ;;		_GetTime
   689 ;;		_ReadFaults
   690 ;;		_SetTime
   691 ;;		_Start
   692 ;;		_updateComms
   693 ;; This function is called by:
   694 ;;		Startup code after reset
   695 ;; This function uses a non-reentrant model
   696 ;;
   697                           
   698                           	psect	text0
   699  001610                     __ptext0:
   700                           	opt stack 0
   701  001610                     _main:
   702                           	opt stack 21
   703                           
   704                           ;Main.c: 24: Start();
   705                           
   706                           ;incstack = 0
   707  001610  EC54  F00A         	call	_Start	;wreg free
   708  001614                     l2873:
   709                           
   710                           ;Main.c: 26: updateComms();
   711  001614  EC19  F00C         	call	_updateComms	;wreg free
   712                           
   713                           ;Main.c: 27: if(GetTime() > 5){
   714  001618  EC10  F00C         	call	_GetTime	;wreg free
   715  00161C  BE1E               	btfsc	?_GetTime+3,7,c
   716  00161E  D7FA               	goto	l2873
   717  001620  501E               	movf	?_GetTime+3,w,c
   718  001622  101D               	iorwf	?_GetTime+2,w,c
   719  001624  101C               	iorwf	?_GetTime+1,w,c
   720  001626  E104               	bnz	u3330
   721  001628  0E06               	movlw	6
   722  00162A  5C1B               	subwf	?_GetTime,w,c
   723  00162C  A0D8               	btfss	status,0,c
   724  00162E  D7F2               	goto	l2873
   725  001630                     u3330:
   726                           
   727                           ;Main.c: 28: LATAbits.LATA3 ^= 1;
   728  001630  7689               	btg	3977,3,c	;volatile
   729                           
   730                           ;Main.c: 29: ReadFaults();
   731  001632  ECB3  F007         	call	_ReadFaults	;wreg free
   732                           
   733                           ;Main.c: 30: SetTime();
   734  001636  EC06  F00C         	call	_SetTime	;wreg free
   735  00163A  D7EC               	goto	l2873
   736  00163C                     __end_of_main:
   737                           	opt stack 0
   738                           tblptru	equ	0xFF8
   739                           tblptrh	equ	0xFF7
   740                           tblptrl	equ	0xFF6
   741                           tablat	equ	0xFF5
   742                           postinc0	equ	0xFEE
   743                           wreg	equ	0xFE8
   744                           status	equ	0xFD8
   745                           
   746 ;; *************** function _updateComms *****************
   747 ;; Defined at:
   748 ;;		line 17 in file "Communications.c"
   749 ;; Parameters:    Size  Location     Type
   750 ;;		None
   751 ;; Auto vars:     Size  Location     Type
   752 ;;		None
   753 ;; Return value:  Size  Location     Type
   754 ;;                  1    wreg      void 
   755 ;; Registers used:
   756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   762 ;;      Params:         0       0       0       0       0       0       0
   763 ;;      Locals:         0       0       0       0       0       0       0
   764 ;;      Temps:          0       0       0       0       0       0       0
   765 ;;      Totals:         0       0       0       0       0       0       0
   766 ;;Total ram usage:        0 bytes
   767 ;; Hardware stack levels used:    1
   768 ;; Hardware stack levels required when called:    9
   769 ;; This function calls:
   770 ;;		_receiveData
   771 ;;		_respondECU
   772 ;; This function is called by:
   773 ;;		_main
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           	psect	text1
   778  001832                     __ptext1:
   779                           	opt stack 0
   780  001832                     _updateComms:
   781                           	opt stack 21
   782                           
   783                           ;Communications.c: 18: if (receiveData()) {
   784                           
   785                           ;incstack = 0
   786  001832  EC52  F000         	call	_receiveData	;wreg free
   787  001836  0900               	iorlw	0
   788  001838  B4D8               	btfsc	status,2,c
   789  00183A  0012               	return	
   790                           
   791                           ;Communications.c: 19: respondECU();
   792  00183C  ECC8  F009         	call	_respondECU	;wreg free
   793  001840  0012               	return	
   794  001842                     __end_of_updateComms:
   795                           	opt stack 0
   796                           tblptru	equ	0xFF8
   797                           tblptrh	equ	0xFF7
   798                           tblptrl	equ	0xFF6
   799                           tablat	equ	0xFF5
   800                           postinc0	equ	0xFEE
   801                           wreg	equ	0xFE8
   802                           status	equ	0xFD8
   803                           
   804 ;; *************** function _respondECU *****************
   805 ;; Defined at:
   806 ;;		line 23 in file "Communications.c"
   807 ;; Parameters:    Size  Location     Type
   808 ;;		None
   809 ;; Auto vars:     Size  Location     Type
   810 ;;		None
   811 ;; Return value:  Size  Location     Type
   812 ;;                  1    wreg      void 
   813 ;; Registers used:
   814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   820 ;;      Params:         0       0       0       0       0       0       0
   821 ;;      Locals:         0       0       0       0       0       0       0
   822 ;;      Temps:          0       1       0       0       0       0       0
   823 ;;      Totals:         0       1       0       0       0       0       0
   824 ;;Total ram usage:        1 bytes
   825 ;; Hardware stack levels used:    1
   826 ;; Hardware stack levels required when called:    8
   827 ;; This function calls:
   828 ;;		_Delay
   829 ;;		_GetFaults
   830 ;;		_ToSend
   831 ;;		_sendData
   832 ;; This function is called by:
   833 ;;		_updateComms
   834 ;; This function uses a non-reentrant model
   835 ;;
   836                           
   837                           	psect	text2
   838  001390                     __ptext2:
   839                           	opt stack 0
   840  001390                     _respondECU:
   841                           	opt stack 21
   842                           
   843                           ;Communications.c: 24: LATDbits.LATD4 = 1;
   844                           
   845                           ;incstack = 0
   846  001390  888C               	bsf	3980,4,c	;volatile
   847                           
   848                           ;Communications.c: 25: ToSend(0,8);
   849  001392  0E00               	movlw	0
   850  001394  0100               	movlb	0	; () banked
   851  001396  6F86               	movwf	(ToSend@what+1)& (0+255),b
   852  001398  0E08               	movlw	8
   853  00139A  6F85               	movwf	ToSend@what& (0+255),b
   854  00139C  0E00               	movlw	0
   855  00139E  EC85  F00B         	call	_ToSend
   856                           
   857                           ;Communications.c: 26: ToSend(1,GetFaults(1));
   858  0013A2  0E01               	movlw	1
   859  0013A4  ECDA  F00B         	call	_GetFaults
   860  0013A8  0100               	movlb	0	; () banked
   861  0013AA  6F8C               	movwf	??_respondECU& (0+255),b
   862  0013AC  0100               	movlb	0	; () banked
   863  0013AE  518C               	movf	??_respondECU& (0+255),w,b
   864  0013B0  0100               	movlb	0	; () banked
   865  0013B2  6F85               	movwf	ToSend@what& (0+255),b
   866  0013B4  6B86               	clrf	(ToSend@what+1)& (0+255),b
   867  0013B6  0E01               	movlw	1
   868  0013B8  EC85  F00B         	call	_ToSend
   869                           
   870                           ;Communications.c: 27: ToSend(2,GetFaults(0));
   871  0013BC  0E00               	movlw	0
   872  0013BE  ECDA  F00B         	call	_GetFaults
   873  0013C2  0100               	movlb	0	; () banked
   874  0013C4  6F8C               	movwf	??_respondECU& (0+255),b
   875  0013C6  0100               	movlb	0	; () banked
   876  0013C8  518C               	movf	??_respondECU& (0+255),w,b
   877  0013CA  0100               	movlb	0	; () banked
   878  0013CC  6F85               	movwf	ToSend@what& (0+255),b
   879  0013CE  6B86               	clrf	(ToSend@what+1)& (0+255),b
   880  0013D0  0E02               	movlw	2
   881  0013D2  EC85  F00B         	call	_ToSend
   882                           
   883                           ;Communications.c: 28: Delay(9);
   884  0013D6  0E00               	movlw	0
   885  0013D8  6E1C               	movwf	Delay@wait+1,c
   886  0013DA  0E09               	movlw	9
   887  0013DC  6E1B               	movwf	Delay@wait,c
   888  0013DE  ECBD  F00A         	call	_Delay	;wreg free
   889                           
   890                           ;Communications.c: 29: sendData(1);
   891  0013E2  0E01               	movlw	1
   892  0013E4  EC0F  F005         	call	_sendData
   893                           
   894                           ;Communications.c: 30: Delay(3);
   895  0013E8  0E00               	movlw	0
   896  0013EA  6E1C               	movwf	Delay@wait+1,c
   897  0013EC  0E03               	movlw	3
   898  0013EE  6E1B               	movwf	Delay@wait,c
   899  0013F0  ECBD  F00A         	call	_Delay	;wreg free
   900                           
   901                           ;Communications.c: 31: LATDbits.LATD4 = 0;
   902  0013F4  988C               	bcf	3980,4,c	;volatile
   903  0013F6  0012               	return		;funcret
   904  0013F8                     __end_of_respondECU:
   905                           	opt stack 0
   906                           tblptru	equ	0xFF8
   907                           tblptrh	equ	0xFF7
   908                           tblptrl	equ	0xFF6
   909                           tablat	equ	0xFF5
   910                           postinc0	equ	0xFEE
   911                           wreg	equ	0xFE8
   912                           status	equ	0xFD8
   913                           
   914 ;; *************** function _sendData *****************
   915 ;; Defined at:
   916 ;;		line 108 in file "FastTransfer.c"
   917 ;; Parameters:    Size  Location     Type
   918 ;;  whereToSend     1    wreg     unsigned char 
   919 ;; Auto vars:     Size  Location     Type
   920 ;;  whereToSend     1    5[BANK0 ] unsigned char 
   921 ;;  i               2    7[BANK0 ] int 
   922 ;;  CS              1    6[BANK0 ] unsigned char 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   932 ;;      Params:         0       0       0       0       0       0       0
   933 ;;      Locals:         0       4       0       0       0       0       0
   934 ;;      Temps:          0       1       0       0       0       0       0
   935 ;;      Totals:         0       5       0       0       0       0       0
   936 ;;Total ram usage:        5 bytes
   937 ;; Hardware stack levels used:    1
   938 ;; Hardware stack levels required when called:    7
   939 ;; This function calls:
   940 ;;		Absolute function
   941 ;;		_CRC8
   942 ;;		_FastTransfer_buffer_flush
   943 ;;		_Send_put
   944 ;;		_crcBufS_put
   945 ;; This function is called by:
   946 ;;		_respondECU
   947 ;; This function uses a non-reentrant model
   948 ;;
   949                           
   950                           	psect	text3
   951  000A1E                     __ptext3:
   952                           	opt stack 0
   953  000A1E                     _sendData:
   954                           	opt stack 21
   955                           
   956                           ;incstack = 0
   957                           ;sendData@whereToSend stored from wreg
   958  000A1E  0100               	movlb	0	; () banked
   959  000A20  6F88               	movwf	sendData@whereToSend& (0+255),b
   960                           
   961                           ;FastTransfer.c: 111: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
   962  000A22  C02E  F01B         	movff	_sendStructAddress,CRC8@data
   963  000A26  C02F  F01C         	movff	_sendStructAddress+1,CRC8@data+1
   964  000A2A  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
   965  000A2E  EC7A  F00A         	call	_CRC8	;wreg free
   966  000A32  0100               	movlb	0	; () banked
   967  000A34  6F89               	movwf	sendData@CS& (0+255),b
   968                           
   969                           ; BSR set to: 0
   970                           ;FastTransfer.c: 113: serial_write(0x06);
   971  000A36  D801               	call	u2588
   972  000A38  D00B               	goto	l2587
   973  000A3A                     u2588:
   974  000A3A  0005               	push	
   975  000A3C  6EFA               	movwf	pclath,c
   976  000A3E  5036               	movf	_serial_write,w,c
   977  000A40  6EFD               	movwf	tosl,c
   978  000A42  5037               	movf	_serial_write+1,w,c
   979  000A44  6EFE               	movwf	tosh,c
   980  000A46  50F8               	movf	tblptru,w,c
   981  000A48  6EFF               	movwf	tosu,c
   982  000A4A  50FA               	movf	pclath,w,c
   983  000A4C  0E06               	movlw	6
   984  000A4E  0012               	return		;indir
   985  000A50                     l2587:
   986                           
   987                           ;FastTransfer.c: 114: serial_write(0x85);
   988  000A50  D801               	call	u2598
   989  000A52  D00B               	goto	l2589
   990  000A54                     u2598:
   991  000A54  0005               	push	
   992  000A56  6EFA               	movwf	pclath,c
   993  000A58  5036               	movf	_serial_write,w,c
   994  000A5A  6EFD               	movwf	tosl,c
   995  000A5C  5037               	movf	_serial_write+1,w,c
   996  000A5E  6EFE               	movwf	tosh,c
   997  000A60  50F8               	movf	tblptru,w,c
   998  000A62  6EFF               	movwf	tosu,c
   999  000A64  50FA               	movf	pclath,w,c
  1000  000A66  0E85               	movlw	133
  1001  000A68  0012               	return		;indir
  1002  000A6A                     l2589:
  1003                           
  1004                           ;FastTransfer.c: 115: serial_write(whereToSend);
  1005  000A6A  D801               	call	u2608
  1006  000A6C  D00C               	goto	l2591
  1007  000A6E                     u2608:
  1008  000A6E  0005               	push	
  1009  000A70  6EFA               	movwf	pclath,c
  1010  000A72  5036               	movf	_serial_write,w,c
  1011  000A74  6EFD               	movwf	tosl,c
  1012  000A76  5037               	movf	_serial_write+1,w,c
  1013  000A78  6EFE               	movwf	tosh,c
  1014  000A7A  50F8               	movf	tblptru,w,c
  1015  000A7C  6EFF               	movwf	tosu,c
  1016  000A7E  50FA               	movf	pclath,w,c
  1017  000A80  0100               	movlb	0	; () banked
  1018  000A82  5188               	movf	sendData@whereToSend& (0+255),w,b
  1019  000A84  0012               	return		;indir
  1020  000A86                     l2591:
  1021                           
  1022                           ;FastTransfer.c: 116: serial_write(moduleAddress);
  1023  000A86  D801               	call	u2618
  1024  000A88  D00B               	goto	l2593
  1025  000A8A                     u2618:
  1026  000A8A  0005               	push	
  1027  000A8C  6EFA               	movwf	pclath,c
  1028  000A8E  5036               	movf	_serial_write,w,c
  1029  000A90  6EFD               	movwf	tosl,c
  1030  000A92  5037               	movf	_serial_write+1,w,c
  1031  000A94  6EFE               	movwf	tosh,c
  1032  000A96  50F8               	movf	tblptru,w,c
  1033  000A98  6EFF               	movwf	tosu,c
  1034  000A9A  50FA               	movf	pclath,w,c
  1035  000A9C  503F               	movf	_moduleAddress,w,c
  1036  000A9E  0012               	return		;indir
  1037  000AA0                     l2593:
  1038                           
  1039                           ;FastTransfer.c: 117: serial_write(ring_buffer.count);
  1040  000AA0  D801               	call	u2628
  1041  000AA2  D00C               	goto	l2595
  1042  000AA4                     u2628:
  1043  000AA4  0005               	push	
  1044  000AA6  6EFA               	movwf	pclath,c
  1045  000AA8  5036               	movf	_serial_write,w,c
  1046  000AAA  6EFD               	movwf	tosl,c
  1047  000AAC  5037               	movf	_serial_write+1,w,c
  1048  000AAE  6EFE               	movwf	tosh,c
  1049  000AB0  50F8               	movf	tblptru,w,c
  1050  000AB2  6EFF               	movwf	tosu,c
  1051  000AB4  50FA               	movf	pclath,w,c
  1052  000AB6  0101               	movlb	1	; () banked
  1053  000AB8  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1054  000ABA  0012               	return		;indir
  1055  000ABC                     l2595:
  1056                           
  1057                           ;FastTransfer.c: 121: int i;
  1058                           ;FastTransfer.c: 122: for (i = 0; i < ring_buffer.count; i++) {
  1059  000ABC  0E00               	movlw	0
  1060  000ABE  0100               	movlb	0	; () banked
  1061  000AC0  6F8B               	movwf	(sendData@i+1)& (0+255),b
  1062  000AC2  0E00               	movlw	0
  1063  000AC4  6F8A               	movwf	sendData@i& (0+255),b
  1064  000AC6  D018               	goto	l2601
  1065  000AC8                     l2597:
  1066                           
  1067                           ; BSR set to: 0
  1068                           ;FastTransfer.c: 123: serial_write(*(sendStructAddress + i));
  1069  000AC8  D801               	call	u2638
  1070  000ACA  D013               	goto	l2599
  1071  000ACC                     u2638:
  1072  000ACC  0005               	push	
  1073  000ACE  6EFA               	movwf	pclath,c
  1074  000AD0  5036               	movf	_serial_write,w,c
  1075  000AD2  6EFD               	movwf	tosl,c
  1076  000AD4  5037               	movf	_serial_write+1,w,c
  1077  000AD6  6EFE               	movwf	tosh,c
  1078  000AD8  50F8               	movf	tblptru,w,c
  1079  000ADA  6EFF               	movwf	tosu,c
  1080  000ADC  50FA               	movf	pclath,w,c
  1081  000ADE  0100               	movlb	0	; () banked
  1082  000AE0  518A               	movf	sendData@i& (0+255),w,b
  1083  000AE2  242E               	addwf	_sendStructAddress,w,c
  1084  000AE4  6ED9               	movwf	fsr2l,c
  1085  000AE6  0100               	movlb	0	; () banked
  1086  000AE8  518B               	movf	(sendData@i+1)& (0+255),w,b
  1087  000AEA  202F               	addwfc	_sendStructAddress+1,w,c
  1088  000AEC  6EDA               	movwf	fsr2h,c
  1089  000AEE  50DF               	movf	indf2,w,c
  1090  000AF0  0012               	return		;indir
  1091  000AF2                     l2599:
  1092  000AF2  0100               	movlb	0	; () banked
  1093  000AF4  4B8A               	infsnz	sendData@i& (0+255),f,b
  1094  000AF6  2B8B               	incf	(sendData@i+1)& (0+255),f,b
  1095  000AF8                     l2601:
  1096                           
  1097                           ; BSR set to: 0
  1098  000AF8  0101               	movlb	1	; () banked
  1099  000AFA  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1100  000AFC  0100               	movlb	0	; () banked
  1101  000AFE  5D8A               	subwf	sendData@i& (0+255),w,b
  1102  000B00  0100               	movlb	0	; () banked
  1103  000B02  518B               	movf	(sendData@i+1)& (0+255),w,b
  1104  000B04  0A80               	xorlw	128
  1105  000B06  0100               	movlb	0	; () banked
  1106  000B08  6F87               	movwf	??_sendData& (0+255),b
  1107  000B0A  0101               	movlb	1	; () banked
  1108  000B0C  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  1109  000B0E  0A80               	xorlw	128
  1110  000B10  0100               	movlb	0	; () banked
  1111  000B12  5987               	subwfb	??_sendData& (0+255),w,b
  1112  000B14  A0D8               	btfss	status,0,c
  1113  000B16  D7D8               	goto	l2597
  1114                           
  1115                           ; BSR set to: 0
  1116                           ;FastTransfer.c: 124: }
  1117                           ;FastTransfer.c: 127: serial_write(CS);
  1118                           
  1119                           ; BSR set to: 0
  1120  000B18  D801               	call	u2658
  1121  000B1A  D00C               	goto	l2605
  1122  000B1C                     u2658:
  1123  000B1C  0005               	push	
  1124  000B1E  6EFA               	movwf	pclath,c
  1125  000B20  5036               	movf	_serial_write,w,c
  1126  000B22  6EFD               	movwf	tosl,c
  1127  000B24  5037               	movf	_serial_write+1,w,c
  1128  000B26  6EFE               	movwf	tosh,c
  1129  000B28  50F8               	movf	tblptru,w,c
  1130  000B2A  6EFF               	movwf	tosu,c
  1131  000B2C  50FA               	movf	pclath,w,c
  1132  000B2E  0100               	movlb	0	; () banked
  1133  000B30  5189               	movf	sendData@CS& (0+255),w,b
  1134  000B32  0012               	return		;indir
  1135  000B34                     l2605:
  1136                           
  1137                           ;FastTransfer.c: 130: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1138  000B34  0E68               	movlw	low _crc_buffer
  1139  000B36  6E1B               	movwf	crcBufS_put@_this,c
  1140  000B38  0E00               	movlw	high _crc_buffer
  1141  000B3A  6E1C               	movwf	crcBufS_put@_this+1,c
  1142  000B3C  C088  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1143  000B40  C089  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1144  000B44  0E00               	movlw	0
  1145  000B46  6E1F               	movwf	crcBufS_put@status,c
  1146  000B48  EC47  F007         	call	_crcBufS_put
  1147                           
  1148                           ;FastTransfer.c: 133: FastTransfer_buffer_flush(&ring_buffer, 1);
  1149  000B4C  0E00               	movlw	low _ring_buffer
  1150  000B4E  0100               	movlb	0	; () banked
  1151  000B50  6F83               	movwf	FastTransfer_buffer_flush@_this& (0+255),b
  1152  000B52  0E01               	movlw	high _ring_buffer
  1153  000B54  0100               	movlb	0	; () banked
  1154  000B56  6F84               	movwf	(FastTransfer_buffer_flush@_this+1)& (0+255),b
  1155  000B58  0E00               	movlw	0
  1156  000B5A  0100               	movlb	0	; () banked
  1157  000B5C  6F86               	movwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),b
  1158  000B5E  0E01               	movlw	1
  1159  000B60  6F85               	movwf	FastTransfer_buffer_flush@clearBuffer& (0+255),b
  1160  000B62  EC5E  F009         	call	_FastTransfer_buffer_flush	;wreg free
  1161  000B66  0012               	return		;funcret
  1162  000B68                     __end_of_sendData:
  1163                           	opt stack 0
  1164                           tosu	equ	0xFFF
  1165                           tosh	equ	0xFFE
  1166                           tosl	equ	0xFFD
  1167                           pclath	equ	0xFFA
  1168                           tblptru	equ	0xFF8
  1169                           tblptrh	equ	0xFF7
  1170                           tblptrl	equ	0xFF6
  1171                           tablat	equ	0xFF5
  1172                           postinc0	equ	0xFEE
  1173                           wreg	equ	0xFE8
  1174                           indf2	equ	0xFDF
  1175                           fsr2h	equ	0xFDA
  1176                           fsr2l	equ	0xFD9
  1177                           status	equ	0xFD8
  1178                           
  1179 ;; *************** function _crcBufS_put *****************
  1180 ;; Defined at:
  1181 ;;		line 377 in file "FastTransfer.c"
  1182 ;; Parameters:    Size  Location     Type
  1183 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1184 ;;		 -> crc_buffer(17), 
  1185 ;;  address         1   28[COMRAM] unsigned char 
  1186 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1187 ;;  status          1   30[COMRAM] unsigned char 
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;		None
  1190 ;; Return value:  Size  Location     Type
  1191 ;;                  1    wreg      void 
  1192 ;; Registers used:
  1193 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1194 ;; Tracked objects:
  1195 ;;		On entry : 0/0
  1196 ;;		On exit  : 0/0
  1197 ;;		Unchanged: 0/0
  1198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1199 ;;      Params:         5       0       0       0       0       0       0
  1200 ;;      Locals:         0       0       0       0       0       0       0
  1201 ;;      Temps:          2       0       0       0       0       0       0
  1202 ;;      Totals:         7       0       0       0       0       0       0
  1203 ;;Total ram usage:        7 bytes
  1204 ;; Hardware stack levels used:    1
  1205 ;; Hardware stack levels required when called:    4
  1206 ;; This function calls:
  1207 ;;		Nothing
  1208 ;; This function is called by:
  1209 ;;		_sendData
  1210 ;; This function uses a non-reentrant model
  1211 ;;
  1212                           
  1213                           	psect	text4
  1214  000E8E                     __ptext4:
  1215                           	opt stack 0
  1216  000E8E                     _crcBufS_put:
  1217                           	opt stack 23
  1218                           
  1219                           ;FastTransfer.c: 378: _this->buf[_this->head] = address;
  1220                           
  1221                           ;incstack = 0
  1222  000E8E  EE20 F00F          	lfsr	2,15
  1223  000E92  501B               	movf	crcBufS_put@_this,w,c
  1224  000E94  26D9               	addwf	fsr2l,f,c
  1225  000E96  501C               	movf	crcBufS_put@_this+1,w,c
  1226  000E98  22DA               	addwfc	fsr2h,f,c
  1227  000E9A  CFDE F020          	movff	postinc2,??_crcBufS_put
  1228  000E9E  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1229  000EA2  5020               	movf	??_crcBufS_put,w,c
  1230  000EA4  241B               	addwf	crcBufS_put@_this,w,c
  1231  000EA6  6ED9               	movwf	fsr2l,c
  1232  000EA8  5021               	movf	??_crcBufS_put+1,w,c
  1233  000EAA  201C               	addwfc	crcBufS_put@_this+1,w,c
  1234  000EAC  6EDA               	movwf	fsr2h,c
  1235  000EAE  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1236                           
  1237                           ;FastTransfer.c: 379: _this->head++;
  1238  000EB2  EE20 F00F          	lfsr	2,15
  1239  000EB6  501B               	movf	crcBufS_put@_this,w,c
  1240  000EB8  26D9               	addwf	fsr2l,f,c
  1241  000EBA  501C               	movf	crcBufS_put@_this+1,w,c
  1242  000EBC  22DA               	addwfc	fsr2h,f,c
  1243  000EBE  2ADE               	incf	postinc2,f,c
  1244  000EC0  0E00               	movlw	0
  1245  000EC2  22DD               	addwfc	postdec2,f,c
  1246                           
  1247                           ;FastTransfer.c: 380: _this->buf[_this->head] = oldCRC;
  1248  000EC4  EE20 F00F          	lfsr	2,15
  1249  000EC8  501B               	movf	crcBufS_put@_this,w,c
  1250  000ECA  26D9               	addwf	fsr2l,f,c
  1251  000ECC  501C               	movf	crcBufS_put@_this+1,w,c
  1252  000ECE  22DA               	addwfc	fsr2h,f,c
  1253  000ED0  CFDE F020          	movff	postinc2,??_crcBufS_put
  1254  000ED4  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1255  000ED8  5020               	movf	??_crcBufS_put,w,c
  1256  000EDA  241B               	addwf	crcBufS_put@_this,w,c
  1257  000EDC  6ED9               	movwf	fsr2l,c
  1258  000EDE  5021               	movf	??_crcBufS_put+1,w,c
  1259  000EE0  201C               	addwfc	crcBufS_put@_this+1,w,c
  1260  000EE2  6EDA               	movwf	fsr2h,c
  1261  000EE4  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1262                           
  1263                           ;FastTransfer.c: 381: _this->head++;
  1264  000EE8  EE20 F00F          	lfsr	2,15
  1265  000EEC  501B               	movf	crcBufS_put@_this,w,c
  1266  000EEE  26D9               	addwf	fsr2l,f,c
  1267  000EF0  501C               	movf	crcBufS_put@_this+1,w,c
  1268  000EF2  22DA               	addwfc	fsr2h,f,c
  1269  000EF4  2ADE               	incf	postinc2,f,c
  1270  000EF6  0E00               	movlw	0
  1271  000EF8  22DD               	addwfc	postdec2,f,c
  1272                           
  1273                           ;FastTransfer.c: 382: _this->buf[_this->head] = status;
  1274  000EFA  EE20 F00F          	lfsr	2,15
  1275  000EFE  501B               	movf	crcBufS_put@_this,w,c
  1276  000F00  26D9               	addwf	fsr2l,f,c
  1277  000F02  501C               	movf	crcBufS_put@_this+1,w,c
  1278  000F04  22DA               	addwfc	fsr2h,f,c
  1279  000F06  CFDE F020          	movff	postinc2,??_crcBufS_put
  1280  000F0A  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1281  000F0E  5020               	movf	??_crcBufS_put,w,c
  1282  000F10  241B               	addwf	crcBufS_put@_this,w,c
  1283  000F12  6ED9               	movwf	fsr2l,c
  1284  000F14  5021               	movf	??_crcBufS_put+1,w,c
  1285  000F16  201C               	addwfc	crcBufS_put@_this+1,w,c
  1286  000F18  6EDA               	movwf	fsr2h,c
  1287  000F1A  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1288                           
  1289                           ;FastTransfer.c: 383: _this->head++;
  1290  000F1E  EE20 F00F          	lfsr	2,15
  1291  000F22  501B               	movf	crcBufS_put@_this,w,c
  1292  000F24  26D9               	addwf	fsr2l,f,c
  1293  000F26  501C               	movf	crcBufS_put@_this+1,w,c
  1294  000F28  22DA               	addwfc	fsr2h,f,c
  1295  000F2A  2ADE               	incf	postinc2,f,c
  1296  000F2C  0E00               	movlw	0
  1297  000F2E  22DD               	addwfc	postdec2,f,c
  1298                           
  1299                           ;FastTransfer.c: 384: if (_this->head >= (5 * 3)) {
  1300  000F30  EE20 F00F          	lfsr	2,15
  1301  000F34  501B               	movf	crcBufS_put@_this,w,c
  1302  000F36  26D9               	addwf	fsr2l,f,c
  1303  000F38  501C               	movf	crcBufS_put@_this+1,w,c
  1304  000F3A  22DA               	addwfc	fsr2h,f,c
  1305  000F3C  0E01               	movlw	1
  1306  000F3E  BEDB               	btfsc	plusw2,7,c
  1307  000F40  0012               	return	
  1308  000F42  0E01               	movlw	1
  1309  000F44  50DB               	movf	plusw2,w,c
  1310  000F46  E104               	bnz	u2490
  1311  000F48  0E0F               	movlw	15
  1312  000F4A  5CDE               	subwf	postinc2,w,c
  1313  000F4C  A0D8               	btfss	status,0,c
  1314  000F4E  0012               	return	
  1315  000F50                     u2490:
  1316                           
  1317                           ;FastTransfer.c: 385: _this->head = 0;
  1318  000F50  EE20 F00F          	lfsr	2,15
  1319  000F54  501B               	movf	crcBufS_put@_this,w,c
  1320  000F56  26D9               	addwf	fsr2l,f,c
  1321  000F58  501C               	movf	crcBufS_put@_this+1,w,c
  1322  000F5A  22DA               	addwfc	fsr2h,f,c
  1323  000F5C  0E00               	movlw	0
  1324  000F5E  6EDE               	movwf	postinc2,c
  1325  000F60  0E00               	movlw	0
  1326  000F62  6EDD               	movwf	postdec2,c
  1327  000F64  0012               	return	
  1328  000F66                     __end_of_crcBufS_put:
  1329                           	opt stack 0
  1330                           tosu	equ	0xFFF
  1331                           tosh	equ	0xFFE
  1332                           tosl	equ	0xFFD
  1333                           pclath	equ	0xFFA
  1334                           tblptru	equ	0xFF8
  1335                           tblptrh	equ	0xFF7
  1336                           tblptrl	equ	0xFF6
  1337                           tablat	equ	0xFF5
  1338                           postinc0	equ	0xFEE
  1339                           wreg	equ	0xFE8
  1340                           indf2	equ	0xFDF
  1341                           postinc2	equ	0xFDE
  1342                           postdec2	equ	0xFDD
  1343                           plusw2	equ	0xFDB
  1344                           fsr2h	equ	0xFDA
  1345                           fsr2l	equ	0xFD9
  1346                           status	equ	0xFD8
  1347                           
  1348 ;; *************** function _FastTransfer_buffer_flush *****************
  1349 ;; Defined at:
  1350 ;;		line 317 in file "FastTransfer.c"
  1351 ;; Parameters:    Size  Location     Type
  1352 ;;  _this           2    0[BANK0 ] PTR struct ringBufS
  1353 ;;		 -> ring_buffer(206), 
  1354 ;;  clearBuffer     2    2[BANK0 ] const int 
  1355 ;; Auto vars:     Size  Location     Type
  1356 ;;		None
  1357 ;; Return value:  Size  Location     Type
  1358 ;;                  1    wreg      void 
  1359 ;; Registers used:
  1360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1361 ;; Tracked objects:
  1362 ;;		On entry : 0/0
  1363 ;;		On exit  : 0/0
  1364 ;;		Unchanged: 0/0
  1365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1366 ;;      Params:         0       4       0       0       0       0       0
  1367 ;;      Locals:         0       0       0       0       0       0       0
  1368 ;;      Temps:          0       0       0       0       0       0       0
  1369 ;;      Totals:         0       4       0       0       0       0       0
  1370 ;;Total ram usage:        4 bytes
  1371 ;; Hardware stack levels used:    1
  1372 ;; Hardware stack levels required when called:    5
  1373 ;; This function calls:
  1374 ;;		_memset
  1375 ;; This function is called by:
  1376 ;;		_sendData
  1377 ;; This function uses a non-reentrant model
  1378 ;;
  1379                           
  1380                           	psect	text5
  1381  0012BC                     __ptext5:
  1382                           	opt stack 0
  1383  0012BC                     _FastTransfer_buffer_flush:
  1384                           	opt stack 22
  1385                           
  1386                           ;FastTransfer.c: 318: _this->count = 0;
  1387                           
  1388                           ;incstack = 0
  1389  0012BC  0100               	movlb	0	; () banked
  1390  0012BE  EE20 F0CC          	lfsr	2,204
  1391  0012C2  5183               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1392  0012C4  26D9               	addwf	fsr2l,f,c
  1393  0012C6  5184               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1394  0012C8  22DA               	addwfc	fsr2h,f,c
  1395  0012CA  0E00               	movlw	0
  1396  0012CC  6EDE               	movwf	postinc2,c
  1397  0012CE  0E00               	movlw	0
  1398  0012D0  6EDD               	movwf	postdec2,c
  1399                           
  1400                           ;FastTransfer.c: 319: _this->head = 0;
  1401  0012D2  0100               	movlb	0	; () banked
  1402  0012D4  EE20 F0C8          	lfsr	2,200
  1403  0012D8  5183               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1404  0012DA  26D9               	addwf	fsr2l,f,c
  1405  0012DC  5184               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1406  0012DE  22DA               	addwfc	fsr2h,f,c
  1407  0012E0  0E00               	movlw	0
  1408  0012E2  6EDE               	movwf	postinc2,c
  1409  0012E4  0E00               	movlw	0
  1410  0012E6  6EDD               	movwf	postdec2,c
  1411                           
  1412                           ;FastTransfer.c: 320: _this->tail = 0;
  1413  0012E8  0100               	movlb	0	; () banked
  1414  0012EA  EE20 F0CA          	lfsr	2,202
  1415  0012EE  5183               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1416  0012F0  26D9               	addwf	fsr2l,f,c
  1417  0012F2  5184               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1418  0012F4  22DA               	addwfc	fsr2h,f,c
  1419  0012F6  0E00               	movlw	0
  1420  0012F8  6EDE               	movwf	postinc2,c
  1421  0012FA  0E00               	movlw	0
  1422  0012FC  6EDD               	movwf	postdec2,c
  1423                           
  1424                           ; BSR set to: 0
  1425                           ;FastTransfer.c: 321: if (clearBuffer) {
  1426  0012FE  0100               	movlb	0	; () banked
  1427  001300  5185               	movf	FastTransfer_buffer_flush@clearBuffer& (0+255),w,b
  1428  001302  0100               	movlb	0	; () banked
  1429  001304  1186               	iorwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),w,b
  1430  001306  B4D8               	btfsc	status,2,c
  1431  001308  0012               	return	
  1432                           
  1433                           ; BSR set to: 0
  1434                           ;FastTransfer.c: 322: memset(_this->buf, 0, sizeof (_this->buf));
  1435  00130A  C083  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1436  00130E  C084  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1437  001312  0E00               	movlw	0
  1438  001314  6E1E               	movwf	memset@c+1,c
  1439  001316  0E00               	movlw	0
  1440  001318  6E1D               	movwf	memset@c,c
  1441  00131A  0E00               	movlw	0
  1442  00131C  6E20               	movwf	memset@n+1,c
  1443  00131E  0EC8               	movlw	200
  1444  001320  6E1F               	movwf	memset@n,c
  1445  001322  EC1E  F00B         	call	_memset	;wreg free
  1446  001326  0012               	return	
  1447  001328                     __end_of_FastTransfer_buffer_flush:
  1448                           	opt stack 0
  1449                           tosu	equ	0xFFF
  1450                           tosh	equ	0xFFE
  1451                           tosl	equ	0xFFD
  1452                           pclath	equ	0xFFA
  1453                           tblptru	equ	0xFF8
  1454                           tblptrh	equ	0xFF7
  1455                           tblptrl	equ	0xFF6
  1456                           tablat	equ	0xFF5
  1457                           postinc0	equ	0xFEE
  1458                           wreg	equ	0xFE8
  1459                           indf2	equ	0xFDF
  1460                           postinc2	equ	0xFDE
  1461                           postdec2	equ	0xFDD
  1462                           plusw2	equ	0xFDB
  1463                           fsr2h	equ	0xFDA
  1464                           fsr2l	equ	0xFD9
  1465                           status	equ	0xFD8
  1466                           
  1467 ;; *************** function _ToSend *****************
  1468 ;; Defined at:
  1469 ;;		line 272 in file "FastTransfer.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;  where           1    wreg     unsigned char 
  1472 ;;  what            2    2[BANK0 ] unsigned int 
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;  where           1    4[BANK0 ] unsigned char 
  1475 ;; Return value:  Size  Location     Type
  1476 ;;                  1    wreg      void 
  1477 ;; Registers used:
  1478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1479 ;; Tracked objects:
  1480 ;;		On entry : 0/0
  1481 ;;		On exit  : 0/0
  1482 ;;		Unchanged: 0/0
  1483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1484 ;;      Params:         0       2       0       0       0       0       0
  1485 ;;      Locals:         0       1       0       0       0       0       0
  1486 ;;      Temps:          0       0       0       0       0       0       0
  1487 ;;      Totals:         0       3       0       0       0       0       0
  1488 ;;Total ram usage:        3 bytes
  1489 ;; Hardware stack levels used:    1
  1490 ;; Hardware stack levels required when called:    6
  1491 ;; This function calls:
  1492 ;;		_FastTransfer_buffer_put
  1493 ;; This function is called by:
  1494 ;;		_respondECU
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497                           
  1498                           	psect	text6
  1499  00170A                     __ptext6:
  1500                           	opt stack 0
  1501  00170A                     _ToSend:
  1502                           	opt stack 22
  1503                           
  1504                           ;incstack = 0
  1505                           ;ToSend@where stored from wreg
  1506  00170A  0100               	movlb	0	; () banked
  1507  00170C  6F87               	movwf	ToSend@where& (0+255),b
  1508                           
  1509                           ;FastTransfer.c: 273: FastTransfer_buffer_put(&ring_buffer, where, what);
  1510  00170E  0E00               	movlw	low _ring_buffer
  1511  001710  6E21               	movwf	FastTransfer_buffer_put@_this,c
  1512  001712  0E01               	movlw	high _ring_buffer
  1513  001714  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  1514  001716  C087  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  1515  00171A  C085  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  1516  00171E  C086  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  1517  001722  ECA7  F003         	call	_FastTransfer_buffer_put	;wreg free
  1518  001726  0012               	return		;funcret
  1519  001728                     __end_of_ToSend:
  1520                           	opt stack 0
  1521                           tosu	equ	0xFFF
  1522                           tosh	equ	0xFFE
  1523                           tosl	equ	0xFFD
  1524                           pclath	equ	0xFFA
  1525                           tblptru	equ	0xFF8
  1526                           tblptrh	equ	0xFF7
  1527                           tblptrl	equ	0xFF6
  1528                           tablat	equ	0xFF5
  1529                           postinc0	equ	0xFEE
  1530                           wreg	equ	0xFE8
  1531                           indf2	equ	0xFDF
  1532                           postinc2	equ	0xFDE
  1533                           postdec2	equ	0xFDD
  1534                           plusw2	equ	0xFDB
  1535                           fsr2h	equ	0xFDA
  1536                           fsr2l	equ	0xFD9
  1537                           status	equ	0xFD8
  1538                           
  1539 ;; *************** function _FastTransfer_buffer_put *****************
  1540 ;; Defined at:
  1541 ;;		line 279 in file "FastTransfer.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  1544 ;;		 -> ring_buffer(206), 
  1545 ;;  towhere         1   34[COMRAM] unsigned char 
  1546 ;;  towhat          2   35[COMRAM] unsigned int 
  1547 ;; Auto vars:     Size  Location     Type
  1548 ;;		None
  1549 ;; Return value:  Size  Location     Type
  1550 ;;                  1    wreg      void 
  1551 ;; Registers used:
  1552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1553 ;; Tracked objects:
  1554 ;;		On entry : 0/0
  1555 ;;		On exit  : 0/0
  1556 ;;		Unchanged: 0/0
  1557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1558 ;;      Params:         5       0       0       0       0       0       0
  1559 ;;      Locals:         0       0       0       0       0       0       0
  1560 ;;      Temps:          0       2       0       0       0       0       0
  1561 ;;      Totals:         5       2       0       0       0       0       0
  1562 ;;Total ram usage:        7 bytes
  1563 ;; Hardware stack levels used:    1
  1564 ;; Hardware stack levels required when called:    5
  1565 ;; This function calls:
  1566 ;;		_FastTransfer_buffer_modulo_inc
  1567 ;; This function is called by:
  1568 ;;		_ToSend
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           	psect	text7
  1573  00074E                     __ptext7:
  1574                           	opt stack 0
  1575  00074E                     _FastTransfer_buffer_put:
  1576                           	opt stack 22
  1577                           
  1578                           ;FastTransfer.c: 281: group.integer = towhat;
  1579                           
  1580                           ;incstack = 0
  1581  00074E  C024  F02A         	movff	FastTransfer_buffer_put@towhat,_group
  1582  000752  C025  F02B         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  1583                           
  1584                           ;FastTransfer.c: 283: if (_this->count < (200 - 3)) {
  1585  000756  EE20 F0CC          	lfsr	2,204
  1586  00075A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1587  00075C  26D9               	addwf	fsr2l,f,c
  1588  00075E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1589  000760  22DA               	addwfc	fsr2h,f,c
  1590  000762  0E01               	movlw	1
  1591  000764  BEDB               	btfsc	plusw2,7,c
  1592  000766  D007               	goto	l2483
  1593  000768  0E01               	movlw	1
  1594  00076A  50DB               	movf	plusw2,w,c
  1595  00076C  E103               	bnz	u2511
  1596  00076E  0EC5               	movlw	197
  1597  000770  5CDE               	subwf	postinc2,w,c
  1598  000772  B0D8               	btfsc	status,0,c
  1599  000774                     u2511:
  1600  000774  0012               	return	
  1601  000776                     l2483:
  1602                           
  1603                           ;FastTransfer.c: 284: _this->buf[_this->head] = towhere;
  1604  000776  EE20 F0C8          	lfsr	2,200
  1605  00077A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1606  00077C  26D9               	addwf	fsr2l,f,c
  1607  00077E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1608  000780  22DA               	addwfc	fsr2h,f,c
  1609  000782  CFDE F083          	movff	postinc2,??_FastTransfer_buffer_put
  1610  000786  CFDD F084          	movff	postdec2,??_FastTransfer_buffer_put+1
  1611  00078A  0100               	movlb	0	; () banked
  1612  00078C  5183               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1613  00078E  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1614  000790  6ED9               	movwf	fsr2l,c
  1615  000792  0100               	movlb	0	; () banked
  1616  000794  5184               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1617  000796  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1618  000798  6EDA               	movwf	fsr2h,c
  1619  00079A  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  1620                           
  1621                           ; BSR set to: 0
  1622                           ;FastTransfer.c: 285: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1623  00079E  EE20 F0C8          	lfsr	2,200
  1624  0007A2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1625  0007A4  26D9               	addwf	fsr2l,f,c
  1626  0007A6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1627  0007A8  22DA               	addwfc	fsr2h,f,c
  1628  0007AA  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1629  0007AE  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1630  0007B2  0E00               	movlw	0
  1631  0007B4  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1632  0007B6  0EC8               	movlw	200
  1633  0007B8  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1634  0007BA  EC34  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1635  0007BE  EE20 F0C8          	lfsr	2,200
  1636  0007C2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1637  0007C4  26D9               	addwf	fsr2l,f,c
  1638  0007C6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1639  0007C8  22DA               	addwfc	fsr2h,f,c
  1640  0007CA  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1641  0007CE  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1642                           
  1643                           ;FastTransfer.c: 286: ++_this->count;
  1644  0007D2  EE20 F0CC          	lfsr	2,204
  1645  0007D6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1646  0007D8  26D9               	addwf	fsr2l,f,c
  1647  0007DA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1648  0007DC  22DA               	addwfc	fsr2h,f,c
  1649  0007DE  2ADE               	incf	postinc2,f,c
  1650  0007E0  0E00               	movlw	0
  1651  0007E2  22DD               	addwfc	postdec2,f,c
  1652                           
  1653                           ;FastTransfer.c: 287: _this->buf[_this->head] = group.parts[0];
  1654  0007E4  EE20 F0C8          	lfsr	2,200
  1655  0007E8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1656  0007EA  26D9               	addwf	fsr2l,f,c
  1657  0007EC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1658  0007EE  22DA               	addwfc	fsr2h,f,c
  1659  0007F0  CFDE F083          	movff	postinc2,??_FastTransfer_buffer_put
  1660  0007F4  CFDD F084          	movff	postdec2,??_FastTransfer_buffer_put+1
  1661  0007F8  0100               	movlb	0	; () banked
  1662  0007FA  5183               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1663  0007FC  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1664  0007FE  6ED9               	movwf	fsr2l,c
  1665  000800  0100               	movlb	0	; () banked
  1666  000802  5184               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1667  000804  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1668  000806  6EDA               	movwf	fsr2h,c
  1669  000808  C02A  FFDF         	movff	_group,indf2
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;FastTransfer.c: 288: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1673  00080C  EE20 F0C8          	lfsr	2,200
  1674  000810  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1675  000812  26D9               	addwf	fsr2l,f,c
  1676  000814  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1677  000816  22DA               	addwfc	fsr2h,f,c
  1678  000818  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1679  00081C  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1680  000820  0E00               	movlw	0
  1681  000822  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1682  000824  0EC8               	movlw	200
  1683  000826  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1684  000828  EC34  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1685  00082C  EE20 F0C8          	lfsr	2,200
  1686  000830  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1687  000832  26D9               	addwf	fsr2l,f,c
  1688  000834  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1689  000836  22DA               	addwfc	fsr2h,f,c
  1690  000838  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1691  00083C  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1692                           
  1693                           ;FastTransfer.c: 289: ++_this->count;
  1694  000840  EE20 F0CC          	lfsr	2,204
  1695  000844  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1696  000846  26D9               	addwf	fsr2l,f,c
  1697  000848  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1698  00084A  22DA               	addwfc	fsr2h,f,c
  1699  00084C  2ADE               	incf	postinc2,f,c
  1700  00084E  0E00               	movlw	0
  1701  000850  22DD               	addwfc	postdec2,f,c
  1702                           
  1703                           ;FastTransfer.c: 290: _this->buf[_this->head] = group.parts[1];
  1704  000852  EE20 F0C8          	lfsr	2,200
  1705  000856  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1706  000858  26D9               	addwf	fsr2l,f,c
  1707  00085A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1708  00085C  22DA               	addwfc	fsr2h,f,c
  1709  00085E  CFDE F083          	movff	postinc2,??_FastTransfer_buffer_put
  1710  000862  CFDD F084          	movff	postdec2,??_FastTransfer_buffer_put+1
  1711  000866  0100               	movlb	0	; () banked
  1712  000868  5183               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1713  00086A  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1714  00086C  6ED9               	movwf	fsr2l,c
  1715  00086E  0100               	movlb	0	; () banked
  1716  000870  5184               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1717  000872  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1718  000874  6EDA               	movwf	fsr2h,c
  1719  000876  C02B  FFDF         	movff	_group+1,indf2
  1720                           
  1721                           ; BSR set to: 0
  1722                           ;FastTransfer.c: 291: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1723  00087A  EE20 F0C8          	lfsr	2,200
  1724  00087E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1725  000880  26D9               	addwf	fsr2l,f,c
  1726  000882  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1727  000884  22DA               	addwfc	fsr2h,f,c
  1728  000886  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1729  00088A  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1730  00088E  0E00               	movlw	0
  1731  000890  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1732  000892  0EC8               	movlw	200
  1733  000894  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1734  000896  EC34  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1735  00089A  EE20 F0C8          	lfsr	2,200
  1736  00089E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1737  0008A0  26D9               	addwf	fsr2l,f,c
  1738  0008A2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1739  0008A4  22DA               	addwfc	fsr2h,f,c
  1740  0008A6  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1741  0008AA  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1742                           
  1743                           ;FastTransfer.c: 292: ++_this->count;
  1744  0008AE  EE20 F0CC          	lfsr	2,204
  1745  0008B2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1746  0008B4  26D9               	addwf	fsr2l,f,c
  1747  0008B6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1748  0008B8  22DA               	addwfc	fsr2h,f,c
  1749  0008BA  2ADE               	incf	postinc2,f,c
  1750  0008BC  0E00               	movlw	0
  1751  0008BE  22DD               	addwfc	postdec2,f,c
  1752  0008C0  0012               	return	
  1753  0008C2                     __end_of_FastTransfer_buffer_put:
  1754                           	opt stack 0
  1755                           tosu	equ	0xFFF
  1756                           tosh	equ	0xFFE
  1757                           tosl	equ	0xFFD
  1758                           pclath	equ	0xFFA
  1759                           tblptru	equ	0xFF8
  1760                           tblptrh	equ	0xFF7
  1761                           tblptrl	equ	0xFF6
  1762                           tablat	equ	0xFF5
  1763                           postinc0	equ	0xFEE
  1764                           wreg	equ	0xFE8
  1765                           indf2	equ	0xFDF
  1766                           postinc2	equ	0xFDE
  1767                           postdec2	equ	0xFDD
  1768                           plusw2	equ	0xFDB
  1769                           fsr2h	equ	0xFDA
  1770                           fsr2l	equ	0xFD9
  1771                           status	equ	0xFD8
  1772                           
  1773 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  1774 ;; Defined at:
  1775 ;;		line 329 in file "FastTransfer.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;  value           2   26[COMRAM] const unsigned int 
  1778 ;;  modulus         2   28[COMRAM] const unsigned int 
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;  my_value        2   30[COMRAM] unsigned int 
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  2   26[COMRAM] unsigned int 
  1783 ;; Registers used:
  1784 ;;		wreg, status,2, status,0
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1790 ;;      Params:         4       0       0       0       0       0       0
  1791 ;;      Locals:         2       0       0       0       0       0       0
  1792 ;;      Temps:          0       0       0       0       0       0       0
  1793 ;;      Totals:         6       0       0       0       0       0       0
  1794 ;;Total ram usage:        6 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; Hardware stack levels required when called:    4
  1797 ;; This function calls:
  1798 ;;		Nothing
  1799 ;; This function is called by:
  1800 ;;		_FastTransfer_buffer_put
  1801 ;;		_FastTransfer_buffer_get
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805                           	psect	text8
  1806  001668                     __ptext8:
  1807                           	opt stack 0
  1808  001668                     _FastTransfer_buffer_modulo_inc:
  1809                           	opt stack 22
  1810                           
  1811                           ;FastTransfer.c: 330: unsigned int my_value = value + 1;
  1812                           
  1813                           ;incstack = 0
  1814  001668  0E01               	movlw	1
  1815  00166A  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  1816  00166C  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1817  00166E  0E00               	movlw	0
  1818  001670  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  1819  001672  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1820                           
  1821                           ;FastTransfer.c: 331: if (my_value >= modulus) {
  1822  001674  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  1823  001676  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  1824  001678  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  1825  00167A  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  1826  00167C  A0D8               	btfss	status,0,c
  1827  00167E  D004               	goto	l2403
  1828                           
  1829                           ;FastTransfer.c: 332: my_value = 0;
  1830  001680  0E00               	movlw	0
  1831  001682  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1832  001684  0E00               	movlw	0
  1833  001686  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1834  001688                     l2403:
  1835                           
  1836                           ;FastTransfer.c: 333: }
  1837                           ;FastTransfer.c: 334: return (my_value);
  1838  001688  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  1839  00168C  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  1840  001690  0012               	return	
  1841  001692                     __end_of_FastTransfer_buffer_modulo_inc:
  1842                           	opt stack 0
  1843                           tosu	equ	0xFFF
  1844                           tosh	equ	0xFFE
  1845                           tosl	equ	0xFFD
  1846                           pclath	equ	0xFFA
  1847                           tblptru	equ	0xFF8
  1848                           tblptrh	equ	0xFF7
  1849                           tblptrl	equ	0xFF6
  1850                           tablat	equ	0xFF5
  1851                           postinc0	equ	0xFEE
  1852                           wreg	equ	0xFE8
  1853                           indf2	equ	0xFDF
  1854                           postinc2	equ	0xFDE
  1855                           postdec2	equ	0xFDD
  1856                           plusw2	equ	0xFDB
  1857                           fsr2h	equ	0xFDA
  1858                           fsr2l	equ	0xFD9
  1859                           status	equ	0xFD8
  1860                           
  1861 ;; *************** function _GetFaults *****************
  1862 ;; Defined at:
  1863 ;;		line 23 in file "Function.c"
  1864 ;; Parameters:    Size  Location     Type
  1865 ;;  num             1    wreg     unsigned char 
  1866 ;; Auto vars:     Size  Location     Type
  1867 ;;  num             1   26[COMRAM] unsigned char 
  1868 ;; Return value:  Size  Location     Type
  1869 ;;                  1    wreg      unsigned char 
  1870 ;; Registers used:
  1871 ;;		wreg, status,2, status,0
  1872 ;; Tracked objects:
  1873 ;;		On entry : 0/0
  1874 ;;		On exit  : 0/0
  1875 ;;		Unchanged: 0/0
  1876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1877 ;;      Params:         0       0       0       0       0       0       0
  1878 ;;      Locals:         1       0       0       0       0       0       0
  1879 ;;      Temps:          0       0       0       0       0       0       0
  1880 ;;      Totals:         1       0       0       0       0       0       0
  1881 ;;Total ram usage:        1 bytes
  1882 ;; Hardware stack levels used:    1
  1883 ;; Hardware stack levels required when called:    4
  1884 ;; This function calls:
  1885 ;;		Nothing
  1886 ;; This function is called by:
  1887 ;;		_respondECU
  1888 ;; This function uses a non-reentrant model
  1889 ;;
  1890                           
  1891                           	psect	text9
  1892  0017B4                     __ptext9:
  1893                           	opt stack 0
  1894  0017B4                     _GetFaults:
  1895                           	opt stack 24
  1896                           
  1897                           ;incstack = 0
  1898                           ;GetFaults@num stored from wreg
  1899  0017B4  6E1B               	movwf	GetFaults@num,c
  1900                           
  1901                           ;Function.c: 24: if(num == 1){
  1902  0017B6  041B               	decf	GetFaults@num,w,c
  1903  0017B8  A4D8               	btfss	status,2,c
  1904  0017BA  D002               	goto	l1325
  1905                           
  1906                           ;Function.c: 25: return ByteHigh;
  1907  0017BC  503B               	movf	_ByteHigh,w,c
  1908  0017BE  0012               	return	
  1909  0017C0                     l1325:
  1910                           
  1911                           ;Function.c: 26: }
  1912                           ;Function.c: 27: if(num == 0){
  1913  0017C0  501B               	movf	GetFaults@num,w,c
  1914  0017C2  A4D8               	btfss	status,2,c
  1915  0017C4  0012               	return	
  1916                           
  1917                           ;Function.c: 28: return ByteLow;
  1918  0017C6  503C               	movf	_ByteLow,w,c
  1919  0017C8  0012               	return	
  1920  0017CA                     __end_of_GetFaults:
  1921                           	opt stack 0
  1922                           tosu	equ	0xFFF
  1923                           tosh	equ	0xFFE
  1924                           tosl	equ	0xFFD
  1925                           pclath	equ	0xFFA
  1926                           tblptru	equ	0xFF8
  1927                           tblptrh	equ	0xFF7
  1928                           tblptrl	equ	0xFF6
  1929                           tablat	equ	0xFF5
  1930                           postinc0	equ	0xFEE
  1931                           wreg	equ	0xFE8
  1932                           indf2	equ	0xFDF
  1933                           postinc2	equ	0xFDE
  1934                           postdec2	equ	0xFDD
  1935                           plusw2	equ	0xFDB
  1936                           fsr2h	equ	0xFDA
  1937                           fsr2l	equ	0xFD9
  1938                           status	equ	0xFD8
  1939                           
  1940 ;; *************** function _Delay *****************
  1941 ;; Defined at:
  1942 ;;		line 186 in file "Function.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;  wait            2   26[COMRAM] int 
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;  x               2   29[COMRAM] int 
  1947 ;; Return value:  Size  Location     Type
  1948 ;;                  1    wreg      void 
  1949 ;; Registers used:
  1950 ;;		wreg, status,2, status,0
  1951 ;; Tracked objects:
  1952 ;;		On entry : 0/0
  1953 ;;		On exit  : 0/0
  1954 ;;		Unchanged: 0/0
  1955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1956 ;;      Params:         2       0       0       0       0       0       0
  1957 ;;      Locals:         2       0       0       0       0       0       0
  1958 ;;      Temps:          1       0       0       0       0       0       0
  1959 ;;      Totals:         5       0       0       0       0       0       0
  1960 ;;Total ram usage:        5 bytes
  1961 ;; Hardware stack levels used:    1
  1962 ;; Hardware stack levels required when called:    4
  1963 ;; This function calls:
  1964 ;;		Nothing
  1965 ;; This function is called by:
  1966 ;;		_respondECU
  1967 ;; This function uses a non-reentrant model
  1968 ;;
  1969                           
  1970                           	psect	text10
  1971  00157A                     __ptext10:
  1972                           	opt stack 0
  1973  00157A                     _Delay:
  1974                           	opt stack 24
  1975                           
  1976                           ;Function.c: 187: int x;
  1977                           ;Function.c: 188: for (x = 0; x < wait; x++) {
  1978                           
  1979                           ;incstack = 0
  1980  00157A  0E00               	movlw	0
  1981  00157C  6E1F               	movwf	Delay@x+1,c
  1982  00157E  0E00               	movlw	0
  1983  001580  6E1E               	movwf	Delay@x,c
  1984  001582  D00A               	goto	l462
  1985  001584                     l1999:
  1986                           
  1987                           ;Function.c: 189: _delay((unsigned long)((1)*(16000000/4000.0)));
  1988  001584  0E06               	movlw	6
  1989  001586  6E1D               	movwf	??_Delay& (0+255),c
  1990  001588  0E30               	movlw	48
  1991  00158A                     u3357:
  1992  00158A  2EE8               	decfsz	wreg,f,c
  1993  00158C  D7FE               	goto	u3357
  1994  00158E  2E1D               	decfsz	??_Delay& (0+255),f,c
  1995  001590  D7FC               	goto	u3357
  1996  001592  D000               	nop2	
  1997  001594  4A1E               	infsnz	Delay@x,f,c
  1998  001596  2A1F               	incf	Delay@x+1,f,c
  1999  001598                     l462:
  2000  001598  501B               	movf	Delay@wait,w,c
  2001  00159A  5C1E               	subwf	Delay@x,w,c
  2002  00159C  501F               	movf	Delay@x+1,w,c
  2003  00159E  0A80               	xorlw	128
  2004  0015A0  6E1D               	movwf	??_Delay& (0+255),c
  2005  0015A2  501C               	movf	Delay@wait+1,w,c
  2006  0015A4  0A80               	xorlw	128
  2007  0015A6  581D               	subwfb	??_Delay& (0+255),w,c
  2008  0015A8  B0D8               	btfsc	status,0,c
  2009  0015AA  0012               	return	
  2010  0015AC  D7EB               	goto	l1999
  2011  0015AE                     __end_of_Delay:
  2012                           	opt stack 0
  2013                           tosu	equ	0xFFF
  2014                           tosh	equ	0xFFE
  2015                           tosl	equ	0xFFD
  2016                           pclath	equ	0xFFA
  2017                           tblptru	equ	0xFF8
  2018                           tblptrh	equ	0xFF7
  2019                           tblptrl	equ	0xFF6
  2020                           tablat	equ	0xFF5
  2021                           postinc0	equ	0xFEE
  2022                           wreg	equ	0xFE8
  2023                           indf2	equ	0xFDF
  2024                           postinc2	equ	0xFDE
  2025                           postdec2	equ	0xFDD
  2026                           plusw2	equ	0xFDB
  2027                           fsr2h	equ	0xFDA
  2028                           fsr2l	equ	0xFD9
  2029                           status	equ	0xFD8
  2030                           
  2031 ;; *************** function _receiveData *****************
  2032 ;; Defined at:
  2033 ;;		line 137 in file "FastTransfer.c"
  2034 ;; Parameters:    Size  Location     Type
  2035 ;;		None
  2036 ;; Auto vars:     Size  Location     Type
  2037 ;;  holder          3   18[BANK0 ] unsigned char [3]
  2038 ;;  crcHolder       1   22[BANK0 ] unsigned char 
  2039 ;;  holder          3   15[BANK0 ] unsigned char [3]
  2040 ;;  crcHolder       1   21[BANK0 ] unsigned char 
  2041 ;;  u               2   23[BANK0 ] int 
  2042 ;;  r               2   25[BANK0 ] int 
  2043 ;; Return value:  Size  Location     Type
  2044 ;;                  1    wreg      unsigned char 
  2045 ;; Registers used:
  2046 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2047 ;; Tracked objects:
  2048 ;;		On entry : 0/0
  2049 ;;		On exit  : 0/0
  2050 ;;		Unchanged: 0/0
  2051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2052 ;;      Params:         0       0       0       0       0       0       0
  2053 ;;      Locals:         0      12       0       0       0       0       0
  2054 ;;      Temps:          0       6       0       0       0       0       0
  2055 ;;      Totals:         0      18       0       0       0       0       0
  2056 ;;Total ram usage:       18 bytes
  2057 ;; Hardware stack levels used:    1
  2058 ;; Hardware stack levels required when called:    8
  2059 ;; This function calls:
  2060 ;;		Absolute function
  2061 ;;		_CRC8
  2062 ;;		_CRCcheck
  2063 ;;		_Receive_available
  2064 ;;		_Receive_get
  2065 ;;		_Receive_peek
  2066 ;;		_Send_put
  2067 ;; This function is called by:
  2068 ;;		_updateComms
  2069 ;; This function uses a non-reentrant model
  2070 ;;
  2071                           
  2072                           	psect	text11
  2073  0000A4                     __ptext11:
  2074                           	opt stack 0
  2075  0000A4                     _receiveData:
  2076                           	opt stack 21
  2077                           
  2078                           ;FastTransfer.c: 140: if (rx_len == 0) {
  2079                           
  2080                           ;incstack = 0
  2081  0000A4  5043               	movf	_rx_len,w,c
  2082  0000A6  A4D8               	btfss	status,2,c
  2083  0000A8  D0AB               	goto	l2691
  2084                           
  2085                           ;FastTransfer.c: 142: if (serial_available() > 4) {
  2086  0000AA  D801               	call	u2808
  2087  0000AC  D00A               	goto	u2809
  2088  0000AE                     u2808:
  2089  0000AE  0005               	push	
  2090  0000B0  6EFA               	movwf	pclath,c
  2091  0000B2  5030               	movf	_serial_available,w,c
  2092  0000B4  6EFD               	movwf	tosl,c
  2093  0000B6  5031               	movf	_serial_available+1,w,c
  2094  0000B8  6EFE               	movwf	tosh,c
  2095  0000BA  50F8               	movf	tblptru,w,c
  2096  0000BC  6EFF               	movwf	tosu,c
  2097  0000BE  50FA               	movf	pclath,w,c
  2098  0000C0  0012               	return		;indir
  2099  0000C2                     u2809:
  2100  0000C2  BE1E               	btfsc	?_Receive_available+1,7,c
  2101  0000C4  D09D               	goto	l2691
  2102  0000C6  501E               	movf	?_Receive_available+1,w,c
  2103  0000C8  E11D               	bnz	l2667
  2104  0000CA  0E05               	movlw	5
  2105  0000CC  5C1D               	subwf	?_Receive_available,w,c
  2106  0000CE  B0D8               	btfsc	status,0,c
  2107  0000D0  D019               	goto	l2667
  2108  0000D2  D096               	goto	l2691
  2109  0000D4                     l2659:
  2110                           
  2111                           ;FastTransfer.c: 148: alignErrorCounter++;
  2112  0000D4  4A26               	infsnz	_alignErrorCounter,f,c
  2113  0000D6  2A27               	incf	_alignErrorCounter+1,f,c
  2114                           
  2115                           ;FastTransfer.c: 149: if (serial_available() < 5)
  2116  0000D8  D801               	call	u2828
  2117  0000DA  D00A               	goto	u2829
  2118  0000DC                     u2828:
  2119  0000DC  0005               	push	
  2120  0000DE  6EFA               	movwf	pclath,c
  2121  0000E0  5030               	movf	_serial_available,w,c
  2122  0000E2  6EFD               	movwf	tosl,c
  2123  0000E4  5031               	movf	_serial_available+1,w,c
  2124  0000E6  6EFE               	movwf	tosh,c
  2125  0000E8  50F8               	movf	tblptru,w,c
  2126  0000EA  6EFF               	movwf	tosu,c
  2127  0000EC  50FA               	movf	pclath,w,c
  2128  0000EE  0012               	return		;indir
  2129  0000F0                     u2829:
  2130  0000F0  BE1E               	btfsc	?_Receive_available+1,7,c
  2131  0000F2  D006               	goto	l2663
  2132  0000F4  501E               	movf	?_Receive_available+1,w,c
  2133  0000F6  E106               	bnz	l2667
  2134  0000F8  0E05               	movlw	5
  2135  0000FA  5C1D               	subwf	?_Receive_available,w,c
  2136  0000FC  B0D8               	btfsc	status,0,c
  2137  0000FE  D002               	goto	l2667
  2138  000100                     l2663:
  2139                           
  2140                           ;FastTransfer.c: 150: return 0;
  2141  000100  0E00               	movlw	0
  2142  000102  0012               	return	
  2143  000104                     l2667:
  2144  000104  D801               	call	u2848
  2145  000106  D00A               	goto	u2849
  2146  000108                     u2848:
  2147  000108  0005               	push	
  2148  00010A  6EFA               	movwf	pclath,c
  2149  00010C  5034               	movf	_serial_read,w,c
  2150  00010E  6EFD               	movwf	tosl,c
  2151  000110  5035               	movf	_serial_read+1,w,c
  2152  000112  6EFE               	movwf	tosh,c
  2153  000114  50F8               	movf	tblptru,w,c
  2154  000116  6EFF               	movwf	tosu,c
  2155  000118  50FA               	movf	pclath,w,c
  2156  00011A  0012               	return		;indir
  2157  00011C                     u2849:
  2158  00011C  0A06               	xorlw	6
  2159  00011E  A4D8               	btfss	status,2,c
  2160  000120  D7D9               	goto	l2659
  2161                           
  2162                           ;FastTransfer.c: 151: }
  2163                           ;FastTransfer.c: 152: if (serial_read() == 0x85) {
  2164  000122  D801               	call	u2868
  2165  000124  D00A               	goto	u2869
  2166  000126                     u2868:
  2167  000126  0005               	push	
  2168  000128  6EFA               	movwf	pclath,c
  2169  00012A  5034               	movf	_serial_read,w,c
  2170  00012C  6EFD               	movwf	tosl,c
  2171  00012E  5035               	movf	_serial_read+1,w,c
  2172  000130  6EFE               	movwf	tosh,c
  2173  000132  50F8               	movf	tblptru,w,c
  2174  000134  6EFF               	movwf	tosu,c
  2175  000136  50FA               	movf	pclath,w,c
  2176  000138  0012               	return		;indir
  2177  00013A                     u2869:
  2178  00013A  0A85               	xorlw	133
  2179  00013C  A4D8               	btfss	status,2,c
  2180  00013E  D060               	goto	l2691
  2181                           
  2182                           ;FastTransfer.c: 154: rx_address = serial_read();
  2183  000140  D801               	call	u2888
  2184  000142  D00A               	goto	u2889
  2185  000144                     u2888:
  2186  000144  0005               	push	
  2187  000146  6EFA               	movwf	pclath,c
  2188  000148  5034               	movf	_serial_read,w,c
  2189  00014A  6EFD               	movwf	tosl,c
  2190  00014C  5035               	movf	_serial_read+1,w,c
  2191  00014E  6EFE               	movwf	tosh,c
  2192  000150  50F8               	movf	tblptru,w,c
  2193  000152  6EFF               	movwf	tosu,c
  2194  000154  50FA               	movf	pclath,w,c
  2195  000156  0012               	return		;indir
  2196  000158                     u2889:
  2197  000158  6E41               	movwf	_rx_address,c
  2198                           
  2199                           ;FastTransfer.c: 155: returnAddress = serial_read();
  2200  00015A  D801               	call	u2898
  2201  00015C  D00A               	goto	u2899
  2202  00015E                     u2898:
  2203  00015E  0005               	push	
  2204  000160  6EFA               	movwf	pclath,c
  2205  000162  5034               	movf	_serial_read,w,c
  2206  000164  6EFD               	movwf	tosl,c
  2207  000166  5035               	movf	_serial_read+1,w,c
  2208  000168  6EFE               	movwf	tosh,c
  2209  00016A  50F8               	movf	tblptru,w,c
  2210  00016C  6EFF               	movwf	tosu,c
  2211  00016E  50FA               	movf	pclath,w,c
  2212  000170  0012               	return		;indir
  2213  000172                     u2899:
  2214  000172  6E40               	movwf	_returnAddress,c
  2215                           
  2216                           ;FastTransfer.c: 156: rx_len = serial_read();
  2217  000174  D801               	call	u2908
  2218  000176  D00A               	goto	u2909
  2219  000178                     u2908:
  2220  000178  0005               	push	
  2221  00017A  6EFA               	movwf	pclath,c
  2222  00017C  5034               	movf	_serial_read,w,c
  2223  00017E  6EFD               	movwf	tosl,c
  2224  000180  5035               	movf	_serial_read+1,w,c
  2225  000182  6EFE               	movwf	tosh,c
  2226  000184  50F8               	movf	tblptru,w,c
  2227  000186  6EFF               	movwf	tosu,c
  2228  000188  50FA               	movf	pclath,w,c
  2229  00018A  0012               	return		;indir
  2230  00018C                     u2909:
  2231  00018C  6E43               	movwf	_rx_len,c
  2232                           
  2233                           ;FastTransfer.c: 158: if (rx_address != moduleAddress) {
  2234  00018E  503F               	movf	_moduleAddress,w,c
  2235  000190  1841               	xorwf	_rx_address,w,c
  2236  000192  B4D8               	btfsc	status,2,c
  2237  000194  D035               	goto	l2691
  2238                           
  2239                           ;FastTransfer.c: 159: addressErrorCounter++;
  2240  000196  0100               	movlb	0	; () banked
  2241  000198  4B64               	infsnz	_addressErrorCounter& (0+255),f,b
  2242  00019A  2B65               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2243                           
  2244                           ; BSR set to: 0
  2245                           ;FastTransfer.c: 162: int u;
  2246                           ;FastTransfer.c: 163: for (u = 0; u <= (rx_len + 1); u++) {
  2247  00019C  0E00               	movlw	0
  2248  00019E  0100               	movlb	0	; () banked
  2249  0001A0  6F9B               	movwf	(receiveData@u+1)& (0+255),b
  2250  0001A2  0E00               	movlw	0
  2251  0001A4  6F9A               	movwf	receiveData@u& (0+255),b
  2252  0001A6  D00F               	goto	l2683
  2253  0001A8                     l2679:
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;FastTransfer.c: 164: serial_read();
  2257  0001A8  D801               	call	u2928
  2258  0001AA  D00A               	goto	l2681
  2259  0001AC                     u2928:
  2260  0001AC  0005               	push	
  2261  0001AE  6EFA               	movwf	pclath,c
  2262  0001B0  5034               	movf	_serial_read,w,c
  2263  0001B2  6EFD               	movwf	tosl,c
  2264  0001B4  5035               	movf	_serial_read+1,w,c
  2265  0001B6  6EFE               	movwf	tosh,c
  2266  0001B8  50F8               	movf	tblptru,w,c
  2267  0001BA  6EFF               	movwf	tosu,c
  2268  0001BC  50FA               	movf	pclath,w,c
  2269  0001BE  0012               	return		;indir
  2270  0001C0                     l2681:
  2271  0001C0  0100               	movlb	0	; () banked
  2272  0001C2  4B9A               	infsnz	receiveData@u& (0+255),f,b
  2273  0001C4  2B9B               	incf	(receiveData@u+1)& (0+255),f,b
  2274  0001C6                     l2683:
  2275                           
  2276                           ; BSR set to: 0
  2277  0001C6  5043               	movf	_rx_len,w,c
  2278  0001C8  0100               	movlb	0	; () banked
  2279  0001CA  6F8C               	movwf	??_receiveData& (0+255),b
  2280  0001CC  6B8D               	clrf	(??_receiveData+1)& (0+255),b
  2281  0001CE  0E01               	movlw	1
  2282  0001D0  0100               	movlb	0	; () banked
  2283  0001D2  278C               	addwf	??_receiveData& (0+255),f,b
  2284  0001D4  0E00               	movlw	0
  2285  0001D6  238D               	addwfc	(??_receiveData+1)& (0+255),f,b
  2286  0001D8  0100               	movlb	0	; () banked
  2287  0001DA  519A               	movf	receiveData@u& (0+255),w,b
  2288  0001DC  0100               	movlb	0	; () banked
  2289  0001DE  5D8C               	subwf	??_receiveData& (0+255),w,b
  2290  0001E0  0100               	movlb	0	; () banked
  2291  0001E2  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2292  0001E4  0A80               	xorlw	128
  2293  0001E6  0100               	movlb	0	; () banked
  2294  0001E8  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2295  0001EA  0100               	movlb	0	; () banked
  2296  0001EC  519B               	movf	(receiveData@u+1)& (0+255),w,b
  2297  0001EE  0A80               	xorlw	128
  2298  0001F0  0100               	movlb	0	; () banked
  2299  0001F2  598E               	subwfb	(??_receiveData+2)& (0+255),w,b
  2300  0001F4  B0D8               	btfsc	status,0,c
  2301  0001F6  D7D8               	goto	l2679
  2302                           
  2303                           ; BSR set to: 0
  2304                           ;FastTransfer.c: 165: }
  2305                           ;FastTransfer.c: 166: rx_len = 0;
  2306                           
  2307                           ; BSR set to: 0
  2308  0001F8  0E00               	movlw	0
  2309  0001FA  6E43               	movwf	_rx_len,c
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;FastTransfer.c: 167: return 0;
  2313  0001FC  0E00               	movlw	0
  2314                           
  2315                           ; BSR set to: 0
  2316  0001FE  0012               	return	
  2317  000200                     l2691:
  2318                           
  2319                           ;FastTransfer.c: 168: }
  2320                           ;FastTransfer.c: 170: }
  2321                           ;FastTransfer.c: 171: }
  2322                           ;FastTransfer.c: 172: }
  2323                           ;FastTransfer.c: 175: if (rx_len != 0) {
  2324  000200  5043               	movf	_rx_len,w,c
  2325  000202  B4D8               	btfsc	status,2,c
  2326  000204  D2A2               	goto	l2815
  2327                           
  2328                           ;FastTransfer.c: 178: if (rx_array_inx == 0) {
  2329  000206  5042               	movf	_rx_array_inx,w,c
  2330  000208  A4D8               	btfss	status,2,c
  2331  00020A  D043               	goto	l2715
  2332  00020C                     l2697:
  2333  00020C  D801               	call	u2968
  2334  00020E  D00A               	goto	u2969
  2335  000210                     u2968:
  2336  000210  0005               	push	
  2337  000212  6EFA               	movwf	pclath,c
  2338  000214  5030               	movf	_serial_available,w,c
  2339  000216  6EFD               	movwf	tosl,c
  2340  000218  5031               	movf	_serial_available+1,w,c
  2341  00021A  6EFE               	movwf	tosh,c
  2342  00021C  50F8               	movf	tblptru,w,c
  2343  00021E  6EFF               	movwf	tosu,c
  2344  000220  50FA               	movf	pclath,w,c
  2345  000222  0012               	return		;indir
  2346  000224                     u2969:
  2347  000224  BE1E               	btfsc	?_Receive_available+1,7,c
  2348  000226  D7F2               	goto	l2697
  2349  000228  501E               	movf	?_Receive_available+1,w,c
  2350  00022A  E103               	bnz	l2699
  2351  00022C  041D               	decf	?_Receive_available,w,c
  2352  00022E  A0D8               	btfss	status,0,c
  2353  000230  D7ED               	goto	l2697
  2354  000232                     l2699:
  2355                           
  2356                           ;FastTransfer.c: 180: if (255 == serial_peek()) {
  2357  000232  D801               	call	u2988
  2358  000234  D00A               	goto	u2989
  2359  000236                     u2988:
  2360  000236  0005               	push	
  2361  000238  6EFA               	movwf	pclath,c
  2362  00023A  5032               	movf	_serial_peek,w,c
  2363  00023C  6EFD               	movwf	tosl,c
  2364  00023E  5033               	movf	_serial_peek+1,w,c
  2365  000240  6EFE               	movwf	tosh,c
  2366  000242  50F8               	movf	tblptru,w,c
  2367  000244  6EFF               	movwf	tosu,c
  2368  000246  50FA               	movf	pclath,w,c
  2369  000248  0012               	return		;indir
  2370  00024A                     u2989:
  2371  00024A  0AFF               	xorlw	255
  2372  00024C  A4D8               	btfss	status,2,c
  2373  00024E  D021               	goto	l2715
  2374                           
  2375                           ;FastTransfer.c: 181: CRCcheck();
  2376  000250  EC61  F004         	call	_CRCcheck	;wreg free
  2377                           
  2378                           ;FastTransfer.c: 182: rx_len = 0;
  2379  000254  0E00               	movlw	0
  2380  000256  6E43               	movwf	_rx_len,c
  2381                           
  2382                           ;FastTransfer.c: 183: rx_array_inx = 0;
  2383  000258  0E00               	movlw	0
  2384  00025A  6E42               	movwf	_rx_array_inx,c
  2385                           
  2386                           ;FastTransfer.c: 184: return 0;
  2387  00025C  0E00               	movlw	0
  2388  00025E  0012               	return	
  2389  000260                     l2711:
  2390                           
  2391                           ;FastTransfer.c: 190: rx_buffer[rx_array_inx++] = serial_read();
  2392  000260  D801               	call	u3008
  2393  000262  D00A               	goto	u3009
  2394  000264                     u3008:
  2395  000264  0005               	push	
  2396  000266  6EFA               	movwf	pclath,c
  2397  000268  5034               	movf	_serial_read,w,c
  2398  00026A  6EFD               	movwf	tosl,c
  2399  00026C  5035               	movf	_serial_read+1,w,c
  2400  00026E  6EFE               	movwf	tosh,c
  2401  000270  50F8               	movf	tblptru,w,c
  2402  000272  6EFF               	movwf	tosu,c
  2403  000274  50FA               	movf	pclath,w,c
  2404  000276  0012               	return		;indir
  2405  000278                     u3009:
  2406  000278  0100               	movlb	0	; () banked
  2407  00027A  6F8C               	movwf	??_receiveData& (0+255),b
  2408  00027C  5042               	movf	_rx_array_inx,w,c
  2409  00027E  0D01               	mullw	1
  2410  000280  0E00               	movlw	low _rx_buffer
  2411  000282  24F3               	addwf	prodl,w,c
  2412  000284  6ED9               	movwf	fsr2l,c
  2413  000286  0E02               	movlw	high _rx_buffer
  2414  000288  20F4               	addwfc	prodh,w,c
  2415  00028A  6EDA               	movwf	fsr2h,c
  2416  00028C  C08C  FFDF         	movff	??_receiveData,indf2
  2417                           
  2418                           ; BSR set to: 0
  2419  000290  2A42               	incf	_rx_array_inx,f,c
  2420  000292                     l2715:
  2421  000292  D801               	call	u3018
  2422  000294  D00A               	goto	u3019
  2423  000296                     u3018:
  2424  000296  0005               	push	
  2425  000298  6EFA               	movwf	pclath,c
  2426  00029A  5030               	movf	_serial_available,w,c
  2427  00029C  6EFD               	movwf	tosl,c
  2428  00029E  5031               	movf	_serial_available+1,w,c
  2429  0002A0  6EFE               	movwf	tosh,c
  2430  0002A2  50F8               	movf	tblptru,w,c
  2431  0002A4  6EFF               	movwf	tosu,c
  2432  0002A6  50FA               	movf	pclath,w,c
  2433  0002A8  0012               	return		;indir
  2434  0002AA                     u3019:
  2435  0002AA  501D               	movf	?_Receive_available,w,c
  2436  0002AC  101E               	iorwf	?_Receive_available+1,w,c
  2437  0002AE  B4D8               	btfsc	status,2,c
  2438  0002B0  D004               	goto	l2719
  2439  0002B2  5042               	movf	_rx_array_inx,w,c
  2440  0002B4  5C43               	subwf	_rx_len,w,c
  2441  0002B6  B0D8               	btfsc	status,0,c
  2442  0002B8  D7D3               	goto	l2711
  2443  0002BA                     l2719:
  2444                           
  2445                           ;FastTransfer.c: 191: }
  2446                           ;FastTransfer.c: 193: if (rx_len == (rx_array_inx - 1)) {
  2447  0002BA  5043               	movf	_rx_len,w,c
  2448  0002BC  0100               	movlb	0	; () banked
  2449  0002BE  6F8C               	movwf	??_receiveData& (0+255),b
  2450  0002C0  6B8D               	clrf	(??_receiveData+1)& (0+255),b
  2451  0002C2  0EFF               	movlw	255
  2452  0002C4  0100               	movlb	0	; () banked
  2453  0002C6  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2454  0002C8  0EFF               	movlw	255
  2455  0002CA  0100               	movlb	0	; () banked
  2456  0002CC  6F8F               	movwf	(??_receiveData+3)& (0+255),b
  2457  0002CE  5042               	movf	_rx_array_inx,w,c
  2458  0002D0  0100               	movlb	0	; () banked
  2459  0002D2  6F90               	movwf	(??_receiveData+4)& (0+255),b
  2460  0002D4  6B91               	clrf	(??_receiveData+5)& (0+255),b
  2461  0002D6  0100               	movlb	0	; () banked
  2462  0002D8  518E               	movf	(??_receiveData+2)& (0+255),w,b
  2463  0002DA  0100               	movlb	0	; () banked
  2464  0002DC  2790               	addwf	(??_receiveData+4)& (0+255),f,b
  2465  0002DE  0100               	movlb	0	; () banked
  2466  0002E0  518F               	movf	(??_receiveData+3)& (0+255),w,b
  2467  0002E2  0100               	movlb	0	; () banked
  2468  0002E4  2391               	addwfc	(??_receiveData+5)& (0+255),f,b
  2469  0002E6  0100               	movlb	0	; () banked
  2470  0002E8  518C               	movf	??_receiveData& (0+255),w,b
  2471  0002EA  0100               	movlb	0	; () banked
  2472  0002EC  1990               	xorwf	(??_receiveData+4)& (0+255),w,b
  2473  0002EE  E105               	bnz	u3041
  2474  0002F0  0100               	movlb	0	; () banked
  2475  0002F2  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2476  0002F4  0100               	movlb	0	; () banked
  2477  0002F6  1991               	xorwf	(??_receiveData+5)& (0+255),w,b
  2478  0002F8  A4D8               	btfss	status,2,c
  2479  0002FA                     u3041:
  2480  0002FA  D227               	goto	l2815
  2481                           
  2482                           ; BSR set to: 0
  2483                           ;FastTransfer.c: 196: calc_CS = CRC8(rx_buffer, rx_len);
  2484  0002FC  0E00               	movlw	low _rx_buffer
  2485  0002FE  6E1B               	movwf	CRC8@data,c
  2486  000300  0E02               	movlw	high _rx_buffer
  2487  000302  6E1C               	movwf	CRC8@data+1,c
  2488  000304  C043  F01D         	movff	_rx_len,CRC8@len
  2489  000308  EC7A  F00A         	call	_CRC8	;wreg free
  2490  00030C  6E3D               	movwf	_calc_CS,c
  2491                           
  2492                           ;FastTransfer.c: 200: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2493  00030E  0EFF               	movlw	255
  2494  000310  0100               	movlb	0	; () banked
  2495  000312  6F8C               	movwf	??_receiveData& (0+255),b
  2496  000314  0EFF               	movlw	255
  2497  000316  0100               	movlb	0	; () banked
  2498  000318  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  2499  00031A  5042               	movf	_rx_array_inx,w,c
  2500  00031C  0100               	movlb	0	; () banked
  2501  00031E  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2502  000320  6B8F               	clrf	(??_receiveData+3)& (0+255),b
  2503  000322  0100               	movlb	0	; () banked
  2504  000324  518C               	movf	??_receiveData& (0+255),w,b
  2505  000326  0100               	movlb	0	; () banked
  2506  000328  278E               	addwf	(??_receiveData+2)& (0+255),f,b
  2507  00032A  0100               	movlb	0	; () banked
  2508  00032C  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2509  00032E  0100               	movlb	0	; () banked
  2510  000330  238F               	addwfc	(??_receiveData+3)& (0+255),f,b
  2511  000332  0E00               	movlw	low _rx_buffer
  2512  000334  0100               	movlb	0	; () banked
  2513  000336  258E               	addwf	(??_receiveData+2)& (0+255),w,b
  2514  000338  6ED9               	movwf	fsr2l,c
  2515  00033A  0E02               	movlw	high _rx_buffer
  2516  00033C  0100               	movlb	0	; () banked
  2517  00033E  218F               	addwfc	(??_receiveData+3)& (0+255),w,b
  2518  000340  6EDA               	movwf	fsr2h,c
  2519  000342  503D               	movf	_calc_CS,w,c
  2520  000344  18DE               	xorwf	postinc2,w,c
  2521  000346  A4D8               	btfss	status,2,c
  2522  000348  D139               	goto	l2777
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;FastTransfer.c: 203: int r;
  2526                           ;FastTransfer.c: 204: for (r = 0; r < rx_len; r = r + 3) {
  2527  00034A  0E00               	movlw	0
  2528  00034C  0100               	movlb	0	; () banked
  2529  00034E  6F9D               	movwf	(receiveData@r+1)& (0+255),b
  2530  000350  0E00               	movlw	0
  2531  000352  6F9C               	movwf	receiveData@r& (0+255),b
  2532  000354  D05A               	goto	l2737
  2533  000356                     l2727:
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;FastTransfer.c: 205: if (rx_buffer[r] < maxDataAddress) {
  2537  000356  0E00               	movlw	low _rx_buffer
  2538  000358  0100               	movlb	0	; () banked
  2539  00035A  259C               	addwf	receiveData@r& (0+255),w,b
  2540  00035C  6ED9               	movwf	fsr2l,c
  2541  00035E  0E02               	movlw	high _rx_buffer
  2542  000360  0100               	movlb	0	; () banked
  2543  000362  219D               	addwfc	(receiveData@r+1)& (0+255),w,b
  2544  000364  6EDA               	movwf	fsr2h,c
  2545  000366  503E               	movf	_maxDataAddress,w,c
  2546  000368  5CDE               	subwf	postinc2,w,c
  2547  00036A  B0D8               	btfsc	status,0,c
  2548  00036C  D041               	goto	l2733
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;FastTransfer.c: 206: group.parts[0] = rx_buffer[r + 1];
  2552  00036E  0E01               	movlw	1
  2553  000370  0100               	movlb	0	; () banked
  2554  000372  259C               	addwf	receiveData@r& (0+255),w,b
  2555  000374  0100               	movlb	0	; () banked
  2556  000376  6F8C               	movwf	??_receiveData& (0+255),b
  2557  000378  0E00               	movlw	0
  2558  00037A  0100               	movlb	0	; () banked
  2559  00037C  219D               	addwfc	(receiveData@r+1)& (0+255),w,b
  2560  00037E  0100               	movlb	0	; () banked
  2561  000380  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  2562  000382  0E00               	movlw	low _rx_buffer
  2563  000384  0100               	movlb	0	; () banked
  2564  000386  258C               	addwf	??_receiveData& (0+255),w,b
  2565  000388  6ED9               	movwf	fsr2l,c
  2566  00038A  0E02               	movlw	high _rx_buffer
  2567  00038C  0100               	movlb	0	; () banked
  2568  00038E  218D               	addwfc	(??_receiveData+1)& (0+255),w,b
  2569  000390  6EDA               	movwf	fsr2h,c
  2570  000392  50DF               	movf	indf2,w,c
  2571  000394  6E2A               	movwf	_group,c
  2572                           
  2573                           ;FastTransfer.c: 207: group.parts[1] = rx_buffer[r + 2];
  2574  000396  0E02               	movlw	2
  2575  000398  0100               	movlb	0	; () banked
  2576  00039A  259C               	addwf	receiveData@r& (0+255),w,b
  2577  00039C  0100               	movlb	0	; () banked
  2578  00039E  6F8C               	movwf	??_receiveData& (0+255),b
  2579  0003A0  0E00               	movlw	0
  2580  0003A2  0100               	movlb	0	; () banked
  2581  0003A4  219D               	addwfc	(receiveData@r+1)& (0+255),w,b
  2582  0003A6  0100               	movlb	0	; () banked
  2583  0003A8  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  2584  0003AA  0E00               	movlw	low _rx_buffer
  2585  0003AC  0100               	movlb	0	; () banked
  2586  0003AE  258C               	addwf	??_receiveData& (0+255),w,b
  2587  0003B0  6ED9               	movwf	fsr2l,c
  2588  0003B2  0E02               	movlw	high _rx_buffer
  2589  0003B4  0100               	movlb	0	; () banked
  2590  0003B6  218D               	addwfc	(??_receiveData+1)& (0+255),w,b
  2591  0003B8  6EDA               	movwf	fsr2h,c
  2592  0003BA  50DF               	movf	indf2,w,c
  2593  0003BC  6E2B               	movwf	_group+1,c
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;FastTransfer.c: 208: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2597  0003BE  0E00               	movlw	low _rx_buffer
  2598  0003C0  0100               	movlb	0	; () banked
  2599  0003C2  259C               	addwf	receiveData@r& (0+255),w,b
  2600  0003C4  6ED9               	movwf	fsr2l,c
  2601  0003C6  0E02               	movlw	high _rx_buffer
  2602  0003C8  0100               	movlb	0	; () banked
  2603  0003CA  219D               	addwfc	(receiveData@r+1)& (0+255),w,b
  2604  0003CC  6EDA               	movwf	fsr2h,c
  2605  0003CE  50DF               	movf	indf2,w,c
  2606  0003D0  0100               	movlb	0	; () banked
  2607  0003D2  6F8C               	movwf	??_receiveData& (0+255),b
  2608  0003D4  0100               	movlb	0	; () banked
  2609  0003D6  518C               	movf	??_receiveData& (0+255),w,b
  2610  0003D8  0D02               	mullw	2
  2611  0003DA  50F3               	movf	prodl,w,c
  2612  0003DC  242C               	addwf	_receiveArrayAddress,w,c
  2613  0003DE  6ED9               	movwf	fsr2l,c
  2614  0003E0  50F4               	movf	prodh,w,c
  2615  0003E2  202D               	addwfc	_receiveArrayAddress+1,w,c
  2616  0003E4  6EDA               	movwf	fsr2h,c
  2617  0003E6  C02A  FFDE         	movff	_group,postinc2
  2618  0003EA  C02B  FFDD         	movff	_group+1,postdec2
  2619                           
  2620                           ;FastTransfer.c: 209: } else {
  2621  0003EE  D003               	goto	l2735
  2622  0003F0                     l2733:
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;FastTransfer.c: 210: dataAdressErrorCounter++;
  2626  0003F0  0100               	movlb	0	; () banked
  2627  0003F2  4B66               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2628  0003F4  2B67               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2629  0003F6                     l2735:
  2630                           
  2631                           ; BSR set to: 0
  2632  0003F6  0E03               	movlw	3
  2633  0003F8  0100               	movlb	0	; () banked
  2634  0003FA  259C               	addwf	receiveData@r& (0+255),w,b
  2635  0003FC  0100               	movlb	0	; () banked
  2636  0003FE  6F9C               	movwf	receiveData@r& (0+255),b
  2637  000400  0E00               	movlw	0
  2638  000402  0100               	movlb	0	; () banked
  2639  000404  219D               	addwfc	(receiveData@r+1)& (0+255),w,b
  2640  000406  0100               	movlb	0	; () banked
  2641  000408  6F9D               	movwf	(receiveData@r+1)& (0+255),b
  2642  00040A                     l2737:
  2643                           
  2644                           ; BSR set to: 0
  2645  00040A  5043               	movf	_rx_len,w,c
  2646  00040C  0100               	movlb	0	; () banked
  2647  00040E  6F8C               	movwf	??_receiveData& (0+255),b
  2648  000410  6B8D               	clrf	(??_receiveData+1)& (0+255),b
  2649  000412  0100               	movlb	0	; () banked
  2650  000414  518C               	movf	??_receiveData& (0+255),w,b
  2651  000416  0100               	movlb	0	; () banked
  2652  000418  5D9C               	subwf	receiveData@r& (0+255),w,b
  2653  00041A  0100               	movlb	0	; () banked
  2654  00041C  519D               	movf	(receiveData@r+1)& (0+255),w,b
  2655  00041E  0A80               	xorlw	128
  2656  000420  0100               	movlb	0	; () banked
  2657  000422  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2658  000424  0100               	movlb	0	; () banked
  2659  000426  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2660  000428  0A80               	xorlw	128
  2661  00042A  0100               	movlb	0	; () banked
  2662  00042C  598E               	subwfb	(??_receiveData+2)& (0+255),w,b
  2663  00042E  A0D8               	btfss	status,0,c
  2664  000430  D792               	goto	l2727
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;FastTransfer.c: 211: }
  2668                           ;FastTransfer.c: 212: }
  2669                           ;FastTransfer.c: 215: if (AKNAKsend) {
  2670                           
  2671                           ; BSR set to: 0
  2672  000432  503A               	movf	_AKNAKsend,w,c
  2673  000434  B4D8               	btfsc	status,2,c
  2674  000436  D0BC               	goto	l2767
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;FastTransfer.c: 216: unsigned char holder[3];
  2678                           ;FastTransfer.c: 217: holder[0] = 255;
  2679  000438  0100               	movlb	0	; () banked
  2680  00043A  6992               	setf	receiveData@holder& (0+255),b
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;FastTransfer.c: 218: holder[1] = 1;
  2684  00043C  0E01               	movlw	1
  2685  00043E  0100               	movlb	0	; () banked
  2686  000440  6F93               	movwf	(receiveData@holder+1)& (0+255),b
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;FastTransfer.c: 219: holder[2] = rx_buffer[rx_array_inx - 1];
  2690  000442  0EFF               	movlw	255
  2691  000444  0100               	movlb	0	; () banked
  2692  000446  6F8C               	movwf	??_receiveData& (0+255),b
  2693  000448  0EFF               	movlw	255
  2694  00044A  0100               	movlb	0	; () banked
  2695  00044C  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  2696  00044E  5042               	movf	_rx_array_inx,w,c
  2697  000450  0100               	movlb	0	; () banked
  2698  000452  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2699  000454  6B8F               	clrf	(??_receiveData+3)& (0+255),b
  2700  000456  0100               	movlb	0	; () banked
  2701  000458  518C               	movf	??_receiveData& (0+255),w,b
  2702  00045A  0100               	movlb	0	; () banked
  2703  00045C  278E               	addwf	(??_receiveData+2)& (0+255),f,b
  2704  00045E  0100               	movlb	0	; () banked
  2705  000460  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2706  000462  0100               	movlb	0	; () banked
  2707  000464  238F               	addwfc	(??_receiveData+3)& (0+255),f,b
  2708  000466  0E00               	movlw	low _rx_buffer
  2709  000468  0100               	movlb	0	; () banked
  2710  00046A  258E               	addwf	(??_receiveData+2)& (0+255),w,b
  2711  00046C  6ED9               	movwf	fsr2l,c
  2712  00046E  0E02               	movlw	high _rx_buffer
  2713  000470  0100               	movlb	0	; () banked
  2714  000472  218F               	addwfc	(??_receiveData+3)& (0+255),w,b
  2715  000474  6EDA               	movwf	fsr2h,c
  2716  000476  50DF               	movf	indf2,w,c
  2717  000478  0100               	movlb	0	; () banked
  2718  00047A  6F94               	movwf	(receiveData@holder+2)& (0+255),b
  2719                           
  2720                           ; BSR set to: 0
  2721                           ;FastTransfer.c: 220: unsigned char crcHolder = CRC8(holder, 3);
  2722  00047C  0E92               	movlw	low receiveData@holder
  2723  00047E  6E1B               	movwf	CRC8@data,c
  2724  000480  0E00               	movlw	high receiveData@holder
  2725  000482  6E1C               	movwf	CRC8@data+1,c
  2726  000484  0E03               	movlw	3
  2727  000486  6E1D               	movwf	CRC8@len,c
  2728  000488  EC7A  F00A         	call	_CRC8	;wreg free
  2729  00048C  0100               	movlb	0	; () banked
  2730  00048E  6F98               	movwf	receiveData@crcHolder& (0+255),b
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;FastTransfer.c: 221: serial_write(0x06);
  2734  000490  D801               	call	u3098
  2735  000492  D00B               	goto	l2751
  2736  000494                     u3098:
  2737  000494  0005               	push	
  2738  000496  6EFA               	movwf	pclath,c
  2739  000498  5036               	movf	_serial_write,w,c
  2740  00049A  6EFD               	movwf	tosl,c
  2741  00049C  5037               	movf	_serial_write+1,w,c
  2742  00049E  6EFE               	movwf	tosh,c
  2743  0004A0  50F8               	movf	tblptru,w,c
  2744  0004A2  6EFF               	movwf	tosu,c
  2745  0004A4  50FA               	movf	pclath,w,c
  2746  0004A6  0E06               	movlw	6
  2747  0004A8  0012               	return		;indir
  2748  0004AA                     l2751:
  2749                           
  2750                           ;FastTransfer.c: 222: serial_write(0x85);
  2751  0004AA  D801               	call	u3108
  2752  0004AC  D00B               	goto	l2753
  2753  0004AE                     u3108:
  2754  0004AE  0005               	push	
  2755  0004B0  6EFA               	movwf	pclath,c
  2756  0004B2  5036               	movf	_serial_write,w,c
  2757  0004B4  6EFD               	movwf	tosl,c
  2758  0004B6  5037               	movf	_serial_write+1,w,c
  2759  0004B8  6EFE               	movwf	tosh,c
  2760  0004BA  50F8               	movf	tblptru,w,c
  2761  0004BC  6EFF               	movwf	tosu,c
  2762  0004BE  50FA               	movf	pclath,w,c
  2763  0004C0  0E85               	movlw	133
  2764  0004C2  0012               	return		;indir
  2765  0004C4                     l2753:
  2766                           
  2767                           ;FastTransfer.c: 223: serial_write(returnAddress);
  2768  0004C4  D801               	call	u3118
  2769  0004C6  D00B               	goto	l2755
  2770  0004C8                     u3118:
  2771  0004C8  0005               	push	
  2772  0004CA  6EFA               	movwf	pclath,c
  2773  0004CC  5036               	movf	_serial_write,w,c
  2774  0004CE  6EFD               	movwf	tosl,c
  2775  0004D0  5037               	movf	_serial_write+1,w,c
  2776  0004D2  6EFE               	movwf	tosh,c
  2777  0004D4  50F8               	movf	tblptru,w,c
  2778  0004D6  6EFF               	movwf	tosu,c
  2779  0004D8  50FA               	movf	pclath,w,c
  2780  0004DA  5040               	movf	_returnAddress,w,c
  2781  0004DC  0012               	return		;indir
  2782  0004DE                     l2755:
  2783                           
  2784                           ;FastTransfer.c: 224: serial_write(moduleAddress);
  2785  0004DE  D801               	call	u3128
  2786  0004E0  D00B               	goto	l2757
  2787  0004E2                     u3128:
  2788  0004E2  0005               	push	
  2789  0004E4  6EFA               	movwf	pclath,c
  2790  0004E6  5036               	movf	_serial_write,w,c
  2791  0004E8  6EFD               	movwf	tosl,c
  2792  0004EA  5037               	movf	_serial_write+1,w,c
  2793  0004EC  6EFE               	movwf	tosh,c
  2794  0004EE  50F8               	movf	tblptru,w,c
  2795  0004F0  6EFF               	movwf	tosu,c
  2796  0004F2  50FA               	movf	pclath,w,c
  2797  0004F4  503F               	movf	_moduleAddress,w,c
  2798  0004F6  0012               	return		;indir
  2799  0004F8                     l2757:
  2800                           
  2801                           ;FastTransfer.c: 225: serial_write(3);
  2802  0004F8  D801               	call	u3138
  2803  0004FA  D00B               	goto	l2759
  2804  0004FC                     u3138:
  2805  0004FC  0005               	push	
  2806  0004FE  6EFA               	movwf	pclath,c
  2807  000500  5036               	movf	_serial_write,w,c
  2808  000502  6EFD               	movwf	tosl,c
  2809  000504  5037               	movf	_serial_write+1,w,c
  2810  000506  6EFE               	movwf	tosh,c
  2811  000508  50F8               	movf	tblptru,w,c
  2812  00050A  6EFF               	movwf	tosu,c
  2813  00050C  50FA               	movf	pclath,w,c
  2814  00050E  0E03               	movlw	3
  2815  000510  0012               	return		;indir
  2816  000512                     l2759:
  2817                           
  2818                           ;FastTransfer.c: 226: serial_write(255);
  2819  000512  D801               	call	u3148
  2820  000514  D00B               	goto	l2761
  2821  000516                     u3148:
  2822  000516  0005               	push	
  2823  000518  6EFA               	movwf	pclath,c
  2824  00051A  5036               	movf	_serial_write,w,c
  2825  00051C  6EFD               	movwf	tosl,c
  2826  00051E  5037               	movf	_serial_write+1,w,c
  2827  000520  6EFE               	movwf	tosh,c
  2828  000522  50F8               	movf	tblptru,w,c
  2829  000524  6EFF               	movwf	tosu,c
  2830  000526  50FA               	movf	pclath,w,c
  2831  000528  0EFF               	movlw	255
  2832  00052A  0012               	return		;indir
  2833  00052C                     l2761:
  2834                           
  2835                           ;FastTransfer.c: 227: serial_write(1);
  2836  00052C  D801               	call	u3158
  2837  00052E  D00B               	goto	l2763
  2838  000530                     u3158:
  2839  000530  0005               	push	
  2840  000532  6EFA               	movwf	pclath,c
  2841  000534  5036               	movf	_serial_write,w,c
  2842  000536  6EFD               	movwf	tosl,c
  2843  000538  5037               	movf	_serial_write+1,w,c
  2844  00053A  6EFE               	movwf	tosh,c
  2845  00053C  50F8               	movf	tblptru,w,c
  2846  00053E  6EFF               	movwf	tosu,c
  2847  000540  50FA               	movf	pclath,w,c
  2848  000542  0E01               	movlw	1
  2849  000544  0012               	return		;indir
  2850  000546                     l2763:
  2851                           
  2852                           ;FastTransfer.c: 228: serial_write(rx_buffer[rx_array_inx - 1]);
  2853  000546  D801               	call	u3168
  2854  000548  D025               	goto	l2765
  2855  00054A                     u3168:
  2856  00054A  0005               	push	
  2857  00054C  6EFA               	movwf	pclath,c
  2858  00054E  5036               	movf	_serial_write,w,c
  2859  000550  6EFD               	movwf	tosl,c
  2860  000552  5037               	movf	_serial_write+1,w,c
  2861  000554  6EFE               	movwf	tosh,c
  2862  000556  50F8               	movf	tblptru,w,c
  2863  000558  6EFF               	movwf	tosu,c
  2864  00055A  50FA               	movf	pclath,w,c
  2865  00055C  0EFF               	movlw	255
  2866  00055E  0100               	movlb	0	; () banked
  2867  000560  6F8C               	movwf	??_receiveData& (0+255),b
  2868  000562  0EFF               	movlw	255
  2869  000564  0100               	movlb	0	; () banked
  2870  000566  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  2871  000568  5042               	movf	_rx_array_inx,w,c
  2872  00056A  0100               	movlb	0	; () banked
  2873  00056C  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2874  00056E  6B8F               	clrf	(??_receiveData+3)& (0+255),b
  2875  000570  0100               	movlb	0	; () banked
  2876  000572  518C               	movf	??_receiveData& (0+255),w,b
  2877  000574  0100               	movlb	0	; () banked
  2878  000576  278E               	addwf	(??_receiveData+2)& (0+255),f,b
  2879  000578  0100               	movlb	0	; () banked
  2880  00057A  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2881  00057C  0100               	movlb	0	; () banked
  2882  00057E  238F               	addwfc	(??_receiveData+3)& (0+255),f,b
  2883  000580  0E00               	movlw	low _rx_buffer
  2884  000582  0100               	movlb	0	; () banked
  2885  000584  258E               	addwf	(??_receiveData+2)& (0+255),w,b
  2886  000586  6ED9               	movwf	fsr2l,c
  2887  000588  0E02               	movlw	high _rx_buffer
  2888  00058A  0100               	movlb	0	; () banked
  2889  00058C  218F               	addwfc	(??_receiveData+3)& (0+255),w,b
  2890  00058E  6EDA               	movwf	fsr2h,c
  2891  000590  50DF               	movf	indf2,w,c
  2892  000592  0012               	return		;indir
  2893  000594                     l2765:
  2894                           
  2895                           ;FastTransfer.c: 229: serial_write(crcHolder);
  2896  000594  D801               	call	u3178
  2897  000596  D00C               	goto	l2767
  2898  000598                     u3178:
  2899  000598  0005               	push	
  2900  00059A  6EFA               	movwf	pclath,c
  2901  00059C  5036               	movf	_serial_write,w,c
  2902  00059E  6EFD               	movwf	tosl,c
  2903  0005A0  5037               	movf	_serial_write+1,w,c
  2904  0005A2  6EFE               	movwf	tosh,c
  2905  0005A4  50F8               	movf	tblptru,w,c
  2906  0005A6  6EFF               	movwf	tosu,c
  2907  0005A8  50FA               	movf	pclath,w,c
  2908  0005AA  0100               	movlb	0	; () banked
  2909  0005AC  5198               	movf	receiveData@crcHolder& (0+255),w,b
  2910  0005AE  0012               	return		;indir
  2911  0005B0                     l2767:
  2912                           
  2913                           ;FastTransfer.c: 230: }
  2914                           ;FastTransfer.c: 234: rx_len = 0;
  2915  0005B0  0E00               	movlw	0
  2916  0005B2  6E43               	movwf	_rx_len,c
  2917                           
  2918                           ;FastTransfer.c: 235: rx_array_inx = 0;
  2919  0005B4  0E00               	movlw	0
  2920  0005B6  6E42               	movwf	_rx_array_inx,c
  2921                           
  2922                           ;FastTransfer.c: 236: return 1;
  2923  0005B8  0E01               	movlw	1
  2924  0005BA  0012               	return	
  2925  0005BC                     l2777:
  2926                           
  2927                           ;FastTransfer.c: 238: crcErrorCounter++;
  2928  0005BC  4A28               	infsnz	_crcErrorCounter,f,c
  2929  0005BE  2A29               	incf	_crcErrorCounter+1,f,c
  2930                           
  2931                           ;FastTransfer.c: 240: if (AKNAKsend) {
  2932  0005C0  503A               	movf	_AKNAKsend,w,c
  2933  0005C2  B4D8               	btfsc	status,2,c
  2934  0005C4  D0BC               	goto	l2807
  2935                           
  2936                           ;FastTransfer.c: 241: unsigned char holder[3];
  2937                           ;FastTransfer.c: 242: holder[0] = 255;
  2938  0005C6  0100               	movlb	0	; () banked
  2939  0005C8  6995               	setf	receiveData@holder_329& (0+255),b
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;FastTransfer.c: 243: holder[1] = 2;
  2943  0005CA  0E02               	movlw	2
  2944  0005CC  0100               	movlb	0	; () banked
  2945  0005CE  6F96               	movwf	(receiveData@holder_329+1)& (0+255),b
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;FastTransfer.c: 244: holder[2] = rx_buffer[rx_array_inx - 1];
  2949  0005D0  0EFF               	movlw	255
  2950  0005D2  0100               	movlb	0	; () banked
  2951  0005D4  6F8C               	movwf	??_receiveData& (0+255),b
  2952  0005D6  0EFF               	movlw	255
  2953  0005D8  0100               	movlb	0	; () banked
  2954  0005DA  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  2955  0005DC  5042               	movf	_rx_array_inx,w,c
  2956  0005DE  0100               	movlb	0	; () banked
  2957  0005E0  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2958  0005E2  6B8F               	clrf	(??_receiveData+3)& (0+255),b
  2959  0005E4  0100               	movlb	0	; () banked
  2960  0005E6  518C               	movf	??_receiveData& (0+255),w,b
  2961  0005E8  0100               	movlb	0	; () banked
  2962  0005EA  278E               	addwf	(??_receiveData+2)& (0+255),f,b
  2963  0005EC  0100               	movlb	0	; () banked
  2964  0005EE  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2965  0005F0  0100               	movlb	0	; () banked
  2966  0005F2  238F               	addwfc	(??_receiveData+3)& (0+255),f,b
  2967  0005F4  0E00               	movlw	low _rx_buffer
  2968  0005F6  0100               	movlb	0	; () banked
  2969  0005F8  258E               	addwf	(??_receiveData+2)& (0+255),w,b
  2970  0005FA  6ED9               	movwf	fsr2l,c
  2971  0005FC  0E02               	movlw	high _rx_buffer
  2972  0005FE  0100               	movlb	0	; () banked
  2973  000600  218F               	addwfc	(??_receiveData+3)& (0+255),w,b
  2974  000602  6EDA               	movwf	fsr2h,c
  2975  000604  50DF               	movf	indf2,w,c
  2976  000606  0100               	movlb	0	; () banked
  2977  000608  6F97               	movwf	(receiveData@holder_329+2)& (0+255),b
  2978                           
  2979                           ; BSR set to: 0
  2980                           ;FastTransfer.c: 245: unsigned char crcHolder = CRC8(holder, 3);
  2981  00060A  0E95               	movlw	low receiveData@holder_329
  2982  00060C  6E1B               	movwf	CRC8@data,c
  2983  00060E  0E00               	movlw	high receiveData@holder_329
  2984  000610  6E1C               	movwf	CRC8@data+1,c
  2985  000612  0E03               	movlw	3
  2986  000614  6E1D               	movwf	CRC8@len,c
  2987  000616  EC7A  F00A         	call	_CRC8
  2988  00061A  0100               	movlb	0	; () banked
  2989  00061C  6F99               	movwf	receiveData@crcHolder_330& (0+255),b
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;FastTransfer.c: 246: serial_write(0x06);
  2993  00061E  D801               	call	u3198
  2994  000620  D00B               	goto	l2791
  2995  000622                     u3198:
  2996  000622  0005               	push	
  2997  000624  6EFA               	movwf	pclath,c
  2998  000626  5036               	movf	_serial_write,w,c
  2999  000628  6EFD               	movwf	tosl,c
  3000  00062A  5037               	movf	_serial_write+1,w,c
  3001  00062C  6EFE               	movwf	tosh,c
  3002  00062E  50F8               	movf	tblptru,w,c
  3003  000630  6EFF               	movwf	tosu,c
  3004  000632  50FA               	movf	pclath,w,c
  3005  000634  0E06               	movlw	6
  3006  000636  0012               	return		;indir
  3007  000638                     l2791:
  3008                           
  3009                           ;FastTransfer.c: 247: serial_write(0x85);
  3010  000638  D801               	call	u3208
  3011  00063A  D00B               	goto	l2793
  3012  00063C                     u3208:
  3013  00063C  0005               	push	
  3014  00063E  6EFA               	movwf	pclath,c
  3015  000640  5036               	movf	_serial_write,w,c
  3016  000642  6EFD               	movwf	tosl,c
  3017  000644  5037               	movf	_serial_write+1,w,c
  3018  000646  6EFE               	movwf	tosh,c
  3019  000648  50F8               	movf	tblptru,w,c
  3020  00064A  6EFF               	movwf	tosu,c
  3021  00064C  50FA               	movf	pclath,w,c
  3022  00064E  0E85               	movlw	133
  3023  000650  0012               	return		;indir
  3024  000652                     l2793:
  3025                           
  3026                           ;FastTransfer.c: 248: serial_write(returnAddress);
  3027  000652  D801               	call	u3218
  3028  000654  D00B               	goto	l2795
  3029  000656                     u3218:
  3030  000656  0005               	push	
  3031  000658  6EFA               	movwf	pclath,c
  3032  00065A  5036               	movf	_serial_write,w,c
  3033  00065C  6EFD               	movwf	tosl,c
  3034  00065E  5037               	movf	_serial_write+1,w,c
  3035  000660  6EFE               	movwf	tosh,c
  3036  000662  50F8               	movf	tblptru,w,c
  3037  000664  6EFF               	movwf	tosu,c
  3038  000666  50FA               	movf	pclath,w,c
  3039  000668  5040               	movf	_returnAddress,w,c
  3040  00066A  0012               	return		;indir
  3041  00066C                     l2795:
  3042                           
  3043                           ;FastTransfer.c: 249: serial_write(moduleAddress);
  3044  00066C  D801               	call	u3228
  3045  00066E  D00B               	goto	l2797
  3046  000670                     u3228:
  3047  000670  0005               	push	
  3048  000672  6EFA               	movwf	pclath,c
  3049  000674  5036               	movf	_serial_write,w,c
  3050  000676  6EFD               	movwf	tosl,c
  3051  000678  5037               	movf	_serial_write+1,w,c
  3052  00067A  6EFE               	movwf	tosh,c
  3053  00067C  50F8               	movf	tblptru,w,c
  3054  00067E  6EFF               	movwf	tosu,c
  3055  000680  50FA               	movf	pclath,w,c
  3056  000682  503F               	movf	_moduleAddress,w,c
  3057  000684  0012               	return		;indir
  3058  000686                     l2797:
  3059                           
  3060                           ;FastTransfer.c: 250: serial_write(3);
  3061  000686  D801               	call	u3238
  3062  000688  D00B               	goto	l2799
  3063  00068A                     u3238:
  3064  00068A  0005               	push	
  3065  00068C  6EFA               	movwf	pclath,c
  3066  00068E  5036               	movf	_serial_write,w,c
  3067  000690  6EFD               	movwf	tosl,c
  3068  000692  5037               	movf	_serial_write+1,w,c
  3069  000694  6EFE               	movwf	tosh,c
  3070  000696  50F8               	movf	tblptru,w,c
  3071  000698  6EFF               	movwf	tosu,c
  3072  00069A  50FA               	movf	pclath,w,c
  3073  00069C  0E03               	movlw	3
  3074  00069E  0012               	return		;indir
  3075  0006A0                     l2799:
  3076                           
  3077                           ;FastTransfer.c: 251: serial_write(255);
  3078  0006A0  D801               	call	u3248
  3079  0006A2  D00B               	goto	l2801
  3080  0006A4                     u3248:
  3081  0006A4  0005               	push	
  3082  0006A6  6EFA               	movwf	pclath,c
  3083  0006A8  5036               	movf	_serial_write,w,c
  3084  0006AA  6EFD               	movwf	tosl,c
  3085  0006AC  5037               	movf	_serial_write+1,w,c
  3086  0006AE  6EFE               	movwf	tosh,c
  3087  0006B0  50F8               	movf	tblptru,w,c
  3088  0006B2  6EFF               	movwf	tosu,c
  3089  0006B4  50FA               	movf	pclath,w,c
  3090  0006B6  0EFF               	movlw	255
  3091  0006B8  0012               	return		;indir
  3092  0006BA                     l2801:
  3093                           
  3094                           ;FastTransfer.c: 252: serial_write(2);
  3095  0006BA  D801               	call	u3258
  3096  0006BC  D00B               	goto	l2803
  3097  0006BE                     u3258:
  3098  0006BE  0005               	push	
  3099  0006C0  6EFA               	movwf	pclath,c
  3100  0006C2  5036               	movf	_serial_write,w,c
  3101  0006C4  6EFD               	movwf	tosl,c
  3102  0006C6  5037               	movf	_serial_write+1,w,c
  3103  0006C8  6EFE               	movwf	tosh,c
  3104  0006CA  50F8               	movf	tblptru,w,c
  3105  0006CC  6EFF               	movwf	tosu,c
  3106  0006CE  50FA               	movf	pclath,w,c
  3107  0006D0  0E02               	movlw	2
  3108  0006D2  0012               	return		;indir
  3109  0006D4                     l2803:
  3110                           
  3111                           ;FastTransfer.c: 253: serial_write(rx_buffer[rx_array_inx - 1]);
  3112  0006D4  D801               	call	u3268
  3113  0006D6  D025               	goto	l2805
  3114  0006D8                     u3268:
  3115  0006D8  0005               	push	
  3116  0006DA  6EFA               	movwf	pclath,c
  3117  0006DC  5036               	movf	_serial_write,w,c
  3118  0006DE  6EFD               	movwf	tosl,c
  3119  0006E0  5037               	movf	_serial_write+1,w,c
  3120  0006E2  6EFE               	movwf	tosh,c
  3121  0006E4  50F8               	movf	tblptru,w,c
  3122  0006E6  6EFF               	movwf	tosu,c
  3123  0006E8  50FA               	movf	pclath,w,c
  3124  0006EA  0EFF               	movlw	255
  3125  0006EC  0100               	movlb	0	; () banked
  3126  0006EE  6F8C               	movwf	??_receiveData& (0+255),b
  3127  0006F0  0EFF               	movlw	255
  3128  0006F2  0100               	movlb	0	; () banked
  3129  0006F4  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  3130  0006F6  5042               	movf	_rx_array_inx,w,c
  3131  0006F8  0100               	movlb	0	; () banked
  3132  0006FA  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  3133  0006FC  6B8F               	clrf	(??_receiveData+3)& (0+255),b
  3134  0006FE  0100               	movlb	0	; () banked
  3135  000700  518C               	movf	??_receiveData& (0+255),w,b
  3136  000702  0100               	movlb	0	; () banked
  3137  000704  278E               	addwf	(??_receiveData+2)& (0+255),f,b
  3138  000706  0100               	movlb	0	; () banked
  3139  000708  518D               	movf	(??_receiveData+1)& (0+255),w,b
  3140  00070A  0100               	movlb	0	; () banked
  3141  00070C  238F               	addwfc	(??_receiveData+3)& (0+255),f,b
  3142  00070E  0E00               	movlw	low _rx_buffer
  3143  000710  0100               	movlb	0	; () banked
  3144  000712  258E               	addwf	(??_receiveData+2)& (0+255),w,b
  3145  000714  6ED9               	movwf	fsr2l,c
  3146  000716  0E02               	movlw	high _rx_buffer
  3147  000718  0100               	movlb	0	; () banked
  3148  00071A  218F               	addwfc	(??_receiveData+3)& (0+255),w,b
  3149  00071C  6EDA               	movwf	fsr2h,c
  3150  00071E  50DF               	movf	indf2,w,c
  3151  000720  0012               	return		;indir
  3152  000722                     l2805:
  3153                           
  3154                           ;FastTransfer.c: 254: serial_write(crcHolder);
  3155  000722  D801               	call	u3278
  3156  000724  D00C               	goto	l2807
  3157  000726                     u3278:
  3158  000726  0005               	push	
  3159  000728  6EFA               	movwf	pclath,c
  3160  00072A  5036               	movf	_serial_write,w,c
  3161  00072C  6EFD               	movwf	tosl,c
  3162  00072E  5037               	movf	_serial_write+1,w,c
  3163  000730  6EFE               	movwf	tosh,c
  3164  000732  50F8               	movf	tblptru,w,c
  3165  000734  6EFF               	movwf	tosu,c
  3166  000736  50FA               	movf	pclath,w,c
  3167  000738  0100               	movlb	0	; () banked
  3168  00073A  5199               	movf	receiveData@crcHolder_330& (0+255),w,b
  3169  00073C  0012               	return		;indir
  3170  00073E                     l2807:
  3171                           
  3172                           ;FastTransfer.c: 255: }
  3173                           ;FastTransfer.c: 258: rx_len = 0;
  3174  00073E  0E00               	movlw	0
  3175  000740  6E43               	movwf	_rx_len,c
  3176                           
  3177                           ;FastTransfer.c: 259: rx_array_inx = 0;
  3178  000742  0E00               	movlw	0
  3179  000744  6E42               	movwf	_rx_array_inx,c
  3180                           
  3181                           ;FastTransfer.c: 260: return 0;
  3182  000746  0E00               	movlw	0
  3183  000748  0012               	return	
  3184  00074A                     l2815:
  3185                           
  3186                           ;FastTransfer.c: 261: }
  3187                           ;FastTransfer.c: 262: }
  3188                           ;FastTransfer.c: 263: }
  3189                           ;FastTransfer.c: 266: return 0;
  3190  00074A  0E00               	movlw	0
  3191  00074C  0012               	return	
  3192  00074E                     __end_of_receiveData:
  3193                           	opt stack 0
  3194                           tosu	equ	0xFFF
  3195                           tosh	equ	0xFFE
  3196                           tosl	equ	0xFFD
  3197                           pclath	equ	0xFFA
  3198                           tblptru	equ	0xFF8
  3199                           tblptrh	equ	0xFF7
  3200                           tblptrl	equ	0xFF6
  3201                           tablat	equ	0xFF5
  3202                           prodh	equ	0xFF4
  3203                           prodl	equ	0xFF3
  3204                           postinc0	equ	0xFEE
  3205                           wreg	equ	0xFE8
  3206                           indf2	equ	0xFDF
  3207                           postinc2	equ	0xFDE
  3208                           postdec2	equ	0xFDD
  3209                           plusw2	equ	0xFDB
  3210                           fsr2h	equ	0xFDA
  3211                           fsr2l	equ	0xFD9
  3212                           status	equ	0xFD8
  3213                           
  3214 ;; *************** function _Send_put *****************
  3215 ;; Defined at:
  3216 ;;		line 130 in file "UART.c"
  3217 ;; Parameters:    Size  Location     Type
  3218 ;;  _data           1    wreg     unsigned char 
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;  _data           1    0[BANK0 ] unsigned char 
  3221 ;; Return value:  Size  Location     Type
  3222 ;;                  1    wreg      void 
  3223 ;; Registers used:
  3224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3225 ;; Tracked objects:
  3226 ;;		On entry : 0/0
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3230 ;;      Params:         0       0       0       0       0       0       0
  3231 ;;      Locals:         0       1       0       0       0       0       0
  3232 ;;      Temps:          0       0       0       0       0       0       0
  3233 ;;      Totals:         0       1       0       0       0       0       0
  3234 ;;Total ram usage:        1 bytes
  3235 ;; Hardware stack levels used:    1
  3236 ;; Hardware stack levels required when called:    6
  3237 ;; This function calls:
  3238 ;;		_UART_buff_get
  3239 ;;		_UART_buff_put
  3240 ;; This function is called by:
  3241 ;;		_ComStart
  3242 ;;		_putch
  3243 ;;		_sendData
  3244 ;;		_receiveData
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           	psect	text12
  3249  0015E0                     __ptext12:
  3250                           	opt stack 0
  3251  0015E0                     _Send_put:
  3252                           	opt stack 21
  3253                           
  3254                           ;incstack = 0
  3255                           ;Send_put@_data stored from wreg
  3256  0015E0  0100               	movlb	0	; () banked
  3257  0015E2  6F83               	movwf	Send_put@_data& (0+255),b
  3258                           
  3259                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  3260  0015E4  0E00               	movlw	low _output_buffer
  3261  0015E6  6E21               	movwf	UART_buff_put@_this,c
  3262  0015E8  0E04               	movlw	high _output_buffer
  3263  0015EA  6E22               	movwf	UART_buff_put@_this+1,c
  3264  0015EC  C083  F023         	movff	Send_put@_data,UART_buff_put@c
  3265  0015F0  ECB4  F005         	call	_UART_buff_put
  3266                           
  3267                           ;UART.c: 132: if (Transmit_stall == 1) {
  3268  0015F4  0444               	decf	_Transmit_stall,w,c
  3269  0015F6  A4D8               	btfss	status,2,c
  3270  0015F8  0012               	return	
  3271                           
  3272                           ;UART.c: 133: Transmit_stall = 0;
  3273  0015FA  0E00               	movlw	0
  3274  0015FC  6E44               	movwf	_Transmit_stall,c
  3275                           
  3276                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  3277  0015FE  0E00               	movlw	low _output_buffer
  3278  001600  6E21               	movwf	UART_buff_get@_this,c
  3279  001602  0E04               	movlw	high _output_buffer
  3280  001604  6E22               	movwf	UART_buff_get@_this+1,c
  3281  001606  EC8A  F008         	call	_UART_buff_get	;wreg free
  3282  00160A  6EAD               	movwf	4013,c	;volatile
  3283                           
  3284                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  3285  00160C  889D               	bsf	3997,4,c	;volatile
  3286  00160E  0012               	return	
  3287  001610                     __end_of_Send_put:
  3288                           	opt stack 0
  3289                           tosu	equ	0xFFF
  3290                           tosh	equ	0xFFE
  3291                           tosl	equ	0xFFD
  3292                           pclath	equ	0xFFA
  3293                           tblptru	equ	0xFF8
  3294                           tblptrh	equ	0xFF7
  3295                           tblptrl	equ	0xFF6
  3296                           tablat	equ	0xFF5
  3297                           prodh	equ	0xFF4
  3298                           prodl	equ	0xFF3
  3299                           postinc0	equ	0xFEE
  3300                           wreg	equ	0xFE8
  3301                           indf2	equ	0xFDF
  3302                           postinc2	equ	0xFDE
  3303                           postdec2	equ	0xFDD
  3304                           plusw2	equ	0xFDB
  3305                           fsr2h	equ	0xFDA
  3306                           fsr2l	equ	0xFD9
  3307                           status	equ	0xFD8
  3308                           
  3309 ;; *************** function _UART_buff_put *****************
  3310 ;; Defined at:
  3311 ;;		line 68 in file "UART.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3314 ;;		 -> output_buffer(206), input_buffer(206), 
  3315 ;;  c               1   34[COMRAM] const unsigned char 
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;		None
  3318 ;; Return value:  Size  Location     Type
  3319 ;;                  1    wreg      void 
  3320 ;; Registers used:
  3321 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3322 ;; Tracked objects:
  3323 ;;		On entry : 0/0
  3324 ;;		On exit  : 0/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3327 ;;      Params:         3       0       0       0       0       0       0
  3328 ;;      Locals:         0       0       0       0       0       0       0
  3329 ;;      Temps:          2       0       0       0       0       0       0
  3330 ;;      Totals:         5       0       0       0       0       0       0
  3331 ;;Total ram usage:        5 bytes
  3332 ;; Hardware stack levels used:    1
  3333 ;; Hardware stack levels required when called:    5
  3334 ;; This function calls:
  3335 ;;		_UART_buff_modulo_inc
  3336 ;; This function is called by:
  3337 ;;		_Send_put
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           	psect	text13
  3342  000B68                     __ptext13:
  3343                           	opt stack 0
  3344  000B68                     _UART_buff_put:
  3345                           	opt stack 21
  3346                           
  3347                           ;UART.c: 69: if (_this->count < 200) {
  3348                           
  3349                           ;incstack = 0
  3350  000B68  EE20 F0CC          	lfsr	2,204
  3351  000B6C  5021               	movf	UART_buff_put@_this,w,c
  3352  000B6E  26D9               	addwf	fsr2l,f,c
  3353  000B70  5022               	movf	UART_buff_put@_this+1,w,c
  3354  000B72  22DA               	addwfc	fsr2h,f,c
  3355  000B74  0E01               	movlw	1
  3356  000B76  BEDB               	btfsc	plusw2,7,c
  3357  000B78  D007               	goto	l2417
  3358  000B7A  0E01               	movlw	1
  3359  000B7C  50DB               	movf	plusw2,w,c
  3360  000B7E  E13A               	bnz	l2423
  3361  000B80  0EC8               	movlw	200
  3362  000B82  5CDE               	subwf	postinc2,w,c
  3363  000B84  B0D8               	btfsc	status,0,c
  3364  000B86  D036               	goto	l2423
  3365  000B88                     l2417:
  3366                           
  3367                           ;UART.c: 70: _this->buf[_this->head] = c;
  3368  000B88  EE20 F0C8          	lfsr	2,200
  3369  000B8C  5021               	movf	UART_buff_put@_this,w,c
  3370  000B8E  26D9               	addwf	fsr2l,f,c
  3371  000B90  5022               	movf	UART_buff_put@_this+1,w,c
  3372  000B92  22DA               	addwfc	fsr2h,f,c
  3373  000B94  CFDE F024          	movff	postinc2,??_UART_buff_put
  3374  000B98  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3375  000B9C  5024               	movf	??_UART_buff_put,w,c
  3376  000B9E  2421               	addwf	UART_buff_put@_this,w,c
  3377  000BA0  6ED9               	movwf	fsr2l,c
  3378  000BA2  5025               	movf	??_UART_buff_put+1,w,c
  3379  000BA4  2022               	addwfc	UART_buff_put@_this+1,w,c
  3380  000BA6  6EDA               	movwf	fsr2h,c
  3381  000BA8  C023  FFDF         	movff	UART_buff_put@c,indf2
  3382                           
  3383                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3384  000BAC  EE20 F0C8          	lfsr	2,200
  3385  000BB0  5021               	movf	UART_buff_put@_this,w,c
  3386  000BB2  26D9               	addwf	fsr2l,f,c
  3387  000BB4  5022               	movf	UART_buff_put@_this+1,w,c
  3388  000BB6  22DA               	addwfc	fsr2h,f,c
  3389  000BB8  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3390  000BBC  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3391  000BC0  0E00               	movlw	0
  3392  000BC2  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3393  000BC4  0EC8               	movlw	200
  3394  000BC6  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3395  000BC8  EC49  F00B         	call	_UART_buff_modulo_inc	;wreg free
  3396  000BCC  EE20 F0C8          	lfsr	2,200
  3397  000BD0  5021               	movf	UART_buff_put@_this,w,c
  3398  000BD2  26D9               	addwf	fsr2l,f,c
  3399  000BD4  5022               	movf	UART_buff_put@_this+1,w,c
  3400  000BD6  22DA               	addwfc	fsr2h,f,c
  3401  000BD8  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3402  000BDC  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3403                           
  3404                           ;UART.c: 72: ++_this->count;
  3405  000BE0  EE20 F0CC          	lfsr	2,204
  3406  000BE4  5021               	movf	UART_buff_put@_this,w,c
  3407  000BE6  26D9               	addwf	fsr2l,f,c
  3408  000BE8  5022               	movf	UART_buff_put@_this+1,w,c
  3409  000BEA  22DA               	addwfc	fsr2h,f,c
  3410  000BEC  2ADE               	incf	postinc2,f,c
  3411  000BEE  0E00               	movlw	0
  3412  000BF0  22DD               	addwfc	postdec2,f,c
  3413                           
  3414                           ;UART.c: 73: } else {
  3415  000BF2  0012               	return	
  3416  000BF4                     l2423:
  3417                           
  3418                           ;UART.c: 74: _this->buf[_this->head] = c;
  3419  000BF4  EE20 F0C8          	lfsr	2,200
  3420  000BF8  5021               	movf	UART_buff_put@_this,w,c
  3421  000BFA  26D9               	addwf	fsr2l,f,c
  3422  000BFC  5022               	movf	UART_buff_put@_this+1,w,c
  3423  000BFE  22DA               	addwfc	fsr2h,f,c
  3424  000C00  CFDE F024          	movff	postinc2,??_UART_buff_put
  3425  000C04  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3426  000C08  5024               	movf	??_UART_buff_put,w,c
  3427  000C0A  2421               	addwf	UART_buff_put@_this,w,c
  3428  000C0C  6ED9               	movwf	fsr2l,c
  3429  000C0E  5025               	movf	??_UART_buff_put+1,w,c
  3430  000C10  2022               	addwfc	UART_buff_put@_this+1,w,c
  3431  000C12  6EDA               	movwf	fsr2h,c
  3432  000C14  C023  FFDF         	movff	UART_buff_put@c,indf2
  3433                           
  3434                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3435  000C18  EE20 F0C8          	lfsr	2,200
  3436  000C1C  5021               	movf	UART_buff_put@_this,w,c
  3437  000C1E  26D9               	addwf	fsr2l,f,c
  3438  000C20  5022               	movf	UART_buff_put@_this+1,w,c
  3439  000C22  22DA               	addwfc	fsr2h,f,c
  3440  000C24  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3441  000C28  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3442  000C2C  0E00               	movlw	0
  3443  000C2E  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3444  000C30  0EC8               	movlw	200
  3445  000C32  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3446  000C34  EC49  F00B         	call	_UART_buff_modulo_inc	;wreg free
  3447  000C38  EE20 F0C8          	lfsr	2,200
  3448  000C3C  5021               	movf	UART_buff_put@_this,w,c
  3449  000C3E  26D9               	addwf	fsr2l,f,c
  3450  000C40  5022               	movf	UART_buff_put@_this+1,w,c
  3451  000C42  22DA               	addwfc	fsr2h,f,c
  3452  000C44  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3453  000C48  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3454                           
  3455                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3456  000C4C  EE20 F0CA          	lfsr	2,202
  3457  000C50  5021               	movf	UART_buff_put@_this,w,c
  3458  000C52  26D9               	addwf	fsr2l,f,c
  3459  000C54  5022               	movf	UART_buff_put@_this+1,w,c
  3460  000C56  22DA               	addwfc	fsr2h,f,c
  3461  000C58  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3462  000C5C  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3463  000C60  0E00               	movlw	0
  3464  000C62  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3465  000C64  0EC8               	movlw	200
  3466  000C66  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3467  000C68  EC49  F00B         	call	_UART_buff_modulo_inc	;wreg free
  3468  000C6C  EE20 F0CA          	lfsr	2,202
  3469  000C70  5021               	movf	UART_buff_put@_this,w,c
  3470  000C72  26D9               	addwf	fsr2l,f,c
  3471  000C74  5022               	movf	UART_buff_put@_this+1,w,c
  3472  000C76  22DA               	addwfc	fsr2h,f,c
  3473  000C78  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3474  000C7C  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3475  000C80  0012               	return	
  3476  000C82                     __end_of_UART_buff_put:
  3477                           	opt stack 0
  3478                           tosu	equ	0xFFF
  3479                           tosh	equ	0xFFE
  3480                           tosl	equ	0xFFD
  3481                           pclath	equ	0xFFA
  3482                           tblptru	equ	0xFF8
  3483                           tblptrh	equ	0xFF7
  3484                           tblptrl	equ	0xFF6
  3485                           tablat	equ	0xFF5
  3486                           prodh	equ	0xFF4
  3487                           prodl	equ	0xFF3
  3488                           postinc0	equ	0xFEE
  3489                           wreg	equ	0xFE8
  3490                           indf2	equ	0xFDF
  3491                           postinc2	equ	0xFDE
  3492                           postdec2	equ	0xFDD
  3493                           plusw2	equ	0xFDB
  3494                           fsr2h	equ	0xFDA
  3495                           fsr2l	equ	0xFD9
  3496                           status	equ	0xFD8
  3497                           
  3498 ;; *************** function _Receive_peek *****************
  3499 ;; Defined at:
  3500 ;;		line 118 in file "UART.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;		None
  3503 ;; Auto vars:     Size  Location     Type
  3504 ;;		None
  3505 ;; Return value:  Size  Location     Type
  3506 ;;                  1    wreg      unsigned char 
  3507 ;; Registers used:
  3508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3509 ;; Tracked objects:
  3510 ;;		On entry : 0/0
  3511 ;;		On exit  : 0/0
  3512 ;;		Unchanged: 0/0
  3513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3514 ;;      Params:         0       0       0       0       0       0       0
  3515 ;;      Locals:         0       0       0       0       0       0       0
  3516 ;;      Temps:          0       0       0       0       0       0       0
  3517 ;;      Totals:         0       0       0       0       0       0       0
  3518 ;;Total ram usage:        0 bytes
  3519 ;; Hardware stack levels used:    1
  3520 ;; Hardware stack levels required when called:    5
  3521 ;; This function calls:
  3522 ;;		_UART_buff_peek
  3523 ;; This function is called by:
  3524 ;;		_ComStart
  3525 ;;		_receiveData
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528                           
  3529                           	psect	text14
  3530  001842                     __ptext14:
  3531                           	opt stack 0
  3532  001842                     _Receive_peek:
  3533                           	opt stack 23
  3534                           
  3535                           ;UART.c: 119: return UART_buff_peek(&input_buffer);
  3536                           
  3537                           ;incstack = 0
  3538  001842  0E00               	movlw	low _input_buffer
  3539  001844  6E1B               	movwf	UART_buff_peek@_this,c
  3540  001846  0E03               	movlw	high _input_buffer
  3541  001848  6E1C               	movwf	UART_buff_peek@_this+1,c
  3542  00184A  EC73  F00B         	call	_UART_buff_peek	;wreg free
  3543  00184E  0012               	return	
  3544  001850                     __end_of_Receive_peek:
  3545                           	opt stack 0
  3546                           tosu	equ	0xFFF
  3547                           tosh	equ	0xFFE
  3548                           tosl	equ	0xFFD
  3549                           pclath	equ	0xFFA
  3550                           tblptru	equ	0xFF8
  3551                           tblptrh	equ	0xFF7
  3552                           tblptrl	equ	0xFF6
  3553                           tablat	equ	0xFF5
  3554                           prodh	equ	0xFF4
  3555                           prodl	equ	0xFF3
  3556                           postinc0	equ	0xFEE
  3557                           wreg	equ	0xFE8
  3558                           indf2	equ	0xFDF
  3559                           postinc2	equ	0xFDE
  3560                           postdec2	equ	0xFDD
  3561                           plusw2	equ	0xFDB
  3562                           fsr2h	equ	0xFDA
  3563                           fsr2l	equ	0xFD9
  3564                           status	equ	0xFD8
  3565                           
  3566 ;; *************** function _UART_buff_peek *****************
  3567 ;; Defined at:
  3568 ;;		line 114 in file "UART.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3571 ;;		 -> input_buffer(206), 
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;		None
  3574 ;; Return value:  Size  Location     Type
  3575 ;;                  1    wreg      unsigned char 
  3576 ;; Registers used:
  3577 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3578 ;; Tracked objects:
  3579 ;;		On entry : 0/0
  3580 ;;		On exit  : 0/0
  3581 ;;		Unchanged: 0/0
  3582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3583 ;;      Params:         2       0       0       0       0       0       0
  3584 ;;      Locals:         0       0       0       0       0       0       0
  3585 ;;      Temps:          2       0       0       0       0       0       0
  3586 ;;      Totals:         4       0       0       0       0       0       0
  3587 ;;Total ram usage:        4 bytes
  3588 ;; Hardware stack levels used:    1
  3589 ;; Hardware stack levels required when called:    4
  3590 ;; This function calls:
  3591 ;;		Nothing
  3592 ;; This function is called by:
  3593 ;;		_Receive_peek
  3594 ;; This function uses a non-reentrant model
  3595 ;;
  3596                           
  3597                           	psect	text15
  3598  0016E6                     __ptext15:
  3599                           	opt stack 0
  3600  0016E6                     _UART_buff_peek:
  3601                           	opt stack 23
  3602                           
  3603                           ;UART.c: 115: return _this->buf[_this->tail];
  3604                           
  3605                           ;incstack = 0
  3606  0016E6  EE20 F0CA          	lfsr	2,202
  3607  0016EA  501B               	movf	UART_buff_peek@_this,w,c
  3608  0016EC  26D9               	addwf	fsr2l,f,c
  3609  0016EE  501C               	movf	UART_buff_peek@_this+1,w,c
  3610  0016F0  22DA               	addwfc	fsr2h,f,c
  3611  0016F2  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  3612  0016F6  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  3613  0016FA  501D               	movf	??_UART_buff_peek,w,c
  3614  0016FC  241B               	addwf	UART_buff_peek@_this,w,c
  3615  0016FE  6ED9               	movwf	fsr2l,c
  3616  001700  501E               	movf	??_UART_buff_peek+1,w,c
  3617  001702  201C               	addwfc	UART_buff_peek@_this+1,w,c
  3618  001704  6EDA               	movwf	fsr2h,c
  3619  001706  50DF               	movf	indf2,w,c
  3620  001708  0012               	return	
  3621  00170A                     __end_of_UART_buff_peek:
  3622                           	opt stack 0
  3623                           tosu	equ	0xFFF
  3624                           tosh	equ	0xFFE
  3625                           tosl	equ	0xFFD
  3626                           pclath	equ	0xFFA
  3627                           tblptru	equ	0xFF8
  3628                           tblptrh	equ	0xFF7
  3629                           tblptrl	equ	0xFF6
  3630                           tablat	equ	0xFF5
  3631                           prodh	equ	0xFF4
  3632                           prodl	equ	0xFF3
  3633                           postinc0	equ	0xFEE
  3634                           wreg	equ	0xFE8
  3635                           indf2	equ	0xFDF
  3636                           postinc2	equ	0xFDE
  3637                           postdec2	equ	0xFDD
  3638                           plusw2	equ	0xFDB
  3639                           fsr2h	equ	0xFDA
  3640                           fsr2l	equ	0xFD9
  3641                           status	equ	0xFD8
  3642                           
  3643 ;; *************** function _CRCcheck *****************
  3644 ;; Defined at:
  3645 ;;		line 429 in file "FastTransfer.c"
  3646 ;; Parameters:    Size  Location     Type
  3647 ;;		None
  3648 ;; Auto vars:     Size  Location     Type
  3649 ;;  rt              2    7[BANK0 ] int 
  3650 ;;  arrayHolder     3    4[BANK0 ] unsigned char [3]
  3651 ;;  calculatedCR    1    3[BANK0 ] unsigned char 
  3652 ;;  SentCRC         1    2[BANK0 ] unsigned char 
  3653 ;; Return value:  Size  Location     Type
  3654 ;;                  1    wreg      void 
  3655 ;; Registers used:
  3656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3657 ;; Tracked objects:
  3658 ;;		On entry : 0/0
  3659 ;;		On exit  : 0/0
  3660 ;;		Unchanged: 0/0
  3661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3662 ;;      Params:         0       0       0       0       0       0       0
  3663 ;;      Locals:         0       7       0       0       0       0       0
  3664 ;;      Temps:          0       0       0       0       0       0       0
  3665 ;;      Totals:         0       7       0       0       0       0       0
  3666 ;;Total ram usage:        7 bytes
  3667 ;; Hardware stack levels used:    1
  3668 ;; Hardware stack levels required when called:    7
  3669 ;; This function calls:
  3670 ;;		Absolute function
  3671 ;;		_CRC8
  3672 ;;		_Receive_available
  3673 ;;		_Receive_get
  3674 ;;		_crcBufS_get
  3675 ;;		_crcBufS_status_put
  3676 ;; This function is called by:
  3677 ;;		_receiveData
  3678 ;; This function uses a non-reentrant model
  3679 ;;
  3680                           
  3681                           	psect	text16
  3682  0008C2                     __ptext16:
  3683                           	opt stack 0
  3684  0008C2                     _CRCcheck:
  3685                           	opt stack 21
  3686  0008C2                     l2611:
  3687  0008C2  D801               	call	u2668
  3688  0008C4  D00A               	goto	u2669
  3689  0008C6                     u2668:
  3690  0008C6  0005               	push	
  3691  0008C8  6EFA               	movwf	pclath,c
  3692  0008CA  5030               	movf	_serial_available,w,c
  3693  0008CC  6EFD               	movwf	tosl,c
  3694  0008CE  5031               	movf	_serial_available+1,w,c
  3695  0008D0  6EFE               	movwf	tosh,c
  3696  0008D2  50F8               	movf	tblptru,w,c
  3697  0008D4  6EFF               	movwf	tosu,c
  3698  0008D6  50FA               	movf	pclath,w,c
  3699  0008D8  0012               	return		;indir
  3700  0008DA                     u2669:
  3701  0008DA  BE1E               	btfsc	?_Receive_available+1,7,c
  3702  0008DC  D7F2               	goto	l2611
  3703  0008DE  501E               	movf	?_Receive_available+1,w,c
  3704  0008E0  E104               	bnz	l2613
  3705  0008E2  0E04               	movlw	4
  3706  0008E4  5C1D               	subwf	?_Receive_available,w,c
  3707  0008E6  A0D8               	btfss	status,0,c
  3708  0008E8  D7EC               	goto	l2611
  3709  0008EA                     l2613:
  3710                           
  3711                           ;FastTransfer.c: 433: unsigned char arrayHolder[3];
  3712                           ;FastTransfer.c: 434: arrayHolder[0] = serial_read();
  3713  0008EA  D801               	call	u2688
  3714  0008EC  D00A               	goto	u2689
  3715  0008EE                     u2688:
  3716  0008EE  0005               	push	
  3717  0008F0  6EFA               	movwf	pclath,c
  3718  0008F2  5034               	movf	_serial_read,w,c
  3719  0008F4  6EFD               	movwf	tosl,c
  3720  0008F6  5035               	movf	_serial_read+1,w,c
  3721  0008F8  6EFE               	movwf	tosh,c
  3722  0008FA  50F8               	movf	tblptru,w,c
  3723  0008FC  6EFF               	movwf	tosu,c
  3724  0008FE  50FA               	movf	pclath,w,c
  3725  000900  0012               	return		;indir
  3726  000902                     u2689:
  3727  000902  0100               	movlb	0	; () banked
  3728  000904  6F87               	movwf	CRCcheck@arrayHolder& (0+255),b
  3729                           
  3730                           ;FastTransfer.c: 435: arrayHolder[1] = serial_read();
  3731  000906  D801               	call	u2698
  3732  000908  D00A               	goto	u2699
  3733  00090A                     u2698:
  3734  00090A  0005               	push	
  3735  00090C  6EFA               	movwf	pclath,c
  3736  00090E  5034               	movf	_serial_read,w,c
  3737  000910  6EFD               	movwf	tosl,c
  3738  000912  5035               	movf	_serial_read+1,w,c
  3739  000914  6EFE               	movwf	tosh,c
  3740  000916  50F8               	movf	tblptru,w,c
  3741  000918  6EFF               	movwf	tosu,c
  3742  00091A  50FA               	movf	pclath,w,c
  3743  00091C  0012               	return		;indir
  3744  00091E                     u2699:
  3745  00091E  0100               	movlb	0	; () banked
  3746  000920  6F88               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  3747                           
  3748                           ;FastTransfer.c: 436: arrayHolder[2] = serial_read();
  3749  000922  D801               	call	u2708
  3750  000924  D00A               	goto	u2709
  3751  000926                     u2708:
  3752  000926  0005               	push	
  3753  000928  6EFA               	movwf	pclath,c
  3754  00092A  5034               	movf	_serial_read,w,c
  3755  00092C  6EFD               	movwf	tosl,c
  3756  00092E  5035               	movf	_serial_read+1,w,c
  3757  000930  6EFE               	movwf	tosh,c
  3758  000932  50F8               	movf	tblptru,w,c
  3759  000934  6EFF               	movwf	tosu,c
  3760  000936  50FA               	movf	pclath,w,c
  3761  000938  0012               	return		;indir
  3762  00093A                     u2709:
  3763  00093A  0100               	movlb	0	; () banked
  3764  00093C  6F89               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  3765                           
  3766                           ;FastTransfer.c: 437: unsigned char SentCRC = serial_read();
  3767  00093E  D801               	call	u2718
  3768  000940  D00A               	goto	u2719
  3769  000942                     u2718:
  3770  000942  0005               	push	
  3771  000944  6EFA               	movwf	pclath,c
  3772  000946  5034               	movf	_serial_read,w,c
  3773  000948  6EFD               	movwf	tosl,c
  3774  00094A  5035               	movf	_serial_read+1,w,c
  3775  00094C  6EFE               	movwf	tosh,c
  3776  00094E  50F8               	movf	tblptru,w,c
  3777  000950  6EFF               	movwf	tosu,c
  3778  000952  50FA               	movf	pclath,w,c
  3779  000954  0012               	return		;indir
  3780  000956                     u2719:
  3781  000956  0100               	movlb	0	; () banked
  3782  000958  6F85               	movwf	CRCcheck@SentCRC& (0+255),b
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;FastTransfer.c: 438: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  3786  00095A  0E87               	movlw	low CRCcheck@arrayHolder
  3787  00095C  6E1B               	movwf	CRC8@data,c
  3788  00095E  0E00               	movlw	high CRCcheck@arrayHolder
  3789  000960  6E1C               	movwf	CRC8@data+1,c
  3790  000962  0E03               	movlw	3
  3791  000964  6E1D               	movwf	CRC8@len,c
  3792  000966  EC7A  F00A         	call	_CRC8	;wreg free
  3793  00096A  0100               	movlb	0	; () banked
  3794  00096C  6F86               	movwf	CRCcheck@calculatedCRC& (0+255),b
  3795                           
  3796                           ; BSR set to: 0
  3797                           ;FastTransfer.c: 441: if (SentCRC == calculatedCRC) {
  3798  00096E  0100               	movlb	0	; () banked
  3799  000970  5186               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  3800  000972  0100               	movlb	0	; () banked
  3801  000974  1985               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  3802  000976  A4D8               	btfss	status,2,c
  3803  000978  D04E               	goto	l2643
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;FastTransfer.c: 443: int rt;
  3807                           ;FastTransfer.c: 444: for (rt = 0; rt < 5; rt++) {
  3808  00097A  0E00               	movlw	0
  3809  00097C  0100               	movlb	0	; () banked
  3810  00097E  6F8B               	movwf	(CRCcheck@rt+1)& (0+255),b
  3811  000980  0E00               	movlw	0
  3812  000982  6F8A               	movwf	CRCcheck@rt& (0+255),b
  3813  000984                     l2621:
  3814                           
  3815                           ; BSR set to: 0
  3816  000984  0100               	movlb	0	; () banked
  3817  000986  BF8B               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3818  000988  D008               	goto	l2625
  3819  00098A  0100               	movlb	0	; () banked
  3820  00098C  518B               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3821  00098E  E146               	bnz	l226
  3822  000990  0E05               	movlw	5
  3823  000992  0100               	movlb	0	; () banked
  3824  000994  5D8A               	subwf	CRCcheck@rt& (0+255),w,b
  3825  000996  B0D8               	btfsc	status,0,c
  3826  000998  0012               	return	
  3827  00099A                     l2625:
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;FastTransfer.c: 445: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3831  00099A  0E68               	movlw	low _crc_buffer
  3832  00099C  6E1B               	movwf	crcBufS_get@_this,c
  3833  00099E  0E00               	movlw	high _crc_buffer
  3834  0009A0  6E1C               	movwf	crcBufS_get@_this+1,c
  3835  0009A2  C08A  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3836  0009A6  0E00               	movlw	0
  3837  0009A8  6E1E               	movwf	crcBufS_get@space,c
  3838  0009AA  ECCE  F006         	call	_crcBufS_get	;wreg free
  3839  0009AE  1840               	xorwf	_returnAddress,w,c
  3840  0009B0  A4D8               	btfss	status,2,c
  3841  0009B2  D02D               	goto	l2639
  3842                           
  3843                           ;FastTransfer.c: 446: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3844  0009B4  0E68               	movlw	low _crc_buffer
  3845  0009B6  6E1B               	movwf	crcBufS_get@_this,c
  3846  0009B8  0E00               	movlw	high _crc_buffer
  3847  0009BA  6E1C               	movwf	crcBufS_get@_this+1,c
  3848  0009BC  C08A  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3849  0009C0  0E01               	movlw	1
  3850  0009C2  6E1E               	movwf	crcBufS_get@space,c
  3851  0009C4  ECCE  F006         	call	_crcBufS_get	;wreg free
  3852  0009C8  0100               	movlb	0	; () banked
  3853  0009CA  1989               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3854  0009CC  A4D8               	btfss	status,2,c
  3855  0009CE  D01F               	goto	l2639
  3856                           
  3857                           ; BSR set to: 0
  3858                           ;FastTransfer.c: 447: if (arrayHolder[1] == 1) {
  3859  0009D0  0100               	movlb	0	; () banked
  3860  0009D2  0588               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3861  0009D4  A4D8               	btfss	status,2,c
  3862  0009D6  D00B               	goto	l2635
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;FastTransfer.c: 448: crcBufS_status_put(&crc_buffer, rt, 1);
  3866  0009D8  0E68               	movlw	low _crc_buffer
  3867  0009DA  6E1B               	movwf	crcBufS_status_put@_this,c
  3868  0009DC  0E00               	movlw	high _crc_buffer
  3869  0009DE  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3870  0009E0  C08A  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3871  0009E4  0E01               	movlw	1
  3872  0009E6  6E1E               	movwf	crcBufS_status_put@status,c
  3873  0009E8  EC1F  F008         	call	_crcBufS_status_put	;wreg free
  3874                           
  3875                           ;FastTransfer.c: 449: break;
  3876  0009EC  0012               	return	
  3877  0009EE                     l2635:
  3878  0009EE  0E02               	movlw	2
  3879  0009F0  0100               	movlb	0	; () banked
  3880  0009F2  1988               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3881  0009F4  A4D8               	btfss	status,2,c
  3882  0009F6  D00B               	goto	l2639
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;FastTransfer.c: 451: crcBufS_status_put(&crc_buffer, rt, 2);
  3886  0009F8  0E68               	movlw	low _crc_buffer
  3887  0009FA  6E1B               	movwf	crcBufS_status_put@_this,c
  3888  0009FC  0E00               	movlw	high _crc_buffer
  3889  0009FE  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3890  000A00  C08A  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3891  000A04  0E02               	movlw	2
  3892  000A06  6E1E               	movwf	crcBufS_status_put@status,c
  3893  000A08  EC1F  F008         	call	_crcBufS_status_put	;wreg free
  3894                           
  3895                           ;FastTransfer.c: 452: break;
  3896  000A0C  0012               	return	
  3897  000A0E                     l2639:
  3898  000A0E  0100               	movlb	0	; () banked
  3899  000A10  4B8A               	infsnz	CRCcheck@rt& (0+255),f,b
  3900  000A12  2B8B               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3901  000A14  D7B7               	goto	l2621
  3902  000A16                     l2643:
  3903                           
  3904                           ; BSR set to: 0
  3905                           ;FastTransfer.c: 458: crcErrorCounter++;
  3906  000A16  4A28               	infsnz	_crcErrorCounter,f,c
  3907  000A18  2A29               	incf	_crcErrorCounter+1,f,c
  3908  000A1A  0012               	return	
  3909  000A1C                     l226:
  3910  000A1C  0012               	return		;funcret
  3911  000A1E                     __end_of_CRCcheck:
  3912                           	opt stack 0
  3913                           tosu	equ	0xFFF
  3914                           tosh	equ	0xFFE
  3915                           tosl	equ	0xFFD
  3916                           pclath	equ	0xFFA
  3917                           tblptru	equ	0xFF8
  3918                           tblptrh	equ	0xFF7
  3919                           tblptrl	equ	0xFF6
  3920                           tablat	equ	0xFF5
  3921                           prodh	equ	0xFF4
  3922                           prodl	equ	0xFF3
  3923                           postinc0	equ	0xFEE
  3924                           wreg	equ	0xFE8
  3925                           indf2	equ	0xFDF
  3926                           postinc2	equ	0xFDE
  3927                           postdec2	equ	0xFDD
  3928                           plusw2	equ	0xFDB
  3929                           fsr2h	equ	0xFDA
  3930                           fsr2l	equ	0xFD9
  3931                           status	equ	0xFD8
  3932                           
  3933 ;; *************** function _crcBufS_status_put *****************
  3934 ;; Defined at:
  3935 ;;		line 392 in file "FastTransfer.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3938 ;;		 -> crc_buffer(17), 
  3939 ;;  time            1   28[COMRAM] unsigned char 
  3940 ;;  status          1   29[COMRAM] unsigned char 
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;  wantedTime      2   34[COMRAM] int 
  3943 ;; Return value:  Size  Location     Type
  3944 ;;                  1    wreg      void 
  3945 ;; Registers used:
  3946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3947 ;; Tracked objects:
  3948 ;;		On entry : 0/0
  3949 ;;		On exit  : 0/0
  3950 ;;		Unchanged: 0/0
  3951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3952 ;;      Params:         4       0       0       0       0       0       0
  3953 ;;      Locals:         2       0       0       0       0       0       0
  3954 ;;      Temps:          4       0       0       0       0       0       0
  3955 ;;      Totals:        10       0       0       0       0       0       0
  3956 ;;Total ram usage:       10 bytes
  3957 ;; Hardware stack levels used:    1
  3958 ;; Hardware stack levels required when called:    4
  3959 ;; This function calls:
  3960 ;;		Nothing
  3961 ;; This function is called by:
  3962 ;;		_CRCcheck
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           	psect	text17
  3967  00103E                     __ptext17:
  3968                           	opt stack 0
  3969  00103E                     _crcBufS_status_put:
  3970                           	opt stack 23
  3971                           
  3972                           ;FastTransfer.c: 393: if (time >= 5) {
  3973                           
  3974                           ;incstack = 0
  3975  00103E  0E04               	movlw	4
  3976  001040  641D               	cpfsgt	crcBufS_status_put@time,c
  3977  001042  D002               	goto	l2525
  3978                           
  3979                           ;FastTransfer.c: 394: time = 5 - 1;
  3980  001044  0E04               	movlw	4
  3981  001046  6E1D               	movwf	crcBufS_status_put@time,c
  3982  001048                     l2525:
  3983                           
  3984                           ;FastTransfer.c: 395: }
  3985                           ;FastTransfer.c: 396: time = time + 1;
  3986  001048  281D               	incf	crcBufS_status_put@time,w,c
  3987  00104A  6E1D               	movwf	crcBufS_status_put@time,c
  3988                           
  3989                           ;FastTransfer.c: 397: int wantedTime = time * 3;
  3990  00104C  501D               	movf	crcBufS_status_put@time,w,c
  3991  00104E  0D03               	mullw	3
  3992  001050  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  3993  001054  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  3994                           
  3995                           ;FastTransfer.c: 398: if (wantedTime > _this->head) {
  3996  001058  EE20 F00F          	lfsr	2,15
  3997  00105C  501B               	movf	crcBufS_status_put@_this,w,c
  3998  00105E  26D9               	addwf	fsr2l,f,c
  3999  001060  501C               	movf	crcBufS_status_put@_this+1,w,c
  4000  001062  22DA               	addwfc	fsr2h,f,c
  4001  001064  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4002  001066  5CDE               	subwf	postinc2,w,c
  4003  001068  50DE               	movf	postinc2,w,c
  4004  00106A  0A80               	xorlw	128
  4005  00106C  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  4006  00106E  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4007  001070  0A80               	xorlw	128
  4008  001072  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  4009  001074  B0D8               	btfsc	status,0,c
  4010  001076  D02B               	goto	l2533
  4011                           
  4012                           ;FastTransfer.c: 399: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4013  001078  EE20 F00F          	lfsr	2,15
  4014  00107C  501B               	movf	crcBufS_status_put@_this,w,c
  4015  00107E  26D9               	addwf	fsr2l,f,c
  4016  001080  501C               	movf	crcBufS_status_put@_this+1,w,c
  4017  001082  22DA               	addwfc	fsr2h,f,c
  4018  001084  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4019  001088  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4020  00108C  1E1F               	comf	??_crcBufS_status_put,f,c
  4021  00108E  1E20               	comf	??_crcBufS_status_put+1,f,c
  4022  001090  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4023  001092  2A20               	incf	??_crcBufS_status_put+1,f,c
  4024  001094  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4025  001096  261F               	addwf	??_crcBufS_status_put,f,c
  4026  001098  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4027  00109A  2220               	addwfc	??_crcBufS_status_put+1,f,c
  4028  00109C  1E1F               	comf	??_crcBufS_status_put,f,c
  4029  00109E  1E20               	comf	??_crcBufS_status_put+1,f,c
  4030  0010A0  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4031  0010A2  2A20               	incf	??_crcBufS_status_put+1,f,c
  4032  0010A4  0E0F               	movlw	15
  4033  0010A6  241F               	addwf	??_crcBufS_status_put,w,c
  4034  0010A8  6E23               	movwf	crcBufS_status_put@wantedTime,c
  4035  0010AA  0E00               	movlw	0
  4036  0010AC  2020               	addwfc	??_crcBufS_status_put+1,w,c
  4037  0010AE  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  4038                           
  4039                           ;FastTransfer.c: 400: _this->buf[(wantedTime + 2)] = status;
  4040  0010B0  0E02               	movlw	2
  4041  0010B2  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4042  0010B4  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4043  0010B6  0E00               	movlw	0
  4044  0010B8  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4045  0010BA  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4046  0010BC  501F               	movf	??_crcBufS_status_put,w,c
  4047  0010BE  241B               	addwf	crcBufS_status_put@_this,w,c
  4048  0010C0  6ED9               	movwf	fsr2l,c
  4049  0010C2  5020               	movf	??_crcBufS_status_put+1,w,c
  4050  0010C4  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4051  0010C6  6EDA               	movwf	fsr2h,c
  4052  0010C8  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4053                           
  4054                           ;FastTransfer.c: 401: } else {
  4055  0010CC  0012               	return	
  4056  0010CE                     l2533:
  4057                           
  4058                           ;FastTransfer.c: 402: _this->buf[(_this->head - wantedTime) + 2] = status;
  4059  0010CE  EE20 F00F          	lfsr	2,15
  4060  0010D2  501B               	movf	crcBufS_status_put@_this,w,c
  4061  0010D4  26D9               	addwf	fsr2l,f,c
  4062  0010D6  501C               	movf	crcBufS_status_put@_this+1,w,c
  4063  0010D8  22DA               	addwfc	fsr2h,f,c
  4064  0010DA  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4065  0010DE  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4066  0010E2  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4067  0010E6  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4068  0010EA  1E21               	comf	??_crcBufS_status_put+2,f,c
  4069  0010EC  1E22               	comf	??_crcBufS_status_put+3,f,c
  4070  0010EE  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4071  0010F0  2A22               	incf	??_crcBufS_status_put+3,f,c
  4072  0010F2  501F               	movf	??_crcBufS_status_put,w,c
  4073  0010F4  2621               	addwf	??_crcBufS_status_put+2,f,c
  4074  0010F6  5020               	movf	??_crcBufS_status_put+1,w,c
  4075  0010F8  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4076  0010FA  0E02               	movlw	2
  4077  0010FC  2621               	addwf	??_crcBufS_status_put+2,f,c
  4078  0010FE  0E00               	movlw	0
  4079  001100  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4080  001102  5021               	movf	??_crcBufS_status_put+2,w,c
  4081  001104  241B               	addwf	crcBufS_status_put@_this,w,c
  4082  001106  6ED9               	movwf	fsr2l,c
  4083  001108  5022               	movf	??_crcBufS_status_put+3,w,c
  4084  00110A  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4085  00110C  6EDA               	movwf	fsr2h,c
  4086  00110E  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4087  001112  0012               	return	
  4088  001114                     __end_of_crcBufS_status_put:
  4089                           	opt stack 0
  4090                           tosu	equ	0xFFF
  4091                           tosh	equ	0xFFE
  4092                           tosl	equ	0xFFD
  4093                           pclath	equ	0xFFA
  4094                           tblptru	equ	0xFF8
  4095                           tblptrh	equ	0xFF7
  4096                           tblptrl	equ	0xFF6
  4097                           tablat	equ	0xFF5
  4098                           prodh	equ	0xFF4
  4099                           prodl	equ	0xFF3
  4100                           postinc0	equ	0xFEE
  4101                           wreg	equ	0xFE8
  4102                           indf2	equ	0xFDF
  4103                           postinc2	equ	0xFDE
  4104                           postdec2	equ	0xFDD
  4105                           plusw2	equ	0xFDB
  4106                           fsr2h	equ	0xFDA
  4107                           fsr2l	equ	0xFD9
  4108                           status	equ	0xFD8
  4109                           
  4110 ;; *************** function _crcBufS_get *****************
  4111 ;; Defined at:
  4112 ;;		line 409 in file "FastTransfer.c"
  4113 ;; Parameters:    Size  Location     Type
  4114 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4115 ;;		 -> crc_buffer(17), 
  4116 ;;  time            1   28[COMRAM] unsigned char 
  4117 ;;  space           1   29[COMRAM] unsigned char 
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;  wantedTime      2    0[BANK0 ] int 
  4120 ;; Return value:  Size  Location     Type
  4121 ;;                  1    wreg      unsigned char 
  4122 ;; Registers used:
  4123 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4124 ;; Tracked objects:
  4125 ;;		On entry : 0/0
  4126 ;;		On exit  : 0/0
  4127 ;;		Unchanged: 0/0
  4128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4129 ;;      Params:         4       0       0       0       0       0       0
  4130 ;;      Locals:         0       2       0       0       0       0       0
  4131 ;;      Temps:          6       0       0       0       0       0       0
  4132 ;;      Totals:        10       2       0       0       0       0       0
  4133 ;;Total ram usage:       12 bytes
  4134 ;; Hardware stack levels used:    1
  4135 ;; Hardware stack levels required when called:    4
  4136 ;; This function calls:
  4137 ;;		Nothing
  4138 ;; This function is called by:
  4139 ;;		_CRCcheck
  4140 ;;		_AKNAK
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           	psect	text18
  4145  000D9C                     __ptext18:
  4146                           	opt stack 0
  4147  000D9C                     _crcBufS_get:
  4148                           	opt stack 23
  4149                           
  4150                           ;FastTransfer.c: 410: if (time >= 5) {
  4151                           
  4152                           ;incstack = 0
  4153  000D9C  0E04               	movlw	4
  4154  000D9E  641D               	cpfsgt	crcBufS_get@time,c
  4155  000DA0  D002               	goto	l2501
  4156                           
  4157                           ;FastTransfer.c: 411: time = 5 - 1;
  4158  000DA2  0E04               	movlw	4
  4159  000DA4  6E1D               	movwf	crcBufS_get@time,c
  4160  000DA6                     l2501:
  4161                           
  4162                           ;FastTransfer.c: 412: }
  4163                           ;FastTransfer.c: 413: if (space >= 3) {
  4164  000DA6  0E02               	movlw	2
  4165  000DA8  641E               	cpfsgt	crcBufS_get@space,c
  4166  000DAA  D002               	goto	l2505
  4167                           
  4168                           ;FastTransfer.c: 414: space = 3 - 1;
  4169  000DAC  0E02               	movlw	2
  4170  000DAE  6E1E               	movwf	crcBufS_get@space,c
  4171  000DB0                     l2505:
  4172                           
  4173                           ;FastTransfer.c: 415: }
  4174                           ;FastTransfer.c: 416: time = time + 1;
  4175  000DB0  281D               	incf	crcBufS_get@time,w,c
  4176  000DB2  6E1D               	movwf	crcBufS_get@time,c
  4177                           
  4178                           ;FastTransfer.c: 417: int wantedTime = time * 3;
  4179  000DB4  501D               	movf	crcBufS_get@time,w,c
  4180  000DB6  0D03               	mullw	3
  4181  000DB8  CFF3 F083          	movff	prodl,crcBufS_get@wantedTime
  4182  000DBC  CFF4 F084          	movff	prodh,crcBufS_get@wantedTime+1
  4183                           
  4184                           ;FastTransfer.c: 418: if (wantedTime > _this->head) {
  4185  000DC0  EE20 F00F          	lfsr	2,15
  4186  000DC4  501B               	movf	crcBufS_get@_this,w,c
  4187  000DC6  26D9               	addwf	fsr2l,f,c
  4188  000DC8  501C               	movf	crcBufS_get@_this+1,w,c
  4189  000DCA  22DA               	addwfc	fsr2h,f,c
  4190  000DCC  0100               	movlb	0	; () banked
  4191  000DCE  5183               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4192  000DD0  5CDE               	subwf	postinc2,w,c
  4193  000DD2  50DE               	movf	postinc2,w,c
  4194  000DD4  0A80               	xorlw	128
  4195  000DD6  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4196  000DD8  0100               	movlb	0	; () banked
  4197  000DDA  5184               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4198  000DDC  0A80               	xorlw	128
  4199  000DDE  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4200  000DE0  B0D8               	btfsc	status,0,c
  4201  000DE2  D030               	goto	l2517
  4202                           
  4203                           ; BSR set to: 0
  4204                           ;FastTransfer.c: 419: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4205  000DE4  EE20 F00F          	lfsr	2,15
  4206  000DE8  501B               	movf	crcBufS_get@_this,w,c
  4207  000DEA  26D9               	addwf	fsr2l,f,c
  4208  000DEC  501C               	movf	crcBufS_get@_this+1,w,c
  4209  000DEE  22DA               	addwfc	fsr2h,f,c
  4210  000DF0  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4211  000DF4  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4212  000DF8  1E1F               	comf	??_crcBufS_get,f,c
  4213  000DFA  1E20               	comf	??_crcBufS_get+1,f,c
  4214  000DFC  4A1F               	infsnz	??_crcBufS_get,f,c
  4215  000DFE  2A20               	incf	??_crcBufS_get+1,f,c
  4216  000E00  0100               	movlb	0	; () banked
  4217  000E02  5183               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4218  000E04  261F               	addwf	??_crcBufS_get,f,c
  4219  000E06  0100               	movlb	0	; () banked
  4220  000E08  5184               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4221  000E0A  2220               	addwfc	??_crcBufS_get+1,f,c
  4222  000E0C  1E1F               	comf	??_crcBufS_get,f,c
  4223  000E0E  1E20               	comf	??_crcBufS_get+1,f,c
  4224  000E10  4A1F               	infsnz	??_crcBufS_get,f,c
  4225  000E12  2A20               	incf	??_crcBufS_get+1,f,c
  4226  000E14  0E0F               	movlw	15
  4227  000E16  241F               	addwf	??_crcBufS_get,w,c
  4228  000E18  0100               	movlb	0	; () banked
  4229  000E1A  6F83               	movwf	crcBufS_get@wantedTime& (0+255),b
  4230  000E1C  0E00               	movlw	0
  4231  000E1E  2020               	addwfc	??_crcBufS_get+1,w,c
  4232  000E20  0100               	movlb	0	; () banked
  4233  000E22  6F84               	movwf	(crcBufS_get@wantedTime+1)& (0+255),b
  4234                           
  4235                           ;FastTransfer.c: 420: return (_this->buf[(wantedTime + space)]);
  4236  000E24  501E               	movf	crcBufS_get@space,w,c
  4237  000E26  0100               	movlb	0	; () banked
  4238  000E28  2583               	addwf	crcBufS_get@wantedTime& (0+255),w,b
  4239  000E2A  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4240  000E2C  0E00               	movlw	0
  4241  000E2E  0100               	movlb	0	; () banked
  4242  000E30  2184               	addwfc	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4243  000E32  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4244  000E34  501F               	movf	??_crcBufS_get,w,c
  4245  000E36  241B               	addwf	crcBufS_get@_this,w,c
  4246  000E38  6ED9               	movwf	fsr2l,c
  4247  000E3A  5020               	movf	??_crcBufS_get+1,w,c
  4248  000E3C  201C               	addwfc	crcBufS_get@_this+1,w,c
  4249  000E3E  6EDA               	movwf	fsr2h,c
  4250  000E40  50DF               	movf	indf2,w,c
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;FastTransfer.c: 421: } else {
  4254                           
  4255                           ; BSR set to: 0
  4256  000E42  0012               	return	
  4257  000E44                     l2517:
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;FastTransfer.c: 422: return (_this->buf[(_this->head - wantedTime) + space]);
  4261  000E44  EE20 F00F          	lfsr	2,15
  4262  000E48  501B               	movf	crcBufS_get@_this,w,c
  4263  000E4A  26D9               	addwf	fsr2l,f,c
  4264  000E4C  501C               	movf	crcBufS_get@_this+1,w,c
  4265  000E4E  22DA               	addwfc	fsr2h,f,c
  4266  000E50  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4267  000E54  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4268  000E58  C083  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4269  000E5C  C084  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4270  000E60  1E21               	comf	??_crcBufS_get+2,f,c
  4271  000E62  1E22               	comf	??_crcBufS_get+3,f,c
  4272  000E64  4A21               	infsnz	??_crcBufS_get+2,f,c
  4273  000E66  2A22               	incf	??_crcBufS_get+3,f,c
  4274  000E68  501E               	movf	crcBufS_get@space,w,c
  4275  000E6A  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4276  000E6C  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4277  000E6E  5021               	movf	??_crcBufS_get+2,w,c
  4278  000E70  2623               	addwf	??_crcBufS_get+4,f,c
  4279  000E72  5022               	movf	??_crcBufS_get+3,w,c
  4280  000E74  2224               	addwfc	??_crcBufS_get+5,f,c
  4281  000E76  501F               	movf	??_crcBufS_get,w,c
  4282  000E78  2623               	addwf	??_crcBufS_get+4,f,c
  4283  000E7A  5020               	movf	??_crcBufS_get+1,w,c
  4284  000E7C  2224               	addwfc	??_crcBufS_get+5,f,c
  4285  000E7E  5023               	movf	??_crcBufS_get+4,w,c
  4286  000E80  241B               	addwf	crcBufS_get@_this,w,c
  4287  000E82  6ED9               	movwf	fsr2l,c
  4288  000E84  5024               	movf	??_crcBufS_get+5,w,c
  4289  000E86  201C               	addwfc	crcBufS_get@_this+1,w,c
  4290  000E88  6EDA               	movwf	fsr2h,c
  4291  000E8A  50DF               	movf	indf2,w,c
  4292                           
  4293                           ; BSR set to: 0
  4294  000E8C  0012               	return	
  4295  000E8E                     __end_of_crcBufS_get:
  4296                           	opt stack 0
  4297                           tosu	equ	0xFFF
  4298                           tosh	equ	0xFFE
  4299                           tosl	equ	0xFFD
  4300                           pclath	equ	0xFFA
  4301                           tblptru	equ	0xFF8
  4302                           tblptrh	equ	0xFF7
  4303                           tblptrl	equ	0xFF6
  4304                           tablat	equ	0xFF5
  4305                           prodh	equ	0xFF4
  4306                           prodl	equ	0xFF3
  4307                           postinc0	equ	0xFEE
  4308                           wreg	equ	0xFE8
  4309                           indf2	equ	0xFDF
  4310                           postinc2	equ	0xFDE
  4311                           postdec2	equ	0xFDD
  4312                           plusw2	equ	0xFDB
  4313                           fsr2h	equ	0xFDA
  4314                           fsr2l	equ	0xFD9
  4315                           status	equ	0xFD8
  4316                           
  4317 ;; *************** function _Receive_get *****************
  4318 ;; Defined at:
  4319 ;;		line 126 in file "UART.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;		None
  4322 ;; Auto vars:     Size  Location     Type
  4323 ;;		None
  4324 ;; Return value:  Size  Location     Type
  4325 ;;                  1    wreg      unsigned char 
  4326 ;; Registers used:
  4327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4333 ;;      Params:         0       0       0       0       0       0       0
  4334 ;;      Locals:         0       0       0       0       0       0       0
  4335 ;;      Temps:          0       0       0       0       0       0       0
  4336 ;;      Totals:         0       0       0       0       0       0       0
  4337 ;;Total ram usage:        0 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; Hardware stack levels required when called:    6
  4340 ;; This function calls:
  4341 ;;		_UART_buff_get
  4342 ;; This function is called by:
  4343 ;;		_ComStart
  4344 ;;		_getch
  4345 ;;		_CRCcheck
  4346 ;;		_receiveData
  4347 ;; This function uses a non-reentrant model
  4348 ;;
  4349                           
  4350                           	psect	text19
  4351  001850                     __ptext19:
  4352                           	opt stack 0
  4353  001850                     _Receive_get:
  4354                           	opt stack 22
  4355                           
  4356                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;incstack = 0
  4360  001850  0E00               	movlw	low _input_buffer
  4361  001852  6E21               	movwf	UART_buff_get@_this,c
  4362  001854  0E03               	movlw	high _input_buffer
  4363  001856  6E22               	movwf	UART_buff_get@_this+1,c
  4364  001858  EC8A  F008         	call	_UART_buff_get	;wreg free
  4365  00185C  0012               	return	
  4366  00185E                     __end_of_Receive_get:
  4367                           	opt stack 0
  4368                           tosu	equ	0xFFF
  4369                           tosh	equ	0xFFE
  4370                           tosl	equ	0xFFD
  4371                           pclath	equ	0xFFA
  4372                           tblptru	equ	0xFF8
  4373                           tblptrh	equ	0xFF7
  4374                           tblptrl	equ	0xFF6
  4375                           tablat	equ	0xFF5
  4376                           prodh	equ	0xFF4
  4377                           prodl	equ	0xFF3
  4378                           postinc0	equ	0xFEE
  4379                           wreg	equ	0xFE8
  4380                           indf2	equ	0xFDF
  4381                           postinc2	equ	0xFDE
  4382                           postdec2	equ	0xFDD
  4383                           plusw2	equ	0xFDB
  4384                           fsr2h	equ	0xFDA
  4385                           fsr2l	equ	0xFD9
  4386                           status	equ	0xFD8
  4387                           
  4388 ;; *************** function _UART_buff_get *****************
  4389 ;; Defined at:
  4390 ;;		line 81 in file "UART.c"
  4391 ;; Parameters:    Size  Location     Type
  4392 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  4393 ;;		 -> output_buffer(206), input_buffer(206), 
  4394 ;; Auto vars:     Size  Location     Type
  4395 ;;  c               1   36[COMRAM] unsigned char 
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  1    wreg      unsigned char 
  4398 ;; Registers used:
  4399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4400 ;; Tracked objects:
  4401 ;;		On entry : 0/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4405 ;;      Params:         2       0       0       0       0       0       0
  4406 ;;      Locals:         1       0       0       0       0       0       0
  4407 ;;      Temps:          2       0       0       0       0       0       0
  4408 ;;      Totals:         5       0       0       0       0       0       0
  4409 ;;Total ram usage:        5 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; Hardware stack levels required when called:    5
  4412 ;; This function calls:
  4413 ;;		_UART_buff_modulo_inc
  4414 ;; This function is called by:
  4415 ;;		_Receive_get
  4416 ;;		_Send_put
  4417 ;; This function uses a non-reentrant model
  4418 ;;
  4419                           
  4420                           	psect	text20
  4421  001114                     __ptext20:
  4422                           	opt stack 0
  4423  001114                     _UART_buff_get:
  4424                           	opt stack 21
  4425                           
  4426                           ;UART.c: 82: unsigned char c;
  4427                           ;UART.c: 83: if (_this->count > 0) {
  4428                           
  4429                           ;incstack = 0
  4430  001114  EE20 F0CC          	lfsr	2,204
  4431  001118  5021               	movf	UART_buff_get@_this,w,c
  4432  00111A  26D9               	addwf	fsr2l,f,c
  4433  00111C  5022               	movf	UART_buff_get@_this+1,w,c
  4434  00111E  22DA               	addwfc	fsr2h,f,c
  4435  001120  0E01               	movlw	1
  4436  001122  BEDB               	btfsc	plusw2,7,c
  4437  001124  D03C               	goto	l2437
  4438  001126  0E01               	movlw	1
  4439  001128  50DB               	movf	plusw2,w,c
  4440  00112A  E103               	bnz	u2450
  4441  00112C  04DE               	decf	postinc2,w,c
  4442  00112E  A0D8               	btfss	status,0,c
  4443  001130  D036               	goto	l2437
  4444  001132                     u2450:
  4445                           
  4446                           ;UART.c: 84: c = _this->buf[_this->tail];
  4447  001132  EE20 F0CA          	lfsr	2,202
  4448  001136  5021               	movf	UART_buff_get@_this,w,c
  4449  001138  26D9               	addwf	fsr2l,f,c
  4450  00113A  5022               	movf	UART_buff_get@_this+1,w,c
  4451  00113C  22DA               	addwfc	fsr2h,f,c
  4452  00113E  CFDE F023          	movff	postinc2,??_UART_buff_get
  4453  001142  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  4454  001146  5023               	movf	??_UART_buff_get,w,c
  4455  001148  2421               	addwf	UART_buff_get@_this,w,c
  4456  00114A  6ED9               	movwf	fsr2l,c
  4457  00114C  5024               	movf	??_UART_buff_get+1,w,c
  4458  00114E  2022               	addwfc	UART_buff_get@_this+1,w,c
  4459  001150  6EDA               	movwf	fsr2h,c
  4460  001152  50DF               	movf	indf2,w,c
  4461  001154  6E25               	movwf	UART_buff_get@c,c
  4462                           
  4463                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4464  001156  EE20 F0CA          	lfsr	2,202
  4465  00115A  5021               	movf	UART_buff_get@_this,w,c
  4466  00115C  26D9               	addwf	fsr2l,f,c
  4467  00115E  5022               	movf	UART_buff_get@_this+1,w,c
  4468  001160  22DA               	addwfc	fsr2h,f,c
  4469  001162  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4470  001166  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4471  00116A  0E00               	movlw	0
  4472  00116C  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4473  00116E  0EC8               	movlw	200
  4474  001170  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4475  001172  EC49  F00B         	call	_UART_buff_modulo_inc	;wreg free
  4476  001176  EE20 F0CA          	lfsr	2,202
  4477  00117A  5021               	movf	UART_buff_get@_this,w,c
  4478  00117C  26D9               	addwf	fsr2l,f,c
  4479  00117E  5022               	movf	UART_buff_get@_this+1,w,c
  4480  001180  22DA               	addwfc	fsr2h,f,c
  4481  001182  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4482  001186  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4483                           
  4484                           ;UART.c: 86: --_this->count;
  4485  00118A  EE20 F0CC          	lfsr	2,204
  4486  00118E  5021               	movf	UART_buff_get@_this,w,c
  4487  001190  26D9               	addwf	fsr2l,f,c
  4488  001192  5022               	movf	UART_buff_get@_this+1,w,c
  4489  001194  22DA               	addwfc	fsr2h,f,c
  4490  001196  06DE               	decf	postinc2,f,c
  4491  001198  0E00               	movlw	0
  4492  00119A  5ADD               	subwfb	postdec2,f,c
  4493                           
  4494                           ;UART.c: 87: } else {
  4495  00119C  D002               	goto	l290
  4496  00119E                     l2437:
  4497                           
  4498                           ;UART.c: 88: c = 0;
  4499  00119E  0E00               	movlw	0
  4500  0011A0  6E25               	movwf	UART_buff_get@c,c
  4501  0011A2                     l290:
  4502                           
  4503                           ;UART.c: 89: }
  4504                           ;UART.c: 90: return (c);
  4505  0011A2  5025               	movf	UART_buff_get@c,w,c
  4506  0011A4  0012               	return	
  4507  0011A6                     __end_of_UART_buff_get:
  4508                           	opt stack 0
  4509                           tosu	equ	0xFFF
  4510                           tosh	equ	0xFFE
  4511                           tosl	equ	0xFFD
  4512                           pclath	equ	0xFFA
  4513                           tblptru	equ	0xFF8
  4514                           tblptrh	equ	0xFF7
  4515                           tblptrl	equ	0xFF6
  4516                           tablat	equ	0xFF5
  4517                           prodh	equ	0xFF4
  4518                           prodl	equ	0xFF3
  4519                           postinc0	equ	0xFEE
  4520                           wreg	equ	0xFE8
  4521                           indf2	equ	0xFDF
  4522                           postinc2	equ	0xFDE
  4523                           postdec2	equ	0xFDD
  4524                           plusw2	equ	0xFDB
  4525                           fsr2h	equ	0xFDA
  4526                           fsr2l	equ	0xFD9
  4527                           status	equ	0xFD8
  4528                           
  4529 ;; *************** function _UART_buff_modulo_inc *****************
  4530 ;; Defined at:
  4531 ;;		line 106 in file "UART.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;  value           2   26[COMRAM] const unsigned int 
  4534 ;;  modulus         2   28[COMRAM] const unsigned int 
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;  my_value        2   30[COMRAM] unsigned int 
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  2   26[COMRAM] unsigned int 
  4539 ;; Registers used:
  4540 ;;		wreg, status,2, status,0
  4541 ;; Tracked objects:
  4542 ;;		On entry : 0/0
  4543 ;;		On exit  : 0/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4546 ;;      Params:         4       0       0       0       0       0       0
  4547 ;;      Locals:         2       0       0       0       0       0       0
  4548 ;;      Temps:          0       0       0       0       0       0       0
  4549 ;;      Totals:         6       0       0       0       0       0       0
  4550 ;;Total ram usage:        6 bytes
  4551 ;; Hardware stack levels used:    1
  4552 ;; Hardware stack levels required when called:    4
  4553 ;; This function calls:
  4554 ;;		Nothing
  4555 ;; This function is called by:
  4556 ;;		_UART_buff_put
  4557 ;;		_UART_buff_get
  4558 ;; This function uses a non-reentrant model
  4559 ;;
  4560                           
  4561                           	psect	text21
  4562  001692                     __ptext21:
  4563                           	opt stack 0
  4564  001692                     _UART_buff_modulo_inc:
  4565                           	opt stack 21
  4566                           
  4567                           ;UART.c: 107: unsigned int my_value = value + 1;
  4568                           
  4569                           ;incstack = 0
  4570  001692  0E01               	movlw	1
  4571  001694  241B               	addwf	UART_buff_modulo_inc@value,w,c
  4572  001696  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4573  001698  0E00               	movlw	0
  4574  00169A  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  4575  00169C  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4576                           
  4577                           ;UART.c: 108: if (my_value >= modulus) {
  4578  00169E  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  4579  0016A0  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  4580  0016A2  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  4581  0016A4  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  4582  0016A6  A0D8               	btfss	status,0,c
  4583  0016A8  D004               	goto	l2395
  4584                           
  4585                           ;UART.c: 109: my_value = 0;
  4586  0016AA  0E00               	movlw	0
  4587  0016AC  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4588  0016AE  0E00               	movlw	0
  4589  0016B0  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4590  0016B2                     l2395:
  4591                           
  4592                           ;UART.c: 110: }
  4593                           ;UART.c: 111: return (my_value);
  4594  0016B2  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  4595  0016B6  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  4596  0016BA  0012               	return	
  4597  0016BC                     __end_of_UART_buff_modulo_inc:
  4598                           	opt stack 0
  4599                           tosu	equ	0xFFF
  4600                           tosh	equ	0xFFE
  4601                           tosl	equ	0xFFD
  4602                           pclath	equ	0xFFA
  4603                           tblptru	equ	0xFF8
  4604                           tblptrh	equ	0xFF7
  4605                           tblptrl	equ	0xFF6
  4606                           tablat	equ	0xFF5
  4607                           prodh	equ	0xFF4
  4608                           prodl	equ	0xFF3
  4609                           postinc0	equ	0xFEE
  4610                           wreg	equ	0xFE8
  4611                           indf2	equ	0xFDF
  4612                           postinc2	equ	0xFDE
  4613                           postdec2	equ	0xFDD
  4614                           plusw2	equ	0xFDB
  4615                           fsr2h	equ	0xFDA
  4616                           fsr2l	equ	0xFD9
  4617                           status	equ	0xFD8
  4618                           
  4619 ;; *************** function _Receive_available *****************
  4620 ;; Defined at:
  4621 ;;		line 122 in file "UART.c"
  4622 ;; Parameters:    Size  Location     Type
  4623 ;;		None
  4624 ;; Auto vars:     Size  Location     Type
  4625 ;;		None
  4626 ;; Return value:  Size  Location     Type
  4627 ;;                  2   28[COMRAM] int 
  4628 ;; Registers used:
  4629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4630 ;; Tracked objects:
  4631 ;;		On entry : 0/0
  4632 ;;		On exit  : 0/0
  4633 ;;		Unchanged: 0/0
  4634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4635 ;;      Params:         2       0       0       0       0       0       0
  4636 ;;      Locals:         0       0       0       0       0       0       0
  4637 ;;      Temps:          0       0       0       0       0       0       0
  4638 ;;      Totals:         2       0       0       0       0       0       0
  4639 ;;Total ram usage:        2 bytes
  4640 ;; Hardware stack levels used:    1
  4641 ;; Hardware stack levels required when called:    5
  4642 ;; This function calls:
  4643 ;;		_UART_buff_size
  4644 ;; This function is called by:
  4645 ;;		_ComStart
  4646 ;;		_CRCcheck
  4647 ;;		_receiveData
  4648 ;; This function uses a non-reentrant model
  4649 ;;
  4650                           
  4651                           	psect	text22
  4652  0017CA                     __ptext22:
  4653                           	opt stack 0
  4654  0017CA                     _Receive_available:
  4655                           	opt stack 23
  4656                           
  4657                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  4658                           
  4659                           ;incstack = 0
  4660  0017CA  0E00               	movlw	low _input_buffer
  4661  0017CC  6E1B               	movwf	UART_buff_size@_this,c
  4662  0017CE  0E03               	movlw	high _input_buffer
  4663  0017D0  6E1C               	movwf	UART_buff_size@_this+1,c
  4664  0017D2  ECF0  F00B         	call	_UART_buff_size	;wreg free
  4665  0017D6  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  4666  0017DA  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  4667  0017DE  0012               	return	
  4668  0017E0                     __end_of_Receive_available:
  4669                           	opt stack 0
  4670                           tosu	equ	0xFFF
  4671                           tosh	equ	0xFFE
  4672                           tosl	equ	0xFFD
  4673                           pclath	equ	0xFFA
  4674                           tblptru	equ	0xFF8
  4675                           tblptrh	equ	0xFF7
  4676                           tblptrl	equ	0xFF6
  4677                           tablat	equ	0xFF5
  4678                           prodh	equ	0xFF4
  4679                           prodl	equ	0xFF3
  4680                           postinc0	equ	0xFEE
  4681                           wreg	equ	0xFE8
  4682                           indf2	equ	0xFDF
  4683                           postinc2	equ	0xFDE
  4684                           postdec2	equ	0xFDD
  4685                           plusw2	equ	0xFDB
  4686                           fsr2h	equ	0xFDA
  4687                           fsr2l	equ	0xFD9
  4688                           status	equ	0xFD8
  4689                           
  4690 ;; *************** function _UART_buff_size *****************
  4691 ;; Defined at:
  4692 ;;		line 102 in file "UART.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  4695 ;;		 -> output_buffer(206), input_buffer(206), 
  4696 ;; Auto vars:     Size  Location     Type
  4697 ;;		None
  4698 ;; Return value:  Size  Location     Type
  4699 ;;                  2   26[COMRAM] int 
  4700 ;; Registers used:
  4701 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4702 ;; Tracked objects:
  4703 ;;		On entry : 0/0
  4704 ;;		On exit  : 0/0
  4705 ;;		Unchanged: 0/0
  4706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4707 ;;      Params:         2       0       0       0       0       0       0
  4708 ;;      Locals:         0       0       0       0       0       0       0
  4709 ;;      Temps:          0       0       0       0       0       0       0
  4710 ;;      Totals:         2       0       0       0       0       0       0
  4711 ;;Total ram usage:        2 bytes
  4712 ;; Hardware stack levels used:    1
  4713 ;; Hardware stack levels required when called:    4
  4714 ;; This function calls:
  4715 ;;		Nothing
  4716 ;; This function is called by:
  4717 ;;		_Receive_available
  4718 ;; This function uses a non-reentrant model
  4719 ;;
  4720                           
  4721                           	psect	text23
  4722  0017E0                     __ptext23:
  4723                           	opt stack 0
  4724  0017E0                     _UART_buff_size:
  4725                           	opt stack 23
  4726                           
  4727                           ;UART.c: 103: return (_this->count);
  4728                           
  4729                           ;incstack = 0
  4730  0017E0  EE20 F0CC          	lfsr	2,204
  4731  0017E4  501B               	movf	UART_buff_size@_this,w,c
  4732  0017E6  26D9               	addwf	fsr2l,f,c
  4733  0017E8  501C               	movf	UART_buff_size@_this+1,w,c
  4734  0017EA  22DA               	addwfc	fsr2h,f,c
  4735  0017EC  CFDE F01B          	movff	postinc2,?_UART_buff_size
  4736  0017F0  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  4737  0017F4  0012               	return	
  4738  0017F6                     __end_of_UART_buff_size:
  4739                           	opt stack 0
  4740                           tosu	equ	0xFFF
  4741                           tosh	equ	0xFFE
  4742                           tosl	equ	0xFFD
  4743                           pclath	equ	0xFFA
  4744                           tblptru	equ	0xFF8
  4745                           tblptrh	equ	0xFF7
  4746                           tblptrl	equ	0xFF6
  4747                           tablat	equ	0xFF5
  4748                           prodh	equ	0xFF4
  4749                           prodl	equ	0xFF3
  4750                           postinc0	equ	0xFEE
  4751                           wreg	equ	0xFE8
  4752                           indf2	equ	0xFDF
  4753                           postinc2	equ	0xFDE
  4754                           postdec2	equ	0xFDD
  4755                           plusw2	equ	0xFDB
  4756                           fsr2h	equ	0xFDA
  4757                           fsr2l	equ	0xFD9
  4758                           status	equ	0xFD8
  4759                           
  4760 ;; *************** function _CRC8 *****************
  4761 ;; Defined at:
  4762 ;;		line 89 in file "FastTransfer.c"
  4763 ;; Parameters:    Size  Location     Type
  4764 ;;  data            2   26[COMRAM] PTR const unsigned char 
  4765 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_329(3), receiveData@holder(3), 
  4766 ;;		 -> rx_buffer(200), ring_buffer(206), 
  4767 ;;  len             1   28[COMRAM] unsigned char 
  4768 ;; Auto vars:     Size  Location     Type
  4769 ;;  sum             1   29[COMRAM] unsigned char 
  4770 ;;  tempI           1   31[COMRAM] unsigned char 
  4771 ;;  extract         1   30[COMRAM] unsigned char 
  4772 ;;  crc             1   32[COMRAM] unsigned char 
  4773 ;; Return value:  Size  Location     Type
  4774 ;;                  1    wreg      unsigned char 
  4775 ;; Registers used:
  4776 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4777 ;; Tracked objects:
  4778 ;;		On entry : 0/0
  4779 ;;		On exit  : 0/0
  4780 ;;		Unchanged: 0/0
  4781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4782 ;;      Params:         3       0       0       0       0       0       0
  4783 ;;      Locals:         4       0       0       0       0       0       0
  4784 ;;      Temps:          0       0       0       0       0       0       0
  4785 ;;      Totals:         7       0       0       0       0       0       0
  4786 ;;Total ram usage:        7 bytes
  4787 ;; Hardware stack levels used:    1
  4788 ;; Hardware stack levels required when called:    4
  4789 ;; This function calls:
  4790 ;;		Nothing
  4791 ;; This function is called by:
  4792 ;;		_sendData
  4793 ;;		_receiveData
  4794 ;;		_CRCcheck
  4795 ;; This function uses a non-reentrant model
  4796 ;;
  4797                           
  4798                           	psect	text24
  4799  0014F4                     __ptext24:
  4800                           	opt stack 0
  4801  0014F4                     _CRC8:
  4802                           	opt stack 23
  4803                           
  4804                           ;FastTransfer.c: 90: unsigned char crc = 0x00;
  4805                           
  4806                           ;incstack = 0
  4807  0014F4  0E00               	movlw	0
  4808  0014F6  6E21               	movwf	CRC8@crc,c
  4809                           
  4810                           ;FastTransfer.c: 91: while (len--) {
  4811  0014F8  D01C               	goto	l2463
  4812  0014FA                     l2447:
  4813                           
  4814                           ;FastTransfer.c: 92: unsigned char extract = *data++;
  4815  0014FA  C01B  FFD9         	movff	CRC8@data,fsr2l
  4816  0014FE  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  4817  001502  50DF               	movf	indf2,w,c
  4818  001504  6E1F               	movwf	CRC8@extract,c
  4819  001506  4A1B               	infsnz	CRC8@data,f,c
  4820  001508  2A1C               	incf	CRC8@data+1,f,c
  4821                           
  4822                           ;FastTransfer.c: 93: unsigned char tempI;
  4823                           ;FastTransfer.c: 94: for (tempI = 8; tempI; tempI--) {
  4824  00150A  0E08               	movlw	8
  4825  00150C  6E20               	movwf	CRC8@tempI,c
  4826  00150E  D00E               	goto	l2461
  4827  001510                     l2453:
  4828                           
  4829                           ;FastTransfer.c: 95: unsigned char sum = (crc ^ extract) & 0x01;
  4830  001510  5021               	movf	CRC8@crc,w,c
  4831  001512  181F               	xorwf	CRC8@extract,w,c
  4832  001514  0B01               	andlw	1
  4833  001516  6E1E               	movwf	CRC8@sum,c
  4834                           
  4835                           ;FastTransfer.c: 96: crc >>= 1;
  4836  001518  90D8               	bcf	status,0,c
  4837  00151A  3221               	rrcf	CRC8@crc,f,c
  4838                           
  4839                           ;FastTransfer.c: 97: if (sum) {
  4840  00151C  501E               	movf	CRC8@sum,w,c
  4841  00151E  B4D8               	btfsc	status,2,c
  4842  001520  D002               	goto	l112
  4843                           
  4844                           ;FastTransfer.c: 98: crc ^= 0x8C;
  4845  001522  0E8C               	movlw	140
  4846  001524  1A21               	xorwf	CRC8@crc,f,c
  4847  001526                     l112:
  4848                           
  4849                           ;FastTransfer.c: 99: }
  4850                           ;FastTransfer.c: 100: extract >>= 1;
  4851  001526  90D8               	bcf	status,0,c
  4852  001528  321F               	rrcf	CRC8@extract,f,c
  4853  00152A  0620               	decf	CRC8@tempI,f,c
  4854  00152C                     l2461:
  4855  00152C  5020               	movf	CRC8@tempI,w,c
  4856  00152E  A4D8               	btfss	status,2,c
  4857  001530  D7EF               	goto	l2453
  4858  001532                     l2463:
  4859  001532  061D               	decf	CRC8@len,f,c
  4860  001534  281D               	incf	CRC8@len,w,c
  4861  001536  A4D8               	btfss	status,2,c
  4862  001538  D7E0               	goto	l2447
  4863                           
  4864                           ;FastTransfer.c: 101: }
  4865                           ;FastTransfer.c: 102: }
  4866                           ;FastTransfer.c: 103: return crc;
  4867  00153A  5021               	movf	CRC8@crc,w,c
  4868  00153C  0012               	return	
  4869  00153E                     __end_of_CRC8:
  4870                           	opt stack 0
  4871                           tosu	equ	0xFFF
  4872                           tosh	equ	0xFFE
  4873                           tosl	equ	0xFFD
  4874                           pclath	equ	0xFFA
  4875                           tblptru	equ	0xFF8
  4876                           tblptrh	equ	0xFF7
  4877                           tblptrl	equ	0xFF6
  4878                           tablat	equ	0xFF5
  4879                           prodh	equ	0xFF4
  4880                           prodl	equ	0xFF3
  4881                           postinc0	equ	0xFEE
  4882                           wreg	equ	0xFE8
  4883                           indf2	equ	0xFDF
  4884                           postinc2	equ	0xFDE
  4885                           postdec2	equ	0xFDD
  4886                           plusw2	equ	0xFDB
  4887                           fsr2h	equ	0xFDA
  4888                           fsr2l	equ	0xFD9
  4889                           status	equ	0xFD8
  4890                           
  4891 ;; *************** function _Start *****************
  4892 ;; Defined at:
  4893 ;;		line 32 in file "Function.c"
  4894 ;; Parameters:    Size  Location     Type
  4895 ;;		None
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;		None
  4898 ;; Return value:  Size  Location     Type
  4899 ;;                  1    wreg      void 
  4900 ;; Registers used:
  4901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4902 ;; Tracked objects:
  4903 ;;		On entry : 0/0
  4904 ;;		On exit  : 0/0
  4905 ;;		Unchanged: 0/0
  4906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4907 ;;      Params:         0       0       0       0       0       0       0
  4908 ;;      Locals:         0       0       0       0       0       0       0
  4909 ;;      Temps:          0       0       0       0       0       0       0
  4910 ;;      Totals:         0       0       0       0       0       0       0
  4911 ;;Total ram usage:        0 bytes
  4912 ;; Hardware stack levels used:    1
  4913 ;; Hardware stack levels required when called:    8
  4914 ;; This function calls:
  4915 ;;		_ComStart
  4916 ;;		_INTERRUPT_Initialize
  4917 ;;		_TMR0_Initialize
  4918 ;; This function is called by:
  4919 ;;		_main
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           	psect	text25
  4924  0014A8                     __ptext25:
  4925                           	opt stack 0
  4926  0014A8                     _Start:
  4927                           	opt stack 22
  4928                           
  4929                           ;Function.c: 97: TRISCbits.TRISC5 = 1;
  4930                           
  4931                           ;incstack = 0
  4932  0014A8  8A94               	bsf	3988,5,c	;volatile
  4933                           
  4934                           ;Function.c: 98: TRISCbits.TRISC4 = 1;
  4935  0014AA  8894               	bsf	3988,4,c	;volatile
  4936                           
  4937                           ;Function.c: 99: TRISDbits.TRISD3 = 1;
  4938  0014AC  8695               	bsf	3989,3,c	;volatile
  4939                           
  4940                           ;Function.c: 100: TRISDbits.TRISD2 = 1;
  4941  0014AE  8495               	bsf	3989,2,c	;volatile
  4942                           
  4943                           ;Function.c: 101: TRISDbits.TRISD1 = 1;
  4944  0014B0  8295               	bsf	3989,1,c	;volatile
  4945                           
  4946                           ;Function.c: 102: TRISDbits.TRISD0 = 1;
  4947  0014B2  8095               	bsf	3989,0,c	;volatile
  4948                           
  4949                           ;Function.c: 103: TRISCbits.TRISC3 = 1;
  4950  0014B4  8694               	bsf	3988,3,c	;volatile
  4951                           
  4952                           ;Function.c: 104: TRISCbits.TRISC2 = 1;
  4953  0014B6  8494               	bsf	3988,2,c	;volatile
  4954                           
  4955                           ;Function.c: 105: TRISCbits.TRISC1 = 1;
  4956  0014B8  8294               	bsf	3988,1,c	;volatile
  4957                           
  4958                           ;Function.c: 106: TRISAbits.TRISA7 = 1;
  4959  0014BA  8E92               	bsf	3986,7,c	;volatile
  4960                           
  4961                           ;Function.c: 107: TRISCbits.TRISC0 = 1;
  4962  0014BC  8094               	bsf	3988,0,c	;volatile
  4963                           
  4964                           ;Function.c: 109: TRISAbits.TRISA4 = 1;
  4965  0014BE  8892               	bsf	3986,4,c	;volatile
  4966                           
  4967                           ;Function.c: 110: TRISAbits.TRISA6 = 1;
  4968  0014C0  8C92               	bsf	3986,6,c	;volatile
  4969                           
  4970                           ;Function.c: 111: TRISAbits.TRISA3 = 0;
  4971  0014C2  9692               	bcf	3986,3,c	;volatile
  4972                           
  4973                           ;Function.c: 113: TRISAbits.TRISA3 = 0;
  4974  0014C4  9692               	bcf	3986,3,c	;volatile
  4975                           
  4976                           ;Function.c: 114: TRISDbits.TRISD4 = 0;
  4977  0014C6  9895               	bcf	3989,4,c	;volatile
  4978                           
  4979                           ;Function.c: 119: ANSELA = 0;
  4980  0014C8  0E00               	movlw	0
  4981  0014CA  010F               	movlb	15	; () banked
  4982  0014CC  6F38               	movwf	56,b	;volatile
  4983                           
  4984                           ;Function.c: 120: ANSELC = 0;
  4985  0014CE  0E00               	movlw	0
  4986  0014D0  010F               	movlb	15	; () banked
  4987  0014D2  6F3A               	movwf	58,b	;volatile
  4988                           
  4989                           ;Function.c: 121: ANSELD = 0;
  4990  0014D4  0E00               	movlw	0
  4991  0014D6  010F               	movlb	15	; () banked
  4992  0014D8  6F3B               	movwf	59,b	;volatile
  4993                           
  4994                           ;Function.c: 124: OSCCON = 0x72;
  4995  0014DA  0E72               	movlw	114
  4996  0014DC  6ED3               	movwf	4051,c	;volatile
  4997                           
  4998                           ;Function.c: 126: OSCCON2 = 0x04;
  4999  0014DE  0E04               	movlw	4
  5000  0014E0  6ED2               	movwf	4050,c	;volatile
  5001                           
  5002                           ;Function.c: 128: OSCTUNE = 0x00;
  5003  0014E2  0E00               	movlw	0
  5004  0014E4  6E9B               	movwf	3995,c	;volatile
  5005                           
  5006                           ; BSR set to: 15
  5007                           ;Function.c: 131: ComStart();
  5008  0014E6  ECFC  F009         	call	_ComStart	;wreg free
  5009                           
  5010                           ;Function.c: 132: INTERRUPT_Initialize();
  5011  0014EA  ECCE  F00B         	call	_INTERRUPT_Initialize	;wreg free
  5012                           
  5013                           ;Function.c: 133: TMR0_Initialize();
  5014  0014EE  EC94  F00B         	call	_TMR0_Initialize	;wreg free
  5015  0014F2  0012               	return		;funcret
  5016  0014F4                     __end_of_Start:
  5017                           	opt stack 0
  5018                           tosu	equ	0xFFF
  5019                           tosh	equ	0xFFE
  5020                           tosl	equ	0xFFD
  5021                           pclath	equ	0xFFA
  5022                           tblptru	equ	0xFF8
  5023                           tblptrh	equ	0xFF7
  5024                           tblptrl	equ	0xFF6
  5025                           tablat	equ	0xFF5
  5026                           prodh	equ	0xFF4
  5027                           prodl	equ	0xFF3
  5028                           postinc0	equ	0xFEE
  5029                           wreg	equ	0xFE8
  5030                           indf2	equ	0xFDF
  5031                           postinc2	equ	0xFDE
  5032                           postdec2	equ	0xFDD
  5033                           plusw2	equ	0xFDB
  5034                           fsr2h	equ	0xFDA
  5035                           fsr2l	equ	0xFD9
  5036                           status	equ	0xFD8
  5037                           
  5038 ;; *************** function _TMR0_Initialize *****************
  5039 ;; Defined at:
  5040 ;;		line 23 in file "tmr0.c"
  5041 ;; Parameters:    Size  Location     Type
  5042 ;;		None
  5043 ;; Auto vars:     Size  Location     Type
  5044 ;;		None
  5045 ;; Return value:  Size  Location     Type
  5046 ;;                  1    wreg      void 
  5047 ;; Registers used:
  5048 ;;		wreg, status,2, cstack
  5049 ;; Tracked objects:
  5050 ;;		On entry : 0/0
  5051 ;;		On exit  : 0/0
  5052 ;;		Unchanged: 0/0
  5053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5054 ;;      Params:         0       0       0       0       0       0       0
  5055 ;;      Locals:         0       0       0       0       0       0       0
  5056 ;;      Temps:          0       0       0       0       0       0       0
  5057 ;;      Totals:         0       0       0       0       0       0       0
  5058 ;;Total ram usage:        0 bytes
  5059 ;; Hardware stack levels used:    1
  5060 ;; Hardware stack levels required when called:    5
  5061 ;; This function calls:
  5062 ;;		_TMR0_StartTimer
  5063 ;; This function is called by:
  5064 ;;		_Start
  5065 ;; This function uses a non-reentrant model
  5066 ;;
  5067                           
  5068                           	psect	text26
  5069  001728                     __ptext26:
  5070                           	opt stack 0
  5071  001728                     _TMR0_Initialize:
  5072                           	opt stack 24
  5073                           
  5074                           ;tmr0.c: 27: T0CON = 0x94;
  5075                           
  5076                           ;incstack = 0
  5077  001728  0E94               	movlw	148
  5078  00172A  6ED5               	movwf	4053,c	;volatile
  5079                           
  5080                           ;tmr0.c: 30: TMR0H = 0xCF;
  5081  00172C  0ECF               	movlw	207
  5082  00172E  6ED7               	movwf	4055,c	;volatile
  5083                           
  5084                           ;tmr0.c: 33: TMR0L = 0x2C;
  5085  001730  0E2C               	movlw	44
  5086  001732  6ED6               	movwf	4054,c	;volatile
  5087                           
  5088                           ;tmr0.c: 36: timer0ReloadVal16bit = 53036;
  5089  001734  0ECF               	movlw	207
  5090  001736  6E39               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  5091  001738  0E2C               	movlw	44
  5092  00173A  6E38               	movwf	_timer0ReloadVal16bit,c	;volatile
  5093                           
  5094                           ;tmr0.c: 39: INTCONbits.TMR0IF = 0;
  5095  00173C  94F2               	bcf	intcon,2,c	;volatile
  5096                           
  5097                           ;tmr0.c: 42: INTCONbits.TMR0IE = 1;
  5098  00173E  8AF2               	bsf	intcon,5,c	;volatile
  5099                           
  5100                           ;tmr0.c: 45: TMR0_StartTimer();
  5101  001740  EC2F  F00C         	call	_TMR0_StartTimer	;wreg free
  5102  001744  0012               	return		;funcret
  5103  001746                     __end_of_TMR0_Initialize:
  5104                           	opt stack 0
  5105                           tosu	equ	0xFFF
  5106                           tosh	equ	0xFFE
  5107                           tosl	equ	0xFFD
  5108                           pclath	equ	0xFFA
  5109                           tblptru	equ	0xFF8
  5110                           tblptrh	equ	0xFF7
  5111                           tblptrl	equ	0xFF6
  5112                           tablat	equ	0xFF5
  5113                           prodh	equ	0xFF4
  5114                           prodl	equ	0xFF3
  5115                           intcon	equ	0xFF2
  5116                           postinc0	equ	0xFEE
  5117                           wreg	equ	0xFE8
  5118                           indf2	equ	0xFDF
  5119                           postinc2	equ	0xFDE
  5120                           postdec2	equ	0xFDD
  5121                           plusw2	equ	0xFDB
  5122                           fsr2h	equ	0xFDA
  5123                           fsr2l	equ	0xFD9
  5124                           status	equ	0xFD8
  5125                           
  5126 ;; *************** function _TMR0_StartTimer *****************
  5127 ;; Defined at:
  5128 ;;		line 48 in file "tmr0.c"
  5129 ;; Parameters:    Size  Location     Type
  5130 ;;		None
  5131 ;; Auto vars:     Size  Location     Type
  5132 ;;		None
  5133 ;; Return value:  Size  Location     Type
  5134 ;;                  1    wreg      void 
  5135 ;; Registers used:
  5136 ;;		None
  5137 ;; Tracked objects:
  5138 ;;		On entry : 0/0
  5139 ;;		On exit  : 0/0
  5140 ;;		Unchanged: 0/0
  5141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5142 ;;      Params:         0       0       0       0       0       0       0
  5143 ;;      Locals:         0       0       0       0       0       0       0
  5144 ;;      Temps:          0       0       0       0       0       0       0
  5145 ;;      Totals:         0       0       0       0       0       0       0
  5146 ;;Total ram usage:        0 bytes
  5147 ;; Hardware stack levels used:    1
  5148 ;; Hardware stack levels required when called:    4
  5149 ;; This function calls:
  5150 ;;		Nothing
  5151 ;; This function is called by:
  5152 ;;		_TMR0_Initialize
  5153 ;; This function uses a non-reentrant model
  5154 ;;
  5155                           
  5156                           	psect	text27
  5157  00185E                     __ptext27:
  5158                           	opt stack 0
  5159  00185E                     _TMR0_StartTimer:
  5160                           	opt stack 24
  5161                           
  5162                           ;tmr0.c: 50: T0CONbits.TMR0ON = 1;
  5163                           
  5164                           ;incstack = 0
  5165  00185E  8ED5               	bsf	4053,7,c	;volatile
  5166  001860  0012               	return		;funcret
  5167  001862                     __end_of_TMR0_StartTimer:
  5168                           	opt stack 0
  5169                           tosu	equ	0xFFF
  5170                           tosh	equ	0xFFE
  5171                           tosl	equ	0xFFD
  5172                           pclath	equ	0xFFA
  5173                           tblptru	equ	0xFF8
  5174                           tblptrh	equ	0xFF7
  5175                           tblptrl	equ	0xFF6
  5176                           tablat	equ	0xFF5
  5177                           prodh	equ	0xFF4
  5178                           prodl	equ	0xFF3
  5179                           intcon	equ	0xFF2
  5180                           postinc0	equ	0xFEE
  5181                           wreg	equ	0xFE8
  5182                           indf2	equ	0xFDF
  5183                           postinc2	equ	0xFDE
  5184                           postdec2	equ	0xFDD
  5185                           plusw2	equ	0xFDB
  5186                           fsr2h	equ	0xFDA
  5187                           fsr2l	equ	0xFD9
  5188                           status	equ	0xFD8
  5189                           
  5190 ;; *************** function _INTERRUPT_Initialize *****************
  5191 ;; Defined at:
  5192 ;;		line 136 in file "Function.c"
  5193 ;; Parameters:    Size  Location     Type
  5194 ;;		None
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;		None
  5197 ;; Return value:  Size  Location     Type
  5198 ;;                  1    wreg      void 
  5199 ;; Registers used:
  5200 ;;		None
  5201 ;; Tracked objects:
  5202 ;;		On entry : 0/0
  5203 ;;		On exit  : 0/0
  5204 ;;		Unchanged: 0/0
  5205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5206 ;;      Params:         0       0       0       0       0       0       0
  5207 ;;      Locals:         0       0       0       0       0       0       0
  5208 ;;      Temps:          0       0       0       0       0       0       0
  5209 ;;      Totals:         0       0       0       0       0       0       0
  5210 ;;Total ram usage:        0 bytes
  5211 ;; Hardware stack levels used:    1
  5212 ;; Hardware stack levels required when called:    4
  5213 ;; This function calls:
  5214 ;;		Nothing
  5215 ;; This function is called by:
  5216 ;;		_Start
  5217 ;; This function uses a non-reentrant model
  5218 ;;
  5219                           
  5220                           	psect	text28
  5221  00179C                     __ptext28:
  5222                           	opt stack 0
  5223  00179C                     _INTERRUPT_Initialize:
  5224                           	opt stack 25
  5225                           
  5226                           ;Function.c: 138: INTCONbits.PEIE = 1;
  5227                           
  5228                           ;incstack = 0
  5229  00179C  8CF2               	bsf	intcon,6,c	;volatile
  5230                           
  5231                           ;Function.c: 139: INTCONbits.GIE = 1;
  5232  00179E  8EF2               	bsf	intcon,7,c	;volatile
  5233                           
  5234                           ;Function.c: 141: RCONbits.IPEN = 0;
  5235  0017A0  9ED0               	bcf	4048,7,c	;volatile
  5236                           
  5237                           ;Function.c: 146: IPR1bits.RC1IP = 0;
  5238  0017A2  9A9F               	bcf	3999,5,c	;volatile
  5239                           
  5240                           ;Function.c: 148: IPR1bits.TX1IP = 0;
  5241  0017A4  989F               	bcf	3999,4,c	;volatile
  5242                           
  5243                           ;Function.c: 151: INTCONbits.TMR0IF = 0;
  5244  0017A6  94F2               	bcf	intcon,2,c	;volatile
  5245                           
  5246                           ;Function.c: 154: INTCONbits.TMR0IE = 1;
  5247  0017A8  8AF2               	bsf	intcon,5,c	;volatile
  5248                           
  5249                           ;Function.c: 156: IPR1bits.ADIP = 0;
  5250  0017AA  9C9F               	bcf	3999,6,c	;volatile
  5251                           
  5252                           ;Function.c: 158: IPR1bits.SSP1IP = 0;
  5253  0017AC  969F               	bcf	3999,3,c	;volatile
  5254                           
  5255                           ;Function.c: 160: IPR2bits.BCL1IP = 0;
  5256  0017AE  96A2               	bcf	4002,3,c	;volatile
  5257                           
  5258                           ;Function.c: 161: IPR1bits.TMR2IP=0;
  5259  0017B0  929F               	bcf	3999,1,c	;volatile
  5260  0017B2  0012               	return		;funcret
  5261  0017B4                     __end_of_INTERRUPT_Initialize:
  5262                           	opt stack 0
  5263                           tosu	equ	0xFFF
  5264                           tosh	equ	0xFFE
  5265                           tosl	equ	0xFFD
  5266                           pclath	equ	0xFFA
  5267                           tblptru	equ	0xFF8
  5268                           tblptrh	equ	0xFF7
  5269                           tblptrl	equ	0xFF6
  5270                           tablat	equ	0xFF5
  5271                           prodh	equ	0xFF4
  5272                           prodl	equ	0xFF3
  5273                           intcon	equ	0xFF2
  5274                           postinc0	equ	0xFEE
  5275                           wreg	equ	0xFE8
  5276                           indf2	equ	0xFDF
  5277                           postinc2	equ	0xFDE
  5278                           postdec2	equ	0xFDD
  5279                           plusw2	equ	0xFDB
  5280                           fsr2h	equ	0xFDA
  5281                           fsr2l	equ	0xFD9
  5282                           status	equ	0xFD8
  5283                           
  5284 ;; *************** function _ComStart *****************
  5285 ;; Defined at:
  5286 ;;		line 12 in file "Communications.c"
  5287 ;; Parameters:    Size  Location     Type
  5288 ;;		None
  5289 ;; Auto vars:     Size  Location     Type
  5290 ;;		None
  5291 ;; Return value:  Size  Location     Type
  5292 ;;                  1    wreg      void 
  5293 ;; Registers used:
  5294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5295 ;; Tracked objects:
  5296 ;;		On entry : 0/0
  5297 ;;		On exit  : 0/0
  5298 ;;		Unchanged: 0/0
  5299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5300 ;;      Params:         0       0       0       0       0       0       0
  5301 ;;      Locals:         0       0       0       0       0       0       0
  5302 ;;      Temps:          0       0       0       0       0       0       0
  5303 ;;      Totals:         0       0       0       0       0       0       0
  5304 ;;Total ram usage:        0 bytes
  5305 ;; Hardware stack levels used:    1
  5306 ;; Hardware stack levels required when called:    7
  5307 ;; This function calls:
  5308 ;;		_EUSART1_Initialize
  5309 ;;		_begin
  5310 ;; This function is called by:
  5311 ;;		_Start
  5312 ;; This function uses a non-reentrant model
  5313 ;;
  5314                           
  5315                           	psect	text29
  5316  0013F8                     __ptext29:
  5317                           	opt stack 0
  5318  0013F8                     _ComStart:
  5319                           	opt stack 22
  5320                           
  5321                           ;Communications.c: 13: EUSART1_Initialize();
  5322                           
  5323                           ;incstack = 0
  5324  0013F8  EC9F  F00A         	call	_EUSART1_Initialize	;wreg free
  5325                           
  5326                           ;Communications.c: 14: begin(receiveArray, sizeof (receiveArray), 8, 0, Send_put, Receiv
      +                          e_get, Receive_available, Receive_peek);
  5327  0013FC  0E79               	movlw	low _receiveArray
  5328  0013FE  0100               	movlb	0	; () banked
  5329  001400  6F83               	movwf	begin@ptr& (0+255),b
  5330  001402  0E00               	movlw	high _receiveArray
  5331  001404  0100               	movlb	0	; () banked
  5332  001406  6F84               	movwf	(begin@ptr+1)& (0+255),b
  5333  001408  0E0A               	movlw	10
  5334  00140A  0100               	movlb	0	; () banked
  5335  00140C  6F85               	movwf	begin@maxSize& (0+255),b
  5336  00140E  0E08               	movlw	8
  5337  001410  0100               	movlb	0	; () banked
  5338  001412  6F86               	movwf	begin@givenAddress& (0+255),b
  5339  001414  0E00               	movlw	0
  5340  001416  0100               	movlb	0	; () banked
  5341  001418  6F87               	movwf	begin@error& (0+255),b
  5342  00141A  0EE0               	movlw	low _Send_put
  5343  00141C  0100               	movlb	0	; () banked
  5344  00141E  6F88               	movwf	begin@stufftosend& (0+255),b
  5345  001420  0E15               	movlw	high _Send_put
  5346  001422  0100               	movlb	0	; () banked
  5347  001424  6F89               	movwf	(begin@stufftosend+1)& (0+255),b
  5348  001426  0E50               	movlw	low _Receive_get
  5349  001428  0100               	movlb	0	; () banked
  5350  00142A  6F8A               	movwf	begin@stufftoreceive& (0+255),b
  5351  00142C  0E18               	movlw	high _Receive_get
  5352  00142E  0100               	movlb	0	; () banked
  5353  001430  6F8B               	movwf	(begin@stufftoreceive+1)& (0+255),b
  5354  001432  0ECA               	movlw	low _Receive_available
  5355  001434  0100               	movlb	0	; () banked
  5356  001436  6F8C               	movwf	begin@stuffavailable& (0+255),b
  5357  001438  0E17               	movlw	high _Receive_available
  5358  00143A  0100               	movlb	0	; () banked
  5359  00143C  6F8D               	movwf	(begin@stuffavailable+1)& (0+255),b
  5360  00143E  0E42               	movlw	low _Receive_peek
  5361  001440  0100               	movlb	0	; () banked
  5362  001442  6F8E               	movwf	begin@stuffpeek& (0+255),b
  5363  001444  0E18               	movlw	high _Receive_peek
  5364  001446  0100               	movlb	0	; () banked
  5365  001448  6F8F               	movwf	(begin@stuffpeek+1)& (0+255),b
  5366  00144A  EC28  F00A         	call	_begin	;wreg free
  5367  00144E  0012               	return		;funcret
  5368  001450                     __end_of_ComStart:
  5369                           	opt stack 0
  5370                           tosu	equ	0xFFF
  5371                           tosh	equ	0xFFE
  5372                           tosl	equ	0xFFD
  5373                           pclath	equ	0xFFA
  5374                           tblptru	equ	0xFF8
  5375                           tblptrh	equ	0xFF7
  5376                           tblptrl	equ	0xFF6
  5377                           tablat	equ	0xFF5
  5378                           prodh	equ	0xFF4
  5379                           prodl	equ	0xFF3
  5380                           intcon	equ	0xFF2
  5381                           postinc0	equ	0xFEE
  5382                           wreg	equ	0xFE8
  5383                           indf2	equ	0xFDF
  5384                           postinc2	equ	0xFDE
  5385                           postdec2	equ	0xFDD
  5386                           plusw2	equ	0xFDB
  5387                           fsr2h	equ	0xFDA
  5388                           fsr2l	equ	0xFD9
  5389                           status	equ	0xFD8
  5390                           
  5391 ;; *************** function _begin *****************
  5392 ;; Defined at:
  5393 ;;		line 73 in file "FastTransfer.c"
  5394 ;; Parameters:    Size  Location     Type
  5395 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  5396 ;;		 -> receiveArray(10), 
  5397 ;;  maxSize         1    2[BANK0 ] unsigned char 
  5398 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  5399 ;;  error           1    4[BANK0 ] unsigned char 
  5400 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  5401 ;;		 -> Send_put(1), 
  5402 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  5403 ;;		 -> Receive_get(1), 
  5404 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  5405 ;;		 -> Receive_available(2), 
  5406 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  5407 ;;		 -> Receive_peek(1), 
  5408 ;; Auto vars:     Size  Location     Type
  5409 ;;		None
  5410 ;; Return value:  Size  Location     Type
  5411 ;;                  1    wreg      void 
  5412 ;; Registers used:
  5413 ;;		wreg, status,2, status,0, cstack
  5414 ;; Tracked objects:
  5415 ;;		On entry : 0/0
  5416 ;;		On exit  : 0/0
  5417 ;;		Unchanged: 0/0
  5418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5419 ;;      Params:         0      13       0       0       0       0       0
  5420 ;;      Locals:         0       0       0       0       0       0       0
  5421 ;;      Temps:          0       0       0       0       0       0       0
  5422 ;;      Totals:         0      13       0       0       0       0       0
  5423 ;;Total ram usage:       13 bytes
  5424 ;; Hardware stack levels used:    1
  5425 ;; Hardware stack levels required when called:    5
  5426 ;; This function calls:
  5427 ;;		___awdiv
  5428 ;; This function is called by:
  5429 ;;		_ComStart
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           	psect	text30
  5434  001450                     __ptext30:
  5435                           	opt stack 0
  5436  001450                     _begin:
  5437                           	opt stack 23
  5438                           
  5439                           ;FastTransfer.c: 74: receiveArrayAddress = ptr;
  5440                           
  5441                           ;incstack = 0
  5442  001450  C083  F02C         	movff	begin@ptr,_receiveArrayAddress
  5443  001454  C084  F02D         	movff	begin@ptr+1,_receiveArrayAddress+1
  5444                           
  5445                           ;FastTransfer.c: 75: moduleAddress = givenAddress;
  5446  001458  C086  F03F         	movff	begin@givenAddress,_moduleAddress
  5447                           
  5448                           ;FastTransfer.c: 76: serial_write = stufftosend;
  5449  00145C  C088  F036         	movff	begin@stufftosend,_serial_write
  5450  001460  C089  F037         	movff	begin@stufftosend+1,_serial_write+1
  5451                           
  5452                           ;FastTransfer.c: 77: serial_available = stuffavailable;
  5453  001464  C08C  F030         	movff	begin@stuffavailable,_serial_available
  5454  001468  C08D  F031         	movff	begin@stuffavailable+1,_serial_available+1
  5455                           
  5456                           ;FastTransfer.c: 78: serial_peek = stuffpeek;
  5457  00146C  C08E  F032         	movff	begin@stuffpeek,_serial_peek
  5458  001470  C08F  F033         	movff	begin@stuffpeek+1,_serial_peek+1
  5459                           
  5460                           ;FastTransfer.c: 79: serial_read = stufftoreceive;
  5461  001474  C08A  F034         	movff	begin@stufftoreceive,_serial_read
  5462  001478  C08B  F035         	movff	begin@stufftoreceive+1,_serial_read+1
  5463                           
  5464                           ;FastTransfer.c: 80: maxDataAddress = maxSize / 2;
  5465  00147C  C085  F01B         	movff	begin@maxSize,___awdiv@dividend
  5466  001480  6A1C               	clrf	___awdiv@dividend+1,c
  5467  001482  0E00               	movlw	0
  5468  001484  6E1E               	movwf	___awdiv@divisor+1,c
  5469  001486  0E02               	movlw	2
  5470  001488  6E1D               	movwf	___awdiv@divisor,c
  5471  00148A  EC1C  F009         	call	___awdiv	;wreg free
  5472  00148E  501B               	movf	?___awdiv,w,c
  5473  001490  6E3E               	movwf	_maxDataAddress,c
  5474                           
  5475                           ;FastTransfer.c: 81: sendStructAddress = (unsigned char*) & ring_buffer;
  5476  001492  0E00               	movlw	low _ring_buffer
  5477  001494  6E2E               	movwf	_sendStructAddress,c
  5478  001496  0E01               	movlw	high _ring_buffer
  5479  001498  6E2F               	movwf	_sendStructAddress+1,c
  5480                           
  5481                           ;FastTransfer.c: 82: AKNAKsend = error;
  5482  00149A  C087  F03A         	movff	begin@error,_AKNAKsend
  5483                           
  5484                           ;FastTransfer.c: 83: alignErrorCounter = 0;
  5485  00149E  0E00               	movlw	0
  5486  0014A0  6E27               	movwf	_alignErrorCounter+1,c
  5487  0014A2  0E00               	movlw	0
  5488  0014A4  6E26               	movwf	_alignErrorCounter,c
  5489  0014A6  0012               	return		;funcret
  5490  0014A8                     __end_of_begin:
  5491                           	opt stack 0
  5492                           tosu	equ	0xFFF
  5493                           tosh	equ	0xFFE
  5494                           tosl	equ	0xFFD
  5495                           pclath	equ	0xFFA
  5496                           tblptru	equ	0xFF8
  5497                           tblptrh	equ	0xFF7
  5498                           tblptrl	equ	0xFF6
  5499                           tablat	equ	0xFF5
  5500                           prodh	equ	0xFF4
  5501                           prodl	equ	0xFF3
  5502                           intcon	equ	0xFF2
  5503                           postinc0	equ	0xFEE
  5504                           wreg	equ	0xFE8
  5505                           indf2	equ	0xFDF
  5506                           postinc2	equ	0xFDE
  5507                           postdec2	equ	0xFDD
  5508                           plusw2	equ	0xFDB
  5509                           fsr2h	equ	0xFDA
  5510                           fsr2l	equ	0xFD9
  5511                           status	equ	0xFD8
  5512                           
  5513 ;; *************** function ___awdiv *****************
  5514 ;; Defined at:
  5515 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  5516 ;; Parameters:    Size  Location     Type
  5517 ;;  dividend        2   26[COMRAM] int 
  5518 ;;  divisor         2   28[COMRAM] int 
  5519 ;; Auto vars:     Size  Location     Type
  5520 ;;  quotient        2   32[COMRAM] int 
  5521 ;;  sign            1   31[COMRAM] unsigned char 
  5522 ;;  counter         1   30[COMRAM] unsigned char 
  5523 ;; Return value:  Size  Location     Type
  5524 ;;                  2   26[COMRAM] int 
  5525 ;; Registers used:
  5526 ;;		wreg, status,2, status,0
  5527 ;; Tracked objects:
  5528 ;;		On entry : 0/0
  5529 ;;		On exit  : 0/0
  5530 ;;		Unchanged: 0/0
  5531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5532 ;;      Params:         4       0       0       0       0       0       0
  5533 ;;      Locals:         4       0       0       0       0       0       0
  5534 ;;      Temps:          0       0       0       0       0       0       0
  5535 ;;      Totals:         8       0       0       0       0       0       0
  5536 ;;Total ram usage:        8 bytes
  5537 ;; Hardware stack levels used:    1
  5538 ;; Hardware stack levels required when called:    4
  5539 ;; This function calls:
  5540 ;;		Nothing
  5541 ;; This function is called by:
  5542 ;;		_begin
  5543 ;; This function uses a non-reentrant model
  5544 ;;
  5545                           
  5546                           	psect	text31
  5547  001238                     __ptext31:
  5548                           	opt stack 0
  5549  001238                     ___awdiv:
  5550                           	opt stack 23
  5551                           
  5552                           ;incstack = 0
  5553  001238  0E00               	movlw	0
  5554  00123A  6E20               	movwf	___awdiv@sign,c
  5555  00123C  AE1E               	btfss	___awdiv@divisor+1,7,c
  5556  00123E  D006               	goto	l1937
  5557  001240  6C1D               	negf	___awdiv@divisor,c
  5558  001242  1E1E               	comf	___awdiv@divisor+1,f,c
  5559  001244  B0D8               	btfsc	status,0,c
  5560  001246  2A1E               	incf	___awdiv@divisor+1,f,c
  5561  001248  0E01               	movlw	1
  5562  00124A  6E20               	movwf	___awdiv@sign,c
  5563  00124C                     l1937:
  5564  00124C  AE1C               	btfss	___awdiv@dividend+1,7,c
  5565  00124E  D006               	goto	l1943
  5566  001250  6C1B               	negf	___awdiv@dividend,c
  5567  001252  1E1C               	comf	___awdiv@dividend+1,f,c
  5568  001254  B0D8               	btfsc	status,0,c
  5569  001256  2A1C               	incf	___awdiv@dividend+1,f,c
  5570  001258  0E01               	movlw	1
  5571  00125A  1A20               	xorwf	___awdiv@sign,f,c
  5572  00125C                     l1943:
  5573  00125C  0E00               	movlw	0
  5574  00125E  6E22               	movwf	___awdiv@quotient+1,c
  5575  001260  0E00               	movlw	0
  5576  001262  6E21               	movwf	___awdiv@quotient,c
  5577  001264  501D               	movf	___awdiv@divisor,w,c
  5578  001266  101E               	iorwf	___awdiv@divisor+1,w,c
  5579  001268  B4D8               	btfsc	status,2,c
  5580  00126A  D01C               	goto	l1965
  5581  00126C  0E01               	movlw	1
  5582  00126E  6E1F               	movwf	___awdiv@counter,c
  5583  001270  D004               	goto	l1951
  5584  001272                     l1949:
  5585  001272  90D8               	bcf	status,0,c
  5586  001274  361D               	rlcf	___awdiv@divisor,f,c
  5587  001276  361E               	rlcf	___awdiv@divisor+1,f,c
  5588  001278  2A1F               	incf	___awdiv@counter,f,c
  5589  00127A                     l1951:
  5590  00127A  AE1E               	btfss	___awdiv@divisor+1,7,c
  5591  00127C  D7FA               	goto	l1949
  5592  00127E                     l1953:
  5593  00127E  90D8               	bcf	status,0,c
  5594  001280  3621               	rlcf	___awdiv@quotient,f,c
  5595  001282  3622               	rlcf	___awdiv@quotient+1,f,c
  5596  001284  501D               	movf	___awdiv@divisor,w,c
  5597  001286  5C1B               	subwf	___awdiv@dividend,w,c
  5598  001288  501E               	movf	___awdiv@divisor+1,w,c
  5599  00128A  581C               	subwfb	___awdiv@dividend+1,w,c
  5600  00128C  A0D8               	btfss	status,0,c
  5601  00128E  D005               	goto	l1961
  5602  001290  501D               	movf	___awdiv@divisor,w,c
  5603  001292  5E1B               	subwf	___awdiv@dividend,f,c
  5604  001294  501E               	movf	___awdiv@divisor+1,w,c
  5605  001296  5A1C               	subwfb	___awdiv@dividend+1,f,c
  5606  001298  8021               	bsf	___awdiv@quotient,0,c
  5607  00129A                     l1961:
  5608  00129A  90D8               	bcf	status,0,c
  5609  00129C  321E               	rrcf	___awdiv@divisor+1,f,c
  5610  00129E  321D               	rrcf	___awdiv@divisor,f,c
  5611  0012A0  2E1F               	decfsz	___awdiv@counter,f,c
  5612  0012A2  D7ED               	goto	l1953
  5613  0012A4                     l1965:
  5614  0012A4  5020               	movf	___awdiv@sign,w,c
  5615  0012A6  B4D8               	btfsc	status,2,c
  5616  0012A8  D004               	goto	l1969
  5617  0012AA  6C21               	negf	___awdiv@quotient,c
  5618  0012AC  1E22               	comf	___awdiv@quotient+1,f,c
  5619  0012AE  B0D8               	btfsc	status,0,c
  5620  0012B0  2A22               	incf	___awdiv@quotient+1,f,c
  5621  0012B2                     l1969:
  5622  0012B2  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  5623  0012B6  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  5624  0012BA  0012               	return	
  5625  0012BC                     __end_of___awdiv:
  5626                           	opt stack 0
  5627                           tosu	equ	0xFFF
  5628                           tosh	equ	0xFFE
  5629                           tosl	equ	0xFFD
  5630                           pclath	equ	0xFFA
  5631                           tblptru	equ	0xFF8
  5632                           tblptrh	equ	0xFF7
  5633                           tblptrl	equ	0xFF6
  5634                           tablat	equ	0xFF5
  5635                           prodh	equ	0xFF4
  5636                           prodl	equ	0xFF3
  5637                           intcon	equ	0xFF2
  5638                           postinc0	equ	0xFEE
  5639                           wreg	equ	0xFE8
  5640                           indf2	equ	0xFDF
  5641                           postinc2	equ	0xFDE
  5642                           postdec2	equ	0xFDD
  5643                           plusw2	equ	0xFDB
  5644                           fsr2h	equ	0xFDA
  5645                           fsr2l	equ	0xFD9
  5646                           status	equ	0xFD8
  5647                           
  5648 ;; *************** function _EUSART1_Initialize *****************
  5649 ;; Defined at:
  5650 ;;		line 21 in file "UART.c"
  5651 ;; Parameters:    Size  Location     Type
  5652 ;;		None
  5653 ;; Auto vars:     Size  Location     Type
  5654 ;;		None
  5655 ;; Return value:  Size  Location     Type
  5656 ;;                  1    wreg      void 
  5657 ;; Registers used:
  5658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5659 ;; Tracked objects:
  5660 ;;		On entry : 0/0
  5661 ;;		On exit  : 0/0
  5662 ;;		Unchanged: 0/0
  5663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5664 ;;      Params:         0       0       0       0       0       0       0
  5665 ;;      Locals:         0       0       0       0       0       0       0
  5666 ;;      Temps:          0       0       0       0       0       0       0
  5667 ;;      Totals:         0       0       0       0       0       0       0
  5668 ;;Total ram usage:        0 bytes
  5669 ;; Hardware stack levels used:    1
  5670 ;; Hardware stack levels required when called:    6
  5671 ;; This function calls:
  5672 ;;		_UART_buff_init
  5673 ;; This function is called by:
  5674 ;;		_ComStart
  5675 ;; This function uses a non-reentrant model
  5676 ;;
  5677                           
  5678                           	psect	text32
  5679  00153E                     __ptext32:
  5680                           	opt stack 0
  5681  00153E                     _EUSART1_Initialize:
  5682                           	opt stack 22
  5683                           
  5684                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  5685                           
  5686                           ;incstack = 0
  5687  00153E  9A9D               	bcf	3997,5,c	;volatile
  5688                           
  5689                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  5690  001540  989D               	bcf	3997,4,c	;volatile
  5691                           
  5692                           ;UART.c: 29: BAUD1CON = 0x48;
  5693  001542  0E48               	movlw	72
  5694  001544  6EB8               	movwf	4024,c	;volatile
  5695                           
  5696                           ;UART.c: 32: RC1STA = 0x98;
  5697  001546  0E98               	movlw	152
  5698  001548  6EAB               	movwf	4011,c	;volatile
  5699                           
  5700                           ;UART.c: 35: TX1STA = 0x26;
  5701  00154A  0E26               	movlw	38
  5702  00154C  6EAC               	movwf	4012,c	;volatile
  5703                           
  5704                           ;UART.c: 38: SPBRG1 = (((16000000/38400)/4)-1);
  5705  00154E  0E67               	movlw	103
  5706  001550  6EAF               	movwf	4015,c	;volatile
  5707                           
  5708                           ;UART.c: 41: SPBRGH1 = 0x00;
  5709  001552  0E00               	movlw	0
  5710  001554  6EB0               	movwf	4016,c	;volatile
  5711                           
  5712                           ;UART.c: 44: TXREG1 = 0x00;
  5713  001556  0E00               	movlw	0
  5714  001558  6EAD               	movwf	4013,c	;volatile
  5715                           
  5716                           ;UART.c: 47: RCREG1 = 0x00;
  5717  00155A  0E00               	movlw	0
  5718  00155C  6EAE               	movwf	4014,c	;volatile
  5719                           
  5720                           ;UART.c: 49: UART_buff_init(&input_buffer);
  5721  00155E  0E00               	movlw	low _input_buffer
  5722  001560  6E23               	movwf	UART_buff_init@_this,c
  5723  001562  0E03               	movlw	high _input_buffer
  5724  001564  6E24               	movwf	UART_buff_init@_this+1,c
  5725  001566  ECA3  F00B         	call	_UART_buff_init	;wreg free
  5726                           
  5727                           ;UART.c: 50: UART_buff_init(&output_buffer);
  5728  00156A  0E00               	movlw	low _output_buffer
  5729  00156C  6E23               	movwf	UART_buff_init@_this,c
  5730  00156E  0E04               	movlw	high _output_buffer
  5731  001570  6E24               	movwf	UART_buff_init@_this+1,c
  5732  001572  ECA3  F00B         	call	_UART_buff_init	;wreg free
  5733                           
  5734                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  5735  001576  8A9D               	bsf	3997,5,c	;volatile
  5736  001578  0012               	return		;funcret
  5737  00157A                     __end_of_EUSART1_Initialize:
  5738                           	opt stack 0
  5739                           tosu	equ	0xFFF
  5740                           tosh	equ	0xFFE
  5741                           tosl	equ	0xFFD
  5742                           pclath	equ	0xFFA
  5743                           tblptru	equ	0xFF8
  5744                           tblptrh	equ	0xFF7
  5745                           tblptrl	equ	0xFF6
  5746                           tablat	equ	0xFF5
  5747                           prodh	equ	0xFF4
  5748                           prodl	equ	0xFF3
  5749                           intcon	equ	0xFF2
  5750                           postinc0	equ	0xFEE
  5751                           wreg	equ	0xFE8
  5752                           indf2	equ	0xFDF
  5753                           postinc2	equ	0xFDE
  5754                           postdec2	equ	0xFDD
  5755                           plusw2	equ	0xFDB
  5756                           fsr2h	equ	0xFDA
  5757                           fsr2l	equ	0xFD9
  5758                           status	equ	0xFD8
  5759                           
  5760 ;; *************** function _UART_buff_init *****************
  5761 ;; Defined at:
  5762 ;;		line 56 in file "UART.c"
  5763 ;; Parameters:    Size  Location     Type
  5764 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  5765 ;;		 -> output_buffer(206), input_buffer(206), 
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;		None
  5768 ;; Return value:  Size  Location     Type
  5769 ;;                  1    wreg      void 
  5770 ;; Registers used:
  5771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5777 ;;      Params:         2       0       0       0       0       0       0
  5778 ;;      Locals:         0       0       0       0       0       0       0
  5779 ;;      Temps:          0       0       0       0       0       0       0
  5780 ;;      Totals:         2       0       0       0       0       0       0
  5781 ;;Total ram usage:        2 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    5
  5784 ;; This function calls:
  5785 ;;		_memset
  5786 ;; This function is called by:
  5787 ;;		_EUSART1_Initialize
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           	psect	text33
  5792  001746                     __ptext33:
  5793                           	opt stack 0
  5794  001746                     _UART_buff_init:
  5795                           	opt stack 22
  5796                           
  5797                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  5798                           
  5799                           ;incstack = 0
  5800  001746  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  5801  00174A  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  5802  00174E  0E00               	movlw	0
  5803  001750  6E1E               	movwf	memset@c+1,c
  5804  001752  0E00               	movlw	0
  5805  001754  6E1D               	movwf	memset@c,c
  5806  001756  0E00               	movlw	0
  5807  001758  6E20               	movwf	memset@n+1,c
  5808  00175A  0ECE               	movlw	206
  5809  00175C  6E1F               	movwf	memset@n,c
  5810  00175E  EC1E  F00B         	call	_memset	;wreg free
  5811  001762  0012               	return		;funcret
  5812  001764                     __end_of_UART_buff_init:
  5813                           	opt stack 0
  5814                           tosu	equ	0xFFF
  5815                           tosh	equ	0xFFE
  5816                           tosl	equ	0xFFD
  5817                           pclath	equ	0xFFA
  5818                           tblptru	equ	0xFF8
  5819                           tblptrh	equ	0xFF7
  5820                           tblptrl	equ	0xFF6
  5821                           tablat	equ	0xFF5
  5822                           prodh	equ	0xFF4
  5823                           prodl	equ	0xFF3
  5824                           intcon	equ	0xFF2
  5825                           postinc0	equ	0xFEE
  5826                           wreg	equ	0xFE8
  5827                           indf2	equ	0xFDF
  5828                           postinc2	equ	0xFDE
  5829                           postdec2	equ	0xFDD
  5830                           plusw2	equ	0xFDB
  5831                           fsr2h	equ	0xFDA
  5832                           fsr2l	equ	0xFD9
  5833                           status	equ	0xFD8
  5834                           
  5835 ;; *************** function _memset *****************
  5836 ;; Defined at:
  5837 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  5838 ;; Parameters:    Size  Location     Type
  5839 ;;  p1              2   26[COMRAM] PTR void 
  5840 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  5841 ;;  c               2   28[COMRAM] int 
  5842 ;;  n               2   30[COMRAM] unsigned int 
  5843 ;; Auto vars:     Size  Location     Type
  5844 ;;  p               2   32[COMRAM] PTR unsigned char 
  5845 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  5846 ;; Return value:  Size  Location     Type
  5847 ;;                  2   26[COMRAM] PTR void 
  5848 ;; Registers used:
  5849 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5850 ;; Tracked objects:
  5851 ;;		On entry : 0/0
  5852 ;;		On exit  : 0/0
  5853 ;;		Unchanged: 0/0
  5854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5855 ;;      Params:         6       0       0       0       0       0       0
  5856 ;;      Locals:         2       0       0       0       0       0       0
  5857 ;;      Temps:          0       0       0       0       0       0       0
  5858 ;;      Totals:         8       0       0       0       0       0       0
  5859 ;;Total ram usage:        8 bytes
  5860 ;; Hardware stack levels used:    1
  5861 ;; Hardware stack levels required when called:    4
  5862 ;; This function calls:
  5863 ;;		Nothing
  5864 ;; This function is called by:
  5865 ;;		_FastTransfer_buffer_flush
  5866 ;;		_UART_buff_init
  5867 ;;		_UART_buff_flush
  5868 ;; This function uses a non-reentrant model
  5869 ;;
  5870                           
  5871                           	psect	text34
  5872  00163C                     __ptext34:
  5873                           	opt stack 0
  5874  00163C                     _memset:
  5875                           	opt stack 22
  5876                           
  5877                           ;incstack = 0
  5878  00163C  C01B  F021         	movff	memset@p1,memset@p
  5879  001640  C01C  F022         	movff	memset@p1+1,memset@p+1
  5880  001644  D008               	goto	l2413
  5881  001646                     l2409:
  5882  001646  C021  FFD9         	movff	memset@p,fsr2l
  5883  00164A  C022  FFDA         	movff	memset@p+1,fsr2h
  5884  00164E  C01D  FFDF         	movff	memset@c,indf2
  5885  001652  4A21               	infsnz	memset@p,f,c
  5886  001654  2A22               	incf	memset@p+1,f,c
  5887  001656                     l2413:
  5888  001656  061F               	decf	memset@n,f,c
  5889  001658  A0D8               	btfss	status,0,c
  5890  00165A  0620               	decf	memset@n+1,f,c
  5891  00165C  281F               	incf	memset@n,w,c
  5892  00165E  E1F3               	bnz	l2409
  5893  001660  2820               	incf	memset@n+1,w,c
  5894  001662  B4D8               	btfsc	status,2,c
  5895  001664  0012               	return	
  5896  001666  D7EF               	goto	l2409
  5897  001668                     __end_of_memset:
  5898                           	opt stack 0
  5899                           tosu	equ	0xFFF
  5900                           tosh	equ	0xFFE
  5901                           tosl	equ	0xFFD
  5902                           pclath	equ	0xFFA
  5903                           tblptru	equ	0xFF8
  5904                           tblptrh	equ	0xFF7
  5905                           tblptrl	equ	0xFF6
  5906                           tablat	equ	0xFF5
  5907                           prodh	equ	0xFF4
  5908                           prodl	equ	0xFF3
  5909                           intcon	equ	0xFF2
  5910                           postinc0	equ	0xFEE
  5911                           wreg	equ	0xFE8
  5912                           indf2	equ	0xFDF
  5913                           postinc2	equ	0xFDE
  5914                           postdec2	equ	0xFDD
  5915                           plusw2	equ	0xFDB
  5916                           fsr2h	equ	0xFDA
  5917                           fsr2l	equ	0xFD9
  5918                           status	equ	0xFD8
  5919                           
  5920 ;; *************** function _SetTime *****************
  5921 ;; Defined at:
  5922 ;;		line 98 in file "tmr0.c"
  5923 ;; Parameters:    Size  Location     Type
  5924 ;;		None
  5925 ;; Auto vars:     Size  Location     Type
  5926 ;;		None
  5927 ;; Return value:  Size  Location     Type
  5928 ;;                  1    wreg      void 
  5929 ;; Registers used:
  5930 ;;		wreg, status,2
  5931 ;; Tracked objects:
  5932 ;;		On entry : 0/0
  5933 ;;		On exit  : 0/0
  5934 ;;		Unchanged: 0/0
  5935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5936 ;;      Params:         0       0       0       0       0       0       0
  5937 ;;      Locals:         0       0       0       0       0       0       0
  5938 ;;      Temps:          0       0       0       0       0       0       0
  5939 ;;      Totals:         0       0       0       0       0       0       0
  5940 ;;Total ram usage:        0 bytes
  5941 ;; Hardware stack levels used:    1
  5942 ;; Hardware stack levels required when called:    4
  5943 ;; This function calls:
  5944 ;;		Nothing
  5945 ;; This function is called by:
  5946 ;;		_main
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           	psect	text35
  5951  00180C                     __ptext35:
  5952                           	opt stack 0
  5953  00180C                     _SetTime:
  5954                           	opt stack 26
  5955                           
  5956                           ;tmr0.c: 99: time = 0;
  5957                           
  5958                           ;incstack = 0
  5959  00180C  0E00               	movlw	0
  5960  00180E  0100               	movlb	0	; () banked
  5961  001810  6F60               	movwf	_time& (0+255),b
  5962  001812  0E00               	movlw	0
  5963  001814  6F61               	movwf	(_time+1)& (0+255),b
  5964  001816  0E00               	movlw	0
  5965  001818  6F62               	movwf	(_time+2)& (0+255),b
  5966  00181A  0E00               	movlw	0
  5967  00181C  6F63               	movwf	(_time+3)& (0+255),b
  5968                           
  5969                           ; BSR set to: 0
  5970  00181E  0012               	return		;funcret
  5971  001820                     __end_of_SetTime:
  5972                           	opt stack 0
  5973                           tosu	equ	0xFFF
  5974                           tosh	equ	0xFFE
  5975                           tosl	equ	0xFFD
  5976                           pclath	equ	0xFFA
  5977                           tblptru	equ	0xFF8
  5978                           tblptrh	equ	0xFF7
  5979                           tblptrl	equ	0xFF6
  5980                           tablat	equ	0xFF5
  5981                           prodh	equ	0xFF4
  5982                           prodl	equ	0xFF3
  5983                           intcon	equ	0xFF2
  5984                           postinc0	equ	0xFEE
  5985                           wreg	equ	0xFE8
  5986                           indf2	equ	0xFDF
  5987                           postinc2	equ	0xFDE
  5988                           postdec2	equ	0xFDD
  5989                           plusw2	equ	0xFDB
  5990                           fsr2h	equ	0xFDA
  5991                           fsr2l	equ	0xFD9
  5992                           status	equ	0xFD8
  5993                           
  5994 ;; *************** function _ReadFaults *****************
  5995 ;; Defined at:
  5996 ;;		line 9 in file "Function.c"
  5997 ;; Parameters:    Size  Location     Type
  5998 ;;		None
  5999 ;; Auto vars:     Size  Location     Type
  6000 ;;		None
  6001 ;; Return value:  Size  Location     Type
  6002 ;;                  1    wreg      void 
  6003 ;; Registers used:
  6004 ;;		wreg, status,2, status,0
  6005 ;; Tracked objects:
  6006 ;;		On entry : 0/0
  6007 ;;		On exit  : 0/0
  6008 ;;		Unchanged: 0/0
  6009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6010 ;;      Params:         0       0       0       0       0       0       0
  6011 ;;      Locals:         0       0       0       0       0       0       0
  6012 ;;      Temps:          1       0       0       0       0       0       0
  6013 ;;      Totals:         1       0       0       0       0       0       0
  6014 ;;Total ram usage:        1 bytes
  6015 ;; Hardware stack levels used:    1
  6016 ;; Hardware stack levels required when called:    4
  6017 ;; This function calls:
  6018 ;;		Nothing
  6019 ;; This function is called by:
  6020 ;;		_main
  6021 ;; This function uses a non-reentrant model
  6022 ;;
  6023                           
  6024                           	psect	text36
  6025  000F66                     __ptext36:
  6026                           	opt stack 0
  6027  000F66                     _ReadFaults:
  6028                           	opt stack 26
  6029                           
  6030                           ;Function.c: 10: ByteHigh = ByteHigh | ((LATCbits.LATC5&0x01) << 0);
  6031                           
  6032                           ; BSR set to: 0
  6033                           ;incstack = 0
  6034  000F66  AA8B               	btfss	3979,5,c	;volatile
  6035  000F68  D002               	goto	u1010
  6036  000F6A  0E01               	movlw	1
  6037  000F6C  D001               	goto	u1016
  6038  000F6E                     u1010:
  6039  000F6E  0E00               	movlw	0
  6040  000F70                     u1016:
  6041  000F70  103B               	iorwf	_ByteHigh,w,c
  6042  000F72  6E3B               	movwf	_ByteHigh,c
  6043                           
  6044                           ;Function.c: 11: ByteHigh = ByteHigh | ((LATCbits.LATC4&0x01) << 1);
  6045  000F74  A88B               	btfss	3979,4,c	;volatile
  6046  000F76  D003               	goto	u1020
  6047  000F78  6A1B               	clrf	??_ReadFaults& (0+255),c
  6048  000F7A  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6049  000F7C  D001               	goto	u1028
  6050  000F7E                     u1020:
  6051  000F7E  6A1B               	clrf	??_ReadFaults& (0+255),c
  6052  000F80                     u1028:
  6053  000F80  90D8               	bcf	status,0,c
  6054  000F82  341B               	rlcf	??_ReadFaults,w,c
  6055  000F84  103B               	iorwf	_ByteHigh,w,c
  6056  000F86  6E3B               	movwf	_ByteHigh,c
  6057                           
  6058                           ;Function.c: 12: ByteHigh = ByteHigh | ((LATDbits.LATD3&0x01) << 2);
  6059  000F88  A68C               	btfss	3980,3,c	;volatile
  6060  000F8A  D003               	goto	u1030
  6061  000F8C  6A1B               	clrf	??_ReadFaults& (0+255),c
  6062  000F8E  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6063  000F90  D001               	goto	u1038
  6064  000F92                     u1030:
  6065  000F92  6A1B               	clrf	??_ReadFaults& (0+255),c
  6066  000F94                     u1038:
  6067  000F94  90D8               	bcf	status,0,c
  6068  000F96  361B               	rlcf	??_ReadFaults,f,c
  6069  000F98  90D8               	bcf	status,0,c
  6070  000F9A  341B               	rlcf	??_ReadFaults,w,c
  6071  000F9C  103B               	iorwf	_ByteHigh,w,c
  6072  000F9E  6E3B               	movwf	_ByteHigh,c
  6073                           
  6074                           ;Function.c: 13: ByteHigh = ByteHigh | ((LATDbits.LATD2&0x01) << 3);
  6075  000FA0  A48C               	btfss	3980,2,c	;volatile
  6076  000FA2  D003               	goto	u1040
  6077  000FA4  6A1B               	clrf	??_ReadFaults& (0+255),c
  6078  000FA6  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6079  000FA8  D001               	goto	u1048
  6080  000FAA                     u1040:
  6081  000FAA  6A1B               	clrf	??_ReadFaults& (0+255),c
  6082  000FAC                     u1048:
  6083  000FAC  90D8               	bcf	status,0,c
  6084  000FAE  361B               	rlcf	??_ReadFaults,f,c
  6085  000FB0  90D8               	bcf	status,0,c
  6086  000FB2  361B               	rlcf	??_ReadFaults,f,c
  6087  000FB4  90D8               	bcf	status,0,c
  6088  000FB6  341B               	rlcf	??_ReadFaults,w,c
  6089  000FB8  103B               	iorwf	_ByteHigh,w,c
  6090  000FBA  6E3B               	movwf	_ByteHigh,c
  6091                           
  6092                           ;Function.c: 14: ByteHigh = ByteHigh | ((LATDbits.LATD1&0x01) << 4);
  6093  000FBC  A28C               	btfss	3980,1,c	;volatile
  6094  000FBE  D003               	goto	u1050
  6095  000FC0  6A1B               	clrf	??_ReadFaults& (0+255),c
  6096  000FC2  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6097  000FC4  D001               	goto	u1058
  6098  000FC6                     u1050:
  6099  000FC6  6A1B               	clrf	??_ReadFaults& (0+255),c
  6100  000FC8                     u1058:
  6101  000FC8  381B               	swapf	??_ReadFaults,w,c
  6102  000FCA  0BF0               	andlw	240
  6103  000FCC  103B               	iorwf	_ByteHigh,w,c
  6104  000FCE  6E3B               	movwf	_ByteHigh,c
  6105                           
  6106                           ;Function.c: 15: ByteHigh = ByteHigh | ((LATDbits.LATD0&0x01) << 5);
  6107  000FD0  A08C               	btfss	3980,0,c	;volatile
  6108  000FD2  D003               	goto	u1060
  6109  000FD4  0E20               	movlw	32
  6110  000FD6  6E1B               	movwf	??_ReadFaults& (0+255),c
  6111  000FD8  D001               	goto	u1075
  6112  000FDA                     u1060:
  6113  000FDA  6A1B               	clrf	??_ReadFaults& (0+255),c
  6114  000FDC                     u1075:
  6115  000FDC  501B               	movf	??_ReadFaults,w,c
  6116  000FDE  103B               	iorwf	_ByteHigh,w,c
  6117  000FE0  6E3B               	movwf	_ByteHigh,c
  6118                           
  6119                           ;Function.c: 16: ByteHigh = ByteHigh | ((LATCbits.LATC3&0x01) << 6);
  6120  000FE2  A68B               	btfss	3979,3,c	;volatile
  6121  000FE4  D003               	goto	u1080
  6122  000FE6  0E40               	movlw	64
  6123  000FE8  6E1B               	movwf	??_ReadFaults& (0+255),c
  6124  000FEA  D001               	goto	u1095
  6125  000FEC                     u1080:
  6126  000FEC  6A1B               	clrf	??_ReadFaults& (0+255),c
  6127  000FEE                     u1095:
  6128  000FEE  501B               	movf	??_ReadFaults,w,c
  6129  000FF0  103B               	iorwf	_ByteHigh,w,c
  6130  000FF2  6E3B               	movwf	_ByteHigh,c
  6131                           
  6132                           ;Function.c: 17: ByteHigh = ByteHigh | ((LATCbits.LATC2&0x01) << 7);
  6133  000FF4  A48B               	btfss	3979,2,c	;volatile
  6134  000FF6  D003               	goto	u1100
  6135  000FF8  0E80               	movlw	128
  6136  000FFA  6E1B               	movwf	??_ReadFaults& (0+255),c
  6137  000FFC  D001               	goto	u1115
  6138  000FFE                     u1100:
  6139  000FFE  6A1B               	clrf	??_ReadFaults& (0+255),c
  6140  001000                     u1115:
  6141  001000  501B               	movf	??_ReadFaults,w,c
  6142  001002  103B               	iorwf	_ByteHigh,w,c
  6143  001004  6E3B               	movwf	_ByteHigh,c
  6144                           
  6145                           ;Function.c: 18: ByteLow = ByteLow | ((LATCbits.LATC1&0x01) << 0);
  6146  001006  A28B               	btfss	3979,1,c	;volatile
  6147  001008  D002               	goto	u1120
  6148  00100A  0E01               	movlw	1
  6149  00100C  D001               	goto	u1126
  6150  00100E                     u1120:
  6151  00100E  0E00               	movlw	0
  6152  001010                     u1126:
  6153  001010  103C               	iorwf	_ByteLow,w,c
  6154  001012  6E3C               	movwf	_ByteLow,c
  6155                           
  6156                           ;Function.c: 19: ByteLow = ByteLow | ((LATAbits.LATA7&0x01) << 1);
  6157  001014  AE89               	btfss	3977,7,c	;volatile
  6158  001016  D003               	goto	u1130
  6159  001018  6A1B               	clrf	??_ReadFaults& (0+255),c
  6160  00101A  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6161  00101C  D001               	goto	u1138
  6162  00101E                     u1130:
  6163  00101E  6A1B               	clrf	??_ReadFaults& (0+255),c
  6164  001020                     u1138:
  6165  001020  90D8               	bcf	status,0,c
  6166  001022  341B               	rlcf	??_ReadFaults,w,c
  6167  001024  103C               	iorwf	_ByteLow,w,c
  6168  001026  6E3C               	movwf	_ByteLow,c
  6169                           
  6170                           ;Function.c: 20: ByteLow = ByteLow | ((LATCbits.LATC0&0x01) << 1);
  6171  001028  A08B               	btfss	3979,0,c	;volatile
  6172  00102A  D003               	goto	u1140
  6173  00102C  6A1B               	clrf	??_ReadFaults& (0+255),c
  6174  00102E  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6175  001030  D001               	goto	u1148
  6176  001032                     u1140:
  6177  001032  6A1B               	clrf	??_ReadFaults& (0+255),c
  6178  001034                     u1148:
  6179  001034  90D8               	bcf	status,0,c
  6180  001036  341B               	rlcf	??_ReadFaults,w,c
  6181  001038  103C               	iorwf	_ByteLow,w,c
  6182  00103A  6E3C               	movwf	_ByteLow,c
  6183  00103C  0012               	return		;funcret
  6184  00103E                     __end_of_ReadFaults:
  6185                           	opt stack 0
  6186                           tosu	equ	0xFFF
  6187                           tosh	equ	0xFFE
  6188                           tosl	equ	0xFFD
  6189                           pclath	equ	0xFFA
  6190                           tblptru	equ	0xFF8
  6191                           tblptrh	equ	0xFF7
  6192                           tblptrl	equ	0xFF6
  6193                           tablat	equ	0xFF5
  6194                           prodh	equ	0xFF4
  6195                           prodl	equ	0xFF3
  6196                           intcon	equ	0xFF2
  6197                           postinc0	equ	0xFEE
  6198                           wreg	equ	0xFE8
  6199                           indf2	equ	0xFDF
  6200                           postinc2	equ	0xFDE
  6201                           postdec2	equ	0xFDD
  6202                           plusw2	equ	0xFDB
  6203                           fsr2h	equ	0xFDA
  6204                           fsr2l	equ	0xFD9
  6205                           status	equ	0xFD8
  6206                           
  6207 ;; *************** function _GetTime *****************
  6208 ;; Defined at:
  6209 ;;		line 94 in file "tmr0.c"
  6210 ;; Parameters:    Size  Location     Type
  6211 ;;		None
  6212 ;; Auto vars:     Size  Location     Type
  6213 ;;		None
  6214 ;; Return value:  Size  Location     Type
  6215 ;;                  4   26[COMRAM] long 
  6216 ;; Registers used:
  6217 ;;		None
  6218 ;; Tracked objects:
  6219 ;;		On entry : 0/0
  6220 ;;		On exit  : 0/0
  6221 ;;		Unchanged: 0/0
  6222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6223 ;;      Params:         4       0       0       0       0       0       0
  6224 ;;      Locals:         0       0       0       0       0       0       0
  6225 ;;      Temps:          0       0       0       0       0       0       0
  6226 ;;      Totals:         4       0       0       0       0       0       0
  6227 ;;Total ram usage:        4 bytes
  6228 ;; Hardware stack levels used:    1
  6229 ;; Hardware stack levels required when called:    4
  6230 ;; This function calls:
  6231 ;;		Nothing
  6232 ;; This function is called by:
  6233 ;;		_main
  6234 ;; This function uses a non-reentrant model
  6235 ;;
  6236                           
  6237                           	psect	text37
  6238  001820                     __ptext37:
  6239                           	opt stack 0
  6240  001820                     _GetTime:
  6241                           	opt stack 26
  6242                           
  6243                           ;tmr0.c: 95: return time;
  6244                           
  6245                           ;incstack = 0
  6246  001820  C060  F01B         	movff	_time,?_GetTime
  6247  001824  C061  F01C         	movff	_time+1,?_GetTime+1
  6248  001828  C062  F01D         	movff	_time+2,?_GetTime+2
  6249  00182C  C063  F01E         	movff	_time+3,?_GetTime+3
  6250  001830  0012               	return		;funcret
  6251  001832                     __end_of_GetTime:
  6252                           	opt stack 0
  6253                           tosu	equ	0xFFF
  6254                           tosh	equ	0xFFE
  6255                           tosl	equ	0xFFD
  6256                           pclath	equ	0xFFA
  6257                           tblptru	equ	0xFF8
  6258                           tblptrh	equ	0xFF7
  6259                           tblptrl	equ	0xFF6
  6260                           tablat	equ	0xFF5
  6261                           prodh	equ	0xFF4
  6262                           prodl	equ	0xFF3
  6263                           intcon	equ	0xFF2
  6264                           postinc0	equ	0xFEE
  6265                           wreg	equ	0xFE8
  6266                           indf2	equ	0xFDF
  6267                           postinc2	equ	0xFDE
  6268                           postdec2	equ	0xFDD
  6269                           plusw2	equ	0xFDB
  6270                           fsr2h	equ	0xFDA
  6271                           fsr2l	equ	0xFD9
  6272                           status	equ	0xFD8
  6273                           
  6274 ;; *************** function _INTERRUPT_InterruptManager *****************
  6275 ;; Defined at:
  6276 ;;		line 165 in file "Function.c"
  6277 ;; Parameters:    Size  Location     Type
  6278 ;;		None
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;		None
  6281 ;; Return value:  Size  Location     Type
  6282 ;;                  1    wreg      void 
  6283 ;; Registers used:
  6284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6285 ;; Tracked objects:
  6286 ;;		On entry : 0/0
  6287 ;;		On exit  : 0/0
  6288 ;;		Unchanged: 0/0
  6289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6290 ;;      Params:         0       0       0       0       0       0       0
  6291 ;;      Locals:         0       0       0       0       0       0       0
  6292 ;;      Temps:         14       0       0       0       0       0       0
  6293 ;;      Totals:        14       0       0       0       0       0       0
  6294 ;;Total ram usage:       14 bytes
  6295 ;; Hardware stack levels used:    1
  6296 ;; Hardware stack levels required when called:    3
  6297 ;; This function calls:
  6298 ;;		_EUSART1_Receive_ISR
  6299 ;;		_EUSART1_Transmit_ISR
  6300 ;;		_TMR0_ISR
  6301 ;; This function is called by:
  6302 ;;		Interrupt level 2
  6303 ;; This function uses a non-reentrant model
  6304 ;;
  6305                           
  6306                           	psect	intcode
  6307  000008                     __pintcode:
  6308                           	opt stack 0
  6309  000008                     _INTERRUPT_InterruptManager:
  6310                           	opt stack 21
  6311                           
  6312                           ;incstack = 0
  6313  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6314  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  6315  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6316  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6317  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6318  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6319  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6320  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6321  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6322  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6323  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6324  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6325  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6326  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6327  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6328                           
  6329                           ;Function.c: 168: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  6330  000042  BA9D               	btfsc	3997,5,c	;volatile
  6331  000044  AA9E               	btfss	3998,5,c	;volatile
  6332  000046  D003               	goto	i2l453
  6333                           
  6334                           ;Function.c: 169: {
  6335                           ;Function.c: 170: EUSART1_Receive_ISR();
  6336  000048  ECB2  F00B         	call	_EUSART1_Receive_ISR	;wreg free
  6337                           
  6338                           ;Function.c: 171: }
  6339  00004C  D00B               	goto	i2l459
  6340  00004E                     i2l453:
  6341                           
  6342                           ;Function.c: 172: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  6343  00004E  B89D               	btfsc	3997,4,c	;volatile
  6344  000050  A89E               	btfss	3998,4,c	;volatile
  6345  000052  D003               	goto	i2l455
  6346                           
  6347                           ;Function.c: 173: {
  6348                           ;Function.c: 174: EUSART1_Transmit_ISR();
  6349  000054  ECD7  F00A         	call	_EUSART1_Transmit_ISR	;wreg free
  6350                           
  6351                           ;Function.c: 175: }
  6352  000058  D005               	goto	i2l459
  6353  00005A                     i2l455:
  6354                           
  6355                           ;Function.c: 176: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  6356  00005A  BAF2               	btfsc	intcon,5,c	;volatile
  6357  00005C  A4F2               	btfss	intcon,2,c	;volatile
  6358  00005E  D002               	goto	i2l459
  6359                           
  6360                           ;Function.c: 177: {
  6361                           ;Function.c: 178: TMR0_ISR();
  6362  000060  ECC1  F00B         	call	_TMR0_ISR	;wreg free
  6363  000064                     i2l459:
  6364  000064  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6365  000068  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6366  00006C  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6367  000070  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6368  000074  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6369  000078  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6370  00007C  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6371  000080  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6372  000084  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6373  000088  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6374  00008C  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6375  000090  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6376  000094  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6377  000098  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6378  00009C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6379  00009E  0011               	retfie		f
  6380  0000A0                     __end_of_INTERRUPT_InterruptManager:
  6381                           	opt stack 0
  6382                           tosu	equ	0xFFF
  6383                           tosh	equ	0xFFE
  6384                           tosl	equ	0xFFD
  6385                           pclatu	equ	0xFFB
  6386                           pclath	equ	0xFFA
  6387                           tblptru	equ	0xFF8
  6388                           tblptrh	equ	0xFF7
  6389                           tblptrl	equ	0xFF6
  6390                           tablat	equ	0xFF5
  6391                           prodh	equ	0xFF4
  6392                           prodl	equ	0xFF3
  6393                           intcon	equ	0xFF2
  6394                           postinc0	equ	0xFEE
  6395                           fsr0h	equ	0xFEA
  6396                           fsr0l	equ	0xFE9
  6397                           wreg	equ	0xFE8
  6398                           fsr1h	equ	0xFE2
  6399                           fsr1l	equ	0xFE1
  6400                           indf2	equ	0xFDF
  6401                           postinc2	equ	0xFDE
  6402                           postdec2	equ	0xFDD
  6403                           plusw2	equ	0xFDB
  6404                           fsr2h	equ	0xFDA
  6405                           fsr2l	equ	0xFD9
  6406                           status	equ	0xFD8
  6407                           
  6408 ;; *************** function _TMR0_ISR *****************
  6409 ;; Defined at:
  6410 ;;		line 82 in file "tmr0.c"
  6411 ;; Parameters:    Size  Location     Type
  6412 ;;		None
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;		None
  6415 ;; Return value:  Size  Location     Type
  6416 ;;                  1    wreg      void 
  6417 ;; Registers used:
  6418 ;;		wreg, status,2, status,0
  6419 ;; Tracked objects:
  6420 ;;		On entry : 0/0
  6421 ;;		On exit  : 0/0
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6424 ;;      Params:         0       0       0       0       0       0       0
  6425 ;;      Locals:         0       0       0       0       0       0       0
  6426 ;;      Temps:          0       0       0       0       0       0       0
  6427 ;;      Totals:         0       0       0       0       0       0       0
  6428 ;;Total ram usage:        0 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; This function calls:
  6431 ;;		Nothing
  6432 ;; This function is called by:
  6433 ;;		_INTERRUPT_InterruptManager
  6434 ;; This function uses a non-reentrant model
  6435 ;;
  6436                           
  6437                           	psect	text39
  6438  001782                     __ptext39:
  6439                           	opt stack 0
  6440  001782                     _TMR0_ISR:
  6441                           	opt stack 23
  6442                           
  6443                           ;tmr0.c: 85: TMR0H = timer0ReloadVal16bit >> 8;
  6444                           
  6445                           ;incstack = 0
  6446  001782  5039               	movf	_timer0ReloadVal16bit+1,w,c	;volatile
  6447  001784  6ED7               	movwf	4055,c	;volatile
  6448                           
  6449                           ;tmr0.c: 86: TMR0L = (uint8_t) timer0ReloadVal16bit;
  6450  001786  C038  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
  6451                           
  6452                           ;tmr0.c: 88: time++;
  6453  00178A  0E01               	movlw	1
  6454  00178C  0100               	movlb	0	; () banked
  6455  00178E  2760               	addwf	_time& (0+255),f,b
  6456  001790  0E00               	movlw	0
  6457  001792  2361               	addwfc	(_time+1)& (0+255),f,b
  6458  001794  2362               	addwfc	(_time+2)& (0+255),f,b
  6459  001796  2363               	addwfc	(_time+3)& (0+255),f,b
  6460                           
  6461                           ; BSR set to: 0
  6462                           ;tmr0.c: 91: INTCONbits.TMR0IF = 0;
  6463  001798  94F2               	bcf	intcon,2,c	;volatile
  6464                           
  6465                           ; BSR set to: 0
  6466  00179A  0012               	return		;funcret
  6467  00179C                     __end_of_TMR0_ISR:
  6468                           	opt stack 0
  6469                           tosu	equ	0xFFF
  6470                           tosh	equ	0xFFE
  6471                           tosl	equ	0xFFD
  6472                           pclatu	equ	0xFFB
  6473                           pclath	equ	0xFFA
  6474                           tblptru	equ	0xFF8
  6475                           tblptrh	equ	0xFF7
  6476                           tblptrl	equ	0xFF6
  6477                           tablat	equ	0xFF5
  6478                           prodh	equ	0xFF4
  6479                           prodl	equ	0xFF3
  6480                           intcon	equ	0xFF2
  6481                           postinc0	equ	0xFEE
  6482                           fsr0h	equ	0xFEA
  6483                           fsr0l	equ	0xFE9
  6484                           wreg	equ	0xFE8
  6485                           fsr1h	equ	0xFE2
  6486                           fsr1l	equ	0xFE1
  6487                           indf2	equ	0xFDF
  6488                           postinc2	equ	0xFDE
  6489                           postdec2	equ	0xFDD
  6490                           plusw2	equ	0xFDB
  6491                           fsr2h	equ	0xFDA
  6492                           fsr2l	equ	0xFD9
  6493                           status	equ	0xFD8
  6494                           
  6495 ;; *************** function _EUSART1_Transmit_ISR *****************
  6496 ;; Defined at:
  6497 ;;		line 150 in file "UART.c"
  6498 ;; Parameters:    Size  Location     Type
  6499 ;;		None
  6500 ;; Auto vars:     Size  Location     Type
  6501 ;;		None
  6502 ;; Return value:  Size  Location     Type
  6503 ;;                  1    wreg      void 
  6504 ;; Registers used:
  6505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6506 ;; Tracked objects:
  6507 ;;		On entry : 0/0
  6508 ;;		On exit  : 0/0
  6509 ;;		Unchanged: 0/0
  6510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6511 ;;      Params:         0       0       0       0       0       0       0
  6512 ;;      Locals:         0       0       0       0       0       0       0
  6513 ;;      Temps:          0       0       0       0       0       0       0
  6514 ;;      Totals:         0       0       0       0       0       0       0
  6515 ;;Total ram usage:        0 bytes
  6516 ;; Hardware stack levels used:    1
  6517 ;; Hardware stack levels required when called:    2
  6518 ;; This function calls:
  6519 ;;		i2_UART_buff_get
  6520 ;;		i2_UART_buff_size
  6521 ;; This function is called by:
  6522 ;;		_INTERRUPT_InterruptManager
  6523 ;; This function uses a non-reentrant model
  6524 ;;
  6525                           
  6526                           	psect	text40
  6527  0015AE                     __ptext40:
  6528                           	opt stack 0
  6529  0015AE                     _EUSART1_Transmit_ISR:
  6530                           	opt stack 21
  6531                           
  6532                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  6533                           
  6534                           ; BSR set to: 0
  6535                           ;incstack = 0
  6536  0015AE  0E00               	movlw	low _output_buffer
  6537  0015B0  6E01               	movwf	i2UART_buff_size@_this,c
  6538  0015B2  0E04               	movlw	high _output_buffer
  6539  0015B4  6E02               	movwf	i2UART_buff_size@_this+1,c
  6540  0015B6  ECFB  F00B         	call	i2_UART_buff_size	;wreg free
  6541  0015BA  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  6542  0015BC  D00D               	goto	i2l2317
  6543  0015BE  5002               	movf	?i2_UART_buff_size+1,w,c
  6544  0015C0  E103               	bnz	i2u228_40
  6545  0015C2  0401               	decf	?i2_UART_buff_size,w,c
  6546  0015C4  A0D8               	btfss	status,0,c
  6547  0015C6  D008               	goto	i2l2317
  6548  0015C8                     i2u228_40:
  6549                           
  6550                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  6551  0015C8  0E00               	movlw	low _output_buffer
  6552  0015CA  6E07               	movwf	i2UART_buff_get@_this,c
  6553  0015CC  0E04               	movlw	high _output_buffer
  6554  0015CE  6E08               	movwf	i2UART_buff_get@_this+1,c
  6555  0015D0  ECD3  F008         	call	i2_UART_buff_get	;wreg free
  6556  0015D4  6EAD               	movwf	4013,c	;volatile
  6557                           
  6558                           ;UART.c: 154: } else {
  6559  0015D6  0012               	return	
  6560  0015D8                     i2l2317:
  6561                           
  6562                           ;UART.c: 155: Transmit_stall = 1;
  6563  0015D8  0E01               	movlw	1
  6564  0015DA  6E44               	movwf	_Transmit_stall,c
  6565                           
  6566                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  6567  0015DC  989D               	bcf	3997,4,c	;volatile
  6568  0015DE  0012               	return	
  6569  0015E0                     __end_of_EUSART1_Transmit_ISR:
  6570                           	opt stack 0
  6571                           tosu	equ	0xFFF
  6572                           tosh	equ	0xFFE
  6573                           tosl	equ	0xFFD
  6574                           pclatu	equ	0xFFB
  6575                           pclath	equ	0xFFA
  6576                           tblptru	equ	0xFF8
  6577                           tblptrh	equ	0xFF7
  6578                           tblptrl	equ	0xFF6
  6579                           tablat	equ	0xFF5
  6580                           prodh	equ	0xFF4
  6581                           prodl	equ	0xFF3
  6582                           intcon	equ	0xFF2
  6583                           postinc0	equ	0xFEE
  6584                           fsr0h	equ	0xFEA
  6585                           fsr0l	equ	0xFE9
  6586                           wreg	equ	0xFE8
  6587                           fsr1h	equ	0xFE2
  6588                           fsr1l	equ	0xFE1
  6589                           indf2	equ	0xFDF
  6590                           postinc2	equ	0xFDE
  6591                           postdec2	equ	0xFDD
  6592                           plusw2	equ	0xFDB
  6593                           fsr2h	equ	0xFDA
  6594                           fsr2l	equ	0xFD9
  6595                           status	equ	0xFD8
  6596                           
  6597 ;; *************** function i2_UART_buff_size *****************
  6598 ;; Defined at:
  6599 ;;		line 102 in file "UART.c"
  6600 ;; Parameters:    Size  Location     Type
  6601 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  6602 ;;		 -> output_buffer(206), input_buffer(206), 
  6603 ;; Auto vars:     Size  Location     Type
  6604 ;;		None
  6605 ;; Return value:  Size  Location     Type
  6606 ;;                  2    0[COMRAM] int 
  6607 ;; Registers used:
  6608 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6609 ;; Tracked objects:
  6610 ;;		On entry : 0/0
  6611 ;;		On exit  : 0/0
  6612 ;;		Unchanged: 0/0
  6613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6614 ;;      Params:         2       0       0       0       0       0       0
  6615 ;;      Locals:         0       0       0       0       0       0       0
  6616 ;;      Temps:          0       0       0       0       0       0       0
  6617 ;;      Totals:         2       0       0       0       0       0       0
  6618 ;;Total ram usage:        2 bytes
  6619 ;; Hardware stack levels used:    1
  6620 ;; This function calls:
  6621 ;;		Nothing
  6622 ;; This function is called by:
  6623 ;;		_EUSART1_Transmit_ISR
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           	psect	text41
  6628  0017F6                     __ptext41:
  6629                           	opt stack 0
  6630  0017F6                     i2_UART_buff_size:
  6631                           	opt stack 22
  6632                           
  6633                           ;UART.c: 103: return (_this->count);
  6634                           
  6635                           ;incstack = 0
  6636  0017F6  EE20 F0CC          	lfsr	2,204
  6637  0017FA  5001               	movf	i2UART_buff_size@_this,w,c
  6638  0017FC  26D9               	addwf	fsr2l,f,c
  6639  0017FE  5002               	movf	i2UART_buff_size@_this+1,w,c
  6640  001800  22DA               	addwfc	fsr2h,f,c
  6641  001802  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  6642  001806  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  6643  00180A  0012               	return	
  6644  00180C                     __end_ofi2_UART_buff_size:
  6645                           	opt stack 0
  6646                           tosu	equ	0xFFF
  6647                           tosh	equ	0xFFE
  6648                           tosl	equ	0xFFD
  6649                           pclatu	equ	0xFFB
  6650                           pclath	equ	0xFFA
  6651                           tblptru	equ	0xFF8
  6652                           tblptrh	equ	0xFF7
  6653                           tblptrl	equ	0xFF6
  6654                           tablat	equ	0xFF5
  6655                           prodh	equ	0xFF4
  6656                           prodl	equ	0xFF3
  6657                           intcon	equ	0xFF2
  6658                           postinc0	equ	0xFEE
  6659                           fsr0h	equ	0xFEA
  6660                           fsr0l	equ	0xFE9
  6661                           wreg	equ	0xFE8
  6662                           fsr1h	equ	0xFE2
  6663                           fsr1l	equ	0xFE1
  6664                           indf2	equ	0xFDF
  6665                           postinc2	equ	0xFDE
  6666                           postdec2	equ	0xFDD
  6667                           plusw2	equ	0xFDB
  6668                           fsr2h	equ	0xFDA
  6669                           fsr2l	equ	0xFD9
  6670                           status	equ	0xFD8
  6671                           
  6672 ;; *************** function i2_UART_buff_get *****************
  6673 ;; Defined at:
  6674 ;;		line 81 in file "UART.c"
  6675 ;; Parameters:    Size  Location     Type
  6676 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  6677 ;;		 -> output_buffer(206), input_buffer(206), 
  6678 ;; Auto vars:     Size  Location     Type
  6679 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  6680 ;; Return value:  Size  Location     Type
  6681 ;;                  1    wreg      unsigned char 
  6682 ;; Registers used:
  6683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6684 ;; Tracked objects:
  6685 ;;		On entry : 0/0
  6686 ;;		On exit  : 0/0
  6687 ;;		Unchanged: 0/0
  6688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6689 ;;      Params:         2       0       0       0       0       0       0
  6690 ;;      Locals:         1       0       0       0       0       0       0
  6691 ;;      Temps:          2       0       0       0       0       0       0
  6692 ;;      Totals:         5       0       0       0       0       0       0
  6693 ;;Total ram usage:        5 bytes
  6694 ;; Hardware stack levels used:    1
  6695 ;; Hardware stack levels required when called:    1
  6696 ;; This function calls:
  6697 ;;		i2_UART_buff_modulo_inc
  6698 ;; This function is called by:
  6699 ;;		_EUSART1_Transmit_ISR
  6700 ;; This function uses a non-reentrant model
  6701 ;;
  6702                           
  6703                           	psect	text42
  6704  0011A6                     __ptext42:
  6705                           	opt stack 0
  6706  0011A6                     i2_UART_buff_get:
  6707                           	opt stack 21
  6708                           
  6709                           ;UART.c: 82: unsigned char c;
  6710                           ;UART.c: 83: if (_this->count > 0) {
  6711                           
  6712                           ;incstack = 0
  6713  0011A6  EE20 F0CC          	lfsr	2,204
  6714  0011AA  5007               	movf	i2UART_buff_get@_this,w,c
  6715  0011AC  26D9               	addwf	fsr2l,f,c
  6716  0011AE  5008               	movf	i2UART_buff_get@_this+1,w,c
  6717  0011B0  22DA               	addwfc	fsr2h,f,c
  6718  0011B2  0E01               	movlw	1
  6719  0011B4  BEDB               	btfsc	plusw2,7,c
  6720  0011B6  D03C               	goto	i2l2281
  6721  0011B8  0E01               	movlw	1
  6722  0011BA  50DB               	movf	plusw2,w,c
  6723  0011BC  E103               	bnz	i2u225_40
  6724  0011BE  04DE               	decf	postinc2,w,c
  6725  0011C0  A0D8               	btfss	status,0,c
  6726  0011C2  D036               	goto	i2l2281
  6727  0011C4                     i2u225_40:
  6728                           
  6729                           ;UART.c: 84: c = _this->buf[_this->tail];
  6730  0011C4  EE20 F0CA          	lfsr	2,202
  6731  0011C8  5007               	movf	i2UART_buff_get@_this,w,c
  6732  0011CA  26D9               	addwf	fsr2l,f,c
  6733  0011CC  5008               	movf	i2UART_buff_get@_this+1,w,c
  6734  0011CE  22DA               	addwfc	fsr2h,f,c
  6735  0011D0  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  6736  0011D4  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  6737  0011D8  5009               	movf	??i2_UART_buff_get,w,c
  6738  0011DA  2407               	addwf	i2UART_buff_get@_this,w,c
  6739  0011DC  6ED9               	movwf	fsr2l,c
  6740  0011DE  500A               	movf	??i2_UART_buff_get+1,w,c
  6741  0011E0  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  6742  0011E2  6EDA               	movwf	fsr2h,c
  6743  0011E4  50DF               	movf	indf2,w,c
  6744  0011E6  6E0B               	movwf	i2UART_buff_get@c,c
  6745                           
  6746                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  6747  0011E8  EE20 F0CA          	lfsr	2,202
  6748  0011EC  5007               	movf	i2UART_buff_get@_this,w,c
  6749  0011EE  26D9               	addwf	fsr2l,f,c
  6750  0011F0  5008               	movf	i2UART_buff_get@_this+1,w,c
  6751  0011F2  22DA               	addwfc	fsr2h,f,c
  6752  0011F4  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  6753  0011F8  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  6754  0011FC  0E00               	movlw	0
  6755  0011FE  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  6756  001200  0EC8               	movlw	200
  6757  001202  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  6758  001204  EC5E  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  6759  001208  EE20 F0CA          	lfsr	2,202
  6760  00120C  5007               	movf	i2UART_buff_get@_this,w,c
  6761  00120E  26D9               	addwf	fsr2l,f,c
  6762  001210  5008               	movf	i2UART_buff_get@_this+1,w,c
  6763  001212  22DA               	addwfc	fsr2h,f,c
  6764  001214  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  6765  001218  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  6766                           
  6767                           ;UART.c: 86: --_this->count;
  6768  00121C  EE20 F0CC          	lfsr	2,204
  6769  001220  5007               	movf	i2UART_buff_get@_this,w,c
  6770  001222  26D9               	addwf	fsr2l,f,c
  6771  001224  5008               	movf	i2UART_buff_get@_this+1,w,c
  6772  001226  22DA               	addwfc	fsr2h,f,c
  6773  001228  06DE               	decf	postinc2,f,c
  6774  00122A  0E00               	movlw	0
  6775  00122C  5ADD               	subwfb	postdec2,f,c
  6776                           
  6777                           ;UART.c: 87: } else {
  6778  00122E  D002               	goto	i2l290
  6779  001230                     i2l2281:
  6780                           
  6781                           ;UART.c: 88: c = 0;
  6782  001230  0E00               	movlw	0
  6783  001232  6E0B               	movwf	i2UART_buff_get@c,c
  6784  001234                     i2l290:
  6785                           
  6786                           ;UART.c: 89: }
  6787                           ;UART.c: 90: return (c);
  6788  001234  500B               	movf	i2UART_buff_get@c,w,c
  6789  001236  0012               	return	
  6790  001238                     __end_ofi2_UART_buff_get:
  6791                           	opt stack 0
  6792                           tosu	equ	0xFFF
  6793                           tosh	equ	0xFFE
  6794                           tosl	equ	0xFFD
  6795                           pclatu	equ	0xFFB
  6796                           pclath	equ	0xFFA
  6797                           tblptru	equ	0xFF8
  6798                           tblptrh	equ	0xFF7
  6799                           tblptrl	equ	0xFF6
  6800                           tablat	equ	0xFF5
  6801                           prodh	equ	0xFF4
  6802                           prodl	equ	0xFF3
  6803                           intcon	equ	0xFF2
  6804                           postinc0	equ	0xFEE
  6805                           fsr0h	equ	0xFEA
  6806                           fsr0l	equ	0xFE9
  6807                           wreg	equ	0xFE8
  6808                           fsr1h	equ	0xFE2
  6809                           fsr1l	equ	0xFE1
  6810                           indf2	equ	0xFDF
  6811                           postinc2	equ	0xFDE
  6812                           postdec2	equ	0xFDD
  6813                           plusw2	equ	0xFDB
  6814                           fsr2h	equ	0xFDA
  6815                           fsr2l	equ	0xFD9
  6816                           status	equ	0xFD8
  6817                           
  6818 ;; *************** function _EUSART1_Receive_ISR *****************
  6819 ;; Defined at:
  6820 ;;		line 139 in file "UART.c"
  6821 ;; Parameters:    Size  Location     Type
  6822 ;;		None
  6823 ;; Auto vars:     Size  Location     Type
  6824 ;;  data            1   11[COMRAM] unsigned char 
  6825 ;; Return value:  Size  Location     Type
  6826 ;;                  1    wreg      void 
  6827 ;; Registers used:
  6828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6829 ;; Tracked objects:
  6830 ;;		On entry : 0/0
  6831 ;;		On exit  : 0/0
  6832 ;;		Unchanged: 0/0
  6833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6834 ;;      Params:         0       0       0       0       0       0       0
  6835 ;;      Locals:         1       0       0       0       0       0       0
  6836 ;;      Temps:          0       0       0       0       0       0       0
  6837 ;;      Totals:         1       0       0       0       0       0       0
  6838 ;;Total ram usage:        1 bytes
  6839 ;; Hardware stack levels used:    1
  6840 ;; Hardware stack levels required when called:    2
  6841 ;; This function calls:
  6842 ;;		i2_UART_buff_put
  6843 ;; This function is called by:
  6844 ;;		_INTERRUPT_InterruptManager
  6845 ;; This function uses a non-reentrant model
  6846 ;;
  6847                           
  6848                           	psect	text43
  6849  001764                     __ptext43:
  6850                           	opt stack 0
  6851  001764                     _EUSART1_Receive_ISR:
  6852                           	opt stack 21
  6853                           
  6854                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  6855                           
  6856                           ;incstack = 0
  6857  001764  A2AB               	btfss	4011,1,c	;volatile
  6858  001766  D002               	goto	i2l321
  6859                           
  6860                           ;UART.c: 143: RC1STAbits.CREN = 0;
  6861  001768  98AB               	bcf	4011,4,c	;volatile
  6862                           
  6863                           ;UART.c: 144: RC1STAbits.CREN = 1;
  6864  00176A  88AB               	bsf	4011,4,c	;volatile
  6865  00176C                     i2l321:
  6866                           
  6867                           ;UART.c: 145: }
  6868                           ;UART.c: 146: unsigned char data = RCREG1;
  6869  00176C  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  6870                           
  6871                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  6872  001770  0E00               	movlw	low _input_buffer
  6873  001772  6E07               	movwf	i2UART_buff_put@_this,c
  6874  001774  0E03               	movlw	high _input_buffer
  6875  001776  6E08               	movwf	i2UART_buff_put@_this+1,c
  6876  001778  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  6877  00177C  EC41  F006         	call	i2_UART_buff_put	;wreg free
  6878  001780  0012               	return		;funcret
  6879  001782                     __end_of_EUSART1_Receive_ISR:
  6880                           	opt stack 0
  6881                           tosu	equ	0xFFF
  6882                           tosh	equ	0xFFE
  6883                           tosl	equ	0xFFD
  6884                           pclatu	equ	0xFFB
  6885                           pclath	equ	0xFFA
  6886                           tblptru	equ	0xFF8
  6887                           tblptrh	equ	0xFF7
  6888                           tblptrl	equ	0xFF6
  6889                           tablat	equ	0xFF5
  6890                           prodh	equ	0xFF4
  6891                           prodl	equ	0xFF3
  6892                           intcon	equ	0xFF2
  6893                           postinc0	equ	0xFEE
  6894                           fsr0h	equ	0xFEA
  6895                           fsr0l	equ	0xFE9
  6896                           wreg	equ	0xFE8
  6897                           fsr1h	equ	0xFE2
  6898                           fsr1l	equ	0xFE1
  6899                           indf2	equ	0xFDF
  6900                           postinc2	equ	0xFDE
  6901                           postdec2	equ	0xFDD
  6902                           plusw2	equ	0xFDB
  6903                           fsr2h	equ	0xFDA
  6904                           fsr2l	equ	0xFD9
  6905                           status	equ	0xFD8
  6906                           
  6907 ;; *************** function i2_UART_buff_put *****************
  6908 ;; Defined at:
  6909 ;;		line 68 in file "UART.c"
  6910 ;; Parameters:    Size  Location     Type
  6911 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  6912 ;;		 -> output_buffer(206), input_buffer(206), 
  6913 ;;  c               1    8[COMRAM] const unsigned char 
  6914 ;; Auto vars:     Size  Location     Type
  6915 ;;		None
  6916 ;; Return value:  Size  Location     Type
  6917 ;;                  1    wreg      void 
  6918 ;; Registers used:
  6919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6920 ;; Tracked objects:
  6921 ;;		On entry : 0/0
  6922 ;;		On exit  : 0/0
  6923 ;;		Unchanged: 0/0
  6924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6925 ;;      Params:         3       0       0       0       0       0       0
  6926 ;;      Locals:         0       0       0       0       0       0       0
  6927 ;;      Temps:          2       0       0       0       0       0       0
  6928 ;;      Totals:         5       0       0       0       0       0       0
  6929 ;;Total ram usage:        5 bytes
  6930 ;; Hardware stack levels used:    1
  6931 ;; Hardware stack levels required when called:    1
  6932 ;; This function calls:
  6933 ;;		i2_UART_buff_modulo_inc
  6934 ;; This function is called by:
  6935 ;;		_EUSART1_Receive_ISR
  6936 ;; This function uses a non-reentrant model
  6937 ;;
  6938                           
  6939                           	psect	text44
  6940  000C82                     __ptext44:
  6941                           	opt stack 0
  6942  000C82                     i2_UART_buff_put:
  6943                           	opt stack 21
  6944                           
  6945                           ;UART.c: 69: if (_this->count < 200) {
  6946                           
  6947                           ;incstack = 0
  6948  000C82  EE20 F0CC          	lfsr	2,204
  6949  000C86  5007               	movf	i2UART_buff_put@_this,w,c
  6950  000C88  26D9               	addwf	fsr2l,f,c
  6951  000C8A  5008               	movf	i2UART_buff_put@_this+1,w,c
  6952  000C8C  22DA               	addwfc	fsr2h,f,c
  6953  000C8E  0E01               	movlw	1
  6954  000C90  BEDB               	btfsc	plusw2,7,c
  6955  000C92  D007               	goto	i2l2261
  6956  000C94  0E01               	movlw	1
  6957  000C96  50DB               	movf	plusw2,w,c
  6958  000C98  E13A               	bnz	i2l2267
  6959  000C9A  0EC8               	movlw	200
  6960  000C9C  5CDE               	subwf	postinc2,w,c
  6961  000C9E  B0D8               	btfsc	status,0,c
  6962  000CA0  D036               	goto	i2l2267
  6963  000CA2                     i2l2261:
  6964                           
  6965                           ;UART.c: 70: _this->buf[_this->head] = c;
  6966  000CA2  EE20 F0C8          	lfsr	2,200
  6967  000CA6  5007               	movf	i2UART_buff_put@_this,w,c
  6968  000CA8  26D9               	addwf	fsr2l,f,c
  6969  000CAA  5008               	movf	i2UART_buff_put@_this+1,w,c
  6970  000CAC  22DA               	addwfc	fsr2h,f,c
  6971  000CAE  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  6972  000CB2  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  6973  000CB6  500A               	movf	??i2_UART_buff_put,w,c
  6974  000CB8  2407               	addwf	i2UART_buff_put@_this,w,c
  6975  000CBA  6ED9               	movwf	fsr2l,c
  6976  000CBC  500B               	movf	??i2_UART_buff_put+1,w,c
  6977  000CBE  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  6978  000CC0  6EDA               	movwf	fsr2h,c
  6979  000CC2  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  6980                           
  6981                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  6982  000CC6  EE20 F0C8          	lfsr	2,200
  6983  000CCA  5007               	movf	i2UART_buff_put@_this,w,c
  6984  000CCC  26D9               	addwf	fsr2l,f,c
  6985  000CCE  5008               	movf	i2UART_buff_put@_this+1,w,c
  6986  000CD0  22DA               	addwfc	fsr2h,f,c
  6987  000CD2  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  6988  000CD6  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  6989  000CDA  0E00               	movlw	0
  6990  000CDC  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  6991  000CDE  0EC8               	movlw	200
  6992  000CE0  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  6993  000CE2  EC5E  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  6994  000CE6  EE20 F0C8          	lfsr	2,200
  6995  000CEA  5007               	movf	i2UART_buff_put@_this,w,c
  6996  000CEC  26D9               	addwf	fsr2l,f,c
  6997  000CEE  5008               	movf	i2UART_buff_put@_this+1,w,c
  6998  000CF0  22DA               	addwfc	fsr2h,f,c
  6999  000CF2  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  7000  000CF6  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  7001                           
  7002                           ;UART.c: 72: ++_this->count;
  7003  000CFA  EE20 F0CC          	lfsr	2,204
  7004  000CFE  5007               	movf	i2UART_buff_put@_this,w,c
  7005  000D00  26D9               	addwf	fsr2l,f,c
  7006  000D02  5008               	movf	i2UART_buff_put@_this+1,w,c
  7007  000D04  22DA               	addwfc	fsr2h,f,c
  7008  000D06  2ADE               	incf	postinc2,f,c
  7009  000D08  0E00               	movlw	0
  7010  000D0A  22DD               	addwfc	postdec2,f,c
  7011                           
  7012                           ;UART.c: 73: } else {
  7013  000D0C  0012               	return	
  7014  000D0E                     i2l2267:
  7015                           
  7016                           ;UART.c: 74: _this->buf[_this->head] = c;
  7017  000D0E  EE20 F0C8          	lfsr	2,200
  7018  000D12  5007               	movf	i2UART_buff_put@_this,w,c
  7019  000D14  26D9               	addwf	fsr2l,f,c
  7020  000D16  5008               	movf	i2UART_buff_put@_this+1,w,c
  7021  000D18  22DA               	addwfc	fsr2h,f,c
  7022  000D1A  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  7023  000D1E  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  7024  000D22  500A               	movf	??i2_UART_buff_put,w,c
  7025  000D24  2407               	addwf	i2UART_buff_put@_this,w,c
  7026  000D26  6ED9               	movwf	fsr2l,c
  7027  000D28  500B               	movf	??i2_UART_buff_put+1,w,c
  7028  000D2A  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  7029  000D2C  6EDA               	movwf	fsr2h,c
  7030  000D2E  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  7031                           
  7032                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  7033  000D32  EE20 F0C8          	lfsr	2,200
  7034  000D36  5007               	movf	i2UART_buff_put@_this,w,c
  7035  000D38  26D9               	addwf	fsr2l,f,c
  7036  000D3A  5008               	movf	i2UART_buff_put@_this+1,w,c
  7037  000D3C  22DA               	addwfc	fsr2h,f,c
  7038  000D3E  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  7039  000D42  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  7040  000D46  0E00               	movlw	0
  7041  000D48  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  7042  000D4A  0EC8               	movlw	200
  7043  000D4C  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  7044  000D4E  EC5E  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  7045  000D52  EE20 F0C8          	lfsr	2,200
  7046  000D56  5007               	movf	i2UART_buff_put@_this,w,c
  7047  000D58  26D9               	addwf	fsr2l,f,c
  7048  000D5A  5008               	movf	i2UART_buff_put@_this+1,w,c
  7049  000D5C  22DA               	addwfc	fsr2h,f,c
  7050  000D5E  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  7051  000D62  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  7052                           
  7053                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7054  000D66  EE20 F0CA          	lfsr	2,202
  7055  000D6A  5007               	movf	i2UART_buff_put@_this,w,c
  7056  000D6C  26D9               	addwf	fsr2l,f,c
  7057  000D6E  5008               	movf	i2UART_buff_put@_this+1,w,c
  7058  000D70  22DA               	addwfc	fsr2h,f,c
  7059  000D72  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  7060  000D76  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  7061  000D7A  0E00               	movlw	0
  7062  000D7C  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  7063  000D7E  0EC8               	movlw	200
  7064  000D80  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  7065  000D82  EC5E  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  7066  000D86  EE20 F0CA          	lfsr	2,202
  7067  000D8A  5007               	movf	i2UART_buff_put@_this,w,c
  7068  000D8C  26D9               	addwf	fsr2l,f,c
  7069  000D8E  5008               	movf	i2UART_buff_put@_this+1,w,c
  7070  000D90  22DA               	addwfc	fsr2h,f,c
  7071  000D92  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  7072  000D96  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  7073  000D9A  0012               	return	
  7074  000D9C                     __end_ofi2_UART_buff_put:
  7075                           	opt stack 0
  7076                           tosu	equ	0xFFF
  7077                           tosh	equ	0xFFE
  7078                           tosl	equ	0xFFD
  7079                           pclatu	equ	0xFFB
  7080                           pclath	equ	0xFFA
  7081                           tblptru	equ	0xFF8
  7082                           tblptrh	equ	0xFF7
  7083                           tblptrl	equ	0xFF6
  7084                           tablat	equ	0xFF5
  7085                           prodh	equ	0xFF4
  7086                           prodl	equ	0xFF3
  7087                           intcon	equ	0xFF2
  7088                           postinc0	equ	0xFEE
  7089                           fsr0h	equ	0xFEA
  7090                           fsr0l	equ	0xFE9
  7091                           wreg	equ	0xFE8
  7092                           fsr1h	equ	0xFE2
  7093                           fsr1l	equ	0xFE1
  7094                           indf2	equ	0xFDF
  7095                           postinc2	equ	0xFDE
  7096                           postdec2	equ	0xFDD
  7097                           plusw2	equ	0xFDB
  7098                           fsr2h	equ	0xFDA
  7099                           fsr2l	equ	0xFD9
  7100                           status	equ	0xFD8
  7101                           
  7102 ;; *************** function i2_UART_buff_modulo_inc *****************
  7103 ;; Defined at:
  7104 ;;		line 106 in file "UART.c"
  7105 ;; Parameters:    Size  Location     Type
  7106 ;;  value           2    0[COMRAM] const unsigned int 
  7107 ;;  modulus         2    2[COMRAM] const unsigned int 
  7108 ;; Auto vars:     Size  Location     Type
  7109 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  7110 ;; Return value:  Size  Location     Type
  7111 ;;                  2    0[COMRAM] unsigned int 
  7112 ;; Registers used:
  7113 ;;		wreg, status,2, status,0
  7114 ;; Tracked objects:
  7115 ;;		On entry : 0/0
  7116 ;;		On exit  : 0/0
  7117 ;;		Unchanged: 0/0
  7118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7119 ;;      Params:         4       0       0       0       0       0       0
  7120 ;;      Locals:         2       0       0       0       0       0       0
  7121 ;;      Temps:          0       0       0       0       0       0       0
  7122 ;;      Totals:         6       0       0       0       0       0       0
  7123 ;;Total ram usage:        6 bytes
  7124 ;; Hardware stack levels used:    1
  7125 ;; This function calls:
  7126 ;;		Nothing
  7127 ;; This function is called by:
  7128 ;;		i2_UART_buff_put
  7129 ;;		i2_UART_buff_get
  7130 ;; This function uses a non-reentrant model
  7131 ;;
  7132                           
  7133                           	psect	text45
  7134  0016BC                     __ptext45:
  7135                           	opt stack 0
  7136  0016BC                     i2_UART_buff_modulo_inc:
  7137                           	opt stack 21
  7138                           
  7139                           ;UART.c: 107: unsigned int my_value = value + 1;
  7140                           
  7141                           ;incstack = 0
  7142  0016BC  0E01               	movlw	1
  7143  0016BE  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  7144  0016C0  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  7145  0016C2  0E00               	movlw	0
  7146  0016C4  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  7147  0016C6  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  7148                           
  7149                           ;UART.c: 108: if (my_value >= modulus) {
  7150  0016C8  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  7151  0016CA  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  7152  0016CC  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  7153  0016CE  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  7154  0016D0  A0D8               	btfss	status,0,c
  7155  0016D2  D004               	goto	i2l2073
  7156                           
  7157                           ;UART.c: 109: my_value = 0;
  7158  0016D4  0E00               	movlw	0
  7159  0016D6  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  7160  0016D8  0E00               	movlw	0
  7161  0016DA  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  7162  0016DC                     i2l2073:
  7163                           
  7164                           ;UART.c: 110: }
  7165                           ;UART.c: 111: return (my_value);
  7166  0016DC  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  7167  0016E0  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  7168  0016E4  0012               	return	
  7169  0016E6                     __end_ofi2_UART_buff_modulo_inc:
  7170                           	opt stack 0
  7171  0000                     tosu	equ	0xFFF
  7172                           tosh	equ	0xFFE
  7173                           tosl	equ	0xFFD
  7174                           pclatu	equ	0xFFB
  7175                           pclath	equ	0xFFA
  7176                           tblptru	equ	0xFF8
  7177                           tblptrh	equ	0xFF7
  7178                           tblptrl	equ	0xFF6
  7179                           tablat	equ	0xFF5
  7180                           prodh	equ	0xFF4
  7181                           prodl	equ	0xFF3
  7182                           intcon	equ	0xFF2
  7183                           postinc0	equ	0xFEE
  7184                           fsr0h	equ	0xFEA
  7185                           fsr0l	equ	0xFE9
  7186                           wreg	equ	0xFE8
  7187                           fsr1h	equ	0xFE2
  7188                           fsr1l	equ	0xFE1
  7189                           indf2	equ	0xFDF
  7190                           postinc2	equ	0xFDE
  7191                           postdec2	equ	0xFDD
  7192                           plusw2	equ	0xFDB
  7193                           fsr2h	equ	0xFDA
  7194                           fsr2l	equ	0xFD9
  7195                           status	equ	0xFD8
  7196                           tosu	equ	0xFFF
  7197                           tosh	equ	0xFFE
  7198                           tosl	equ	0xFFD
  7199                           pclatu	equ	0xFFB
  7200                           pclath	equ	0xFFA
  7201                           tblptru	equ	0xFF8
  7202                           tblptrh	equ	0xFF7
  7203                           tblptrl	equ	0xFF6
  7204                           tablat	equ	0xFF5
  7205                           prodh	equ	0xFF4
  7206                           prodl	equ	0xFF3
  7207                           intcon	equ	0xFF2
  7208                           postinc0	equ	0xFEE
  7209                           fsr0h	equ	0xFEA
  7210                           fsr0l	equ	0xFE9
  7211                           wreg	equ	0xFE8
  7212                           fsr1h	equ	0xFE2
  7213                           fsr1l	equ	0xFE1
  7214                           indf2	equ	0xFDF
  7215                           postinc2	equ	0xFDE
  7216                           postdec2	equ	0xFDD
  7217                           plusw2	equ	0xFDB
  7218                           fsr2h	equ	0xFDA
  7219                           fsr2l	equ	0xFD9
  7220                           status	equ	0xFD8
  7221                           
  7222                           	psect	text46
  7223  000000                     __ptext46:
  7224                           	opt stack 0
  7225                           tosu	equ	0xFFF
  7226                           tosh	equ	0xFFE
  7227                           tosl	equ	0xFFD
  7228                           pclatu	equ	0xFFB
  7229                           pclath	equ	0xFFA
  7230                           tblptru	equ	0xFF8
  7231                           tblptrh	equ	0xFF7
  7232                           tblptrl	equ	0xFF6
  7233                           tablat	equ	0xFF5
  7234                           prodh	equ	0xFF4
  7235                           prodl	equ	0xFF3
  7236                           intcon	equ	0xFF2
  7237                           postinc0	equ	0xFEE
  7238                           fsr0h	equ	0xFEA
  7239                           fsr0l	equ	0xFE9
  7240                           wreg	equ	0xFE8
  7241                           fsr1h	equ	0xFE2
  7242                           fsr1l	equ	0xFE1
  7243                           indf2	equ	0xFDF
  7244                           postinc2	equ	0xFDE
  7245                           postdec2	equ	0xFDD
  7246                           plusw2	equ	0xFDB
  7247                           fsr2h	equ	0xFDA
  7248                           fsr2l	equ	0xFD9
  7249                           status	equ	0xFD8
  7250                           
  7251                           	psect	rparam
  7252  0000                     tosu	equ	0xFFF
  7253                           tosh	equ	0xFFE
  7254                           tosl	equ	0xFFD
  7255                           pclatu	equ	0xFFB
  7256                           pclath	equ	0xFFA
  7257                           tblptru	equ	0xFF8
  7258                           tblptrh	equ	0xFF7
  7259                           tblptrl	equ	0xFF6
  7260                           tablat	equ	0xFF5
  7261                           prodh	equ	0xFF4
  7262                           prodl	equ	0xFF3
  7263                           intcon	equ	0xFF2
  7264                           postinc0	equ	0xFEE
  7265                           fsr0h	equ	0xFEA
  7266                           fsr0l	equ	0xFE9
  7267                           wreg	equ	0xFE8
  7268                           fsr1h	equ	0xFE2
  7269                           fsr1l	equ	0xFE1
  7270                           indf2	equ	0xFDF
  7271                           postinc2	equ	0xFDE
  7272                           postdec2	equ	0xFDD
  7273                           plusw2	equ	0xFDB
  7274                           fsr2h	equ	0xFDA
  7275                           fsr2l	equ	0xFD9
  7276                           status	equ	0xFD8
  7277                           
  7278                           	psect	temp
  7279  000045                     btemp:
  7280                           	opt stack 0
  7281  000045                     	ds	1
  7282  0000                     int$flags	set	btemp
  7283                           tosu	equ	0xFFF
  7284                           tosh	equ	0xFFE
  7285                           tosl	equ	0xFFD
  7286                           pclatu	equ	0xFFB
  7287                           pclath	equ	0xFFA
  7288                           tblptru	equ	0xFF8
  7289                           tblptrh	equ	0xFF7
  7290                           tblptrl	equ	0xFF6
  7291                           tablat	equ	0xFF5
  7292                           prodh	equ	0xFF4
  7293                           prodl	equ	0xFF3
  7294                           intcon	equ	0xFF2
  7295                           postinc0	equ	0xFEE
  7296                           fsr0h	equ	0xFEA
  7297                           fsr0l	equ	0xFE9
  7298                           wreg	equ	0xFE8
  7299                           fsr1h	equ	0xFE2
  7300                           fsr1l	equ	0xFE1
  7301                           indf2	equ	0xFDF
  7302                           postinc2	equ	0xFDE
  7303                           postdec2	equ	0xFDD
  7304                           plusw2	equ	0xFDB
  7305                           fsr2h	equ	0xFDA
  7306                           fsr2l	equ	0xFD9
  7307                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         883
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      68
    BANK0           160     27      62
    BANK1           256      0     206
    BANK2           256      0     200
    BANK3           256      0     206
    BANK4           256      0     206
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK3[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_329(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK2[200]), ring_buffer(BANK1[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK1[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 10
		 -> receiveArray(BANK0[10]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 10
		 -> NULL(NULL[0]), receiveArray(BANK0[10]), 


Critical Paths under _main in COMRAM

    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _sendData->_FastTransfer_buffer_flush
    _ToSend->_FastTransfer_buffer_put
    _receiveData->_CRCcheck
    _CRCcheck->_crcBufS_get
    _ComStart->_begin

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   20758
                            _GetTime
                         _ReadFaults
                            _SetTime
                              _Start
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   18451
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           1     1      0    7736
                                              9 BANK0      1     1      0
                              _Delay
                          _GetFaults
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    5704
                                              4 BANK0      5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                              0 BANK0      4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1828
                                              2 BANK0      3     1      2
            _FastTransfer_buffer_put
                          _GetFaults (ARG)
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _GetFaults                                            1     1      0      30
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     174
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0   10715
                                              9 BANK0     18    18      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                              0 BANK0      1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                              2 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    10     6      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Start                                                0     0      0    2307
                           _ComStart
               _INTERRUPT_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ComStart                                             0     0      0    2307
                 _EUSART1_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (3) _begin                                               13     0     13    1292
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     428
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (4) _UART_buff_init                                       2     0      2    1015
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _SetTime                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadFaults                                           1     1      0       0
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              4     0      4       0
                                             26 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetTime
   _ReadFaults
   _SetTime
   _Start
     _ComStart
       _EUSART1_Initialize
         _UART_buff_init
           _memset
       _begin
         ___awdiv
     _INTERRUPT_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _updateComms
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _respondECU
       _Delay
       _GetFaults
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
         _GetFaults (ARG)
       _sendData
         Absolute function(Fake) *
         _CRC8 *
         _FastTransfer_buffer_flush *
           _memset
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C8       8       78.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      CE       6       80.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1B      3E       4       38.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3B4       9        0.0%
DATA                 0      0     3B4      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Sep 30 09:25:27 2016

      __end_of_FastTransfer_buffer_flush 1328                   i2_UART_buff_modulo_inc 16BC  
                           _rx_array_inx 0042                             ___awdiv@sign 0020  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    l112 1526                                      l226 0A1C  
                                    l290 11A2                                      l462 1598  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
   FastTransfer_buffer_flush@clearBuffer 0085                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
          i2UART_buff_modulo_inc@modulus 0003                             __CFG_LVP$OFF 000000  
                                   l1325 17C0                                     l2403 1688  
                                   l2413 1656                                     l2501 0DA6  
                                   l2423 0BF4                                     l2409 1646  
                                   l2505 0DB0                                     l2417 0B88  
                                   l2601 0AF8                                     l2611 08C2  
                                   l2453 1510                                     l2461 152C  
                                   l2437 119E                                     l2517 0E44  
                                   l2533 10CE                                     l2525 1048  
                                   l2621 0984                                     l2613 08EA  
                                   l2605 0B34                                     l2447 14FA  
                                   l2463 1532                                     l2711 0260  
                                   l2625 099A                                     l2801 06BA  
                                   l2395 16B2                                     l2635 09EE  
                                   l2643 0A16                                     l2803 06D4  
                                   l2715 0292                                     l2483 0776  
                                   l2805 0722                                     l2733 03F0  
                                   l1951 127A                                     l1943 125C  
                                   l2639 0A0E                                     l2807 073E  
                                   l2751 04AA                                     l2735 03F6  
                                   l2727 0356                                     l2719 02BA  
                                   l2815 074A                                     l2663 0100  
                                   l2591 0A86                                     l1961 129A  
                                   l1953 127E                                     l1937 124C  
                                   l2761 052C                                     l2753 04C4  
                                   l2737 040A                                     l2681 01C0  
                                   l2593 0AA0                                     l2763 0546  
                                   l2755 04DE                                     l2683 01C6  
                                   l2659 00D4                                     l2667 0104  
                                   l2691 0200                                     l2595 0ABC  
                                   l2587 0A50                                     l1949 1272  
                                   l1965 12A4                                     l2765 0594  
                                   l2757 04F8                                     l2597 0AC8  
                                   l2589 0A6A                                     l2791 0638  
                                   l2759 0512                                     l2767 05B0  
                                   l2679 01A8                                     l2599 0AF2  
                                   l1969 12B2                                     l2793 0652  
                                   l2777 05BC                                     l2697 020C  
                                   l2873 1614                                     l2795 066C  
                                   l2699 0232                                     l2797 0686  
                                   l2799 06A0                                     l1999 1584  
                   receiveData@crcHolder 0098                                     _CRC8 14F4  
                                   u1010 0F6E                                     u1100 0FFE  
                                   u1020 0F7E                                     u1030 0F92  
                                   u1120 100E                                     u1040 0FAA  
                                   u1016 0F70                                     u1130 101E  
                                   u1050 0FC6                                     u1115 1000  
                                   u1140 1032                                     u1060 0FDA  
                                   u1028 0F80                                     u1126 1010  
                                   u1038 0F94                                     u1080 0FEC  
                                   u1048 0FAC                                     u1138 1020  
                                   u1058 0FC8                                     u1075 0FDC  
                                   u1148 1034                                     u1095 0FEE  
                                   u3008 0264                                     u3041 02FA  
                                   u3009 0278                                     u3018 0296  
                                   u3019 02AA                                     u3108 04AE  
                                   u3118 04C8                                     u2511 0774  
                                   u3208 063C                                     u3128 04E2  
                                   u2450 1132                                     u3218 0656  
                                   u3138 04FC                                     u3330 1630  
                                   u3228 0670                                     u3148 0516  
                                   u3238 068A                                     u3158 0530  
                                   u3248 06A4                                     u3168 054A  
                                   u2608 0A6E                                     u3258 06BE  
                                   u3178 0598                                     u3098 0494  
                                   u2490 0F50                                     u2618 0A8A  
                                   u2708 0926                                     u3268 06D8  
                                   u2628 0AA4                                     u2709 093A  
                                   u3357 158A                                     u2718 0942  
                                   u3278 0726                                     u3198 0622  
                                   u2638 0ACC                                     u2719 0956  
                                   u2808 00AE                                     u2809 00C2  
                                   u2658 0B1C                                     u2668 08C6  
                                   u2908 0178                                     u2828 00DC  
                                   u2588 0A3A                                     u2669 08DA  
                                   u2909 018C                                     u2829 00F0  
                                   u2598 0A54                                     u2688 08EE  
                                   u2928 01AC                                     u2848 0108  
                                   u2689 0902                                     u2849 011C  
                                   u2698 090A                                     u2699 091E  
                                   u2868 0126                                     u2869 013A  
                                   u2968 0210                                     u2888 0144  
                                   u2969 0224                                     u2889 0158  
                                   u2898 015E                                     u2899 0172  
                                   u2988 0236                                     u2989 024A  
                                   _main 1610                          _TMR0_StartTimer 185E  
                                   _time 0060                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   btemp 0045                            __CFG_BORV$190 000000  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3          __end_of_FastTransfer_buffer_put 08C2  
                                   start 00A0                            __CFG_IESO$OFF 000000  
                        __end_of_GetTime 1832                             ___param_bank 000010  
         i2UART_buff_modulo_inc@my_value 0005                                    ?_CRC8 001B  
                        __end_of_SetTime 1820                  __end_of_TMR0_Initialize 1746  
                       __end_of_CRCcheck 0A1E                       crcBufS_put@address 001D  
                                  ?_main 0001                          __end_of___awdiv 12BC  
                                  _T0CON 000FD5                          ___awdiv@divisor 001D  
                         __CFG_DEBUG$OFF 000000                                    i2l321 176C  
                                  i2l290 1234                                    i2l453 004E  
                                  i2l455 005A                                    i2l459 0064  
                        ___awdiv@counter 001F                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6                                    _Delay 157A  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 15AE                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                       __end_of_TMR0_ISR 179C                                    _Start 14A8  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _begin 1450  
                         __CFG_EBTRB$OFF 000000                                    _group 002A  
                     __CFG_MCLRE$EXTMCLR 000000                                    pclath 000FFA  
                                  tablat 000FF5                            ??_Receive_get 0026  
                   __size_of_crcBufS_get 00F2                                    plusw2 000FDB  
                         begin@stuffpeek 008E                     __size_of_crcBufS_put 00D8  
                                  status 000FD8                           __CFG_HFOFST$ON 000000  
                           ?_receiveData 0001                           __CFG_PBADEN$ON 000000  
                           __end_of_CRC8 153E                         __end_of_ComStart 1450  
                        CRCcheck@SentCRC 0085                               _ReadFaults 0F66  
                        __initialization 1328               __end_of_EUSART1_Initialize 157A  
                           __end_of_main 163C                               ToSend@what 0085  
                                 ??_CRC8 001E              ?_INTERRUPT_InterruptManager 0001  
                     __size_of_GetFaults 0016                                   ??_main 0026  
                  receiveData@holder_329 0095                            __activetblptr 000002  
                       __end_of_Send_put 1610                __size_ofi2_UART_buff_size 0016  
                                 ?_Delay 001B                    ?_EUSART1_Transmit_ISR 0001  
          FastTransfer_buffer_put@towhat 0024                                   ?_Start 0001  
                          ?_Receive_peek 0001                                   ?_begin 0083  
                __end_of_TMR0_StartTimer 1862                         ___awdiv@dividend 001B  
                                 _ANSELA 000F38                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                          i2_UART_buff_get 11A6  
                                 _RC1STA 000FAB                          i2_UART_buff_put 0C82  
                                 i2l2073 16DC                                   i2l2261 0CA2  
                                 i2l2317 15D8                                   i2l2281 1230  
                                 i2l2267 0D0E                           __CFG_WDTEN$OFF 000000  
                                 Delay@x 001E              UART_buff_modulo_inc@modulus 001D  
                                 _RCREG1 000FAE                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                                ??_GetTime 001F  
                                 _TX1STA 000FAC                                   _TXREG1 000FAD  
                              ??_SetTime 001B                           __CFG_XINST$OFF 000000  
                                 _ToSend 170A                      __end_of_Receive_get 185E  
                       crcBufS_get@_this 001B              ??_FastTransfer_buffer_flush 0023  
                          _output_buffer 0400                         crcBufS_get@space 001E  
                              ??___awdiv 001F                                CRC8@tempI 0020  
                         __CFG_STVREN$ON 000000                         ?_TMR0_Initialize 0001  
                                 _memset 163C                                   clear_0 132E  
                                 clear_1 133A                                   clear_2 1346  
                                 clear_3 1352                                   clear_4 135E  
                                 clear_5 136A                         ___awdiv@quotient 0021  
                                 _rx_len 0043                         __end_of_sendData 0B68  
                           __pdataCOMRAM 0044                            Send_put@_data 0083  
                         ??_Receive_peek 001F                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 0174             __end_of_UART_buff_modulo_inc 16BC  
          __size_of_INTERRUPT_Initialize 0018                               __accesstop 0060  
                __end_of__initialization 1382                                ?_CRCcheck 0001  
                      __end_of_GetFaults 17CA                            ___rparam_used 000001  
                ?i2_UART_buff_modulo_inc 0001                             ?_updateComms 0001  
                          __end_of_Delay 15AE                              ?_ReadFaults 0001  
                         __pcstackCOMRAM 0001                            __end_of_Start 14F4  
                     _crcBufS_status_put 103E                         crcBufS_put@_this 001B  
                          __end_of_begin 14A8                                ?_TMR0_ISR 0001  
 __end_of_FastTransfer_buffer_modulo_inc 1692  __size_of_FastTransfer_buffer_modulo_inc 002A  
         _FastTransfer_buffer_modulo_inc 1668             FastTransfer_buffer_put@_this 0021  
                            ToSend@where 0087                       UART_buff_get@_this 0021  
                    ?_crcBufS_status_put 001B                    __end_of_UART_buff_get 11A6  
                 ??_EUSART1_Transmit_ISR 000C                    __end_of_UART_buff_put 0C82  
                                ??_Delay 001D                  __end_ofi2_UART_buff_get 1238  
                __end_ofi2_UART_buff_put 0D9C              __end_of_EUSART1_Receive_ISR 1782  
              _FastTransfer_buffer_flush 12BC                                  CRC8@crc 0021  
                                CRC8@len 001D                                  ??_Start 0025  
                                CRC8@sum 001E                                ?_ComStart 0001  
                                ??_begin 0023                         ?_TMR0_StartTimer 0001  
                    _addressErrorCounter 0064                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                        __CFG_PLLCFG$OFF 000000                              _Receive_get 1850  
                             ??_CRCcheck 0026                     ??_crcBufS_status_put 001F  
         __end_ofi2_UART_buff_modulo_inc 16E6                        begin@givenAddress 0086  
                __size_of_UART_buff_init 001E                  __size_of_UART_buff_peek 0024  
                __size_of_UART_buff_size 0016                                ?_Send_put 0001  
                   __size_of_receiveData 06AA                                  ?_ToSend 0085  
                     __CFG_CCP2MX$PORTC1 000000                               ??_TMR0_ISR 0001  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 001B  
                                ?_memset 001B                               _crc_buffer 0068  
                     UART_buff_put@_this 0021                         i2_UART_buff_size 17F6  
            i2UART_buff_modulo_inc@value 0001                                  _OSCCON2 000FD2  
                      _Receive_available 17CA             UART_buff_modulo_inc@my_value 001F  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                               ??_ComStart 0025  
                    sendData@whereToSend 0088                      _receiveArrayAddress 002C  
                    __size_of_ReadFaults 00D8                       ?_Receive_available 001D  
                             begin@error 0087                                  _GetTime 1820  
                                _ByteLow 003C                      ??_Receive_available 001F  
                              ?_sendData 0001                        _alignErrorCounter 0026  
                        __CFG_PWRTEN$OFF 000000                               ??_Send_put 0026  
                                __Hparam 0000                                  _SetTime 180C  
                                __Lparam 0000                          __size_of_ToSend 001E  
                   __end_of_Receive_peek 1850                                _AKNAKsend 003A  
                                ___awdiv 1238                     _UART_buff_modulo_inc 1692  
                                _calc_CS 003D                                  __pcinit 1328  
                        __size_of_memset 002C                                  __ramtop 0600  
                       i2UART_buff_get@c 000B                                  __ptext0 1610  
                                __ptext1 1832                                  __ptext2 1390  
                                __ptext3 0A1E                                  __ptext4 0E8E  
                                __ptext5 12BC                                  __ptext6 170A  
                                __ptext7 074E                                  __ptext8 1668  
                                __ptext9 17B4                                _T0CONbits 000FD5  
                       i2UART_buff_put@c 0009                __end_of_Receive_available 17E0  
                _FastTransfer_buffer_put 074E                    CRCcheck@calculatedCRC 0086  
                     _EUSART1_Initialize 153E                         ?i2_UART_buff_get 0007  
                       ?i2_UART_buff_put 0007             crcBufS_status_put@wantedTime 0023  
                          ??_crcBufS_get 001F                            ??_crcBufS_put 0020  
                   end_of_initialization 1382                                Delay@wait 001B  
                    ?_EUSART1_Initialize 0001                                  memset@c 001D  
                                memset@n 001F                                  memset@p 0021  
                          __Lmediumconst 0000                               ??_sendData 0087  
                  ?_UART_buff_modulo_inc 001B                     __size_of_updateComms 0010  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                               _respondECU 1390  
                       begin@stufftosend 0088                      CRCcheck@arrayHolder 0087  
                   ??_EUSART1_Initialize 0025                   _dataAdressErrorCounter 0066  
                             _rx_address 0041                                _TRISAbits 000F92  
                              _TRISCbits 000F94                                _TRISDbits 000F95  
                           begin@maxSize 0085       __size_of_FastTransfer_buffer_flush 006C  
                  i2UART_buff_size@_this 0001                           _UART_buff_init 1746  
                         _UART_buff_peek 16E6                           _UART_buff_size 17E0  
                    __end_of_crcBufS_get 0E8E                      __end_of_crcBufS_put 0F66  
                      __size_of_CRCcheck 015C                             ??_ReadFaults 001B  
                              _GetFaults 17B4                            _moduleAddress 003F  
                   _timer0ReloadVal16bit 0038                               CRCcheck@rt 008A  
                         __end_of_ToSend 1728             __end_of_INTERRUPT_Initialize 17B4  
                        _crcErrorCounter 0028                        crcBufS_put@oldCRC 001E  
                          __pidataCOMRAM 1862                        __size_of_TMR0_ISR 001A  
              ??_FastTransfer_buffer_put 0083                           __end_of_memset 1668  
                      crcBufS_put@status 001F                             receiveData@r 009C  
             __size_of_Receive_available 0016                             receiveData@u 009A  
                    start_initialization 1328                 __size_of_TMR0_Initialize 001E  
                  crcBufS_get@wantedTime 0083                       __end_of_ReadFaults 103E  
                      __size_of_ComStart 0058                   __end_of_UART_buff_init 1764  
                 __end_of_UART_buff_peek 170A                           UART_buff_get@c 0025  
                 __end_of_UART_buff_size 17F6                             ?_Receive_get 0001  
                         UART_buff_put@c 0023                    __size_of_Receive_peek 000E  
               __end_ofi2_UART_buff_size 180C                                 ??_ToSend 0026  
                 ??_UART_buff_modulo_inc 001F                               ?_GetFaults 0001  
                               CRC8@data 001B                          crcBufS_get@time 001D  
                      __size_of_Send_put 0030                              ?_respondECU 0001  
                               ??_memset 0021                              __pbssCOMRAM 0026  
          __size_of_EUSART1_Transmit_ISR 0032                            __pcstackBANK0 0083  
                           _Receive_peek 1842                      UART_buff_init@_this 0023  
                            _crcBufS_get 0D9C                      UART_buff_peek@_this 001B  
                            _crcBufS_put 0E8E                          ?_UART_buff_init 0023  
                        ?_UART_buff_peek 001B                          ?_UART_buff_size 001B  
           __size_of_EUSART1_Receive_ISR 001E                                 ?_GetTime 001B  
                          ??_receiveData 008C              __size_of_crcBufS_status_put 00D6  
                             sendData@CS 0089                 __size_of_TMR0_StartTimer 0004  
                 __size_of_UART_buff_get 0092                   __size_of_UART_buff_put 011A  
                               ?_SetTime 0001                        __size_of_sendData 014A  
                           GetFaults@num 001B                                __pintcode 0008  
                               ?___awdiv 001B             ??_INTERRUPT_InterruptManager 000D  
                   i2UART_buff_get@_this 0007                 receiveData@crcHolder_330 0099  
                               _BAUD1CON 000FB8                           __size_of_Delay 0034  
                         __size_of_Start 004C                           __size_of_begin 0058  
                    __size_of_respondECU 0068                     _INTERRUPT_Initialize 179C  
                           _receiveArray 0079                        ??_TMR0_Initialize 001B  
                               _CRCcheck 08C2                                 _LATAbits 000F89  
                               _LATCbits 000F8B                                 _LATDbits 000F8C  
                    UART_buff_size@_this 001B                                 _IPR1bits 000F9F  
                               _IPR2bits 000FA2                                 _PIE1bits 000F9D  
    __size_of_INTERRUPT_InterruptManager 0098                                 i2u225_40 11C4  
                               i2u228_40 15C8                                 _PIR1bits 000F9E  
                            ??_GetFaults 001B                      begin@stuffavailable 008C  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 074E                                 _TMR0_ISR 1782  
         FastTransfer_buffer_flush@_this 0083                             _input_buffer 0300  
                              _rx_buffer 0200                     i2UART_buff_put@_this 0007  
                          _UART_buff_get 1114                            _UART_buff_put 0B68  
                               _ComStart 13F8                 ??i2_UART_buff_modulo_inc 0005  
                  ?_INTERRUPT_Initialize 0001                        _sendStructAddress 002E  
                               _ByteHigh 003B                 __size_ofi2_UART_buff_get 0092  
               __size_ofi2_UART_buff_put 011A                         __size_of_GetTime 0012  
                          ??_updateComms 0026                     __size_of_Receive_get 000E  
                               __Hrparam 0000                                 _Send_put 15E0  
                               __Lrparam 0000                       __CFG_BOREN$SBORDIS 000000  
                       __size_of_SetTime 0014                        __CFG_P2BMX$PORTD2 000000  
                      ??_TMR0_StartTimer 001B                         __size_of___awdiv 0084  
            __size_of_EUSART1_Initialize 003C                      begin@stufftoreceive 008A  
                         ?_UART_buff_get 0021                           ?_UART_buff_put 0021  
                            CRC8@extract 001F                                sendData@i 008A  
               crcBufS_status_put@status 001E                                 __ptext10 157A  
                               __ptext11 00A4                                 __ptext20 1114  
                               __ptext12 15E0                                 __ptext21 1692  
                               __ptext13 0B68                                 __ptext30 1450  
                               __ptext22 17CA                                 __ptext14 1842  
                               __ptext31 1238                                 __ptext23 17E0  
                               __ptext15 16E6                                 __ptext40 15AE  
                               __ptext32 153E                                 __ptext24 14F4  
                               __ptext16 08C2                                 __ptext41 17F6  
                               __ptext33 1746                                 __ptext25 14A8  
                               __ptext17 103E                                 __ptext42 11A6  
                               __ptext34 163C                                 __ptext26 1728  
                               __ptext18 0D9C                                 __ptext43 1764  
                               __ptext35 180C                                 __ptext27 185E  
                               __ptext19 1850                                 __ptext44 0C82  
                               __ptext36 0F66                                 __ptext28 179C  
                               __ptext45 16BC                                 __ptext37 1820  
                               __ptext29 13F8                                 __ptext46 0000  
                               __ptext39 1782                            __size_of_CRC8 004A  
                               begin@ptr 0083                  EUSART1_Receive_ISR@data 000C  
                          _returnAddress 0040                            __size_of_main 002C  
                            _receiveData 00A4                           _Transmit_stall 0044  
                               _sendData 0A1E                        ?i2_UART_buff_size 0001  
                             _RC1STAbits 000FAB                             ??_respondECU 008C  
                     ??i2_UART_buff_size 0003                                 int$flags 0045  
                           _serial_write 0036                      __end_of_updateComms 1842  
     __end_of_INTERRUPT_InterruptManager 00A0               _INTERRUPT_InterruptManager 0008  
                    _EUSART1_Receive_ISR 1764                        receiveData@holder 0092  
                             _INTCONbits 000FF2                UART_buff_modulo_inc@value 001B  
                       ??_UART_buff_init 0025                         ??_UART_buff_peek 001D  
                       ??_UART_buff_size 001D                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 0030  
        __size_ofi2_UART_buff_modulo_inc 002A                             ?_crcBufS_get 001B  
                           ?_crcBufS_put 001B                                 intlevel2 0000  
                crcBufS_status_put@_this 001B                       __end_of_respondECU 13F8  
                   ?_EUSART1_Receive_ISR 0001   FastTransfer_buffer_modulo_inc@my_value 001F  
         FastTransfer_buffer_put@towhere 0023             __end_of_EUSART1_Transmit_ISR 15E0  
                            _ring_buffer 0100               ?_FastTransfer_buffer_flush 0083  
                      ??i2_UART_buff_get 0009                              _serial_peek 0032  
                            _serial_read 0034                        ??i2_UART_buff_put 000A  
               ?_FastTransfer_buffer_put 0021            __size_of_UART_buff_modulo_inc 002A  
                        ??_UART_buff_get 0023                          ??_UART_buff_put 0024  
  FastTransfer_buffer_modulo_inc@modulus 001D                   crcBufS_status_put@time 001D  
                        _TMR0_Initialize 1728                        __CFG_T3CMX$PORTC0 000000  
                         _maxDataAddress 003E               __end_of_crcBufS_status_put 1114  
                  ??_EUSART1_Receive_ISR 000C         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B                        __CFG_FOSC$INTIO67 000000  
                            _updateComms 1832  
