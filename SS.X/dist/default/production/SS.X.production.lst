

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sun Oct 30 22:07:00 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    59                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    60  0000                     
    61 ;; Function _Receive_peek is unused but had its address taken
    62  0000                     
    63                           	psect	idataCOMRAM
    64  00145C                     __pidataCOMRAM:
    65                           	opt stack 0
    66                           
    67                           ;initializer for _Transmit_stall
    68  00145C  01                 	db	1
    69  0000                     _ANSELA	set	3896
    70  0000                     _ANSELB	set	3897
    71  0000                     _ANSELC	set	3898
    72  0000                     _ANSELD	set	3899
    73  0000                     _ANSELE	set	3900
    74  0000                     _BAUD1CON	set	4024
    75  0000                     _INTCONbits	set	4082
    76  0000                     _IPR1bits	set	3999
    77  0000                     _IPR2bits	set	4002
    78  0000                     _LATAbits	set	3977
    79  0000                     _LATDbits	set	3980
    80  0000                     _OSCCON	set	4051
    81  0000                     _OSCCON2	set	4050
    82  0000                     _OSCTUNE	set	3995
    83  0000                     _PIE1bits	set	3997
    84  0000                     _PIR1bits	set	3998
    85  0000                     _PORTCbits	set	3970
    86  0000                     _RC1STA	set	4011
    87  0000                     _RC1STAbits	set	4011
    88  0000                     _RCONbits	set	4048
    89  0000                     _RCREG1	set	4014
    90  0000                     _SPBRG1	set	4015
    91  0000                     _SPBRGH1	set	4016
    92  0000                     _T0CON	set	4053
    93  0000                     _T0CONbits	set	4053
    94  0000                     _TMR0H	set	4055
    95  0000                     _TMR0L	set	4054
    96  0000                     _TRISAbits	set	3986
    97  0000                     _TRISCbits	set	3988
    98  0000                     _TRISDbits	set	3989
    99  0000                     _TX1STA	set	4012
   100  0000                     _TXREG1	set	4013
   101                           
   102                           ; #config settings
   103  0000                     
   104                           	psect	cinit
   105  000F44                     __pcinit:
   106                           	opt stack 0
   107  000F44                     start_initialization:
   108                           	opt stack 0
   109  000F44                     __initialization:
   110                           	opt stack 0
   111                           
   112                           ; Clear objects allocated to BANK4 (206 bytes)
   113  000F44  EE04  F000         	lfsr	0,__pbssBANK4
   114  000F48  0ECE               	movlw	206
   115  000F4A                     clear_0:
   116  000F4A  6AEE               	clrf	postinc0,c
   117  000F4C  06E8               	decf	wreg,f,c
   118  000F4E  E1FD               	bnz	clear_0
   119                           
   120                           ; Clear objects allocated to BANK3 (206 bytes)
   121  000F50  EE03  F000         	lfsr	0,__pbssBANK3
   122  000F54  0ECE               	movlw	206
   123  000F56                     clear_1:
   124  000F56  6AEE               	clrf	postinc0,c
   125  000F58  06E8               	decf	wreg,f,c
   126  000F5A  E1FD               	bnz	clear_1
   127                           
   128                           ; Clear objects allocated to BANK2 (200 bytes)
   129  000F5C  EE02  F000         	lfsr	0,__pbssBANK2
   130  000F60  0EC8               	movlw	200
   131  000F62                     clear_2:
   132  000F62  6AEE               	clrf	postinc0,c
   133  000F64  06E8               	decf	wreg,f,c
   134  000F66  E1FD               	bnz	clear_2
   135                           
   136                           ; Clear objects allocated to BANK1 (206 bytes)
   137  000F68  EE01  F000         	lfsr	0,__pbssBANK1
   138  000F6C  0ECE               	movlw	206
   139  000F6E                     clear_3:
   140  000F6E  6AEE               	clrf	postinc0,c
   141  000F70  06E8               	decf	wreg,f,c
   142  000F72  E1FD               	bnz	clear_3
   143                           
   144                           ; Clear objects allocated to BANK0 (31 bytes)
   145  000F74  EE00  F060         	lfsr	0,__pbssBANK0
   146  000F78  0E1F               	movlw	31
   147  000F7A                     clear_4:
   148  000F7A  6AEE               	clrf	postinc0,c
   149  000F7C  06E8               	decf	wreg,f,c
   150  000F7E  E1FD               	bnz	clear_4
   151                           
   152                           ; Clear objects allocated to COMRAM (34 bytes)
   153  000F80  EE00  F001         	lfsr	0,__pbssCOMRAM
   154  000F84  0E22               	movlw	34
   155  000F86                     clear_5:
   156  000F86  6AEE               	clrf	postinc0,c
   157  000F88  06E8               	decf	wreg,f,c
   158  000F8A  E1FD               	bnz	clear_5
   159                           
   160                           ; Initialize objects allocated to COMRAM (1 bytes)
   161                           ; load TBLPTR registers with __pidataCOMRAM
   162  000F8C  0E5C               	movlw	low __pidataCOMRAM
   163  000F8E  6EF6               	movwf	tblptrl,c
   164  000F90  0E14               	movlw	high __pidataCOMRAM
   165  000F92  6EF7               	movwf	tblptrh,c
   166  000F94  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   167  000F96  6EF8               	movwf	tblptru,c
   168  000F98  0009               	tblrd		*+	;fetch initializer
   169  000F9A  CFF5 F044          	movff	tablat,__pdataCOMRAM
   170  000F9E                     end_of_initialization:
   171                           	opt stack 0
   172  000F9E                     __end_of__initialization:
   173                           	opt stack 0
   174  000F9E  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   175  000FA0  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   176  000FA2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   177  000FA4  6EF8               	movwf	tblptru,c
   178  000FA6  0100               	movlb	0
   179  000FA8  EF89  F009         	goto	_main	;jump to C main() function
   180                           tblptru	equ	0xFF8
   181                           tblptrh	equ	0xFF7
   182                           tblptrl	equ	0xFF6
   183                           tablat	equ	0xFF5
   184                           postinc0	equ	0xFEE
   185                           wreg	equ	0xFE8
   186                           
   187                           	psect	bssCOMRAM
   188  000001                     __pbssCOMRAM:
   189                           	opt stack 0
   190  000001                     _addressErrorCounter:
   191                           	opt stack 0
   192  000001                     	ds	2
   193  000003                     _alignErrorCounter:
   194                           	opt stack 0
   195  000003                     	ds	2
   196  000005                     _crcErrorCounter:
   197                           	opt stack 0
   198  000005                     	ds	2
   199  000007                     _dataAdressErrorCounter:
   200                           	opt stack 0
   201  000007                     	ds	2
   202  000009                     _group:
   203                           	opt stack 0
   204  000009                     	ds	2
   205  00000B                     _receiveArrayAddress:
   206                           	opt stack 0
   207  00000B                     	ds	2
   208  00000D                     _sendStructAddress:
   209                           	opt stack 0
   210  00000D                     	ds	2
   211  00000F                     _serial_available:
   212                           	opt stack 0
   213  00000F                     	ds	2
   214  000011                     _serial_peek:
   215                           	opt stack 0
   216  000011                     	ds	2
   217  000013                     _serial_read:
   218                           	opt stack 0
   219  000013                     	ds	2
   220  000015                     _serial_write:
   221                           	opt stack 0
   222  000015                     	ds	2
   223  000017                     _timer0ReloadVal16bit:
   224                           	opt stack 0
   225  000017                     	ds	2
   226  000019                     _AKNAKsend:
   227                           	opt stack 0
   228  000019                     	ds	1
   229  00001A                     _ByteHigh:
   230                           	opt stack 0
   231  00001A                     	ds	1
   232  00001B                     _ByteLow:
   233                           	opt stack 0
   234  00001B                     	ds	1
   235  00001C                     _calc_CS:
   236                           	opt stack 0
   237  00001C                     	ds	1
   238  00001D                     _maxDataAddress:
   239                           	opt stack 0
   240  00001D                     	ds	1
   241  00001E                     _moduleAddress:
   242                           	opt stack 0
   243  00001E                     	ds	1
   244  00001F                     _returnAddress:
   245                           	opt stack 0
   246  00001F                     	ds	1
   247  000020                     _rx_address:
   248                           	opt stack 0
   249  000020                     	ds	1
   250  000021                     _rx_array_inx:
   251                           	opt stack 0
   252  000021                     	ds	1
   253  000022                     _rx_len:
   254                           	opt stack 0
   255  000022                     	ds	1
   256                           tblptru	equ	0xFF8
   257                           tblptrh	equ	0xFF7
   258                           tblptrl	equ	0xFF6
   259                           tablat	equ	0xFF5
   260                           postinc0	equ	0xFEE
   261                           wreg	equ	0xFE8
   262                           
   263                           	psect	dataCOMRAM
   264  000044                     __pdataCOMRAM:
   265                           	opt stack 0
   266  000044                     _Transmit_stall:
   267                           	opt stack 0
   268  000044                     	ds	1
   269                           tblptru	equ	0xFF8
   270                           tblptrh	equ	0xFF7
   271                           tblptrl	equ	0xFF6
   272                           tablat	equ	0xFF5
   273                           postinc0	equ	0xFEE
   274                           wreg	equ	0xFE8
   275                           
   276                           	psect	bssBANK0
   277  000060                     __pbssBANK0:
   278                           	opt stack 0
   279  000060                     _time:
   280                           	opt stack 0
   281  000060                     	ds	4
   282  000064                     _crc_buffer:
   283                           	opt stack 0
   284  000064                     	ds	17
   285  000075                     _receiveArray:
   286                           	opt stack 0
   287  000075                     	ds	10
   288                           tblptru	equ	0xFF8
   289                           tblptrh	equ	0xFF7
   290                           tblptrl	equ	0xFF6
   291                           tablat	equ	0xFF5
   292                           postinc0	equ	0xFEE
   293                           wreg	equ	0xFE8
   294                           
   295                           	psect	bssBANK1
   296  000100                     __pbssBANK1:
   297                           	opt stack 0
   298  000100                     _ring_buffer:
   299                           	opt stack 0
   300  000100                     	ds	206
   301                           tblptru	equ	0xFF8
   302                           tblptrh	equ	0xFF7
   303                           tblptrl	equ	0xFF6
   304                           tablat	equ	0xFF5
   305                           postinc0	equ	0xFEE
   306                           wreg	equ	0xFE8
   307                           
   308                           	psect	bssBANK2
   309  000200                     __pbssBANK2:
   310                           	opt stack 0
   311  000200                     _rx_buffer:
   312                           	opt stack 0
   313  000200                     	ds	200
   314                           tblptru	equ	0xFF8
   315                           tblptrh	equ	0xFF7
   316                           tblptrl	equ	0xFF6
   317                           tablat	equ	0xFF5
   318                           postinc0	equ	0xFEE
   319                           wreg	equ	0xFE8
   320                           
   321                           	psect	bssBANK3
   322  000300                     __pbssBANK3:
   323                           	opt stack 0
   324  000300                     _input_buffer:
   325                           	opt stack 0
   326  000300                     	ds	206
   327                           tblptru	equ	0xFF8
   328                           tblptrh	equ	0xFF7
   329                           tblptrl	equ	0xFF6
   330                           tablat	equ	0xFF5
   331                           postinc0	equ	0xFEE
   332                           wreg	equ	0xFE8
   333                           
   334                           	psect	bssBANK4
   335  000400                     __pbssBANK4:
   336                           	opt stack 0
   337  000400                     _output_buffer:
   338                           	opt stack 0
   339  000400                     	ds	206
   340                           tblptru	equ	0xFF8
   341                           tblptrh	equ	0xFF7
   342                           tblptrl	equ	0xFF6
   343                           tablat	equ	0xFF5
   344                           postinc0	equ	0xFEE
   345                           wreg	equ	0xFE8
   346                           
   347                           	psect	cstackBANK0
   348  00007F                     __pcstackBANK0:
   349                           	opt stack 0
   350  00007F                     ___awdiv@counter:
   351                           	opt stack 0
   352  00007F                     FastTransfer_buffer_put@_this:
   353                           	opt stack 0
   354  00007F                     UART_buff_put@_this:
   355                           	opt stack 0
   356  00007F                     UART_buff_get@_this:
   357                           	opt stack 0
   358  00007F                     memset@p:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x0
   362  00007F                     	ds	1
   363  000080                     ___awdiv@sign:
   364                           	opt stack 0
   365                           
   366                           ; 1 bytes @ 0x1
   367  000080                     	ds	1
   368  000081                     ??_UART_buff_get:
   369  000081                     FastTransfer_buffer_put@towhere:
   370                           	opt stack 0
   371  000081                     UART_buff_put@c:
   372                           	opt stack 0
   373  000081                     FastTransfer_buffer_flush@_this:
   374                           	opt stack 0
   375  000081                     UART_buff_init@_this:
   376                           	opt stack 0
   377  000081                     ___awdiv@quotient:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x2
   381  000081                     	ds	1
   382  000082                     ??_UART_buff_put:
   383  000082                     FastTransfer_buffer_put@towhat:
   384                           	opt stack 0
   385                           
   386                           ; 2 bytes @ 0x3
   387  000082                     	ds	1
   388  000083                     begin@ptr:
   389                           	opt stack 0
   390  000083                     FastTransfer_buffer_flush@clearBuffer:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x4
   394  000083                     	ds	1
   395  000084                     ??_FastTransfer_buffer_put:
   396  000084                     Send_put@_data:
   397                           	opt stack 0
   398                           
   399                           ; 1 bytes @ 0x5
   400  000084                     	ds	1
   401  000085                     ??_receiveData:
   402  000085                     ??_sendData:
   403  000085                     begin@maxSize:
   404                           	opt stack 0
   405                           
   406                           ; 1 bytes @ 0x6
   407  000085                     	ds	1
   408  000086                     begin@givenAddress:
   409                           	opt stack 0
   410  000086                     sendData@whereToSend:
   411                           	opt stack 0
   412  000086                     ToSend@what:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x7
   416  000086                     	ds	1
   417  000087                     begin@error:
   418                           	opt stack 0
   419  000087                     sendData@CS:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x8
   423  000087                     	ds	1
   424  000088                     begin@stufftosend:
   425                           	opt stack 0
   426  000088                     sendData@i:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x9
   430  000088                     	ds	2
   431  00008A                     ??_respondECU:
   432  00008A                     begin@stufftoreceive:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0xB
   436  00008A                     	ds	1
   437  00008B                     receiveData@holder:
   438                           	opt stack 0
   439                           
   440                           ; 3 bytes @ 0xC
   441  00008B                     	ds	1
   442  00008C                     begin@stuffavailable:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0xD
   446  00008C                     	ds	2
   447  00008E                     begin@stuffpeek:
   448                           	opt stack 0
   449  00008E                     receiveData@holder_324:
   450                           	opt stack 0
   451                           
   452                           ; 3 bytes @ 0xF
   453  00008E                     	ds	3
   454  000091                     receiveData@crcHolder:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0x12
   458  000091                     	ds	1
   459  000092                     receiveData@crcHolder_325:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0x13
   463  000092                     	ds	1
   464  000093                     receiveData@u:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0x14
   468  000093                     	ds	2
   469  000095                     receiveData@r:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0x16
   473  000095                     	ds	2
   474                           tblptru	equ	0xFF8
   475                           tblptrh	equ	0xFF7
   476                           tblptrl	equ	0xFF6
   477                           tablat	equ	0xFF5
   478                           postinc0	equ	0xFEE
   479                           wreg	equ	0xFE8
   480                           
   481                           	psect	cstackCOMRAM
   482  000023                     __pcstackCOMRAM:
   483                           	opt stack 0
   484  000023                     ?i2_UART_buff_size:
   485                           	opt stack 0
   486  000023                     ?i2_UART_buff_modulo_inc:
   487                           	opt stack 0
   488  000023                     i2UART_buff_size@_this:
   489                           	opt stack 0
   490  000023                     i2UART_buff_modulo_inc@value:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x0
   494  000023                     	ds	2
   495  000025                     i2UART_buff_modulo_inc@modulus:
   496                           	opt stack 0
   497                           
   498                           ; 2 bytes @ 0x2
   499  000025                     	ds	2
   500  000027                     i2UART_buff_modulo_inc@my_value:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x4
   504  000027                     	ds	2
   505  000029                     i2UART_buff_put@_this:
   506                           	opt stack 0
   507  000029                     i2UART_buff_get@_this:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x6
   511  000029                     	ds	2
   512  00002B                     ??i2_UART_buff_get:
   513  00002B                     i2UART_buff_put@c:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x8
   517  00002B                     	ds	1
   518  00002C                     ??i2_UART_buff_put:
   519                           
   520                           ; 1 bytes @ 0x9
   521  00002C                     	ds	1
   522  00002D                     i2UART_buff_get@c:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0xA
   526  00002D                     	ds	1
   527  00002E                     EUSART1_Receive_ISR@data:
   528                           	opt stack 0
   529                           
   530                           ; 1 bytes @ 0xB
   531  00002E                     	ds	1
   532  00002F                     ??_INTERRUPT_InterruptManager:
   533                           
   534                           ; 1 bytes @ 0xC
   535  00002F                     	ds	14
   536  00003D                     ?_FastTransfer_buffer_modulo_inc:
   537                           	opt stack 0
   538  00003D                     ?_UART_buff_modulo_inc:
   539                           	opt stack 0
   540  00003D                     ?_UART_buff_size:
   541                           	opt stack 0
   542  00003D                     ?___awdiv:
   543                           	opt stack 0
   544  00003D                     GetFaults@num:
   545                           	opt stack 0
   546  00003D                     CRC8@data:
   547                           	opt stack 0
   548  00003D                     FastTransfer_buffer_modulo_inc@value:
   549                           	opt stack 0
   550  00003D                     crcBufS_put@_this:
   551                           	opt stack 0
   552  00003D                     UART_buff_size@_this:
   553                           	opt stack 0
   554  00003D                     UART_buff_modulo_inc@value:
   555                           	opt stack 0
   556  00003D                     Delay@wait:
   557                           	opt stack 0
   558  00003D                     ___awdiv@dividend:
   559                           	opt stack 0
   560  00003D                     memset@p1:
   561                           	opt stack 0
   562                           
   563                           ; 2 bytes @ 0x1A
   564  00003D                     	ds	2
   565  00003F                     ??_Delay:
   566  00003F                     ?_Receive_available:
   567                           	opt stack 0
   568  00003F                     CRC8@len:
   569                           	opt stack 0
   570  00003F                     crcBufS_put@address:
   571                           	opt stack 0
   572  00003F                     FastTransfer_buffer_modulo_inc@modulus:
   573                           	opt stack 0
   574  00003F                     UART_buff_modulo_inc@modulus:
   575                           	opt stack 0
   576  00003F                     ___awdiv@divisor:
   577                           	opt stack 0
   578  00003F                     memset@c:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x1C
   582  00003F                     	ds	1
   583  000040                     CRC8@sum:
   584                           	opt stack 0
   585  000040                     crcBufS_put@oldCRC:
   586                           	opt stack 0
   587  000040                     Delay@x:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x1D
   591  000040                     	ds	1
   592  000041                     CRC8@extract:
   593                           	opt stack 0
   594  000041                     crcBufS_put@status:
   595                           	opt stack 0
   596  000041                     FastTransfer_buffer_modulo_inc@my_value:
   597                           	opt stack 0
   598  000041                     UART_buff_modulo_inc@my_value:
   599                           	opt stack 0
   600  000041                     memset@n:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x1E
   604  000041                     	ds	1
   605  000042                     ??_crcBufS_put:
   606  000042                     CRC8@tempI:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0x1F
   610  000042                     	ds	1
   611  000043                     CRC8@crc:
   612                           	opt stack 0
   613  000043                     ToSend@where:
   614                           	opt stack 0
   615  000043                     UART_buff_get@c:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x20
   619  000043                     	ds	1
   620  000044                     tblptru	equ	0xFF8
   621                           tblptrh	equ	0xFF7
   622                           tblptrl	equ	0xFF6
   623                           tablat	equ	0xFF5
   624                           postinc0	equ	0xFEE
   625                           wreg	equ	0xFE8
   626                           
   627                           ; 1 bytes @ 0x21
   628 ;;
   629 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   630 ;;
   631 ;; *************** function _main *****************
   632 ;; Defined at:
   633 ;;		line 23 in file "Main.c"
   634 ;; Parameters:    Size  Location     Type
   635 ;;		None
   636 ;; Auto vars:     Size  Location     Type
   637 ;;		None
   638 ;; Return value:  Size  Location     Type
   639 ;;                  1    wreg      void 
   640 ;; Registers used:
   641 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   642 ;; Tracked objects:
   643 ;;		On entry : 0/0
   644 ;;		On exit  : 0/0
   645 ;;		Unchanged: 0/0
   646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   647 ;;      Params:         0       0       0       0       0       0       0
   648 ;;      Locals:         0       0       0       0       0       0       0
   649 ;;      Temps:          0       0       0       0       0       0       0
   650 ;;      Totals:         0       0       0       0       0       0       0
   651 ;;Total ram usage:        0 bytes
   652 ;; Hardware stack levels required when called:   10
   653 ;; This function calls:
   654 ;;		_ReadFaults
   655 ;;		_SetTime
   656 ;;		_Start
   657 ;;		_updateComms
   658 ;; This function is called by:
   659 ;;		Startup code after reset
   660 ;; This function uses a non-reentrant model
   661 ;;
   662                           
   663                           	psect	text0
   664  001312                     __ptext0:
   665                           	opt stack 0
   666  001312                     _main:
   667                           	opt stack 21
   668                           
   669                           ;Main.c: 24: Start();
   670                           
   671                           ;incstack = 0
   672  001312  EC62  F008         	call	_Start	;wreg free
   673                           
   674                           ;Main.c: 25: LATDbits.LATD4 = 0;
   675  001316  988C               	bcf	3980,4,c	;volatile
   676  001318                     l2791:
   677                           
   678                           ;Main.c: 27: updateComms();
   679  001318  EC1D  F00A         	call	_updateComms	;wreg free
   680                           
   681                           ;Main.c: 28: if(PORTCbits.RC2 == 1){
   682  00131C  A482               	btfss	3970,2,c	;volatile
   683  00131E  D006               	goto	l237
   684                           
   685                           ;Main.c: 29: LATAbits.LATA3 = 1;
   686  001320  8689               	bsf	3977,3,c	;volatile
   687                           
   688                           ;Main.c: 30: ReadFaults();
   689  001322  EC25  F00A         	call	_ReadFaults	;wreg free
   690                           
   691                           ;Main.c: 31: SetTime();
   692  001326  EC0A  F00A         	call	_SetTime	;wreg free
   693                           
   694                           ;Main.c: 32: }
   695  00132A  D7F6               	goto	l2791
   696  00132C                     l237:
   697                           
   698                           ;Main.c: 33: else{
   699                           ;Main.c: 34: LATAbits.LATA3 = 0;
   700  00132C  9689               	bcf	3977,3,c	;volatile
   701  00132E  D7F4               	goto	l2791
   702  001330                     __end_of_main:
   703                           	opt stack 0
   704                           tblptru	equ	0xFF8
   705                           tblptrh	equ	0xFF7
   706                           tblptrl	equ	0xFF6
   707                           tablat	equ	0xFF5
   708                           postinc0	equ	0xFEE
   709                           wreg	equ	0xFE8
   710                           
   711 ;; *************** function _updateComms *****************
   712 ;; Defined at:
   713 ;;		line 17 in file "Communications.c"
   714 ;; Parameters:    Size  Location     Type
   715 ;;		None
   716 ;; Auto vars:     Size  Location     Type
   717 ;;		None
   718 ;; Return value:  Size  Location     Type
   719 ;;                  1    wreg      void 
   720 ;; Registers used:
   721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   722 ;; Tracked objects:
   723 ;;		On entry : 0/0
   724 ;;		On exit  : 0/0
   725 ;;		Unchanged: 0/0
   726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   727 ;;      Params:         0       0       0       0       0       0       0
   728 ;;      Locals:         0       0       0       0       0       0       0
   729 ;;      Temps:          0       0       0       0       0       0       0
   730 ;;      Totals:         0       0       0       0       0       0       0
   731 ;;Total ram usage:        0 bytes
   732 ;; Hardware stack levels used:    1
   733 ;; Hardware stack levels required when called:    9
   734 ;; This function calls:
   735 ;;		_receiveData
   736 ;;		_respondECU
   737 ;; This function is called by:
   738 ;;		_main
   739 ;; This function uses a non-reentrant model
   740 ;;
   741                           
   742                           	psect	text1
   743  00143A                     __ptext1:
   744                           	opt stack 0
   745  00143A                     _updateComms:
   746                           	opt stack 21
   747                           
   748                           ;Communications.c: 18: if (receiveData()) {
   749                           
   750                           ;incstack = 0
   751  00143A  EC52  F000         	call	_receiveData	;wreg free
   752  00143E  0900               	iorlw	0
   753  001440  B4D8               	btfsc	status,2,c
   754  001442  0012               	return	
   755                           
   756                           ;Communications.c: 19: respondECU();
   757  001444  ECD6  F007         	call	_respondECU	;wreg free
   758  001448  0012               	return	
   759  00144A                     __end_of_updateComms:
   760                           	opt stack 0
   761                           tblptru	equ	0xFF8
   762                           tblptrh	equ	0xFF7
   763                           tblptrl	equ	0xFF6
   764                           tablat	equ	0xFF5
   765                           postinc0	equ	0xFEE
   766                           wreg	equ	0xFE8
   767                           status	equ	0xFD8
   768                           
   769 ;; *************** function _respondECU *****************
   770 ;; Defined at:
   771 ;;		line 23 in file "Communications.c"
   772 ;; Parameters:    Size  Location     Type
   773 ;;		None
   774 ;; Auto vars:     Size  Location     Type
   775 ;;		None
   776 ;; Return value:  Size  Location     Type
   777 ;;                  1    wreg      void 
   778 ;; Registers used:
   779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
   780 ;; Tracked objects:
   781 ;;		On entry : 0/0
   782 ;;		On exit  : 0/0
   783 ;;		Unchanged: 0/0
   784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   785 ;;      Params:         0       0       0       0       0       0       0
   786 ;;      Locals:         0       0       0       0       0       0       0
   787 ;;      Temps:          0       1       0       0       0       0       0
   788 ;;      Totals:         0       1       0       0       0       0       0
   789 ;;Total ram usage:        1 bytes
   790 ;; Hardware stack levels used:    1
   791 ;; Hardware stack levels required when called:    8
   792 ;; This function calls:
   793 ;;		_Delay
   794 ;;		_GetFaults
   795 ;;		_ToSend
   796 ;;		_sendData
   797 ;; This function is called by:
   798 ;;		_updateComms
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           	psect	text2
   803  000FAC                     __ptext2:
   804                           	opt stack 0
   805  000FAC                     _respondECU:
   806                           	opt stack 21
   807                           
   808                           ;Communications.c: 24: LATDbits.LATD4 = 1;
   809                           
   810                           ;incstack = 0
   811  000FAC  888C               	bsf	3980,4,c	;volatile
   812                           
   813                           ;Communications.c: 25: ToSend(0,8);
   814  000FAE  0E00               	movlw	0
   815  000FB0  0100               	movlb	0	; () banked
   816  000FB2  6F87               	movwf	(ToSend@what+1)& (0+255),b
   817  000FB4  0E08               	movlw	8
   818  000FB6  6F86               	movwf	ToSend@what& (0+255),b
   819  000FB8  0E00               	movlw	0
   820  000FBA  EC79  F009         	call	_ToSend
   821                           
   822                           ;Communications.c: 26: ToSend(1,GetFaults(1));
   823  000FBE  0E01               	movlw	1
   824  000FC0  ECDE  F009         	call	_GetFaults
   825  000FC4  0100               	movlb	0	; () banked
   826  000FC6  6F8A               	movwf	??_respondECU& (0+255),b
   827  000FC8  0100               	movlb	0	; () banked
   828  000FCA  518A               	movf	??_respondECU& (0+255),w,b
   829  000FCC  0100               	movlb	0	; () banked
   830  000FCE  6F86               	movwf	ToSend@what& (0+255),b
   831  000FD0  6B87               	clrf	(ToSend@what+1)& (0+255),b
   832  000FD2  0E01               	movlw	1
   833  000FD4  EC79  F009         	call	_ToSend
   834                           
   835                           ;Communications.c: 27: ToSend(2,GetFaults(0));
   836  000FD8  0E00               	movlw	0
   837  000FDA  ECDE  F009         	call	_GetFaults
   838  000FDE  0100               	movlb	0	; () banked
   839  000FE0  6F8A               	movwf	??_respondECU& (0+255),b
   840  000FE2  0100               	movlb	0	; () banked
   841  000FE4  518A               	movf	??_respondECU& (0+255),w,b
   842  000FE6  0100               	movlb	0	; () banked
   843  000FE8  6F86               	movwf	ToSend@what& (0+255),b
   844  000FEA  6B87               	clrf	(ToSend@what+1)& (0+255),b
   845  000FEC  0E02               	movlw	2
   846  000FEE  EC79  F009         	call	_ToSend
   847                           
   848                           ;Communications.c: 28: Delay(5);
   849  000FF2  0E00               	movlw	0
   850  000FF4  6E3E               	movwf	Delay@wait+1,c
   851  000FF6  0E05               	movlw	5
   852  000FF8  6E3D               	movwf	Delay@wait,c
   853  000FFA  ECF0  F008         	call	_Delay	;wreg free
   854                           
   855                           ;Communications.c: 29: sendData(1);
   856  000FFE  0E01               	movlw	1
   857  001000  EC46  F004         	call	_sendData
   858                           
   859                           ;Communications.c: 30: Delay(3);
   860  001004  0E00               	movlw	0
   861  001006  6E3E               	movwf	Delay@wait+1,c
   862  001008  0E03               	movlw	3
   863  00100A  6E3D               	movwf	Delay@wait,c
   864  00100C  ECF0  F008         	call	_Delay	;wreg free
   865                           
   866                           ;Communications.c: 31: LATDbits.LATD4 = 0;
   867  001010  988C               	bcf	3980,4,c	;volatile
   868  001012  0012               	return		;funcret
   869  001014                     __end_of_respondECU:
   870                           	opt stack 0
   871                           tblptru	equ	0xFF8
   872                           tblptrh	equ	0xFF7
   873                           tblptrl	equ	0xFF6
   874                           tablat	equ	0xFF5
   875                           postinc0	equ	0xFEE
   876                           wreg	equ	0xFE8
   877                           status	equ	0xFD8
   878                           
   879 ;; *************** function _sendData *****************
   880 ;; Defined at:
   881 ;;		line 108 in file "FastTransfer.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;  whereToSend     1    wreg     unsigned char 
   884 ;; Auto vars:     Size  Location     Type
   885 ;;  whereToSend     1    7[BANK0 ] unsigned char 
   886 ;;  i               2    9[BANK0 ] int 
   887 ;;  CS              1    8[BANK0 ] unsigned char 
   888 ;; Return value:  Size  Location     Type
   889 ;;                  1    wreg      void 
   890 ;; Registers used:
   891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
   892 ;; Tracked objects:
   893 ;;		On entry : 0/0
   894 ;;		On exit  : 0/0
   895 ;;		Unchanged: 0/0
   896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   897 ;;      Params:         0       0       0       0       0       0       0
   898 ;;      Locals:         0       4       0       0       0       0       0
   899 ;;      Temps:          0       1       0       0       0       0       0
   900 ;;      Totals:         0       5       0       0       0       0       0
   901 ;;Total ram usage:        5 bytes
   902 ;; Hardware stack levels used:    1
   903 ;; Hardware stack levels required when called:    7
   904 ;; This function calls:
   905 ;;		Absolute function
   906 ;;		_CRC8
   907 ;;		_FastTransfer_buffer_flush
   908 ;;		_Send_put
   909 ;;		_crcBufS_put
   910 ;; This function is called by:
   911 ;;		_respondECU
   912 ;; This function uses a non-reentrant model
   913 ;;
   914                           
   915                           	psect	text3
   916  00088C                     __ptext3:
   917                           	opt stack 0
   918  00088C                     _sendData:
   919                           	opt stack 21
   920                           
   921                           ;incstack = 0
   922                           ;sendData@whereToSend stored from wreg
   923  00088C  0100               	movlb	0	; () banked
   924  00088E  6F86               	movwf	sendData@whereToSend& (0+255),b
   925                           
   926                           ;FastTransfer.c: 111: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
   927  000890  C00D  F03D         	movff	_sendStructAddress,CRC8@data
   928  000894  C00E  F03E         	movff	_sendStructAddress+1,CRC8@data+1
   929  000898  C1CC  F03F         	movff	_ring_buffer+204,CRC8@len
   930  00089C  EC8D  F008         	call	_CRC8	;wreg free
   931  0008A0  0100               	movlb	0	; () banked
   932  0008A2  6F87               	movwf	sendData@CS& (0+255),b
   933                           
   934                           ; BSR set to: 0
   935                           ;FastTransfer.c: 113: serial_write(0x06);
   936  0008A4  D801               	call	u2358
   937  0008A6  D00B               	goto	l2541
   938  0008A8                     u2358:
   939  0008A8  0005               	push	
   940  0008AA  6EFA               	movwf	pclath,c
   941  0008AC  5015               	movf	_serial_write,w,c
   942  0008AE  6EFD               	movwf	tosl,c
   943  0008B0  5016               	movf	_serial_write+1,w,c
   944  0008B2  6EFE               	movwf	tosh,c
   945  0008B4  50F8               	movf	tblptru,w,c
   946  0008B6  6EFF               	movwf	tosu,c
   947  0008B8  50FA               	movf	pclath,w,c
   948  0008BA  0E06               	movlw	6
   949  0008BC  0012               	return		;indir
   950  0008BE                     l2541:
   951                           
   952                           ;FastTransfer.c: 114: serial_write(0x85);
   953  0008BE  D801               	call	u2368
   954  0008C0  D00B               	goto	l2543
   955  0008C2                     u2368:
   956  0008C2  0005               	push	
   957  0008C4  6EFA               	movwf	pclath,c
   958  0008C6  5015               	movf	_serial_write,w,c
   959  0008C8  6EFD               	movwf	tosl,c
   960  0008CA  5016               	movf	_serial_write+1,w,c
   961  0008CC  6EFE               	movwf	tosh,c
   962  0008CE  50F8               	movf	tblptru,w,c
   963  0008D0  6EFF               	movwf	tosu,c
   964  0008D2  50FA               	movf	pclath,w,c
   965  0008D4  0E85               	movlw	133
   966  0008D6  0012               	return		;indir
   967  0008D8                     l2543:
   968                           
   969                           ;FastTransfer.c: 115: serial_write(whereToSend);
   970  0008D8  D801               	call	u2378
   971  0008DA  D00C               	goto	l2545
   972  0008DC                     u2378:
   973  0008DC  0005               	push	
   974  0008DE  6EFA               	movwf	pclath,c
   975  0008E0  5015               	movf	_serial_write,w,c
   976  0008E2  6EFD               	movwf	tosl,c
   977  0008E4  5016               	movf	_serial_write+1,w,c
   978  0008E6  6EFE               	movwf	tosh,c
   979  0008E8  50F8               	movf	tblptru,w,c
   980  0008EA  6EFF               	movwf	tosu,c
   981  0008EC  50FA               	movf	pclath,w,c
   982  0008EE  0100               	movlb	0	; () banked
   983  0008F0  5186               	movf	sendData@whereToSend& (0+255),w,b
   984  0008F2  0012               	return		;indir
   985  0008F4                     l2545:
   986                           
   987                           ;FastTransfer.c: 116: serial_write(moduleAddress);
   988  0008F4  D801               	call	u2388
   989  0008F6  D00B               	goto	l2547
   990  0008F8                     u2388:
   991  0008F8  0005               	push	
   992  0008FA  6EFA               	movwf	pclath,c
   993  0008FC  5015               	movf	_serial_write,w,c
   994  0008FE  6EFD               	movwf	tosl,c
   995  000900  5016               	movf	_serial_write+1,w,c
   996  000902  6EFE               	movwf	tosh,c
   997  000904  50F8               	movf	tblptru,w,c
   998  000906  6EFF               	movwf	tosu,c
   999  000908  50FA               	movf	pclath,w,c
  1000  00090A  501E               	movf	_moduleAddress,w,c
  1001  00090C  0012               	return		;indir
  1002  00090E                     l2547:
  1003                           
  1004                           ;FastTransfer.c: 117: serial_write(ring_buffer.count);
  1005  00090E  D801               	call	u2398
  1006  000910  D00C               	goto	l2549
  1007  000912                     u2398:
  1008  000912  0005               	push	
  1009  000914  6EFA               	movwf	pclath,c
  1010  000916  5015               	movf	_serial_write,w,c
  1011  000918  6EFD               	movwf	tosl,c
  1012  00091A  5016               	movf	_serial_write+1,w,c
  1013  00091C  6EFE               	movwf	tosh,c
  1014  00091E  50F8               	movf	tblptru,w,c
  1015  000920  6EFF               	movwf	tosu,c
  1016  000922  50FA               	movf	pclath,w,c
  1017  000924  0101               	movlb	1	; () banked
  1018  000926  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1019  000928  0012               	return		;indir
  1020  00092A                     l2549:
  1021                           
  1022                           ;FastTransfer.c: 121: int i;
  1023                           ;FastTransfer.c: 122: for (i = 0; i < ring_buffer.count; i++) {
  1024  00092A  0E00               	movlw	0
  1025  00092C  0100               	movlb	0	; () banked
  1026  00092E  6F89               	movwf	(sendData@i+1)& (0+255),b
  1027  000930  0E00               	movlw	0
  1028  000932  6F88               	movwf	sendData@i& (0+255),b
  1029  000934  D018               	goto	l2555
  1030  000936                     l2551:
  1031                           
  1032                           ; BSR set to: 0
  1033                           ;FastTransfer.c: 123: serial_write(*(sendStructAddress + i));
  1034  000936  D801               	call	u2408
  1035  000938  D013               	goto	l2553
  1036  00093A                     u2408:
  1037  00093A  0005               	push	
  1038  00093C  6EFA               	movwf	pclath,c
  1039  00093E  5015               	movf	_serial_write,w,c
  1040  000940  6EFD               	movwf	tosl,c
  1041  000942  5016               	movf	_serial_write+1,w,c
  1042  000944  6EFE               	movwf	tosh,c
  1043  000946  50F8               	movf	tblptru,w,c
  1044  000948  6EFF               	movwf	tosu,c
  1045  00094A  50FA               	movf	pclath,w,c
  1046  00094C  0100               	movlb	0	; () banked
  1047  00094E  5188               	movf	sendData@i& (0+255),w,b
  1048  000950  240D               	addwf	_sendStructAddress,w,c
  1049  000952  6ED9               	movwf	fsr2l,c
  1050  000954  0100               	movlb	0	; () banked
  1051  000956  5189               	movf	(sendData@i+1)& (0+255),w,b
  1052  000958  200E               	addwfc	_sendStructAddress+1,w,c
  1053  00095A  6EDA               	movwf	fsr2h,c
  1054  00095C  50DF               	movf	indf2,w,c
  1055  00095E  0012               	return		;indir
  1056  000960                     l2553:
  1057  000960  0100               	movlb	0	; () banked
  1058  000962  4B88               	infsnz	sendData@i& (0+255),f,b
  1059  000964  2B89               	incf	(sendData@i+1)& (0+255),f,b
  1060  000966                     l2555:
  1061                           
  1062                           ; BSR set to: 0
  1063  000966  0101               	movlb	1	; () banked
  1064  000968  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1065  00096A  0100               	movlb	0	; () banked
  1066  00096C  5D88               	subwf	sendData@i& (0+255),w,b
  1067  00096E  0100               	movlb	0	; () banked
  1068  000970  5189               	movf	(sendData@i+1)& (0+255),w,b
  1069  000972  0A80               	xorlw	128
  1070  000974  0100               	movlb	0	; () banked
  1071  000976  6F85               	movwf	??_sendData& (0+255),b
  1072  000978  0101               	movlb	1	; () banked
  1073  00097A  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  1074  00097C  0A80               	xorlw	128
  1075  00097E  0100               	movlb	0	; () banked
  1076  000980  5985               	subwfb	??_sendData& (0+255),w,b
  1077  000982  A0D8               	btfss	status,0,c
  1078  000984  D7D8               	goto	l2551
  1079                           
  1080                           ; BSR set to: 0
  1081                           ;FastTransfer.c: 124: }
  1082                           ;FastTransfer.c: 127: serial_write(CS);
  1083                           
  1084                           ; BSR set to: 0
  1085  000986  D801               	call	u2428
  1086  000988  D00C               	goto	l2559
  1087  00098A                     u2428:
  1088  00098A  0005               	push	
  1089  00098C  6EFA               	movwf	pclath,c
  1090  00098E  5015               	movf	_serial_write,w,c
  1091  000990  6EFD               	movwf	tosl,c
  1092  000992  5016               	movf	_serial_write+1,w,c
  1093  000994  6EFE               	movwf	tosh,c
  1094  000996  50F8               	movf	tblptru,w,c
  1095  000998  6EFF               	movwf	tosu,c
  1096  00099A  50FA               	movf	pclath,w,c
  1097  00099C  0100               	movlb	0	; () banked
  1098  00099E  5187               	movf	sendData@CS& (0+255),w,b
  1099  0009A0  0012               	return		;indir
  1100  0009A2                     l2559:
  1101                           
  1102                           ;FastTransfer.c: 130: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1103  0009A2  0E64               	movlw	low _crc_buffer
  1104  0009A4  6E3D               	movwf	crcBufS_put@_this,c
  1105  0009A6  0E00               	movlw	high _crc_buffer
  1106  0009A8  6E3E               	movwf	crcBufS_put@_this+1,c
  1107  0009AA  C086  F03F         	movff	sendData@whereToSend,crcBufS_put@address
  1108  0009AE  C087  F040         	movff	sendData@CS,crcBufS_put@oldCRC
  1109  0009B2  0E00               	movlw	0
  1110  0009B4  6E41               	movwf	crcBufS_put@status,c
  1111  0009B6  EC17  F006         	call	_crcBufS_put
  1112                           
  1113                           ;FastTransfer.c: 133: FastTransfer_buffer_flush(&ring_buffer, 1);
  1114  0009BA  0E00               	movlw	low _ring_buffer
  1115  0009BC  0100               	movlb	0	; () banked
  1116  0009BE  6F81               	movwf	FastTransfer_buffer_flush@_this& (0+255),b
  1117  0009C0  0E01               	movlw	high _ring_buffer
  1118  0009C2  0100               	movlb	0	; () banked
  1119  0009C4  6F82               	movwf	(FastTransfer_buffer_flush@_this+1)& (0+255),b
  1120  0009C6  0E00               	movlw	0
  1121  0009C8  0100               	movlb	0	; () banked
  1122  0009CA  6F84               	movwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),b
  1123  0009CC  0E01               	movlw	1
  1124  0009CE  6F83               	movwf	FastTransfer_buffer_flush@clearBuffer& (0+255),b
  1125  0009D0  EC6C  F007         	call	_FastTransfer_buffer_flush	;wreg free
  1126  0009D4  0012               	return		;funcret
  1127  0009D6                     __end_of_sendData:
  1128                           	opt stack 0
  1129                           tosu	equ	0xFFF
  1130                           tosh	equ	0xFFE
  1131                           tosl	equ	0xFFD
  1132                           pclath	equ	0xFFA
  1133                           tblptru	equ	0xFF8
  1134                           tblptrh	equ	0xFF7
  1135                           tblptrl	equ	0xFF6
  1136                           tablat	equ	0xFF5
  1137                           postinc0	equ	0xFEE
  1138                           wreg	equ	0xFE8
  1139                           indf2	equ	0xFDF
  1140                           fsr2h	equ	0xFDA
  1141                           fsr2l	equ	0xFD9
  1142                           status	equ	0xFD8
  1143                           
  1144 ;; *************** function _crcBufS_put *****************
  1145 ;; Defined at:
  1146 ;;		line 378 in file "FastTransfer.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1149 ;;		 -> crc_buffer(17), 
  1150 ;;  address         1   28[COMRAM] unsigned char 
  1151 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1152 ;;  status          1   30[COMRAM] unsigned char 
  1153 ;; Auto vars:     Size  Location     Type
  1154 ;;		None
  1155 ;; Return value:  Size  Location     Type
  1156 ;;                  1    wreg      void 
  1157 ;; Registers used:
  1158 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1164 ;;      Params:         5       0       0       0       0       0       0
  1165 ;;      Locals:         0       0       0       0       0       0       0
  1166 ;;      Temps:          2       0       0       0       0       0       0
  1167 ;;      Totals:         7       0       0       0       0       0       0
  1168 ;;Total ram usage:        7 bytes
  1169 ;; Hardware stack levels used:    1
  1170 ;; Hardware stack levels required when called:    4
  1171 ;; This function calls:
  1172 ;;		Nothing
  1173 ;; This function is called by:
  1174 ;;		_sendData
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178                           	psect	text4
  1179  000C2E                     __ptext4:
  1180                           	opt stack 0
  1181  000C2E                     _crcBufS_put:
  1182                           	opt stack 23
  1183                           
  1184                           ;FastTransfer.c: 379: _this->buf[_this->head] = address;
  1185                           
  1186                           ;incstack = 0
  1187  000C2E  EE20 F00F          	lfsr	2,15
  1188  000C32  503D               	movf	crcBufS_put@_this,w,c
  1189  000C34  26D9               	addwf	fsr2l,f,c
  1190  000C36  503E               	movf	crcBufS_put@_this+1,w,c
  1191  000C38  22DA               	addwfc	fsr2h,f,c
  1192  000C3A  CFDE F042          	movff	postinc2,??_crcBufS_put
  1193  000C3E  CFDD F043          	movff	postdec2,??_crcBufS_put+1
  1194  000C42  5042               	movf	??_crcBufS_put,w,c
  1195  000C44  243D               	addwf	crcBufS_put@_this,w,c
  1196  000C46  6ED9               	movwf	fsr2l,c
  1197  000C48  5043               	movf	??_crcBufS_put+1,w,c
  1198  000C4A  203E               	addwfc	crcBufS_put@_this+1,w,c
  1199  000C4C  6EDA               	movwf	fsr2h,c
  1200  000C4E  C03F  FFDF         	movff	crcBufS_put@address,indf2
  1201                           
  1202                           ;FastTransfer.c: 380: _this->head++;
  1203  000C52  EE20 F00F          	lfsr	2,15
  1204  000C56  503D               	movf	crcBufS_put@_this,w,c
  1205  000C58  26D9               	addwf	fsr2l,f,c
  1206  000C5A  503E               	movf	crcBufS_put@_this+1,w,c
  1207  000C5C  22DA               	addwfc	fsr2h,f,c
  1208  000C5E  2ADE               	incf	postinc2,f,c
  1209  000C60  0E00               	movlw	0
  1210  000C62  22DD               	addwfc	postdec2,f,c
  1211                           
  1212                           ;FastTransfer.c: 381: _this->buf[_this->head] = oldCRC;
  1213  000C64  EE20 F00F          	lfsr	2,15
  1214  000C68  503D               	movf	crcBufS_put@_this,w,c
  1215  000C6A  26D9               	addwf	fsr2l,f,c
  1216  000C6C  503E               	movf	crcBufS_put@_this+1,w,c
  1217  000C6E  22DA               	addwfc	fsr2h,f,c
  1218  000C70  CFDE F042          	movff	postinc2,??_crcBufS_put
  1219  000C74  CFDD F043          	movff	postdec2,??_crcBufS_put+1
  1220  000C78  5042               	movf	??_crcBufS_put,w,c
  1221  000C7A  243D               	addwf	crcBufS_put@_this,w,c
  1222  000C7C  6ED9               	movwf	fsr2l,c
  1223  000C7E  5043               	movf	??_crcBufS_put+1,w,c
  1224  000C80  203E               	addwfc	crcBufS_put@_this+1,w,c
  1225  000C82  6EDA               	movwf	fsr2h,c
  1226  000C84  C040  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1227                           
  1228                           ;FastTransfer.c: 382: _this->head++;
  1229  000C88  EE20 F00F          	lfsr	2,15
  1230  000C8C  503D               	movf	crcBufS_put@_this,w,c
  1231  000C8E  26D9               	addwf	fsr2l,f,c
  1232  000C90  503E               	movf	crcBufS_put@_this+1,w,c
  1233  000C92  22DA               	addwfc	fsr2h,f,c
  1234  000C94  2ADE               	incf	postinc2,f,c
  1235  000C96  0E00               	movlw	0
  1236  000C98  22DD               	addwfc	postdec2,f,c
  1237                           
  1238                           ;FastTransfer.c: 383: _this->buf[_this->head] = status;
  1239  000C9A  EE20 F00F          	lfsr	2,15
  1240  000C9E  503D               	movf	crcBufS_put@_this,w,c
  1241  000CA0  26D9               	addwf	fsr2l,f,c
  1242  000CA2  503E               	movf	crcBufS_put@_this+1,w,c
  1243  000CA4  22DA               	addwfc	fsr2h,f,c
  1244  000CA6  CFDE F042          	movff	postinc2,??_crcBufS_put
  1245  000CAA  CFDD F043          	movff	postdec2,??_crcBufS_put+1
  1246  000CAE  5042               	movf	??_crcBufS_put,w,c
  1247  000CB0  243D               	addwf	crcBufS_put@_this,w,c
  1248  000CB2  6ED9               	movwf	fsr2l,c
  1249  000CB4  5043               	movf	??_crcBufS_put+1,w,c
  1250  000CB6  203E               	addwfc	crcBufS_put@_this+1,w,c
  1251  000CB8  6EDA               	movwf	fsr2h,c
  1252  000CBA  C041  FFDF         	movff	crcBufS_put@status,indf2
  1253                           
  1254                           ;FastTransfer.c: 384: _this->head++;
  1255  000CBE  EE20 F00F          	lfsr	2,15
  1256  000CC2  503D               	movf	crcBufS_put@_this,w,c
  1257  000CC4  26D9               	addwf	fsr2l,f,c
  1258  000CC6  503E               	movf	crcBufS_put@_this+1,w,c
  1259  000CC8  22DA               	addwfc	fsr2h,f,c
  1260  000CCA  2ADE               	incf	postinc2,f,c
  1261  000CCC  0E00               	movlw	0
  1262  000CCE  22DD               	addwfc	postdec2,f,c
  1263                           
  1264                           ;FastTransfer.c: 385: if (_this->head >= (5 * 3)) {
  1265  000CD0  EE20 F00F          	lfsr	2,15
  1266  000CD4  503D               	movf	crcBufS_put@_this,w,c
  1267  000CD6  26D9               	addwf	fsr2l,f,c
  1268  000CD8  503E               	movf	crcBufS_put@_this+1,w,c
  1269  000CDA  22DA               	addwfc	fsr2h,f,c
  1270  000CDC  0E01               	movlw	1
  1271  000CDE  BEDB               	btfsc	plusw2,7,c
  1272  000CE0  0012               	return	
  1273  000CE2  0E01               	movlw	1
  1274  000CE4  50DB               	movf	plusw2,w,c
  1275  000CE6  E104               	bnz	u2250
  1276  000CE8  0E0F               	movlw	15
  1277  000CEA  5CDE               	subwf	postinc2,w,c
  1278  000CEC  A0D8               	btfss	status,0,c
  1279  000CEE  0012               	return	
  1280  000CF0                     u2250:
  1281                           
  1282                           ;FastTransfer.c: 386: _this->head = 0;
  1283  000CF0  EE20 F00F          	lfsr	2,15
  1284  000CF4  503D               	movf	crcBufS_put@_this,w,c
  1285  000CF6  26D9               	addwf	fsr2l,f,c
  1286  000CF8  503E               	movf	crcBufS_put@_this+1,w,c
  1287  000CFA  22DA               	addwfc	fsr2h,f,c
  1288  000CFC  0E00               	movlw	0
  1289  000CFE  6EDE               	movwf	postinc2,c
  1290  000D00  0E00               	movlw	0
  1291  000D02  6EDD               	movwf	postdec2,c
  1292  000D04  0012               	return	
  1293  000D06                     __end_of_crcBufS_put:
  1294                           	opt stack 0
  1295                           tosu	equ	0xFFF
  1296                           tosh	equ	0xFFE
  1297                           tosl	equ	0xFFD
  1298                           pclath	equ	0xFFA
  1299                           tblptru	equ	0xFF8
  1300                           tblptrh	equ	0xFF7
  1301                           tblptrl	equ	0xFF6
  1302                           tablat	equ	0xFF5
  1303                           postinc0	equ	0xFEE
  1304                           wreg	equ	0xFE8
  1305                           indf2	equ	0xFDF
  1306                           postinc2	equ	0xFDE
  1307                           postdec2	equ	0xFDD
  1308                           plusw2	equ	0xFDB
  1309                           fsr2h	equ	0xFDA
  1310                           fsr2l	equ	0xFD9
  1311                           status	equ	0xFD8
  1312                           
  1313 ;; *************** function _FastTransfer_buffer_flush *****************
  1314 ;; Defined at:
  1315 ;;		line 318 in file "FastTransfer.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;  _this           2    2[BANK0 ] PTR struct ringBufS
  1318 ;;		 -> ring_buffer(206), 
  1319 ;;  clearBuffer     2    4[BANK0 ] const int 
  1320 ;; Auto vars:     Size  Location     Type
  1321 ;;		None
  1322 ;; Return value:  Size  Location     Type
  1323 ;;                  1    wreg      void 
  1324 ;; Registers used:
  1325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1326 ;; Tracked objects:
  1327 ;;		On entry : 0/0
  1328 ;;		On exit  : 0/0
  1329 ;;		Unchanged: 0/0
  1330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1331 ;;      Params:         0       4       0       0       0       0       0
  1332 ;;      Locals:         0       0       0       0       0       0       0
  1333 ;;      Temps:          0       0       0       0       0       0       0
  1334 ;;      Totals:         0       4       0       0       0       0       0
  1335 ;;Total ram usage:        4 bytes
  1336 ;; Hardware stack levels used:    1
  1337 ;; Hardware stack levels required when called:    5
  1338 ;; This function calls:
  1339 ;;		_memset
  1340 ;; This function is called by:
  1341 ;;		_sendData
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text5
  1346  000ED8                     __ptext5:
  1347                           	opt stack 0
  1348  000ED8                     _FastTransfer_buffer_flush:
  1349                           	opt stack 22
  1350                           
  1351                           ;FastTransfer.c: 319: _this->count = 0;
  1352                           
  1353                           ;incstack = 0
  1354  000ED8  0100               	movlb	0	; () banked
  1355  000EDA  EE20 F0CC          	lfsr	2,204
  1356  000EDE  5181               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1357  000EE0  26D9               	addwf	fsr2l,f,c
  1358  000EE2  5182               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1359  000EE4  22DA               	addwfc	fsr2h,f,c
  1360  000EE6  0E00               	movlw	0
  1361  000EE8  6EDE               	movwf	postinc2,c
  1362  000EEA  0E00               	movlw	0
  1363  000EEC  6EDD               	movwf	postdec2,c
  1364                           
  1365                           ;FastTransfer.c: 320: _this->head = 0;
  1366  000EEE  0100               	movlb	0	; () banked
  1367  000EF0  EE20 F0C8          	lfsr	2,200
  1368  000EF4  5181               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1369  000EF6  26D9               	addwf	fsr2l,f,c
  1370  000EF8  5182               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1371  000EFA  22DA               	addwfc	fsr2h,f,c
  1372  000EFC  0E00               	movlw	0
  1373  000EFE  6EDE               	movwf	postinc2,c
  1374  000F00  0E00               	movlw	0
  1375  000F02  6EDD               	movwf	postdec2,c
  1376                           
  1377                           ;FastTransfer.c: 321: _this->tail = 0;
  1378  000F04  0100               	movlb	0	; () banked
  1379  000F06  EE20 F0CA          	lfsr	2,202
  1380  000F0A  5181               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1381  000F0C  26D9               	addwf	fsr2l,f,c
  1382  000F0E  5182               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1383  000F10  22DA               	addwfc	fsr2h,f,c
  1384  000F12  0E00               	movlw	0
  1385  000F14  6EDE               	movwf	postinc2,c
  1386  000F16  0E00               	movlw	0
  1387  000F18  6EDD               	movwf	postdec2,c
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;FastTransfer.c: 322: if (clearBuffer) {
  1391  000F1A  0100               	movlb	0	; () banked
  1392  000F1C  5183               	movf	FastTransfer_buffer_flush@clearBuffer& (0+255),w,b
  1393  000F1E  0100               	movlb	0	; () banked
  1394  000F20  1184               	iorwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),w,b
  1395  000F22  B4D8               	btfsc	status,2,c
  1396  000F24  0012               	return	
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;FastTransfer.c: 323: memset(_this->buf, 0, sizeof (_this->buf));
  1400  000F26  C081  F03D         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1401  000F2A  C082  F03E         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1402  000F2E  0E00               	movlw	0
  1403  000F30  6E40               	movwf	memset@c+1,c
  1404  000F32  0E00               	movlw	0
  1405  000F34  6E3F               	movwf	memset@c,c
  1406  000F36  0E00               	movlw	0
  1407  000F38  6E42               	movwf	memset@n+1,c
  1408  000F3A  0EC8               	movlw	200
  1409  000F3C  6E41               	movwf	memset@n,c
  1410  000F3E  EC23  F009         	call	_memset	;wreg free
  1411  000F42  0012               	return	
  1412  000F44                     __end_of_FastTransfer_buffer_flush:
  1413                           	opt stack 0
  1414                           tosu	equ	0xFFF
  1415                           tosh	equ	0xFFE
  1416                           tosl	equ	0xFFD
  1417                           pclath	equ	0xFFA
  1418                           tblptru	equ	0xFF8
  1419                           tblptrh	equ	0xFF7
  1420                           tblptrl	equ	0xFF6
  1421                           tablat	equ	0xFF5
  1422                           postinc0	equ	0xFEE
  1423                           wreg	equ	0xFE8
  1424                           indf2	equ	0xFDF
  1425                           postinc2	equ	0xFDE
  1426                           postdec2	equ	0xFDD
  1427                           plusw2	equ	0xFDB
  1428                           fsr2h	equ	0xFDA
  1429                           fsr2l	equ	0xFD9
  1430                           status	equ	0xFD8
  1431                           
  1432 ;; *************** function _ToSend *****************
  1433 ;; Defined at:
  1434 ;;		line 273 in file "FastTransfer.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;  where           1    wreg     unsigned char 
  1437 ;;  what            2    7[BANK0 ] unsigned int 
  1438 ;; Auto vars:     Size  Location     Type
  1439 ;;  where           1   32[COMRAM] unsigned char 
  1440 ;; Return value:  Size  Location     Type
  1441 ;;                  1    wreg      void 
  1442 ;; Registers used:
  1443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1444 ;; Tracked objects:
  1445 ;;		On entry : 0/0
  1446 ;;		On exit  : 0/0
  1447 ;;		Unchanged: 0/0
  1448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1449 ;;      Params:         0       2       0       0       0       0       0
  1450 ;;      Locals:         1       0       0       0       0       0       0
  1451 ;;      Temps:          0       0       0       0       0       0       0
  1452 ;;      Totals:         1       2       0       0       0       0       0
  1453 ;;Total ram usage:        3 bytes
  1454 ;; Hardware stack levels used:    1
  1455 ;; Hardware stack levels required when called:    6
  1456 ;; This function calls:
  1457 ;;		_FastTransfer_buffer_put
  1458 ;; This function is called by:
  1459 ;;		_respondECU
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           	psect	text6
  1464  0012F2                     __ptext6:
  1465                           	opt stack 0
  1466  0012F2                     _ToSend:
  1467                           	opt stack 22
  1468                           
  1469                           ;incstack = 0
  1470                           ;ToSend@where stored from wreg
  1471  0012F2  6E43               	movwf	ToSend@where,c
  1472                           
  1473                           ;FastTransfer.c: 274: FastTransfer_buffer_put(&ring_buffer, where, what);
  1474  0012F4  0E00               	movlw	low _ring_buffer
  1475  0012F6  0100               	movlb	0	; () banked
  1476  0012F8  6F7F               	movwf	FastTransfer_buffer_put@_this& (0+255),b
  1477  0012FA  0E01               	movlw	high _ring_buffer
  1478  0012FC  0100               	movlb	0	; () banked
  1479  0012FE  6F80               	movwf	(FastTransfer_buffer_put@_this+1)& (0+255),b
  1480  001300  C043  F081         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  1481  001304  C086  F082         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  1482  001308  C087  F083         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  1483  00130C  EC79  F003         	call	_FastTransfer_buffer_put	;wreg free
  1484  001310  0012               	return		;funcret
  1485  001312                     __end_of_ToSend:
  1486                           	opt stack 0
  1487                           tosu	equ	0xFFF
  1488                           tosh	equ	0xFFE
  1489                           tosl	equ	0xFFD
  1490                           pclath	equ	0xFFA
  1491                           tblptru	equ	0xFF8
  1492                           tblptrh	equ	0xFF7
  1493                           tblptrl	equ	0xFF6
  1494                           tablat	equ	0xFF5
  1495                           postinc0	equ	0xFEE
  1496                           wreg	equ	0xFE8
  1497                           indf2	equ	0xFDF
  1498                           postinc2	equ	0xFDE
  1499                           postdec2	equ	0xFDD
  1500                           plusw2	equ	0xFDB
  1501                           fsr2h	equ	0xFDA
  1502                           fsr2l	equ	0xFD9
  1503                           status	equ	0xFD8
  1504                           
  1505 ;; *************** function _FastTransfer_buffer_put *****************
  1506 ;; Defined at:
  1507 ;;		line 280 in file "FastTransfer.c"
  1508 ;; Parameters:    Size  Location     Type
  1509 ;;  _this           2    0[BANK0 ] PTR struct ringBufS
  1510 ;;		 -> ring_buffer(206), 
  1511 ;;  towhere         1    2[BANK0 ] unsigned char 
  1512 ;;  towhat          2    3[BANK0 ] unsigned int 
  1513 ;; Auto vars:     Size  Location     Type
  1514 ;;		None
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  1    wreg      void 
  1517 ;; Registers used:
  1518 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1524 ;;      Params:         0       5       0       0       0       0       0
  1525 ;;      Locals:         0       0       0       0       0       0       0
  1526 ;;      Temps:          0       2       0       0       0       0       0
  1527 ;;      Totals:         0       7       0       0       0       0       0
  1528 ;;Total ram usage:        7 bytes
  1529 ;; Hardware stack levels used:    1
  1530 ;; Hardware stack levels required when called:    5
  1531 ;; This function calls:
  1532 ;;		_FastTransfer_buffer_modulo_inc
  1533 ;; This function is called by:
  1534 ;;		_ToSend
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           	psect	text7
  1539  0006F2                     __ptext7:
  1540                           	opt stack 0
  1541  0006F2                     _FastTransfer_buffer_put:
  1542                           	opt stack 22
  1543                           
  1544                           ;FastTransfer.c: 282: group.integer = towhat;
  1545                           
  1546                           ;incstack = 0
  1547  0006F2  C082  F009         	movff	FastTransfer_buffer_put@towhat,_group
  1548  0006F6  C083  F00A         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  1549                           
  1550                           ;FastTransfer.c: 284: if (_this->count < (200 - 3)) {
  1551  0006FA  0100               	movlb	0	; () banked
  1552  0006FC  EE20 F0CC          	lfsr	2,204
  1553  000700  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1554  000702  26D9               	addwf	fsr2l,f,c
  1555  000704  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1556  000706  22DA               	addwfc	fsr2h,f,c
  1557  000708  0E01               	movlw	1
  1558  00070A  BEDB               	btfsc	plusw2,7,c
  1559  00070C  D007               	goto	l2439
  1560  00070E  0E01               	movlw	1
  1561  000710  50DB               	movf	plusw2,w,c
  1562  000712  E103               	bnz	u2271
  1563  000714  0EC5               	movlw	197
  1564  000716  5CDE               	subwf	postinc2,w,c
  1565  000718  B0D8               	btfsc	status,0,c
  1566  00071A                     u2271:
  1567  00071A  0012               	return	
  1568  00071C                     l2439:
  1569                           
  1570                           ; BSR set to: 0
  1571                           ;FastTransfer.c: 285: _this->buf[_this->head] = towhere;
  1572  00071C  0100               	movlb	0	; () banked
  1573  00071E  EE20 F0C8          	lfsr	2,200
  1574  000722  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1575  000724  26D9               	addwf	fsr2l,f,c
  1576  000726  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1577  000728  22DA               	addwfc	fsr2h,f,c
  1578  00072A  CFDE F084          	movff	postinc2,??_FastTransfer_buffer_put
  1579  00072E  CFDD F085          	movff	postdec2,??_FastTransfer_buffer_put+1
  1580  000732  0100               	movlb	0	; () banked
  1581  000734  5184               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1582  000736  0100               	movlb	0	; () banked
  1583  000738  257F               	addwf	FastTransfer_buffer_put@_this& (0+255),w,b
  1584  00073A  6ED9               	movwf	fsr2l,c
  1585  00073C  0100               	movlb	0	; () banked
  1586  00073E  5185               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1587  000740  0100               	movlb	0	; () banked
  1588  000742  2180               	addwfc	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1589  000744  6EDA               	movwf	fsr2h,c
  1590  000746  C081  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  1591                           
  1592                           ; BSR set to: 0
  1593                           ;FastTransfer.c: 286: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1594  00074A  0100               	movlb	0	; () banked
  1595  00074C  EE20 F0C8          	lfsr	2,200
  1596  000750  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1597  000752  26D9               	addwf	fsr2l,f,c
  1598  000754  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1599  000756  22DA               	addwfc	fsr2h,f,c
  1600  000758  CFDE F03D          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1601  00075C  CFDD F03E          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1602  000760  0E00               	movlw	0
  1603  000762  6E40               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1604  000764  0EC8               	movlw	200
  1605  000766  6E3F               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1606  000768  EC3A  F009         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1607  00076C  0100               	movlb	0	; () banked
  1608  00076E  EE20 F0C8          	lfsr	2,200
  1609  000772  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1610  000774  26D9               	addwf	fsr2l,f,c
  1611  000776  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1612  000778  22DA               	addwfc	fsr2h,f,c
  1613  00077A  C03D  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1614  00077E  C03E  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1615                           
  1616                           ; BSR set to: 0
  1617                           ;FastTransfer.c: 287: ++_this->count;
  1618  000782  0100               	movlb	0	; () banked
  1619  000784  EE20 F0CC          	lfsr	2,204
  1620  000788  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1621  00078A  26D9               	addwf	fsr2l,f,c
  1622  00078C  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1623  00078E  22DA               	addwfc	fsr2h,f,c
  1624  000790  2ADE               	incf	postinc2,f,c
  1625  000792  0E00               	movlw	0
  1626  000794  22DD               	addwfc	postdec2,f,c
  1627                           
  1628                           ; BSR set to: 0
  1629                           ;FastTransfer.c: 288: _this->buf[_this->head] = group.parts[0];
  1630  000796  0100               	movlb	0	; () banked
  1631  000798  EE20 F0C8          	lfsr	2,200
  1632  00079C  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1633  00079E  26D9               	addwf	fsr2l,f,c
  1634  0007A0  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1635  0007A2  22DA               	addwfc	fsr2h,f,c
  1636  0007A4  CFDE F084          	movff	postinc2,??_FastTransfer_buffer_put
  1637  0007A8  CFDD F085          	movff	postdec2,??_FastTransfer_buffer_put+1
  1638  0007AC  0100               	movlb	0	; () banked
  1639  0007AE  5184               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1640  0007B0  0100               	movlb	0	; () banked
  1641  0007B2  257F               	addwf	FastTransfer_buffer_put@_this& (0+255),w,b
  1642  0007B4  6ED9               	movwf	fsr2l,c
  1643  0007B6  0100               	movlb	0	; () banked
  1644  0007B8  5185               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1645  0007BA  0100               	movlb	0	; () banked
  1646  0007BC  2180               	addwfc	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1647  0007BE  6EDA               	movwf	fsr2h,c
  1648  0007C0  C009  FFDF         	movff	_group,indf2
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;FastTransfer.c: 289: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1652  0007C4  0100               	movlb	0	; () banked
  1653  0007C6  EE20 F0C8          	lfsr	2,200
  1654  0007CA  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1655  0007CC  26D9               	addwf	fsr2l,f,c
  1656  0007CE  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1657  0007D0  22DA               	addwfc	fsr2h,f,c
  1658  0007D2  CFDE F03D          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1659  0007D6  CFDD F03E          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1660  0007DA  0E00               	movlw	0
  1661  0007DC  6E40               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1662  0007DE  0EC8               	movlw	200
  1663  0007E0  6E3F               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1664  0007E2  EC3A  F009         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1665  0007E6  0100               	movlb	0	; () banked
  1666  0007E8  EE20 F0C8          	lfsr	2,200
  1667  0007EC  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1668  0007EE  26D9               	addwf	fsr2l,f,c
  1669  0007F0  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1670  0007F2  22DA               	addwfc	fsr2h,f,c
  1671  0007F4  C03D  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1672  0007F8  C03E  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1673                           
  1674                           ;FastTransfer.c: 290: ++_this->count;
  1675  0007FC  0100               	movlb	0	; () banked
  1676  0007FE  EE20 F0CC          	lfsr	2,204
  1677  000802  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1678  000804  26D9               	addwf	fsr2l,f,c
  1679  000806  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1680  000808  22DA               	addwfc	fsr2h,f,c
  1681  00080A  2ADE               	incf	postinc2,f,c
  1682  00080C  0E00               	movlw	0
  1683  00080E  22DD               	addwfc	postdec2,f,c
  1684                           
  1685                           ;FastTransfer.c: 291: _this->buf[_this->head] = group.parts[1];
  1686  000810  0100               	movlb	0	; () banked
  1687  000812  EE20 F0C8          	lfsr	2,200
  1688  000816  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1689  000818  26D9               	addwf	fsr2l,f,c
  1690  00081A  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1691  00081C  22DA               	addwfc	fsr2h,f,c
  1692  00081E  CFDE F084          	movff	postinc2,??_FastTransfer_buffer_put
  1693  000822  CFDD F085          	movff	postdec2,??_FastTransfer_buffer_put+1
  1694  000826  0100               	movlb	0	; () banked
  1695  000828  5184               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1696  00082A  0100               	movlb	0	; () banked
  1697  00082C  257F               	addwf	FastTransfer_buffer_put@_this& (0+255),w,b
  1698  00082E  6ED9               	movwf	fsr2l,c
  1699  000830  0100               	movlb	0	; () banked
  1700  000832  5185               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1701  000834  0100               	movlb	0	; () banked
  1702  000836  2180               	addwfc	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1703  000838  6EDA               	movwf	fsr2h,c
  1704  00083A  C00A  FFDF         	movff	_group+1,indf2
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;FastTransfer.c: 292: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1708  00083E  0100               	movlb	0	; () banked
  1709  000840  EE20 F0C8          	lfsr	2,200
  1710  000844  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1711  000846  26D9               	addwf	fsr2l,f,c
  1712  000848  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1713  00084A  22DA               	addwfc	fsr2h,f,c
  1714  00084C  CFDE F03D          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1715  000850  CFDD F03E          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1716  000854  0E00               	movlw	0
  1717  000856  6E40               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1718  000858  0EC8               	movlw	200
  1719  00085A  6E3F               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1720  00085C  EC3A  F009         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1721  000860  0100               	movlb	0	; () banked
  1722  000862  EE20 F0C8          	lfsr	2,200
  1723  000866  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1724  000868  26D9               	addwf	fsr2l,f,c
  1725  00086A  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1726  00086C  22DA               	addwfc	fsr2h,f,c
  1727  00086E  C03D  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1728  000872  C03E  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;FastTransfer.c: 293: ++_this->count;
  1732  000876  0100               	movlb	0	; () banked
  1733  000878  EE20 F0CC          	lfsr	2,204
  1734  00087C  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1735  00087E  26D9               	addwf	fsr2l,f,c
  1736  000880  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1737  000882  22DA               	addwfc	fsr2h,f,c
  1738  000884  2ADE               	incf	postinc2,f,c
  1739  000886  0E00               	movlw	0
  1740  000888  22DD               	addwfc	postdec2,f,c
  1741  00088A  0012               	return	
  1742  00088C                     __end_of_FastTransfer_buffer_put:
  1743                           	opt stack 0
  1744                           tosu	equ	0xFFF
  1745                           tosh	equ	0xFFE
  1746                           tosl	equ	0xFFD
  1747                           pclath	equ	0xFFA
  1748                           tblptru	equ	0xFF8
  1749                           tblptrh	equ	0xFF7
  1750                           tblptrl	equ	0xFF6
  1751                           tablat	equ	0xFF5
  1752                           postinc0	equ	0xFEE
  1753                           wreg	equ	0xFE8
  1754                           indf2	equ	0xFDF
  1755                           postinc2	equ	0xFDE
  1756                           postdec2	equ	0xFDD
  1757                           plusw2	equ	0xFDB
  1758                           fsr2h	equ	0xFDA
  1759                           fsr2l	equ	0xFD9
  1760                           status	equ	0xFD8
  1761                           
  1762 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  1763 ;; Defined at:
  1764 ;;		line 330 in file "FastTransfer.c"
  1765 ;; Parameters:    Size  Location     Type
  1766 ;;  value           2   26[COMRAM] const unsigned int 
  1767 ;;  modulus         2   28[COMRAM] const unsigned int 
  1768 ;; Auto vars:     Size  Location     Type
  1769 ;;  my_value        2   30[COMRAM] unsigned int 
  1770 ;; Return value:  Size  Location     Type
  1771 ;;                  2   26[COMRAM] unsigned int 
  1772 ;; Registers used:
  1773 ;;		wreg, status,2, status,0
  1774 ;; Tracked objects:
  1775 ;;		On entry : 0/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1779 ;;      Params:         4       0       0       0       0       0       0
  1780 ;;      Locals:         2       0       0       0       0       0       0
  1781 ;;      Temps:          0       0       0       0       0       0       0
  1782 ;;      Totals:         6       0       0       0       0       0       0
  1783 ;;Total ram usage:        6 bytes
  1784 ;; Hardware stack levels used:    1
  1785 ;; Hardware stack levels required when called:    4
  1786 ;; This function calls:
  1787 ;;		Nothing
  1788 ;; This function is called by:
  1789 ;;		_FastTransfer_buffer_put
  1790 ;;		_FastTransfer_buffer_get
  1791 ;; This function uses a non-reentrant model
  1792 ;;
  1793                           
  1794                           	psect	text8
  1795  001274                     __ptext8:
  1796                           	opt stack 0
  1797  001274                     _FastTransfer_buffer_modulo_inc:
  1798                           	opt stack 22
  1799                           
  1800                           ;FastTransfer.c: 331: unsigned int my_value = value + 1;
  1801                           
  1802                           ; BSR set to: 0
  1803                           ;incstack = 0
  1804  001274  0E01               	movlw	1
  1805  001276  243D               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  1806  001278  6E41               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1807  00127A  0E00               	movlw	0
  1808  00127C  203E               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  1809  00127E  6E42               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1810                           
  1811                           ;FastTransfer.c: 332: if (my_value >= modulus) {
  1812  001280  503F               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  1813  001282  5C41               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  1814  001284  5040               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  1815  001286  5842               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  1816  001288  A0D8               	btfss	status,0,c
  1817  00128A  D004               	goto	l1759
  1818                           
  1819                           ;FastTransfer.c: 333: my_value = 0;
  1820  00128C  0E00               	movlw	0
  1821  00128E  6E42               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1822  001290  0E00               	movlw	0
  1823  001292  6E41               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1824  001294                     l1759:
  1825                           
  1826                           ;FastTransfer.c: 334: }
  1827                           ;FastTransfer.c: 335: return (my_value);
  1828  001294  C041  F03D         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  1829  001298  C042  F03E         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  1830  00129C  0012               	return	
  1831  00129E                     __end_of_FastTransfer_buffer_modulo_inc:
  1832                           	opt stack 0
  1833                           tosu	equ	0xFFF
  1834                           tosh	equ	0xFFE
  1835                           tosl	equ	0xFFD
  1836                           pclath	equ	0xFFA
  1837                           tblptru	equ	0xFF8
  1838                           tblptrh	equ	0xFF7
  1839                           tblptrl	equ	0xFF6
  1840                           tablat	equ	0xFF5
  1841                           postinc0	equ	0xFEE
  1842                           wreg	equ	0xFE8
  1843                           indf2	equ	0xFDF
  1844                           postinc2	equ	0xFDE
  1845                           postdec2	equ	0xFDD
  1846                           plusw2	equ	0xFDB
  1847                           fsr2h	equ	0xFDA
  1848                           fsr2l	equ	0xFD9
  1849                           status	equ	0xFD8
  1850                           
  1851 ;; *************** function _GetFaults *****************
  1852 ;; Defined at:
  1853 ;;		line 41 in file "Function.c"
  1854 ;; Parameters:    Size  Location     Type
  1855 ;;  num             1    wreg     unsigned char 
  1856 ;; Auto vars:     Size  Location     Type
  1857 ;;  num             1   26[COMRAM] unsigned char 
  1858 ;; Return value:  Size  Location     Type
  1859 ;;                  1    wreg      unsigned char 
  1860 ;; Registers used:
  1861 ;;		wreg, status,2, status,0
  1862 ;; Tracked objects:
  1863 ;;		On entry : 0/0
  1864 ;;		On exit  : 0/0
  1865 ;;		Unchanged: 0/0
  1866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1867 ;;      Params:         0       0       0       0       0       0       0
  1868 ;;      Locals:         1       0       0       0       0       0       0
  1869 ;;      Temps:          0       0       0       0       0       0       0
  1870 ;;      Totals:         1       0       0       0       0       0       0
  1871 ;;Total ram usage:        1 bytes
  1872 ;; Hardware stack levels used:    1
  1873 ;; Hardware stack levels required when called:    4
  1874 ;; This function calls:
  1875 ;;		Nothing
  1876 ;; This function is called by:
  1877 ;;		_respondECU
  1878 ;; This function uses a non-reentrant model
  1879 ;;
  1880                           
  1881                           	psect	text9
  1882  0013BC                     __ptext9:
  1883                           	opt stack 0
  1884  0013BC                     _GetFaults:
  1885                           	opt stack 24
  1886                           
  1887                           ;incstack = 0
  1888                           ;GetFaults@num stored from wreg
  1889  0013BC  6E3D               	movwf	GetFaults@num,c
  1890                           
  1891                           ;Function.c: 42: if(num == 1){
  1892  0013BE  043D               	decf	GetFaults@num,w,c
  1893  0013C0  A4D8               	btfss	status,2,c
  1894  0013C2  D002               	goto	l1273
  1895                           
  1896                           ;Function.c: 43: return ByteHigh;
  1897  0013C4  501A               	movf	_ByteHigh,w,c
  1898  0013C6  0012               	return	
  1899  0013C8                     l1273:
  1900                           
  1901                           ;Function.c: 44: }
  1902                           ;Function.c: 45: if(num == 0){
  1903  0013C8  503D               	movf	GetFaults@num,w,c
  1904  0013CA  A4D8               	btfss	status,2,c
  1905  0013CC  0012               	return	
  1906                           
  1907                           ;Function.c: 46: return ByteLow;
  1908  0013CE  501B               	movf	_ByteLow,w,c
  1909  0013D0  0012               	return	
  1910  0013D2                     __end_of_GetFaults:
  1911                           	opt stack 0
  1912                           tosu	equ	0xFFF
  1913                           tosh	equ	0xFFE
  1914                           tosl	equ	0xFFD
  1915                           pclath	equ	0xFFA
  1916                           tblptru	equ	0xFF8
  1917                           tblptrh	equ	0xFF7
  1918                           tblptrl	equ	0xFF6
  1919                           tablat	equ	0xFF5
  1920                           postinc0	equ	0xFEE
  1921                           wreg	equ	0xFE8
  1922                           indf2	equ	0xFDF
  1923                           postinc2	equ	0xFDE
  1924                           postdec2	equ	0xFDD
  1925                           plusw2	equ	0xFDB
  1926                           fsr2h	equ	0xFDA
  1927                           fsr2l	equ	0xFD9
  1928                           status	equ	0xFD8
  1929                           
  1930 ;; *************** function _Delay *****************
  1931 ;; Defined at:
  1932 ;;		line 206 in file "Function.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;  wait            2   26[COMRAM] int 
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;  x               2   29[COMRAM] int 
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      void 
  1939 ;; Registers used:
  1940 ;;		wreg, status,2, status,0
  1941 ;; Tracked objects:
  1942 ;;		On entry : 0/0
  1943 ;;		On exit  : 0/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1946 ;;      Params:         2       0       0       0       0       0       0
  1947 ;;      Locals:         2       0       0       0       0       0       0
  1948 ;;      Temps:          1       0       0       0       0       0       0
  1949 ;;      Totals:         5       0       0       0       0       0       0
  1950 ;;Total ram usage:        5 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:    4
  1953 ;; This function calls:
  1954 ;;		Nothing
  1955 ;; This function is called by:
  1956 ;;		_respondECU
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           	psect	text10
  1961  0011E0                     __ptext10:
  1962                           	opt stack 0
  1963  0011E0                     _Delay:
  1964                           	opt stack 24
  1965                           
  1966                           ;Function.c: 207: int x;
  1967                           ;Function.c: 208: for (x = 0; x < wait; x++) {
  1968                           
  1969                           ;incstack = 0
  1970  0011E0  0E00               	movlw	0
  1971  0011E2  6E41               	movwf	Delay@x+1,c
  1972  0011E4  0E00               	movlw	0
  1973  0011E6  6E40               	movwf	Delay@x,c
  1974  0011E8  D00A               	goto	l460
  1975  0011EA                     l1935:
  1976                           
  1977                           ;Function.c: 209: _delay((unsigned long)((1)*(16000000/4000.0)));
  1978  0011EA  0E06               	movlw	6
  1979  0011EC  6E3F               	movwf	??_Delay& (0+255),c
  1980  0011EE  0E30               	movlw	48
  1981  0011F0                     u3037:
  1982  0011F0  2EE8               	decfsz	wreg,f,c
  1983  0011F2  D7FE               	goto	u3037
  1984  0011F4  2E3F               	decfsz	??_Delay& (0+255),f,c
  1985  0011F6  D7FC               	goto	u3037
  1986  0011F8  D000               	nop2	
  1987  0011FA  4A40               	infsnz	Delay@x,f,c
  1988  0011FC  2A41               	incf	Delay@x+1,f,c
  1989  0011FE                     l460:
  1990  0011FE  503D               	movf	Delay@wait,w,c
  1991  001200  5C40               	subwf	Delay@x,w,c
  1992  001202  5041               	movf	Delay@x+1,w,c
  1993  001204  0A80               	xorlw	128
  1994  001206  6E3F               	movwf	??_Delay& (0+255),c
  1995  001208  503E               	movf	Delay@wait+1,w,c
  1996  00120A  0A80               	xorlw	128
  1997  00120C  583F               	subwfb	??_Delay& (0+255),w,c
  1998  00120E  B0D8               	btfsc	status,0,c
  1999  001210  0012               	return	
  2000  001212  D7EB               	goto	l1935
  2001  001214                     __end_of_Delay:
  2002                           	opt stack 0
  2003                           tosu	equ	0xFFF
  2004                           tosh	equ	0xFFE
  2005                           tosl	equ	0xFFD
  2006                           pclath	equ	0xFFA
  2007                           tblptru	equ	0xFF8
  2008                           tblptrh	equ	0xFF7
  2009                           tblptrl	equ	0xFF6
  2010                           tablat	equ	0xFF5
  2011                           postinc0	equ	0xFEE
  2012                           wreg	equ	0xFE8
  2013                           indf2	equ	0xFDF
  2014                           postinc2	equ	0xFDE
  2015                           postdec2	equ	0xFDD
  2016                           plusw2	equ	0xFDB
  2017                           fsr2h	equ	0xFDA
  2018                           fsr2l	equ	0xFD9
  2019                           status	equ	0xFD8
  2020                           
  2021 ;; *************** function _receiveData *****************
  2022 ;; Defined at:
  2023 ;;		line 137 in file "FastTransfer.c"
  2024 ;; Parameters:    Size  Location     Type
  2025 ;;		None
  2026 ;; Auto vars:     Size  Location     Type
  2027 ;;  holder          3   15[BANK0 ] unsigned char [3]
  2028 ;;  crcHolder       1   19[BANK0 ] unsigned char 
  2029 ;;  holder          3   12[BANK0 ] unsigned char [3]
  2030 ;;  crcHolder       1   18[BANK0 ] unsigned char 
  2031 ;;  u               2   20[BANK0 ] int 
  2032 ;;  r               2   22[BANK0 ] int 
  2033 ;; Return value:  Size  Location     Type
  2034 ;;                  1    wreg      unsigned char 
  2035 ;; Registers used:
  2036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2037 ;; Tracked objects:
  2038 ;;		On entry : 0/0
  2039 ;;		On exit  : 0/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2042 ;;      Params:         0       0       0       0       0       0       0
  2043 ;;      Locals:         0      12       0       0       0       0       0
  2044 ;;      Temps:          0       6       0       0       0       0       0
  2045 ;;      Totals:         0      18       0       0       0       0       0
  2046 ;;Total ram usage:       18 bytes
  2047 ;; Hardware stack levels used:    1
  2048 ;; Hardware stack levels required when called:    7
  2049 ;; This function calls:
  2050 ;;		Absolute function
  2051 ;;		_CRC8
  2052 ;;		_Receive_available
  2053 ;;		_Receive_get
  2054 ;;		_Send_put
  2055 ;; This function is called by:
  2056 ;;		_updateComms
  2057 ;; This function uses a non-reentrant model
  2058 ;;
  2059                           
  2060                           	psect	text11
  2061  0000A4                     __ptext11:
  2062                           	opt stack 0
  2063  0000A4                     _receiveData:
  2064                           	opt stack 22
  2065                           
  2066                           ;FastTransfer.c: 140: if (rx_len == 0) {
  2067                           
  2068                           ;incstack = 0
  2069  0000A4  5022               	movf	_rx_len,w,c
  2070  0000A6  A4D8               	btfss	status,2,c
  2071  0000A8  D0AA               	goto	l2613
  2072                           
  2073                           ;FastTransfer.c: 142: if (serial_available() > 4) {
  2074  0000AA  D801               	call	u2448
  2075  0000AC  D00A               	goto	u2449
  2076  0000AE                     u2448:
  2077  0000AE  0005               	push	
  2078  0000B0  6EFA               	movwf	pclath,c
  2079  0000B2  500F               	movf	_serial_available,w,c
  2080  0000B4  6EFD               	movwf	tosl,c
  2081  0000B6  5010               	movf	_serial_available+1,w,c
  2082  0000B8  6EFE               	movwf	tosh,c
  2083  0000BA  50F8               	movf	tblptru,w,c
  2084  0000BC  6EFF               	movwf	tosu,c
  2085  0000BE  50FA               	movf	pclath,w,c
  2086  0000C0  0012               	return		;indir
  2087  0000C2                     u2449:
  2088  0000C2  BE40               	btfsc	?_Receive_available+1,7,c
  2089  0000C4  D09C               	goto	l2613
  2090  0000C6  5040               	movf	?_Receive_available+1,w,c
  2091  0000C8  E11D               	bnz	l2589
  2092  0000CA  0E05               	movlw	5
  2093  0000CC  5C3F               	subwf	?_Receive_available,w,c
  2094  0000CE  B0D8               	btfsc	status,0,c
  2095  0000D0  D019               	goto	l2589
  2096  0000D2  D095               	goto	l2613
  2097  0000D4                     l2581:
  2098                           
  2099                           ;FastTransfer.c: 148: alignErrorCounter++;
  2100  0000D4  4A03               	infsnz	_alignErrorCounter,f,c
  2101  0000D6  2A04               	incf	_alignErrorCounter+1,f,c
  2102                           
  2103                           ;FastTransfer.c: 149: if (serial_available() < 5)
  2104  0000D8  D801               	call	u2468
  2105  0000DA  D00A               	goto	u2469
  2106  0000DC                     u2468:
  2107  0000DC  0005               	push	
  2108  0000DE  6EFA               	movwf	pclath,c
  2109  0000E0  500F               	movf	_serial_available,w,c
  2110  0000E2  6EFD               	movwf	tosl,c
  2111  0000E4  5010               	movf	_serial_available+1,w,c
  2112  0000E6  6EFE               	movwf	tosh,c
  2113  0000E8  50F8               	movf	tblptru,w,c
  2114  0000EA  6EFF               	movwf	tosu,c
  2115  0000EC  50FA               	movf	pclath,w,c
  2116  0000EE  0012               	return		;indir
  2117  0000F0                     u2469:
  2118  0000F0  BE40               	btfsc	?_Receive_available+1,7,c
  2119  0000F2  D006               	goto	l2585
  2120  0000F4  5040               	movf	?_Receive_available+1,w,c
  2121  0000F6  E106               	bnz	l2589
  2122  0000F8  0E05               	movlw	5
  2123  0000FA  5C3F               	subwf	?_Receive_available,w,c
  2124  0000FC  B0D8               	btfsc	status,0,c
  2125  0000FE  D002               	goto	l2589
  2126  000100                     l2585:
  2127                           
  2128                           ;FastTransfer.c: 150: return 0;
  2129  000100  0E00               	movlw	0
  2130  000102  0012               	return	
  2131  000104                     l2589:
  2132  000104  D801               	call	u2488
  2133  000106  D00A               	goto	u2489
  2134  000108                     u2488:
  2135  000108  0005               	push	
  2136  00010A  6EFA               	movwf	pclath,c
  2137  00010C  5013               	movf	_serial_read,w,c
  2138  00010E  6EFD               	movwf	tosl,c
  2139  000110  5014               	movf	_serial_read+1,w,c
  2140  000112  6EFE               	movwf	tosh,c
  2141  000114  50F8               	movf	tblptru,w,c
  2142  000116  6EFF               	movwf	tosu,c
  2143  000118  50FA               	movf	pclath,w,c
  2144  00011A  0012               	return		;indir
  2145  00011C                     u2489:
  2146  00011C  0A06               	xorlw	6
  2147  00011E  A4D8               	btfss	status,2,c
  2148  000120  D7D9               	goto	l2581
  2149                           
  2150                           ;FastTransfer.c: 151: }
  2151                           ;FastTransfer.c: 152: if (serial_read() == 0x85) {
  2152  000122  D801               	call	u2508
  2153  000124  D00A               	goto	u2509
  2154  000126                     u2508:
  2155  000126  0005               	push	
  2156  000128  6EFA               	movwf	pclath,c
  2157  00012A  5013               	movf	_serial_read,w,c
  2158  00012C  6EFD               	movwf	tosl,c
  2159  00012E  5014               	movf	_serial_read+1,w,c
  2160  000130  6EFE               	movwf	tosh,c
  2161  000132  50F8               	movf	tblptru,w,c
  2162  000134  6EFF               	movwf	tosu,c
  2163  000136  50FA               	movf	pclath,w,c
  2164  000138  0012               	return		;indir
  2165  00013A                     u2509:
  2166  00013A  0A85               	xorlw	133
  2167  00013C  A4D8               	btfss	status,2,c
  2168  00013E  D05F               	goto	l2613
  2169                           
  2170                           ;FastTransfer.c: 154: rx_address = serial_read();
  2171  000140  D801               	call	u2528
  2172  000142  D00A               	goto	u2529
  2173  000144                     u2528:
  2174  000144  0005               	push	
  2175  000146  6EFA               	movwf	pclath,c
  2176  000148  5013               	movf	_serial_read,w,c
  2177  00014A  6EFD               	movwf	tosl,c
  2178  00014C  5014               	movf	_serial_read+1,w,c
  2179  00014E  6EFE               	movwf	tosh,c
  2180  000150  50F8               	movf	tblptru,w,c
  2181  000152  6EFF               	movwf	tosu,c
  2182  000154  50FA               	movf	pclath,w,c
  2183  000156  0012               	return		;indir
  2184  000158                     u2529:
  2185  000158  6E20               	movwf	_rx_address,c
  2186                           
  2187                           ;FastTransfer.c: 155: returnAddress = serial_read();
  2188  00015A  D801               	call	u2538
  2189  00015C  D00A               	goto	u2539
  2190  00015E                     u2538:
  2191  00015E  0005               	push	
  2192  000160  6EFA               	movwf	pclath,c
  2193  000162  5013               	movf	_serial_read,w,c
  2194  000164  6EFD               	movwf	tosl,c
  2195  000166  5014               	movf	_serial_read+1,w,c
  2196  000168  6EFE               	movwf	tosh,c
  2197  00016A  50F8               	movf	tblptru,w,c
  2198  00016C  6EFF               	movwf	tosu,c
  2199  00016E  50FA               	movf	pclath,w,c
  2200  000170  0012               	return		;indir
  2201  000172                     u2539:
  2202  000172  6E1F               	movwf	_returnAddress,c
  2203                           
  2204                           ;FastTransfer.c: 156: rx_len = serial_read();
  2205  000174  D801               	call	u2548
  2206  000176  D00A               	goto	u2549
  2207  000178                     u2548:
  2208  000178  0005               	push	
  2209  00017A  6EFA               	movwf	pclath,c
  2210  00017C  5013               	movf	_serial_read,w,c
  2211  00017E  6EFD               	movwf	tosl,c
  2212  000180  5014               	movf	_serial_read+1,w,c
  2213  000182  6EFE               	movwf	tosh,c
  2214  000184  50F8               	movf	tblptru,w,c
  2215  000186  6EFF               	movwf	tosu,c
  2216  000188  50FA               	movf	pclath,w,c
  2217  00018A  0012               	return		;indir
  2218  00018C                     u2549:
  2219  00018C  6E22               	movwf	_rx_len,c
  2220                           
  2221                           ;FastTransfer.c: 158: if (rx_address != moduleAddress) {
  2222  00018E  501E               	movf	_moduleAddress,w,c
  2223  000190  1820               	xorwf	_rx_address,w,c
  2224  000192  B4D8               	btfsc	status,2,c
  2225  000194  D034               	goto	l2613
  2226                           
  2227                           ;FastTransfer.c: 159: addressErrorCounter++;
  2228  000196  4A01               	infsnz	_addressErrorCounter,f,c
  2229  000198  2A02               	incf	_addressErrorCounter+1,f,c
  2230                           
  2231                           ;FastTransfer.c: 162: int u;
  2232                           ;FastTransfer.c: 163: for (u = 0; u <= (rx_len + 1); u++) {
  2233  00019A  0E00               	movlw	0
  2234  00019C  0100               	movlb	0	; () banked
  2235  00019E  6F94               	movwf	(receiveData@u+1)& (0+255),b
  2236  0001A0  0E00               	movlw	0
  2237  0001A2  6F93               	movwf	receiveData@u& (0+255),b
  2238  0001A4  D00F               	goto	l2605
  2239  0001A6                     l2601:
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;FastTransfer.c: 164: serial_read();
  2243  0001A6  D801               	call	u2568
  2244  0001A8  D00A               	goto	l2603
  2245  0001AA                     u2568:
  2246  0001AA  0005               	push	
  2247  0001AC  6EFA               	movwf	pclath,c
  2248  0001AE  5013               	movf	_serial_read,w,c
  2249  0001B0  6EFD               	movwf	tosl,c
  2250  0001B2  5014               	movf	_serial_read+1,w,c
  2251  0001B4  6EFE               	movwf	tosh,c
  2252  0001B6  50F8               	movf	tblptru,w,c
  2253  0001B8  6EFF               	movwf	tosu,c
  2254  0001BA  50FA               	movf	pclath,w,c
  2255  0001BC  0012               	return		;indir
  2256  0001BE                     l2603:
  2257  0001BE  0100               	movlb	0	; () banked
  2258  0001C0  4B93               	infsnz	receiveData@u& (0+255),f,b
  2259  0001C2  2B94               	incf	(receiveData@u+1)& (0+255),f,b
  2260  0001C4                     l2605:
  2261                           
  2262                           ; BSR set to: 0
  2263  0001C4  5022               	movf	_rx_len,w,c
  2264  0001C6  0100               	movlb	0	; () banked
  2265  0001C8  6F85               	movwf	??_receiveData& (0+255),b
  2266  0001CA  6B86               	clrf	(??_receiveData+1)& (0+255),b
  2267  0001CC  0E01               	movlw	1
  2268  0001CE  0100               	movlb	0	; () banked
  2269  0001D0  2785               	addwf	??_receiveData& (0+255),f,b
  2270  0001D2  0E00               	movlw	0
  2271  0001D4  2386               	addwfc	(??_receiveData+1)& (0+255),f,b
  2272  0001D6  0100               	movlb	0	; () banked
  2273  0001D8  5193               	movf	receiveData@u& (0+255),w,b
  2274  0001DA  0100               	movlb	0	; () banked
  2275  0001DC  5D85               	subwf	??_receiveData& (0+255),w,b
  2276  0001DE  0100               	movlb	0	; () banked
  2277  0001E0  5186               	movf	(??_receiveData+1)& (0+255),w,b
  2278  0001E2  0A80               	xorlw	128
  2279  0001E4  0100               	movlb	0	; () banked
  2280  0001E6  6F87               	movwf	(??_receiveData+2)& (0+255),b
  2281  0001E8  0100               	movlb	0	; () banked
  2282  0001EA  5194               	movf	(receiveData@u+1)& (0+255),w,b
  2283  0001EC  0A80               	xorlw	128
  2284  0001EE  0100               	movlb	0	; () banked
  2285  0001F0  5987               	subwfb	(??_receiveData+2)& (0+255),w,b
  2286  0001F2  B0D8               	btfsc	status,0,c
  2287  0001F4  D7D8               	goto	l2601
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;FastTransfer.c: 165: }
  2291                           ;FastTransfer.c: 166: rx_len = 0;
  2292                           
  2293                           ; BSR set to: 0
  2294  0001F6  0E00               	movlw	0
  2295  0001F8  6E22               	movwf	_rx_len,c
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;FastTransfer.c: 167: return 0;
  2299  0001FA  0E00               	movlw	0
  2300                           
  2301                           ; BSR set to: 0
  2302  0001FC  0012               	return	
  2303  0001FE                     l2613:
  2304                           
  2305                           ;FastTransfer.c: 168: }
  2306                           ;FastTransfer.c: 170: }
  2307                           ;FastTransfer.c: 171: }
  2308                           ;FastTransfer.c: 172: }
  2309                           ;FastTransfer.c: 175: if (rx_len != 0) {
  2310  0001FE  5022               	movf	_rx_len,w,c
  2311  000200  A4D8               	btfss	status,2,c
  2312  000202  D01A               	goto	l2621
  2313  000204  D274               	goto	l2721
  2314  000206                     l2617:
  2315                           
  2316                           ;FastTransfer.c: 191: rx_buffer[rx_array_inx++] = serial_read();
  2317  000206  D801               	call	u2598
  2318  000208  D00A               	goto	u2599
  2319  00020A                     u2598:
  2320  00020A  0005               	push	
  2321  00020C  6EFA               	movwf	pclath,c
  2322  00020E  5013               	movf	_serial_read,w,c
  2323  000210  6EFD               	movwf	tosl,c
  2324  000212  5014               	movf	_serial_read+1,w,c
  2325  000214  6EFE               	movwf	tosh,c
  2326  000216  50F8               	movf	tblptru,w,c
  2327  000218  6EFF               	movwf	tosu,c
  2328  00021A  50FA               	movf	pclath,w,c
  2329  00021C  0012               	return		;indir
  2330  00021E                     u2599:
  2331  00021E  0100               	movlb	0	; () banked
  2332  000220  6F85               	movwf	??_receiveData& (0+255),b
  2333  000222  5021               	movf	_rx_array_inx,w,c
  2334  000224  0D01               	mullw	1
  2335  000226  0E00               	movlw	low _rx_buffer
  2336  000228  24F3               	addwf	prodl,w,c
  2337  00022A  6ED9               	movwf	fsr2l,c
  2338  00022C  0E02               	movlw	high _rx_buffer
  2339  00022E  20F4               	addwfc	prodh,w,c
  2340  000230  6EDA               	movwf	fsr2h,c
  2341  000232  C085  FFDF         	movff	??_receiveData,indf2
  2342                           
  2343                           ; BSR set to: 0
  2344  000236  2A21               	incf	_rx_array_inx,f,c
  2345  000238                     l2621:
  2346  000238  D801               	call	u2608
  2347  00023A  D00A               	goto	u2609
  2348  00023C                     u2608:
  2349  00023C  0005               	push	
  2350  00023E  6EFA               	movwf	pclath,c
  2351  000240  500F               	movf	_serial_available,w,c
  2352  000242  6EFD               	movwf	tosl,c
  2353  000244  5010               	movf	_serial_available+1,w,c
  2354  000246  6EFE               	movwf	tosh,c
  2355  000248  50F8               	movf	tblptru,w,c
  2356  00024A  6EFF               	movwf	tosu,c
  2357  00024C  50FA               	movf	pclath,w,c
  2358  00024E  0012               	return		;indir
  2359  000250                     u2609:
  2360  000250  503F               	movf	?_Receive_available,w,c
  2361  000252  1040               	iorwf	?_Receive_available+1,w,c
  2362  000254  B4D8               	btfsc	status,2,c
  2363  000256  D004               	goto	l2625
  2364  000258  5021               	movf	_rx_array_inx,w,c
  2365  00025A  5C22               	subwf	_rx_len,w,c
  2366  00025C  B0D8               	btfsc	status,0,c
  2367  00025E  D7D3               	goto	l2617
  2368  000260                     l2625:
  2369                           
  2370                           ;FastTransfer.c: 192: }
  2371                           ;FastTransfer.c: 194: if (rx_len == (rx_array_inx - 1)) {
  2372  000260  5022               	movf	_rx_len,w,c
  2373  000262  0100               	movlb	0	; () banked
  2374  000264  6F85               	movwf	??_receiveData& (0+255),b
  2375  000266  6B86               	clrf	(??_receiveData+1)& (0+255),b
  2376  000268  0EFF               	movlw	255
  2377  00026A  0100               	movlb	0	; () banked
  2378  00026C  6F87               	movwf	(??_receiveData+2)& (0+255),b
  2379  00026E  0EFF               	movlw	255
  2380  000270  0100               	movlb	0	; () banked
  2381  000272  6F88               	movwf	(??_receiveData+3)& (0+255),b
  2382  000274  5021               	movf	_rx_array_inx,w,c
  2383  000276  0100               	movlb	0	; () banked
  2384  000278  6F89               	movwf	(??_receiveData+4)& (0+255),b
  2385  00027A  6B8A               	clrf	(??_receiveData+5)& (0+255),b
  2386  00027C  0100               	movlb	0	; () banked
  2387  00027E  5187               	movf	(??_receiveData+2)& (0+255),w,b
  2388  000280  0100               	movlb	0	; () banked
  2389  000282  2789               	addwf	(??_receiveData+4)& (0+255),f,b
  2390  000284  0100               	movlb	0	; () banked
  2391  000286  5188               	movf	(??_receiveData+3)& (0+255),w,b
  2392  000288  0100               	movlb	0	; () banked
  2393  00028A  238A               	addwfc	(??_receiveData+5)& (0+255),f,b
  2394  00028C  0100               	movlb	0	; () banked
  2395  00028E  5185               	movf	??_receiveData& (0+255),w,b
  2396  000290  0100               	movlb	0	; () banked
  2397  000292  1989               	xorwf	(??_receiveData+4)& (0+255),w,b
  2398  000294  E105               	bnz	u2631
  2399  000296  0100               	movlb	0	; () banked
  2400  000298  5186               	movf	(??_receiveData+1)& (0+255),w,b
  2401  00029A  0100               	movlb	0	; () banked
  2402  00029C  198A               	xorwf	(??_receiveData+5)& (0+255),w,b
  2403  00029E  A4D8               	btfss	status,2,c
  2404  0002A0                     u2631:
  2405  0002A0  D226               	goto	l2721
  2406                           
  2407                           ; BSR set to: 0
  2408                           ;FastTransfer.c: 197: calc_CS = CRC8(rx_buffer, rx_len);
  2409  0002A2  0E00               	movlw	low _rx_buffer
  2410  0002A4  6E3D               	movwf	CRC8@data,c
  2411  0002A6  0E02               	movlw	high _rx_buffer
  2412  0002A8  6E3E               	movwf	CRC8@data+1,c
  2413  0002AA  C022  F03F         	movff	_rx_len,CRC8@len
  2414  0002AE  EC8D  F008         	call	_CRC8	;wreg free
  2415  0002B2  6E1C               	movwf	_calc_CS,c
  2416                           
  2417                           ;FastTransfer.c: 201: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2418  0002B4  0EFF               	movlw	255
  2419  0002B6  0100               	movlb	0	; () banked
  2420  0002B8  6F85               	movwf	??_receiveData& (0+255),b
  2421  0002BA  0EFF               	movlw	255
  2422  0002BC  0100               	movlb	0	; () banked
  2423  0002BE  6F86               	movwf	(??_receiveData+1)& (0+255),b
  2424  0002C0  5021               	movf	_rx_array_inx,w,c
  2425  0002C2  0100               	movlb	0	; () banked
  2426  0002C4  6F87               	movwf	(??_receiveData+2)& (0+255),b
  2427  0002C6  6B88               	clrf	(??_receiveData+3)& (0+255),b
  2428  0002C8  0100               	movlb	0	; () banked
  2429  0002CA  5185               	movf	??_receiveData& (0+255),w,b
  2430  0002CC  0100               	movlb	0	; () banked
  2431  0002CE  2787               	addwf	(??_receiveData+2)& (0+255),f,b
  2432  0002D0  0100               	movlb	0	; () banked
  2433  0002D2  5186               	movf	(??_receiveData+1)& (0+255),w,b
  2434  0002D4  0100               	movlb	0	; () banked
  2435  0002D6  2388               	addwfc	(??_receiveData+3)& (0+255),f,b
  2436  0002D8  0E00               	movlw	low _rx_buffer
  2437  0002DA  0100               	movlb	0	; () banked
  2438  0002DC  2587               	addwf	(??_receiveData+2)& (0+255),w,b
  2439  0002DE  6ED9               	movwf	fsr2l,c
  2440  0002E0  0E02               	movlw	high _rx_buffer
  2441  0002E2  0100               	movlb	0	; () banked
  2442  0002E4  2188               	addwfc	(??_receiveData+3)& (0+255),w,b
  2443  0002E6  6EDA               	movwf	fsr2h,c
  2444  0002E8  501C               	movf	_calc_CS,w,c
  2445  0002EA  18DE               	xorwf	postinc2,w,c
  2446  0002EC  A4D8               	btfss	status,2,c
  2447  0002EE  D138               	goto	l2683
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;FastTransfer.c: 204: int r;
  2451                           ;FastTransfer.c: 205: for (r = 0; r < rx_len; r = r + 3) {
  2452  0002F0  0E00               	movlw	0
  2453  0002F2  0100               	movlb	0	; () banked
  2454  0002F4  6F96               	movwf	(receiveData@r+1)& (0+255),b
  2455  0002F6  0E00               	movlw	0
  2456  0002F8  6F95               	movwf	receiveData@r& (0+255),b
  2457  0002FA  D059               	goto	l2643
  2458  0002FC                     l2633:
  2459                           
  2460                           ; BSR set to: 0
  2461                           ;FastTransfer.c: 206: if (rx_buffer[r] < maxDataAddress) {
  2462  0002FC  0E00               	movlw	low _rx_buffer
  2463  0002FE  0100               	movlb	0	; () banked
  2464  000300  2595               	addwf	receiveData@r& (0+255),w,b
  2465  000302  6ED9               	movwf	fsr2l,c
  2466  000304  0E02               	movlw	high _rx_buffer
  2467  000306  0100               	movlb	0	; () banked
  2468  000308  2196               	addwfc	(receiveData@r+1)& (0+255),w,b
  2469  00030A  6EDA               	movwf	fsr2h,c
  2470  00030C  501D               	movf	_maxDataAddress,w,c
  2471  00030E  5CDE               	subwf	postinc2,w,c
  2472  000310  B0D8               	btfsc	status,0,c
  2473  000312  D041               	goto	l2639
  2474                           
  2475                           ; BSR set to: 0
  2476                           ;FastTransfer.c: 207: group.parts[0] = rx_buffer[r + 1];
  2477  000314  0E01               	movlw	1
  2478  000316  0100               	movlb	0	; () banked
  2479  000318  2595               	addwf	receiveData@r& (0+255),w,b
  2480  00031A  0100               	movlb	0	; () banked
  2481  00031C  6F85               	movwf	??_receiveData& (0+255),b
  2482  00031E  0E00               	movlw	0
  2483  000320  0100               	movlb	0	; () banked
  2484  000322  2196               	addwfc	(receiveData@r+1)& (0+255),w,b
  2485  000324  0100               	movlb	0	; () banked
  2486  000326  6F86               	movwf	(??_receiveData+1)& (0+255),b
  2487  000328  0E00               	movlw	low _rx_buffer
  2488  00032A  0100               	movlb	0	; () banked
  2489  00032C  2585               	addwf	??_receiveData& (0+255),w,b
  2490  00032E  6ED9               	movwf	fsr2l,c
  2491  000330  0E02               	movlw	high _rx_buffer
  2492  000332  0100               	movlb	0	; () banked
  2493  000334  2186               	addwfc	(??_receiveData+1)& (0+255),w,b
  2494  000336  6EDA               	movwf	fsr2h,c
  2495  000338  50DF               	movf	indf2,w,c
  2496  00033A  6E09               	movwf	_group,c
  2497                           
  2498                           ;FastTransfer.c: 208: group.parts[1] = rx_buffer[r + 2];
  2499  00033C  0E02               	movlw	2
  2500  00033E  0100               	movlb	0	; () banked
  2501  000340  2595               	addwf	receiveData@r& (0+255),w,b
  2502  000342  0100               	movlb	0	; () banked
  2503  000344  6F85               	movwf	??_receiveData& (0+255),b
  2504  000346  0E00               	movlw	0
  2505  000348  0100               	movlb	0	; () banked
  2506  00034A  2196               	addwfc	(receiveData@r+1)& (0+255),w,b
  2507  00034C  0100               	movlb	0	; () banked
  2508  00034E  6F86               	movwf	(??_receiveData+1)& (0+255),b
  2509  000350  0E00               	movlw	low _rx_buffer
  2510  000352  0100               	movlb	0	; () banked
  2511  000354  2585               	addwf	??_receiveData& (0+255),w,b
  2512  000356  6ED9               	movwf	fsr2l,c
  2513  000358  0E02               	movlw	high _rx_buffer
  2514  00035A  0100               	movlb	0	; () banked
  2515  00035C  2186               	addwfc	(??_receiveData+1)& (0+255),w,b
  2516  00035E  6EDA               	movwf	fsr2h,c
  2517  000360  50DF               	movf	indf2,w,c
  2518  000362  6E0A               	movwf	_group+1,c
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;FastTransfer.c: 209: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2522  000364  0E00               	movlw	low _rx_buffer
  2523  000366  0100               	movlb	0	; () banked
  2524  000368  2595               	addwf	receiveData@r& (0+255),w,b
  2525  00036A  6ED9               	movwf	fsr2l,c
  2526  00036C  0E02               	movlw	high _rx_buffer
  2527  00036E  0100               	movlb	0	; () banked
  2528  000370  2196               	addwfc	(receiveData@r+1)& (0+255),w,b
  2529  000372  6EDA               	movwf	fsr2h,c
  2530  000374  50DF               	movf	indf2,w,c
  2531  000376  0100               	movlb	0	; () banked
  2532  000378  6F85               	movwf	??_receiveData& (0+255),b
  2533  00037A  0100               	movlb	0	; () banked
  2534  00037C  5185               	movf	??_receiveData& (0+255),w,b
  2535  00037E  0D02               	mullw	2
  2536  000380  50F3               	movf	prodl,w,c
  2537  000382  240B               	addwf	_receiveArrayAddress,w,c
  2538  000384  6ED9               	movwf	fsr2l,c
  2539  000386  50F4               	movf	prodh,w,c
  2540  000388  200C               	addwfc	_receiveArrayAddress+1,w,c
  2541  00038A  6EDA               	movwf	fsr2h,c
  2542  00038C  C009  FFDE         	movff	_group,postinc2
  2543  000390  C00A  FFDD         	movff	_group+1,postdec2
  2544                           
  2545                           ;FastTransfer.c: 210: } else {
  2546  000394  D002               	goto	l2641
  2547  000396                     l2639:
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;FastTransfer.c: 211: dataAdressErrorCounter++;
  2551  000396  4A07               	infsnz	_dataAdressErrorCounter,f,c
  2552  000398  2A08               	incf	_dataAdressErrorCounter+1,f,c
  2553  00039A                     l2641:
  2554                           
  2555                           ; BSR set to: 0
  2556  00039A  0E03               	movlw	3
  2557  00039C  0100               	movlb	0	; () banked
  2558  00039E  2595               	addwf	receiveData@r& (0+255),w,b
  2559  0003A0  0100               	movlb	0	; () banked
  2560  0003A2  6F95               	movwf	receiveData@r& (0+255),b
  2561  0003A4  0E00               	movlw	0
  2562  0003A6  0100               	movlb	0	; () banked
  2563  0003A8  2196               	addwfc	(receiveData@r+1)& (0+255),w,b
  2564  0003AA  0100               	movlb	0	; () banked
  2565  0003AC  6F96               	movwf	(receiveData@r+1)& (0+255),b
  2566  0003AE                     l2643:
  2567                           
  2568                           ; BSR set to: 0
  2569  0003AE  5022               	movf	_rx_len,w,c
  2570  0003B0  0100               	movlb	0	; () banked
  2571  0003B2  6F85               	movwf	??_receiveData& (0+255),b
  2572  0003B4  6B86               	clrf	(??_receiveData+1)& (0+255),b
  2573  0003B6  0100               	movlb	0	; () banked
  2574  0003B8  5185               	movf	??_receiveData& (0+255),w,b
  2575  0003BA  0100               	movlb	0	; () banked
  2576  0003BC  5D95               	subwf	receiveData@r& (0+255),w,b
  2577  0003BE  0100               	movlb	0	; () banked
  2578  0003C0  5196               	movf	(receiveData@r+1)& (0+255),w,b
  2579  0003C2  0A80               	xorlw	128
  2580  0003C4  0100               	movlb	0	; () banked
  2581  0003C6  6F87               	movwf	(??_receiveData+2)& (0+255),b
  2582  0003C8  0100               	movlb	0	; () banked
  2583  0003CA  5186               	movf	(??_receiveData+1)& (0+255),w,b
  2584  0003CC  0A80               	xorlw	128
  2585  0003CE  0100               	movlb	0	; () banked
  2586  0003D0  5987               	subwfb	(??_receiveData+2)& (0+255),w,b
  2587  0003D2  A0D8               	btfss	status,0,c
  2588  0003D4  D793               	goto	l2633
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;FastTransfer.c: 212: }
  2592                           ;FastTransfer.c: 213: }
  2593                           ;FastTransfer.c: 216: if (AKNAKsend) {
  2594                           
  2595                           ; BSR set to: 0
  2596  0003D6  5019               	movf	_AKNAKsend,w,c
  2597  0003D8  B4D8               	btfsc	status,2,c
  2598  0003DA  D0BC               	goto	l2673
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;FastTransfer.c: 217: unsigned char holder[3];
  2602                           ;FastTransfer.c: 218: holder[0] = 255;
  2603  0003DC  0100               	movlb	0	; () banked
  2604  0003DE  698B               	setf	receiveData@holder& (0+255),b
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;FastTransfer.c: 219: holder[1] = 1;
  2608  0003E0  0E01               	movlw	1
  2609  0003E2  0100               	movlb	0	; () banked
  2610  0003E4  6F8C               	movwf	(receiveData@holder+1)& (0+255),b
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;FastTransfer.c: 220: holder[2] = rx_buffer[rx_array_inx - 1];
  2614  0003E6  0EFF               	movlw	255
  2615  0003E8  0100               	movlb	0	; () banked
  2616  0003EA  6F85               	movwf	??_receiveData& (0+255),b
  2617  0003EC  0EFF               	movlw	255
  2618  0003EE  0100               	movlb	0	; () banked
  2619  0003F0  6F86               	movwf	(??_receiveData+1)& (0+255),b
  2620  0003F2  5021               	movf	_rx_array_inx,w,c
  2621  0003F4  0100               	movlb	0	; () banked
  2622  0003F6  6F87               	movwf	(??_receiveData+2)& (0+255),b
  2623  0003F8  6B88               	clrf	(??_receiveData+3)& (0+255),b
  2624  0003FA  0100               	movlb	0	; () banked
  2625  0003FC  5185               	movf	??_receiveData& (0+255),w,b
  2626  0003FE  0100               	movlb	0	; () banked
  2627  000400  2787               	addwf	(??_receiveData+2)& (0+255),f,b
  2628  000402  0100               	movlb	0	; () banked
  2629  000404  5186               	movf	(??_receiveData+1)& (0+255),w,b
  2630  000406  0100               	movlb	0	; () banked
  2631  000408  2388               	addwfc	(??_receiveData+3)& (0+255),f,b
  2632  00040A  0E00               	movlw	low _rx_buffer
  2633  00040C  0100               	movlb	0	; () banked
  2634  00040E  2587               	addwf	(??_receiveData+2)& (0+255),w,b
  2635  000410  6ED9               	movwf	fsr2l,c
  2636  000412  0E02               	movlw	high _rx_buffer
  2637  000414  0100               	movlb	0	; () banked
  2638  000416  2188               	addwfc	(??_receiveData+3)& (0+255),w,b
  2639  000418  6EDA               	movwf	fsr2h,c
  2640  00041A  50DF               	movf	indf2,w,c
  2641  00041C  0100               	movlb	0	; () banked
  2642  00041E  6F8D               	movwf	(receiveData@holder+2)& (0+255),b
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;FastTransfer.c: 221: unsigned char crcHolder = CRC8(holder, 3);
  2646  000420  0E8B               	movlw	low receiveData@holder
  2647  000422  6E3D               	movwf	CRC8@data,c
  2648  000424  0E00               	movlw	high receiveData@holder
  2649  000426  6E3E               	movwf	CRC8@data+1,c
  2650  000428  0E03               	movlw	3
  2651  00042A  6E3F               	movwf	CRC8@len,c
  2652  00042C  EC8D  F008         	call	_CRC8	;wreg free
  2653  000430  0100               	movlb	0	; () banked
  2654  000432  6F91               	movwf	receiveData@crcHolder& (0+255),b
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;FastTransfer.c: 222: serial_write(0x06);
  2658  000434  D801               	call	u2688
  2659  000436  D00B               	goto	l2657
  2660  000438                     u2688:
  2661  000438  0005               	push	
  2662  00043A  6EFA               	movwf	pclath,c
  2663  00043C  5015               	movf	_serial_write,w,c
  2664  00043E  6EFD               	movwf	tosl,c
  2665  000440  5016               	movf	_serial_write+1,w,c
  2666  000442  6EFE               	movwf	tosh,c
  2667  000444  50F8               	movf	tblptru,w,c
  2668  000446  6EFF               	movwf	tosu,c
  2669  000448  50FA               	movf	pclath,w,c
  2670  00044A  0E06               	movlw	6
  2671  00044C  0012               	return		;indir
  2672  00044E                     l2657:
  2673                           
  2674                           ;FastTransfer.c: 223: serial_write(0x85);
  2675  00044E  D801               	call	u2698
  2676  000450  D00B               	goto	l2659
  2677  000452                     u2698:
  2678  000452  0005               	push	
  2679  000454  6EFA               	movwf	pclath,c
  2680  000456  5015               	movf	_serial_write,w,c
  2681  000458  6EFD               	movwf	tosl,c
  2682  00045A  5016               	movf	_serial_write+1,w,c
  2683  00045C  6EFE               	movwf	tosh,c
  2684  00045E  50F8               	movf	tblptru,w,c
  2685  000460  6EFF               	movwf	tosu,c
  2686  000462  50FA               	movf	pclath,w,c
  2687  000464  0E85               	movlw	133
  2688  000466  0012               	return		;indir
  2689  000468                     l2659:
  2690                           
  2691                           ;FastTransfer.c: 224: serial_write(returnAddress);
  2692  000468  D801               	call	u2708
  2693  00046A  D00B               	goto	l2661
  2694  00046C                     u2708:
  2695  00046C  0005               	push	
  2696  00046E  6EFA               	movwf	pclath,c
  2697  000470  5015               	movf	_serial_write,w,c
  2698  000472  6EFD               	movwf	tosl,c
  2699  000474  5016               	movf	_serial_write+1,w,c
  2700  000476  6EFE               	movwf	tosh,c
  2701  000478  50F8               	movf	tblptru,w,c
  2702  00047A  6EFF               	movwf	tosu,c
  2703  00047C  50FA               	movf	pclath,w,c
  2704  00047E  501F               	movf	_returnAddress,w,c
  2705  000480  0012               	return		;indir
  2706  000482                     l2661:
  2707                           
  2708                           ;FastTransfer.c: 225: serial_write(moduleAddress);
  2709  000482  D801               	call	u2718
  2710  000484  D00B               	goto	l2663
  2711  000486                     u2718:
  2712  000486  0005               	push	
  2713  000488  6EFA               	movwf	pclath,c
  2714  00048A  5015               	movf	_serial_write,w,c
  2715  00048C  6EFD               	movwf	tosl,c
  2716  00048E  5016               	movf	_serial_write+1,w,c
  2717  000490  6EFE               	movwf	tosh,c
  2718  000492  50F8               	movf	tblptru,w,c
  2719  000494  6EFF               	movwf	tosu,c
  2720  000496  50FA               	movf	pclath,w,c
  2721  000498  501E               	movf	_moduleAddress,w,c
  2722  00049A  0012               	return		;indir
  2723  00049C                     l2663:
  2724                           
  2725                           ;FastTransfer.c: 226: serial_write(3);
  2726  00049C  D801               	call	u2728
  2727  00049E  D00B               	goto	l2665
  2728  0004A0                     u2728:
  2729  0004A0  0005               	push	
  2730  0004A2  6EFA               	movwf	pclath,c
  2731  0004A4  5015               	movf	_serial_write,w,c
  2732  0004A6  6EFD               	movwf	tosl,c
  2733  0004A8  5016               	movf	_serial_write+1,w,c
  2734  0004AA  6EFE               	movwf	tosh,c
  2735  0004AC  50F8               	movf	tblptru,w,c
  2736  0004AE  6EFF               	movwf	tosu,c
  2737  0004B0  50FA               	movf	pclath,w,c
  2738  0004B2  0E03               	movlw	3
  2739  0004B4  0012               	return		;indir
  2740  0004B6                     l2665:
  2741                           
  2742                           ;FastTransfer.c: 227: serial_write(255);
  2743  0004B6  D801               	call	u2738
  2744  0004B8  D00B               	goto	l2667
  2745  0004BA                     u2738:
  2746  0004BA  0005               	push	
  2747  0004BC  6EFA               	movwf	pclath,c
  2748  0004BE  5015               	movf	_serial_write,w,c
  2749  0004C0  6EFD               	movwf	tosl,c
  2750  0004C2  5016               	movf	_serial_write+1,w,c
  2751  0004C4  6EFE               	movwf	tosh,c
  2752  0004C6  50F8               	movf	tblptru,w,c
  2753  0004C8  6EFF               	movwf	tosu,c
  2754  0004CA  50FA               	movf	pclath,w,c
  2755  0004CC  0EFF               	movlw	255
  2756  0004CE  0012               	return		;indir
  2757  0004D0                     l2667:
  2758                           
  2759                           ;FastTransfer.c: 228: serial_write(1);
  2760  0004D0  D801               	call	u2748
  2761  0004D2  D00B               	goto	l2669
  2762  0004D4                     u2748:
  2763  0004D4  0005               	push	
  2764  0004D6  6EFA               	movwf	pclath,c
  2765  0004D8  5015               	movf	_serial_write,w,c
  2766  0004DA  6EFD               	movwf	tosl,c
  2767  0004DC  5016               	movf	_serial_write+1,w,c
  2768  0004DE  6EFE               	movwf	tosh,c
  2769  0004E0  50F8               	movf	tblptru,w,c
  2770  0004E2  6EFF               	movwf	tosu,c
  2771  0004E4  50FA               	movf	pclath,w,c
  2772  0004E6  0E01               	movlw	1
  2773  0004E8  0012               	return		;indir
  2774  0004EA                     l2669:
  2775                           
  2776                           ;FastTransfer.c: 229: serial_write(rx_buffer[rx_array_inx - 1]);
  2777  0004EA  D801               	call	u2758
  2778  0004EC  D025               	goto	l2671
  2779  0004EE                     u2758:
  2780  0004EE  0005               	push	
  2781  0004F0  6EFA               	movwf	pclath,c
  2782  0004F2  5015               	movf	_serial_write,w,c
  2783  0004F4  6EFD               	movwf	tosl,c
  2784  0004F6  5016               	movf	_serial_write+1,w,c
  2785  0004F8  6EFE               	movwf	tosh,c
  2786  0004FA  50F8               	movf	tblptru,w,c
  2787  0004FC  6EFF               	movwf	tosu,c
  2788  0004FE  50FA               	movf	pclath,w,c
  2789  000500  0EFF               	movlw	255
  2790  000502  0100               	movlb	0	; () banked
  2791  000504  6F85               	movwf	??_receiveData& (0+255),b
  2792  000506  0EFF               	movlw	255
  2793  000508  0100               	movlb	0	; () banked
  2794  00050A  6F86               	movwf	(??_receiveData+1)& (0+255),b
  2795  00050C  5021               	movf	_rx_array_inx,w,c
  2796  00050E  0100               	movlb	0	; () banked
  2797  000510  6F87               	movwf	(??_receiveData+2)& (0+255),b
  2798  000512  6B88               	clrf	(??_receiveData+3)& (0+255),b
  2799  000514  0100               	movlb	0	; () banked
  2800  000516  5185               	movf	??_receiveData& (0+255),w,b
  2801  000518  0100               	movlb	0	; () banked
  2802  00051A  2787               	addwf	(??_receiveData+2)& (0+255),f,b
  2803  00051C  0100               	movlb	0	; () banked
  2804  00051E  5186               	movf	(??_receiveData+1)& (0+255),w,b
  2805  000520  0100               	movlb	0	; () banked
  2806  000522  2388               	addwfc	(??_receiveData+3)& (0+255),f,b
  2807  000524  0E00               	movlw	low _rx_buffer
  2808  000526  0100               	movlb	0	; () banked
  2809  000528  2587               	addwf	(??_receiveData+2)& (0+255),w,b
  2810  00052A  6ED9               	movwf	fsr2l,c
  2811  00052C  0E02               	movlw	high _rx_buffer
  2812  00052E  0100               	movlb	0	; () banked
  2813  000530  2188               	addwfc	(??_receiveData+3)& (0+255),w,b
  2814  000532  6EDA               	movwf	fsr2h,c
  2815  000534  50DF               	movf	indf2,w,c
  2816  000536  0012               	return		;indir
  2817  000538                     l2671:
  2818                           
  2819                           ;FastTransfer.c: 230: serial_write(crcHolder);
  2820  000538  D801               	call	u2768
  2821  00053A  D00C               	goto	l2673
  2822  00053C                     u2768:
  2823  00053C  0005               	push	
  2824  00053E  6EFA               	movwf	pclath,c
  2825  000540  5015               	movf	_serial_write,w,c
  2826  000542  6EFD               	movwf	tosl,c
  2827  000544  5016               	movf	_serial_write+1,w,c
  2828  000546  6EFE               	movwf	tosh,c
  2829  000548  50F8               	movf	tblptru,w,c
  2830  00054A  6EFF               	movwf	tosu,c
  2831  00054C  50FA               	movf	pclath,w,c
  2832  00054E  0100               	movlb	0	; () banked
  2833  000550  5191               	movf	receiveData@crcHolder& (0+255),w,b
  2834  000552  0012               	return		;indir
  2835  000554                     l2673:
  2836                           
  2837                           ;FastTransfer.c: 231: }
  2838                           ;FastTransfer.c: 235: rx_len = 0;
  2839  000554  0E00               	movlw	0
  2840  000556  6E22               	movwf	_rx_len,c
  2841                           
  2842                           ;FastTransfer.c: 236: rx_array_inx = 0;
  2843  000558  0E00               	movlw	0
  2844  00055A  6E21               	movwf	_rx_array_inx,c
  2845                           
  2846                           ;FastTransfer.c: 237: return 1;
  2847  00055C  0E01               	movlw	1
  2848  00055E  0012               	return	
  2849  000560                     l2683:
  2850                           
  2851                           ;FastTransfer.c: 239: crcErrorCounter++;
  2852  000560  4A05               	infsnz	_crcErrorCounter,f,c
  2853  000562  2A06               	incf	_crcErrorCounter+1,f,c
  2854                           
  2855                           ;FastTransfer.c: 241: if (AKNAKsend) {
  2856  000564  5019               	movf	_AKNAKsend,w,c
  2857  000566  B4D8               	btfsc	status,2,c
  2858  000568  D0BC               	goto	l2713
  2859                           
  2860                           ;FastTransfer.c: 242: unsigned char holder[3];
  2861                           ;FastTransfer.c: 243: holder[0] = 255;
  2862  00056A  0100               	movlb	0	; () banked
  2863  00056C  698E               	setf	receiveData@holder_324& (0+255),b
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;FastTransfer.c: 244: holder[1] = 2;
  2867  00056E  0E02               	movlw	2
  2868  000570  0100               	movlb	0	; () banked
  2869  000572  6F8F               	movwf	(receiveData@holder_324+1)& (0+255),b
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;FastTransfer.c: 245: holder[2] = rx_buffer[rx_array_inx - 1];
  2873  000574  0EFF               	movlw	255
  2874  000576  0100               	movlb	0	; () banked
  2875  000578  6F85               	movwf	??_receiveData& (0+255),b
  2876  00057A  0EFF               	movlw	255
  2877  00057C  0100               	movlb	0	; () banked
  2878  00057E  6F86               	movwf	(??_receiveData+1)& (0+255),b
  2879  000580  5021               	movf	_rx_array_inx,w,c
  2880  000582  0100               	movlb	0	; () banked
  2881  000584  6F87               	movwf	(??_receiveData+2)& (0+255),b
  2882  000586  6B88               	clrf	(??_receiveData+3)& (0+255),b
  2883  000588  0100               	movlb	0	; () banked
  2884  00058A  5185               	movf	??_receiveData& (0+255),w,b
  2885  00058C  0100               	movlb	0	; () banked
  2886  00058E  2787               	addwf	(??_receiveData+2)& (0+255),f,b
  2887  000590  0100               	movlb	0	; () banked
  2888  000592  5186               	movf	(??_receiveData+1)& (0+255),w,b
  2889  000594  0100               	movlb	0	; () banked
  2890  000596  2388               	addwfc	(??_receiveData+3)& (0+255),f,b
  2891  000598  0E00               	movlw	low _rx_buffer
  2892  00059A  0100               	movlb	0	; () banked
  2893  00059C  2587               	addwf	(??_receiveData+2)& (0+255),w,b
  2894  00059E  6ED9               	movwf	fsr2l,c
  2895  0005A0  0E02               	movlw	high _rx_buffer
  2896  0005A2  0100               	movlb	0	; () banked
  2897  0005A4  2188               	addwfc	(??_receiveData+3)& (0+255),w,b
  2898  0005A6  6EDA               	movwf	fsr2h,c
  2899  0005A8  50DF               	movf	indf2,w,c
  2900  0005AA  0100               	movlb	0	; () banked
  2901  0005AC  6F90               	movwf	(receiveData@holder_324+2)& (0+255),b
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;FastTransfer.c: 246: unsigned char crcHolder = CRC8(holder, 3);
  2905  0005AE  0E8E               	movlw	low receiveData@holder_324
  2906  0005B0  6E3D               	movwf	CRC8@data,c
  2907  0005B2  0E00               	movlw	high receiveData@holder_324
  2908  0005B4  6E3E               	movwf	CRC8@data+1,c
  2909  0005B6  0E03               	movlw	3
  2910  0005B8  6E3F               	movwf	CRC8@len,c
  2911  0005BA  EC8D  F008         	call	_CRC8
  2912  0005BE  0100               	movlb	0	; () banked
  2913  0005C0  6F92               	movwf	receiveData@crcHolder_325& (0+255),b
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;FastTransfer.c: 247: serial_write(0x06);
  2917  0005C2  D801               	call	u2788
  2918  0005C4  D00B               	goto	l2697
  2919  0005C6                     u2788:
  2920  0005C6  0005               	push	
  2921  0005C8  6EFA               	movwf	pclath,c
  2922  0005CA  5015               	movf	_serial_write,w,c
  2923  0005CC  6EFD               	movwf	tosl,c
  2924  0005CE  5016               	movf	_serial_write+1,w,c
  2925  0005D0  6EFE               	movwf	tosh,c
  2926  0005D2  50F8               	movf	tblptru,w,c
  2927  0005D4  6EFF               	movwf	tosu,c
  2928  0005D6  50FA               	movf	pclath,w,c
  2929  0005D8  0E06               	movlw	6
  2930  0005DA  0012               	return		;indir
  2931  0005DC                     l2697:
  2932                           
  2933                           ;FastTransfer.c: 248: serial_write(0x85);
  2934  0005DC  D801               	call	u2798
  2935  0005DE  D00B               	goto	l2699
  2936  0005E0                     u2798:
  2937  0005E0  0005               	push	
  2938  0005E2  6EFA               	movwf	pclath,c
  2939  0005E4  5015               	movf	_serial_write,w,c
  2940  0005E6  6EFD               	movwf	tosl,c
  2941  0005E8  5016               	movf	_serial_write+1,w,c
  2942  0005EA  6EFE               	movwf	tosh,c
  2943  0005EC  50F8               	movf	tblptru,w,c
  2944  0005EE  6EFF               	movwf	tosu,c
  2945  0005F0  50FA               	movf	pclath,w,c
  2946  0005F2  0E85               	movlw	133
  2947  0005F4  0012               	return		;indir
  2948  0005F6                     l2699:
  2949                           
  2950                           ;FastTransfer.c: 249: serial_write(returnAddress);
  2951  0005F6  D801               	call	u2808
  2952  0005F8  D00B               	goto	l2701
  2953  0005FA                     u2808:
  2954  0005FA  0005               	push	
  2955  0005FC  6EFA               	movwf	pclath,c
  2956  0005FE  5015               	movf	_serial_write,w,c
  2957  000600  6EFD               	movwf	tosl,c
  2958  000602  5016               	movf	_serial_write+1,w,c
  2959  000604  6EFE               	movwf	tosh,c
  2960  000606  50F8               	movf	tblptru,w,c
  2961  000608  6EFF               	movwf	tosu,c
  2962  00060A  50FA               	movf	pclath,w,c
  2963  00060C  501F               	movf	_returnAddress,w,c
  2964  00060E  0012               	return		;indir
  2965  000610                     l2701:
  2966                           
  2967                           ;FastTransfer.c: 250: serial_write(moduleAddress);
  2968  000610  D801               	call	u2818
  2969  000612  D00B               	goto	l2703
  2970  000614                     u2818:
  2971  000614  0005               	push	
  2972  000616  6EFA               	movwf	pclath,c
  2973  000618  5015               	movf	_serial_write,w,c
  2974  00061A  6EFD               	movwf	tosl,c
  2975  00061C  5016               	movf	_serial_write+1,w,c
  2976  00061E  6EFE               	movwf	tosh,c
  2977  000620  50F8               	movf	tblptru,w,c
  2978  000622  6EFF               	movwf	tosu,c
  2979  000624  50FA               	movf	pclath,w,c
  2980  000626  501E               	movf	_moduleAddress,w,c
  2981  000628  0012               	return		;indir
  2982  00062A                     l2703:
  2983                           
  2984                           ;FastTransfer.c: 251: serial_write(3);
  2985  00062A  D801               	call	u2828
  2986  00062C  D00B               	goto	l2705
  2987  00062E                     u2828:
  2988  00062E  0005               	push	
  2989  000630  6EFA               	movwf	pclath,c
  2990  000632  5015               	movf	_serial_write,w,c
  2991  000634  6EFD               	movwf	tosl,c
  2992  000636  5016               	movf	_serial_write+1,w,c
  2993  000638  6EFE               	movwf	tosh,c
  2994  00063A  50F8               	movf	tblptru,w,c
  2995  00063C  6EFF               	movwf	tosu,c
  2996  00063E  50FA               	movf	pclath,w,c
  2997  000640  0E03               	movlw	3
  2998  000642  0012               	return		;indir
  2999  000644                     l2705:
  3000                           
  3001                           ;FastTransfer.c: 252: serial_write(255);
  3002  000644  D801               	call	u2838
  3003  000646  D00B               	goto	l2707
  3004  000648                     u2838:
  3005  000648  0005               	push	
  3006  00064A  6EFA               	movwf	pclath,c
  3007  00064C  5015               	movf	_serial_write,w,c
  3008  00064E  6EFD               	movwf	tosl,c
  3009  000650  5016               	movf	_serial_write+1,w,c
  3010  000652  6EFE               	movwf	tosh,c
  3011  000654  50F8               	movf	tblptru,w,c
  3012  000656  6EFF               	movwf	tosu,c
  3013  000658  50FA               	movf	pclath,w,c
  3014  00065A  0EFF               	movlw	255
  3015  00065C  0012               	return		;indir
  3016  00065E                     l2707:
  3017                           
  3018                           ;FastTransfer.c: 253: serial_write(2);
  3019  00065E  D801               	call	u2848
  3020  000660  D00B               	goto	l2709
  3021  000662                     u2848:
  3022  000662  0005               	push	
  3023  000664  6EFA               	movwf	pclath,c
  3024  000666  5015               	movf	_serial_write,w,c
  3025  000668  6EFD               	movwf	tosl,c
  3026  00066A  5016               	movf	_serial_write+1,w,c
  3027  00066C  6EFE               	movwf	tosh,c
  3028  00066E  50F8               	movf	tblptru,w,c
  3029  000670  6EFF               	movwf	tosu,c
  3030  000672  50FA               	movf	pclath,w,c
  3031  000674  0E02               	movlw	2
  3032  000676  0012               	return		;indir
  3033  000678                     l2709:
  3034                           
  3035                           ;FastTransfer.c: 254: serial_write(rx_buffer[rx_array_inx - 1]);
  3036  000678  D801               	call	u2858
  3037  00067A  D025               	goto	l2711
  3038  00067C                     u2858:
  3039  00067C  0005               	push	
  3040  00067E  6EFA               	movwf	pclath,c
  3041  000680  5015               	movf	_serial_write,w,c
  3042  000682  6EFD               	movwf	tosl,c
  3043  000684  5016               	movf	_serial_write+1,w,c
  3044  000686  6EFE               	movwf	tosh,c
  3045  000688  50F8               	movf	tblptru,w,c
  3046  00068A  6EFF               	movwf	tosu,c
  3047  00068C  50FA               	movf	pclath,w,c
  3048  00068E  0EFF               	movlw	255
  3049  000690  0100               	movlb	0	; () banked
  3050  000692  6F85               	movwf	??_receiveData& (0+255),b
  3051  000694  0EFF               	movlw	255
  3052  000696  0100               	movlb	0	; () banked
  3053  000698  6F86               	movwf	(??_receiveData+1)& (0+255),b
  3054  00069A  5021               	movf	_rx_array_inx,w,c
  3055  00069C  0100               	movlb	0	; () banked
  3056  00069E  6F87               	movwf	(??_receiveData+2)& (0+255),b
  3057  0006A0  6B88               	clrf	(??_receiveData+3)& (0+255),b
  3058  0006A2  0100               	movlb	0	; () banked
  3059  0006A4  5185               	movf	??_receiveData& (0+255),w,b
  3060  0006A6  0100               	movlb	0	; () banked
  3061  0006A8  2787               	addwf	(??_receiveData+2)& (0+255),f,b
  3062  0006AA  0100               	movlb	0	; () banked
  3063  0006AC  5186               	movf	(??_receiveData+1)& (0+255),w,b
  3064  0006AE  0100               	movlb	0	; () banked
  3065  0006B0  2388               	addwfc	(??_receiveData+3)& (0+255),f,b
  3066  0006B2  0E00               	movlw	low _rx_buffer
  3067  0006B4  0100               	movlb	0	; () banked
  3068  0006B6  2587               	addwf	(??_receiveData+2)& (0+255),w,b
  3069  0006B8  6ED9               	movwf	fsr2l,c
  3070  0006BA  0E02               	movlw	high _rx_buffer
  3071  0006BC  0100               	movlb	0	; () banked
  3072  0006BE  2188               	addwfc	(??_receiveData+3)& (0+255),w,b
  3073  0006C0  6EDA               	movwf	fsr2h,c
  3074  0006C2  50DF               	movf	indf2,w,c
  3075  0006C4  0012               	return		;indir
  3076  0006C6                     l2711:
  3077                           
  3078                           ;FastTransfer.c: 255: serial_write(crcHolder);
  3079  0006C6  D801               	call	u2868
  3080  0006C8  D00C               	goto	l2713
  3081  0006CA                     u2868:
  3082  0006CA  0005               	push	
  3083  0006CC  6EFA               	movwf	pclath,c
  3084  0006CE  5015               	movf	_serial_write,w,c
  3085  0006D0  6EFD               	movwf	tosl,c
  3086  0006D2  5016               	movf	_serial_write+1,w,c
  3087  0006D4  6EFE               	movwf	tosh,c
  3088  0006D6  50F8               	movf	tblptru,w,c
  3089  0006D8  6EFF               	movwf	tosu,c
  3090  0006DA  50FA               	movf	pclath,w,c
  3091  0006DC  0100               	movlb	0	; () banked
  3092  0006DE  5192               	movf	receiveData@crcHolder_325& (0+255),w,b
  3093  0006E0  0012               	return		;indir
  3094  0006E2                     l2713:
  3095                           
  3096                           ;FastTransfer.c: 256: }
  3097                           ;FastTransfer.c: 259: rx_len = 0;
  3098  0006E2  0E00               	movlw	0
  3099  0006E4  6E22               	movwf	_rx_len,c
  3100                           
  3101                           ;FastTransfer.c: 260: rx_array_inx = 0;
  3102  0006E6  0E00               	movlw	0
  3103  0006E8  6E21               	movwf	_rx_array_inx,c
  3104                           
  3105                           ;FastTransfer.c: 261: return 0;
  3106  0006EA  0E00               	movlw	0
  3107  0006EC  0012               	return	
  3108  0006EE                     l2721:
  3109                           
  3110                           ;FastTransfer.c: 262: }
  3111                           ;FastTransfer.c: 263: }
  3112                           ;FastTransfer.c: 264: }
  3113                           ;FastTransfer.c: 267: return 0;
  3114  0006EE  0E00               	movlw	0
  3115  0006F0  0012               	return	
  3116  0006F2                     __end_of_receiveData:
  3117                           	opt stack 0
  3118                           tosu	equ	0xFFF
  3119                           tosh	equ	0xFFE
  3120                           tosl	equ	0xFFD
  3121                           pclath	equ	0xFFA
  3122                           tblptru	equ	0xFF8
  3123                           tblptrh	equ	0xFF7
  3124                           tblptrl	equ	0xFF6
  3125                           tablat	equ	0xFF5
  3126                           prodh	equ	0xFF4
  3127                           prodl	equ	0xFF3
  3128                           postinc0	equ	0xFEE
  3129                           wreg	equ	0xFE8
  3130                           indf2	equ	0xFDF
  3131                           postinc2	equ	0xFDE
  3132                           postdec2	equ	0xFDD
  3133                           plusw2	equ	0xFDB
  3134                           fsr2h	equ	0xFDA
  3135                           fsr2l	equ	0xFD9
  3136                           status	equ	0xFD8
  3137                           
  3138 ;; *************** function _Send_put *****************
  3139 ;; Defined at:
  3140 ;;		line 130 in file "UART.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;  _data           1    wreg     unsigned char 
  3143 ;; Auto vars:     Size  Location     Type
  3144 ;;  _data           1    5[BANK0 ] unsigned char 
  3145 ;; Return value:  Size  Location     Type
  3146 ;;                  1    wreg      void 
  3147 ;; Registers used:
  3148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3149 ;; Tracked objects:
  3150 ;;		On entry : 0/0
  3151 ;;		On exit  : 0/0
  3152 ;;		Unchanged: 0/0
  3153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3154 ;;      Params:         0       0       0       0       0       0       0
  3155 ;;      Locals:         0       1       0       0       0       0       0
  3156 ;;      Temps:          0       0       0       0       0       0       0
  3157 ;;      Totals:         0       1       0       0       0       0       0
  3158 ;;Total ram usage:        1 bytes
  3159 ;; Hardware stack levels used:    1
  3160 ;; Hardware stack levels required when called:    6
  3161 ;; This function calls:
  3162 ;;		_UART_buff_get
  3163 ;;		_UART_buff_put
  3164 ;; This function is called by:
  3165 ;;		_ComStart
  3166 ;;		_putch
  3167 ;;		_sendData
  3168 ;;		_receiveData
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           	psect	text12
  3173  0011A8                     __ptext12:
  3174                           	opt stack 0
  3175  0011A8                     _Send_put:
  3176                           	opt stack 21
  3177                           
  3178                           ;incstack = 0
  3179                           ;Send_put@_data stored from wreg
  3180  0011A8  0100               	movlb	0	; () banked
  3181  0011AA  6F84               	movwf	Send_put@_data& (0+255),b
  3182                           
  3183                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  3184  0011AC  0E00               	movlw	low _output_buffer
  3185  0011AE  0100               	movlb	0	; () banked
  3186  0011B0  6F7F               	movwf	UART_buff_put@_this& (0+255),b
  3187  0011B2  0E04               	movlw	high _output_buffer
  3188  0011B4  0100               	movlb	0	; () banked
  3189  0011B6  6F80               	movwf	(UART_buff_put@_this+1)& (0+255),b
  3190  0011B8  C084  F081         	movff	Send_put@_data,UART_buff_put@c
  3191  0011BC  ECEB  F004         	call	_UART_buff_put
  3192                           
  3193                           ;UART.c: 132: if (Transmit_stall == 1) {
  3194  0011C0  0444               	decf	_Transmit_stall,w,c
  3195  0011C2  A4D8               	btfss	status,2,c
  3196  0011C4  0012               	return	
  3197                           
  3198                           ;UART.c: 133: Transmit_stall = 0;
  3199  0011C6  0E00               	movlw	0
  3200  0011C8  6E44               	movwf	_Transmit_stall,c
  3201                           
  3202                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  3203  0011CA  0E00               	movlw	low _output_buffer
  3204  0011CC  0100               	movlb	0	; () banked
  3205  0011CE  6F7F               	movwf	UART_buff_get@_this& (0+255),b
  3206  0011D0  0E04               	movlw	high _output_buffer
  3207  0011D2  0100               	movlb	0	; () banked
  3208  0011D4  6F80               	movwf	(UART_buff_get@_this+1)& (0+255),b
  3209  0011D6  EC83  F006         	call	_UART_buff_get	;wreg free
  3210  0011DA  6EAD               	movwf	4013,c	;volatile
  3211                           
  3212                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  3213  0011DC  889D               	bsf	3997,4,c	;volatile
  3214  0011DE  0012               	return	
  3215  0011E0                     __end_of_Send_put:
  3216                           	opt stack 0
  3217                           tosu	equ	0xFFF
  3218                           tosh	equ	0xFFE
  3219                           tosl	equ	0xFFD
  3220                           pclath	equ	0xFFA
  3221                           tblptru	equ	0xFF8
  3222                           tblptrh	equ	0xFF7
  3223                           tblptrl	equ	0xFF6
  3224                           tablat	equ	0xFF5
  3225                           prodh	equ	0xFF4
  3226                           prodl	equ	0xFF3
  3227                           postinc0	equ	0xFEE
  3228                           wreg	equ	0xFE8
  3229                           indf2	equ	0xFDF
  3230                           postinc2	equ	0xFDE
  3231                           postdec2	equ	0xFDD
  3232                           plusw2	equ	0xFDB
  3233                           fsr2h	equ	0xFDA
  3234                           fsr2l	equ	0xFD9
  3235                           status	equ	0xFD8
  3236                           
  3237 ;; *************** function _UART_buff_put *****************
  3238 ;; Defined at:
  3239 ;;		line 68 in file "UART.c"
  3240 ;; Parameters:    Size  Location     Type
  3241 ;;  _this           2    0[BANK0 ] PTR struct UART_ring_buf
  3242 ;;		 -> output_buffer(206), input_buffer(206), 
  3243 ;;  c               1    2[BANK0 ] const unsigned char 
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;		None
  3246 ;; Return value:  Size  Location     Type
  3247 ;;                  1    wreg      void 
  3248 ;; Registers used:
  3249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3255 ;;      Params:         0       3       0       0       0       0       0
  3256 ;;      Locals:         0       0       0       0       0       0       0
  3257 ;;      Temps:          0       2       0       0       0       0       0
  3258 ;;      Totals:         0       5       0       0       0       0       0
  3259 ;;Total ram usage:        5 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; Hardware stack levels required when called:    5
  3262 ;; This function calls:
  3263 ;;		_UART_buff_modulo_inc
  3264 ;; This function is called by:
  3265 ;;		_Send_put
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           	psect	text13
  3270  0009D6                     __ptext13:
  3271                           	opt stack 0
  3272  0009D6                     _UART_buff_put:
  3273                           	opt stack 21
  3274                           
  3275                           ;UART.c: 69: if (_this->count < 200) {
  3276                           
  3277                           ;incstack = 0
  3278  0009D6  0100               	movlb	0	; () banked
  3279  0009D8  EE20 F0CC          	lfsr	2,204
  3280  0009DC  517F               	movf	UART_buff_put@_this& (0+255),w,b
  3281  0009DE  26D9               	addwf	fsr2l,f,c
  3282  0009E0  5180               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3283  0009E2  22DA               	addwfc	fsr2h,f,c
  3284  0009E4  0E01               	movlw	1
  3285  0009E6  BEDB               	btfsc	plusw2,7,c
  3286  0009E8  D007               	goto	l2377
  3287  0009EA  0E01               	movlw	1
  3288  0009EC  50DB               	movf	plusw2,w,c
  3289  0009EE  E142               	bnz	l2383
  3290  0009F0  0EC8               	movlw	200
  3291  0009F2  5CDE               	subwf	postinc2,w,c
  3292  0009F4  B0D8               	btfsc	status,0,c
  3293  0009F6  D03E               	goto	l2383
  3294  0009F8                     l2377:
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;UART.c: 70: _this->buf[_this->head] = c;
  3298  0009F8  0100               	movlb	0	; () banked
  3299  0009FA  EE20 F0C8          	lfsr	2,200
  3300  0009FE  517F               	movf	UART_buff_put@_this& (0+255),w,b
  3301  000A00  26D9               	addwf	fsr2l,f,c
  3302  000A02  5180               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3303  000A04  22DA               	addwfc	fsr2h,f,c
  3304  000A06  CFDE F082          	movff	postinc2,??_UART_buff_put
  3305  000A0A  CFDD F083          	movff	postdec2,??_UART_buff_put+1
  3306  000A0E  0100               	movlb	0	; () banked
  3307  000A10  5182               	movf	??_UART_buff_put& (0+255),w,b
  3308  000A12  0100               	movlb	0	; () banked
  3309  000A14  257F               	addwf	UART_buff_put@_this& (0+255),w,b
  3310  000A16  6ED9               	movwf	fsr2l,c
  3311  000A18  0100               	movlb	0	; () banked
  3312  000A1A  5183               	movf	(??_UART_buff_put+1)& (0+255),w,b
  3313  000A1C  0100               	movlb	0	; () banked
  3314  000A1E  2180               	addwfc	(UART_buff_put@_this+1)& (0+255),w,b
  3315  000A20  6EDA               	movwf	fsr2h,c
  3316  000A22  C081  FFDF         	movff	UART_buff_put@c,indf2
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3320  000A26  0100               	movlb	0	; () banked
  3321  000A28  EE20 F0C8          	lfsr	2,200
  3322  000A2C  517F               	movf	UART_buff_put@_this& (0+255),w,b
  3323  000A2E  26D9               	addwf	fsr2l,f,c
  3324  000A30  5180               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3325  000A32  22DA               	addwfc	fsr2h,f,c
  3326  000A34  CFDE F03D          	movff	postinc2,UART_buff_modulo_inc@value
  3327  000A38  CFDD F03E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3328  000A3C  0E00               	movlw	0
  3329  000A3E  6E40               	movwf	UART_buff_modulo_inc@modulus+1,c
  3330  000A40  0EC8               	movlw	200
  3331  000A42  6E3F               	movwf	UART_buff_modulo_inc@modulus,c
  3332  000A44  EC4F  F009         	call	_UART_buff_modulo_inc	;wreg free
  3333  000A48  0100               	movlb	0	; () banked
  3334  000A4A  EE20 F0C8          	lfsr	2,200
  3335  000A4E  517F               	movf	UART_buff_put@_this& (0+255),w,b
  3336  000A50  26D9               	addwf	fsr2l,f,c
  3337  000A52  5180               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3338  000A54  22DA               	addwfc	fsr2h,f,c
  3339  000A56  C03D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3340  000A5A  C03E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;UART.c: 72: ++_this->count;
  3344  000A5E  0100               	movlb	0	; () banked
  3345  000A60  EE20 F0CC          	lfsr	2,204
  3346  000A64  517F               	movf	UART_buff_put@_this& (0+255),w,b
  3347  000A66  26D9               	addwf	fsr2l,f,c
  3348  000A68  5180               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3349  000A6A  22DA               	addwfc	fsr2h,f,c
  3350  000A6C  2ADE               	incf	postinc2,f,c
  3351  000A6E  0E00               	movlw	0
  3352  000A70  22DD               	addwfc	postdec2,f,c
  3353                           
  3354                           ;UART.c: 73: } else {
  3355  000A72  0012               	return	
  3356  000A74                     l2383:
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;UART.c: 74: _this->buf[_this->head] = c;
  3360  000A74  0100               	movlb	0	; () banked
  3361  000A76  EE20 F0C8          	lfsr	2,200
  3362  000A7A  517F               	movf	UART_buff_put@_this& (0+255),w,b
  3363  000A7C  26D9               	addwf	fsr2l,f,c
  3364  000A7E  5180               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3365  000A80  22DA               	addwfc	fsr2h,f,c
  3366  000A82  CFDE F082          	movff	postinc2,??_UART_buff_put
  3367  000A86  CFDD F083          	movff	postdec2,??_UART_buff_put+1
  3368  000A8A  0100               	movlb	0	; () banked
  3369  000A8C  5182               	movf	??_UART_buff_put& (0+255),w,b
  3370  000A8E  0100               	movlb	0	; () banked
  3371  000A90  257F               	addwf	UART_buff_put@_this& (0+255),w,b
  3372  000A92  6ED9               	movwf	fsr2l,c
  3373  000A94  0100               	movlb	0	; () banked
  3374  000A96  5183               	movf	(??_UART_buff_put+1)& (0+255),w,b
  3375  000A98  0100               	movlb	0	; () banked
  3376  000A9A  2180               	addwfc	(UART_buff_put@_this+1)& (0+255),w,b
  3377  000A9C  6EDA               	movwf	fsr2h,c
  3378  000A9E  C081  FFDF         	movff	UART_buff_put@c,indf2
  3379                           
  3380                           ; BSR set to: 0
  3381                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3382  000AA2  0100               	movlb	0	; () banked
  3383  000AA4  EE20 F0C8          	lfsr	2,200
  3384  000AA8  517F               	movf	UART_buff_put@_this& (0+255),w,b
  3385  000AAA  26D9               	addwf	fsr2l,f,c
  3386  000AAC  5180               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3387  000AAE  22DA               	addwfc	fsr2h,f,c
  3388  000AB0  CFDE F03D          	movff	postinc2,UART_buff_modulo_inc@value
  3389  000AB4  CFDD F03E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3390  000AB8  0E00               	movlw	0
  3391  000ABA  6E40               	movwf	UART_buff_modulo_inc@modulus+1,c
  3392  000ABC  0EC8               	movlw	200
  3393  000ABE  6E3F               	movwf	UART_buff_modulo_inc@modulus,c
  3394  000AC0  EC4F  F009         	call	_UART_buff_modulo_inc	;wreg free
  3395  000AC4  0100               	movlb	0	; () banked
  3396  000AC6  EE20 F0C8          	lfsr	2,200
  3397  000ACA  517F               	movf	UART_buff_put@_this& (0+255),w,b
  3398  000ACC  26D9               	addwf	fsr2l,f,c
  3399  000ACE  5180               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3400  000AD0  22DA               	addwfc	fsr2h,f,c
  3401  000AD2  C03D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3402  000AD6  C03E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3406  000ADA  0100               	movlb	0	; () banked
  3407  000ADC  EE20 F0CA          	lfsr	2,202
  3408  000AE0  517F               	movf	UART_buff_put@_this& (0+255),w,b
  3409  000AE2  26D9               	addwf	fsr2l,f,c
  3410  000AE4  5180               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3411  000AE6  22DA               	addwfc	fsr2h,f,c
  3412  000AE8  CFDE F03D          	movff	postinc2,UART_buff_modulo_inc@value
  3413  000AEC  CFDD F03E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3414  000AF0  0E00               	movlw	0
  3415  000AF2  6E40               	movwf	UART_buff_modulo_inc@modulus+1,c
  3416  000AF4  0EC8               	movlw	200
  3417  000AF6  6E3F               	movwf	UART_buff_modulo_inc@modulus,c
  3418  000AF8  EC4F  F009         	call	_UART_buff_modulo_inc	;wreg free
  3419  000AFC  0100               	movlb	0	; () banked
  3420  000AFE  EE20 F0CA          	lfsr	2,202
  3421  000B02  517F               	movf	UART_buff_put@_this& (0+255),w,b
  3422  000B04  26D9               	addwf	fsr2l,f,c
  3423  000B06  5180               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3424  000B08  22DA               	addwfc	fsr2h,f,c
  3425  000B0A  C03D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3426  000B0E  C03E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3427  000B12  0012               	return	
  3428  000B14                     __end_of_UART_buff_put:
  3429                           	opt stack 0
  3430                           tosu	equ	0xFFF
  3431                           tosh	equ	0xFFE
  3432                           tosl	equ	0xFFD
  3433                           pclath	equ	0xFFA
  3434                           tblptru	equ	0xFF8
  3435                           tblptrh	equ	0xFF7
  3436                           tblptrl	equ	0xFF6
  3437                           tablat	equ	0xFF5
  3438                           prodh	equ	0xFF4
  3439                           prodl	equ	0xFF3
  3440                           postinc0	equ	0xFEE
  3441                           wreg	equ	0xFE8
  3442                           indf2	equ	0xFDF
  3443                           postinc2	equ	0xFDE
  3444                           postdec2	equ	0xFDD
  3445                           plusw2	equ	0xFDB
  3446                           fsr2h	equ	0xFDA
  3447                           fsr2l	equ	0xFD9
  3448                           status	equ	0xFD8
  3449                           
  3450 ;; *************** function _Receive_get *****************
  3451 ;; Defined at:
  3452 ;;		line 126 in file "UART.c"
  3453 ;; Parameters:    Size  Location     Type
  3454 ;;		None
  3455 ;; Auto vars:     Size  Location     Type
  3456 ;;		None
  3457 ;; Return value:  Size  Location     Type
  3458 ;;                  1    wreg      unsigned char 
  3459 ;; Registers used:
  3460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3461 ;; Tracked objects:
  3462 ;;		On entry : 0/0
  3463 ;;		On exit  : 0/0
  3464 ;;		Unchanged: 0/0
  3465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3466 ;;      Params:         0       0       0       0       0       0       0
  3467 ;;      Locals:         0       0       0       0       0       0       0
  3468 ;;      Temps:          0       0       0       0       0       0       0
  3469 ;;      Totals:         0       0       0       0       0       0       0
  3470 ;;Total ram usage:        0 bytes
  3471 ;; Hardware stack levels used:    1
  3472 ;; Hardware stack levels required when called:    6
  3473 ;; This function calls:
  3474 ;;		_UART_buff_get
  3475 ;; This function is called by:
  3476 ;;		_ComStart
  3477 ;;		_getch
  3478 ;;		_receiveData
  3479 ;;		_CRCcheck
  3480 ;; This function uses a non-reentrant model
  3481 ;;
  3482                           
  3483                           	psect	text14
  3484  001428                     __ptext14:
  3485                           	opt stack 0
  3486  001428                     _Receive_get:
  3487                           	opt stack 22
  3488                           
  3489                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  3490                           
  3491                           ; BSR set to: 0
  3492                           ;incstack = 0
  3493  001428  0E00               	movlw	low _input_buffer
  3494  00142A  0100               	movlb	0	; () banked
  3495  00142C  6F7F               	movwf	UART_buff_get@_this& (0+255),b
  3496  00142E  0E03               	movlw	high _input_buffer
  3497  001430  0100               	movlb	0	; () banked
  3498  001432  6F80               	movwf	(UART_buff_get@_this+1)& (0+255),b
  3499  001434  EC83  F006         	call	_UART_buff_get	;wreg free
  3500  001438  0012               	return	
  3501  00143A                     __end_of_Receive_get:
  3502                           	opt stack 0
  3503                           tosu	equ	0xFFF
  3504                           tosh	equ	0xFFE
  3505                           tosl	equ	0xFFD
  3506                           pclath	equ	0xFFA
  3507                           tblptru	equ	0xFF8
  3508                           tblptrh	equ	0xFF7
  3509                           tblptrl	equ	0xFF6
  3510                           tablat	equ	0xFF5
  3511                           prodh	equ	0xFF4
  3512                           prodl	equ	0xFF3
  3513                           postinc0	equ	0xFEE
  3514                           wreg	equ	0xFE8
  3515                           indf2	equ	0xFDF
  3516                           postinc2	equ	0xFDE
  3517                           postdec2	equ	0xFDD
  3518                           plusw2	equ	0xFDB
  3519                           fsr2h	equ	0xFDA
  3520                           fsr2l	equ	0xFD9
  3521                           status	equ	0xFD8
  3522                           
  3523 ;; *************** function _UART_buff_get *****************
  3524 ;; Defined at:
  3525 ;;		line 81 in file "UART.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;  _this           2    0[BANK0 ] PTR struct UART_ring_buf
  3528 ;;		 -> output_buffer(206), input_buffer(206), 
  3529 ;; Auto vars:     Size  Location     Type
  3530 ;;  c               1   32[COMRAM] unsigned char 
  3531 ;; Return value:  Size  Location     Type
  3532 ;;                  1    wreg      unsigned char 
  3533 ;; Registers used:
  3534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 0/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3540 ;;      Params:         0       2       0       0       0       0       0
  3541 ;;      Locals:         1       0       0       0       0       0       0
  3542 ;;      Temps:          0       2       0       0       0       0       0
  3543 ;;      Totals:         1       4       0       0       0       0       0
  3544 ;;Total ram usage:        5 bytes
  3545 ;; Hardware stack levels used:    1
  3546 ;; Hardware stack levels required when called:    5
  3547 ;; This function calls:
  3548 ;;		_UART_buff_modulo_inc
  3549 ;; This function is called by:
  3550 ;;		_Receive_get
  3551 ;;		_Send_put
  3552 ;; This function uses a non-reentrant model
  3553 ;;
  3554                           
  3555                           	psect	text15
  3556  000D06                     __ptext15:
  3557                           	opt stack 0
  3558  000D06                     _UART_buff_get:
  3559                           	opt stack 21
  3560                           
  3561                           ;UART.c: 82: unsigned char c;
  3562                           ;UART.c: 83: if (_this->count > 0) {
  3563                           
  3564                           ;incstack = 0
  3565  000D06  0100               	movlb	0	; () banked
  3566  000D08  EE20 F0CC          	lfsr	2,204
  3567  000D0C  517F               	movf	UART_buff_get@_this& (0+255),w,b
  3568  000D0E  26D9               	addwf	fsr2l,f,c
  3569  000D10  5180               	movf	(UART_buff_get@_this+1)& (0+255),w,b
  3570  000D12  22DA               	addwfc	fsr2h,f,c
  3571  000D14  0E01               	movlw	1
  3572  000D16  BEDB               	btfsc	plusw2,7,c
  3573  000D18  D044               	goto	l2397
  3574  000D1A  0E01               	movlw	1
  3575  000D1C  50DB               	movf	plusw2,w,c
  3576  000D1E  E103               	bnz	u2210
  3577  000D20  04DE               	decf	postinc2,w,c
  3578  000D22  A0D8               	btfss	status,0,c
  3579  000D24  D03E               	goto	l2397
  3580  000D26                     u2210:
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;UART.c: 84: c = _this->buf[_this->tail];
  3584  000D26  0100               	movlb	0	; () banked
  3585  000D28  EE20 F0CA          	lfsr	2,202
  3586  000D2C  517F               	movf	UART_buff_get@_this& (0+255),w,b
  3587  000D2E  26D9               	addwf	fsr2l,f,c
  3588  000D30  5180               	movf	(UART_buff_get@_this+1)& (0+255),w,b
  3589  000D32  22DA               	addwfc	fsr2h,f,c
  3590  000D34  CFDE F081          	movff	postinc2,??_UART_buff_get
  3591  000D38  CFDD F082          	movff	postdec2,??_UART_buff_get+1
  3592  000D3C  0100               	movlb	0	; () banked
  3593  000D3E  5181               	movf	??_UART_buff_get& (0+255),w,b
  3594  000D40  0100               	movlb	0	; () banked
  3595  000D42  257F               	addwf	UART_buff_get@_this& (0+255),w,b
  3596  000D44  6ED9               	movwf	fsr2l,c
  3597  000D46  0100               	movlb	0	; () banked
  3598  000D48  5182               	movf	(??_UART_buff_get+1)& (0+255),w,b
  3599  000D4A  0100               	movlb	0	; () banked
  3600  000D4C  2180               	addwfc	(UART_buff_get@_this+1)& (0+255),w,b
  3601  000D4E  6EDA               	movwf	fsr2h,c
  3602  000D50  50DF               	movf	indf2,w,c
  3603  000D52  6E43               	movwf	UART_buff_get@c,c
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3607  000D54  0100               	movlb	0	; () banked
  3608  000D56  EE20 F0CA          	lfsr	2,202
  3609  000D5A  517F               	movf	UART_buff_get@_this& (0+255),w,b
  3610  000D5C  26D9               	addwf	fsr2l,f,c
  3611  000D5E  5180               	movf	(UART_buff_get@_this+1)& (0+255),w,b
  3612  000D60  22DA               	addwfc	fsr2h,f,c
  3613  000D62  CFDE F03D          	movff	postinc2,UART_buff_modulo_inc@value
  3614  000D66  CFDD F03E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3615  000D6A  0E00               	movlw	0
  3616  000D6C  6E40               	movwf	UART_buff_modulo_inc@modulus+1,c
  3617  000D6E  0EC8               	movlw	200
  3618  000D70  6E3F               	movwf	UART_buff_modulo_inc@modulus,c
  3619  000D72  EC4F  F009         	call	_UART_buff_modulo_inc	;wreg free
  3620  000D76  0100               	movlb	0	; () banked
  3621  000D78  EE20 F0CA          	lfsr	2,202
  3622  000D7C  517F               	movf	UART_buff_get@_this& (0+255),w,b
  3623  000D7E  26D9               	addwf	fsr2l,f,c
  3624  000D80  5180               	movf	(UART_buff_get@_this+1)& (0+255),w,b
  3625  000D82  22DA               	addwfc	fsr2h,f,c
  3626  000D84  C03D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3627  000D88  C03E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;UART.c: 86: --_this->count;
  3631  000D8C  0100               	movlb	0	; () banked
  3632  000D8E  EE20 F0CC          	lfsr	2,204
  3633  000D92  517F               	movf	UART_buff_get@_this& (0+255),w,b
  3634  000D94  26D9               	addwf	fsr2l,f,c
  3635  000D96  5180               	movf	(UART_buff_get@_this+1)& (0+255),w,b
  3636  000D98  22DA               	addwfc	fsr2h,f,c
  3637  000D9A  06DE               	decf	postinc2,f,c
  3638  000D9C  0E00               	movlw	0
  3639  000D9E  5ADD               	subwfb	postdec2,f,c
  3640                           
  3641                           ;UART.c: 87: } else {
  3642  000DA0  D002               	goto	l286
  3643  000DA2                     l2397:
  3644                           
  3645                           ; BSR set to: 0
  3646                           ;UART.c: 88: c = 0;
  3647  000DA2  0E00               	movlw	0
  3648  000DA4  6E43               	movwf	UART_buff_get@c,c
  3649  000DA6                     l286:
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;UART.c: 89: }
  3653                           ;UART.c: 90: return (c);
  3654  000DA6  5043               	movf	UART_buff_get@c,w,c
  3655  000DA8  0012               	return	
  3656  000DAA                     __end_of_UART_buff_get:
  3657                           	opt stack 0
  3658                           tosu	equ	0xFFF
  3659                           tosh	equ	0xFFE
  3660                           tosl	equ	0xFFD
  3661                           pclath	equ	0xFFA
  3662                           tblptru	equ	0xFF8
  3663                           tblptrh	equ	0xFF7
  3664                           tblptrl	equ	0xFF6
  3665                           tablat	equ	0xFF5
  3666                           prodh	equ	0xFF4
  3667                           prodl	equ	0xFF3
  3668                           postinc0	equ	0xFEE
  3669                           wreg	equ	0xFE8
  3670                           indf2	equ	0xFDF
  3671                           postinc2	equ	0xFDE
  3672                           postdec2	equ	0xFDD
  3673                           plusw2	equ	0xFDB
  3674                           fsr2h	equ	0xFDA
  3675                           fsr2l	equ	0xFD9
  3676                           status	equ	0xFD8
  3677                           
  3678 ;; *************** function _UART_buff_modulo_inc *****************
  3679 ;; Defined at:
  3680 ;;		line 106 in file "UART.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;  value           2   26[COMRAM] const unsigned int 
  3683 ;;  modulus         2   28[COMRAM] const unsigned int 
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;  my_value        2   30[COMRAM] unsigned int 
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  2   26[COMRAM] unsigned int 
  3688 ;; Registers used:
  3689 ;;		wreg, status,2, status,0
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3695 ;;      Params:         4       0       0       0       0       0       0
  3696 ;;      Locals:         2       0       0       0       0       0       0
  3697 ;;      Temps:          0       0       0       0       0       0       0
  3698 ;;      Totals:         6       0       0       0       0       0       0
  3699 ;;Total ram usage:        6 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; Hardware stack levels required when called:    4
  3702 ;; This function calls:
  3703 ;;		Nothing
  3704 ;; This function is called by:
  3705 ;;		_UART_buff_put
  3706 ;;		_UART_buff_get
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           	psect	text16
  3711  00129E                     __ptext16:
  3712                           	opt stack 0
  3713  00129E                     _UART_buff_modulo_inc:
  3714                           	opt stack 21
  3715                           
  3716                           ;UART.c: 107: unsigned int my_value = value + 1;
  3717                           
  3718                           ; BSR set to: 0
  3719                           ;incstack = 0
  3720  00129E  0E01               	movlw	1
  3721  0012A0  243D               	addwf	UART_buff_modulo_inc@value,w,c
  3722  0012A2  6E41               	movwf	UART_buff_modulo_inc@my_value,c
  3723  0012A4  0E00               	movlw	0
  3724  0012A6  203E               	addwfc	UART_buff_modulo_inc@value+1,w,c
  3725  0012A8  6E42               	movwf	UART_buff_modulo_inc@my_value+1,c
  3726                           
  3727                           ;UART.c: 108: if (my_value >= modulus) {
  3728  0012AA  503F               	movf	UART_buff_modulo_inc@modulus,w,c
  3729  0012AC  5C41               	subwf	UART_buff_modulo_inc@my_value,w,c
  3730  0012AE  5040               	movf	UART_buff_modulo_inc@modulus+1,w,c
  3731  0012B0  5842               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  3732  0012B2  A0D8               	btfss	status,0,c
  3733  0012B4  D004               	goto	l2363
  3734                           
  3735                           ;UART.c: 109: my_value = 0;
  3736  0012B6  0E00               	movlw	0
  3737  0012B8  6E42               	movwf	UART_buff_modulo_inc@my_value+1,c
  3738  0012BA  0E00               	movlw	0
  3739  0012BC  6E41               	movwf	UART_buff_modulo_inc@my_value,c
  3740  0012BE                     l2363:
  3741                           
  3742                           ;UART.c: 110: }
  3743                           ;UART.c: 111: return (my_value);
  3744  0012BE  C041  F03D         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  3745  0012C2  C042  F03E         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  3746  0012C6  0012               	return	
  3747  0012C8                     __end_of_UART_buff_modulo_inc:
  3748                           	opt stack 0
  3749                           tosu	equ	0xFFF
  3750                           tosh	equ	0xFFE
  3751                           tosl	equ	0xFFD
  3752                           pclath	equ	0xFFA
  3753                           tblptru	equ	0xFF8
  3754                           tblptrh	equ	0xFF7
  3755                           tblptrl	equ	0xFF6
  3756                           tablat	equ	0xFF5
  3757                           prodh	equ	0xFF4
  3758                           prodl	equ	0xFF3
  3759                           postinc0	equ	0xFEE
  3760                           wreg	equ	0xFE8
  3761                           indf2	equ	0xFDF
  3762                           postinc2	equ	0xFDE
  3763                           postdec2	equ	0xFDD
  3764                           plusw2	equ	0xFDB
  3765                           fsr2h	equ	0xFDA
  3766                           fsr2l	equ	0xFD9
  3767                           status	equ	0xFD8
  3768                           
  3769 ;; *************** function _Receive_available *****************
  3770 ;; Defined at:
  3771 ;;		line 122 in file "UART.c"
  3772 ;; Parameters:    Size  Location     Type
  3773 ;;		None
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;		None
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  2   28[COMRAM] int 
  3778 ;; Registers used:
  3779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3785 ;;      Params:         2       0       0       0       0       0       0
  3786 ;;      Locals:         0       0       0       0       0       0       0
  3787 ;;      Temps:          0       0       0       0       0       0       0
  3788 ;;      Totals:         2       0       0       0       0       0       0
  3789 ;;Total ram usage:        2 bytes
  3790 ;; Hardware stack levels used:    1
  3791 ;; Hardware stack levels required when called:    5
  3792 ;; This function calls:
  3793 ;;		_UART_buff_size
  3794 ;; This function is called by:
  3795 ;;		_ComStart
  3796 ;;		_receiveData
  3797 ;;		_CRCcheck
  3798 ;; This function uses a non-reentrant model
  3799 ;;
  3800                           
  3801                           	psect	text17
  3802  0013D2                     __ptext17:
  3803                           	opt stack 0
  3804  0013D2                     _Receive_available:
  3805                           	opt stack 23
  3806                           
  3807                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  3808                           
  3809                           ;incstack = 0
  3810  0013D2  0E00               	movlw	low _input_buffer
  3811  0013D4  6E3D               	movwf	UART_buff_size@_this,c
  3812  0013D6  0E03               	movlw	high _input_buffer
  3813  0013D8  6E3E               	movwf	UART_buff_size@_this+1,c
  3814  0013DA  ECF4  F009         	call	_UART_buff_size	;wreg free
  3815  0013DE  C03D  F03F         	movff	?_UART_buff_size,?_Receive_available
  3816  0013E2  C03E  F040         	movff	?_UART_buff_size+1,?_Receive_available+1
  3817  0013E6  0012               	return	
  3818  0013E8                     __end_of_Receive_available:
  3819                           	opt stack 0
  3820                           tosu	equ	0xFFF
  3821                           tosh	equ	0xFFE
  3822                           tosl	equ	0xFFD
  3823                           pclath	equ	0xFFA
  3824                           tblptru	equ	0xFF8
  3825                           tblptrh	equ	0xFF7
  3826                           tblptrl	equ	0xFF6
  3827                           tablat	equ	0xFF5
  3828                           prodh	equ	0xFF4
  3829                           prodl	equ	0xFF3
  3830                           postinc0	equ	0xFEE
  3831                           wreg	equ	0xFE8
  3832                           indf2	equ	0xFDF
  3833                           postinc2	equ	0xFDE
  3834                           postdec2	equ	0xFDD
  3835                           plusw2	equ	0xFDB
  3836                           fsr2h	equ	0xFDA
  3837                           fsr2l	equ	0xFD9
  3838                           status	equ	0xFD8
  3839                           
  3840 ;; *************** function _UART_buff_size *****************
  3841 ;; Defined at:
  3842 ;;		line 102 in file "UART.c"
  3843 ;; Parameters:    Size  Location     Type
  3844 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3845 ;;		 -> output_buffer(206), input_buffer(206), 
  3846 ;; Auto vars:     Size  Location     Type
  3847 ;;		None
  3848 ;; Return value:  Size  Location     Type
  3849 ;;                  2   26[COMRAM] int 
  3850 ;; Registers used:
  3851 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3852 ;; Tracked objects:
  3853 ;;		On entry : 0/0
  3854 ;;		On exit  : 0/0
  3855 ;;		Unchanged: 0/0
  3856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3857 ;;      Params:         2       0       0       0       0       0       0
  3858 ;;      Locals:         0       0       0       0       0       0       0
  3859 ;;      Temps:          0       0       0       0       0       0       0
  3860 ;;      Totals:         2       0       0       0       0       0       0
  3861 ;;Total ram usage:        2 bytes
  3862 ;; Hardware stack levels used:    1
  3863 ;; Hardware stack levels required when called:    4
  3864 ;; This function calls:
  3865 ;;		Nothing
  3866 ;; This function is called by:
  3867 ;;		_Receive_available
  3868 ;; This function uses a non-reentrant model
  3869 ;;
  3870                           
  3871                           	psect	text18
  3872  0013E8                     __ptext18:
  3873                           	opt stack 0
  3874  0013E8                     _UART_buff_size:
  3875                           	opt stack 23
  3876                           
  3877                           ;UART.c: 103: return (_this->count);
  3878                           
  3879                           ;incstack = 0
  3880  0013E8  EE20 F0CC          	lfsr	2,204
  3881  0013EC  503D               	movf	UART_buff_size@_this,w,c
  3882  0013EE  26D9               	addwf	fsr2l,f,c
  3883  0013F0  503E               	movf	UART_buff_size@_this+1,w,c
  3884  0013F2  22DA               	addwfc	fsr2h,f,c
  3885  0013F4  CFDE F03D          	movff	postinc2,?_UART_buff_size
  3886  0013F8  CFDD F03E          	movff	postdec2,?_UART_buff_size+1
  3887  0013FC  0012               	return	
  3888  0013FE                     __end_of_UART_buff_size:
  3889                           	opt stack 0
  3890                           tosu	equ	0xFFF
  3891                           tosh	equ	0xFFE
  3892                           tosl	equ	0xFFD
  3893                           pclath	equ	0xFFA
  3894                           tblptru	equ	0xFF8
  3895                           tblptrh	equ	0xFF7
  3896                           tblptrl	equ	0xFF6
  3897                           tablat	equ	0xFF5
  3898                           prodh	equ	0xFF4
  3899                           prodl	equ	0xFF3
  3900                           postinc0	equ	0xFEE
  3901                           wreg	equ	0xFE8
  3902                           indf2	equ	0xFDF
  3903                           postinc2	equ	0xFDE
  3904                           postdec2	equ	0xFDD
  3905                           plusw2	equ	0xFDB
  3906                           fsr2h	equ	0xFDA
  3907                           fsr2l	equ	0xFD9
  3908                           status	equ	0xFD8
  3909                           
  3910 ;; *************** function _CRC8 *****************
  3911 ;; Defined at:
  3912 ;;		line 89 in file "FastTransfer.c"
  3913 ;; Parameters:    Size  Location     Type
  3914 ;;  data            2   26[COMRAM] PTR const unsigned char 
  3915 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_324(3), receiveData@holder(3), 
  3916 ;;		 -> rx_buffer(200), ring_buffer(206), 
  3917 ;;  len             1   28[COMRAM] unsigned char 
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;  sum             1   29[COMRAM] unsigned char 
  3920 ;;  tempI           1   31[COMRAM] unsigned char 
  3921 ;;  extract         1   30[COMRAM] unsigned char 
  3922 ;;  crc             1   32[COMRAM] unsigned char 
  3923 ;; Return value:  Size  Location     Type
  3924 ;;                  1    wreg      unsigned char 
  3925 ;; Registers used:
  3926 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3927 ;; Tracked objects:
  3928 ;;		On entry : 0/0
  3929 ;;		On exit  : 0/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3932 ;;      Params:         3       0       0       0       0       0       0
  3933 ;;      Locals:         4       0       0       0       0       0       0
  3934 ;;      Temps:          0       0       0       0       0       0       0
  3935 ;;      Totals:         7       0       0       0       0       0       0
  3936 ;;Total ram usage:        7 bytes
  3937 ;; Hardware stack levels used:    1
  3938 ;; Hardware stack levels required when called:    4
  3939 ;; This function calls:
  3940 ;;		Nothing
  3941 ;; This function is called by:
  3942 ;;		_sendData
  3943 ;;		_receiveData
  3944 ;;		_CRCcheck
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           	psect	text19
  3949  00111A                     __ptext19:
  3950                           	opt stack 0
  3951  00111A                     _CRC8:
  3952                           	opt stack 23
  3953                           
  3954                           ;FastTransfer.c: 90: unsigned char crc = 0x00;
  3955                           
  3956                           ;incstack = 0
  3957  00111A  0E00               	movlw	0
  3958  00111C  6E43               	movwf	CRC8@crc,c
  3959                           
  3960                           ;FastTransfer.c: 91: while (len--) {
  3961  00111E  D01C               	goto	l2419
  3962  001120                     l2403:
  3963                           
  3964                           ;FastTransfer.c: 92: unsigned char extract = *data++;
  3965  001120  C03D  FFD9         	movff	CRC8@data,fsr2l
  3966  001124  C03E  FFDA         	movff	CRC8@data+1,fsr2h
  3967  001128  50DF               	movf	indf2,w,c
  3968  00112A  6E41               	movwf	CRC8@extract,c
  3969  00112C  4A3D               	infsnz	CRC8@data,f,c
  3970  00112E  2A3E               	incf	CRC8@data+1,f,c
  3971                           
  3972                           ;FastTransfer.c: 93: unsigned char tempI;
  3973                           ;FastTransfer.c: 94: for (tempI = 8; tempI; tempI--) {
  3974  001130  0E08               	movlw	8
  3975  001132  6E42               	movwf	CRC8@tempI,c
  3976  001134  D00E               	goto	l2417
  3977  001136                     l2409:
  3978                           
  3979                           ;FastTransfer.c: 95: unsigned char sum = (crc ^ extract) & 0x01;
  3980  001136  5043               	movf	CRC8@crc,w,c
  3981  001138  1841               	xorwf	CRC8@extract,w,c
  3982  00113A  0B01               	andlw	1
  3983  00113C  6E40               	movwf	CRC8@sum,c
  3984                           
  3985                           ;FastTransfer.c: 96: crc >>= 1;
  3986  00113E  90D8               	bcf	status,0,c
  3987  001140  3243               	rrcf	CRC8@crc,f,c
  3988                           
  3989                           ;FastTransfer.c: 97: if (sum) {
  3990  001142  5040               	movf	CRC8@sum,w,c
  3991  001144  B4D8               	btfsc	status,2,c
  3992  001146  D002               	goto	l110
  3993                           
  3994                           ;FastTransfer.c: 98: crc ^= 0x8C;
  3995  001148  0E8C               	movlw	140
  3996  00114A  1A43               	xorwf	CRC8@crc,f,c
  3997  00114C                     l110:
  3998                           
  3999                           ;FastTransfer.c: 99: }
  4000                           ;FastTransfer.c: 100: extract >>= 1;
  4001  00114C  90D8               	bcf	status,0,c
  4002  00114E  3241               	rrcf	CRC8@extract,f,c
  4003  001150  0642               	decf	CRC8@tempI,f,c
  4004  001152                     l2417:
  4005  001152  5042               	movf	CRC8@tempI,w,c
  4006  001154  A4D8               	btfss	status,2,c
  4007  001156  D7EF               	goto	l2409
  4008  001158                     l2419:
  4009  001158  063F               	decf	CRC8@len,f,c
  4010  00115A  283F               	incf	CRC8@len,w,c
  4011  00115C  A4D8               	btfss	status,2,c
  4012  00115E  D7E0               	goto	l2403
  4013                           
  4014                           ;FastTransfer.c: 101: }
  4015                           ;FastTransfer.c: 102: }
  4016                           ;FastTransfer.c: 103: return crc;
  4017  001160  5043               	movf	CRC8@crc,w,c
  4018  001162  0012               	return	
  4019  001164                     __end_of_CRC8:
  4020                           	opt stack 0
  4021                           tosu	equ	0xFFF
  4022                           tosh	equ	0xFFE
  4023                           tosl	equ	0xFFD
  4024                           pclath	equ	0xFFA
  4025                           tblptru	equ	0xFF8
  4026                           tblptrh	equ	0xFF7
  4027                           tblptrl	equ	0xFF6
  4028                           tablat	equ	0xFF5
  4029                           prodh	equ	0xFF4
  4030                           prodl	equ	0xFF3
  4031                           postinc0	equ	0xFEE
  4032                           wreg	equ	0xFE8
  4033                           indf2	equ	0xFDF
  4034                           postinc2	equ	0xFDE
  4035                           postdec2	equ	0xFDD
  4036                           plusw2	equ	0xFDB
  4037                           fsr2h	equ	0xFDA
  4038                           fsr2l	equ	0xFD9
  4039                           status	equ	0xFD8
  4040                           
  4041 ;; *************** function _Start *****************
  4042 ;; Defined at:
  4043 ;;		line 50 in file "Function.c"
  4044 ;; Parameters:    Size  Location     Type
  4045 ;;		None
  4046 ;; Auto vars:     Size  Location     Type
  4047 ;;		None
  4048 ;; Return value:  Size  Location     Type
  4049 ;;                  1    wreg      void 
  4050 ;; Registers used:
  4051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4052 ;; Tracked objects:
  4053 ;;		On entry : 0/0
  4054 ;;		On exit  : 0/0
  4055 ;;		Unchanged: 0/0
  4056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4057 ;;      Params:         0       0       0       0       0       0       0
  4058 ;;      Locals:         0       0       0       0       0       0       0
  4059 ;;      Temps:          0       0       0       0       0       0       0
  4060 ;;      Totals:         0       0       0       0       0       0       0
  4061 ;;Total ram usage:        0 bytes
  4062 ;; Hardware stack levels used:    1
  4063 ;; Hardware stack levels required when called:    8
  4064 ;; This function calls:
  4065 ;;		_ComStart
  4066 ;;		_INTERRUPT_Initialize
  4067 ;;		_TMR0_Initialize
  4068 ;; This function is called by:
  4069 ;;		_main
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           	psect	text20
  4074  0010C4                     __ptext20:
  4075                           	opt stack 0
  4076  0010C4                     _Start:
  4077                           	opt stack 22
  4078                           
  4079                           ;Function.c: 115: TRISCbits.TRISC5 = 1;
  4080                           
  4081                           ;incstack = 0
  4082  0010C4  8A94               	bsf	3988,5,c	;volatile
  4083                           
  4084                           ;Function.c: 116: TRISCbits.TRISC4 = 1;
  4085  0010C6  8894               	bsf	3988,4,c	;volatile
  4086                           
  4087                           ;Function.c: 117: TRISDbits.TRISD3 = 1;
  4088  0010C8  8695               	bsf	3989,3,c	;volatile
  4089                           
  4090                           ;Function.c: 118: TRISDbits.TRISD2 = 1;
  4091  0010CA  8495               	bsf	3989,2,c	;volatile
  4092                           
  4093                           ;Function.c: 119: TRISDbits.TRISD1 = 1;
  4094  0010CC  8295               	bsf	3989,1,c	;volatile
  4095                           
  4096                           ;Function.c: 120: TRISDbits.TRISD0 = 1;
  4097  0010CE  8095               	bsf	3989,0,c	;volatile
  4098                           
  4099                           ;Function.c: 121: TRISCbits.TRISC3 = 1;
  4100  0010D0  8694               	bsf	3988,3,c	;volatile
  4101                           
  4102                           ;Function.c: 122: TRISCbits.TRISC2 = 1;
  4103  0010D2  8494               	bsf	3988,2,c	;volatile
  4104                           
  4105                           ;Function.c: 123: TRISCbits.TRISC1 = 1;
  4106  0010D4  8294               	bsf	3988,1,c	;volatile
  4107                           
  4108                           ;Function.c: 124: TRISAbits.TRISA7 = 1;
  4109  0010D6  8E92               	bsf	3986,7,c	;volatile
  4110                           
  4111                           ;Function.c: 125: TRISCbits.TRISC0 = 1;
  4112  0010D8  8094               	bsf	3988,0,c	;volatile
  4113                           
  4114                           ;Function.c: 126: TRISAbits.TRISA4 = 1;
  4115  0010DA  8892               	bsf	3986,4,c	;volatile
  4116                           
  4117                           ;Function.c: 127: TRISAbits.TRISA6 = 1;
  4118  0010DC  8C92               	bsf	3986,6,c	;volatile
  4119                           
  4120                           ;Function.c: 130: TRISAbits.TRISA3 = 0;
  4121  0010DE  9692               	bcf	3986,3,c	;volatile
  4122                           
  4123                           ;Function.c: 131: TRISDbits.TRISD4 = 0;
  4124  0010E0  9895               	bcf	3989,4,c	;volatile
  4125                           
  4126                           ;Function.c: 136: ANSELA = 0;
  4127  0010E2  0E00               	movlw	0
  4128  0010E4  010F               	movlb	15	; () banked
  4129  0010E6  6F38               	movwf	56,b	;volatile
  4130                           
  4131                           ;Function.c: 137: ANSELB = 0;
  4132  0010E8  0E00               	movlw	0
  4133  0010EA  010F               	movlb	15	; () banked
  4134  0010EC  6F39               	movwf	57,b	;volatile
  4135                           
  4136                           ;Function.c: 138: ANSELC = 0;
  4137  0010EE  0E00               	movlw	0
  4138  0010F0  010F               	movlb	15	; () banked
  4139  0010F2  6F3A               	movwf	58,b	;volatile
  4140                           
  4141                           ;Function.c: 139: ANSELD = 0;
  4142  0010F4  0E00               	movlw	0
  4143  0010F6  010F               	movlb	15	; () banked
  4144  0010F8  6F3B               	movwf	59,b	;volatile
  4145                           
  4146                           ;Function.c: 140: ANSELE = 0;
  4147  0010FA  0E00               	movlw	0
  4148  0010FC  010F               	movlb	15	; () banked
  4149  0010FE  6F3C               	movwf	60,b	;volatile
  4150                           
  4151                           ;Function.c: 144: OSCCON = 0x72;
  4152  001100  0E72               	movlw	114
  4153  001102  6ED3               	movwf	4051,c	;volatile
  4154                           
  4155                           ;Function.c: 146: OSCCON2 = 0x04;
  4156  001104  0E04               	movlw	4
  4157  001106  6ED2               	movwf	4050,c	;volatile
  4158                           
  4159                           ;Function.c: 148: OSCTUNE = 0x00;
  4160  001108  0E00               	movlw	0
  4161  00110A  6E9B               	movwf	3995,c	;volatile
  4162                           
  4163                           ; BSR set to: 15
  4164                           ;Function.c: 151: ComStart();
  4165  00110C  EC0A  F008         	call	_ComStart	;wreg free
  4166                           
  4167                           ;Function.c: 152: INTERRUPT_Initialize();
  4168  001110  ECD2  F009         	call	_INTERRUPT_Initialize	;wreg free
  4169                           
  4170                           ;Function.c: 153: TMR0_Initialize();
  4171  001114  EC98  F009         	call	_TMR0_Initialize	;wreg free
  4172  001118  0012               	return		;funcret
  4173  00111A                     __end_of_Start:
  4174                           	opt stack 0
  4175                           tosu	equ	0xFFF
  4176                           tosh	equ	0xFFE
  4177                           tosl	equ	0xFFD
  4178                           pclath	equ	0xFFA
  4179                           tblptru	equ	0xFF8
  4180                           tblptrh	equ	0xFF7
  4181                           tblptrl	equ	0xFF6
  4182                           tablat	equ	0xFF5
  4183                           prodh	equ	0xFF4
  4184                           prodl	equ	0xFF3
  4185                           postinc0	equ	0xFEE
  4186                           wreg	equ	0xFE8
  4187                           indf2	equ	0xFDF
  4188                           postinc2	equ	0xFDE
  4189                           postdec2	equ	0xFDD
  4190                           plusw2	equ	0xFDB
  4191                           fsr2h	equ	0xFDA
  4192                           fsr2l	equ	0xFD9
  4193                           status	equ	0xFD8
  4194                           
  4195 ;; *************** function _TMR0_Initialize *****************
  4196 ;; Defined at:
  4197 ;;		line 23 in file "tmr0.c"
  4198 ;; Parameters:    Size  Location     Type
  4199 ;;		None
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;		None
  4202 ;; Return value:  Size  Location     Type
  4203 ;;                  1    wreg      void 
  4204 ;; Registers used:
  4205 ;;		wreg, status,2, cstack
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 0/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4211 ;;      Params:         0       0       0       0       0       0       0
  4212 ;;      Locals:         0       0       0       0       0       0       0
  4213 ;;      Temps:          0       0       0       0       0       0       0
  4214 ;;      Totals:         0       0       0       0       0       0       0
  4215 ;;Total ram usage:        0 bytes
  4216 ;; Hardware stack levels used:    1
  4217 ;; Hardware stack levels required when called:    5
  4218 ;; This function calls:
  4219 ;;		_TMR0_StartTimer
  4220 ;; This function is called by:
  4221 ;;		_Start
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225                           	psect	text21
  4226  001330                     __ptext21:
  4227                           	opt stack 0
  4228  001330                     _TMR0_Initialize:
  4229                           	opt stack 24
  4230                           
  4231                           ;tmr0.c: 27: T0CON = 0x94;
  4232                           
  4233                           ;incstack = 0
  4234  001330  0E94               	movlw	148
  4235  001332  6ED5               	movwf	4053,c	;volatile
  4236                           
  4237                           ;tmr0.c: 30: TMR0H = 0xCF;
  4238  001334  0ECF               	movlw	207
  4239  001336  6ED7               	movwf	4055,c	;volatile
  4240                           
  4241                           ;tmr0.c: 33: TMR0L = 0x2C;
  4242  001338  0E2C               	movlw	44
  4243  00133A  6ED6               	movwf	4054,c	;volatile
  4244                           
  4245                           ;tmr0.c: 36: timer0ReloadVal16bit = 53036;
  4246  00133C  0ECF               	movlw	207
  4247  00133E  6E18               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  4248  001340  0E2C               	movlw	44
  4249  001342  6E17               	movwf	_timer0ReloadVal16bit,c	;volatile
  4250                           
  4251                           ;tmr0.c: 39: INTCONbits.TMR0IF = 0;
  4252  001344  94F2               	bcf	intcon,2,c	;volatile
  4253                           
  4254                           ;tmr0.c: 42: INTCONbits.TMR0IE = 1;
  4255  001346  8AF2               	bsf	intcon,5,c	;volatile
  4256                           
  4257                           ;tmr0.c: 45: TMR0_StartTimer();
  4258  001348  EC2C  F00A         	call	_TMR0_StartTimer	;wreg free
  4259  00134C  0012               	return		;funcret
  4260  00134E                     __end_of_TMR0_Initialize:
  4261                           	opt stack 0
  4262                           tosu	equ	0xFFF
  4263                           tosh	equ	0xFFE
  4264                           tosl	equ	0xFFD
  4265                           pclath	equ	0xFFA
  4266                           tblptru	equ	0xFF8
  4267                           tblptrh	equ	0xFF7
  4268                           tblptrl	equ	0xFF6
  4269                           tablat	equ	0xFF5
  4270                           prodh	equ	0xFF4
  4271                           prodl	equ	0xFF3
  4272                           intcon	equ	0xFF2
  4273                           postinc0	equ	0xFEE
  4274                           wreg	equ	0xFE8
  4275                           indf2	equ	0xFDF
  4276                           postinc2	equ	0xFDE
  4277                           postdec2	equ	0xFDD
  4278                           plusw2	equ	0xFDB
  4279                           fsr2h	equ	0xFDA
  4280                           fsr2l	equ	0xFD9
  4281                           status	equ	0xFD8
  4282                           
  4283 ;; *************** function _TMR0_StartTimer *****************
  4284 ;; Defined at:
  4285 ;;		line 48 in file "tmr0.c"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;		None
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;		None
  4290 ;; Return value:  Size  Location     Type
  4291 ;;                  1    wreg      void 
  4292 ;; Registers used:
  4293 ;;		None
  4294 ;; Tracked objects:
  4295 ;;		On entry : 0/0
  4296 ;;		On exit  : 0/0
  4297 ;;		Unchanged: 0/0
  4298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4299 ;;      Params:         0       0       0       0       0       0       0
  4300 ;;      Locals:         0       0       0       0       0       0       0
  4301 ;;      Temps:          0       0       0       0       0       0       0
  4302 ;;      Totals:         0       0       0       0       0       0       0
  4303 ;;Total ram usage:        0 bytes
  4304 ;; Hardware stack levels used:    1
  4305 ;; Hardware stack levels required when called:    4
  4306 ;; This function calls:
  4307 ;;		Nothing
  4308 ;; This function is called by:
  4309 ;;		_TMR0_Initialize
  4310 ;; This function uses a non-reentrant model
  4311 ;;
  4312                           
  4313                           	psect	text22
  4314  001458                     __ptext22:
  4315                           	opt stack 0
  4316  001458                     _TMR0_StartTimer:
  4317                           	opt stack 24
  4318                           
  4319                           ;tmr0.c: 50: T0CONbits.TMR0ON = 1;
  4320                           
  4321                           ;incstack = 0
  4322  001458  8ED5               	bsf	4053,7,c	;volatile
  4323  00145A  0012               	return		;funcret
  4324  00145C                     __end_of_TMR0_StartTimer:
  4325                           	opt stack 0
  4326                           tosu	equ	0xFFF
  4327                           tosh	equ	0xFFE
  4328                           tosl	equ	0xFFD
  4329                           pclath	equ	0xFFA
  4330                           tblptru	equ	0xFF8
  4331                           tblptrh	equ	0xFF7
  4332                           tblptrl	equ	0xFF6
  4333                           tablat	equ	0xFF5
  4334                           prodh	equ	0xFF4
  4335                           prodl	equ	0xFF3
  4336                           intcon	equ	0xFF2
  4337                           postinc0	equ	0xFEE
  4338                           wreg	equ	0xFE8
  4339                           indf2	equ	0xFDF
  4340                           postinc2	equ	0xFDE
  4341                           postdec2	equ	0xFDD
  4342                           plusw2	equ	0xFDB
  4343                           fsr2h	equ	0xFDA
  4344                           fsr2l	equ	0xFD9
  4345                           status	equ	0xFD8
  4346                           
  4347 ;; *************** function _INTERRUPT_Initialize *****************
  4348 ;; Defined at:
  4349 ;;		line 156 in file "Function.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;		None
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;		None
  4354 ;; Return value:  Size  Location     Type
  4355 ;;                  1    wreg      void 
  4356 ;; Registers used:
  4357 ;;		None
  4358 ;; Tracked objects:
  4359 ;;		On entry : 0/0
  4360 ;;		On exit  : 0/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4363 ;;      Params:         0       0       0       0       0       0       0
  4364 ;;      Locals:         0       0       0       0       0       0       0
  4365 ;;      Temps:          0       0       0       0       0       0       0
  4366 ;;      Totals:         0       0       0       0       0       0       0
  4367 ;;Total ram usage:        0 bytes
  4368 ;; Hardware stack levels used:    1
  4369 ;; Hardware stack levels required when called:    4
  4370 ;; This function calls:
  4371 ;;		Nothing
  4372 ;; This function is called by:
  4373 ;;		_Start
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           	psect	text23
  4378  0013A4                     __ptext23:
  4379                           	opt stack 0
  4380  0013A4                     _INTERRUPT_Initialize:
  4381                           	opt stack 25
  4382                           
  4383                           ;Function.c: 158: INTCONbits.PEIE = 1;
  4384                           
  4385                           ;incstack = 0
  4386  0013A4  8CF2               	bsf	intcon,6,c	;volatile
  4387                           
  4388                           ;Function.c: 159: INTCONbits.GIE = 1;
  4389  0013A6  8EF2               	bsf	intcon,7,c	;volatile
  4390                           
  4391                           ;Function.c: 161: RCONbits.IPEN = 0;
  4392  0013A8  9ED0               	bcf	4048,7,c	;volatile
  4393                           
  4394                           ;Function.c: 166: IPR1bits.RC1IP = 0;
  4395  0013AA  9A9F               	bcf	3999,5,c	;volatile
  4396                           
  4397                           ;Function.c: 168: IPR1bits.TX1IP = 0;
  4398  0013AC  989F               	bcf	3999,4,c	;volatile
  4399                           
  4400                           ;Function.c: 171: INTCONbits.TMR0IF = 0;
  4401  0013AE  94F2               	bcf	intcon,2,c	;volatile
  4402                           
  4403                           ;Function.c: 174: INTCONbits.TMR0IE = 1;
  4404  0013B0  8AF2               	bsf	intcon,5,c	;volatile
  4405                           
  4406                           ;Function.c: 176: IPR1bits.ADIP = 0;
  4407  0013B2  9C9F               	bcf	3999,6,c	;volatile
  4408                           
  4409                           ;Function.c: 178: IPR1bits.SSP1IP = 0;
  4410  0013B4  969F               	bcf	3999,3,c	;volatile
  4411                           
  4412                           ;Function.c: 180: IPR2bits.BCL1IP = 0;
  4413  0013B6  96A2               	bcf	4002,3,c	;volatile
  4414                           
  4415                           ;Function.c: 181: IPR1bits.TMR2IP=0;
  4416  0013B8  929F               	bcf	3999,1,c	;volatile
  4417  0013BA  0012               	return		;funcret
  4418  0013BC                     __end_of_INTERRUPT_Initialize:
  4419                           	opt stack 0
  4420                           tosu	equ	0xFFF
  4421                           tosh	equ	0xFFE
  4422                           tosl	equ	0xFFD
  4423                           pclath	equ	0xFFA
  4424                           tblptru	equ	0xFF8
  4425                           tblptrh	equ	0xFF7
  4426                           tblptrl	equ	0xFF6
  4427                           tablat	equ	0xFF5
  4428                           prodh	equ	0xFF4
  4429                           prodl	equ	0xFF3
  4430                           intcon	equ	0xFF2
  4431                           postinc0	equ	0xFEE
  4432                           wreg	equ	0xFE8
  4433                           indf2	equ	0xFDF
  4434                           postinc2	equ	0xFDE
  4435                           postdec2	equ	0xFDD
  4436                           plusw2	equ	0xFDB
  4437                           fsr2h	equ	0xFDA
  4438                           fsr2l	equ	0xFD9
  4439                           status	equ	0xFD8
  4440                           
  4441 ;; *************** function _ComStart *****************
  4442 ;; Defined at:
  4443 ;;		line 12 in file "Communications.c"
  4444 ;; Parameters:    Size  Location     Type
  4445 ;;		None
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;		None
  4448 ;; Return value:  Size  Location     Type
  4449 ;;                  1    wreg      void 
  4450 ;; Registers used:
  4451 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4452 ;; Tracked objects:
  4453 ;;		On entry : 0/0
  4454 ;;		On exit  : 0/0
  4455 ;;		Unchanged: 0/0
  4456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4457 ;;      Params:         0       0       0       0       0       0       0
  4458 ;;      Locals:         0       0       0       0       0       0       0
  4459 ;;      Temps:          0       0       0       0       0       0       0
  4460 ;;      Totals:         0       0       0       0       0       0       0
  4461 ;;Total ram usage:        0 bytes
  4462 ;; Hardware stack levels used:    1
  4463 ;; Hardware stack levels required when called:    7
  4464 ;; This function calls:
  4465 ;;		_EUSART1_Initialize
  4466 ;;		_begin
  4467 ;; This function is called by:
  4468 ;;		_Start
  4469 ;; This function uses a non-reentrant model
  4470 ;;
  4471                           
  4472                           	psect	text24
  4473  001014                     __ptext24:
  4474                           	opt stack 0
  4475  001014                     _ComStart:
  4476                           	opt stack 22
  4477                           
  4478                           ;Communications.c: 13: EUSART1_Initialize();
  4479                           
  4480                           ;incstack = 0
  4481  001014  ECB2  F008         	call	_EUSART1_Initialize	;wreg free
  4482                           
  4483                           ;Communications.c: 14: begin(receiveArray, sizeof (receiveArray), 8, 0, Send_put, Receiv
      +                          e_get, Receive_available, Receive_peek);
  4484  001018  0E75               	movlw	low _receiveArray
  4485  00101A  0100               	movlb	0	; () banked
  4486  00101C  6F83               	movwf	begin@ptr& (0+255),b
  4487  00101E  0E00               	movlw	high _receiveArray
  4488  001020  0100               	movlb	0	; () banked
  4489  001022  6F84               	movwf	(begin@ptr+1)& (0+255),b
  4490  001024  0E0A               	movlw	10
  4491  001026  0100               	movlb	0	; () banked
  4492  001028  6F85               	movwf	begin@maxSize& (0+255),b
  4493  00102A  0E08               	movlw	8
  4494  00102C  0100               	movlb	0	; () banked
  4495  00102E  6F86               	movwf	begin@givenAddress& (0+255),b
  4496  001030  0E00               	movlw	0
  4497  001032  0100               	movlb	0	; () banked
  4498  001034  6F87               	movwf	begin@error& (0+255),b
  4499  001036  0EA8               	movlw	low _Send_put
  4500  001038  0100               	movlb	0	; () banked
  4501  00103A  6F88               	movwf	begin@stufftosend& (0+255),b
  4502  00103C  0E11               	movlw	high _Send_put
  4503  00103E  0100               	movlb	0	; () banked
  4504  001040  6F89               	movwf	(begin@stufftosend+1)& (0+255),b
  4505  001042  0E28               	movlw	low _Receive_get
  4506  001044  0100               	movlb	0	; () banked
  4507  001046  6F8A               	movwf	begin@stufftoreceive& (0+255),b
  4508  001048  0E14               	movlw	high _Receive_get
  4509  00104A  0100               	movlb	0	; () banked
  4510  00104C  6F8B               	movwf	(begin@stufftoreceive+1)& (0+255),b
  4511  00104E  0ED2               	movlw	low _Receive_available
  4512  001050  0100               	movlb	0	; () banked
  4513  001052  6F8C               	movwf	begin@stuffavailable& (0+255),b
  4514  001054  0E13               	movlw	high _Receive_available
  4515  001056  0100               	movlb	0	; () banked
  4516  001058  6F8D               	movwf	(begin@stuffavailable+1)& (0+255),b
  4517  00105A  0E00               	movlw	0
  4518  00105C  0100               	movlb	0	; () banked
  4519  00105E  6F8E               	movwf	begin@stuffpeek& (0+255),b
  4520  001060  0E00               	movlw	0
  4521  001062  0100               	movlb	0	; () banked
  4522  001064  6F8F               	movwf	(begin@stuffpeek+1)& (0+255),b
  4523  001066  EC36  F008         	call	_begin	;wreg free
  4524  00106A  0012               	return		;funcret
  4525  00106C                     __end_of_ComStart:
  4526                           	opt stack 0
  4527                           tosu	equ	0xFFF
  4528                           tosh	equ	0xFFE
  4529                           tosl	equ	0xFFD
  4530                           pclath	equ	0xFFA
  4531                           tblptru	equ	0xFF8
  4532                           tblptrh	equ	0xFF7
  4533                           tblptrl	equ	0xFF6
  4534                           tablat	equ	0xFF5
  4535                           prodh	equ	0xFF4
  4536                           prodl	equ	0xFF3
  4537                           intcon	equ	0xFF2
  4538                           postinc0	equ	0xFEE
  4539                           wreg	equ	0xFE8
  4540                           indf2	equ	0xFDF
  4541                           postinc2	equ	0xFDE
  4542                           postdec2	equ	0xFDD
  4543                           plusw2	equ	0xFDB
  4544                           fsr2h	equ	0xFDA
  4545                           fsr2l	equ	0xFD9
  4546                           status	equ	0xFD8
  4547                           
  4548 ;; *************** function _begin *****************
  4549 ;; Defined at:
  4550 ;;		line 73 in file "FastTransfer.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;  ptr             2    4[BANK0 ] PTR volatile int 
  4553 ;;		 -> receiveArray(10), 
  4554 ;;  maxSize         1    6[BANK0 ] unsigned char 
  4555 ;;  givenAddress    1    7[BANK0 ] unsigned char 
  4556 ;;  error           1    8[BANK0 ] unsigned char 
  4557 ;;  stufftosend     2    9[BANK0 ] PTR FTN(unsigned char ,)
  4558 ;;		 -> Send_put(1), 
  4559 ;;  stufftorecei    2   11[BANK0 ] PTR FTN()unsigned char 
  4560 ;;		 -> Receive_get(1), 
  4561 ;;  stuffavailab    2   13[BANK0 ] PTR FTN()int 
  4562 ;;		 -> Receive_available(2), 
  4563 ;;  stuffpeek       2   15[BANK0 ] PTR FTN()unsigned char 
  4564 ;;		 -> Receive_peek(1), 
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;		None
  4567 ;; Return value:  Size  Location     Type
  4568 ;;                  1    wreg      void 
  4569 ;; Registers used:
  4570 ;;		wreg, status,2, status,0, cstack
  4571 ;; Tracked objects:
  4572 ;;		On entry : 0/0
  4573 ;;		On exit  : 0/0
  4574 ;;		Unchanged: 0/0
  4575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4576 ;;      Params:         0      13       0       0       0       0       0
  4577 ;;      Locals:         0       0       0       0       0       0       0
  4578 ;;      Temps:          0       0       0       0       0       0       0
  4579 ;;      Totals:         0      13       0       0       0       0       0
  4580 ;;Total ram usage:       13 bytes
  4581 ;; Hardware stack levels used:    1
  4582 ;; Hardware stack levels required when called:    5
  4583 ;; This function calls:
  4584 ;;		___awdiv
  4585 ;; This function is called by:
  4586 ;;		_ComStart
  4587 ;; This function uses a non-reentrant model
  4588 ;;
  4589                           
  4590                           	psect	text25
  4591  00106C                     __ptext25:
  4592                           	opt stack 0
  4593  00106C                     _begin:
  4594                           	opt stack 23
  4595                           
  4596                           ;FastTransfer.c: 74: receiveArrayAddress = ptr;
  4597                           
  4598                           ;incstack = 0
  4599  00106C  C083  F00B         	movff	begin@ptr,_receiveArrayAddress
  4600  001070  C084  F00C         	movff	begin@ptr+1,_receiveArrayAddress+1
  4601                           
  4602                           ;FastTransfer.c: 75: moduleAddress = givenAddress;
  4603  001074  C086  F01E         	movff	begin@givenAddress,_moduleAddress
  4604                           
  4605                           ;FastTransfer.c: 76: serial_write = stufftosend;
  4606  001078  C088  F015         	movff	begin@stufftosend,_serial_write
  4607  00107C  C089  F016         	movff	begin@stufftosend+1,_serial_write+1
  4608                           
  4609                           ;FastTransfer.c: 77: serial_available = stuffavailable;
  4610  001080  C08C  F00F         	movff	begin@stuffavailable,_serial_available
  4611  001084  C08D  F010         	movff	begin@stuffavailable+1,_serial_available+1
  4612                           
  4613                           ;FastTransfer.c: 78: serial_peek = stuffpeek;
  4614  001088  C08E  F011         	movff	begin@stuffpeek,_serial_peek
  4615  00108C  C08F  F012         	movff	begin@stuffpeek+1,_serial_peek+1
  4616                           
  4617                           ;FastTransfer.c: 79: serial_read = stufftoreceive;
  4618  001090  C08A  F013         	movff	begin@stufftoreceive,_serial_read
  4619  001094  C08B  F014         	movff	begin@stufftoreceive+1,_serial_read+1
  4620                           
  4621                           ;FastTransfer.c: 80: maxDataAddress = maxSize / 2;
  4622  001098  C085  F03D         	movff	begin@maxSize,___awdiv@dividend
  4623  00109C  6A3E               	clrf	___awdiv@dividend+1,c
  4624  00109E  0E00               	movlw	0
  4625  0010A0  6E40               	movwf	___awdiv@divisor+1,c
  4626  0010A2  0E02               	movlw	2
  4627  0010A4  6E3F               	movwf	___awdiv@divisor,c
  4628  0010A6  ECD5  F006         	call	___awdiv	;wreg free
  4629  0010AA  503D               	movf	?___awdiv,w,c
  4630  0010AC  6E1D               	movwf	_maxDataAddress,c
  4631                           
  4632                           ;FastTransfer.c: 81: sendStructAddress = (unsigned char*) & ring_buffer;
  4633  0010AE  0E00               	movlw	low _ring_buffer
  4634  0010B0  6E0D               	movwf	_sendStructAddress,c
  4635  0010B2  0E01               	movlw	high _ring_buffer
  4636  0010B4  6E0E               	movwf	_sendStructAddress+1,c
  4637                           
  4638                           ;FastTransfer.c: 82: AKNAKsend = error;
  4639  0010B6  C087  F019         	movff	begin@error,_AKNAKsend
  4640                           
  4641                           ;FastTransfer.c: 83: alignErrorCounter = 0;
  4642  0010BA  0E00               	movlw	0
  4643  0010BC  6E04               	movwf	_alignErrorCounter+1,c
  4644  0010BE  0E00               	movlw	0
  4645  0010C0  6E03               	movwf	_alignErrorCounter,c
  4646  0010C2  0012               	return		;funcret
  4647  0010C4                     __end_of_begin:
  4648                           	opt stack 0
  4649                           tosu	equ	0xFFF
  4650                           tosh	equ	0xFFE
  4651                           tosl	equ	0xFFD
  4652                           pclath	equ	0xFFA
  4653                           tblptru	equ	0xFF8
  4654                           tblptrh	equ	0xFF7
  4655                           tblptrl	equ	0xFF6
  4656                           tablat	equ	0xFF5
  4657                           prodh	equ	0xFF4
  4658                           prodl	equ	0xFF3
  4659                           intcon	equ	0xFF2
  4660                           postinc0	equ	0xFEE
  4661                           wreg	equ	0xFE8
  4662                           indf2	equ	0xFDF
  4663                           postinc2	equ	0xFDE
  4664                           postdec2	equ	0xFDD
  4665                           plusw2	equ	0xFDB
  4666                           fsr2h	equ	0xFDA
  4667                           fsr2l	equ	0xFD9
  4668                           status	equ	0xFD8
  4669                           
  4670 ;; *************** function ___awdiv *****************
  4671 ;; Defined at:
  4672 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  4673 ;; Parameters:    Size  Location     Type
  4674 ;;  dividend        2   26[COMRAM] int 
  4675 ;;  divisor         2   28[COMRAM] int 
  4676 ;; Auto vars:     Size  Location     Type
  4677 ;;  quotient        2    2[BANK0 ] int 
  4678 ;;  sign            1    1[BANK0 ] unsigned char 
  4679 ;;  counter         1    0[BANK0 ] unsigned char 
  4680 ;; Return value:  Size  Location     Type
  4681 ;;                  2   26[COMRAM] int 
  4682 ;; Registers used:
  4683 ;;		wreg, status,2, status,0
  4684 ;; Tracked objects:
  4685 ;;		On entry : 0/0
  4686 ;;		On exit  : 0/0
  4687 ;;		Unchanged: 0/0
  4688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4689 ;;      Params:         4       0       0       0       0       0       0
  4690 ;;      Locals:         0       4       0       0       0       0       0
  4691 ;;      Temps:          0       0       0       0       0       0       0
  4692 ;;      Totals:         4       4       0       0       0       0       0
  4693 ;;Total ram usage:        8 bytes
  4694 ;; Hardware stack levels used:    1
  4695 ;; Hardware stack levels required when called:    4
  4696 ;; This function calls:
  4697 ;;		Nothing
  4698 ;; This function is called by:
  4699 ;;		_begin
  4700 ;; This function uses a non-reentrant model
  4701 ;;
  4702                           
  4703                           	psect	text26
  4704  000DAA                     __ptext26:
  4705                           	opt stack 0
  4706  000DAA                     ___awdiv:
  4707                           	opt stack 23
  4708                           
  4709                           ;incstack = 0
  4710  000DAA  0E00               	movlw	0
  4711  000DAC  0100               	movlb	0	; () banked
  4712  000DAE  6F80               	movwf	___awdiv@sign& (0+255),b
  4713                           
  4714                           ; BSR set to: 0
  4715  000DB0  AE40               	btfss	___awdiv@divisor+1,7,c
  4716  000DB2  D007               	goto	l2477
  4717                           
  4718                           ; BSR set to: 0
  4719  000DB4  6C3F               	negf	___awdiv@divisor,c
  4720  000DB6  1E40               	comf	___awdiv@divisor+1,f,c
  4721  000DB8  B0D8               	btfsc	status,0,c
  4722  000DBA  2A40               	incf	___awdiv@divisor+1,f,c
  4723                           
  4724                           ; BSR set to: 0
  4725  000DBC  0E01               	movlw	1
  4726  000DBE  0100               	movlb	0	; () banked
  4727  000DC0  6F80               	movwf	___awdiv@sign& (0+255),b
  4728  000DC2                     l2477:
  4729                           
  4730                           ; BSR set to: 0
  4731  000DC2  AE3E               	btfss	___awdiv@dividend+1,7,c
  4732  000DC4  D007               	goto	l2483
  4733                           
  4734                           ; BSR set to: 0
  4735  000DC6  6C3D               	negf	___awdiv@dividend,c
  4736  000DC8  1E3E               	comf	___awdiv@dividend+1,f,c
  4737  000DCA  B0D8               	btfsc	status,0,c
  4738  000DCC  2A3E               	incf	___awdiv@dividend+1,f,c
  4739                           
  4740                           ; BSR set to: 0
  4741  000DCE  0E01               	movlw	1
  4742  000DD0  0100               	movlb	0	; () banked
  4743  000DD2  1B80               	xorwf	___awdiv@sign& (0+255),f,b
  4744  000DD4                     l2483:
  4745                           
  4746                           ; BSR set to: 0
  4747  000DD4  0E00               	movlw	0
  4748  000DD6  0100               	movlb	0	; () banked
  4749  000DD8  6F82               	movwf	(___awdiv@quotient+1)& (0+255),b
  4750  000DDA  0E00               	movlw	0
  4751  000DDC  6F81               	movwf	___awdiv@quotient& (0+255),b
  4752                           
  4753                           ; BSR set to: 0
  4754  000DDE  503F               	movf	___awdiv@divisor,w,c
  4755  000DE0  1040               	iorwf	___awdiv@divisor+1,w,c
  4756  000DE2  B4D8               	btfsc	status,2,c
  4757  000DE4  D021               	goto	l2505
  4758                           
  4759                           ; BSR set to: 0
  4760  000DE6  0E01               	movlw	1
  4761  000DE8  0100               	movlb	0	; () banked
  4762  000DEA  6F7F               	movwf	___awdiv@counter& (0+255),b
  4763  000DEC  D005               	goto	l2491
  4764  000DEE                     l2489:
  4765                           
  4766                           ; BSR set to: 0
  4767  000DEE  90D8               	bcf	status,0,c
  4768  000DF0  363F               	rlcf	___awdiv@divisor,f,c
  4769  000DF2  3640               	rlcf	___awdiv@divisor+1,f,c
  4770  000DF4  0100               	movlb	0	; () banked
  4771  000DF6  2B7F               	incf	___awdiv@counter& (0+255),f,b
  4772  000DF8                     l2491:
  4773                           
  4774                           ; BSR set to: 0
  4775  000DF8  AE40               	btfss	___awdiv@divisor+1,7,c
  4776  000DFA  D7F9               	goto	l2489
  4777  000DFC                     l2493:
  4778                           
  4779                           ; BSR set to: 0
  4780  000DFC  0100               	movlb	0	; () banked
  4781  000DFE  90D8               	bcf	status,0,c
  4782  000E00  3781               	rlcf	___awdiv@quotient& (0+255),f,b
  4783  000E02  3782               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4784                           
  4785                           ; BSR set to: 0
  4786  000E04  503F               	movf	___awdiv@divisor,w,c
  4787  000E06  5C3D               	subwf	___awdiv@dividend,w,c
  4788  000E08  5040               	movf	___awdiv@divisor+1,w,c
  4789  000E0A  583E               	subwfb	___awdiv@dividend+1,w,c
  4790  000E0C  A0D8               	btfss	status,0,c
  4791  000E0E  D006               	goto	l2501
  4792                           
  4793                           ; BSR set to: 0
  4794  000E10  503F               	movf	___awdiv@divisor,w,c
  4795  000E12  5E3D               	subwf	___awdiv@dividend,f,c
  4796  000E14  5040               	movf	___awdiv@divisor+1,w,c
  4797  000E16  5A3E               	subwfb	___awdiv@dividend+1,f,c
  4798                           
  4799                           ; BSR set to: 0
  4800  000E18  0100               	movlb	0	; () banked
  4801  000E1A  8181               	bsf	___awdiv@quotient& (0+255),0,b
  4802  000E1C                     l2501:
  4803                           
  4804                           ; BSR set to: 0
  4805  000E1C  90D8               	bcf	status,0,c
  4806  000E1E  3240               	rrcf	___awdiv@divisor+1,f,c
  4807  000E20  323F               	rrcf	___awdiv@divisor,f,c
  4808                           
  4809                           ; BSR set to: 0
  4810  000E22  0100               	movlb	0	; () banked
  4811  000E24  2F7F               	decfsz	___awdiv@counter& (0+255),f,b
  4812  000E26  D7EA               	goto	l2493
  4813  000E28                     l2505:
  4814                           
  4815                           ; BSR set to: 0
  4816  000E28  0100               	movlb	0	; () banked
  4817  000E2A  5180               	movf	___awdiv@sign& (0+255),w,b
  4818  000E2C  0100               	movlb	0	; () banked
  4819  000E2E  B4D8               	btfsc	status,2,c
  4820  000E30  D005               	goto	l2509
  4821                           
  4822                           ; BSR set to: 0
  4823  000E32  0100               	movlb	0	; () banked
  4824  000E34  6D81               	negf	___awdiv@quotient& (0+255),b
  4825  000E36  1F82               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4826  000E38  B0D8               	btfsc	status,0,c
  4827  000E3A  2B82               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4828  000E3C                     l2509:
  4829                           
  4830                           ; BSR set to: 0
  4831  000E3C  C081  F03D         	movff	___awdiv@quotient,?___awdiv
  4832  000E40  C082  F03E         	movff	___awdiv@quotient+1,?___awdiv+1
  4833  000E44  0012               	return	
  4834  000E46                     __end_of___awdiv:
  4835                           	opt stack 0
  4836                           tosu	equ	0xFFF
  4837                           tosh	equ	0xFFE
  4838                           tosl	equ	0xFFD
  4839                           pclath	equ	0xFFA
  4840                           tblptru	equ	0xFF8
  4841                           tblptrh	equ	0xFF7
  4842                           tblptrl	equ	0xFF6
  4843                           tablat	equ	0xFF5
  4844                           prodh	equ	0xFF4
  4845                           prodl	equ	0xFF3
  4846                           intcon	equ	0xFF2
  4847                           postinc0	equ	0xFEE
  4848                           wreg	equ	0xFE8
  4849                           indf2	equ	0xFDF
  4850                           postinc2	equ	0xFDE
  4851                           postdec2	equ	0xFDD
  4852                           plusw2	equ	0xFDB
  4853                           fsr2h	equ	0xFDA
  4854                           fsr2l	equ	0xFD9
  4855                           status	equ	0xFD8
  4856                           
  4857 ;; *************** function _EUSART1_Initialize *****************
  4858 ;; Defined at:
  4859 ;;		line 21 in file "UART.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;		None
  4862 ;; Auto vars:     Size  Location     Type
  4863 ;;		None
  4864 ;; Return value:  Size  Location     Type
  4865 ;;                  1    wreg      void 
  4866 ;; Registers used:
  4867 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4868 ;; Tracked objects:
  4869 ;;		On entry : 0/0
  4870 ;;		On exit  : 0/0
  4871 ;;		Unchanged: 0/0
  4872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4873 ;;      Params:         0       0       0       0       0       0       0
  4874 ;;      Locals:         0       0       0       0       0       0       0
  4875 ;;      Temps:          0       0       0       0       0       0       0
  4876 ;;      Totals:         0       0       0       0       0       0       0
  4877 ;;Total ram usage:        0 bytes
  4878 ;; Hardware stack levels used:    1
  4879 ;; Hardware stack levels required when called:    6
  4880 ;; This function calls:
  4881 ;;		_UART_buff_init
  4882 ;; This function is called by:
  4883 ;;		_ComStart
  4884 ;; This function uses a non-reentrant model
  4885 ;;
  4886                           
  4887                           	psect	text27
  4888  001164                     __ptext27:
  4889                           	opt stack 0
  4890  001164                     _EUSART1_Initialize:
  4891                           	opt stack 22
  4892                           
  4893                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;incstack = 0
  4897  001164  9A9D               	bcf	3997,5,c	;volatile
  4898                           
  4899                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  4900  001166  989D               	bcf	3997,4,c	;volatile
  4901                           
  4902                           ;UART.c: 29: BAUD1CON = 0x48;
  4903  001168  0E48               	movlw	72
  4904  00116A  6EB8               	movwf	4024,c	;volatile
  4905                           
  4906                           ;UART.c: 32: RC1STA = 0x98;
  4907  00116C  0E98               	movlw	152
  4908  00116E  6EAB               	movwf	4011,c	;volatile
  4909                           
  4910                           ;UART.c: 35: TX1STA = 0x26;
  4911  001170  0E26               	movlw	38
  4912  001172  6EAC               	movwf	4012,c	;volatile
  4913                           
  4914                           ;UART.c: 38: SPBRG1 = (((16000000/38400)/4)-1);
  4915  001174  0E67               	movlw	103
  4916  001176  6EAF               	movwf	4015,c	;volatile
  4917                           
  4918                           ;UART.c: 41: SPBRGH1 = 0x00;
  4919  001178  0E00               	movlw	0
  4920  00117A  6EB0               	movwf	4016,c	;volatile
  4921                           
  4922                           ;UART.c: 44: TXREG1 = 0x00;
  4923  00117C  0E00               	movlw	0
  4924  00117E  6EAD               	movwf	4013,c	;volatile
  4925                           
  4926                           ;UART.c: 47: RCREG1 = 0x00;
  4927  001180  0E00               	movlw	0
  4928  001182  6EAE               	movwf	4014,c	;volatile
  4929                           
  4930                           ;UART.c: 49: UART_buff_init(&input_buffer);
  4931  001184  0E00               	movlw	low _input_buffer
  4932  001186  0100               	movlb	0	; () banked
  4933  001188  6F81               	movwf	UART_buff_init@_this& (0+255),b
  4934  00118A  0E03               	movlw	high _input_buffer
  4935  00118C  0100               	movlb	0	; () banked
  4936  00118E  6F82               	movwf	(UART_buff_init@_this+1)& (0+255),b
  4937  001190  ECA7  F009         	call	_UART_buff_init	;wreg free
  4938                           
  4939                           ;UART.c: 50: UART_buff_init(&output_buffer);
  4940  001194  0E00               	movlw	low _output_buffer
  4941  001196  0100               	movlb	0	; () banked
  4942  001198  6F81               	movwf	UART_buff_init@_this& (0+255),b
  4943  00119A  0E04               	movlw	high _output_buffer
  4944  00119C  0100               	movlb	0	; () banked
  4945  00119E  6F82               	movwf	(UART_buff_init@_this+1)& (0+255),b
  4946  0011A0  ECA7  F009         	call	_UART_buff_init	;wreg free
  4947                           
  4948                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  4949  0011A4  8A9D               	bsf	3997,5,c	;volatile
  4950  0011A6  0012               	return		;funcret
  4951  0011A8                     __end_of_EUSART1_Initialize:
  4952                           	opt stack 0
  4953                           tosu	equ	0xFFF
  4954                           tosh	equ	0xFFE
  4955                           tosl	equ	0xFFD
  4956                           pclath	equ	0xFFA
  4957                           tblptru	equ	0xFF8
  4958                           tblptrh	equ	0xFF7
  4959                           tblptrl	equ	0xFF6
  4960                           tablat	equ	0xFF5
  4961                           prodh	equ	0xFF4
  4962                           prodl	equ	0xFF3
  4963                           intcon	equ	0xFF2
  4964                           postinc0	equ	0xFEE
  4965                           wreg	equ	0xFE8
  4966                           indf2	equ	0xFDF
  4967                           postinc2	equ	0xFDE
  4968                           postdec2	equ	0xFDD
  4969                           plusw2	equ	0xFDB
  4970                           fsr2h	equ	0xFDA
  4971                           fsr2l	equ	0xFD9
  4972                           status	equ	0xFD8
  4973                           
  4974 ;; *************** function _UART_buff_init *****************
  4975 ;; Defined at:
  4976 ;;		line 56 in file "UART.c"
  4977 ;; Parameters:    Size  Location     Type
  4978 ;;  _this           2    2[BANK0 ] PTR struct UART_ring_buf
  4979 ;;		 -> output_buffer(206), input_buffer(206), 
  4980 ;; Auto vars:     Size  Location     Type
  4981 ;;		None
  4982 ;; Return value:  Size  Location     Type
  4983 ;;                  1    wreg      void 
  4984 ;; Registers used:
  4985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4986 ;; Tracked objects:
  4987 ;;		On entry : 0/0
  4988 ;;		On exit  : 0/0
  4989 ;;		Unchanged: 0/0
  4990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4991 ;;      Params:         0       2       0       0       0       0       0
  4992 ;;      Locals:         0       0       0       0       0       0       0
  4993 ;;      Temps:          0       0       0       0       0       0       0
  4994 ;;      Totals:         0       2       0       0       0       0       0
  4995 ;;Total ram usage:        2 bytes
  4996 ;; Hardware stack levels used:    1
  4997 ;; Hardware stack levels required when called:    5
  4998 ;; This function calls:
  4999 ;;		_memset
  5000 ;; This function is called by:
  5001 ;;		_EUSART1_Initialize
  5002 ;; This function uses a non-reentrant model
  5003 ;;
  5004                           
  5005                           	psect	text28
  5006  00134E                     __ptext28:
  5007                           	opt stack 0
  5008  00134E                     _UART_buff_init:
  5009                           	opt stack 22
  5010                           
  5011                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  5012                           
  5013                           ;incstack = 0
  5014  00134E  C081  F03D         	movff	UART_buff_init@_this,memset@p1
  5015  001352  C082  F03E         	movff	UART_buff_init@_this+1,memset@p1+1
  5016  001356  0E00               	movlw	0
  5017  001358  6E40               	movwf	memset@c+1,c
  5018  00135A  0E00               	movlw	0
  5019  00135C  6E3F               	movwf	memset@c,c
  5020  00135E  0E00               	movlw	0
  5021  001360  6E42               	movwf	memset@n+1,c
  5022  001362  0ECE               	movlw	206
  5023  001364  6E41               	movwf	memset@n,c
  5024  001366  EC23  F009         	call	_memset	;wreg free
  5025  00136A  0012               	return		;funcret
  5026  00136C                     __end_of_UART_buff_init:
  5027                           	opt stack 0
  5028                           tosu	equ	0xFFF
  5029                           tosh	equ	0xFFE
  5030                           tosl	equ	0xFFD
  5031                           pclath	equ	0xFFA
  5032                           tblptru	equ	0xFF8
  5033                           tblptrh	equ	0xFF7
  5034                           tblptrl	equ	0xFF6
  5035                           tablat	equ	0xFF5
  5036                           prodh	equ	0xFF4
  5037                           prodl	equ	0xFF3
  5038                           intcon	equ	0xFF2
  5039                           postinc0	equ	0xFEE
  5040                           wreg	equ	0xFE8
  5041                           indf2	equ	0xFDF
  5042                           postinc2	equ	0xFDE
  5043                           postdec2	equ	0xFDD
  5044                           plusw2	equ	0xFDB
  5045                           fsr2h	equ	0xFDA
  5046                           fsr2l	equ	0xFD9
  5047                           status	equ	0xFD8
  5048                           
  5049 ;; *************** function _memset *****************
  5050 ;; Defined at:
  5051 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  5052 ;; Parameters:    Size  Location     Type
  5053 ;;  p1              2   26[COMRAM] PTR void 
  5054 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  5055 ;;  c               2   28[COMRAM] int 
  5056 ;;  n               2   30[COMRAM] unsigned int 
  5057 ;; Auto vars:     Size  Location     Type
  5058 ;;  p               2    0[BANK0 ] PTR unsigned char 
  5059 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  5060 ;; Return value:  Size  Location     Type
  5061 ;;                  2   26[COMRAM] PTR void 
  5062 ;; Registers used:
  5063 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5069 ;;      Params:         6       0       0       0       0       0       0
  5070 ;;      Locals:         0       2       0       0       0       0       0
  5071 ;;      Temps:          0       0       0       0       0       0       0
  5072 ;;      Totals:         6       2       0       0       0       0       0
  5073 ;;Total ram usage:        8 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; Hardware stack levels required when called:    4
  5076 ;; This function calls:
  5077 ;;		Nothing
  5078 ;; This function is called by:
  5079 ;;		_FastTransfer_buffer_flush
  5080 ;;		_UART_buff_init
  5081 ;;		_UART_buff_flush
  5082 ;; This function uses a non-reentrant model
  5083 ;;
  5084                           
  5085                           	psect	text29
  5086  001246                     __ptext29:
  5087                           	opt stack 0
  5088  001246                     _memset:
  5089                           	opt stack 22
  5090                           
  5091                           ;incstack = 0
  5092  001246  C03D  F07F         	movff	memset@p1,memset@p
  5093  00124A  C03E  F080         	movff	memset@p1+1,memset@p+1
  5094  00124E  D009               	goto	l2373
  5095  001250                     l2369:
  5096  001250  C07F  FFD9         	movff	memset@p,fsr2l
  5097  001254  C080  FFDA         	movff	memset@p+1,fsr2h
  5098  001258  C03F  FFDF         	movff	memset@c,indf2
  5099  00125C  0100               	movlb	0	; () banked
  5100  00125E  4B7F               	infsnz	memset@p& (0+255),f,b
  5101  001260  2B80               	incf	(memset@p+1)& (0+255),f,b
  5102  001262                     l2373:
  5103  001262  0641               	decf	memset@n,f,c
  5104  001264  A0D8               	btfss	status,0,c
  5105  001266  0642               	decf	memset@n+1,f,c
  5106  001268  2841               	incf	memset@n,w,c
  5107  00126A  E1F2               	bnz	l2369
  5108  00126C  2842               	incf	memset@n+1,w,c
  5109  00126E  B4D8               	btfsc	status,2,c
  5110  001270  0012               	return	
  5111  001272  D7EE               	goto	l2369
  5112  001274                     __end_of_memset:
  5113                           	opt stack 0
  5114                           tosu	equ	0xFFF
  5115                           tosh	equ	0xFFE
  5116                           tosl	equ	0xFFD
  5117                           pclath	equ	0xFFA
  5118                           tblptru	equ	0xFF8
  5119                           tblptrh	equ	0xFF7
  5120                           tblptrl	equ	0xFF6
  5121                           tablat	equ	0xFF5
  5122                           prodh	equ	0xFF4
  5123                           prodl	equ	0xFF3
  5124                           intcon	equ	0xFF2
  5125                           postinc0	equ	0xFEE
  5126                           wreg	equ	0xFE8
  5127                           indf2	equ	0xFDF
  5128                           postinc2	equ	0xFDE
  5129                           postdec2	equ	0xFDD
  5130                           plusw2	equ	0xFDB
  5131                           fsr2h	equ	0xFDA
  5132                           fsr2l	equ	0xFD9
  5133                           status	equ	0xFD8
  5134                           
  5135 ;; *************** function _SetTime *****************
  5136 ;; Defined at:
  5137 ;;		line 97 in file "tmr0.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;		None
  5140 ;; Auto vars:     Size  Location     Type
  5141 ;;		None
  5142 ;; Return value:  Size  Location     Type
  5143 ;;                  1    wreg      void 
  5144 ;; Registers used:
  5145 ;;		wreg, status,2
  5146 ;; Tracked objects:
  5147 ;;		On entry : 0/0
  5148 ;;		On exit  : 0/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5151 ;;      Params:         0       0       0       0       0       0       0
  5152 ;;      Locals:         0       0       0       0       0       0       0
  5153 ;;      Temps:          0       0       0       0       0       0       0
  5154 ;;      Totals:         0       0       0       0       0       0       0
  5155 ;;Total ram usage:        0 bytes
  5156 ;; Hardware stack levels used:    1
  5157 ;; Hardware stack levels required when called:    4
  5158 ;; This function calls:
  5159 ;;		Nothing
  5160 ;; This function is called by:
  5161 ;;		_main
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           	psect	text30
  5166  001414                     __ptext30:
  5167                           	opt stack 0
  5168  001414                     _SetTime:
  5169                           	opt stack 26
  5170                           
  5171                           ;tmr0.c: 98: time = 0;
  5172                           
  5173                           ;incstack = 0
  5174  001414  0E00               	movlw	0
  5175  001416  0100               	movlb	0	; () banked
  5176  001418  6F60               	movwf	_time& (0+255),b
  5177  00141A  0E00               	movlw	0
  5178  00141C  6F61               	movwf	(_time+1)& (0+255),b
  5179  00141E  0E00               	movlw	0
  5180  001420  6F62               	movwf	(_time+2)& (0+255),b
  5181  001422  0E00               	movlw	0
  5182  001424  6F63               	movwf	(_time+3)& (0+255),b
  5183                           
  5184                           ; BSR set to: 0
  5185  001426  0012               	return		;funcret
  5186  001428                     __end_of_SetTime:
  5187                           	opt stack 0
  5188                           tosu	equ	0xFFF
  5189                           tosh	equ	0xFFE
  5190                           tosl	equ	0xFFD
  5191                           pclath	equ	0xFFA
  5192                           tblptru	equ	0xFF8
  5193                           tblptrh	equ	0xFF7
  5194                           tblptrl	equ	0xFF6
  5195                           tablat	equ	0xFF5
  5196                           prodh	equ	0xFF4
  5197                           prodl	equ	0xFF3
  5198                           intcon	equ	0xFF2
  5199                           postinc0	equ	0xFEE
  5200                           wreg	equ	0xFE8
  5201                           indf2	equ	0xFDF
  5202                           postinc2	equ	0xFDE
  5203                           postdec2	equ	0xFDD
  5204                           plusw2	equ	0xFDB
  5205                           fsr2h	equ	0xFDA
  5206                           fsr2l	equ	0xFD9
  5207                           status	equ	0xFD8
  5208                           
  5209 ;; *************** function _ReadFaults *****************
  5210 ;; Defined at:
  5211 ;;		line 9 in file "Function.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;		None
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;		None
  5216 ;; Return value:  Size  Location     Type
  5217 ;;                  1    wreg      void 
  5218 ;; Registers used:
  5219 ;;		wreg, status,2
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/0
  5222 ;;		On exit  : 0/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5225 ;;      Params:         0       0       0       0       0       0       0
  5226 ;;      Locals:         0       0       0       0       0       0       0
  5227 ;;      Temps:          0       0       0       0       0       0       0
  5228 ;;      Totals:         0       0       0       0       0       0       0
  5229 ;;Total ram usage:        0 bytes
  5230 ;; Hardware stack levels used:    1
  5231 ;; Hardware stack levels required when called:    4
  5232 ;; This function calls:
  5233 ;;		Nothing
  5234 ;; This function is called by:
  5235 ;;		_main
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           	psect	text31
  5240  00144A                     __ptext31:
  5241                           	opt stack 0
  5242  00144A                     _ReadFaults:
  5243                           	opt stack 26
  5244                           
  5245                           ;Function.c: 10: if(PORTCbits.RC2 == 1){
  5246                           
  5247                           ; BSR set to: 0
  5248                           ;incstack = 0
  5249  00144A  A482               	btfss	3970,2,c	;volatile
  5250  00144C  D002               	goto	l1589
  5251                           
  5252                           ;Function.c: 11: ByteHigh = 0xFF;
  5253  00144E  681A               	setf	_ByteHigh,c
  5254                           
  5255                           ;Function.c: 12: }
  5256  001450  0012               	return	
  5257  001452                     l1589:
  5258                           
  5259                           ;Function.c: 13: else{
  5260                           ;Function.c: 14: ByteHigh = 0;
  5261  001452  0E00               	movlw	0
  5262  001454  6E1A               	movwf	_ByteHigh,c
  5263  001456  0012               	return	
  5264  001458                     __end_of_ReadFaults:
  5265                           	opt stack 0
  5266                           tosu	equ	0xFFF
  5267                           tosh	equ	0xFFE
  5268                           tosl	equ	0xFFD
  5269                           pclath	equ	0xFFA
  5270                           tblptru	equ	0xFF8
  5271                           tblptrh	equ	0xFF7
  5272                           tblptrl	equ	0xFF6
  5273                           tablat	equ	0xFF5
  5274                           prodh	equ	0xFF4
  5275                           prodl	equ	0xFF3
  5276                           intcon	equ	0xFF2
  5277                           postinc0	equ	0xFEE
  5278                           wreg	equ	0xFE8
  5279                           indf2	equ	0xFDF
  5280                           postinc2	equ	0xFDE
  5281                           postdec2	equ	0xFDD
  5282                           plusw2	equ	0xFDB
  5283                           fsr2h	equ	0xFDA
  5284                           fsr2l	equ	0xFD9
  5285                           status	equ	0xFD8
  5286                           
  5287 ;; *************** function _INTERRUPT_InterruptManager *****************
  5288 ;; Defined at:
  5289 ;;		line 185 in file "Function.c"
  5290 ;; Parameters:    Size  Location     Type
  5291 ;;		None
  5292 ;; Auto vars:     Size  Location     Type
  5293 ;;		None
  5294 ;; Return value:  Size  Location     Type
  5295 ;;                  1    wreg      void 
  5296 ;; Registers used:
  5297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5298 ;; Tracked objects:
  5299 ;;		On entry : 0/0
  5300 ;;		On exit  : 0/0
  5301 ;;		Unchanged: 0/0
  5302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5303 ;;      Params:         0       0       0       0       0       0       0
  5304 ;;      Locals:         0       0       0       0       0       0       0
  5305 ;;      Temps:         14       0       0       0       0       0       0
  5306 ;;      Totals:        14       0       0       0       0       0       0
  5307 ;;Total ram usage:       14 bytes
  5308 ;; Hardware stack levels used:    1
  5309 ;; Hardware stack levels required when called:    3
  5310 ;; This function calls:
  5311 ;;		_EUSART1_Receive_ISR
  5312 ;;		_EUSART1_Transmit_ISR
  5313 ;;		_TMR0_ISR
  5314 ;; This function is called by:
  5315 ;;		Interrupt level 2
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           	psect	intcode
  5320  000008                     __pintcode:
  5321                           	opt stack 0
  5322  000008                     _INTERRUPT_InterruptManager:
  5323                           	opt stack 21
  5324                           
  5325                           ;incstack = 0
  5326  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5327  00000A  CFFA F02F          	movff	pclath,??_INTERRUPT_InterruptManager
  5328  00000E  CFFB F030          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  5329  000012  CFE9 F031          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  5330  000016  CFEA F032          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  5331  00001A  CFE1 F033          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  5332  00001E  CFE2 F034          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  5333  000022  CFD9 F035          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  5334  000026  CFDA F036          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  5335  00002A  CFF3 F037          	movff	prodl,??_INTERRUPT_InterruptManager+8
  5336  00002E  CFF4 F038          	movff	prodh,??_INTERRUPT_InterruptManager+9
  5337  000032  CFF6 F039          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  5338  000036  CFF7 F03A          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  5339  00003A  CFF8 F03B          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  5340  00003E  CFF5 F03C          	movff	tablat,??_INTERRUPT_InterruptManager+13
  5341                           
  5342                           ;Function.c: 188: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  5343  000042  BA9D               	btfsc	3997,5,c	;volatile
  5344  000044  AA9E               	btfss	3998,5,c	;volatile
  5345  000046  D003               	goto	i2l451
  5346                           
  5347                           ;Function.c: 189: {
  5348                           ;Function.c: 190: EUSART1_Receive_ISR();
  5349  000048  ECB6  F009         	call	_EUSART1_Receive_ISR	;wreg free
  5350                           
  5351                           ;Function.c: 191: }
  5352  00004C  D00B               	goto	i2l457
  5353  00004E                     i2l451:
  5354                           
  5355                           ;Function.c: 192: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  5356  00004E  B89D               	btfsc	3997,4,c	;volatile
  5357  000050  A89E               	btfss	3998,4,c	;volatile
  5358  000052  D003               	goto	i2l453
  5359                           
  5360                           ;Function.c: 193: {
  5361                           ;Function.c: 194: EUSART1_Transmit_ISR();
  5362  000054  EC0A  F009         	call	_EUSART1_Transmit_ISR	;wreg free
  5363                           
  5364                           ;Function.c: 195: }
  5365  000058  D005               	goto	i2l457
  5366  00005A                     i2l453:
  5367                           
  5368                           ;Function.c: 196: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  5369  00005A  BAF2               	btfsc	intcon,5,c	;volatile
  5370  00005C  A4F2               	btfss	intcon,2,c	;volatile
  5371  00005E  D002               	goto	i2l457
  5372                           
  5373                           ;Function.c: 197: {
  5374                           ;Function.c: 198: TMR0_ISR();
  5375  000060  ECC5  F009         	call	_TMR0_ISR	;wreg free
  5376  000064                     i2l457:
  5377  000064  C03C  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  5378  000068  C03B  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  5379  00006C  C03A  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  5380  000070  C039  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  5381  000074  C038  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  5382  000078  C037  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  5383  00007C  C036  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  5384  000080  C035  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  5385  000084  C034  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  5386  000088  C033  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  5387  00008C  C032  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  5388  000090  C031  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  5389  000094  C030  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  5390  000098  C02F  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  5391  00009C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5392  00009E  0011               	retfie		f
  5393  0000A0                     __end_of_INTERRUPT_InterruptManager:
  5394                           	opt stack 0
  5395                           tosu	equ	0xFFF
  5396                           tosh	equ	0xFFE
  5397                           tosl	equ	0xFFD
  5398                           pclatu	equ	0xFFB
  5399                           pclath	equ	0xFFA
  5400                           tblptru	equ	0xFF8
  5401                           tblptrh	equ	0xFF7
  5402                           tblptrl	equ	0xFF6
  5403                           tablat	equ	0xFF5
  5404                           prodh	equ	0xFF4
  5405                           prodl	equ	0xFF3
  5406                           intcon	equ	0xFF2
  5407                           postinc0	equ	0xFEE
  5408                           fsr0h	equ	0xFEA
  5409                           fsr0l	equ	0xFE9
  5410                           wreg	equ	0xFE8
  5411                           fsr1h	equ	0xFE2
  5412                           fsr1l	equ	0xFE1
  5413                           indf2	equ	0xFDF
  5414                           postinc2	equ	0xFDE
  5415                           postdec2	equ	0xFDD
  5416                           plusw2	equ	0xFDB
  5417                           fsr2h	equ	0xFDA
  5418                           fsr2l	equ	0xFD9
  5419                           status	equ	0xFD8
  5420                           
  5421 ;; *************** function _TMR0_ISR *****************
  5422 ;; Defined at:
  5423 ;;		line 82 in file "tmr0.c"
  5424 ;; Parameters:    Size  Location     Type
  5425 ;;		None
  5426 ;; Auto vars:     Size  Location     Type
  5427 ;;		None
  5428 ;; Return value:  Size  Location     Type
  5429 ;;                  1    wreg      void 
  5430 ;; Registers used:
  5431 ;;		wreg, status,2, status,0
  5432 ;; Tracked objects:
  5433 ;;		On entry : 0/0
  5434 ;;		On exit  : 0/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5437 ;;      Params:         0       0       0       0       0       0       0
  5438 ;;      Locals:         0       0       0       0       0       0       0
  5439 ;;      Temps:          0       0       0       0       0       0       0
  5440 ;;      Totals:         0       0       0       0       0       0       0
  5441 ;;Total ram usage:        0 bytes
  5442 ;; Hardware stack levels used:    1
  5443 ;; This function calls:
  5444 ;;		Nothing
  5445 ;; This function is called by:
  5446 ;;		_INTERRUPT_InterruptManager
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           	psect	text33
  5451  00138A                     __ptext33:
  5452                           	opt stack 0
  5453  00138A                     _TMR0_ISR:
  5454                           	opt stack 23
  5455                           
  5456                           ;tmr0.c: 85: TMR0H = timer0ReloadVal16bit >> 8;
  5457                           
  5458                           ;incstack = 0
  5459  00138A  5018               	movf	_timer0ReloadVal16bit+1,w,c	;volatile
  5460  00138C  6ED7               	movwf	4055,c	;volatile
  5461                           
  5462                           ;tmr0.c: 86: TMR0L = (uint8_t) timer0ReloadVal16bit;
  5463  00138E  C017  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
  5464                           
  5465                           ;tmr0.c: 88: time++;
  5466  001392  0E01               	movlw	1
  5467  001394  0100               	movlb	0	; () banked
  5468  001396  2760               	addwf	_time& (0+255),f,b
  5469  001398  0E00               	movlw	0
  5470  00139A  2361               	addwfc	(_time+1)& (0+255),f,b
  5471  00139C  2362               	addwfc	(_time+2)& (0+255),f,b
  5472  00139E  2363               	addwfc	(_time+3)& (0+255),f,b
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;tmr0.c: 90: INTCONbits.TMR0IF = 0;
  5476  0013A0  94F2               	bcf	intcon,2,c	;volatile
  5477                           
  5478                           ; BSR set to: 0
  5479  0013A2  0012               	return		;funcret
  5480  0013A4                     __end_of_TMR0_ISR:
  5481                           	opt stack 0
  5482                           tosu	equ	0xFFF
  5483                           tosh	equ	0xFFE
  5484                           tosl	equ	0xFFD
  5485                           pclatu	equ	0xFFB
  5486                           pclath	equ	0xFFA
  5487                           tblptru	equ	0xFF8
  5488                           tblptrh	equ	0xFF7
  5489                           tblptrl	equ	0xFF6
  5490                           tablat	equ	0xFF5
  5491                           prodh	equ	0xFF4
  5492                           prodl	equ	0xFF3
  5493                           intcon	equ	0xFF2
  5494                           postinc0	equ	0xFEE
  5495                           fsr0h	equ	0xFEA
  5496                           fsr0l	equ	0xFE9
  5497                           wreg	equ	0xFE8
  5498                           fsr1h	equ	0xFE2
  5499                           fsr1l	equ	0xFE1
  5500                           indf2	equ	0xFDF
  5501                           postinc2	equ	0xFDE
  5502                           postdec2	equ	0xFDD
  5503                           plusw2	equ	0xFDB
  5504                           fsr2h	equ	0xFDA
  5505                           fsr2l	equ	0xFD9
  5506                           status	equ	0xFD8
  5507                           
  5508 ;; *************** function _EUSART1_Transmit_ISR *****************
  5509 ;; Defined at:
  5510 ;;		line 150 in file "UART.c"
  5511 ;; Parameters:    Size  Location     Type
  5512 ;;		None
  5513 ;; Auto vars:     Size  Location     Type
  5514 ;;		None
  5515 ;; Return value:  Size  Location     Type
  5516 ;;                  1    wreg      void 
  5517 ;; Registers used:
  5518 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5519 ;; Tracked objects:
  5520 ;;		On entry : 0/0
  5521 ;;		On exit  : 0/0
  5522 ;;		Unchanged: 0/0
  5523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5524 ;;      Params:         0       0       0       0       0       0       0
  5525 ;;      Locals:         0       0       0       0       0       0       0
  5526 ;;      Temps:          0       0       0       0       0       0       0
  5527 ;;      Totals:         0       0       0       0       0       0       0
  5528 ;;Total ram usage:        0 bytes
  5529 ;; Hardware stack levels used:    1
  5530 ;; Hardware stack levels required when called:    2
  5531 ;; This function calls:
  5532 ;;		i2_UART_buff_get
  5533 ;;		i2_UART_buff_size
  5534 ;; This function is called by:
  5535 ;;		_INTERRUPT_InterruptManager
  5536 ;; This function uses a non-reentrant model
  5537 ;;
  5538                           
  5539                           	psect	text34
  5540  001214                     __ptext34:
  5541                           	opt stack 0
  5542  001214                     _EUSART1_Transmit_ISR:
  5543                           	opt stack 21
  5544                           
  5545                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;incstack = 0
  5549  001214  0E00               	movlw	low _output_buffer
  5550  001216  6E23               	movwf	i2UART_buff_size@_this,c
  5551  001218  0E04               	movlw	high _output_buffer
  5552  00121A  6E24               	movwf	i2UART_buff_size@_this+1,c
  5553  00121C  ECFF  F009         	call	i2_UART_buff_size	;wreg free
  5554  001220  BE24               	btfsc	?i2_UART_buff_size+1,7,c
  5555  001222  D00D               	goto	i2l2245
  5556  001224  5024               	movf	?i2_UART_buff_size+1,w,c
  5557  001226  E103               	bnz	i2u192_40
  5558  001228  0423               	decf	?i2_UART_buff_size,w,c
  5559  00122A  A0D8               	btfss	status,0,c
  5560  00122C  D008               	goto	i2l2245
  5561  00122E                     i2u192_40:
  5562                           
  5563                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  5564  00122E  0E00               	movlw	low _output_buffer
  5565  001230  6E29               	movwf	i2UART_buff_get@_this,c
  5566  001232  0E04               	movlw	high _output_buffer
  5567  001234  6E2A               	movwf	i2UART_buff_get@_this+1,c
  5568  001236  EC23  F007         	call	i2_UART_buff_get	;wreg free
  5569  00123A  6EAD               	movwf	4013,c	;volatile
  5570                           
  5571                           ;UART.c: 154: } else {
  5572  00123C  0012               	return	
  5573  00123E                     i2l2245:
  5574                           
  5575                           ;UART.c: 155: Transmit_stall = 1;
  5576  00123E  0E01               	movlw	1
  5577  001240  6E44               	movwf	_Transmit_stall,c
  5578                           
  5579                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  5580  001242  989D               	bcf	3997,4,c	;volatile
  5581  001244  0012               	return	
  5582  001246                     __end_of_EUSART1_Transmit_ISR:
  5583                           	opt stack 0
  5584                           tosu	equ	0xFFF
  5585                           tosh	equ	0xFFE
  5586                           tosl	equ	0xFFD
  5587                           pclatu	equ	0xFFB
  5588                           pclath	equ	0xFFA
  5589                           tblptru	equ	0xFF8
  5590                           tblptrh	equ	0xFF7
  5591                           tblptrl	equ	0xFF6
  5592                           tablat	equ	0xFF5
  5593                           prodh	equ	0xFF4
  5594                           prodl	equ	0xFF3
  5595                           intcon	equ	0xFF2
  5596                           postinc0	equ	0xFEE
  5597                           fsr0h	equ	0xFEA
  5598                           fsr0l	equ	0xFE9
  5599                           wreg	equ	0xFE8
  5600                           fsr1h	equ	0xFE2
  5601                           fsr1l	equ	0xFE1
  5602                           indf2	equ	0xFDF
  5603                           postinc2	equ	0xFDE
  5604                           postdec2	equ	0xFDD
  5605                           plusw2	equ	0xFDB
  5606                           fsr2h	equ	0xFDA
  5607                           fsr2l	equ	0xFD9
  5608                           status	equ	0xFD8
  5609                           
  5610 ;; *************** function i2_UART_buff_size *****************
  5611 ;; Defined at:
  5612 ;;		line 102 in file "UART.c"
  5613 ;; Parameters:    Size  Location     Type
  5614 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  5615 ;;		 -> output_buffer(206), input_buffer(206), 
  5616 ;; Auto vars:     Size  Location     Type
  5617 ;;		None
  5618 ;; Return value:  Size  Location     Type
  5619 ;;                  2    0[COMRAM] int 
  5620 ;; Registers used:
  5621 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5622 ;; Tracked objects:
  5623 ;;		On entry : 0/0
  5624 ;;		On exit  : 0/0
  5625 ;;		Unchanged: 0/0
  5626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5627 ;;      Params:         2       0       0       0       0       0       0
  5628 ;;      Locals:         0       0       0       0       0       0       0
  5629 ;;      Temps:          0       0       0       0       0       0       0
  5630 ;;      Totals:         2       0       0       0       0       0       0
  5631 ;;Total ram usage:        2 bytes
  5632 ;; Hardware stack levels used:    1
  5633 ;; This function calls:
  5634 ;;		Nothing
  5635 ;; This function is called by:
  5636 ;;		_EUSART1_Transmit_ISR
  5637 ;; This function uses a non-reentrant model
  5638 ;;
  5639                           
  5640                           	psect	text35
  5641  0013FE                     __ptext35:
  5642                           	opt stack 0
  5643  0013FE                     i2_UART_buff_size:
  5644                           	opt stack 22
  5645                           
  5646                           ;UART.c: 103: return (_this->count);
  5647                           
  5648                           ;incstack = 0
  5649  0013FE  EE20 F0CC          	lfsr	2,204
  5650  001402  5023               	movf	i2UART_buff_size@_this,w,c
  5651  001404  26D9               	addwf	fsr2l,f,c
  5652  001406  5024               	movf	i2UART_buff_size@_this+1,w,c
  5653  001408  22DA               	addwfc	fsr2h,f,c
  5654  00140A  CFDE F023          	movff	postinc2,?i2_UART_buff_size
  5655  00140E  CFDD F024          	movff	postdec2,?i2_UART_buff_size+1
  5656  001412  0012               	return	
  5657  001414                     __end_ofi2_UART_buff_size:
  5658                           	opt stack 0
  5659                           tosu	equ	0xFFF
  5660                           tosh	equ	0xFFE
  5661                           tosl	equ	0xFFD
  5662                           pclatu	equ	0xFFB
  5663                           pclath	equ	0xFFA
  5664                           tblptru	equ	0xFF8
  5665                           tblptrh	equ	0xFF7
  5666                           tblptrl	equ	0xFF6
  5667                           tablat	equ	0xFF5
  5668                           prodh	equ	0xFF4
  5669                           prodl	equ	0xFF3
  5670                           intcon	equ	0xFF2
  5671                           postinc0	equ	0xFEE
  5672                           fsr0h	equ	0xFEA
  5673                           fsr0l	equ	0xFE9
  5674                           wreg	equ	0xFE8
  5675                           fsr1h	equ	0xFE2
  5676                           fsr1l	equ	0xFE1
  5677                           indf2	equ	0xFDF
  5678                           postinc2	equ	0xFDE
  5679                           postdec2	equ	0xFDD
  5680                           plusw2	equ	0xFDB
  5681                           fsr2h	equ	0xFDA
  5682                           fsr2l	equ	0xFD9
  5683                           status	equ	0xFD8
  5684                           
  5685 ;; *************** function i2_UART_buff_get *****************
  5686 ;; Defined at:
  5687 ;;		line 81 in file "UART.c"
  5688 ;; Parameters:    Size  Location     Type
  5689 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  5690 ;;		 -> output_buffer(206), input_buffer(206), 
  5691 ;; Auto vars:     Size  Location     Type
  5692 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  5693 ;; Return value:  Size  Location     Type
  5694 ;;                  1    wreg      unsigned char 
  5695 ;; Registers used:
  5696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5697 ;; Tracked objects:
  5698 ;;		On entry : 0/0
  5699 ;;		On exit  : 0/0
  5700 ;;		Unchanged: 0/0
  5701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5702 ;;      Params:         2       0       0       0       0       0       0
  5703 ;;      Locals:         1       0       0       0       0       0       0
  5704 ;;      Temps:          2       0       0       0       0       0       0
  5705 ;;      Totals:         5       0       0       0       0       0       0
  5706 ;;Total ram usage:        5 bytes
  5707 ;; Hardware stack levels used:    1
  5708 ;; Hardware stack levels required when called:    1
  5709 ;; This function calls:
  5710 ;;		i2_UART_buff_modulo_inc
  5711 ;; This function is called by:
  5712 ;;		_EUSART1_Transmit_ISR
  5713 ;; This function uses a non-reentrant model
  5714 ;;
  5715                           
  5716                           	psect	text36
  5717  000E46                     __ptext36:
  5718                           	opt stack 0
  5719  000E46                     i2_UART_buff_get:
  5720                           	opt stack 21
  5721                           
  5722                           ;UART.c: 82: unsigned char c;
  5723                           ;UART.c: 83: if (_this->count > 0) {
  5724                           
  5725                           ;incstack = 0
  5726  000E46  EE20 F0CC          	lfsr	2,204
  5727  000E4A  5029               	movf	i2UART_buff_get@_this,w,c
  5728  000E4C  26D9               	addwf	fsr2l,f,c
  5729  000E4E  502A               	movf	i2UART_buff_get@_this+1,w,c
  5730  000E50  22DA               	addwfc	fsr2h,f,c
  5731  000E52  0E01               	movlw	1
  5732  000E54  BEDB               	btfsc	plusw2,7,c
  5733  000E56  D03C               	goto	i2l2169
  5734  000E58  0E01               	movlw	1
  5735  000E5A  50DB               	movf	plusw2,w,c
  5736  000E5C  E103               	bnz	i2u184_40
  5737  000E5E  04DE               	decf	postinc2,w,c
  5738  000E60  A0D8               	btfss	status,0,c
  5739  000E62  D036               	goto	i2l2169
  5740  000E64                     i2u184_40:
  5741                           
  5742                           ;UART.c: 84: c = _this->buf[_this->tail];
  5743  000E64  EE20 F0CA          	lfsr	2,202
  5744  000E68  5029               	movf	i2UART_buff_get@_this,w,c
  5745  000E6A  26D9               	addwf	fsr2l,f,c
  5746  000E6C  502A               	movf	i2UART_buff_get@_this+1,w,c
  5747  000E6E  22DA               	addwfc	fsr2h,f,c
  5748  000E70  CFDE F02B          	movff	postinc2,??i2_UART_buff_get
  5749  000E74  CFDD F02C          	movff	postdec2,??i2_UART_buff_get+1
  5750  000E78  502B               	movf	??i2_UART_buff_get,w,c
  5751  000E7A  2429               	addwf	i2UART_buff_get@_this,w,c
  5752  000E7C  6ED9               	movwf	fsr2l,c
  5753  000E7E  502C               	movf	??i2_UART_buff_get+1,w,c
  5754  000E80  202A               	addwfc	i2UART_buff_get@_this+1,w,c
  5755  000E82  6EDA               	movwf	fsr2h,c
  5756  000E84  50DF               	movf	indf2,w,c
  5757  000E86  6E2D               	movwf	i2UART_buff_get@c,c
  5758                           
  5759                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  5760  000E88  EE20 F0CA          	lfsr	2,202
  5761  000E8C  5029               	movf	i2UART_buff_get@_this,w,c
  5762  000E8E  26D9               	addwf	fsr2l,f,c
  5763  000E90  502A               	movf	i2UART_buff_get@_this+1,w,c
  5764  000E92  22DA               	addwfc	fsr2h,f,c
  5765  000E94  CFDE F023          	movff	postinc2,i2UART_buff_modulo_inc@value
  5766  000E98  CFDD F024          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5767  000E9C  0E00               	movlw	0
  5768  000E9E  6E26               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5769  000EA0  0EC8               	movlw	200
  5770  000EA2  6E25               	movwf	i2UART_buff_modulo_inc@modulus,c
  5771  000EA4  EC64  F009         	call	i2_UART_buff_modulo_inc	;wreg free
  5772  000EA8  EE20 F0CA          	lfsr	2,202
  5773  000EAC  5029               	movf	i2UART_buff_get@_this,w,c
  5774  000EAE  26D9               	addwf	fsr2l,f,c
  5775  000EB0  502A               	movf	i2UART_buff_get@_this+1,w,c
  5776  000EB2  22DA               	addwfc	fsr2h,f,c
  5777  000EB4  C023  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5778  000EB8  C024  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5779                           
  5780                           ;UART.c: 86: --_this->count;
  5781  000EBC  EE20 F0CC          	lfsr	2,204
  5782  000EC0  5029               	movf	i2UART_buff_get@_this,w,c
  5783  000EC2  26D9               	addwf	fsr2l,f,c
  5784  000EC4  502A               	movf	i2UART_buff_get@_this+1,w,c
  5785  000EC6  22DA               	addwfc	fsr2h,f,c
  5786  000EC8  06DE               	decf	postinc2,f,c
  5787  000ECA  0E00               	movlw	0
  5788  000ECC  5ADD               	subwfb	postdec2,f,c
  5789                           
  5790                           ;UART.c: 87: } else {
  5791  000ECE  D002               	goto	i2l286
  5792  000ED0                     i2l2169:
  5793                           
  5794                           ;UART.c: 88: c = 0;
  5795  000ED0  0E00               	movlw	0
  5796  000ED2  6E2D               	movwf	i2UART_buff_get@c,c
  5797  000ED4                     i2l286:
  5798                           
  5799                           ;UART.c: 89: }
  5800                           ;UART.c: 90: return (c);
  5801  000ED4  502D               	movf	i2UART_buff_get@c,w,c
  5802  000ED6  0012               	return	
  5803  000ED8                     __end_ofi2_UART_buff_get:
  5804                           	opt stack 0
  5805                           tosu	equ	0xFFF
  5806                           tosh	equ	0xFFE
  5807                           tosl	equ	0xFFD
  5808                           pclatu	equ	0xFFB
  5809                           pclath	equ	0xFFA
  5810                           tblptru	equ	0xFF8
  5811                           tblptrh	equ	0xFF7
  5812                           tblptrl	equ	0xFF6
  5813                           tablat	equ	0xFF5
  5814                           prodh	equ	0xFF4
  5815                           prodl	equ	0xFF3
  5816                           intcon	equ	0xFF2
  5817                           postinc0	equ	0xFEE
  5818                           fsr0h	equ	0xFEA
  5819                           fsr0l	equ	0xFE9
  5820                           wreg	equ	0xFE8
  5821                           fsr1h	equ	0xFE2
  5822                           fsr1l	equ	0xFE1
  5823                           indf2	equ	0xFDF
  5824                           postinc2	equ	0xFDE
  5825                           postdec2	equ	0xFDD
  5826                           plusw2	equ	0xFDB
  5827                           fsr2h	equ	0xFDA
  5828                           fsr2l	equ	0xFD9
  5829                           status	equ	0xFD8
  5830                           
  5831 ;; *************** function _EUSART1_Receive_ISR *****************
  5832 ;; Defined at:
  5833 ;;		line 139 in file "UART.c"
  5834 ;; Parameters:    Size  Location     Type
  5835 ;;		None
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;  data            1   11[COMRAM] unsigned char 
  5838 ;; Return value:  Size  Location     Type
  5839 ;;                  1    wreg      void 
  5840 ;; Registers used:
  5841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5842 ;; Tracked objects:
  5843 ;;		On entry : 0/0
  5844 ;;		On exit  : 0/0
  5845 ;;		Unchanged: 0/0
  5846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5847 ;;      Params:         0       0       0       0       0       0       0
  5848 ;;      Locals:         1       0       0       0       0       0       0
  5849 ;;      Temps:          0       0       0       0       0       0       0
  5850 ;;      Totals:         1       0       0       0       0       0       0
  5851 ;;Total ram usage:        1 bytes
  5852 ;; Hardware stack levels used:    1
  5853 ;; Hardware stack levels required when called:    2
  5854 ;; This function calls:
  5855 ;;		i2_UART_buff_put
  5856 ;; This function is called by:
  5857 ;;		_INTERRUPT_InterruptManager
  5858 ;; This function uses a non-reentrant model
  5859 ;;
  5860                           
  5861                           	psect	text37
  5862  00136C                     __ptext37:
  5863                           	opt stack 0
  5864  00136C                     _EUSART1_Receive_ISR:
  5865                           	opt stack 21
  5866                           
  5867                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  5868                           
  5869                           ;incstack = 0
  5870  00136C  A2AB               	btfss	4011,1,c	;volatile
  5871  00136E  D002               	goto	i2l317
  5872                           
  5873                           ;UART.c: 143: RC1STAbits.CREN = 0;
  5874  001370  98AB               	bcf	4011,4,c	;volatile
  5875                           
  5876                           ;UART.c: 144: RC1STAbits.CREN = 1;
  5877  001372  88AB               	bsf	4011,4,c	;volatile
  5878  001374                     i2l317:
  5879                           
  5880                           ;UART.c: 145: }
  5881                           ;UART.c: 146: unsigned char data = RCREG1;
  5882  001374  CFAE F02E          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  5883                           
  5884                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  5885  001378  0E00               	movlw	low _input_buffer
  5886  00137A  6E29               	movwf	i2UART_buff_put@_this,c
  5887  00137C  0E03               	movlw	high _input_buffer
  5888  00137E  6E2A               	movwf	i2UART_buff_put@_this+1,c
  5889  001380  C02E  F02B         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  5890  001384  EC8A  F005         	call	i2_UART_buff_put	;wreg free
  5891  001388  0012               	return		;funcret
  5892  00138A                     __end_of_EUSART1_Receive_ISR:
  5893                           	opt stack 0
  5894                           tosu	equ	0xFFF
  5895                           tosh	equ	0xFFE
  5896                           tosl	equ	0xFFD
  5897                           pclatu	equ	0xFFB
  5898                           pclath	equ	0xFFA
  5899                           tblptru	equ	0xFF8
  5900                           tblptrh	equ	0xFF7
  5901                           tblptrl	equ	0xFF6
  5902                           tablat	equ	0xFF5
  5903                           prodh	equ	0xFF4
  5904                           prodl	equ	0xFF3
  5905                           intcon	equ	0xFF2
  5906                           postinc0	equ	0xFEE
  5907                           fsr0h	equ	0xFEA
  5908                           fsr0l	equ	0xFE9
  5909                           wreg	equ	0xFE8
  5910                           fsr1h	equ	0xFE2
  5911                           fsr1l	equ	0xFE1
  5912                           indf2	equ	0xFDF
  5913                           postinc2	equ	0xFDE
  5914                           postdec2	equ	0xFDD
  5915                           plusw2	equ	0xFDB
  5916                           fsr2h	equ	0xFDA
  5917                           fsr2l	equ	0xFD9
  5918                           status	equ	0xFD8
  5919                           
  5920 ;; *************** function i2_UART_buff_put *****************
  5921 ;; Defined at:
  5922 ;;		line 68 in file "UART.c"
  5923 ;; Parameters:    Size  Location     Type
  5924 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  5925 ;;		 -> output_buffer(206), input_buffer(206), 
  5926 ;;  c               1    8[COMRAM] const unsigned char 
  5927 ;; Auto vars:     Size  Location     Type
  5928 ;;		None
  5929 ;; Return value:  Size  Location     Type
  5930 ;;                  1    wreg      void 
  5931 ;; Registers used:
  5932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5933 ;; Tracked objects:
  5934 ;;		On entry : 0/0
  5935 ;;		On exit  : 0/0
  5936 ;;		Unchanged: 0/0
  5937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5938 ;;      Params:         3       0       0       0       0       0       0
  5939 ;;      Locals:         0       0       0       0       0       0       0
  5940 ;;      Temps:          2       0       0       0       0       0       0
  5941 ;;      Totals:         5       0       0       0       0       0       0
  5942 ;;Total ram usage:        5 bytes
  5943 ;; Hardware stack levels used:    1
  5944 ;; Hardware stack levels required when called:    1
  5945 ;; This function calls:
  5946 ;;		i2_UART_buff_modulo_inc
  5947 ;; This function is called by:
  5948 ;;		_EUSART1_Receive_ISR
  5949 ;; This function uses a non-reentrant model
  5950 ;;
  5951                           
  5952                           	psect	text38
  5953  000B14                     __ptext38:
  5954                           	opt stack 0
  5955  000B14                     i2_UART_buff_put:
  5956                           	opt stack 21
  5957                           
  5958                           ;UART.c: 69: if (_this->count < 200) {
  5959                           
  5960                           ;incstack = 0
  5961  000B14  EE20 F0CC          	lfsr	2,204
  5962  000B18  5029               	movf	i2UART_buff_put@_this,w,c
  5963  000B1A  26D9               	addwf	fsr2l,f,c
  5964  000B1C  502A               	movf	i2UART_buff_put@_this+1,w,c
  5965  000B1E  22DA               	addwfc	fsr2h,f,c
  5966  000B20  0E01               	movlw	1
  5967  000B22  BEDB               	btfsc	plusw2,7,c
  5968  000B24  D007               	goto	i2l2149
  5969  000B26  0E01               	movlw	1
  5970  000B28  50DB               	movf	plusw2,w,c
  5971  000B2A  E13A               	bnz	i2l2155
  5972  000B2C  0EC8               	movlw	200
  5973  000B2E  5CDE               	subwf	postinc2,w,c
  5974  000B30  B0D8               	btfsc	status,0,c
  5975  000B32  D036               	goto	i2l2155
  5976  000B34                     i2l2149:
  5977                           
  5978                           ;UART.c: 70: _this->buf[_this->head] = c;
  5979  000B34  EE20 F0C8          	lfsr	2,200
  5980  000B38  5029               	movf	i2UART_buff_put@_this,w,c
  5981  000B3A  26D9               	addwf	fsr2l,f,c
  5982  000B3C  502A               	movf	i2UART_buff_put@_this+1,w,c
  5983  000B3E  22DA               	addwfc	fsr2h,f,c
  5984  000B40  CFDE F02C          	movff	postinc2,??i2_UART_buff_put
  5985  000B44  CFDD F02D          	movff	postdec2,??i2_UART_buff_put+1
  5986  000B48  502C               	movf	??i2_UART_buff_put,w,c
  5987  000B4A  2429               	addwf	i2UART_buff_put@_this,w,c
  5988  000B4C  6ED9               	movwf	fsr2l,c
  5989  000B4E  502D               	movf	??i2_UART_buff_put+1,w,c
  5990  000B50  202A               	addwfc	i2UART_buff_put@_this+1,w,c
  5991  000B52  6EDA               	movwf	fsr2h,c
  5992  000B54  C02B  FFDF         	movff	i2UART_buff_put@c,indf2
  5993                           
  5994                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  5995  000B58  EE20 F0C8          	lfsr	2,200
  5996  000B5C  5029               	movf	i2UART_buff_put@_this,w,c
  5997  000B5E  26D9               	addwf	fsr2l,f,c
  5998  000B60  502A               	movf	i2UART_buff_put@_this+1,w,c
  5999  000B62  22DA               	addwfc	fsr2h,f,c
  6000  000B64  CFDE F023          	movff	postinc2,i2UART_buff_modulo_inc@value
  6001  000B68  CFDD F024          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  6002  000B6C  0E00               	movlw	0
  6003  000B6E  6E26               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  6004  000B70  0EC8               	movlw	200
  6005  000B72  6E25               	movwf	i2UART_buff_modulo_inc@modulus,c
  6006  000B74  EC64  F009         	call	i2_UART_buff_modulo_inc	;wreg free
  6007  000B78  EE20 F0C8          	lfsr	2,200
  6008  000B7C  5029               	movf	i2UART_buff_put@_this,w,c
  6009  000B7E  26D9               	addwf	fsr2l,f,c
  6010  000B80  502A               	movf	i2UART_buff_put@_this+1,w,c
  6011  000B82  22DA               	addwfc	fsr2h,f,c
  6012  000B84  C023  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  6013  000B88  C024  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  6014                           
  6015                           ;UART.c: 72: ++_this->count;
  6016  000B8C  EE20 F0CC          	lfsr	2,204
  6017  000B90  5029               	movf	i2UART_buff_put@_this,w,c
  6018  000B92  26D9               	addwf	fsr2l,f,c
  6019  000B94  502A               	movf	i2UART_buff_put@_this+1,w,c
  6020  000B96  22DA               	addwfc	fsr2h,f,c
  6021  000B98  2ADE               	incf	postinc2,f,c
  6022  000B9A  0E00               	movlw	0
  6023  000B9C  22DD               	addwfc	postdec2,f,c
  6024                           
  6025                           ;UART.c: 73: } else {
  6026  000B9E  0012               	return	
  6027  000BA0                     i2l2155:
  6028                           
  6029                           ;UART.c: 74: _this->buf[_this->head] = c;
  6030  000BA0  EE20 F0C8          	lfsr	2,200
  6031  000BA4  5029               	movf	i2UART_buff_put@_this,w,c
  6032  000BA6  26D9               	addwf	fsr2l,f,c
  6033  000BA8  502A               	movf	i2UART_buff_put@_this+1,w,c
  6034  000BAA  22DA               	addwfc	fsr2h,f,c
  6035  000BAC  CFDE F02C          	movff	postinc2,??i2_UART_buff_put
  6036  000BB0  CFDD F02D          	movff	postdec2,??i2_UART_buff_put+1
  6037  000BB4  502C               	movf	??i2_UART_buff_put,w,c
  6038  000BB6  2429               	addwf	i2UART_buff_put@_this,w,c
  6039  000BB8  6ED9               	movwf	fsr2l,c
  6040  000BBA  502D               	movf	??i2_UART_buff_put+1,w,c
  6041  000BBC  202A               	addwfc	i2UART_buff_put@_this+1,w,c
  6042  000BBE  6EDA               	movwf	fsr2h,c
  6043  000BC0  C02B  FFDF         	movff	i2UART_buff_put@c,indf2
  6044                           
  6045                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  6046  000BC4  EE20 F0C8          	lfsr	2,200
  6047  000BC8  5029               	movf	i2UART_buff_put@_this,w,c
  6048  000BCA  26D9               	addwf	fsr2l,f,c
  6049  000BCC  502A               	movf	i2UART_buff_put@_this+1,w,c
  6050  000BCE  22DA               	addwfc	fsr2h,f,c
  6051  000BD0  CFDE F023          	movff	postinc2,i2UART_buff_modulo_inc@value
  6052  000BD4  CFDD F024          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  6053  000BD8  0E00               	movlw	0
  6054  000BDA  6E26               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  6055  000BDC  0EC8               	movlw	200
  6056  000BDE  6E25               	movwf	i2UART_buff_modulo_inc@modulus,c
  6057  000BE0  EC64  F009         	call	i2_UART_buff_modulo_inc	;wreg free
  6058  000BE4  EE20 F0C8          	lfsr	2,200
  6059  000BE8  5029               	movf	i2UART_buff_put@_this,w,c
  6060  000BEA  26D9               	addwf	fsr2l,f,c
  6061  000BEC  502A               	movf	i2UART_buff_put@_this+1,w,c
  6062  000BEE  22DA               	addwfc	fsr2h,f,c
  6063  000BF0  C023  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  6064  000BF4  C024  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  6065                           
  6066                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  6067  000BF8  EE20 F0CA          	lfsr	2,202
  6068  000BFC  5029               	movf	i2UART_buff_put@_this,w,c
  6069  000BFE  26D9               	addwf	fsr2l,f,c
  6070  000C00  502A               	movf	i2UART_buff_put@_this+1,w,c
  6071  000C02  22DA               	addwfc	fsr2h,f,c
  6072  000C04  CFDE F023          	movff	postinc2,i2UART_buff_modulo_inc@value
  6073  000C08  CFDD F024          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  6074  000C0C  0E00               	movlw	0
  6075  000C0E  6E26               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  6076  000C10  0EC8               	movlw	200
  6077  000C12  6E25               	movwf	i2UART_buff_modulo_inc@modulus,c
  6078  000C14  EC64  F009         	call	i2_UART_buff_modulo_inc	;wreg free
  6079  000C18  EE20 F0CA          	lfsr	2,202
  6080  000C1C  5029               	movf	i2UART_buff_put@_this,w,c
  6081  000C1E  26D9               	addwf	fsr2l,f,c
  6082  000C20  502A               	movf	i2UART_buff_put@_this+1,w,c
  6083  000C22  22DA               	addwfc	fsr2h,f,c
  6084  000C24  C023  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  6085  000C28  C024  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  6086  000C2C  0012               	return	
  6087  000C2E                     __end_ofi2_UART_buff_put:
  6088                           	opt stack 0
  6089                           tosu	equ	0xFFF
  6090                           tosh	equ	0xFFE
  6091                           tosl	equ	0xFFD
  6092                           pclatu	equ	0xFFB
  6093                           pclath	equ	0xFFA
  6094                           tblptru	equ	0xFF8
  6095                           tblptrh	equ	0xFF7
  6096                           tblptrl	equ	0xFF6
  6097                           tablat	equ	0xFF5
  6098                           prodh	equ	0xFF4
  6099                           prodl	equ	0xFF3
  6100                           intcon	equ	0xFF2
  6101                           postinc0	equ	0xFEE
  6102                           fsr0h	equ	0xFEA
  6103                           fsr0l	equ	0xFE9
  6104                           wreg	equ	0xFE8
  6105                           fsr1h	equ	0xFE2
  6106                           fsr1l	equ	0xFE1
  6107                           indf2	equ	0xFDF
  6108                           postinc2	equ	0xFDE
  6109                           postdec2	equ	0xFDD
  6110                           plusw2	equ	0xFDB
  6111                           fsr2h	equ	0xFDA
  6112                           fsr2l	equ	0xFD9
  6113                           status	equ	0xFD8
  6114                           
  6115 ;; *************** function i2_UART_buff_modulo_inc *****************
  6116 ;; Defined at:
  6117 ;;		line 106 in file "UART.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;  value           2    0[COMRAM] const unsigned int 
  6120 ;;  modulus         2    2[COMRAM] const unsigned int 
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  6123 ;; Return value:  Size  Location     Type
  6124 ;;                  2    0[COMRAM] unsigned int 
  6125 ;; Registers used:
  6126 ;;		wreg, status,2, status,0
  6127 ;; Tracked objects:
  6128 ;;		On entry : 0/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6132 ;;      Params:         4       0       0       0       0       0       0
  6133 ;;      Locals:         2       0       0       0       0       0       0
  6134 ;;      Temps:          0       0       0       0       0       0       0
  6135 ;;      Totals:         6       0       0       0       0       0       0
  6136 ;;Total ram usage:        6 bytes
  6137 ;; Hardware stack levels used:    1
  6138 ;; This function calls:
  6139 ;;		Nothing
  6140 ;; This function is called by:
  6141 ;;		i2_UART_buff_put
  6142 ;;		i2_UART_buff_get
  6143 ;; This function uses a non-reentrant model
  6144 ;;
  6145                           
  6146                           	psect	text39
  6147  0012C8                     __ptext39:
  6148                           	opt stack 0
  6149  0012C8                     i2_UART_buff_modulo_inc:
  6150                           	opt stack 21
  6151                           
  6152                           ;UART.c: 107: unsigned int my_value = value + 1;
  6153                           
  6154                           ;incstack = 0
  6155  0012C8  0E01               	movlw	1
  6156  0012CA  2423               	addwf	i2UART_buff_modulo_inc@value,w,c
  6157  0012CC  6E27               	movwf	i2UART_buff_modulo_inc@my_value,c
  6158  0012CE  0E00               	movlw	0
  6159  0012D0  2024               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  6160  0012D2  6E28               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  6161                           
  6162                           ;UART.c: 108: if (my_value >= modulus) {
  6163  0012D4  5025               	movf	i2UART_buff_modulo_inc@modulus,w,c
  6164  0012D6  5C27               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  6165  0012D8  5026               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  6166  0012DA  5828               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  6167  0012DC  A0D8               	btfss	status,0,c
  6168  0012DE  D004               	goto	i2l1977
  6169                           
  6170                           ;UART.c: 109: my_value = 0;
  6171  0012E0  0E00               	movlw	0
  6172  0012E2  6E28               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  6173  0012E4  0E00               	movlw	0
  6174  0012E6  6E27               	movwf	i2UART_buff_modulo_inc@my_value,c
  6175  0012E8                     i2l1977:
  6176                           
  6177                           ;UART.c: 110: }
  6178                           ;UART.c: 111: return (my_value);
  6179  0012E8  C027  F023         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  6180  0012EC  C028  F024         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  6181  0012F0  0012               	return	
  6182  0012F2                     __end_ofi2_UART_buff_modulo_inc:
  6183                           	opt stack 0
  6184  0000                     tosu	equ	0xFFF
  6185                           tosh	equ	0xFFE
  6186                           tosl	equ	0xFFD
  6187                           pclatu	equ	0xFFB
  6188                           pclath	equ	0xFFA
  6189                           tblptru	equ	0xFF8
  6190                           tblptrh	equ	0xFF7
  6191                           tblptrl	equ	0xFF6
  6192                           tablat	equ	0xFF5
  6193                           prodh	equ	0xFF4
  6194                           prodl	equ	0xFF3
  6195                           intcon	equ	0xFF2
  6196                           postinc0	equ	0xFEE
  6197                           fsr0h	equ	0xFEA
  6198                           fsr0l	equ	0xFE9
  6199                           wreg	equ	0xFE8
  6200                           fsr1h	equ	0xFE2
  6201                           fsr1l	equ	0xFE1
  6202                           indf2	equ	0xFDF
  6203                           postinc2	equ	0xFDE
  6204                           postdec2	equ	0xFDD
  6205                           plusw2	equ	0xFDB
  6206                           fsr2h	equ	0xFDA
  6207                           fsr2l	equ	0xFD9
  6208                           status	equ	0xFD8
  6209                           tosu	equ	0xFFF
  6210                           tosh	equ	0xFFE
  6211                           tosl	equ	0xFFD
  6212                           pclatu	equ	0xFFB
  6213                           pclath	equ	0xFFA
  6214                           tblptru	equ	0xFF8
  6215                           tblptrh	equ	0xFF7
  6216                           tblptrl	equ	0xFF6
  6217                           tablat	equ	0xFF5
  6218                           prodh	equ	0xFF4
  6219                           prodl	equ	0xFF3
  6220                           intcon	equ	0xFF2
  6221                           postinc0	equ	0xFEE
  6222                           fsr0h	equ	0xFEA
  6223                           fsr0l	equ	0xFE9
  6224                           wreg	equ	0xFE8
  6225                           fsr1h	equ	0xFE2
  6226                           fsr1l	equ	0xFE1
  6227                           indf2	equ	0xFDF
  6228                           postinc2	equ	0xFDE
  6229                           postdec2	equ	0xFDD
  6230                           plusw2	equ	0xFDB
  6231                           fsr2h	equ	0xFDA
  6232                           fsr2l	equ	0xFD9
  6233                           status	equ	0xFD8
  6234                           
  6235                           	psect	text40
  6236  000000                     __ptext40:
  6237                           	opt stack 0
  6238                           tosu	equ	0xFFF
  6239                           tosh	equ	0xFFE
  6240                           tosl	equ	0xFFD
  6241                           pclatu	equ	0xFFB
  6242                           pclath	equ	0xFFA
  6243                           tblptru	equ	0xFF8
  6244                           tblptrh	equ	0xFF7
  6245                           tblptrl	equ	0xFF6
  6246                           tablat	equ	0xFF5
  6247                           prodh	equ	0xFF4
  6248                           prodl	equ	0xFF3
  6249                           intcon	equ	0xFF2
  6250                           postinc0	equ	0xFEE
  6251                           fsr0h	equ	0xFEA
  6252                           fsr0l	equ	0xFE9
  6253                           wreg	equ	0xFE8
  6254                           fsr1h	equ	0xFE2
  6255                           fsr1l	equ	0xFE1
  6256                           indf2	equ	0xFDF
  6257                           postinc2	equ	0xFDE
  6258                           postdec2	equ	0xFDD
  6259                           plusw2	equ	0xFDB
  6260                           fsr2h	equ	0xFDA
  6261                           fsr2l	equ	0xFD9
  6262                           status	equ	0xFD8
  6263                           
  6264                           	psect	rparam
  6265  0000                     tosu	equ	0xFFF
  6266                           tosh	equ	0xFFE
  6267                           tosl	equ	0xFFD
  6268                           pclatu	equ	0xFFB
  6269                           pclath	equ	0xFFA
  6270                           tblptru	equ	0xFF8
  6271                           tblptrh	equ	0xFF7
  6272                           tblptrl	equ	0xFF6
  6273                           tablat	equ	0xFF5
  6274                           prodh	equ	0xFF4
  6275                           prodl	equ	0xFF3
  6276                           intcon	equ	0xFF2
  6277                           postinc0	equ	0xFEE
  6278                           fsr0h	equ	0xFEA
  6279                           fsr0l	equ	0xFE9
  6280                           wreg	equ	0xFE8
  6281                           fsr1h	equ	0xFE2
  6282                           fsr1l	equ	0xFE1
  6283                           indf2	equ	0xFDF
  6284                           postinc2	equ	0xFDE
  6285                           postdec2	equ	0xFDD
  6286                           plusw2	equ	0xFDB
  6287                           fsr2h	equ	0xFDA
  6288                           fsr2l	equ	0xFD9
  6289                           status	equ	0xFD8
  6290                           
  6291                           	psect	temp
  6292  000045                     btemp:
  6293                           	opt stack 0
  6294  000045                     	ds	1
  6295  0000                     int$flags	set	btemp
  6296                           tosu	equ	0xFFF
  6297                           tosh	equ	0xFFE
  6298                           tosl	equ	0xFFD
  6299                           pclatu	equ	0xFFB
  6300                           pclath	equ	0xFFA
  6301                           tblptru	equ	0xFF8
  6302                           tblptrh	equ	0xFF7
  6303                           tblptrl	equ	0xFF6
  6304                           tablat	equ	0xFF5
  6305                           prodh	equ	0xFF4
  6306                           prodl	equ	0xFF3
  6307                           intcon	equ	0xFF2
  6308                           postinc0	equ	0xFEE
  6309                           fsr0h	equ	0xFEA
  6310                           fsr0l	equ	0xFE9
  6311                           wreg	equ	0xFE8
  6312                           fsr1h	equ	0xFE2
  6313                           fsr1l	equ	0xFE1
  6314                           indf2	equ	0xFDF
  6315                           postinc2	equ	0xFDE
  6316                           postdec2	equ	0xFDD
  6317                           plusw2	equ	0xFDB
  6318                           fsr2h	equ	0xFDA
  6319                           fsr2l	equ	0xFD9
  6320                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         883
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     33      68
    BANK0           160     24      55
    BANK1           256      0     206
    BANK2           256      0     200
    BANK3           256      0     206
    BANK4           256      0     206
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(COMRAM[3]), receiveData@holder_324(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK2[200]), ring_buffer(BANK1[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK1[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 10
		 -> receiveArray(BANK0[10]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 10
		 -> NULL(NULL[0]), receiveArray(BANK0[10]), 


Critical Paths under _main in COMRAM

    _respondECU->_ToSend
    _sendData->_CRC8
    _sendData->_crcBufS_put
    _FastTransfer_buffer_flush->_memset
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _receiveData->_CRC8
    _Send_put->_UART_buff_get
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _begin->___awdiv
    _UART_buff_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _sendData->_FastTransfer_buffer_flush
    _sendData->_Send_put
    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _receiveData->_Send_put
    _Send_put->_UART_buff_put
    _Receive_get->_UART_buff_get
    _ComStart->_begin
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   15532
                         _ReadFaults
                            _SetTime
                              _Start
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   13054
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           1     1      0    7592
                                             11 BANK0      1     1      0
                              _Delay
                          _GetFaults
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    5704
                                              6 BANK0      5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                              2 BANK0      4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1684
                                             32 COMRAM     1     1      0
                                              7 BANK0      2     0      2
            _FastTransfer_buffer_put
                          _GetFaults (ARG)
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1391
                                              0 BANK0      7     2      5
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     602
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _GetFaults                                            1     1      0      30
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     174
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0    5462
                                              6 BANK0     18    18      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                              5 BANK0      1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                              0 BANK0      5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     1     1      0
                                              0 BANK0      4     2      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Start                                                0     0      0    2478
                           _ComStart
               _INTERRUPT_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ComStart                                             0     0      0    2478
                 _EUSART1_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (3) _begin                                               13     0     13    1463
                                              4 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     599
                                             26 COMRAM     4     0      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (4) _UART_buff_init                                       2     0      2    1015
                                              2 BANK0      2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     6     0      6
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SetTime                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadFaults                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ReadFaults
   _SetTime
   _Start
     _ComStart
       _EUSART1_Initialize
         _UART_buff_init
           _memset
       _begin
         ___awdiv
     _INTERRUPT_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _updateComms
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _respondECU
       _Delay
       _GetFaults
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
         _GetFaults (ARG)
       _sendData
         Absolute function(Fake) *
         _CRC8 *
         _FastTransfer_buffer_flush *
           _memset
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C8       8       78.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      CE       6       80.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     18      37       4       34.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     21      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3AD       9        0.0%
DATA                 0      0     3AD      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun Oct 30 22:07:00 2016

      __end_of_FastTransfer_buffer_flush 0F44                   i2_UART_buff_modulo_inc 12C8  
                           _rx_array_inx 0021                             ___awdiv@sign 0080  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    l110 114C                                      l237 132C  
                                    l460 11FE                                      l286 0DA6  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
   FastTransfer_buffer_flush@clearBuffer 0083                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
          i2UART_buff_modulo_inc@modulus 0025                             __CFG_LVP$OFF 000000  
                                   l1273 13C8                                     l2403 1120  
                                   l2501 0E1C                                     l2505 0E28  
                                   l2409 1136                                     l2417 1152  
                                   l2601 01A6                                     l2419 1158  
                                   l2363 12BE                                     l2603 01BE  
                                   l2373 1262                                     l2509 0E3C  
                                   l2701 0610                                     l2621 0238  
                                   l2605 01C4                                     l2613 01FE  
                                   l2541 08BE                                     l2383 0A74  
                                   l2711 06C6                                     l2703 062A  
                                   l2439 071C                                     l2551 0936  
                                   l2543 08D8                                     l2369 1250  
                                   l2377 09F8                                     l2705 0644  
                                   l2713 06E2                                     l2641 039A  
                                   l2633 02FC                                     l2625 0260  
                                   l2617 0206                                     l2721 06EE  
                                   l2553 0960                                     l2545 08F4  
                                   l2491 0DF8                                     l2483 0DD4  
                                   l2707 065E                                     l2643 03AE  
                                   l2555 0966                                     l2547 090E  
                                   l1589 1452                                     l2493 0DFC  
                                   l2477 0DC2                                     l2397 0DA2  
                                   l2709 0678                                     l2661 0482  
                                   l2581 00D4                                     l2549 092A  
                                   l2671 0538                                     l2663 049C  
                                   l2639 0396                                     l1935 11EA  
                                   l1759 1294                                     l2559 09A2  
                                   l2489 0DEE                                     l2665 04B6  
                                   l2657 044E                                     l2673 0554  
                                   l2585 0100                                     l2667 04D0  
                                   l2659 0468                                     l2683 0560  
                                   l2669 04EA                                     l2589 0104  
                                   l2791 1318                                     l2697 05DC  
                                   l2699 05F6                     receiveData@crcHolder 0091  
                                   _CRC8 111A                                     u2210 0D26  
                                   u2250 0CF0                                     u3037 11F0  
                                   u2271 071A                                     u2408 093A  
                                   u2508 0126                                     u2428 098A  
                                   u2509 013A                                     u2358 08A8  
                                   u2631 02A0                                     u2608 023C  
                                   u2528 0144                                     u2448 00AE  
                                   u2368 08C2                                     u2609 0250  
                                   u2529 0158                                     u2449 00C2  
                                   u2538 015E                                     u2378 08DC  
                                   u2539 0172                                     u2708 046C  
                                   u2548 0178                                     u2468 00DC  
                                   u2388 08F8                                     u2549 018C  
                                   u2469 00F0                                     u2718 0486  
                                   u2398 0912                                     u2808 05FA  
                                   u2728 04A0                                     u2568 01AA  
                                   u2488 0108                                     u2489 011C  
                                   u2818 0614                                     u2738 04BA  
                                   u2828 062E                                     u2748 04D4  
                                   u2838 0648                                     u2758 04EE  
                                   u2598 020A                                     u2599 021E  
                                   u2848 0662                                     u2768 053C  
                                   u2688 0438                                     u2858 067C  
                                   u2698 0452                                     u2868 06CA  
                                   u2788 05C6                                     u2798 05E0  
                                   _main 1312                          _TMR0_StartTimer 1458  
                                   _time 0060                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   btemp 0045                            __CFG_BORV$190 000000  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3          __end_of_FastTransfer_buffer_put 088C  
                                   start 00A0                            __CFG_IESO$OFF 000000  
                           ___param_bank 000010           i2UART_buff_modulo_inc@my_value 0027  
                                  ?_CRC8 003D                          __end_of_SetTime 1428  
                __end_of_TMR0_Initialize 134E                       crcBufS_put@address 003F  
                                  ?_main 0023                          __end_of___awdiv 0E46  
                                  _T0CON 000FD5                          ___awdiv@divisor 003F  
                         __CFG_DEBUG$OFF 000000                                    i2l317 1374  
                                  i2l451 004E                                    i2l453 005A  
                                  i2l286 0ED4                                    i2l457 0064  
                        ___awdiv@counter 007F                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6                                    _Delay 11E0  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 1214                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                       __end_of_TMR0_ISR 13A4                                    _Start 10C4  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _begin 106C  
                         __CFG_EBTRB$OFF 000000                                    _group 0009  
                     __CFG_MCLRE$EXTMCLR 000000                                    pclath 000FFA  
                                  tablat 000FF5                            ??_Receive_get 0044  
                                  plusw2 000FDB                           begin@stuffpeek 008E  
                   __size_of_crcBufS_put 00D8                                    status 000FD8  
                         __CFG_HFOFST$ON 000000                             ?_receiveData 0023  
                         __CFG_PBADEN$ON 000000                             __end_of_CRC8 1164  
                       __end_of_ComStart 106C                               _ReadFaults 144A  
                        __initialization 0F44               __end_of_EUSART1_Initialize 11A8  
                           __end_of_main 1330                               ToSend@what 0086  
                                 ??_CRC8 0040              ?_INTERRUPT_InterruptManager 0023  
                     __size_of_GetFaults 0016                                   ??_main 0044  
                  receiveData@holder_324 008E                            __activetblptr 000002  
                       __end_of_Send_put 11E0                __size_ofi2_UART_buff_size 0016  
                                 ?_Delay 003D                    ?_EUSART1_Transmit_ISR 0023  
          FastTransfer_buffer_put@towhat 0082                                   ?_Start 0023  
                                 ?_begin 0083                  __end_of_TMR0_StartTimer 145C  
                       ___awdiv@dividend 003D                                   _ANSELA 000F38  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                                   _ANSELE 000F3C  
                        i2_UART_buff_get 0E46                                   _RC1STA 000FAB  
                        i2_UART_buff_put 0B14                                   i2l2155 0BA0  
                                 i2l2149 0B34                                   i2l2245 123E  
                                 i2l2169 0ED0                           __CFG_WDTEN$OFF 000000  
                                 Delay@x 0040              UART_buff_modulo_inc@modulus 003F  
                                 i2l1977 12E8                                   _RCREG1 000FAE  
                                 _OSCCON 000FD3                                   _SPBRG1 000FAF  
                                 _TX1STA 000FAC                                   _TXREG1 000FAD  
                              ??_SetTime 003D                           __CFG_XINST$OFF 000000  
                                 _ToSend 12F2                      __end_of_Receive_get 143A  
            ??_FastTransfer_buffer_flush 0043                            _output_buffer 0400  
                              ??___awdiv 0041                                CRC8@tempI 0042  
                         __CFG_STVREN$ON 000000                         ?_TMR0_Initialize 0023  
                                 _memset 1246                                   clear_0 0F4A  
                                 clear_1 0F56                                   clear_2 0F62  
                                 clear_3 0F6E                                   clear_4 0F7A  
                                 clear_5 0F86                         ___awdiv@quotient 0081  
                                 _rx_len 0022                         __end_of_sendData 09D6  
                           __pdataCOMRAM 0044                            Send_put@_data 0084  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8         __size_of_FastTransfer_buffer_put 019A  
           __end_of_UART_buff_modulo_inc 12C8            __size_of_INTERRUPT_Initialize 0018  
                             __accesstop 0060                  __end_of__initialization 0F9E  
                      __end_of_GetFaults 13D2                            ___rparam_used 000001  
                ?i2_UART_buff_modulo_inc 0023                             ?_updateComms 0023  
                          __end_of_Delay 1214                              ?_ReadFaults 0023  
                         __pcstackCOMRAM 0023                            __end_of_Start 111A  
                       crcBufS_put@_this 003D                            __end_of_begin 10C4  
                              ?_TMR0_ISR 0023   __end_of_FastTransfer_buffer_modulo_inc 129E  
__size_of_FastTransfer_buffer_modulo_inc 002A           _FastTransfer_buffer_modulo_inc 1274  
           FastTransfer_buffer_put@_this 007F                              ToSend@where 0043  
                     UART_buff_get@_this 007F                    __end_of_UART_buff_get 0DAA  
                 ??_EUSART1_Transmit_ISR 002E                    __end_of_UART_buff_put 0B14  
                                ??_Delay 003F                  __end_ofi2_UART_buff_get 0ED8  
                __end_ofi2_UART_buff_put 0C2E              __end_of_EUSART1_Receive_ISR 138A  
              _FastTransfer_buffer_flush 0ED8                                  CRC8@crc 0043  
                                CRC8@len 003F                                  ??_Start 0043  
                                CRC8@sum 0040                                ?_ComStart 0023  
                                ??_begin 0041                         ?_TMR0_StartTimer 0023  
                    _addressErrorCounter 0001                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                        __CFG_PLLCFG$OFF 000000                              _Receive_get 1428  
         __end_ofi2_UART_buff_modulo_inc 12F2                        begin@givenAddress 0086  
                __size_of_UART_buff_init 001E                  __size_of_UART_buff_size 0016  
                              ?_Send_put 0023                     __size_of_receiveData 064E  
                                ?_ToSend 0086                       __CFG_CCP2MX$PORTC1 000000  
                             ??_TMR0_ISR 0023                       __CFG_CCP3MX$PORTB5 000000  
    FastTransfer_buffer_modulo_inc@value 003D                                  ?_memset 003D  
                             _crc_buffer 0064                       UART_buff_put@_this 007F  
                       i2_UART_buff_size 13FE              i2UART_buff_modulo_inc@value 0023  
                                _OSCCON2 000FD2                        _Receive_available 13D2  
           UART_buff_modulo_inc@my_value 0041                        __CFG_PRICLKEN$OFF 000000  
                                _OSCTUNE 000F9B                                  _SPBRGH1 000FB0  
                             ??_ComStart 0043                      sendData@whereToSend 0086  
                    _receiveArrayAddress 000B                      __size_of_ReadFaults 000E  
                     ?_Receive_available 003F                               begin@error 0087  
                                _ByteLow 001B                      ??_Receive_available 0041  
                              ?_sendData 0023                        _alignErrorCounter 0003  
                        __CFG_PWRTEN$OFF 000000                               ??_Send_put 0044  
                                __Hparam 0000                                  _SetTime 1414  
                                __Lparam 0000                          __size_of_ToSend 0020  
                              _AKNAKsend 0019                                  ___awdiv 0DAA  
                   _UART_buff_modulo_inc 129E                                  _calc_CS 001C  
                                __pcinit 0F44                          __size_of_memset 002E  
                                __ramtop 0600                         i2UART_buff_get@c 002D  
                                __ptext0 1312                                  __ptext1 143A  
                                __ptext2 0FAC                                  __ptext3 088C  
                                __ptext4 0C2E                                  __ptext5 0ED8  
                                __ptext6 12F2                                  __ptext7 06F2  
                                __ptext8 1274                                  __ptext9 13BC  
                              _T0CONbits 000FD5                         i2UART_buff_put@c 002B  
              __end_of_Receive_available 13E8                  _FastTransfer_buffer_put 06F2  
                     _EUSART1_Initialize 1164                         ?i2_UART_buff_get 0029  
                       ?i2_UART_buff_put 0029                            ??_crcBufS_put 0042  
                   end_of_initialization 0F9E                                Delay@wait 003D  
                    ?_EUSART1_Initialize 0023                                  memset@c 003F  
                                memset@n 0041                                  memset@p 007F  
                          __Lmediumconst 0000                               ??_sendData 0085  
                  ?_UART_buff_modulo_inc 003D                     __size_of_updateComms 0010  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                               _respondECU 0FAC  
                       begin@stufftosend 0088                     ??_EUSART1_Initialize 0043  
                              _PORTCbits 000F82                   _dataAdressErrorCounter 0007  
                             _rx_address 0020                                _TRISAbits 000F92  
                              _TRISCbits 000F94                                _TRISDbits 000F95  
                           begin@maxSize 0085       __size_of_FastTransfer_buffer_flush 006C  
                  i2UART_buff_size@_this 0023                           _UART_buff_init 134E  
                         _UART_buff_size 13E8                      __end_of_crcBufS_put 0D06  
                           ??_ReadFaults 003D                                _GetFaults 13BC  
                          _moduleAddress 001E                     _timer0ReloadVal16bit 0017  
                         __end_of_ToSend 1312             __end_of_INTERRUPT_Initialize 13BC  
                        _crcErrorCounter 0005                        crcBufS_put@oldCRC 0040  
                          __pidataCOMRAM 145C                        __size_of_TMR0_ISR 001A  
              ??_FastTransfer_buffer_put 0084                           __end_of_memset 1274  
                      crcBufS_put@status 0041                             receiveData@r 0095  
             __size_of_Receive_available 0016                             receiveData@u 0093  
                    start_initialization 0F44                 __size_of_TMR0_Initialize 001E  
                     __end_of_ReadFaults 1458                        __size_of_ComStart 0058  
                 __end_of_UART_buff_init 136C                           UART_buff_get@c 0043  
                 __end_of_UART_buff_size 13FE                             ?_Receive_get 0023  
                         UART_buff_put@c 0081                 __end_ofi2_UART_buff_size 1414  
                               ??_ToSend 0043                   ??_UART_buff_modulo_inc 0041  
                             ?_GetFaults 0023                                 CRC8@data 003D  
                      __size_of_Send_put 0038                              ?_respondECU 0023  
                               ??_memset 0043                              __pbssCOMRAM 0001  
          __size_of_EUSART1_Transmit_ISR 0032                            __pcstackBANK0 007F  
                           _Receive_peek 000000                      UART_buff_init@_this 0081  
                            _crcBufS_put 0C2E                          ?_UART_buff_init 0081  
                        ?_UART_buff_size 003D             __size_of_EUSART1_Receive_ISR 001E  
                          ??_receiveData 0085                               sendData@CS 0087  
               __size_of_TMR0_StartTimer 0004                   __size_of_UART_buff_get 00A4  
                 __size_of_UART_buff_put 013E                                 ?_SetTime 0023  
                      __size_of_sendData 014A                             GetFaults@num 003D  
                              __pintcode 0008                                 ?___awdiv 003D  
           ??_INTERRUPT_InterruptManager 002F                     i2UART_buff_get@_this 0029  
               receiveData@crcHolder_325 0092                                 _BAUD1CON 000FB8  
                         __size_of_Delay 0034                           __size_of_Start 0056  
                         __size_of_begin 0058                      __size_of_respondECU 0068  
                   _INTERRUPT_Initialize 13A4                             _receiveArray 0075  
                      ??_TMR0_Initialize 003D                                 _LATAbits 000F89  
                               _LATDbits 000F8C                      UART_buff_size@_this 003D  
                               _IPR1bits 000F9F                                 _IPR2bits 000FA2  
                               _PIE1bits 000F9D      __size_of_INTERRUPT_InterruptManager 0098  
                               i2u184_40 0E64                                 i2u192_40 122E  
                               _PIR1bits 000F9E                              ??_GetFaults 003D  
                    begin@stuffavailable 008C                                 _RCONbits 000FD0  
                       __CFG_WDTPS$32768 000000                      __end_of_receiveData 06F2  
                               _TMR0_ISR 138A           FastTransfer_buffer_flush@_this 0081  
                           _input_buffer 0300                                _rx_buffer 0200  
                   i2UART_buff_put@_this 0029                            _UART_buff_get 0D06  
                          _UART_buff_put 09D6                                 _ComStart 1014  
               ??i2_UART_buff_modulo_inc 0027                    ?_INTERRUPT_Initialize 0023  
                      _sendStructAddress 000D                                 _ByteHigh 001A  
               __size_ofi2_UART_buff_get 0092                 __size_ofi2_UART_buff_put 011A  
                          ??_updateComms 0044                     __size_of_Receive_get 0012  
                               __Hrparam 0000                                 _Send_put 11A8  
                               __Lrparam 0000                       __CFG_BOREN$SBORDIS 000000  
                       __size_of_SetTime 0014                        __CFG_P2BMX$PORTD2 000000  
                      ??_TMR0_StartTimer 003D                         __size_of___awdiv 009C  
            __size_of_EUSART1_Initialize 0044                      begin@stufftoreceive 008A  
                         ?_UART_buff_get 007F                           ?_UART_buff_put 007F  
                            CRC8@extract 0041                                sendData@i 0088  
                               __ptext10 11E0                                 __ptext11 00A4  
                               __ptext20 10C4                                 __ptext12 11A8  
                               __ptext21 1330                                 __ptext13 09D6  
                               __ptext30 1414                                 __ptext22 1458  
                               __ptext14 1428                                 __ptext31 144A  
                               __ptext23 13A4                                 __ptext15 0D06  
                               __ptext40 0000                                 __ptext24 1014  
                               __ptext16 129E                                 __ptext33 138A  
                               __ptext25 106C                                 __ptext17 13D2  
                               __ptext34 1214                                 __ptext26 0DAA  
                               __ptext18 13E8                                 __ptext35 13FE  
                               __ptext27 1164                                 __ptext19 111A  
                               __ptext36 0E46                                 __ptext28 134E  
                               __ptext37 136C                                 __ptext29 1246  
                               __ptext38 0B14                                 __ptext39 12C8  
                          __size_of_CRC8 004A                                 begin@ptr 0083  
                EUSART1_Receive_ISR@data 002E                            _returnAddress 001F  
                          __size_of_main 001E                              _receiveData 00A4  
                         _Transmit_stall 0044                                 _sendData 088C  
                      ?i2_UART_buff_size 0023                               _RC1STAbits 000FAB  
                           ??_respondECU 008A                       ??i2_UART_buff_size 0025  
                               int$flags 0045                             _serial_write 0015  
                    __end_of_updateComms 144A       __end_of_INTERRUPT_InterruptManager 00A0  
             _INTERRUPT_InterruptManager 0008                      _EUSART1_Receive_ISR 136C  
                      receiveData@holder 008B                               _INTCONbits 000FF2  
              UART_buff_modulo_inc@value 003D                         ??_UART_buff_init 0043  
                       ??_UART_buff_size 003F                   ??_INTERRUPT_Initialize 003D  
                               memset@p1 003D                         _serial_available 000F  
        __size_ofi2_UART_buff_modulo_inc 002A                             ?_crcBufS_put 003D  
                               intlevel2 0000                       __end_of_respondECU 1014  
                   ?_EUSART1_Receive_ISR 0023   FastTransfer_buffer_modulo_inc@my_value 0041  
         FastTransfer_buffer_put@towhere 0081             __end_of_EUSART1_Transmit_ISR 1246  
                            _ring_buffer 0100               ?_FastTransfer_buffer_flush 0081  
                      ??i2_UART_buff_get 002B                              _serial_peek 0011  
                            _serial_read 0013                        ??i2_UART_buff_put 002C  
               ?_FastTransfer_buffer_put 007F            __size_of_UART_buff_modulo_inc 002A  
                        ??_UART_buff_get 0081                          ??_UART_buff_put 0082  
  FastTransfer_buffer_modulo_inc@modulus 003F                          _TMR0_Initialize 1330  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 001D  
                  ??_EUSART1_Receive_ISR 002E         ??_FastTransfer_buffer_modulo_inc 0041  
        ?_FastTransfer_buffer_modulo_inc 003D                        __CFG_FOSC$INTIO67 000000  
                            _updateComms 143A  
