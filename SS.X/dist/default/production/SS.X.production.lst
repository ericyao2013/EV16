

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Thu Sep 29 13:54:27 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    66  0000                     
    67                           	psect	idataCOMRAM
    68  001850                     __pidataCOMRAM:
    69                           	opt stack 0
    70                           
    71                           ;initializer for _Transmit_stall
    72  001850  01                 	db	1
    73  0000                     _ANSELA	set	3896
    74  0000                     _ANSELC	set	3898
    75  0000                     _ANSELD	set	3899
    76  0000                     _BAUD1CON	set	4024
    77  0000                     _INTCONbits	set	4082
    78  0000                     _IPR1bits	set	3999
    79  0000                     _IPR2bits	set	4002
    80  0000                     _LATAbits	set	3977
    81  0000                     _LATCbits	set	3979
    82  0000                     _LATDbits	set	3980
    83  0000                     _OSCCON	set	4051
    84  0000                     _OSCCON2	set	4050
    85  0000                     _OSCTUNE	set	3995
    86  0000                     _PIE1bits	set	3997
    87  0000                     _PIR1bits	set	3998
    88  0000                     _RC1STA	set	4011
    89  0000                     _RC1STAbits	set	4011
    90  0000                     _RCONbits	set	4048
    91  0000                     _RCREG1	set	4014
    92  0000                     _SPBRG1	set	4015
    93  0000                     _SPBRGH1	set	4016
    94  0000                     _T0CON	set	4053
    95  0000                     _T0CONbits	set	4053
    96  0000                     _TMR0H	set	4055
    97  0000                     _TMR0L	set	4054
    98  0000                     _TRISAbits	set	3986
    99  0000                     _TRISCbits	set	3988
   100  0000                     _TRISDbits	set	3989
   101  0000                     _TX1STA	set	4012
   102  0000                     _TXREG1	set	4013
   103                           
   104                           ; #config settings
   105  0000                     
   106                           	psect	cinit
   107  001328                     __pcinit:
   108                           	opt stack 0
   109  001328                     start_initialization:
   110                           	opt stack 0
   111  001328                     __initialization:
   112                           	opt stack 0
   113                           
   114                           ; Clear objects allocated to BANK4 (206 bytes)
   115  001328  EE04  F000         	lfsr	0,__pbssBANK4
   116  00132C  0ECE               	movlw	206
   117  00132E                     clear_0:
   118  00132E  6AEE               	clrf	postinc0,c
   119  001330  06E8               	decf	wreg,f,c
   120  001332  E1FD               	bnz	clear_0
   121                           
   122                           ; Clear objects allocated to BANK3 (206 bytes)
   123  001334  EE03  F000         	lfsr	0,__pbssBANK3
   124  001338  0ECE               	movlw	206
   125  00133A                     clear_1:
   126  00133A  6AEE               	clrf	postinc0,c
   127  00133C  06E8               	decf	wreg,f,c
   128  00133E  E1FD               	bnz	clear_1
   129                           
   130                           ; Clear objects allocated to BANK2 (200 bytes)
   131  001340  EE02  F000         	lfsr	0,__pbssBANK2
   132  001344  0EC8               	movlw	200
   133  001346                     clear_2:
   134  001346  6AEE               	clrf	postinc0,c
   135  001348  06E8               	decf	wreg,f,c
   136  00134A  E1FD               	bnz	clear_2
   137                           
   138                           ; Clear objects allocated to BANK1 (206 bytes)
   139  00134C  EE01  F000         	lfsr	0,__pbssBANK1
   140  001350  0ECE               	movlw	206
   141  001352                     clear_3:
   142  001352  6AEE               	clrf	postinc0,c
   143  001354  06E8               	decf	wreg,f,c
   144  001356  E1FD               	bnz	clear_3
   145                           
   146                           ; Clear objects allocated to BANK0 (35 bytes)
   147  001358  EE00  F060         	lfsr	0,__pbssBANK0
   148  00135C  0E23               	movlw	35
   149  00135E                     clear_4:
   150  00135E  6AEE               	clrf	postinc0,c
   151  001360  06E8               	decf	wreg,f,c
   152  001362  E1FD               	bnz	clear_4
   153                           
   154                           ; Clear objects allocated to COMRAM (30 bytes)
   155  001364  EE00  F026         	lfsr	0,__pbssCOMRAM
   156  001368  0E1E               	movlw	30
   157  00136A                     clear_5:
   158  00136A  6AEE               	clrf	postinc0,c
   159  00136C  06E8               	decf	wreg,f,c
   160  00136E  E1FD               	bnz	clear_5
   161                           
   162                           ; Initialize objects allocated to COMRAM (1 bytes)
   163                           ; load TBLPTR registers with __pidataCOMRAM
   164  001370  0E50               	movlw	low __pidataCOMRAM
   165  001372  6EF6               	movwf	tblptrl,c
   166  001374  0E18               	movlw	high __pidataCOMRAM
   167  001376  6EF7               	movwf	tblptrh,c
   168  001378  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   169  00137A  6EF8               	movwf	tblptru,c
   170  00137C  0009               	tblrd		*+	;fetch initializer
   171  00137E  CFF5 F044          	movff	tablat,__pdataCOMRAM
   172  001382                     end_of_initialization:
   173                           	opt stack 0
   174  001382                     __end_of__initialization:
   175                           	opt stack 0
   176  001382  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   177  001384  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   178  001386  0E00               	movlw	low (__Lmediumconst shr (0+16))
   179  001388  6EF8               	movwf	tblptru,c
   180  00138A  0100               	movlb	0
   181  00138C  EFFF  F00A         	goto	_main	;jump to C main() function
   182                           tblptru	equ	0xFF8
   183                           tblptrh	equ	0xFF7
   184                           tblptrl	equ	0xFF6
   185                           tablat	equ	0xFF5
   186                           postinc0	equ	0xFEE
   187                           wreg	equ	0xFE8
   188                           
   189                           	psect	bssCOMRAM
   190  000026                     __pbssCOMRAM:
   191                           	opt stack 0
   192  000026                     _alignErrorCounter:
   193                           	opt stack 0
   194  000026                     	ds	2
   195  000028                     _crcErrorCounter:
   196                           	opt stack 0
   197  000028                     	ds	2
   198  00002A                     _group:
   199                           	opt stack 0
   200  00002A                     	ds	2
   201  00002C                     _receiveArrayAddress:
   202                           	opt stack 0
   203  00002C                     	ds	2
   204  00002E                     _sendStructAddress:
   205                           	opt stack 0
   206  00002E                     	ds	2
   207  000030                     _serial_available:
   208                           	opt stack 0
   209  000030                     	ds	2
   210  000032                     _serial_peek:
   211                           	opt stack 0
   212  000032                     	ds	2
   213  000034                     _serial_read:
   214                           	opt stack 0
   215  000034                     	ds	2
   216  000036                     _serial_write:
   217                           	opt stack 0
   218  000036                     	ds	2
   219  000038                     _timer0ReloadVal16bit:
   220                           	opt stack 0
   221  000038                     	ds	2
   222  00003A                     _AKNAKsend:
   223                           	opt stack 0
   224  00003A                     	ds	1
   225  00003B                     _ByteHigh:
   226                           	opt stack 0
   227  00003B                     	ds	1
   228  00003C                     _ByteLow:
   229                           	opt stack 0
   230  00003C                     	ds	1
   231  00003D                     _calc_CS:
   232                           	opt stack 0
   233  00003D                     	ds	1
   234  00003E                     _maxDataAddress:
   235                           	opt stack 0
   236  00003E                     	ds	1
   237  00003F                     _moduleAddress:
   238                           	opt stack 0
   239  00003F                     	ds	1
   240  000040                     _returnAddress:
   241                           	opt stack 0
   242  000040                     	ds	1
   243  000041                     _rx_address:
   244                           	opt stack 0
   245  000041                     	ds	1
   246  000042                     _rx_array_inx:
   247                           	opt stack 0
   248  000042                     	ds	1
   249  000043                     _rx_len:
   250                           	opt stack 0
   251  000043                     	ds	1
   252                           tblptru	equ	0xFF8
   253                           tblptrh	equ	0xFF7
   254                           tblptrl	equ	0xFF6
   255                           tablat	equ	0xFF5
   256                           postinc0	equ	0xFEE
   257                           wreg	equ	0xFE8
   258                           
   259                           	psect	dataCOMRAM
   260  000044                     __pdataCOMRAM:
   261                           	opt stack 0
   262  000044                     _Transmit_stall:
   263                           	opt stack 0
   264  000044                     	ds	1
   265                           tblptru	equ	0xFF8
   266                           tblptrh	equ	0xFF7
   267                           tblptrl	equ	0xFF6
   268                           tablat	equ	0xFF5
   269                           postinc0	equ	0xFEE
   270                           wreg	equ	0xFE8
   271                           
   272                           	psect	bssBANK0
   273  000060                     __pbssBANK0:
   274                           	opt stack 0
   275  000060                     _time:
   276                           	opt stack 0
   277  000060                     	ds	4
   278  000064                     _addressErrorCounter:
   279                           	opt stack 0
   280  000064                     	ds	2
   281  000066                     _dataAdressErrorCounter:
   282                           	opt stack 0
   283  000066                     	ds	2
   284  000068                     _crc_buffer:
   285                           	opt stack 0
   286  000068                     	ds	17
   287  000079                     _receiveArray:
   288                           	opt stack 0
   289  000079                     	ds	10
   290                           tblptru	equ	0xFF8
   291                           tblptrh	equ	0xFF7
   292                           tblptrl	equ	0xFF6
   293                           tablat	equ	0xFF5
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           
   297                           	psect	bssBANK1
   298  000100                     __pbssBANK1:
   299                           	opt stack 0
   300  000100                     _ring_buffer:
   301                           	opt stack 0
   302  000100                     	ds	206
   303                           tblptru	equ	0xFF8
   304                           tblptrh	equ	0xFF7
   305                           tblptrl	equ	0xFF6
   306                           tablat	equ	0xFF5
   307                           postinc0	equ	0xFEE
   308                           wreg	equ	0xFE8
   309                           
   310                           	psect	bssBANK2
   311  000200                     __pbssBANK2:
   312                           	opt stack 0
   313  000200                     _rx_buffer:
   314                           	opt stack 0
   315  000200                     	ds	200
   316                           tblptru	equ	0xFF8
   317                           tblptrh	equ	0xFF7
   318                           tblptrl	equ	0xFF6
   319                           tablat	equ	0xFF5
   320                           postinc0	equ	0xFEE
   321                           wreg	equ	0xFE8
   322                           
   323                           	psect	bssBANK3
   324  000300                     __pbssBANK3:
   325                           	opt stack 0
   326  000300                     _input_buffer:
   327                           	opt stack 0
   328  000300                     	ds	206
   329                           tblptru	equ	0xFF8
   330                           tblptrh	equ	0xFF7
   331                           tblptrl	equ	0xFF6
   332                           tablat	equ	0xFF5
   333                           postinc0	equ	0xFEE
   334                           wreg	equ	0xFE8
   335                           
   336                           	psect	bssBANK4
   337  000400                     __pbssBANK4:
   338                           	opt stack 0
   339  000400                     _output_buffer:
   340                           	opt stack 0
   341  000400                     	ds	206
   342                           tblptru	equ	0xFF8
   343                           tblptrh	equ	0xFF7
   344                           tblptrl	equ	0xFF6
   345                           tablat	equ	0xFF5
   346                           postinc0	equ	0xFEE
   347                           wreg	equ	0xFE8
   348                           
   349                           	psect	cstackBANK0
   350  000083                     __pcstackBANK0:
   351                           	opt stack 0
   352  000083                     ??_FastTransfer_buffer_put:
   353  000083                     Send_put@_data:
   354                           	opt stack 0
   355  000083                     begin@ptr:
   356                           	opt stack 0
   357  000083                     FastTransfer_buffer_flush@_this:
   358                           	opt stack 0
   359  000083                     crcBufS_get@wantedTime:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x0
   363  000083                     	ds	2
   364  000085                     begin@maxSize:
   365                           	opt stack 0
   366  000085                     CRCcheck@SentCRC:
   367                           	opt stack 0
   368  000085                     ToSend@what:
   369                           	opt stack 0
   370  000085                     FastTransfer_buffer_flush@clearBuffer:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x2
   374  000085                     	ds	1
   375  000086                     begin@givenAddress:
   376                           	opt stack 0
   377  000086                     CRCcheck@calculatedCRC:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0x3
   381  000086                     	ds	1
   382  000087                     ??_sendData:
   383  000087                     begin@error:
   384                           	opt stack 0
   385  000087                     ToSend@where:
   386                           	opt stack 0
   387  000087                     CRCcheck@arrayHolder:
   388                           	opt stack 0
   389                           
   390                           ; 3 bytes @ 0x4
   391  000087                     	ds	1
   392  000088                     sendData@whereToSend:
   393                           	opt stack 0
   394  000088                     begin@stufftosend:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x5
   398  000088                     	ds	1
   399  000089                     sendData@CS:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x6
   403  000089                     	ds	1
   404  00008A                     begin@stufftoreceive:
   405                           	opt stack 0
   406  00008A                     sendData@i:
   407                           	opt stack 0
   408  00008A                     CRCcheck@rt:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x7
   412  00008A                     	ds	2
   413  00008C                     ??_receiveData:
   414  00008C                     ??_respondECU:
   415  00008C                     begin@stuffavailable:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x9
   419  00008C                     	ds	2
   420  00008E                     begin@stuffpeek:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0xB
   424  00008E                     	ds	4
   425  000092                     receiveData@holder:
   426                           	opt stack 0
   427                           
   428                           ; 3 bytes @ 0xF
   429  000092                     	ds	3
   430  000095                     receiveData@holder_329:
   431                           	opt stack 0
   432                           
   433                           ; 3 bytes @ 0x12
   434  000095                     	ds	3
   435  000098                     receiveData@crcHolder:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x15
   439  000098                     	ds	1
   440  000099                     receiveData@crcHolder_330:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0x16
   444  000099                     	ds	1
   445  00009A                     receiveData@u:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x17
   449  00009A                     	ds	2
   450  00009C                     receiveData@r:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x19
   454  00009C                     	ds	2
   455                           tblptru	equ	0xFF8
   456                           tblptrh	equ	0xFF7
   457                           tblptrl	equ	0xFF6
   458                           tablat	equ	0xFF5
   459                           postinc0	equ	0xFEE
   460                           wreg	equ	0xFE8
   461                           
   462                           	psect	cstackCOMRAM
   463  000001                     __pcstackCOMRAM:
   464                           	opt stack 0
   465  000001                     ?i2_UART_buff_size:
   466                           	opt stack 0
   467  000001                     ?i2_UART_buff_modulo_inc:
   468                           	opt stack 0
   469  000001                     i2UART_buff_size@_this:
   470                           	opt stack 0
   471  000001                     i2UART_buff_modulo_inc@value:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x0
   475  000001                     	ds	2
   476  000003                     i2UART_buff_modulo_inc@modulus:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x2
   480  000003                     	ds	2
   481  000005                     i2UART_buff_modulo_inc@my_value:
   482                           	opt stack 0
   483                           
   484                           ; 2 bytes @ 0x4
   485  000005                     	ds	2
   486  000007                     i2UART_buff_put@_this:
   487                           	opt stack 0
   488  000007                     i2UART_buff_get@_this:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x6
   492  000007                     	ds	2
   493  000009                     ??i2_UART_buff_get:
   494  000009                     i2UART_buff_put@c:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0x8
   498  000009                     	ds	1
   499  00000A                     ??i2_UART_buff_put:
   500                           
   501                           ; 1 bytes @ 0x9
   502  00000A                     	ds	1
   503  00000B                     i2UART_buff_get@c:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0xA
   507  00000B                     	ds	1
   508  00000C                     EUSART1_Receive_ISR@data:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0xB
   512  00000C                     	ds	1
   513  00000D                     ??_INTERRUPT_InterruptManager:
   514                           
   515                           ; 1 bytes @ 0xC
   516  00000D                     	ds	14
   517  00001B                     ??_ReadFaults:
   518  00001B                     ?_FastTransfer_buffer_modulo_inc:
   519                           	opt stack 0
   520  00001B                     ?_UART_buff_modulo_inc:
   521                           	opt stack 0
   522  00001B                     ?_UART_buff_size:
   523                           	opt stack 0
   524  00001B                     ?___awdiv:
   525                           	opt stack 0
   526  00001B                     ?_GetTime:
   527                           	opt stack 0
   528  00001B                     GetFaults@num:
   529                           	opt stack 0
   530  00001B                     CRC8@data:
   531                           	opt stack 0
   532  00001B                     FastTransfer_buffer_modulo_inc@value:
   533                           	opt stack 0
   534  00001B                     crcBufS_put@_this:
   535                           	opt stack 0
   536  00001B                     crcBufS_status_put@_this:
   537                           	opt stack 0
   538  00001B                     crcBufS_get@_this:
   539                           	opt stack 0
   540  00001B                     UART_buff_size@_this:
   541                           	opt stack 0
   542  00001B                     UART_buff_modulo_inc@value:
   543                           	opt stack 0
   544  00001B                     UART_buff_peek@_this:
   545                           	opt stack 0
   546  00001B                     Delay@wait:
   547                           	opt stack 0
   548  00001B                     ___awdiv@dividend:
   549                           	opt stack 0
   550  00001B                     memset@p1:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0x1A
   554  00001B                     	ds	2
   555  00001D                     ??_Delay:
   556  00001D                     ??_UART_buff_peek:
   557  00001D                     ?_Receive_available:
   558                           	opt stack 0
   559  00001D                     CRC8@len:
   560                           	opt stack 0
   561  00001D                     crcBufS_put@address:
   562                           	opt stack 0
   563  00001D                     crcBufS_status_put@time:
   564                           	opt stack 0
   565  00001D                     crcBufS_get@time:
   566                           	opt stack 0
   567  00001D                     FastTransfer_buffer_modulo_inc@modulus:
   568                           	opt stack 0
   569  00001D                     UART_buff_modulo_inc@modulus:
   570                           	opt stack 0
   571  00001D                     ___awdiv@divisor:
   572                           	opt stack 0
   573  00001D                     memset@c:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x1C
   577  00001D                     	ds	1
   578  00001E                     CRC8@sum:
   579                           	opt stack 0
   580  00001E                     crcBufS_put@oldCRC:
   581                           	opt stack 0
   582  00001E                     crcBufS_status_put@status:
   583                           	opt stack 0
   584  00001E                     crcBufS_get@space:
   585                           	opt stack 0
   586  00001E                     Delay@x:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x1D
   590  00001E                     	ds	1
   591  00001F                     ??_crcBufS_get:
   592  00001F                     ??_crcBufS_status_put:
   593  00001F                     CRC8@extract:
   594                           	opt stack 0
   595  00001F                     crcBufS_put@status:
   596                           	opt stack 0
   597  00001F                     ___awdiv@counter:
   598                           	opt stack 0
   599  00001F                     FastTransfer_buffer_modulo_inc@my_value:
   600                           	opt stack 0
   601  00001F                     UART_buff_modulo_inc@my_value:
   602                           	opt stack 0
   603  00001F                     memset@n:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x1E
   607  00001F                     	ds	1
   608  000020                     ??_crcBufS_put:
   609  000020                     CRC8@tempI:
   610                           	opt stack 0
   611  000020                     ___awdiv@sign:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x1F
   615  000020                     	ds	1
   616  000021                     CRC8@crc:
   617                           	opt stack 0
   618  000021                     FastTransfer_buffer_put@_this:
   619                           	opt stack 0
   620  000021                     UART_buff_put@_this:
   621                           	opt stack 0
   622  000021                     UART_buff_get@_this:
   623                           	opt stack 0
   624  000021                     ___awdiv@quotient:
   625                           	opt stack 0
   626  000021                     memset@p:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x20
   630  000021                     	ds	2
   631  000023                     ??_UART_buff_get:
   632  000023                     FastTransfer_buffer_put@towhere:
   633                           	opt stack 0
   634  000023                     UART_buff_put@c:
   635                           	opt stack 0
   636  000023                     crcBufS_status_put@wantedTime:
   637                           	opt stack 0
   638  000023                     UART_buff_init@_this:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0x22
   642  000023                     	ds	1
   643  000024                     ??_UART_buff_put:
   644  000024                     FastTransfer_buffer_put@towhat:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x23
   648  000024                     	ds	1
   649  000025                     UART_buff_get@c:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x24
   653  000025                     	ds	1
   654  000026                     tblptru	equ	0xFF8
   655                           tblptrh	equ	0xFF7
   656                           tblptrl	equ	0xFF6
   657                           tablat	equ	0xFF5
   658                           postinc0	equ	0xFEE
   659                           wreg	equ	0xFE8
   660                           
   661                           ; 1 bytes @ 0x25
   662 ;;
   663 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   664 ;;
   665 ;; *************** function _main *****************
   666 ;; Defined at:
   667 ;;		line 23 in file "Main.c"
   668 ;; Parameters:    Size  Location     Type
   669 ;;		None
   670 ;; Auto vars:     Size  Location     Type
   671 ;;		None
   672 ;; Return value:  Size  Location     Type
   673 ;;                  1    wreg      void 
   674 ;; Registers used:
   675 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   676 ;; Tracked objects:
   677 ;;		On entry : 0/0
   678 ;;		On exit  : 0/0
   679 ;;		Unchanged: 0/0
   680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   681 ;;      Params:         0       0       0       0       0       0       0
   682 ;;      Locals:         0       0       0       0       0       0       0
   683 ;;      Temps:          0       0       0       0       0       0       0
   684 ;;      Totals:         0       0       0       0       0       0       0
   685 ;;Total ram usage:        0 bytes
   686 ;; Hardware stack levels required when called:   10
   687 ;; This function calls:
   688 ;;		_GetTime
   689 ;;		_ReadFaults
   690 ;;		_SetTime
   691 ;;		_Start
   692 ;;		_updateComms
   693 ;; This function is called by:
   694 ;;		Startup code after reset
   695 ;; This function uses a non-reentrant model
   696 ;;
   697                           
   698                           	psect	text0
   699  0015FE                     __ptext0:
   700                           	opt stack 0
   701  0015FE                     _main:
   702                           	opt stack 21
   703                           
   704                           ;Main.c: 24: Start();
   705                           
   706                           ;incstack = 0
   707  0015FE  EC71  F00A         	call	_Start	;wreg free
   708  001602                     l2873:
   709                           
   710                           ;Main.c: 26: updateComms();
   711  001602  EC10  F00C         	call	_updateComms	;wreg free
   712                           
   713                           ;Main.c: 27: if(GetTime() > 5){
   714  001606  EC07  F00C         	call	_GetTime	;wreg free
   715  00160A  BE1E               	btfsc	?_GetTime+3,7,c
   716  00160C  D7FA               	goto	l2873
   717  00160E  501E               	movf	?_GetTime+3,w,c
   718  001610  101D               	iorwf	?_GetTime+2,w,c
   719  001612  101C               	iorwf	?_GetTime+1,w,c
   720  001614  E104               	bnz	u3330
   721  001616  0E06               	movlw	6
   722  001618  5C1B               	subwf	?_GetTime,w,c
   723  00161A  A0D8               	btfss	status,0,c
   724  00161C  D7F2               	goto	l2873
   725  00161E                     u3330:
   726                           
   727                           ;Main.c: 28: LATAbits.LATA3 ^= 1;
   728  00161E  7689               	btg	3977,3,c	;volatile
   729                           
   730                           ;Main.c: 29: ReadFaults();
   731  001620  ECB3  F007         	call	_ReadFaults	;wreg free
   732                           
   733                           ;Main.c: 30: SetTime();
   734  001624  ECFD  F00B         	call	_SetTime	;wreg free
   735  001628  D7EC               	goto	l2873
   736  00162A                     __end_of_main:
   737                           	opt stack 0
   738                           tblptru	equ	0xFF8
   739                           tblptrh	equ	0xFF7
   740                           tblptrl	equ	0xFF6
   741                           tablat	equ	0xFF5
   742                           postinc0	equ	0xFEE
   743                           wreg	equ	0xFE8
   744                           status	equ	0xFD8
   745                           
   746 ;; *************** function _updateComms *****************
   747 ;; Defined at:
   748 ;;		line 17 in file "Communications.c"
   749 ;; Parameters:    Size  Location     Type
   750 ;;		None
   751 ;; Auto vars:     Size  Location     Type
   752 ;;		None
   753 ;; Return value:  Size  Location     Type
   754 ;;                  1    wreg      void 
   755 ;; Registers used:
   756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   762 ;;      Params:         0       0       0       0       0       0       0
   763 ;;      Locals:         0       0       0       0       0       0       0
   764 ;;      Temps:          0       0       0       0       0       0       0
   765 ;;      Totals:         0       0       0       0       0       0       0
   766 ;;Total ram usage:        0 bytes
   767 ;; Hardware stack levels used:    1
   768 ;; Hardware stack levels required when called:    9
   769 ;; This function calls:
   770 ;;		_receiveData
   771 ;;		_respondECU
   772 ;; This function is called by:
   773 ;;		_main
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           	psect	text1
   778  001820                     __ptext1:
   779                           	opt stack 0
   780  001820                     _updateComms:
   781                           	opt stack 21
   782                           
   783                           ;Communications.c: 18: if (receiveData()) {
   784                           
   785                           ;incstack = 0
   786  001820  EC52  F000         	call	_receiveData	;wreg free
   787  001824  0900               	iorlw	0
   788  001826  B4D8               	btfsc	status,2,c
   789  001828  0012               	return	
   790                           
   791                           ;Communications.c: 19: respondECU();
   792  00182A  ECC8  F009         	call	_respondECU	;wreg free
   793  00182E  0012               	return	
   794  001830                     __end_of_updateComms:
   795                           	opt stack 0
   796                           tblptru	equ	0xFF8
   797                           tblptrh	equ	0xFF7
   798                           tblptrl	equ	0xFF6
   799                           tablat	equ	0xFF5
   800                           postinc0	equ	0xFEE
   801                           wreg	equ	0xFE8
   802                           status	equ	0xFD8
   803                           
   804 ;; *************** function _respondECU *****************
   805 ;; Defined at:
   806 ;;		line 23 in file "Communications.c"
   807 ;; Parameters:    Size  Location     Type
   808 ;;		None
   809 ;; Auto vars:     Size  Location     Type
   810 ;;		None
   811 ;; Return value:  Size  Location     Type
   812 ;;                  1    wreg      void 
   813 ;; Registers used:
   814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   820 ;;      Params:         0       0       0       0       0       0       0
   821 ;;      Locals:         0       0       0       0       0       0       0
   822 ;;      Temps:          0       1       0       0       0       0       0
   823 ;;      Totals:         0       1       0       0       0       0       0
   824 ;;Total ram usage:        1 bytes
   825 ;; Hardware stack levels used:    1
   826 ;; Hardware stack levels required when called:    8
   827 ;; This function calls:
   828 ;;		_Delay
   829 ;;		_GetFaults
   830 ;;		_ToSend
   831 ;;		_sendData
   832 ;; This function is called by:
   833 ;;		_updateComms
   834 ;; This function uses a non-reentrant model
   835 ;;
   836                           
   837                           	psect	text2
   838  001390                     __ptext2:
   839                           	opt stack 0
   840  001390                     _respondECU:
   841                           	opt stack 21
   842                           
   843                           ;Communications.c: 24: LATDbits.LATD4 = 1;
   844                           
   845                           ;incstack = 0
   846  001390  888C               	bsf	3980,4,c	;volatile
   847                           
   848                           ;Communications.c: 25: ToSend(1,GetFaults(1));
   849  001392  0E01               	movlw	1
   850  001394  ECD1  F00B         	call	_GetFaults
   851  001398  0100               	movlb	0	; () banked
   852  00139A  6F8C               	movwf	??_respondECU& (0+255),b
   853  00139C  0100               	movlb	0	; () banked
   854  00139E  518C               	movf	??_respondECU& (0+255),w,b
   855  0013A0  0100               	movlb	0	; () banked
   856  0013A2  6F85               	movwf	ToSend@what& (0+255),b
   857  0013A4  6B86               	clrf	(ToSend@what+1)& (0+255),b
   858  0013A6  0E01               	movlw	1
   859  0013A8  EC7C  F00B         	call	_ToSend
   860                           
   861                           ;Communications.c: 26: ToSend(2,GetFaults(0));
   862  0013AC  0E00               	movlw	0
   863  0013AE  ECD1  F00B         	call	_GetFaults
   864  0013B2  0100               	movlb	0	; () banked
   865  0013B4  6F8C               	movwf	??_respondECU& (0+255),b
   866  0013B6  0100               	movlb	0	; () banked
   867  0013B8  518C               	movf	??_respondECU& (0+255),w,b
   868  0013BA  0100               	movlb	0	; () banked
   869  0013BC  6F85               	movwf	ToSend@what& (0+255),b
   870  0013BE  6B86               	clrf	(ToSend@what+1)& (0+255),b
   871  0013C0  0E02               	movlw	2
   872  0013C2  EC7C  F00B         	call	_ToSend
   873                           
   874                           ;Communications.c: 27: Delay(9);
   875  0013C6  0E00               	movlw	0
   876  0013C8  6E1C               	movwf	Delay@wait+1,c
   877  0013CA  0E09               	movlw	9
   878  0013CC  6E1B               	movwf	Delay@wait,c
   879  0013CE  ECB4  F00A         	call	_Delay	;wreg free
   880                           
   881                           ;Communications.c: 28: sendData(1);
   882  0013D2  0E01               	movlw	1
   883  0013D4  EC0F  F005         	call	_sendData
   884                           
   885                           ;Communications.c: 29: Delay(3);
   886  0013D8  0E00               	movlw	0
   887  0013DA  6E1C               	movwf	Delay@wait+1,c
   888  0013DC  0E03               	movlw	3
   889  0013DE  6E1B               	movwf	Delay@wait,c
   890  0013E0  ECB4  F00A         	call	_Delay	;wreg free
   891                           
   892                           ;Communications.c: 30: LATDbits.LATD4 = 0;
   893  0013E4  988C               	bcf	3980,4,c	;volatile
   894  0013E6  0012               	return		;funcret
   895  0013E8                     __end_of_respondECU:
   896                           	opt stack 0
   897                           tblptru	equ	0xFF8
   898                           tblptrh	equ	0xFF7
   899                           tblptrl	equ	0xFF6
   900                           tablat	equ	0xFF5
   901                           postinc0	equ	0xFEE
   902                           wreg	equ	0xFE8
   903                           status	equ	0xFD8
   904                           
   905 ;; *************** function _sendData *****************
   906 ;; Defined at:
   907 ;;		line 108 in file "FastTransfer.c"
   908 ;; Parameters:    Size  Location     Type
   909 ;;  whereToSend     1    wreg     unsigned char 
   910 ;; Auto vars:     Size  Location     Type
   911 ;;  whereToSend     1    5[BANK0 ] unsigned char 
   912 ;;  i               2    7[BANK0 ] int 
   913 ;;  CS              1    6[BANK0 ] unsigned char 
   914 ;; Return value:  Size  Location     Type
   915 ;;                  1    wreg      void 
   916 ;; Registers used:
   917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
   918 ;; Tracked objects:
   919 ;;		On entry : 0/0
   920 ;;		On exit  : 0/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   923 ;;      Params:         0       0       0       0       0       0       0
   924 ;;      Locals:         0       4       0       0       0       0       0
   925 ;;      Temps:          0       1       0       0       0       0       0
   926 ;;      Totals:         0       5       0       0       0       0       0
   927 ;;Total ram usage:        5 bytes
   928 ;; Hardware stack levels used:    1
   929 ;; Hardware stack levels required when called:    7
   930 ;; This function calls:
   931 ;;		Absolute function
   932 ;;		_CRC8
   933 ;;		_FastTransfer_buffer_flush
   934 ;;		_Send_put
   935 ;;		_crcBufS_put
   936 ;; This function is called by:
   937 ;;		_respondECU
   938 ;; This function uses a non-reentrant model
   939 ;;
   940                           
   941                           	psect	text3
   942  000A1E                     __ptext3:
   943                           	opt stack 0
   944  000A1E                     _sendData:
   945                           	opt stack 21
   946                           
   947                           ;incstack = 0
   948                           ;sendData@whereToSend stored from wreg
   949  000A1E  0100               	movlb	0	; () banked
   950  000A20  6F88               	movwf	sendData@whereToSend& (0+255),b
   951                           
   952                           ;FastTransfer.c: 111: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
   953  000A22  C02E  F01B         	movff	_sendStructAddress,CRC8@data
   954  000A26  C02F  F01C         	movff	_sendStructAddress+1,CRC8@data+1
   955  000A2A  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
   956  000A2E  EC4C  F00A         	call	_CRC8	;wreg free
   957  000A32  0100               	movlb	0	; () banked
   958  000A34  6F89               	movwf	sendData@CS& (0+255),b
   959                           
   960                           ; BSR set to: 0
   961                           ;FastTransfer.c: 113: serial_write(0x06);
   962  000A36  D801               	call	u2588
   963  000A38  D00B               	goto	l2587
   964  000A3A                     u2588:
   965  000A3A  0005               	push	
   966  000A3C  6EFA               	movwf	pclath,c
   967  000A3E  5036               	movf	_serial_write,w,c
   968  000A40  6EFD               	movwf	tosl,c
   969  000A42  5037               	movf	_serial_write+1,w,c
   970  000A44  6EFE               	movwf	tosh,c
   971  000A46  50F8               	movf	tblptru,w,c
   972  000A48  6EFF               	movwf	tosu,c
   973  000A4A  50FA               	movf	pclath,w,c
   974  000A4C  0E06               	movlw	6
   975  000A4E  0012               	return		;indir
   976  000A50                     l2587:
   977                           
   978                           ;FastTransfer.c: 114: serial_write(0x85);
   979  000A50  D801               	call	u2598
   980  000A52  D00B               	goto	l2589
   981  000A54                     u2598:
   982  000A54  0005               	push	
   983  000A56  6EFA               	movwf	pclath,c
   984  000A58  5036               	movf	_serial_write,w,c
   985  000A5A  6EFD               	movwf	tosl,c
   986  000A5C  5037               	movf	_serial_write+1,w,c
   987  000A5E  6EFE               	movwf	tosh,c
   988  000A60  50F8               	movf	tblptru,w,c
   989  000A62  6EFF               	movwf	tosu,c
   990  000A64  50FA               	movf	pclath,w,c
   991  000A66  0E85               	movlw	133
   992  000A68  0012               	return		;indir
   993  000A6A                     l2589:
   994                           
   995                           ;FastTransfer.c: 115: serial_write(whereToSend);
   996  000A6A  D801               	call	u2608
   997  000A6C  D00C               	goto	l2591
   998  000A6E                     u2608:
   999  000A6E  0005               	push	
  1000  000A70  6EFA               	movwf	pclath,c
  1001  000A72  5036               	movf	_serial_write,w,c
  1002  000A74  6EFD               	movwf	tosl,c
  1003  000A76  5037               	movf	_serial_write+1,w,c
  1004  000A78  6EFE               	movwf	tosh,c
  1005  000A7A  50F8               	movf	tblptru,w,c
  1006  000A7C  6EFF               	movwf	tosu,c
  1007  000A7E  50FA               	movf	pclath,w,c
  1008  000A80  0100               	movlb	0	; () banked
  1009  000A82  5188               	movf	sendData@whereToSend& (0+255),w,b
  1010  000A84  0012               	return		;indir
  1011  000A86                     l2591:
  1012                           
  1013                           ;FastTransfer.c: 116: serial_write(moduleAddress);
  1014  000A86  D801               	call	u2618
  1015  000A88  D00B               	goto	l2593
  1016  000A8A                     u2618:
  1017  000A8A  0005               	push	
  1018  000A8C  6EFA               	movwf	pclath,c
  1019  000A8E  5036               	movf	_serial_write,w,c
  1020  000A90  6EFD               	movwf	tosl,c
  1021  000A92  5037               	movf	_serial_write+1,w,c
  1022  000A94  6EFE               	movwf	tosh,c
  1023  000A96  50F8               	movf	tblptru,w,c
  1024  000A98  6EFF               	movwf	tosu,c
  1025  000A9A  50FA               	movf	pclath,w,c
  1026  000A9C  503F               	movf	_moduleAddress,w,c
  1027  000A9E  0012               	return		;indir
  1028  000AA0                     l2593:
  1029                           
  1030                           ;FastTransfer.c: 117: serial_write(ring_buffer.count);
  1031  000AA0  D801               	call	u2628
  1032  000AA2  D00C               	goto	l2595
  1033  000AA4                     u2628:
  1034  000AA4  0005               	push	
  1035  000AA6  6EFA               	movwf	pclath,c
  1036  000AA8  5036               	movf	_serial_write,w,c
  1037  000AAA  6EFD               	movwf	tosl,c
  1038  000AAC  5037               	movf	_serial_write+1,w,c
  1039  000AAE  6EFE               	movwf	tosh,c
  1040  000AB0  50F8               	movf	tblptru,w,c
  1041  000AB2  6EFF               	movwf	tosu,c
  1042  000AB4  50FA               	movf	pclath,w,c
  1043  000AB6  0101               	movlb	1	; () banked
  1044  000AB8  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1045  000ABA  0012               	return		;indir
  1046  000ABC                     l2595:
  1047                           
  1048                           ;FastTransfer.c: 121: int i;
  1049                           ;FastTransfer.c: 122: for (i = 0; i < ring_buffer.count; i++) {
  1050  000ABC  0E00               	movlw	0
  1051  000ABE  0100               	movlb	0	; () banked
  1052  000AC0  6F8B               	movwf	(sendData@i+1)& (0+255),b
  1053  000AC2  0E00               	movlw	0
  1054  000AC4  6F8A               	movwf	sendData@i& (0+255),b
  1055  000AC6  D018               	goto	l2601
  1056  000AC8                     l2597:
  1057                           
  1058                           ; BSR set to: 0
  1059                           ;FastTransfer.c: 123: serial_write(*(sendStructAddress + i));
  1060  000AC8  D801               	call	u2638
  1061  000ACA  D013               	goto	l2599
  1062  000ACC                     u2638:
  1063  000ACC  0005               	push	
  1064  000ACE  6EFA               	movwf	pclath,c
  1065  000AD0  5036               	movf	_serial_write,w,c
  1066  000AD2  6EFD               	movwf	tosl,c
  1067  000AD4  5037               	movf	_serial_write+1,w,c
  1068  000AD6  6EFE               	movwf	tosh,c
  1069  000AD8  50F8               	movf	tblptru,w,c
  1070  000ADA  6EFF               	movwf	tosu,c
  1071  000ADC  50FA               	movf	pclath,w,c
  1072  000ADE  0100               	movlb	0	; () banked
  1073  000AE0  518A               	movf	sendData@i& (0+255),w,b
  1074  000AE2  242E               	addwf	_sendStructAddress,w,c
  1075  000AE4  6ED9               	movwf	fsr2l,c
  1076  000AE6  0100               	movlb	0	; () banked
  1077  000AE8  518B               	movf	(sendData@i+1)& (0+255),w,b
  1078  000AEA  202F               	addwfc	_sendStructAddress+1,w,c
  1079  000AEC  6EDA               	movwf	fsr2h,c
  1080  000AEE  50DF               	movf	indf2,w,c
  1081  000AF0  0012               	return		;indir
  1082  000AF2                     l2599:
  1083  000AF2  0100               	movlb	0	; () banked
  1084  000AF4  4B8A               	infsnz	sendData@i& (0+255),f,b
  1085  000AF6  2B8B               	incf	(sendData@i+1)& (0+255),f,b
  1086  000AF8                     l2601:
  1087                           
  1088                           ; BSR set to: 0
  1089  000AF8  0101               	movlb	1	; () banked
  1090  000AFA  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1091  000AFC  0100               	movlb	0	; () banked
  1092  000AFE  5D8A               	subwf	sendData@i& (0+255),w,b
  1093  000B00  0100               	movlb	0	; () banked
  1094  000B02  518B               	movf	(sendData@i+1)& (0+255),w,b
  1095  000B04  0A80               	xorlw	128
  1096  000B06  0100               	movlb	0	; () banked
  1097  000B08  6F87               	movwf	??_sendData& (0+255),b
  1098  000B0A  0101               	movlb	1	; () banked
  1099  000B0C  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  1100  000B0E  0A80               	xorlw	128
  1101  000B10  0100               	movlb	0	; () banked
  1102  000B12  5987               	subwfb	??_sendData& (0+255),w,b
  1103  000B14  A0D8               	btfss	status,0,c
  1104  000B16  D7D8               	goto	l2597
  1105                           
  1106                           ; BSR set to: 0
  1107                           ;FastTransfer.c: 124: }
  1108                           ;FastTransfer.c: 127: serial_write(CS);
  1109                           
  1110                           ; BSR set to: 0
  1111  000B18  D801               	call	u2658
  1112  000B1A  D00C               	goto	l2605
  1113  000B1C                     u2658:
  1114  000B1C  0005               	push	
  1115  000B1E  6EFA               	movwf	pclath,c
  1116  000B20  5036               	movf	_serial_write,w,c
  1117  000B22  6EFD               	movwf	tosl,c
  1118  000B24  5037               	movf	_serial_write+1,w,c
  1119  000B26  6EFE               	movwf	tosh,c
  1120  000B28  50F8               	movf	tblptru,w,c
  1121  000B2A  6EFF               	movwf	tosu,c
  1122  000B2C  50FA               	movf	pclath,w,c
  1123  000B2E  0100               	movlb	0	; () banked
  1124  000B30  5189               	movf	sendData@CS& (0+255),w,b
  1125  000B32  0012               	return		;indir
  1126  000B34                     l2605:
  1127                           
  1128                           ;FastTransfer.c: 130: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1129  000B34  0E68               	movlw	low _crc_buffer
  1130  000B36  6E1B               	movwf	crcBufS_put@_this,c
  1131  000B38  0E00               	movlw	high _crc_buffer
  1132  000B3A  6E1C               	movwf	crcBufS_put@_this+1,c
  1133  000B3C  C088  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1134  000B40  C089  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1135  000B44  0E00               	movlw	0
  1136  000B46  6E1F               	movwf	crcBufS_put@status,c
  1137  000B48  EC47  F007         	call	_crcBufS_put
  1138                           
  1139                           ;FastTransfer.c: 133: FastTransfer_buffer_flush(&ring_buffer, 1);
  1140  000B4C  0E00               	movlw	low _ring_buffer
  1141  000B4E  0100               	movlb	0	; () banked
  1142  000B50  6F83               	movwf	FastTransfer_buffer_flush@_this& (0+255),b
  1143  000B52  0E01               	movlw	high _ring_buffer
  1144  000B54  0100               	movlb	0	; () banked
  1145  000B56  6F84               	movwf	(FastTransfer_buffer_flush@_this+1)& (0+255),b
  1146  000B58  0E00               	movlw	0
  1147  000B5A  0100               	movlb	0	; () banked
  1148  000B5C  6F86               	movwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),b
  1149  000B5E  0E01               	movlw	1
  1150  000B60  6F85               	movwf	FastTransfer_buffer_flush@clearBuffer& (0+255),b
  1151  000B62  EC5E  F009         	call	_FastTransfer_buffer_flush	;wreg free
  1152  000B66  0012               	return		;funcret
  1153  000B68                     __end_of_sendData:
  1154                           	opt stack 0
  1155                           tosu	equ	0xFFF
  1156                           tosh	equ	0xFFE
  1157                           tosl	equ	0xFFD
  1158                           pclath	equ	0xFFA
  1159                           tblptru	equ	0xFF8
  1160                           tblptrh	equ	0xFF7
  1161                           tblptrl	equ	0xFF6
  1162                           tablat	equ	0xFF5
  1163                           postinc0	equ	0xFEE
  1164                           wreg	equ	0xFE8
  1165                           indf2	equ	0xFDF
  1166                           fsr2h	equ	0xFDA
  1167                           fsr2l	equ	0xFD9
  1168                           status	equ	0xFD8
  1169                           
  1170 ;; *************** function _crcBufS_put *****************
  1171 ;; Defined at:
  1172 ;;		line 377 in file "FastTransfer.c"
  1173 ;; Parameters:    Size  Location     Type
  1174 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1175 ;;		 -> crc_buffer(17), 
  1176 ;;  address         1   28[COMRAM] unsigned char 
  1177 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1178 ;;  status          1   30[COMRAM] unsigned char 
  1179 ;; Auto vars:     Size  Location     Type
  1180 ;;		None
  1181 ;; Return value:  Size  Location     Type
  1182 ;;                  1    wreg      void 
  1183 ;; Registers used:
  1184 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1185 ;; Tracked objects:
  1186 ;;		On entry : 0/0
  1187 ;;		On exit  : 0/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1190 ;;      Params:         5       0       0       0       0       0       0
  1191 ;;      Locals:         0       0       0       0       0       0       0
  1192 ;;      Temps:          2       0       0       0       0       0       0
  1193 ;;      Totals:         7       0       0       0       0       0       0
  1194 ;;Total ram usage:        7 bytes
  1195 ;; Hardware stack levels used:    1
  1196 ;; Hardware stack levels required when called:    4
  1197 ;; This function calls:
  1198 ;;		Nothing
  1199 ;; This function is called by:
  1200 ;;		_sendData
  1201 ;; This function uses a non-reentrant model
  1202 ;;
  1203                           
  1204                           	psect	text4
  1205  000E8E                     __ptext4:
  1206                           	opt stack 0
  1207  000E8E                     _crcBufS_put:
  1208                           	opt stack 23
  1209                           
  1210                           ;FastTransfer.c: 378: _this->buf[_this->head] = address;
  1211                           
  1212                           ;incstack = 0
  1213  000E8E  EE20 F00F          	lfsr	2,15
  1214  000E92  501B               	movf	crcBufS_put@_this,w,c
  1215  000E94  26D9               	addwf	fsr2l,f,c
  1216  000E96  501C               	movf	crcBufS_put@_this+1,w,c
  1217  000E98  22DA               	addwfc	fsr2h,f,c
  1218  000E9A  CFDE F020          	movff	postinc2,??_crcBufS_put
  1219  000E9E  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1220  000EA2  5020               	movf	??_crcBufS_put,w,c
  1221  000EA4  241B               	addwf	crcBufS_put@_this,w,c
  1222  000EA6  6ED9               	movwf	fsr2l,c
  1223  000EA8  5021               	movf	??_crcBufS_put+1,w,c
  1224  000EAA  201C               	addwfc	crcBufS_put@_this+1,w,c
  1225  000EAC  6EDA               	movwf	fsr2h,c
  1226  000EAE  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1227                           
  1228                           ;FastTransfer.c: 379: _this->head++;
  1229  000EB2  EE20 F00F          	lfsr	2,15
  1230  000EB6  501B               	movf	crcBufS_put@_this,w,c
  1231  000EB8  26D9               	addwf	fsr2l,f,c
  1232  000EBA  501C               	movf	crcBufS_put@_this+1,w,c
  1233  000EBC  22DA               	addwfc	fsr2h,f,c
  1234  000EBE  2ADE               	incf	postinc2,f,c
  1235  000EC0  0E00               	movlw	0
  1236  000EC2  22DD               	addwfc	postdec2,f,c
  1237                           
  1238                           ;FastTransfer.c: 380: _this->buf[_this->head] = oldCRC;
  1239  000EC4  EE20 F00F          	lfsr	2,15
  1240  000EC8  501B               	movf	crcBufS_put@_this,w,c
  1241  000ECA  26D9               	addwf	fsr2l,f,c
  1242  000ECC  501C               	movf	crcBufS_put@_this+1,w,c
  1243  000ECE  22DA               	addwfc	fsr2h,f,c
  1244  000ED0  CFDE F020          	movff	postinc2,??_crcBufS_put
  1245  000ED4  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1246  000ED8  5020               	movf	??_crcBufS_put,w,c
  1247  000EDA  241B               	addwf	crcBufS_put@_this,w,c
  1248  000EDC  6ED9               	movwf	fsr2l,c
  1249  000EDE  5021               	movf	??_crcBufS_put+1,w,c
  1250  000EE0  201C               	addwfc	crcBufS_put@_this+1,w,c
  1251  000EE2  6EDA               	movwf	fsr2h,c
  1252  000EE4  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1253                           
  1254                           ;FastTransfer.c: 381: _this->head++;
  1255  000EE8  EE20 F00F          	lfsr	2,15
  1256  000EEC  501B               	movf	crcBufS_put@_this,w,c
  1257  000EEE  26D9               	addwf	fsr2l,f,c
  1258  000EF0  501C               	movf	crcBufS_put@_this+1,w,c
  1259  000EF2  22DA               	addwfc	fsr2h,f,c
  1260  000EF4  2ADE               	incf	postinc2,f,c
  1261  000EF6  0E00               	movlw	0
  1262  000EF8  22DD               	addwfc	postdec2,f,c
  1263                           
  1264                           ;FastTransfer.c: 382: _this->buf[_this->head] = status;
  1265  000EFA  EE20 F00F          	lfsr	2,15
  1266  000EFE  501B               	movf	crcBufS_put@_this,w,c
  1267  000F00  26D9               	addwf	fsr2l,f,c
  1268  000F02  501C               	movf	crcBufS_put@_this+1,w,c
  1269  000F04  22DA               	addwfc	fsr2h,f,c
  1270  000F06  CFDE F020          	movff	postinc2,??_crcBufS_put
  1271  000F0A  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1272  000F0E  5020               	movf	??_crcBufS_put,w,c
  1273  000F10  241B               	addwf	crcBufS_put@_this,w,c
  1274  000F12  6ED9               	movwf	fsr2l,c
  1275  000F14  5021               	movf	??_crcBufS_put+1,w,c
  1276  000F16  201C               	addwfc	crcBufS_put@_this+1,w,c
  1277  000F18  6EDA               	movwf	fsr2h,c
  1278  000F1A  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1279                           
  1280                           ;FastTransfer.c: 383: _this->head++;
  1281  000F1E  EE20 F00F          	lfsr	2,15
  1282  000F22  501B               	movf	crcBufS_put@_this,w,c
  1283  000F24  26D9               	addwf	fsr2l,f,c
  1284  000F26  501C               	movf	crcBufS_put@_this+1,w,c
  1285  000F28  22DA               	addwfc	fsr2h,f,c
  1286  000F2A  2ADE               	incf	postinc2,f,c
  1287  000F2C  0E00               	movlw	0
  1288  000F2E  22DD               	addwfc	postdec2,f,c
  1289                           
  1290                           ;FastTransfer.c: 384: if (_this->head >= (5 * 3)) {
  1291  000F30  EE20 F00F          	lfsr	2,15
  1292  000F34  501B               	movf	crcBufS_put@_this,w,c
  1293  000F36  26D9               	addwf	fsr2l,f,c
  1294  000F38  501C               	movf	crcBufS_put@_this+1,w,c
  1295  000F3A  22DA               	addwfc	fsr2h,f,c
  1296  000F3C  0E01               	movlw	1
  1297  000F3E  BEDB               	btfsc	plusw2,7,c
  1298  000F40  0012               	return	
  1299  000F42  0E01               	movlw	1
  1300  000F44  50DB               	movf	plusw2,w,c
  1301  000F46  E104               	bnz	u2490
  1302  000F48  0E0F               	movlw	15
  1303  000F4A  5CDE               	subwf	postinc2,w,c
  1304  000F4C  A0D8               	btfss	status,0,c
  1305  000F4E  0012               	return	
  1306  000F50                     u2490:
  1307                           
  1308                           ;FastTransfer.c: 385: _this->head = 0;
  1309  000F50  EE20 F00F          	lfsr	2,15
  1310  000F54  501B               	movf	crcBufS_put@_this,w,c
  1311  000F56  26D9               	addwf	fsr2l,f,c
  1312  000F58  501C               	movf	crcBufS_put@_this+1,w,c
  1313  000F5A  22DA               	addwfc	fsr2h,f,c
  1314  000F5C  0E00               	movlw	0
  1315  000F5E  6EDE               	movwf	postinc2,c
  1316  000F60  0E00               	movlw	0
  1317  000F62  6EDD               	movwf	postdec2,c
  1318  000F64  0012               	return	
  1319  000F66                     __end_of_crcBufS_put:
  1320                           	opt stack 0
  1321                           tosu	equ	0xFFF
  1322                           tosh	equ	0xFFE
  1323                           tosl	equ	0xFFD
  1324                           pclath	equ	0xFFA
  1325                           tblptru	equ	0xFF8
  1326                           tblptrh	equ	0xFF7
  1327                           tblptrl	equ	0xFF6
  1328                           tablat	equ	0xFF5
  1329                           postinc0	equ	0xFEE
  1330                           wreg	equ	0xFE8
  1331                           indf2	equ	0xFDF
  1332                           postinc2	equ	0xFDE
  1333                           postdec2	equ	0xFDD
  1334                           plusw2	equ	0xFDB
  1335                           fsr2h	equ	0xFDA
  1336                           fsr2l	equ	0xFD9
  1337                           status	equ	0xFD8
  1338                           
  1339 ;; *************** function _FastTransfer_buffer_flush *****************
  1340 ;; Defined at:
  1341 ;;		line 317 in file "FastTransfer.c"
  1342 ;; Parameters:    Size  Location     Type
  1343 ;;  _this           2    0[BANK0 ] PTR struct ringBufS
  1344 ;;		 -> ring_buffer(206), 
  1345 ;;  clearBuffer     2    2[BANK0 ] const int 
  1346 ;; Auto vars:     Size  Location     Type
  1347 ;;		None
  1348 ;; Return value:  Size  Location     Type
  1349 ;;                  1    wreg      void 
  1350 ;; Registers used:
  1351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1352 ;; Tracked objects:
  1353 ;;		On entry : 0/0
  1354 ;;		On exit  : 0/0
  1355 ;;		Unchanged: 0/0
  1356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1357 ;;      Params:         0       4       0       0       0       0       0
  1358 ;;      Locals:         0       0       0       0       0       0       0
  1359 ;;      Temps:          0       0       0       0       0       0       0
  1360 ;;      Totals:         0       4       0       0       0       0       0
  1361 ;;Total ram usage:        4 bytes
  1362 ;; Hardware stack levels used:    1
  1363 ;; Hardware stack levels required when called:    5
  1364 ;; This function calls:
  1365 ;;		_memset
  1366 ;; This function is called by:
  1367 ;;		_sendData
  1368 ;; This function uses a non-reentrant model
  1369 ;;
  1370                           
  1371                           	psect	text5
  1372  0012BC                     __ptext5:
  1373                           	opt stack 0
  1374  0012BC                     _FastTransfer_buffer_flush:
  1375                           	opt stack 22
  1376                           
  1377                           ;FastTransfer.c: 318: _this->count = 0;
  1378                           
  1379                           ;incstack = 0
  1380  0012BC  0100               	movlb	0	; () banked
  1381  0012BE  EE20 F0CC          	lfsr	2,204
  1382  0012C2  5183               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1383  0012C4  26D9               	addwf	fsr2l,f,c
  1384  0012C6  5184               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1385  0012C8  22DA               	addwfc	fsr2h,f,c
  1386  0012CA  0E00               	movlw	0
  1387  0012CC  6EDE               	movwf	postinc2,c
  1388  0012CE  0E00               	movlw	0
  1389  0012D0  6EDD               	movwf	postdec2,c
  1390                           
  1391                           ;FastTransfer.c: 319: _this->head = 0;
  1392  0012D2  0100               	movlb	0	; () banked
  1393  0012D4  EE20 F0C8          	lfsr	2,200
  1394  0012D8  5183               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1395  0012DA  26D9               	addwf	fsr2l,f,c
  1396  0012DC  5184               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1397  0012DE  22DA               	addwfc	fsr2h,f,c
  1398  0012E0  0E00               	movlw	0
  1399  0012E2  6EDE               	movwf	postinc2,c
  1400  0012E4  0E00               	movlw	0
  1401  0012E6  6EDD               	movwf	postdec2,c
  1402                           
  1403                           ;FastTransfer.c: 320: _this->tail = 0;
  1404  0012E8  0100               	movlb	0	; () banked
  1405  0012EA  EE20 F0CA          	lfsr	2,202
  1406  0012EE  5183               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1407  0012F0  26D9               	addwf	fsr2l,f,c
  1408  0012F2  5184               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1409  0012F4  22DA               	addwfc	fsr2h,f,c
  1410  0012F6  0E00               	movlw	0
  1411  0012F8  6EDE               	movwf	postinc2,c
  1412  0012FA  0E00               	movlw	0
  1413  0012FC  6EDD               	movwf	postdec2,c
  1414                           
  1415                           ; BSR set to: 0
  1416                           ;FastTransfer.c: 321: if (clearBuffer) {
  1417  0012FE  0100               	movlb	0	; () banked
  1418  001300  5185               	movf	FastTransfer_buffer_flush@clearBuffer& (0+255),w,b
  1419  001302  0100               	movlb	0	; () banked
  1420  001304  1186               	iorwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),w,b
  1421  001306  B4D8               	btfsc	status,2,c
  1422  001308  0012               	return	
  1423                           
  1424                           ; BSR set to: 0
  1425                           ;FastTransfer.c: 322: memset(_this->buf, 0, sizeof (_this->buf));
  1426  00130A  C083  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1427  00130E  C084  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1428  001312  0E00               	movlw	0
  1429  001314  6E1E               	movwf	memset@c+1,c
  1430  001316  0E00               	movlw	0
  1431  001318  6E1D               	movwf	memset@c,c
  1432  00131A  0E00               	movlw	0
  1433  00131C  6E20               	movwf	memset@n+1,c
  1434  00131E  0EC8               	movlw	200
  1435  001320  6E1F               	movwf	memset@n,c
  1436  001322  EC15  F00B         	call	_memset	;wreg free
  1437  001326  0012               	return	
  1438  001328                     __end_of_FastTransfer_buffer_flush:
  1439                           	opt stack 0
  1440                           tosu	equ	0xFFF
  1441                           tosh	equ	0xFFE
  1442                           tosl	equ	0xFFD
  1443                           pclath	equ	0xFFA
  1444                           tblptru	equ	0xFF8
  1445                           tblptrh	equ	0xFF7
  1446                           tblptrl	equ	0xFF6
  1447                           tablat	equ	0xFF5
  1448                           postinc0	equ	0xFEE
  1449                           wreg	equ	0xFE8
  1450                           indf2	equ	0xFDF
  1451                           postinc2	equ	0xFDE
  1452                           postdec2	equ	0xFDD
  1453                           plusw2	equ	0xFDB
  1454                           fsr2h	equ	0xFDA
  1455                           fsr2l	equ	0xFD9
  1456                           status	equ	0xFD8
  1457                           
  1458 ;; *************** function _ToSend *****************
  1459 ;; Defined at:
  1460 ;;		line 272 in file "FastTransfer.c"
  1461 ;; Parameters:    Size  Location     Type
  1462 ;;  where           1    wreg     unsigned char 
  1463 ;;  what            2    2[BANK0 ] unsigned int 
  1464 ;; Auto vars:     Size  Location     Type
  1465 ;;  where           1    4[BANK0 ] unsigned char 
  1466 ;; Return value:  Size  Location     Type
  1467 ;;                  1    wreg      void 
  1468 ;; Registers used:
  1469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1475 ;;      Params:         0       2       0       0       0       0       0
  1476 ;;      Locals:         0       1       0       0       0       0       0
  1477 ;;      Temps:          0       0       0       0       0       0       0
  1478 ;;      Totals:         0       3       0       0       0       0       0
  1479 ;;Total ram usage:        3 bytes
  1480 ;; Hardware stack levels used:    1
  1481 ;; Hardware stack levels required when called:    6
  1482 ;; This function calls:
  1483 ;;		_FastTransfer_buffer_put
  1484 ;; This function is called by:
  1485 ;;		_respondECU
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           	psect	text6
  1490  0016F8                     __ptext6:
  1491                           	opt stack 0
  1492  0016F8                     _ToSend:
  1493                           	opt stack 22
  1494                           
  1495                           ;incstack = 0
  1496                           ;ToSend@where stored from wreg
  1497  0016F8  0100               	movlb	0	; () banked
  1498  0016FA  6F87               	movwf	ToSend@where& (0+255),b
  1499                           
  1500                           ;FastTransfer.c: 273: FastTransfer_buffer_put(&ring_buffer, where, what);
  1501  0016FC  0E00               	movlw	low _ring_buffer
  1502  0016FE  6E21               	movwf	FastTransfer_buffer_put@_this,c
  1503  001700  0E01               	movlw	high _ring_buffer
  1504  001702  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  1505  001704  C087  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  1506  001708  C085  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  1507  00170C  C086  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  1508  001710  ECA7  F003         	call	_FastTransfer_buffer_put	;wreg free
  1509  001714  0012               	return		;funcret
  1510  001716                     __end_of_ToSend:
  1511                           	opt stack 0
  1512                           tosu	equ	0xFFF
  1513                           tosh	equ	0xFFE
  1514                           tosl	equ	0xFFD
  1515                           pclath	equ	0xFFA
  1516                           tblptru	equ	0xFF8
  1517                           tblptrh	equ	0xFF7
  1518                           tblptrl	equ	0xFF6
  1519                           tablat	equ	0xFF5
  1520                           postinc0	equ	0xFEE
  1521                           wreg	equ	0xFE8
  1522                           indf2	equ	0xFDF
  1523                           postinc2	equ	0xFDE
  1524                           postdec2	equ	0xFDD
  1525                           plusw2	equ	0xFDB
  1526                           fsr2h	equ	0xFDA
  1527                           fsr2l	equ	0xFD9
  1528                           status	equ	0xFD8
  1529                           
  1530 ;; *************** function _FastTransfer_buffer_put *****************
  1531 ;; Defined at:
  1532 ;;		line 279 in file "FastTransfer.c"
  1533 ;; Parameters:    Size  Location     Type
  1534 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  1535 ;;		 -> ring_buffer(206), 
  1536 ;;  towhere         1   34[COMRAM] unsigned char 
  1537 ;;  towhat          2   35[COMRAM] unsigned int 
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;		None
  1540 ;; Return value:  Size  Location     Type
  1541 ;;                  1    wreg      void 
  1542 ;; Registers used:
  1543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1544 ;; Tracked objects:
  1545 ;;		On entry : 0/0
  1546 ;;		On exit  : 0/0
  1547 ;;		Unchanged: 0/0
  1548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1549 ;;      Params:         5       0       0       0       0       0       0
  1550 ;;      Locals:         0       0       0       0       0       0       0
  1551 ;;      Temps:          0       2       0       0       0       0       0
  1552 ;;      Totals:         5       2       0       0       0       0       0
  1553 ;;Total ram usage:        7 bytes
  1554 ;; Hardware stack levels used:    1
  1555 ;; Hardware stack levels required when called:    5
  1556 ;; This function calls:
  1557 ;;		_FastTransfer_buffer_modulo_inc
  1558 ;; This function is called by:
  1559 ;;		_ToSend
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563                           	psect	text7
  1564  00074E                     __ptext7:
  1565                           	opt stack 0
  1566  00074E                     _FastTransfer_buffer_put:
  1567                           	opt stack 22
  1568                           
  1569                           ;FastTransfer.c: 281: group.integer = towhat;
  1570                           
  1571                           ;incstack = 0
  1572  00074E  C024  F02A         	movff	FastTransfer_buffer_put@towhat,_group
  1573  000752  C025  F02B         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  1574                           
  1575                           ;FastTransfer.c: 283: if (_this->count < (200 - 3)) {
  1576  000756  EE20 F0CC          	lfsr	2,204
  1577  00075A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1578  00075C  26D9               	addwf	fsr2l,f,c
  1579  00075E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1580  000760  22DA               	addwfc	fsr2h,f,c
  1581  000762  0E01               	movlw	1
  1582  000764  BEDB               	btfsc	plusw2,7,c
  1583  000766  D007               	goto	l2483
  1584  000768  0E01               	movlw	1
  1585  00076A  50DB               	movf	plusw2,w,c
  1586  00076C  E103               	bnz	u2511
  1587  00076E  0EC5               	movlw	197
  1588  000770  5CDE               	subwf	postinc2,w,c
  1589  000772  B0D8               	btfsc	status,0,c
  1590  000774                     u2511:
  1591  000774  0012               	return	
  1592  000776                     l2483:
  1593                           
  1594                           ;FastTransfer.c: 284: _this->buf[_this->head] = towhere;
  1595  000776  EE20 F0C8          	lfsr	2,200
  1596  00077A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1597  00077C  26D9               	addwf	fsr2l,f,c
  1598  00077E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1599  000780  22DA               	addwfc	fsr2h,f,c
  1600  000782  CFDE F083          	movff	postinc2,??_FastTransfer_buffer_put
  1601  000786  CFDD F084          	movff	postdec2,??_FastTransfer_buffer_put+1
  1602  00078A  0100               	movlb	0	; () banked
  1603  00078C  5183               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1604  00078E  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1605  000790  6ED9               	movwf	fsr2l,c
  1606  000792  0100               	movlb	0	; () banked
  1607  000794  5184               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1608  000796  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1609  000798  6EDA               	movwf	fsr2h,c
  1610  00079A  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  1611                           
  1612                           ; BSR set to: 0
  1613                           ;FastTransfer.c: 285: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1614  00079E  EE20 F0C8          	lfsr	2,200
  1615  0007A2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1616  0007A4  26D9               	addwf	fsr2l,f,c
  1617  0007A6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1618  0007A8  22DA               	addwfc	fsr2h,f,c
  1619  0007AA  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1620  0007AE  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1621  0007B2  0E00               	movlw	0
  1622  0007B4  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1623  0007B6  0EC8               	movlw	200
  1624  0007B8  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1625  0007BA  EC2B  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1626  0007BE  EE20 F0C8          	lfsr	2,200
  1627  0007C2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1628  0007C4  26D9               	addwf	fsr2l,f,c
  1629  0007C6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1630  0007C8  22DA               	addwfc	fsr2h,f,c
  1631  0007CA  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1632  0007CE  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1633                           
  1634                           ;FastTransfer.c: 286: ++_this->count;
  1635  0007D2  EE20 F0CC          	lfsr	2,204
  1636  0007D6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1637  0007D8  26D9               	addwf	fsr2l,f,c
  1638  0007DA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1639  0007DC  22DA               	addwfc	fsr2h,f,c
  1640  0007DE  2ADE               	incf	postinc2,f,c
  1641  0007E0  0E00               	movlw	0
  1642  0007E2  22DD               	addwfc	postdec2,f,c
  1643                           
  1644                           ;FastTransfer.c: 287: _this->buf[_this->head] = group.parts[0];
  1645  0007E4  EE20 F0C8          	lfsr	2,200
  1646  0007E8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1647  0007EA  26D9               	addwf	fsr2l,f,c
  1648  0007EC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1649  0007EE  22DA               	addwfc	fsr2h,f,c
  1650  0007F0  CFDE F083          	movff	postinc2,??_FastTransfer_buffer_put
  1651  0007F4  CFDD F084          	movff	postdec2,??_FastTransfer_buffer_put+1
  1652  0007F8  0100               	movlb	0	; () banked
  1653  0007FA  5183               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1654  0007FC  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1655  0007FE  6ED9               	movwf	fsr2l,c
  1656  000800  0100               	movlb	0	; () banked
  1657  000802  5184               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1658  000804  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1659  000806  6EDA               	movwf	fsr2h,c
  1660  000808  C02A  FFDF         	movff	_group,indf2
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;FastTransfer.c: 288: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1664  00080C  EE20 F0C8          	lfsr	2,200
  1665  000810  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1666  000812  26D9               	addwf	fsr2l,f,c
  1667  000814  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1668  000816  22DA               	addwfc	fsr2h,f,c
  1669  000818  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1670  00081C  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1671  000820  0E00               	movlw	0
  1672  000822  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1673  000824  0EC8               	movlw	200
  1674  000826  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1675  000828  EC2B  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1676  00082C  EE20 F0C8          	lfsr	2,200
  1677  000830  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1678  000832  26D9               	addwf	fsr2l,f,c
  1679  000834  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1680  000836  22DA               	addwfc	fsr2h,f,c
  1681  000838  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1682  00083C  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1683                           
  1684                           ;FastTransfer.c: 289: ++_this->count;
  1685  000840  EE20 F0CC          	lfsr	2,204
  1686  000844  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1687  000846  26D9               	addwf	fsr2l,f,c
  1688  000848  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1689  00084A  22DA               	addwfc	fsr2h,f,c
  1690  00084C  2ADE               	incf	postinc2,f,c
  1691  00084E  0E00               	movlw	0
  1692  000850  22DD               	addwfc	postdec2,f,c
  1693                           
  1694                           ;FastTransfer.c: 290: _this->buf[_this->head] = group.parts[1];
  1695  000852  EE20 F0C8          	lfsr	2,200
  1696  000856  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1697  000858  26D9               	addwf	fsr2l,f,c
  1698  00085A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1699  00085C  22DA               	addwfc	fsr2h,f,c
  1700  00085E  CFDE F083          	movff	postinc2,??_FastTransfer_buffer_put
  1701  000862  CFDD F084          	movff	postdec2,??_FastTransfer_buffer_put+1
  1702  000866  0100               	movlb	0	; () banked
  1703  000868  5183               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1704  00086A  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1705  00086C  6ED9               	movwf	fsr2l,c
  1706  00086E  0100               	movlb	0	; () banked
  1707  000870  5184               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1708  000872  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1709  000874  6EDA               	movwf	fsr2h,c
  1710  000876  C02B  FFDF         	movff	_group+1,indf2
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;FastTransfer.c: 291: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1714  00087A  EE20 F0C8          	lfsr	2,200
  1715  00087E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1716  000880  26D9               	addwf	fsr2l,f,c
  1717  000882  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1718  000884  22DA               	addwfc	fsr2h,f,c
  1719  000886  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1720  00088A  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1721  00088E  0E00               	movlw	0
  1722  000890  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1723  000892  0EC8               	movlw	200
  1724  000894  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1725  000896  EC2B  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1726  00089A  EE20 F0C8          	lfsr	2,200
  1727  00089E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1728  0008A0  26D9               	addwf	fsr2l,f,c
  1729  0008A2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1730  0008A4  22DA               	addwfc	fsr2h,f,c
  1731  0008A6  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1732  0008AA  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1733                           
  1734                           ;FastTransfer.c: 292: ++_this->count;
  1735  0008AE  EE20 F0CC          	lfsr	2,204
  1736  0008B2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1737  0008B4  26D9               	addwf	fsr2l,f,c
  1738  0008B6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1739  0008B8  22DA               	addwfc	fsr2h,f,c
  1740  0008BA  2ADE               	incf	postinc2,f,c
  1741  0008BC  0E00               	movlw	0
  1742  0008BE  22DD               	addwfc	postdec2,f,c
  1743  0008C0  0012               	return	
  1744  0008C2                     __end_of_FastTransfer_buffer_put:
  1745                           	opt stack 0
  1746                           tosu	equ	0xFFF
  1747                           tosh	equ	0xFFE
  1748                           tosl	equ	0xFFD
  1749                           pclath	equ	0xFFA
  1750                           tblptru	equ	0xFF8
  1751                           tblptrh	equ	0xFF7
  1752                           tblptrl	equ	0xFF6
  1753                           tablat	equ	0xFF5
  1754                           postinc0	equ	0xFEE
  1755                           wreg	equ	0xFE8
  1756                           indf2	equ	0xFDF
  1757                           postinc2	equ	0xFDE
  1758                           postdec2	equ	0xFDD
  1759                           plusw2	equ	0xFDB
  1760                           fsr2h	equ	0xFDA
  1761                           fsr2l	equ	0xFD9
  1762                           status	equ	0xFD8
  1763                           
  1764 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  1765 ;; Defined at:
  1766 ;;		line 329 in file "FastTransfer.c"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;  value           2   26[COMRAM] const unsigned int 
  1769 ;;  modulus         2   28[COMRAM] const unsigned int 
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;  my_value        2   30[COMRAM] unsigned int 
  1772 ;; Return value:  Size  Location     Type
  1773 ;;                  2   26[COMRAM] unsigned int 
  1774 ;; Registers used:
  1775 ;;		wreg, status,2, status,0
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1781 ;;      Params:         4       0       0       0       0       0       0
  1782 ;;      Locals:         2       0       0       0       0       0       0
  1783 ;;      Temps:          0       0       0       0       0       0       0
  1784 ;;      Totals:         6       0       0       0       0       0       0
  1785 ;;Total ram usage:        6 bytes
  1786 ;; Hardware stack levels used:    1
  1787 ;; Hardware stack levels required when called:    4
  1788 ;; This function calls:
  1789 ;;		Nothing
  1790 ;; This function is called by:
  1791 ;;		_FastTransfer_buffer_put
  1792 ;;		_FastTransfer_buffer_get
  1793 ;; This function uses a non-reentrant model
  1794 ;;
  1795                           
  1796                           	psect	text8
  1797  001656                     __ptext8:
  1798                           	opt stack 0
  1799  001656                     _FastTransfer_buffer_modulo_inc:
  1800                           	opt stack 22
  1801                           
  1802                           ;FastTransfer.c: 330: unsigned int my_value = value + 1;
  1803                           
  1804                           ;incstack = 0
  1805  001656  0E01               	movlw	1
  1806  001658  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  1807  00165A  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1808  00165C  0E00               	movlw	0
  1809  00165E  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  1810  001660  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1811                           
  1812                           ;FastTransfer.c: 331: if (my_value >= modulus) {
  1813  001662  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  1814  001664  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  1815  001666  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  1816  001668  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  1817  00166A  A0D8               	btfss	status,0,c
  1818  00166C  D004               	goto	l2403
  1819                           
  1820                           ;FastTransfer.c: 332: my_value = 0;
  1821  00166E  0E00               	movlw	0
  1822  001670  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1823  001672  0E00               	movlw	0
  1824  001674  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1825  001676                     l2403:
  1826                           
  1827                           ;FastTransfer.c: 333: }
  1828                           ;FastTransfer.c: 334: return (my_value);
  1829  001676  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  1830  00167A  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  1831  00167E  0012               	return	
  1832  001680                     __end_of_FastTransfer_buffer_modulo_inc:
  1833                           	opt stack 0
  1834                           tosu	equ	0xFFF
  1835                           tosh	equ	0xFFE
  1836                           tosl	equ	0xFFD
  1837                           pclath	equ	0xFFA
  1838                           tblptru	equ	0xFF8
  1839                           tblptrh	equ	0xFF7
  1840                           tblptrl	equ	0xFF6
  1841                           tablat	equ	0xFF5
  1842                           postinc0	equ	0xFEE
  1843                           wreg	equ	0xFE8
  1844                           indf2	equ	0xFDF
  1845                           postinc2	equ	0xFDE
  1846                           postdec2	equ	0xFDD
  1847                           plusw2	equ	0xFDB
  1848                           fsr2h	equ	0xFDA
  1849                           fsr2l	equ	0xFD9
  1850                           status	equ	0xFD8
  1851                           
  1852 ;; *************** function _GetFaults *****************
  1853 ;; Defined at:
  1854 ;;		line 23 in file "Function.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;  num             1    wreg     unsigned char 
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;  num             1   26[COMRAM] unsigned char 
  1859 ;; Return value:  Size  Location     Type
  1860 ;;                  1    wreg      unsigned char 
  1861 ;; Registers used:
  1862 ;;		wreg, status,2, status,0
  1863 ;; Tracked objects:
  1864 ;;		On entry : 0/0
  1865 ;;		On exit  : 0/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1868 ;;      Params:         0       0       0       0       0       0       0
  1869 ;;      Locals:         1       0       0       0       0       0       0
  1870 ;;      Temps:          0       0       0       0       0       0       0
  1871 ;;      Totals:         1       0       0       0       0       0       0
  1872 ;;Total ram usage:        1 bytes
  1873 ;; Hardware stack levels used:    1
  1874 ;; Hardware stack levels required when called:    4
  1875 ;; This function calls:
  1876 ;;		Nothing
  1877 ;; This function is called by:
  1878 ;;		_respondECU
  1879 ;; This function uses a non-reentrant model
  1880 ;;
  1881                           
  1882                           	psect	text9
  1883  0017A2                     __ptext9:
  1884                           	opt stack 0
  1885  0017A2                     _GetFaults:
  1886                           	opt stack 24
  1887                           
  1888                           ;incstack = 0
  1889                           ;GetFaults@num stored from wreg
  1890  0017A2  6E1B               	movwf	GetFaults@num,c
  1891                           
  1892                           ;Function.c: 24: if(num == 1){
  1893  0017A4  041B               	decf	GetFaults@num,w,c
  1894  0017A6  A4D8               	btfss	status,2,c
  1895  0017A8  D002               	goto	l1323
  1896                           
  1897                           ;Function.c: 25: return ByteHigh;
  1898  0017AA  503B               	movf	_ByteHigh,w,c
  1899  0017AC  0012               	return	
  1900  0017AE                     l1323:
  1901                           
  1902                           ;Function.c: 26: }
  1903                           ;Function.c: 27: if(num == 0){
  1904  0017AE  501B               	movf	GetFaults@num,w,c
  1905  0017B0  A4D8               	btfss	status,2,c
  1906  0017B2  0012               	return	
  1907                           
  1908                           ;Function.c: 28: return ByteLow;
  1909  0017B4  503C               	movf	_ByteLow,w,c
  1910  0017B6  0012               	return	
  1911  0017B8                     __end_of_GetFaults:
  1912                           	opt stack 0
  1913                           tosu	equ	0xFFF
  1914                           tosh	equ	0xFFE
  1915                           tosl	equ	0xFFD
  1916                           pclath	equ	0xFFA
  1917                           tblptru	equ	0xFF8
  1918                           tblptrh	equ	0xFF7
  1919                           tblptrl	equ	0xFF6
  1920                           tablat	equ	0xFF5
  1921                           postinc0	equ	0xFEE
  1922                           wreg	equ	0xFE8
  1923                           indf2	equ	0xFDF
  1924                           postinc2	equ	0xFDE
  1925                           postdec2	equ	0xFDD
  1926                           plusw2	equ	0xFDB
  1927                           fsr2h	equ	0xFDA
  1928                           fsr2l	equ	0xFD9
  1929                           status	equ	0xFD8
  1930                           
  1931 ;; *************** function _Delay *****************
  1932 ;; Defined at:
  1933 ;;		line 185 in file "Function.c"
  1934 ;; Parameters:    Size  Location     Type
  1935 ;;  wait            2   26[COMRAM] int 
  1936 ;; Auto vars:     Size  Location     Type
  1937 ;;  x               2   29[COMRAM] int 
  1938 ;; Return value:  Size  Location     Type
  1939 ;;                  1    wreg      void 
  1940 ;; Registers used:
  1941 ;;		wreg, status,2, status,0
  1942 ;; Tracked objects:
  1943 ;;		On entry : 0/0
  1944 ;;		On exit  : 0/0
  1945 ;;		Unchanged: 0/0
  1946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1947 ;;      Params:         2       0       0       0       0       0       0
  1948 ;;      Locals:         2       0       0       0       0       0       0
  1949 ;;      Temps:          1       0       0       0       0       0       0
  1950 ;;      Totals:         5       0       0       0       0       0       0
  1951 ;;Total ram usage:        5 bytes
  1952 ;; Hardware stack levels used:    1
  1953 ;; Hardware stack levels required when called:    4
  1954 ;; This function calls:
  1955 ;;		Nothing
  1956 ;; This function is called by:
  1957 ;;		_respondECU
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           	psect	text10
  1962  001568                     __ptext10:
  1963                           	opt stack 0
  1964  001568                     _Delay:
  1965                           	opt stack 24
  1966                           
  1967                           ;Function.c: 186: int x;
  1968                           ;Function.c: 187: for (x = 0; x < wait; x++) {
  1969                           
  1970                           ;incstack = 0
  1971  001568  0E00               	movlw	0
  1972  00156A  6E1F               	movwf	Delay@x+1,c
  1973  00156C  0E00               	movlw	0
  1974  00156E  6E1E               	movwf	Delay@x,c
  1975  001570  D00A               	goto	l462
  1976  001572                     l1999:
  1977                           
  1978                           ;Function.c: 188: _delay((unsigned long)((1)*(16000000/4000.0)));
  1979  001572  0E06               	movlw	6
  1980  001574  6E1D               	movwf	??_Delay& (0+255),c
  1981  001576  0E30               	movlw	48
  1982  001578                     u3357:
  1983  001578  2EE8               	decfsz	wreg,f,c
  1984  00157A  D7FE               	goto	u3357
  1985  00157C  2E1D               	decfsz	??_Delay& (0+255),f,c
  1986  00157E  D7FC               	goto	u3357
  1987  001580  D000               	nop2	
  1988  001582  4A1E               	infsnz	Delay@x,f,c
  1989  001584  2A1F               	incf	Delay@x+1,f,c
  1990  001586                     l462:
  1991  001586  501B               	movf	Delay@wait,w,c
  1992  001588  5C1E               	subwf	Delay@x,w,c
  1993  00158A  501F               	movf	Delay@x+1,w,c
  1994  00158C  0A80               	xorlw	128
  1995  00158E  6E1D               	movwf	??_Delay& (0+255),c
  1996  001590  501C               	movf	Delay@wait+1,w,c
  1997  001592  0A80               	xorlw	128
  1998  001594  581D               	subwfb	??_Delay& (0+255),w,c
  1999  001596  B0D8               	btfsc	status,0,c
  2000  001598  0012               	return	
  2001  00159A  D7EB               	goto	l1999
  2002  00159C                     __end_of_Delay:
  2003                           	opt stack 0
  2004                           tosu	equ	0xFFF
  2005                           tosh	equ	0xFFE
  2006                           tosl	equ	0xFFD
  2007                           pclath	equ	0xFFA
  2008                           tblptru	equ	0xFF8
  2009                           tblptrh	equ	0xFF7
  2010                           tblptrl	equ	0xFF6
  2011                           tablat	equ	0xFF5
  2012                           postinc0	equ	0xFEE
  2013                           wreg	equ	0xFE8
  2014                           indf2	equ	0xFDF
  2015                           postinc2	equ	0xFDE
  2016                           postdec2	equ	0xFDD
  2017                           plusw2	equ	0xFDB
  2018                           fsr2h	equ	0xFDA
  2019                           fsr2l	equ	0xFD9
  2020                           status	equ	0xFD8
  2021                           
  2022 ;; *************** function _receiveData *****************
  2023 ;; Defined at:
  2024 ;;		line 137 in file "FastTransfer.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;		None
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;  holder          3   18[BANK0 ] unsigned char [3]
  2029 ;;  crcHolder       1   22[BANK0 ] unsigned char 
  2030 ;;  holder          3   15[BANK0 ] unsigned char [3]
  2031 ;;  crcHolder       1   21[BANK0 ] unsigned char 
  2032 ;;  u               2   23[BANK0 ] int 
  2033 ;;  r               2   25[BANK0 ] int 
  2034 ;; Return value:  Size  Location     Type
  2035 ;;                  1    wreg      unsigned char 
  2036 ;; Registers used:
  2037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2038 ;; Tracked objects:
  2039 ;;		On entry : 0/0
  2040 ;;		On exit  : 0/0
  2041 ;;		Unchanged: 0/0
  2042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2043 ;;      Params:         0       0       0       0       0       0       0
  2044 ;;      Locals:         0      12       0       0       0       0       0
  2045 ;;      Temps:          0       6       0       0       0       0       0
  2046 ;;      Totals:         0      18       0       0       0       0       0
  2047 ;;Total ram usage:       18 bytes
  2048 ;; Hardware stack levels used:    1
  2049 ;; Hardware stack levels required when called:    8
  2050 ;; This function calls:
  2051 ;;		Absolute function
  2052 ;;		_CRC8
  2053 ;;		_CRCcheck
  2054 ;;		_Receive_available
  2055 ;;		_Receive_get
  2056 ;;		_Receive_peek
  2057 ;;		_Send_put
  2058 ;; This function is called by:
  2059 ;;		_updateComms
  2060 ;; This function uses a non-reentrant model
  2061 ;;
  2062                           
  2063                           	psect	text11
  2064  0000A4                     __ptext11:
  2065                           	opt stack 0
  2066  0000A4                     _receiveData:
  2067                           	opt stack 21
  2068                           
  2069                           ;FastTransfer.c: 140: if (rx_len == 0) {
  2070                           
  2071                           ;incstack = 0
  2072  0000A4  5043               	movf	_rx_len,w,c
  2073  0000A6  A4D8               	btfss	status,2,c
  2074  0000A8  D0AB               	goto	l2691
  2075                           
  2076                           ;FastTransfer.c: 142: if (serial_available() > 4) {
  2077  0000AA  D801               	call	u2808
  2078  0000AC  D00A               	goto	u2809
  2079  0000AE                     u2808:
  2080  0000AE  0005               	push	
  2081  0000B0  6EFA               	movwf	pclath,c
  2082  0000B2  5030               	movf	_serial_available,w,c
  2083  0000B4  6EFD               	movwf	tosl,c
  2084  0000B6  5031               	movf	_serial_available+1,w,c
  2085  0000B8  6EFE               	movwf	tosh,c
  2086  0000BA  50F8               	movf	tblptru,w,c
  2087  0000BC  6EFF               	movwf	tosu,c
  2088  0000BE  50FA               	movf	pclath,w,c
  2089  0000C0  0012               	return		;indir
  2090  0000C2                     u2809:
  2091  0000C2  BE1E               	btfsc	?_Receive_available+1,7,c
  2092  0000C4  D09D               	goto	l2691
  2093  0000C6  501E               	movf	?_Receive_available+1,w,c
  2094  0000C8  E11D               	bnz	l2667
  2095  0000CA  0E05               	movlw	5
  2096  0000CC  5C1D               	subwf	?_Receive_available,w,c
  2097  0000CE  B0D8               	btfsc	status,0,c
  2098  0000D0  D019               	goto	l2667
  2099  0000D2  D096               	goto	l2691
  2100  0000D4                     l2659:
  2101                           
  2102                           ;FastTransfer.c: 148: alignErrorCounter++;
  2103  0000D4  4A26               	infsnz	_alignErrorCounter,f,c
  2104  0000D6  2A27               	incf	_alignErrorCounter+1,f,c
  2105                           
  2106                           ;FastTransfer.c: 149: if (serial_available() < 5)
  2107  0000D8  D801               	call	u2828
  2108  0000DA  D00A               	goto	u2829
  2109  0000DC                     u2828:
  2110  0000DC  0005               	push	
  2111  0000DE  6EFA               	movwf	pclath,c
  2112  0000E0  5030               	movf	_serial_available,w,c
  2113  0000E2  6EFD               	movwf	tosl,c
  2114  0000E4  5031               	movf	_serial_available+1,w,c
  2115  0000E6  6EFE               	movwf	tosh,c
  2116  0000E8  50F8               	movf	tblptru,w,c
  2117  0000EA  6EFF               	movwf	tosu,c
  2118  0000EC  50FA               	movf	pclath,w,c
  2119  0000EE  0012               	return		;indir
  2120  0000F0                     u2829:
  2121  0000F0  BE1E               	btfsc	?_Receive_available+1,7,c
  2122  0000F2  D006               	goto	l2663
  2123  0000F4  501E               	movf	?_Receive_available+1,w,c
  2124  0000F6  E106               	bnz	l2667
  2125  0000F8  0E05               	movlw	5
  2126  0000FA  5C1D               	subwf	?_Receive_available,w,c
  2127  0000FC  B0D8               	btfsc	status,0,c
  2128  0000FE  D002               	goto	l2667
  2129  000100                     l2663:
  2130                           
  2131                           ;FastTransfer.c: 150: return 0;
  2132  000100  0E00               	movlw	0
  2133  000102  0012               	return	
  2134  000104                     l2667:
  2135  000104  D801               	call	u2848
  2136  000106  D00A               	goto	u2849
  2137  000108                     u2848:
  2138  000108  0005               	push	
  2139  00010A  6EFA               	movwf	pclath,c
  2140  00010C  5034               	movf	_serial_read,w,c
  2141  00010E  6EFD               	movwf	tosl,c
  2142  000110  5035               	movf	_serial_read+1,w,c
  2143  000112  6EFE               	movwf	tosh,c
  2144  000114  50F8               	movf	tblptru,w,c
  2145  000116  6EFF               	movwf	tosu,c
  2146  000118  50FA               	movf	pclath,w,c
  2147  00011A  0012               	return		;indir
  2148  00011C                     u2849:
  2149  00011C  0A06               	xorlw	6
  2150  00011E  A4D8               	btfss	status,2,c
  2151  000120  D7D9               	goto	l2659
  2152                           
  2153                           ;FastTransfer.c: 151: }
  2154                           ;FastTransfer.c: 152: if (serial_read() == 0x85) {
  2155  000122  D801               	call	u2868
  2156  000124  D00A               	goto	u2869
  2157  000126                     u2868:
  2158  000126  0005               	push	
  2159  000128  6EFA               	movwf	pclath,c
  2160  00012A  5034               	movf	_serial_read,w,c
  2161  00012C  6EFD               	movwf	tosl,c
  2162  00012E  5035               	movf	_serial_read+1,w,c
  2163  000130  6EFE               	movwf	tosh,c
  2164  000132  50F8               	movf	tblptru,w,c
  2165  000134  6EFF               	movwf	tosu,c
  2166  000136  50FA               	movf	pclath,w,c
  2167  000138  0012               	return		;indir
  2168  00013A                     u2869:
  2169  00013A  0A85               	xorlw	133
  2170  00013C  A4D8               	btfss	status,2,c
  2171  00013E  D060               	goto	l2691
  2172                           
  2173                           ;FastTransfer.c: 154: rx_address = serial_read();
  2174  000140  D801               	call	u2888
  2175  000142  D00A               	goto	u2889
  2176  000144                     u2888:
  2177  000144  0005               	push	
  2178  000146  6EFA               	movwf	pclath,c
  2179  000148  5034               	movf	_serial_read,w,c
  2180  00014A  6EFD               	movwf	tosl,c
  2181  00014C  5035               	movf	_serial_read+1,w,c
  2182  00014E  6EFE               	movwf	tosh,c
  2183  000150  50F8               	movf	tblptru,w,c
  2184  000152  6EFF               	movwf	tosu,c
  2185  000154  50FA               	movf	pclath,w,c
  2186  000156  0012               	return		;indir
  2187  000158                     u2889:
  2188  000158  6E41               	movwf	_rx_address,c
  2189                           
  2190                           ;FastTransfer.c: 155: returnAddress = serial_read();
  2191  00015A  D801               	call	u2898
  2192  00015C  D00A               	goto	u2899
  2193  00015E                     u2898:
  2194  00015E  0005               	push	
  2195  000160  6EFA               	movwf	pclath,c
  2196  000162  5034               	movf	_serial_read,w,c
  2197  000164  6EFD               	movwf	tosl,c
  2198  000166  5035               	movf	_serial_read+1,w,c
  2199  000168  6EFE               	movwf	tosh,c
  2200  00016A  50F8               	movf	tblptru,w,c
  2201  00016C  6EFF               	movwf	tosu,c
  2202  00016E  50FA               	movf	pclath,w,c
  2203  000170  0012               	return		;indir
  2204  000172                     u2899:
  2205  000172  6E40               	movwf	_returnAddress,c
  2206                           
  2207                           ;FastTransfer.c: 156: rx_len = serial_read();
  2208  000174  D801               	call	u2908
  2209  000176  D00A               	goto	u2909
  2210  000178                     u2908:
  2211  000178  0005               	push	
  2212  00017A  6EFA               	movwf	pclath,c
  2213  00017C  5034               	movf	_serial_read,w,c
  2214  00017E  6EFD               	movwf	tosl,c
  2215  000180  5035               	movf	_serial_read+1,w,c
  2216  000182  6EFE               	movwf	tosh,c
  2217  000184  50F8               	movf	tblptru,w,c
  2218  000186  6EFF               	movwf	tosu,c
  2219  000188  50FA               	movf	pclath,w,c
  2220  00018A  0012               	return		;indir
  2221  00018C                     u2909:
  2222  00018C  6E43               	movwf	_rx_len,c
  2223                           
  2224                           ;FastTransfer.c: 158: if (rx_address != moduleAddress) {
  2225  00018E  503F               	movf	_moduleAddress,w,c
  2226  000190  1841               	xorwf	_rx_address,w,c
  2227  000192  B4D8               	btfsc	status,2,c
  2228  000194  D035               	goto	l2691
  2229                           
  2230                           ;FastTransfer.c: 159: addressErrorCounter++;
  2231  000196  0100               	movlb	0	; () banked
  2232  000198  4B64               	infsnz	_addressErrorCounter& (0+255),f,b
  2233  00019A  2B65               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;FastTransfer.c: 162: int u;
  2237                           ;FastTransfer.c: 163: for (u = 0; u <= (rx_len + 1); u++) {
  2238  00019C  0E00               	movlw	0
  2239  00019E  0100               	movlb	0	; () banked
  2240  0001A0  6F9B               	movwf	(receiveData@u+1)& (0+255),b
  2241  0001A2  0E00               	movlw	0
  2242  0001A4  6F9A               	movwf	receiveData@u& (0+255),b
  2243  0001A6  D00F               	goto	l2683
  2244  0001A8                     l2679:
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;FastTransfer.c: 164: serial_read();
  2248  0001A8  D801               	call	u2928
  2249  0001AA  D00A               	goto	l2681
  2250  0001AC                     u2928:
  2251  0001AC  0005               	push	
  2252  0001AE  6EFA               	movwf	pclath,c
  2253  0001B0  5034               	movf	_serial_read,w,c
  2254  0001B2  6EFD               	movwf	tosl,c
  2255  0001B4  5035               	movf	_serial_read+1,w,c
  2256  0001B6  6EFE               	movwf	tosh,c
  2257  0001B8  50F8               	movf	tblptru,w,c
  2258  0001BA  6EFF               	movwf	tosu,c
  2259  0001BC  50FA               	movf	pclath,w,c
  2260  0001BE  0012               	return		;indir
  2261  0001C0                     l2681:
  2262  0001C0  0100               	movlb	0	; () banked
  2263  0001C2  4B9A               	infsnz	receiveData@u& (0+255),f,b
  2264  0001C4  2B9B               	incf	(receiveData@u+1)& (0+255),f,b
  2265  0001C6                     l2683:
  2266                           
  2267                           ; BSR set to: 0
  2268  0001C6  5043               	movf	_rx_len,w,c
  2269  0001C8  0100               	movlb	0	; () banked
  2270  0001CA  6F8C               	movwf	??_receiveData& (0+255),b
  2271  0001CC  6B8D               	clrf	(??_receiveData+1)& (0+255),b
  2272  0001CE  0E01               	movlw	1
  2273  0001D0  0100               	movlb	0	; () banked
  2274  0001D2  278C               	addwf	??_receiveData& (0+255),f,b
  2275  0001D4  0E00               	movlw	0
  2276  0001D6  238D               	addwfc	(??_receiveData+1)& (0+255),f,b
  2277  0001D8  0100               	movlb	0	; () banked
  2278  0001DA  519A               	movf	receiveData@u& (0+255),w,b
  2279  0001DC  0100               	movlb	0	; () banked
  2280  0001DE  5D8C               	subwf	??_receiveData& (0+255),w,b
  2281  0001E0  0100               	movlb	0	; () banked
  2282  0001E2  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2283  0001E4  0A80               	xorlw	128
  2284  0001E6  0100               	movlb	0	; () banked
  2285  0001E8  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2286  0001EA  0100               	movlb	0	; () banked
  2287  0001EC  519B               	movf	(receiveData@u+1)& (0+255),w,b
  2288  0001EE  0A80               	xorlw	128
  2289  0001F0  0100               	movlb	0	; () banked
  2290  0001F2  598E               	subwfb	(??_receiveData+2)& (0+255),w,b
  2291  0001F4  B0D8               	btfsc	status,0,c
  2292  0001F6  D7D8               	goto	l2679
  2293                           
  2294                           ; BSR set to: 0
  2295                           ;FastTransfer.c: 165: }
  2296                           ;FastTransfer.c: 166: rx_len = 0;
  2297                           
  2298                           ; BSR set to: 0
  2299  0001F8  0E00               	movlw	0
  2300  0001FA  6E43               	movwf	_rx_len,c
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;FastTransfer.c: 167: return 0;
  2304  0001FC  0E00               	movlw	0
  2305                           
  2306                           ; BSR set to: 0
  2307  0001FE  0012               	return	
  2308  000200                     l2691:
  2309                           
  2310                           ;FastTransfer.c: 168: }
  2311                           ;FastTransfer.c: 170: }
  2312                           ;FastTransfer.c: 171: }
  2313                           ;FastTransfer.c: 172: }
  2314                           ;FastTransfer.c: 175: if (rx_len != 0) {
  2315  000200  5043               	movf	_rx_len,w,c
  2316  000202  B4D8               	btfsc	status,2,c
  2317  000204  D2A2               	goto	l2815
  2318                           
  2319                           ;FastTransfer.c: 178: if (rx_array_inx == 0) {
  2320  000206  5042               	movf	_rx_array_inx,w,c
  2321  000208  A4D8               	btfss	status,2,c
  2322  00020A  D043               	goto	l2715
  2323  00020C                     l2697:
  2324  00020C  D801               	call	u2968
  2325  00020E  D00A               	goto	u2969
  2326  000210                     u2968:
  2327  000210  0005               	push	
  2328  000212  6EFA               	movwf	pclath,c
  2329  000214  5030               	movf	_serial_available,w,c
  2330  000216  6EFD               	movwf	tosl,c
  2331  000218  5031               	movf	_serial_available+1,w,c
  2332  00021A  6EFE               	movwf	tosh,c
  2333  00021C  50F8               	movf	tblptru,w,c
  2334  00021E  6EFF               	movwf	tosu,c
  2335  000220  50FA               	movf	pclath,w,c
  2336  000222  0012               	return		;indir
  2337  000224                     u2969:
  2338  000224  BE1E               	btfsc	?_Receive_available+1,7,c
  2339  000226  D7F2               	goto	l2697
  2340  000228  501E               	movf	?_Receive_available+1,w,c
  2341  00022A  E103               	bnz	l2699
  2342  00022C  041D               	decf	?_Receive_available,w,c
  2343  00022E  A0D8               	btfss	status,0,c
  2344  000230  D7ED               	goto	l2697
  2345  000232                     l2699:
  2346                           
  2347                           ;FastTransfer.c: 180: if (255 == serial_peek()) {
  2348  000232  D801               	call	u2988
  2349  000234  D00A               	goto	u2989
  2350  000236                     u2988:
  2351  000236  0005               	push	
  2352  000238  6EFA               	movwf	pclath,c
  2353  00023A  5032               	movf	_serial_peek,w,c
  2354  00023C  6EFD               	movwf	tosl,c
  2355  00023E  5033               	movf	_serial_peek+1,w,c
  2356  000240  6EFE               	movwf	tosh,c
  2357  000242  50F8               	movf	tblptru,w,c
  2358  000244  6EFF               	movwf	tosu,c
  2359  000246  50FA               	movf	pclath,w,c
  2360  000248  0012               	return		;indir
  2361  00024A                     u2989:
  2362  00024A  0AFF               	xorlw	255
  2363  00024C  A4D8               	btfss	status,2,c
  2364  00024E  D021               	goto	l2715
  2365                           
  2366                           ;FastTransfer.c: 181: CRCcheck();
  2367  000250  EC61  F004         	call	_CRCcheck	;wreg free
  2368                           
  2369                           ;FastTransfer.c: 182: rx_len = 0;
  2370  000254  0E00               	movlw	0
  2371  000256  6E43               	movwf	_rx_len,c
  2372                           
  2373                           ;FastTransfer.c: 183: rx_array_inx = 0;
  2374  000258  0E00               	movlw	0
  2375  00025A  6E42               	movwf	_rx_array_inx,c
  2376                           
  2377                           ;FastTransfer.c: 184: return 0;
  2378  00025C  0E00               	movlw	0
  2379  00025E  0012               	return	
  2380  000260                     l2711:
  2381                           
  2382                           ;FastTransfer.c: 190: rx_buffer[rx_array_inx++] = serial_read();
  2383  000260  D801               	call	u3008
  2384  000262  D00A               	goto	u3009
  2385  000264                     u3008:
  2386  000264  0005               	push	
  2387  000266  6EFA               	movwf	pclath,c
  2388  000268  5034               	movf	_serial_read,w,c
  2389  00026A  6EFD               	movwf	tosl,c
  2390  00026C  5035               	movf	_serial_read+1,w,c
  2391  00026E  6EFE               	movwf	tosh,c
  2392  000270  50F8               	movf	tblptru,w,c
  2393  000272  6EFF               	movwf	tosu,c
  2394  000274  50FA               	movf	pclath,w,c
  2395  000276  0012               	return		;indir
  2396  000278                     u3009:
  2397  000278  0100               	movlb	0	; () banked
  2398  00027A  6F8C               	movwf	??_receiveData& (0+255),b
  2399  00027C  5042               	movf	_rx_array_inx,w,c
  2400  00027E  0D01               	mullw	1
  2401  000280  0E00               	movlw	low _rx_buffer
  2402  000282  24F3               	addwf	prodl,w,c
  2403  000284  6ED9               	movwf	fsr2l,c
  2404  000286  0E02               	movlw	high _rx_buffer
  2405  000288  20F4               	addwfc	prodh,w,c
  2406  00028A  6EDA               	movwf	fsr2h,c
  2407  00028C  C08C  FFDF         	movff	??_receiveData,indf2
  2408                           
  2409                           ; BSR set to: 0
  2410  000290  2A42               	incf	_rx_array_inx,f,c
  2411  000292                     l2715:
  2412  000292  D801               	call	u3018
  2413  000294  D00A               	goto	u3019
  2414  000296                     u3018:
  2415  000296  0005               	push	
  2416  000298  6EFA               	movwf	pclath,c
  2417  00029A  5030               	movf	_serial_available,w,c
  2418  00029C  6EFD               	movwf	tosl,c
  2419  00029E  5031               	movf	_serial_available+1,w,c
  2420  0002A0  6EFE               	movwf	tosh,c
  2421  0002A2  50F8               	movf	tblptru,w,c
  2422  0002A4  6EFF               	movwf	tosu,c
  2423  0002A6  50FA               	movf	pclath,w,c
  2424  0002A8  0012               	return		;indir
  2425  0002AA                     u3019:
  2426  0002AA  501D               	movf	?_Receive_available,w,c
  2427  0002AC  101E               	iorwf	?_Receive_available+1,w,c
  2428  0002AE  B4D8               	btfsc	status,2,c
  2429  0002B0  D004               	goto	l2719
  2430  0002B2  5042               	movf	_rx_array_inx,w,c
  2431  0002B4  5C43               	subwf	_rx_len,w,c
  2432  0002B6  B0D8               	btfsc	status,0,c
  2433  0002B8  D7D3               	goto	l2711
  2434  0002BA                     l2719:
  2435                           
  2436                           ;FastTransfer.c: 191: }
  2437                           ;FastTransfer.c: 193: if (rx_len == (rx_array_inx - 1)) {
  2438  0002BA  5043               	movf	_rx_len,w,c
  2439  0002BC  0100               	movlb	0	; () banked
  2440  0002BE  6F8C               	movwf	??_receiveData& (0+255),b
  2441  0002C0  6B8D               	clrf	(??_receiveData+1)& (0+255),b
  2442  0002C2  0EFF               	movlw	255
  2443  0002C4  0100               	movlb	0	; () banked
  2444  0002C6  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2445  0002C8  0EFF               	movlw	255
  2446  0002CA  0100               	movlb	0	; () banked
  2447  0002CC  6F8F               	movwf	(??_receiveData+3)& (0+255),b
  2448  0002CE  5042               	movf	_rx_array_inx,w,c
  2449  0002D0  0100               	movlb	0	; () banked
  2450  0002D2  6F90               	movwf	(??_receiveData+4)& (0+255),b
  2451  0002D4  6B91               	clrf	(??_receiveData+5)& (0+255),b
  2452  0002D6  0100               	movlb	0	; () banked
  2453  0002D8  518E               	movf	(??_receiveData+2)& (0+255),w,b
  2454  0002DA  0100               	movlb	0	; () banked
  2455  0002DC  2790               	addwf	(??_receiveData+4)& (0+255),f,b
  2456  0002DE  0100               	movlb	0	; () banked
  2457  0002E0  518F               	movf	(??_receiveData+3)& (0+255),w,b
  2458  0002E2  0100               	movlb	0	; () banked
  2459  0002E4  2391               	addwfc	(??_receiveData+5)& (0+255),f,b
  2460  0002E6  0100               	movlb	0	; () banked
  2461  0002E8  518C               	movf	??_receiveData& (0+255),w,b
  2462  0002EA  0100               	movlb	0	; () banked
  2463  0002EC  1990               	xorwf	(??_receiveData+4)& (0+255),w,b
  2464  0002EE  E105               	bnz	u3041
  2465  0002F0  0100               	movlb	0	; () banked
  2466  0002F2  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2467  0002F4  0100               	movlb	0	; () banked
  2468  0002F6  1991               	xorwf	(??_receiveData+5)& (0+255),w,b
  2469  0002F8  A4D8               	btfss	status,2,c
  2470  0002FA                     u3041:
  2471  0002FA  D227               	goto	l2815
  2472                           
  2473                           ; BSR set to: 0
  2474                           ;FastTransfer.c: 196: calc_CS = CRC8(rx_buffer, rx_len);
  2475  0002FC  0E00               	movlw	low _rx_buffer
  2476  0002FE  6E1B               	movwf	CRC8@data,c
  2477  000300  0E02               	movlw	high _rx_buffer
  2478  000302  6E1C               	movwf	CRC8@data+1,c
  2479  000304  C043  F01D         	movff	_rx_len,CRC8@len
  2480  000308  EC4C  F00A         	call	_CRC8	;wreg free
  2481  00030C  6E3D               	movwf	_calc_CS,c
  2482                           
  2483                           ;FastTransfer.c: 200: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2484  00030E  0EFF               	movlw	255
  2485  000310  0100               	movlb	0	; () banked
  2486  000312  6F8C               	movwf	??_receiveData& (0+255),b
  2487  000314  0EFF               	movlw	255
  2488  000316  0100               	movlb	0	; () banked
  2489  000318  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  2490  00031A  5042               	movf	_rx_array_inx,w,c
  2491  00031C  0100               	movlb	0	; () banked
  2492  00031E  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2493  000320  6B8F               	clrf	(??_receiveData+3)& (0+255),b
  2494  000322  0100               	movlb	0	; () banked
  2495  000324  518C               	movf	??_receiveData& (0+255),w,b
  2496  000326  0100               	movlb	0	; () banked
  2497  000328  278E               	addwf	(??_receiveData+2)& (0+255),f,b
  2498  00032A  0100               	movlb	0	; () banked
  2499  00032C  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2500  00032E  0100               	movlb	0	; () banked
  2501  000330  238F               	addwfc	(??_receiveData+3)& (0+255),f,b
  2502  000332  0E00               	movlw	low _rx_buffer
  2503  000334  0100               	movlb	0	; () banked
  2504  000336  258E               	addwf	(??_receiveData+2)& (0+255),w,b
  2505  000338  6ED9               	movwf	fsr2l,c
  2506  00033A  0E02               	movlw	high _rx_buffer
  2507  00033C  0100               	movlb	0	; () banked
  2508  00033E  218F               	addwfc	(??_receiveData+3)& (0+255),w,b
  2509  000340  6EDA               	movwf	fsr2h,c
  2510  000342  503D               	movf	_calc_CS,w,c
  2511  000344  18DE               	xorwf	postinc2,w,c
  2512  000346  A4D8               	btfss	status,2,c
  2513  000348  D139               	goto	l2777
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;FastTransfer.c: 203: int r;
  2517                           ;FastTransfer.c: 204: for (r = 0; r < rx_len; r = r + 3) {
  2518  00034A  0E00               	movlw	0
  2519  00034C  0100               	movlb	0	; () banked
  2520  00034E  6F9D               	movwf	(receiveData@r+1)& (0+255),b
  2521  000350  0E00               	movlw	0
  2522  000352  6F9C               	movwf	receiveData@r& (0+255),b
  2523  000354  D05A               	goto	l2737
  2524  000356                     l2727:
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;FastTransfer.c: 205: if (rx_buffer[r] < maxDataAddress) {
  2528  000356  0E00               	movlw	low _rx_buffer
  2529  000358  0100               	movlb	0	; () banked
  2530  00035A  259C               	addwf	receiveData@r& (0+255),w,b
  2531  00035C  6ED9               	movwf	fsr2l,c
  2532  00035E  0E02               	movlw	high _rx_buffer
  2533  000360  0100               	movlb	0	; () banked
  2534  000362  219D               	addwfc	(receiveData@r+1)& (0+255),w,b
  2535  000364  6EDA               	movwf	fsr2h,c
  2536  000366  503E               	movf	_maxDataAddress,w,c
  2537  000368  5CDE               	subwf	postinc2,w,c
  2538  00036A  B0D8               	btfsc	status,0,c
  2539  00036C  D041               	goto	l2733
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;FastTransfer.c: 206: group.parts[0] = rx_buffer[r + 1];
  2543  00036E  0E01               	movlw	1
  2544  000370  0100               	movlb	0	; () banked
  2545  000372  259C               	addwf	receiveData@r& (0+255),w,b
  2546  000374  0100               	movlb	0	; () banked
  2547  000376  6F8C               	movwf	??_receiveData& (0+255),b
  2548  000378  0E00               	movlw	0
  2549  00037A  0100               	movlb	0	; () banked
  2550  00037C  219D               	addwfc	(receiveData@r+1)& (0+255),w,b
  2551  00037E  0100               	movlb	0	; () banked
  2552  000380  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  2553  000382  0E00               	movlw	low _rx_buffer
  2554  000384  0100               	movlb	0	; () banked
  2555  000386  258C               	addwf	??_receiveData& (0+255),w,b
  2556  000388  6ED9               	movwf	fsr2l,c
  2557  00038A  0E02               	movlw	high _rx_buffer
  2558  00038C  0100               	movlb	0	; () banked
  2559  00038E  218D               	addwfc	(??_receiveData+1)& (0+255),w,b
  2560  000390  6EDA               	movwf	fsr2h,c
  2561  000392  50DF               	movf	indf2,w,c
  2562  000394  6E2A               	movwf	_group,c
  2563                           
  2564                           ;FastTransfer.c: 207: group.parts[1] = rx_buffer[r + 2];
  2565  000396  0E02               	movlw	2
  2566  000398  0100               	movlb	0	; () banked
  2567  00039A  259C               	addwf	receiveData@r& (0+255),w,b
  2568  00039C  0100               	movlb	0	; () banked
  2569  00039E  6F8C               	movwf	??_receiveData& (0+255),b
  2570  0003A0  0E00               	movlw	0
  2571  0003A2  0100               	movlb	0	; () banked
  2572  0003A4  219D               	addwfc	(receiveData@r+1)& (0+255),w,b
  2573  0003A6  0100               	movlb	0	; () banked
  2574  0003A8  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  2575  0003AA  0E00               	movlw	low _rx_buffer
  2576  0003AC  0100               	movlb	0	; () banked
  2577  0003AE  258C               	addwf	??_receiveData& (0+255),w,b
  2578  0003B0  6ED9               	movwf	fsr2l,c
  2579  0003B2  0E02               	movlw	high _rx_buffer
  2580  0003B4  0100               	movlb	0	; () banked
  2581  0003B6  218D               	addwfc	(??_receiveData+1)& (0+255),w,b
  2582  0003B8  6EDA               	movwf	fsr2h,c
  2583  0003BA  50DF               	movf	indf2,w,c
  2584  0003BC  6E2B               	movwf	_group+1,c
  2585                           
  2586                           ; BSR set to: 0
  2587                           ;FastTransfer.c: 208: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2588  0003BE  0E00               	movlw	low _rx_buffer
  2589  0003C0  0100               	movlb	0	; () banked
  2590  0003C2  259C               	addwf	receiveData@r& (0+255),w,b
  2591  0003C4  6ED9               	movwf	fsr2l,c
  2592  0003C6  0E02               	movlw	high _rx_buffer
  2593  0003C8  0100               	movlb	0	; () banked
  2594  0003CA  219D               	addwfc	(receiveData@r+1)& (0+255),w,b
  2595  0003CC  6EDA               	movwf	fsr2h,c
  2596  0003CE  50DF               	movf	indf2,w,c
  2597  0003D0  0100               	movlb	0	; () banked
  2598  0003D2  6F8C               	movwf	??_receiveData& (0+255),b
  2599  0003D4  0100               	movlb	0	; () banked
  2600  0003D6  518C               	movf	??_receiveData& (0+255),w,b
  2601  0003D8  0D02               	mullw	2
  2602  0003DA  50F3               	movf	prodl,w,c
  2603  0003DC  242C               	addwf	_receiveArrayAddress,w,c
  2604  0003DE  6ED9               	movwf	fsr2l,c
  2605  0003E0  50F4               	movf	prodh,w,c
  2606  0003E2  202D               	addwfc	_receiveArrayAddress+1,w,c
  2607  0003E4  6EDA               	movwf	fsr2h,c
  2608  0003E6  C02A  FFDE         	movff	_group,postinc2
  2609  0003EA  C02B  FFDD         	movff	_group+1,postdec2
  2610                           
  2611                           ;FastTransfer.c: 209: } else {
  2612  0003EE  D003               	goto	l2735
  2613  0003F0                     l2733:
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;FastTransfer.c: 210: dataAdressErrorCounter++;
  2617  0003F0  0100               	movlb	0	; () banked
  2618  0003F2  4B66               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2619  0003F4  2B67               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2620  0003F6                     l2735:
  2621                           
  2622                           ; BSR set to: 0
  2623  0003F6  0E03               	movlw	3
  2624  0003F8  0100               	movlb	0	; () banked
  2625  0003FA  259C               	addwf	receiveData@r& (0+255),w,b
  2626  0003FC  0100               	movlb	0	; () banked
  2627  0003FE  6F9C               	movwf	receiveData@r& (0+255),b
  2628  000400  0E00               	movlw	0
  2629  000402  0100               	movlb	0	; () banked
  2630  000404  219D               	addwfc	(receiveData@r+1)& (0+255),w,b
  2631  000406  0100               	movlb	0	; () banked
  2632  000408  6F9D               	movwf	(receiveData@r+1)& (0+255),b
  2633  00040A                     l2737:
  2634                           
  2635                           ; BSR set to: 0
  2636  00040A  5043               	movf	_rx_len,w,c
  2637  00040C  0100               	movlb	0	; () banked
  2638  00040E  6F8C               	movwf	??_receiveData& (0+255),b
  2639  000410  6B8D               	clrf	(??_receiveData+1)& (0+255),b
  2640  000412  0100               	movlb	0	; () banked
  2641  000414  518C               	movf	??_receiveData& (0+255),w,b
  2642  000416  0100               	movlb	0	; () banked
  2643  000418  5D9C               	subwf	receiveData@r& (0+255),w,b
  2644  00041A  0100               	movlb	0	; () banked
  2645  00041C  519D               	movf	(receiveData@r+1)& (0+255),w,b
  2646  00041E  0A80               	xorlw	128
  2647  000420  0100               	movlb	0	; () banked
  2648  000422  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2649  000424  0100               	movlb	0	; () banked
  2650  000426  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2651  000428  0A80               	xorlw	128
  2652  00042A  0100               	movlb	0	; () banked
  2653  00042C  598E               	subwfb	(??_receiveData+2)& (0+255),w,b
  2654  00042E  A0D8               	btfss	status,0,c
  2655  000430  D792               	goto	l2727
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;FastTransfer.c: 211: }
  2659                           ;FastTransfer.c: 212: }
  2660                           ;FastTransfer.c: 215: if (AKNAKsend) {
  2661                           
  2662                           ; BSR set to: 0
  2663  000432  503A               	movf	_AKNAKsend,w,c
  2664  000434  B4D8               	btfsc	status,2,c
  2665  000436  D0BC               	goto	l2767
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;FastTransfer.c: 216: unsigned char holder[3];
  2669                           ;FastTransfer.c: 217: holder[0] = 255;
  2670  000438  0100               	movlb	0	; () banked
  2671  00043A  6992               	setf	receiveData@holder& (0+255),b
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;FastTransfer.c: 218: holder[1] = 1;
  2675  00043C  0E01               	movlw	1
  2676  00043E  0100               	movlb	0	; () banked
  2677  000440  6F93               	movwf	(receiveData@holder+1)& (0+255),b
  2678                           
  2679                           ; BSR set to: 0
  2680                           ;FastTransfer.c: 219: holder[2] = rx_buffer[rx_array_inx - 1];
  2681  000442  0EFF               	movlw	255
  2682  000444  0100               	movlb	0	; () banked
  2683  000446  6F8C               	movwf	??_receiveData& (0+255),b
  2684  000448  0EFF               	movlw	255
  2685  00044A  0100               	movlb	0	; () banked
  2686  00044C  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  2687  00044E  5042               	movf	_rx_array_inx,w,c
  2688  000450  0100               	movlb	0	; () banked
  2689  000452  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2690  000454  6B8F               	clrf	(??_receiveData+3)& (0+255),b
  2691  000456  0100               	movlb	0	; () banked
  2692  000458  518C               	movf	??_receiveData& (0+255),w,b
  2693  00045A  0100               	movlb	0	; () banked
  2694  00045C  278E               	addwf	(??_receiveData+2)& (0+255),f,b
  2695  00045E  0100               	movlb	0	; () banked
  2696  000460  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2697  000462  0100               	movlb	0	; () banked
  2698  000464  238F               	addwfc	(??_receiveData+3)& (0+255),f,b
  2699  000466  0E00               	movlw	low _rx_buffer
  2700  000468  0100               	movlb	0	; () banked
  2701  00046A  258E               	addwf	(??_receiveData+2)& (0+255),w,b
  2702  00046C  6ED9               	movwf	fsr2l,c
  2703  00046E  0E02               	movlw	high _rx_buffer
  2704  000470  0100               	movlb	0	; () banked
  2705  000472  218F               	addwfc	(??_receiveData+3)& (0+255),w,b
  2706  000474  6EDA               	movwf	fsr2h,c
  2707  000476  50DF               	movf	indf2,w,c
  2708  000478  0100               	movlb	0	; () banked
  2709  00047A  6F94               	movwf	(receiveData@holder+2)& (0+255),b
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;FastTransfer.c: 220: unsigned char crcHolder = CRC8(holder, 3);
  2713  00047C  0E92               	movlw	low receiveData@holder
  2714  00047E  6E1B               	movwf	CRC8@data,c
  2715  000480  0E00               	movlw	high receiveData@holder
  2716  000482  6E1C               	movwf	CRC8@data+1,c
  2717  000484  0E03               	movlw	3
  2718  000486  6E1D               	movwf	CRC8@len,c
  2719  000488  EC4C  F00A         	call	_CRC8	;wreg free
  2720  00048C  0100               	movlb	0	; () banked
  2721  00048E  6F98               	movwf	receiveData@crcHolder& (0+255),b
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;FastTransfer.c: 221: serial_write(0x06);
  2725  000490  D801               	call	u3098
  2726  000492  D00B               	goto	l2751
  2727  000494                     u3098:
  2728  000494  0005               	push	
  2729  000496  6EFA               	movwf	pclath,c
  2730  000498  5036               	movf	_serial_write,w,c
  2731  00049A  6EFD               	movwf	tosl,c
  2732  00049C  5037               	movf	_serial_write+1,w,c
  2733  00049E  6EFE               	movwf	tosh,c
  2734  0004A0  50F8               	movf	tblptru,w,c
  2735  0004A2  6EFF               	movwf	tosu,c
  2736  0004A4  50FA               	movf	pclath,w,c
  2737  0004A6  0E06               	movlw	6
  2738  0004A8  0012               	return		;indir
  2739  0004AA                     l2751:
  2740                           
  2741                           ;FastTransfer.c: 222: serial_write(0x85);
  2742  0004AA  D801               	call	u3108
  2743  0004AC  D00B               	goto	l2753
  2744  0004AE                     u3108:
  2745  0004AE  0005               	push	
  2746  0004B0  6EFA               	movwf	pclath,c
  2747  0004B2  5036               	movf	_serial_write,w,c
  2748  0004B4  6EFD               	movwf	tosl,c
  2749  0004B6  5037               	movf	_serial_write+1,w,c
  2750  0004B8  6EFE               	movwf	tosh,c
  2751  0004BA  50F8               	movf	tblptru,w,c
  2752  0004BC  6EFF               	movwf	tosu,c
  2753  0004BE  50FA               	movf	pclath,w,c
  2754  0004C0  0E85               	movlw	133
  2755  0004C2  0012               	return		;indir
  2756  0004C4                     l2753:
  2757                           
  2758                           ;FastTransfer.c: 223: serial_write(returnAddress);
  2759  0004C4  D801               	call	u3118
  2760  0004C6  D00B               	goto	l2755
  2761  0004C8                     u3118:
  2762  0004C8  0005               	push	
  2763  0004CA  6EFA               	movwf	pclath,c
  2764  0004CC  5036               	movf	_serial_write,w,c
  2765  0004CE  6EFD               	movwf	tosl,c
  2766  0004D0  5037               	movf	_serial_write+1,w,c
  2767  0004D2  6EFE               	movwf	tosh,c
  2768  0004D4  50F8               	movf	tblptru,w,c
  2769  0004D6  6EFF               	movwf	tosu,c
  2770  0004D8  50FA               	movf	pclath,w,c
  2771  0004DA  5040               	movf	_returnAddress,w,c
  2772  0004DC  0012               	return		;indir
  2773  0004DE                     l2755:
  2774                           
  2775                           ;FastTransfer.c: 224: serial_write(moduleAddress);
  2776  0004DE  D801               	call	u3128
  2777  0004E0  D00B               	goto	l2757
  2778  0004E2                     u3128:
  2779  0004E2  0005               	push	
  2780  0004E4  6EFA               	movwf	pclath,c
  2781  0004E6  5036               	movf	_serial_write,w,c
  2782  0004E8  6EFD               	movwf	tosl,c
  2783  0004EA  5037               	movf	_serial_write+1,w,c
  2784  0004EC  6EFE               	movwf	tosh,c
  2785  0004EE  50F8               	movf	tblptru,w,c
  2786  0004F0  6EFF               	movwf	tosu,c
  2787  0004F2  50FA               	movf	pclath,w,c
  2788  0004F4  503F               	movf	_moduleAddress,w,c
  2789  0004F6  0012               	return		;indir
  2790  0004F8                     l2757:
  2791                           
  2792                           ;FastTransfer.c: 225: serial_write(3);
  2793  0004F8  D801               	call	u3138
  2794  0004FA  D00B               	goto	l2759
  2795  0004FC                     u3138:
  2796  0004FC  0005               	push	
  2797  0004FE  6EFA               	movwf	pclath,c
  2798  000500  5036               	movf	_serial_write,w,c
  2799  000502  6EFD               	movwf	tosl,c
  2800  000504  5037               	movf	_serial_write+1,w,c
  2801  000506  6EFE               	movwf	tosh,c
  2802  000508  50F8               	movf	tblptru,w,c
  2803  00050A  6EFF               	movwf	tosu,c
  2804  00050C  50FA               	movf	pclath,w,c
  2805  00050E  0E03               	movlw	3
  2806  000510  0012               	return		;indir
  2807  000512                     l2759:
  2808                           
  2809                           ;FastTransfer.c: 226: serial_write(255);
  2810  000512  D801               	call	u3148
  2811  000514  D00B               	goto	l2761
  2812  000516                     u3148:
  2813  000516  0005               	push	
  2814  000518  6EFA               	movwf	pclath,c
  2815  00051A  5036               	movf	_serial_write,w,c
  2816  00051C  6EFD               	movwf	tosl,c
  2817  00051E  5037               	movf	_serial_write+1,w,c
  2818  000520  6EFE               	movwf	tosh,c
  2819  000522  50F8               	movf	tblptru,w,c
  2820  000524  6EFF               	movwf	tosu,c
  2821  000526  50FA               	movf	pclath,w,c
  2822  000528  0EFF               	movlw	255
  2823  00052A  0012               	return		;indir
  2824  00052C                     l2761:
  2825                           
  2826                           ;FastTransfer.c: 227: serial_write(1);
  2827  00052C  D801               	call	u3158
  2828  00052E  D00B               	goto	l2763
  2829  000530                     u3158:
  2830  000530  0005               	push	
  2831  000532  6EFA               	movwf	pclath,c
  2832  000534  5036               	movf	_serial_write,w,c
  2833  000536  6EFD               	movwf	tosl,c
  2834  000538  5037               	movf	_serial_write+1,w,c
  2835  00053A  6EFE               	movwf	tosh,c
  2836  00053C  50F8               	movf	tblptru,w,c
  2837  00053E  6EFF               	movwf	tosu,c
  2838  000540  50FA               	movf	pclath,w,c
  2839  000542  0E01               	movlw	1
  2840  000544  0012               	return		;indir
  2841  000546                     l2763:
  2842                           
  2843                           ;FastTransfer.c: 228: serial_write(rx_buffer[rx_array_inx - 1]);
  2844  000546  D801               	call	u3168
  2845  000548  D025               	goto	l2765
  2846  00054A                     u3168:
  2847  00054A  0005               	push	
  2848  00054C  6EFA               	movwf	pclath,c
  2849  00054E  5036               	movf	_serial_write,w,c
  2850  000550  6EFD               	movwf	tosl,c
  2851  000552  5037               	movf	_serial_write+1,w,c
  2852  000554  6EFE               	movwf	tosh,c
  2853  000556  50F8               	movf	tblptru,w,c
  2854  000558  6EFF               	movwf	tosu,c
  2855  00055A  50FA               	movf	pclath,w,c
  2856  00055C  0EFF               	movlw	255
  2857  00055E  0100               	movlb	0	; () banked
  2858  000560  6F8C               	movwf	??_receiveData& (0+255),b
  2859  000562  0EFF               	movlw	255
  2860  000564  0100               	movlb	0	; () banked
  2861  000566  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  2862  000568  5042               	movf	_rx_array_inx,w,c
  2863  00056A  0100               	movlb	0	; () banked
  2864  00056C  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2865  00056E  6B8F               	clrf	(??_receiveData+3)& (0+255),b
  2866  000570  0100               	movlb	0	; () banked
  2867  000572  518C               	movf	??_receiveData& (0+255),w,b
  2868  000574  0100               	movlb	0	; () banked
  2869  000576  278E               	addwf	(??_receiveData+2)& (0+255),f,b
  2870  000578  0100               	movlb	0	; () banked
  2871  00057A  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2872  00057C  0100               	movlb	0	; () banked
  2873  00057E  238F               	addwfc	(??_receiveData+3)& (0+255),f,b
  2874  000580  0E00               	movlw	low _rx_buffer
  2875  000582  0100               	movlb	0	; () banked
  2876  000584  258E               	addwf	(??_receiveData+2)& (0+255),w,b
  2877  000586  6ED9               	movwf	fsr2l,c
  2878  000588  0E02               	movlw	high _rx_buffer
  2879  00058A  0100               	movlb	0	; () banked
  2880  00058C  218F               	addwfc	(??_receiveData+3)& (0+255),w,b
  2881  00058E  6EDA               	movwf	fsr2h,c
  2882  000590  50DF               	movf	indf2,w,c
  2883  000592  0012               	return		;indir
  2884  000594                     l2765:
  2885                           
  2886                           ;FastTransfer.c: 229: serial_write(crcHolder);
  2887  000594  D801               	call	u3178
  2888  000596  D00C               	goto	l2767
  2889  000598                     u3178:
  2890  000598  0005               	push	
  2891  00059A  6EFA               	movwf	pclath,c
  2892  00059C  5036               	movf	_serial_write,w,c
  2893  00059E  6EFD               	movwf	tosl,c
  2894  0005A0  5037               	movf	_serial_write+1,w,c
  2895  0005A2  6EFE               	movwf	tosh,c
  2896  0005A4  50F8               	movf	tblptru,w,c
  2897  0005A6  6EFF               	movwf	tosu,c
  2898  0005A8  50FA               	movf	pclath,w,c
  2899  0005AA  0100               	movlb	0	; () banked
  2900  0005AC  5198               	movf	receiveData@crcHolder& (0+255),w,b
  2901  0005AE  0012               	return		;indir
  2902  0005B0                     l2767:
  2903                           
  2904                           ;FastTransfer.c: 230: }
  2905                           ;FastTransfer.c: 234: rx_len = 0;
  2906  0005B0  0E00               	movlw	0
  2907  0005B2  6E43               	movwf	_rx_len,c
  2908                           
  2909                           ;FastTransfer.c: 235: rx_array_inx = 0;
  2910  0005B4  0E00               	movlw	0
  2911  0005B6  6E42               	movwf	_rx_array_inx,c
  2912                           
  2913                           ;FastTransfer.c: 236: return 1;
  2914  0005B8  0E01               	movlw	1
  2915  0005BA  0012               	return	
  2916  0005BC                     l2777:
  2917                           
  2918                           ;FastTransfer.c: 238: crcErrorCounter++;
  2919  0005BC  4A28               	infsnz	_crcErrorCounter,f,c
  2920  0005BE  2A29               	incf	_crcErrorCounter+1,f,c
  2921                           
  2922                           ;FastTransfer.c: 240: if (AKNAKsend) {
  2923  0005C0  503A               	movf	_AKNAKsend,w,c
  2924  0005C2  B4D8               	btfsc	status,2,c
  2925  0005C4  D0BC               	goto	l2807
  2926                           
  2927                           ;FastTransfer.c: 241: unsigned char holder[3];
  2928                           ;FastTransfer.c: 242: holder[0] = 255;
  2929  0005C6  0100               	movlb	0	; () banked
  2930  0005C8  6995               	setf	receiveData@holder_329& (0+255),b
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;FastTransfer.c: 243: holder[1] = 2;
  2934  0005CA  0E02               	movlw	2
  2935  0005CC  0100               	movlb	0	; () banked
  2936  0005CE  6F96               	movwf	(receiveData@holder_329+1)& (0+255),b
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;FastTransfer.c: 244: holder[2] = rx_buffer[rx_array_inx - 1];
  2940  0005D0  0EFF               	movlw	255
  2941  0005D2  0100               	movlb	0	; () banked
  2942  0005D4  6F8C               	movwf	??_receiveData& (0+255),b
  2943  0005D6  0EFF               	movlw	255
  2944  0005D8  0100               	movlb	0	; () banked
  2945  0005DA  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  2946  0005DC  5042               	movf	_rx_array_inx,w,c
  2947  0005DE  0100               	movlb	0	; () banked
  2948  0005E0  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2949  0005E2  6B8F               	clrf	(??_receiveData+3)& (0+255),b
  2950  0005E4  0100               	movlb	0	; () banked
  2951  0005E6  518C               	movf	??_receiveData& (0+255),w,b
  2952  0005E8  0100               	movlb	0	; () banked
  2953  0005EA  278E               	addwf	(??_receiveData+2)& (0+255),f,b
  2954  0005EC  0100               	movlb	0	; () banked
  2955  0005EE  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2956  0005F0  0100               	movlb	0	; () banked
  2957  0005F2  238F               	addwfc	(??_receiveData+3)& (0+255),f,b
  2958  0005F4  0E00               	movlw	low _rx_buffer
  2959  0005F6  0100               	movlb	0	; () banked
  2960  0005F8  258E               	addwf	(??_receiveData+2)& (0+255),w,b
  2961  0005FA  6ED9               	movwf	fsr2l,c
  2962  0005FC  0E02               	movlw	high _rx_buffer
  2963  0005FE  0100               	movlb	0	; () banked
  2964  000600  218F               	addwfc	(??_receiveData+3)& (0+255),w,b
  2965  000602  6EDA               	movwf	fsr2h,c
  2966  000604  50DF               	movf	indf2,w,c
  2967  000606  0100               	movlb	0	; () banked
  2968  000608  6F97               	movwf	(receiveData@holder_329+2)& (0+255),b
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;FastTransfer.c: 245: unsigned char crcHolder = CRC8(holder, 3);
  2972  00060A  0E95               	movlw	low receiveData@holder_329
  2973  00060C  6E1B               	movwf	CRC8@data,c
  2974  00060E  0E00               	movlw	high receiveData@holder_329
  2975  000610  6E1C               	movwf	CRC8@data+1,c
  2976  000612  0E03               	movlw	3
  2977  000614  6E1D               	movwf	CRC8@len,c
  2978  000616  EC4C  F00A         	call	_CRC8
  2979  00061A  0100               	movlb	0	; () banked
  2980  00061C  6F99               	movwf	receiveData@crcHolder_330& (0+255),b
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;FastTransfer.c: 246: serial_write(0x06);
  2984  00061E  D801               	call	u3198
  2985  000620  D00B               	goto	l2791
  2986  000622                     u3198:
  2987  000622  0005               	push	
  2988  000624  6EFA               	movwf	pclath,c
  2989  000626  5036               	movf	_serial_write,w,c
  2990  000628  6EFD               	movwf	tosl,c
  2991  00062A  5037               	movf	_serial_write+1,w,c
  2992  00062C  6EFE               	movwf	tosh,c
  2993  00062E  50F8               	movf	tblptru,w,c
  2994  000630  6EFF               	movwf	tosu,c
  2995  000632  50FA               	movf	pclath,w,c
  2996  000634  0E06               	movlw	6
  2997  000636  0012               	return		;indir
  2998  000638                     l2791:
  2999                           
  3000                           ;FastTransfer.c: 247: serial_write(0x85);
  3001  000638  D801               	call	u3208
  3002  00063A  D00B               	goto	l2793
  3003  00063C                     u3208:
  3004  00063C  0005               	push	
  3005  00063E  6EFA               	movwf	pclath,c
  3006  000640  5036               	movf	_serial_write,w,c
  3007  000642  6EFD               	movwf	tosl,c
  3008  000644  5037               	movf	_serial_write+1,w,c
  3009  000646  6EFE               	movwf	tosh,c
  3010  000648  50F8               	movf	tblptru,w,c
  3011  00064A  6EFF               	movwf	tosu,c
  3012  00064C  50FA               	movf	pclath,w,c
  3013  00064E  0E85               	movlw	133
  3014  000650  0012               	return		;indir
  3015  000652                     l2793:
  3016                           
  3017                           ;FastTransfer.c: 248: serial_write(returnAddress);
  3018  000652  D801               	call	u3218
  3019  000654  D00B               	goto	l2795
  3020  000656                     u3218:
  3021  000656  0005               	push	
  3022  000658  6EFA               	movwf	pclath,c
  3023  00065A  5036               	movf	_serial_write,w,c
  3024  00065C  6EFD               	movwf	tosl,c
  3025  00065E  5037               	movf	_serial_write+1,w,c
  3026  000660  6EFE               	movwf	tosh,c
  3027  000662  50F8               	movf	tblptru,w,c
  3028  000664  6EFF               	movwf	tosu,c
  3029  000666  50FA               	movf	pclath,w,c
  3030  000668  5040               	movf	_returnAddress,w,c
  3031  00066A  0012               	return		;indir
  3032  00066C                     l2795:
  3033                           
  3034                           ;FastTransfer.c: 249: serial_write(moduleAddress);
  3035  00066C  D801               	call	u3228
  3036  00066E  D00B               	goto	l2797
  3037  000670                     u3228:
  3038  000670  0005               	push	
  3039  000672  6EFA               	movwf	pclath,c
  3040  000674  5036               	movf	_serial_write,w,c
  3041  000676  6EFD               	movwf	tosl,c
  3042  000678  5037               	movf	_serial_write+1,w,c
  3043  00067A  6EFE               	movwf	tosh,c
  3044  00067C  50F8               	movf	tblptru,w,c
  3045  00067E  6EFF               	movwf	tosu,c
  3046  000680  50FA               	movf	pclath,w,c
  3047  000682  503F               	movf	_moduleAddress,w,c
  3048  000684  0012               	return		;indir
  3049  000686                     l2797:
  3050                           
  3051                           ;FastTransfer.c: 250: serial_write(3);
  3052  000686  D801               	call	u3238
  3053  000688  D00B               	goto	l2799
  3054  00068A                     u3238:
  3055  00068A  0005               	push	
  3056  00068C  6EFA               	movwf	pclath,c
  3057  00068E  5036               	movf	_serial_write,w,c
  3058  000690  6EFD               	movwf	tosl,c
  3059  000692  5037               	movf	_serial_write+1,w,c
  3060  000694  6EFE               	movwf	tosh,c
  3061  000696  50F8               	movf	tblptru,w,c
  3062  000698  6EFF               	movwf	tosu,c
  3063  00069A  50FA               	movf	pclath,w,c
  3064  00069C  0E03               	movlw	3
  3065  00069E  0012               	return		;indir
  3066  0006A0                     l2799:
  3067                           
  3068                           ;FastTransfer.c: 251: serial_write(255);
  3069  0006A0  D801               	call	u3248
  3070  0006A2  D00B               	goto	l2801
  3071  0006A4                     u3248:
  3072  0006A4  0005               	push	
  3073  0006A6  6EFA               	movwf	pclath,c
  3074  0006A8  5036               	movf	_serial_write,w,c
  3075  0006AA  6EFD               	movwf	tosl,c
  3076  0006AC  5037               	movf	_serial_write+1,w,c
  3077  0006AE  6EFE               	movwf	tosh,c
  3078  0006B0  50F8               	movf	tblptru,w,c
  3079  0006B2  6EFF               	movwf	tosu,c
  3080  0006B4  50FA               	movf	pclath,w,c
  3081  0006B6  0EFF               	movlw	255
  3082  0006B8  0012               	return		;indir
  3083  0006BA                     l2801:
  3084                           
  3085                           ;FastTransfer.c: 252: serial_write(2);
  3086  0006BA  D801               	call	u3258
  3087  0006BC  D00B               	goto	l2803
  3088  0006BE                     u3258:
  3089  0006BE  0005               	push	
  3090  0006C0  6EFA               	movwf	pclath,c
  3091  0006C2  5036               	movf	_serial_write,w,c
  3092  0006C4  6EFD               	movwf	tosl,c
  3093  0006C6  5037               	movf	_serial_write+1,w,c
  3094  0006C8  6EFE               	movwf	tosh,c
  3095  0006CA  50F8               	movf	tblptru,w,c
  3096  0006CC  6EFF               	movwf	tosu,c
  3097  0006CE  50FA               	movf	pclath,w,c
  3098  0006D0  0E02               	movlw	2
  3099  0006D2  0012               	return		;indir
  3100  0006D4                     l2803:
  3101                           
  3102                           ;FastTransfer.c: 253: serial_write(rx_buffer[rx_array_inx - 1]);
  3103  0006D4  D801               	call	u3268
  3104  0006D6  D025               	goto	l2805
  3105  0006D8                     u3268:
  3106  0006D8  0005               	push	
  3107  0006DA  6EFA               	movwf	pclath,c
  3108  0006DC  5036               	movf	_serial_write,w,c
  3109  0006DE  6EFD               	movwf	tosl,c
  3110  0006E0  5037               	movf	_serial_write+1,w,c
  3111  0006E2  6EFE               	movwf	tosh,c
  3112  0006E4  50F8               	movf	tblptru,w,c
  3113  0006E6  6EFF               	movwf	tosu,c
  3114  0006E8  50FA               	movf	pclath,w,c
  3115  0006EA  0EFF               	movlw	255
  3116  0006EC  0100               	movlb	0	; () banked
  3117  0006EE  6F8C               	movwf	??_receiveData& (0+255),b
  3118  0006F0  0EFF               	movlw	255
  3119  0006F2  0100               	movlb	0	; () banked
  3120  0006F4  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  3121  0006F6  5042               	movf	_rx_array_inx,w,c
  3122  0006F8  0100               	movlb	0	; () banked
  3123  0006FA  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  3124  0006FC  6B8F               	clrf	(??_receiveData+3)& (0+255),b
  3125  0006FE  0100               	movlb	0	; () banked
  3126  000700  518C               	movf	??_receiveData& (0+255),w,b
  3127  000702  0100               	movlb	0	; () banked
  3128  000704  278E               	addwf	(??_receiveData+2)& (0+255),f,b
  3129  000706  0100               	movlb	0	; () banked
  3130  000708  518D               	movf	(??_receiveData+1)& (0+255),w,b
  3131  00070A  0100               	movlb	0	; () banked
  3132  00070C  238F               	addwfc	(??_receiveData+3)& (0+255),f,b
  3133  00070E  0E00               	movlw	low _rx_buffer
  3134  000710  0100               	movlb	0	; () banked
  3135  000712  258E               	addwf	(??_receiveData+2)& (0+255),w,b
  3136  000714  6ED9               	movwf	fsr2l,c
  3137  000716  0E02               	movlw	high _rx_buffer
  3138  000718  0100               	movlb	0	; () banked
  3139  00071A  218F               	addwfc	(??_receiveData+3)& (0+255),w,b
  3140  00071C  6EDA               	movwf	fsr2h,c
  3141  00071E  50DF               	movf	indf2,w,c
  3142  000720  0012               	return		;indir
  3143  000722                     l2805:
  3144                           
  3145                           ;FastTransfer.c: 254: serial_write(crcHolder);
  3146  000722  D801               	call	u3278
  3147  000724  D00C               	goto	l2807
  3148  000726                     u3278:
  3149  000726  0005               	push	
  3150  000728  6EFA               	movwf	pclath,c
  3151  00072A  5036               	movf	_serial_write,w,c
  3152  00072C  6EFD               	movwf	tosl,c
  3153  00072E  5037               	movf	_serial_write+1,w,c
  3154  000730  6EFE               	movwf	tosh,c
  3155  000732  50F8               	movf	tblptru,w,c
  3156  000734  6EFF               	movwf	tosu,c
  3157  000736  50FA               	movf	pclath,w,c
  3158  000738  0100               	movlb	0	; () banked
  3159  00073A  5199               	movf	receiveData@crcHolder_330& (0+255),w,b
  3160  00073C  0012               	return		;indir
  3161  00073E                     l2807:
  3162                           
  3163                           ;FastTransfer.c: 255: }
  3164                           ;FastTransfer.c: 258: rx_len = 0;
  3165  00073E  0E00               	movlw	0
  3166  000740  6E43               	movwf	_rx_len,c
  3167                           
  3168                           ;FastTransfer.c: 259: rx_array_inx = 0;
  3169  000742  0E00               	movlw	0
  3170  000744  6E42               	movwf	_rx_array_inx,c
  3171                           
  3172                           ;FastTransfer.c: 260: return 0;
  3173  000746  0E00               	movlw	0
  3174  000748  0012               	return	
  3175  00074A                     l2815:
  3176                           
  3177                           ;FastTransfer.c: 261: }
  3178                           ;FastTransfer.c: 262: }
  3179                           ;FastTransfer.c: 263: }
  3180                           ;FastTransfer.c: 266: return 0;
  3181  00074A  0E00               	movlw	0
  3182  00074C  0012               	return	
  3183  00074E                     __end_of_receiveData:
  3184                           	opt stack 0
  3185                           tosu	equ	0xFFF
  3186                           tosh	equ	0xFFE
  3187                           tosl	equ	0xFFD
  3188                           pclath	equ	0xFFA
  3189                           tblptru	equ	0xFF8
  3190                           tblptrh	equ	0xFF7
  3191                           tblptrl	equ	0xFF6
  3192                           tablat	equ	0xFF5
  3193                           prodh	equ	0xFF4
  3194                           prodl	equ	0xFF3
  3195                           postinc0	equ	0xFEE
  3196                           wreg	equ	0xFE8
  3197                           indf2	equ	0xFDF
  3198                           postinc2	equ	0xFDE
  3199                           postdec2	equ	0xFDD
  3200                           plusw2	equ	0xFDB
  3201                           fsr2h	equ	0xFDA
  3202                           fsr2l	equ	0xFD9
  3203                           status	equ	0xFD8
  3204                           
  3205 ;; *************** function _Send_put *****************
  3206 ;; Defined at:
  3207 ;;		line 130 in file "UART.c"
  3208 ;; Parameters:    Size  Location     Type
  3209 ;;  _data           1    wreg     unsigned char 
  3210 ;; Auto vars:     Size  Location     Type
  3211 ;;  _data           1    0[BANK0 ] unsigned char 
  3212 ;; Return value:  Size  Location     Type
  3213 ;;                  1    wreg      void 
  3214 ;; Registers used:
  3215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3216 ;; Tracked objects:
  3217 ;;		On entry : 0/0
  3218 ;;		On exit  : 0/0
  3219 ;;		Unchanged: 0/0
  3220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3221 ;;      Params:         0       0       0       0       0       0       0
  3222 ;;      Locals:         0       1       0       0       0       0       0
  3223 ;;      Temps:          0       0       0       0       0       0       0
  3224 ;;      Totals:         0       1       0       0       0       0       0
  3225 ;;Total ram usage:        1 bytes
  3226 ;; Hardware stack levels used:    1
  3227 ;; Hardware stack levels required when called:    6
  3228 ;; This function calls:
  3229 ;;		_UART_buff_get
  3230 ;;		_UART_buff_put
  3231 ;; This function is called by:
  3232 ;;		_ComStart
  3233 ;;		_putch
  3234 ;;		_sendData
  3235 ;;		_receiveData
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           	psect	text12
  3240  0015CE                     __ptext12:
  3241                           	opt stack 0
  3242  0015CE                     _Send_put:
  3243                           	opt stack 21
  3244                           
  3245                           ;incstack = 0
  3246                           ;Send_put@_data stored from wreg
  3247  0015CE  0100               	movlb	0	; () banked
  3248  0015D0  6F83               	movwf	Send_put@_data& (0+255),b
  3249                           
  3250                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  3251  0015D2  0E00               	movlw	low _output_buffer
  3252  0015D4  6E21               	movwf	UART_buff_put@_this,c
  3253  0015D6  0E04               	movlw	high _output_buffer
  3254  0015D8  6E22               	movwf	UART_buff_put@_this+1,c
  3255  0015DA  C083  F023         	movff	Send_put@_data,UART_buff_put@c
  3256  0015DE  ECB4  F005         	call	_UART_buff_put
  3257                           
  3258                           ;UART.c: 132: if (Transmit_stall == 1) {
  3259  0015E2  0444               	decf	_Transmit_stall,w,c
  3260  0015E4  A4D8               	btfss	status,2,c
  3261  0015E6  0012               	return	
  3262                           
  3263                           ;UART.c: 133: Transmit_stall = 0;
  3264  0015E8  0E00               	movlw	0
  3265  0015EA  6E44               	movwf	_Transmit_stall,c
  3266                           
  3267                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  3268  0015EC  0E00               	movlw	low _output_buffer
  3269  0015EE  6E21               	movwf	UART_buff_get@_this,c
  3270  0015F0  0E04               	movlw	high _output_buffer
  3271  0015F2  6E22               	movwf	UART_buff_get@_this+1,c
  3272  0015F4  EC8A  F008         	call	_UART_buff_get	;wreg free
  3273  0015F8  6EAD               	movwf	4013,c	;volatile
  3274                           
  3275                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  3276  0015FA  889D               	bsf	3997,4,c	;volatile
  3277  0015FC  0012               	return	
  3278  0015FE                     __end_of_Send_put:
  3279                           	opt stack 0
  3280                           tosu	equ	0xFFF
  3281                           tosh	equ	0xFFE
  3282                           tosl	equ	0xFFD
  3283                           pclath	equ	0xFFA
  3284                           tblptru	equ	0xFF8
  3285                           tblptrh	equ	0xFF7
  3286                           tblptrl	equ	0xFF6
  3287                           tablat	equ	0xFF5
  3288                           prodh	equ	0xFF4
  3289                           prodl	equ	0xFF3
  3290                           postinc0	equ	0xFEE
  3291                           wreg	equ	0xFE8
  3292                           indf2	equ	0xFDF
  3293                           postinc2	equ	0xFDE
  3294                           postdec2	equ	0xFDD
  3295                           plusw2	equ	0xFDB
  3296                           fsr2h	equ	0xFDA
  3297                           fsr2l	equ	0xFD9
  3298                           status	equ	0xFD8
  3299                           
  3300 ;; *************** function _UART_buff_put *****************
  3301 ;; Defined at:
  3302 ;;		line 68 in file "UART.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3305 ;;		 -> output_buffer(206), input_buffer(206), 
  3306 ;;  c               1   34[COMRAM] const unsigned char 
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;		None
  3309 ;; Return value:  Size  Location     Type
  3310 ;;                  1    wreg      void 
  3311 ;; Registers used:
  3312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3318 ;;      Params:         3       0       0       0       0       0       0
  3319 ;;      Locals:         0       0       0       0       0       0       0
  3320 ;;      Temps:          2       0       0       0       0       0       0
  3321 ;;      Totals:         5       0       0       0       0       0       0
  3322 ;;Total ram usage:        5 bytes
  3323 ;; Hardware stack levels used:    1
  3324 ;; Hardware stack levels required when called:    5
  3325 ;; This function calls:
  3326 ;;		_UART_buff_modulo_inc
  3327 ;; This function is called by:
  3328 ;;		_Send_put
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           	psect	text13
  3333  000B68                     __ptext13:
  3334                           	opt stack 0
  3335  000B68                     _UART_buff_put:
  3336                           	opt stack 21
  3337                           
  3338                           ;UART.c: 69: if (_this->count < 200) {
  3339                           
  3340                           ;incstack = 0
  3341  000B68  EE20 F0CC          	lfsr	2,204
  3342  000B6C  5021               	movf	UART_buff_put@_this,w,c
  3343  000B6E  26D9               	addwf	fsr2l,f,c
  3344  000B70  5022               	movf	UART_buff_put@_this+1,w,c
  3345  000B72  22DA               	addwfc	fsr2h,f,c
  3346  000B74  0E01               	movlw	1
  3347  000B76  BEDB               	btfsc	plusw2,7,c
  3348  000B78  D007               	goto	l2417
  3349  000B7A  0E01               	movlw	1
  3350  000B7C  50DB               	movf	plusw2,w,c
  3351  000B7E  E13A               	bnz	l2423
  3352  000B80  0EC8               	movlw	200
  3353  000B82  5CDE               	subwf	postinc2,w,c
  3354  000B84  B0D8               	btfsc	status,0,c
  3355  000B86  D036               	goto	l2423
  3356  000B88                     l2417:
  3357                           
  3358                           ;UART.c: 70: _this->buf[_this->head] = c;
  3359  000B88  EE20 F0C8          	lfsr	2,200
  3360  000B8C  5021               	movf	UART_buff_put@_this,w,c
  3361  000B8E  26D9               	addwf	fsr2l,f,c
  3362  000B90  5022               	movf	UART_buff_put@_this+1,w,c
  3363  000B92  22DA               	addwfc	fsr2h,f,c
  3364  000B94  CFDE F024          	movff	postinc2,??_UART_buff_put
  3365  000B98  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3366  000B9C  5024               	movf	??_UART_buff_put,w,c
  3367  000B9E  2421               	addwf	UART_buff_put@_this,w,c
  3368  000BA0  6ED9               	movwf	fsr2l,c
  3369  000BA2  5025               	movf	??_UART_buff_put+1,w,c
  3370  000BA4  2022               	addwfc	UART_buff_put@_this+1,w,c
  3371  000BA6  6EDA               	movwf	fsr2h,c
  3372  000BA8  C023  FFDF         	movff	UART_buff_put@c,indf2
  3373                           
  3374                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3375  000BAC  EE20 F0C8          	lfsr	2,200
  3376  000BB0  5021               	movf	UART_buff_put@_this,w,c
  3377  000BB2  26D9               	addwf	fsr2l,f,c
  3378  000BB4  5022               	movf	UART_buff_put@_this+1,w,c
  3379  000BB6  22DA               	addwfc	fsr2h,f,c
  3380  000BB8  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3381  000BBC  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3382  000BC0  0E00               	movlw	0
  3383  000BC2  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3384  000BC4  0EC8               	movlw	200
  3385  000BC6  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3386  000BC8  EC40  F00B         	call	_UART_buff_modulo_inc	;wreg free
  3387  000BCC  EE20 F0C8          	lfsr	2,200
  3388  000BD0  5021               	movf	UART_buff_put@_this,w,c
  3389  000BD2  26D9               	addwf	fsr2l,f,c
  3390  000BD4  5022               	movf	UART_buff_put@_this+1,w,c
  3391  000BD6  22DA               	addwfc	fsr2h,f,c
  3392  000BD8  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3393  000BDC  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3394                           
  3395                           ;UART.c: 72: ++_this->count;
  3396  000BE0  EE20 F0CC          	lfsr	2,204
  3397  000BE4  5021               	movf	UART_buff_put@_this,w,c
  3398  000BE6  26D9               	addwf	fsr2l,f,c
  3399  000BE8  5022               	movf	UART_buff_put@_this+1,w,c
  3400  000BEA  22DA               	addwfc	fsr2h,f,c
  3401  000BEC  2ADE               	incf	postinc2,f,c
  3402  000BEE  0E00               	movlw	0
  3403  000BF0  22DD               	addwfc	postdec2,f,c
  3404                           
  3405                           ;UART.c: 73: } else {
  3406  000BF2  0012               	return	
  3407  000BF4                     l2423:
  3408                           
  3409                           ;UART.c: 74: _this->buf[_this->head] = c;
  3410  000BF4  EE20 F0C8          	lfsr	2,200
  3411  000BF8  5021               	movf	UART_buff_put@_this,w,c
  3412  000BFA  26D9               	addwf	fsr2l,f,c
  3413  000BFC  5022               	movf	UART_buff_put@_this+1,w,c
  3414  000BFE  22DA               	addwfc	fsr2h,f,c
  3415  000C00  CFDE F024          	movff	postinc2,??_UART_buff_put
  3416  000C04  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3417  000C08  5024               	movf	??_UART_buff_put,w,c
  3418  000C0A  2421               	addwf	UART_buff_put@_this,w,c
  3419  000C0C  6ED9               	movwf	fsr2l,c
  3420  000C0E  5025               	movf	??_UART_buff_put+1,w,c
  3421  000C10  2022               	addwfc	UART_buff_put@_this+1,w,c
  3422  000C12  6EDA               	movwf	fsr2h,c
  3423  000C14  C023  FFDF         	movff	UART_buff_put@c,indf2
  3424                           
  3425                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3426  000C18  EE20 F0C8          	lfsr	2,200
  3427  000C1C  5021               	movf	UART_buff_put@_this,w,c
  3428  000C1E  26D9               	addwf	fsr2l,f,c
  3429  000C20  5022               	movf	UART_buff_put@_this+1,w,c
  3430  000C22  22DA               	addwfc	fsr2h,f,c
  3431  000C24  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3432  000C28  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3433  000C2C  0E00               	movlw	0
  3434  000C2E  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3435  000C30  0EC8               	movlw	200
  3436  000C32  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3437  000C34  EC40  F00B         	call	_UART_buff_modulo_inc	;wreg free
  3438  000C38  EE20 F0C8          	lfsr	2,200
  3439  000C3C  5021               	movf	UART_buff_put@_this,w,c
  3440  000C3E  26D9               	addwf	fsr2l,f,c
  3441  000C40  5022               	movf	UART_buff_put@_this+1,w,c
  3442  000C42  22DA               	addwfc	fsr2h,f,c
  3443  000C44  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3444  000C48  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3445                           
  3446                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3447  000C4C  EE20 F0CA          	lfsr	2,202
  3448  000C50  5021               	movf	UART_buff_put@_this,w,c
  3449  000C52  26D9               	addwf	fsr2l,f,c
  3450  000C54  5022               	movf	UART_buff_put@_this+1,w,c
  3451  000C56  22DA               	addwfc	fsr2h,f,c
  3452  000C58  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3453  000C5C  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3454  000C60  0E00               	movlw	0
  3455  000C62  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3456  000C64  0EC8               	movlw	200
  3457  000C66  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3458  000C68  EC40  F00B         	call	_UART_buff_modulo_inc	;wreg free
  3459  000C6C  EE20 F0CA          	lfsr	2,202
  3460  000C70  5021               	movf	UART_buff_put@_this,w,c
  3461  000C72  26D9               	addwf	fsr2l,f,c
  3462  000C74  5022               	movf	UART_buff_put@_this+1,w,c
  3463  000C76  22DA               	addwfc	fsr2h,f,c
  3464  000C78  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3465  000C7C  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3466  000C80  0012               	return	
  3467  000C82                     __end_of_UART_buff_put:
  3468                           	opt stack 0
  3469                           tosu	equ	0xFFF
  3470                           tosh	equ	0xFFE
  3471                           tosl	equ	0xFFD
  3472                           pclath	equ	0xFFA
  3473                           tblptru	equ	0xFF8
  3474                           tblptrh	equ	0xFF7
  3475                           tblptrl	equ	0xFF6
  3476                           tablat	equ	0xFF5
  3477                           prodh	equ	0xFF4
  3478                           prodl	equ	0xFF3
  3479                           postinc0	equ	0xFEE
  3480                           wreg	equ	0xFE8
  3481                           indf2	equ	0xFDF
  3482                           postinc2	equ	0xFDE
  3483                           postdec2	equ	0xFDD
  3484                           plusw2	equ	0xFDB
  3485                           fsr2h	equ	0xFDA
  3486                           fsr2l	equ	0xFD9
  3487                           status	equ	0xFD8
  3488                           
  3489 ;; *************** function _Receive_peek *****************
  3490 ;; Defined at:
  3491 ;;		line 118 in file "UART.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;		None
  3494 ;; Auto vars:     Size  Location     Type
  3495 ;;		None
  3496 ;; Return value:  Size  Location     Type
  3497 ;;                  1    wreg      unsigned char 
  3498 ;; Registers used:
  3499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3500 ;; Tracked objects:
  3501 ;;		On entry : 0/0
  3502 ;;		On exit  : 0/0
  3503 ;;		Unchanged: 0/0
  3504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3505 ;;      Params:         0       0       0       0       0       0       0
  3506 ;;      Locals:         0       0       0       0       0       0       0
  3507 ;;      Temps:          0       0       0       0       0       0       0
  3508 ;;      Totals:         0       0       0       0       0       0       0
  3509 ;;Total ram usage:        0 bytes
  3510 ;; Hardware stack levels used:    1
  3511 ;; Hardware stack levels required when called:    5
  3512 ;; This function calls:
  3513 ;;		_UART_buff_peek
  3514 ;; This function is called by:
  3515 ;;		_ComStart
  3516 ;;		_receiveData
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           	psect	text14
  3521  001830                     __ptext14:
  3522                           	opt stack 0
  3523  001830                     _Receive_peek:
  3524                           	opt stack 23
  3525                           
  3526                           ;UART.c: 119: return UART_buff_peek(&input_buffer);
  3527                           
  3528                           ;incstack = 0
  3529  001830  0E00               	movlw	low _input_buffer
  3530  001832  6E1B               	movwf	UART_buff_peek@_this,c
  3531  001834  0E03               	movlw	high _input_buffer
  3532  001836  6E1C               	movwf	UART_buff_peek@_this+1,c
  3533  001838  EC6A  F00B         	call	_UART_buff_peek	;wreg free
  3534  00183C  0012               	return	
  3535  00183E                     __end_of_Receive_peek:
  3536                           	opt stack 0
  3537                           tosu	equ	0xFFF
  3538                           tosh	equ	0xFFE
  3539                           tosl	equ	0xFFD
  3540                           pclath	equ	0xFFA
  3541                           tblptru	equ	0xFF8
  3542                           tblptrh	equ	0xFF7
  3543                           tblptrl	equ	0xFF6
  3544                           tablat	equ	0xFF5
  3545                           prodh	equ	0xFF4
  3546                           prodl	equ	0xFF3
  3547                           postinc0	equ	0xFEE
  3548                           wreg	equ	0xFE8
  3549                           indf2	equ	0xFDF
  3550                           postinc2	equ	0xFDE
  3551                           postdec2	equ	0xFDD
  3552                           plusw2	equ	0xFDB
  3553                           fsr2h	equ	0xFDA
  3554                           fsr2l	equ	0xFD9
  3555                           status	equ	0xFD8
  3556                           
  3557 ;; *************** function _UART_buff_peek *****************
  3558 ;; Defined at:
  3559 ;;		line 114 in file "UART.c"
  3560 ;; Parameters:    Size  Location     Type
  3561 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3562 ;;		 -> input_buffer(206), 
  3563 ;; Auto vars:     Size  Location     Type
  3564 ;;		None
  3565 ;; Return value:  Size  Location     Type
  3566 ;;                  1    wreg      unsigned char 
  3567 ;; Registers used:
  3568 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3569 ;; Tracked objects:
  3570 ;;		On entry : 0/0
  3571 ;;		On exit  : 0/0
  3572 ;;		Unchanged: 0/0
  3573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3574 ;;      Params:         2       0       0       0       0       0       0
  3575 ;;      Locals:         0       0       0       0       0       0       0
  3576 ;;      Temps:          2       0       0       0       0       0       0
  3577 ;;      Totals:         4       0       0       0       0       0       0
  3578 ;;Total ram usage:        4 bytes
  3579 ;; Hardware stack levels used:    1
  3580 ;; Hardware stack levels required when called:    4
  3581 ;; This function calls:
  3582 ;;		Nothing
  3583 ;; This function is called by:
  3584 ;;		_Receive_peek
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588                           	psect	text15
  3589  0016D4                     __ptext15:
  3590                           	opt stack 0
  3591  0016D4                     _UART_buff_peek:
  3592                           	opt stack 23
  3593                           
  3594                           ;UART.c: 115: return _this->buf[_this->tail];
  3595                           
  3596                           ;incstack = 0
  3597  0016D4  EE20 F0CA          	lfsr	2,202
  3598  0016D8  501B               	movf	UART_buff_peek@_this,w,c
  3599  0016DA  26D9               	addwf	fsr2l,f,c
  3600  0016DC  501C               	movf	UART_buff_peek@_this+1,w,c
  3601  0016DE  22DA               	addwfc	fsr2h,f,c
  3602  0016E0  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  3603  0016E4  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  3604  0016E8  501D               	movf	??_UART_buff_peek,w,c
  3605  0016EA  241B               	addwf	UART_buff_peek@_this,w,c
  3606  0016EC  6ED9               	movwf	fsr2l,c
  3607  0016EE  501E               	movf	??_UART_buff_peek+1,w,c
  3608  0016F0  201C               	addwfc	UART_buff_peek@_this+1,w,c
  3609  0016F2  6EDA               	movwf	fsr2h,c
  3610  0016F4  50DF               	movf	indf2,w,c
  3611  0016F6  0012               	return	
  3612  0016F8                     __end_of_UART_buff_peek:
  3613                           	opt stack 0
  3614                           tosu	equ	0xFFF
  3615                           tosh	equ	0xFFE
  3616                           tosl	equ	0xFFD
  3617                           pclath	equ	0xFFA
  3618                           tblptru	equ	0xFF8
  3619                           tblptrh	equ	0xFF7
  3620                           tblptrl	equ	0xFF6
  3621                           tablat	equ	0xFF5
  3622                           prodh	equ	0xFF4
  3623                           prodl	equ	0xFF3
  3624                           postinc0	equ	0xFEE
  3625                           wreg	equ	0xFE8
  3626                           indf2	equ	0xFDF
  3627                           postinc2	equ	0xFDE
  3628                           postdec2	equ	0xFDD
  3629                           plusw2	equ	0xFDB
  3630                           fsr2h	equ	0xFDA
  3631                           fsr2l	equ	0xFD9
  3632                           status	equ	0xFD8
  3633                           
  3634 ;; *************** function _CRCcheck *****************
  3635 ;; Defined at:
  3636 ;;		line 429 in file "FastTransfer.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;		None
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;  rt              2    7[BANK0 ] int 
  3641 ;;  arrayHolder     3    4[BANK0 ] unsigned char [3]
  3642 ;;  calculatedCR    1    3[BANK0 ] unsigned char 
  3643 ;;  SentCRC         1    2[BANK0 ] unsigned char 
  3644 ;; Return value:  Size  Location     Type
  3645 ;;                  1    wreg      void 
  3646 ;; Registers used:
  3647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3648 ;; Tracked objects:
  3649 ;;		On entry : 0/0
  3650 ;;		On exit  : 0/0
  3651 ;;		Unchanged: 0/0
  3652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3653 ;;      Params:         0       0       0       0       0       0       0
  3654 ;;      Locals:         0       7       0       0       0       0       0
  3655 ;;      Temps:          0       0       0       0       0       0       0
  3656 ;;      Totals:         0       7       0       0       0       0       0
  3657 ;;Total ram usage:        7 bytes
  3658 ;; Hardware stack levels used:    1
  3659 ;; Hardware stack levels required when called:    7
  3660 ;; This function calls:
  3661 ;;		Absolute function
  3662 ;;		_CRC8
  3663 ;;		_Receive_available
  3664 ;;		_Receive_get
  3665 ;;		_crcBufS_get
  3666 ;;		_crcBufS_status_put
  3667 ;; This function is called by:
  3668 ;;		_receiveData
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672                           	psect	text16
  3673  0008C2                     __ptext16:
  3674                           	opt stack 0
  3675  0008C2                     _CRCcheck:
  3676                           	opt stack 21
  3677  0008C2                     l2611:
  3678  0008C2  D801               	call	u2668
  3679  0008C4  D00A               	goto	u2669
  3680  0008C6                     u2668:
  3681  0008C6  0005               	push	
  3682  0008C8  6EFA               	movwf	pclath,c
  3683  0008CA  5030               	movf	_serial_available,w,c
  3684  0008CC  6EFD               	movwf	tosl,c
  3685  0008CE  5031               	movf	_serial_available+1,w,c
  3686  0008D0  6EFE               	movwf	tosh,c
  3687  0008D2  50F8               	movf	tblptru,w,c
  3688  0008D4  6EFF               	movwf	tosu,c
  3689  0008D6  50FA               	movf	pclath,w,c
  3690  0008D8  0012               	return		;indir
  3691  0008DA                     u2669:
  3692  0008DA  BE1E               	btfsc	?_Receive_available+1,7,c
  3693  0008DC  D7F2               	goto	l2611
  3694  0008DE  501E               	movf	?_Receive_available+1,w,c
  3695  0008E0  E104               	bnz	l2613
  3696  0008E2  0E04               	movlw	4
  3697  0008E4  5C1D               	subwf	?_Receive_available,w,c
  3698  0008E6  A0D8               	btfss	status,0,c
  3699  0008E8  D7EC               	goto	l2611
  3700  0008EA                     l2613:
  3701                           
  3702                           ;FastTransfer.c: 433: unsigned char arrayHolder[3];
  3703                           ;FastTransfer.c: 434: arrayHolder[0] = serial_read();
  3704  0008EA  D801               	call	u2688
  3705  0008EC  D00A               	goto	u2689
  3706  0008EE                     u2688:
  3707  0008EE  0005               	push	
  3708  0008F0  6EFA               	movwf	pclath,c
  3709  0008F2  5034               	movf	_serial_read,w,c
  3710  0008F4  6EFD               	movwf	tosl,c
  3711  0008F6  5035               	movf	_serial_read+1,w,c
  3712  0008F8  6EFE               	movwf	tosh,c
  3713  0008FA  50F8               	movf	tblptru,w,c
  3714  0008FC  6EFF               	movwf	tosu,c
  3715  0008FE  50FA               	movf	pclath,w,c
  3716  000900  0012               	return		;indir
  3717  000902                     u2689:
  3718  000902  0100               	movlb	0	; () banked
  3719  000904  6F87               	movwf	CRCcheck@arrayHolder& (0+255),b
  3720                           
  3721                           ;FastTransfer.c: 435: arrayHolder[1] = serial_read();
  3722  000906  D801               	call	u2698
  3723  000908  D00A               	goto	u2699
  3724  00090A                     u2698:
  3725  00090A  0005               	push	
  3726  00090C  6EFA               	movwf	pclath,c
  3727  00090E  5034               	movf	_serial_read,w,c
  3728  000910  6EFD               	movwf	tosl,c
  3729  000912  5035               	movf	_serial_read+1,w,c
  3730  000914  6EFE               	movwf	tosh,c
  3731  000916  50F8               	movf	tblptru,w,c
  3732  000918  6EFF               	movwf	tosu,c
  3733  00091A  50FA               	movf	pclath,w,c
  3734  00091C  0012               	return		;indir
  3735  00091E                     u2699:
  3736  00091E  0100               	movlb	0	; () banked
  3737  000920  6F88               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  3738                           
  3739                           ;FastTransfer.c: 436: arrayHolder[2] = serial_read();
  3740  000922  D801               	call	u2708
  3741  000924  D00A               	goto	u2709
  3742  000926                     u2708:
  3743  000926  0005               	push	
  3744  000928  6EFA               	movwf	pclath,c
  3745  00092A  5034               	movf	_serial_read,w,c
  3746  00092C  6EFD               	movwf	tosl,c
  3747  00092E  5035               	movf	_serial_read+1,w,c
  3748  000930  6EFE               	movwf	tosh,c
  3749  000932  50F8               	movf	tblptru,w,c
  3750  000934  6EFF               	movwf	tosu,c
  3751  000936  50FA               	movf	pclath,w,c
  3752  000938  0012               	return		;indir
  3753  00093A                     u2709:
  3754  00093A  0100               	movlb	0	; () banked
  3755  00093C  6F89               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  3756                           
  3757                           ;FastTransfer.c: 437: unsigned char SentCRC = serial_read();
  3758  00093E  D801               	call	u2718
  3759  000940  D00A               	goto	u2719
  3760  000942                     u2718:
  3761  000942  0005               	push	
  3762  000944  6EFA               	movwf	pclath,c
  3763  000946  5034               	movf	_serial_read,w,c
  3764  000948  6EFD               	movwf	tosl,c
  3765  00094A  5035               	movf	_serial_read+1,w,c
  3766  00094C  6EFE               	movwf	tosh,c
  3767  00094E  50F8               	movf	tblptru,w,c
  3768  000950  6EFF               	movwf	tosu,c
  3769  000952  50FA               	movf	pclath,w,c
  3770  000954  0012               	return		;indir
  3771  000956                     u2719:
  3772  000956  0100               	movlb	0	; () banked
  3773  000958  6F85               	movwf	CRCcheck@SentCRC& (0+255),b
  3774                           
  3775                           ; BSR set to: 0
  3776                           ;FastTransfer.c: 438: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  3777  00095A  0E87               	movlw	low CRCcheck@arrayHolder
  3778  00095C  6E1B               	movwf	CRC8@data,c
  3779  00095E  0E00               	movlw	high CRCcheck@arrayHolder
  3780  000960  6E1C               	movwf	CRC8@data+1,c
  3781  000962  0E03               	movlw	3
  3782  000964  6E1D               	movwf	CRC8@len,c
  3783  000966  EC4C  F00A         	call	_CRC8	;wreg free
  3784  00096A  0100               	movlb	0	; () banked
  3785  00096C  6F86               	movwf	CRCcheck@calculatedCRC& (0+255),b
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;FastTransfer.c: 441: if (SentCRC == calculatedCRC) {
  3789  00096E  0100               	movlb	0	; () banked
  3790  000970  5186               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  3791  000972  0100               	movlb	0	; () banked
  3792  000974  1985               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  3793  000976  A4D8               	btfss	status,2,c
  3794  000978  D04E               	goto	l2643
  3795                           
  3796                           ; BSR set to: 0
  3797                           ;FastTransfer.c: 443: int rt;
  3798                           ;FastTransfer.c: 444: for (rt = 0; rt < 5; rt++) {
  3799  00097A  0E00               	movlw	0
  3800  00097C  0100               	movlb	0	; () banked
  3801  00097E  6F8B               	movwf	(CRCcheck@rt+1)& (0+255),b
  3802  000980  0E00               	movlw	0
  3803  000982  6F8A               	movwf	CRCcheck@rt& (0+255),b
  3804  000984                     l2621:
  3805                           
  3806                           ; BSR set to: 0
  3807  000984  0100               	movlb	0	; () banked
  3808  000986  BF8B               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3809  000988  D008               	goto	l2625
  3810  00098A  0100               	movlb	0	; () banked
  3811  00098C  518B               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3812  00098E  E146               	bnz	l226
  3813  000990  0E05               	movlw	5
  3814  000992  0100               	movlb	0	; () banked
  3815  000994  5D8A               	subwf	CRCcheck@rt& (0+255),w,b
  3816  000996  B0D8               	btfsc	status,0,c
  3817  000998  0012               	return	
  3818  00099A                     l2625:
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;FastTransfer.c: 445: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3822  00099A  0E68               	movlw	low _crc_buffer
  3823  00099C  6E1B               	movwf	crcBufS_get@_this,c
  3824  00099E  0E00               	movlw	high _crc_buffer
  3825  0009A0  6E1C               	movwf	crcBufS_get@_this+1,c
  3826  0009A2  C08A  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3827  0009A6  0E00               	movlw	0
  3828  0009A8  6E1E               	movwf	crcBufS_get@space,c
  3829  0009AA  ECCE  F006         	call	_crcBufS_get	;wreg free
  3830  0009AE  1840               	xorwf	_returnAddress,w,c
  3831  0009B0  A4D8               	btfss	status,2,c
  3832  0009B2  D02D               	goto	l2639
  3833                           
  3834                           ;FastTransfer.c: 446: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3835  0009B4  0E68               	movlw	low _crc_buffer
  3836  0009B6  6E1B               	movwf	crcBufS_get@_this,c
  3837  0009B8  0E00               	movlw	high _crc_buffer
  3838  0009BA  6E1C               	movwf	crcBufS_get@_this+1,c
  3839  0009BC  C08A  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3840  0009C0  0E01               	movlw	1
  3841  0009C2  6E1E               	movwf	crcBufS_get@space,c
  3842  0009C4  ECCE  F006         	call	_crcBufS_get	;wreg free
  3843  0009C8  0100               	movlb	0	; () banked
  3844  0009CA  1989               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3845  0009CC  A4D8               	btfss	status,2,c
  3846  0009CE  D01F               	goto	l2639
  3847                           
  3848                           ; BSR set to: 0
  3849                           ;FastTransfer.c: 447: if (arrayHolder[1] == 1) {
  3850  0009D0  0100               	movlb	0	; () banked
  3851  0009D2  0588               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3852  0009D4  A4D8               	btfss	status,2,c
  3853  0009D6  D00B               	goto	l2635
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;FastTransfer.c: 448: crcBufS_status_put(&crc_buffer, rt, 1);
  3857  0009D8  0E68               	movlw	low _crc_buffer
  3858  0009DA  6E1B               	movwf	crcBufS_status_put@_this,c
  3859  0009DC  0E00               	movlw	high _crc_buffer
  3860  0009DE  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3861  0009E0  C08A  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3862  0009E4  0E01               	movlw	1
  3863  0009E6  6E1E               	movwf	crcBufS_status_put@status,c
  3864  0009E8  EC1F  F008         	call	_crcBufS_status_put	;wreg free
  3865                           
  3866                           ;FastTransfer.c: 449: break;
  3867  0009EC  0012               	return	
  3868  0009EE                     l2635:
  3869  0009EE  0E02               	movlw	2
  3870  0009F0  0100               	movlb	0	; () banked
  3871  0009F2  1988               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3872  0009F4  A4D8               	btfss	status,2,c
  3873  0009F6  D00B               	goto	l2639
  3874                           
  3875                           ; BSR set to: 0
  3876                           ;FastTransfer.c: 451: crcBufS_status_put(&crc_buffer, rt, 2);
  3877  0009F8  0E68               	movlw	low _crc_buffer
  3878  0009FA  6E1B               	movwf	crcBufS_status_put@_this,c
  3879  0009FC  0E00               	movlw	high _crc_buffer
  3880  0009FE  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3881  000A00  C08A  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3882  000A04  0E02               	movlw	2
  3883  000A06  6E1E               	movwf	crcBufS_status_put@status,c
  3884  000A08  EC1F  F008         	call	_crcBufS_status_put	;wreg free
  3885                           
  3886                           ;FastTransfer.c: 452: break;
  3887  000A0C  0012               	return	
  3888  000A0E                     l2639:
  3889  000A0E  0100               	movlb	0	; () banked
  3890  000A10  4B8A               	infsnz	CRCcheck@rt& (0+255),f,b
  3891  000A12  2B8B               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3892  000A14  D7B7               	goto	l2621
  3893  000A16                     l2643:
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;FastTransfer.c: 458: crcErrorCounter++;
  3897  000A16  4A28               	infsnz	_crcErrorCounter,f,c
  3898  000A18  2A29               	incf	_crcErrorCounter+1,f,c
  3899  000A1A  0012               	return	
  3900  000A1C                     l226:
  3901  000A1C  0012               	return		;funcret
  3902  000A1E                     __end_of_CRCcheck:
  3903                           	opt stack 0
  3904                           tosu	equ	0xFFF
  3905                           tosh	equ	0xFFE
  3906                           tosl	equ	0xFFD
  3907                           pclath	equ	0xFFA
  3908                           tblptru	equ	0xFF8
  3909                           tblptrh	equ	0xFF7
  3910                           tblptrl	equ	0xFF6
  3911                           tablat	equ	0xFF5
  3912                           prodh	equ	0xFF4
  3913                           prodl	equ	0xFF3
  3914                           postinc0	equ	0xFEE
  3915                           wreg	equ	0xFE8
  3916                           indf2	equ	0xFDF
  3917                           postinc2	equ	0xFDE
  3918                           postdec2	equ	0xFDD
  3919                           plusw2	equ	0xFDB
  3920                           fsr2h	equ	0xFDA
  3921                           fsr2l	equ	0xFD9
  3922                           status	equ	0xFD8
  3923                           
  3924 ;; *************** function _crcBufS_status_put *****************
  3925 ;; Defined at:
  3926 ;;		line 392 in file "FastTransfer.c"
  3927 ;; Parameters:    Size  Location     Type
  3928 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3929 ;;		 -> crc_buffer(17), 
  3930 ;;  time            1   28[COMRAM] unsigned char 
  3931 ;;  status          1   29[COMRAM] unsigned char 
  3932 ;; Auto vars:     Size  Location     Type
  3933 ;;  wantedTime      2   34[COMRAM] int 
  3934 ;; Return value:  Size  Location     Type
  3935 ;;                  1    wreg      void 
  3936 ;; Registers used:
  3937 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3938 ;; Tracked objects:
  3939 ;;		On entry : 0/0
  3940 ;;		On exit  : 0/0
  3941 ;;		Unchanged: 0/0
  3942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3943 ;;      Params:         4       0       0       0       0       0       0
  3944 ;;      Locals:         2       0       0       0       0       0       0
  3945 ;;      Temps:          4       0       0       0       0       0       0
  3946 ;;      Totals:        10       0       0       0       0       0       0
  3947 ;;Total ram usage:       10 bytes
  3948 ;; Hardware stack levels used:    1
  3949 ;; Hardware stack levels required when called:    4
  3950 ;; This function calls:
  3951 ;;		Nothing
  3952 ;; This function is called by:
  3953 ;;		_CRCcheck
  3954 ;; This function uses a non-reentrant model
  3955 ;;
  3956                           
  3957                           	psect	text17
  3958  00103E                     __ptext17:
  3959                           	opt stack 0
  3960  00103E                     _crcBufS_status_put:
  3961                           	opt stack 23
  3962                           
  3963                           ;FastTransfer.c: 393: if (time >= 5) {
  3964                           
  3965                           ;incstack = 0
  3966  00103E  0E04               	movlw	4
  3967  001040  641D               	cpfsgt	crcBufS_status_put@time,c
  3968  001042  D002               	goto	l2525
  3969                           
  3970                           ;FastTransfer.c: 394: time = 5 - 1;
  3971  001044  0E04               	movlw	4
  3972  001046  6E1D               	movwf	crcBufS_status_put@time,c
  3973  001048                     l2525:
  3974                           
  3975                           ;FastTransfer.c: 395: }
  3976                           ;FastTransfer.c: 396: time = time + 1;
  3977  001048  281D               	incf	crcBufS_status_put@time,w,c
  3978  00104A  6E1D               	movwf	crcBufS_status_put@time,c
  3979                           
  3980                           ;FastTransfer.c: 397: int wantedTime = time * 3;
  3981  00104C  501D               	movf	crcBufS_status_put@time,w,c
  3982  00104E  0D03               	mullw	3
  3983  001050  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  3984  001054  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  3985                           
  3986                           ;FastTransfer.c: 398: if (wantedTime > _this->head) {
  3987  001058  EE20 F00F          	lfsr	2,15
  3988  00105C  501B               	movf	crcBufS_status_put@_this,w,c
  3989  00105E  26D9               	addwf	fsr2l,f,c
  3990  001060  501C               	movf	crcBufS_status_put@_this+1,w,c
  3991  001062  22DA               	addwfc	fsr2h,f,c
  3992  001064  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3993  001066  5CDE               	subwf	postinc2,w,c
  3994  001068  50DE               	movf	postinc2,w,c
  3995  00106A  0A80               	xorlw	128
  3996  00106C  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  3997  00106E  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3998  001070  0A80               	xorlw	128
  3999  001072  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  4000  001074  B0D8               	btfsc	status,0,c
  4001  001076  D02B               	goto	l2533
  4002                           
  4003                           ;FastTransfer.c: 399: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4004  001078  EE20 F00F          	lfsr	2,15
  4005  00107C  501B               	movf	crcBufS_status_put@_this,w,c
  4006  00107E  26D9               	addwf	fsr2l,f,c
  4007  001080  501C               	movf	crcBufS_status_put@_this+1,w,c
  4008  001082  22DA               	addwfc	fsr2h,f,c
  4009  001084  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4010  001088  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4011  00108C  1E1F               	comf	??_crcBufS_status_put,f,c
  4012  00108E  1E20               	comf	??_crcBufS_status_put+1,f,c
  4013  001090  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4014  001092  2A20               	incf	??_crcBufS_status_put+1,f,c
  4015  001094  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4016  001096  261F               	addwf	??_crcBufS_status_put,f,c
  4017  001098  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4018  00109A  2220               	addwfc	??_crcBufS_status_put+1,f,c
  4019  00109C  1E1F               	comf	??_crcBufS_status_put,f,c
  4020  00109E  1E20               	comf	??_crcBufS_status_put+1,f,c
  4021  0010A0  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4022  0010A2  2A20               	incf	??_crcBufS_status_put+1,f,c
  4023  0010A4  0E0F               	movlw	15
  4024  0010A6  241F               	addwf	??_crcBufS_status_put,w,c
  4025  0010A8  6E23               	movwf	crcBufS_status_put@wantedTime,c
  4026  0010AA  0E00               	movlw	0
  4027  0010AC  2020               	addwfc	??_crcBufS_status_put+1,w,c
  4028  0010AE  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  4029                           
  4030                           ;FastTransfer.c: 400: _this->buf[(wantedTime + 2)] = status;
  4031  0010B0  0E02               	movlw	2
  4032  0010B2  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4033  0010B4  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4034  0010B6  0E00               	movlw	0
  4035  0010B8  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4036  0010BA  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4037  0010BC  501F               	movf	??_crcBufS_status_put,w,c
  4038  0010BE  241B               	addwf	crcBufS_status_put@_this,w,c
  4039  0010C0  6ED9               	movwf	fsr2l,c
  4040  0010C2  5020               	movf	??_crcBufS_status_put+1,w,c
  4041  0010C4  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4042  0010C6  6EDA               	movwf	fsr2h,c
  4043  0010C8  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4044                           
  4045                           ;FastTransfer.c: 401: } else {
  4046  0010CC  0012               	return	
  4047  0010CE                     l2533:
  4048                           
  4049                           ;FastTransfer.c: 402: _this->buf[(_this->head - wantedTime) + 2] = status;
  4050  0010CE  EE20 F00F          	lfsr	2,15
  4051  0010D2  501B               	movf	crcBufS_status_put@_this,w,c
  4052  0010D4  26D9               	addwf	fsr2l,f,c
  4053  0010D6  501C               	movf	crcBufS_status_put@_this+1,w,c
  4054  0010D8  22DA               	addwfc	fsr2h,f,c
  4055  0010DA  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4056  0010DE  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4057  0010E2  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4058  0010E6  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4059  0010EA  1E21               	comf	??_crcBufS_status_put+2,f,c
  4060  0010EC  1E22               	comf	??_crcBufS_status_put+3,f,c
  4061  0010EE  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4062  0010F0  2A22               	incf	??_crcBufS_status_put+3,f,c
  4063  0010F2  501F               	movf	??_crcBufS_status_put,w,c
  4064  0010F4  2621               	addwf	??_crcBufS_status_put+2,f,c
  4065  0010F6  5020               	movf	??_crcBufS_status_put+1,w,c
  4066  0010F8  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4067  0010FA  0E02               	movlw	2
  4068  0010FC  2621               	addwf	??_crcBufS_status_put+2,f,c
  4069  0010FE  0E00               	movlw	0
  4070  001100  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4071  001102  5021               	movf	??_crcBufS_status_put+2,w,c
  4072  001104  241B               	addwf	crcBufS_status_put@_this,w,c
  4073  001106  6ED9               	movwf	fsr2l,c
  4074  001108  5022               	movf	??_crcBufS_status_put+3,w,c
  4075  00110A  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4076  00110C  6EDA               	movwf	fsr2h,c
  4077  00110E  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4078  001112  0012               	return	
  4079  001114                     __end_of_crcBufS_status_put:
  4080                           	opt stack 0
  4081                           tosu	equ	0xFFF
  4082                           tosh	equ	0xFFE
  4083                           tosl	equ	0xFFD
  4084                           pclath	equ	0xFFA
  4085                           tblptru	equ	0xFF8
  4086                           tblptrh	equ	0xFF7
  4087                           tblptrl	equ	0xFF6
  4088                           tablat	equ	0xFF5
  4089                           prodh	equ	0xFF4
  4090                           prodl	equ	0xFF3
  4091                           postinc0	equ	0xFEE
  4092                           wreg	equ	0xFE8
  4093                           indf2	equ	0xFDF
  4094                           postinc2	equ	0xFDE
  4095                           postdec2	equ	0xFDD
  4096                           plusw2	equ	0xFDB
  4097                           fsr2h	equ	0xFDA
  4098                           fsr2l	equ	0xFD9
  4099                           status	equ	0xFD8
  4100                           
  4101 ;; *************** function _crcBufS_get *****************
  4102 ;; Defined at:
  4103 ;;		line 409 in file "FastTransfer.c"
  4104 ;; Parameters:    Size  Location     Type
  4105 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4106 ;;		 -> crc_buffer(17), 
  4107 ;;  time            1   28[COMRAM] unsigned char 
  4108 ;;  space           1   29[COMRAM] unsigned char 
  4109 ;; Auto vars:     Size  Location     Type
  4110 ;;  wantedTime      2    0[BANK0 ] int 
  4111 ;; Return value:  Size  Location     Type
  4112 ;;                  1    wreg      unsigned char 
  4113 ;; Registers used:
  4114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4115 ;; Tracked objects:
  4116 ;;		On entry : 0/0
  4117 ;;		On exit  : 0/0
  4118 ;;		Unchanged: 0/0
  4119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4120 ;;      Params:         4       0       0       0       0       0       0
  4121 ;;      Locals:         0       2       0       0       0       0       0
  4122 ;;      Temps:          6       0       0       0       0       0       0
  4123 ;;      Totals:        10       2       0       0       0       0       0
  4124 ;;Total ram usage:       12 bytes
  4125 ;; Hardware stack levels used:    1
  4126 ;; Hardware stack levels required when called:    4
  4127 ;; This function calls:
  4128 ;;		Nothing
  4129 ;; This function is called by:
  4130 ;;		_CRCcheck
  4131 ;;		_AKNAK
  4132 ;; This function uses a non-reentrant model
  4133 ;;
  4134                           
  4135                           	psect	text18
  4136  000D9C                     __ptext18:
  4137                           	opt stack 0
  4138  000D9C                     _crcBufS_get:
  4139                           	opt stack 23
  4140                           
  4141                           ;FastTransfer.c: 410: if (time >= 5) {
  4142                           
  4143                           ;incstack = 0
  4144  000D9C  0E04               	movlw	4
  4145  000D9E  641D               	cpfsgt	crcBufS_get@time,c
  4146  000DA0  D002               	goto	l2501
  4147                           
  4148                           ;FastTransfer.c: 411: time = 5 - 1;
  4149  000DA2  0E04               	movlw	4
  4150  000DA4  6E1D               	movwf	crcBufS_get@time,c
  4151  000DA6                     l2501:
  4152                           
  4153                           ;FastTransfer.c: 412: }
  4154                           ;FastTransfer.c: 413: if (space >= 3) {
  4155  000DA6  0E02               	movlw	2
  4156  000DA8  641E               	cpfsgt	crcBufS_get@space,c
  4157  000DAA  D002               	goto	l2505
  4158                           
  4159                           ;FastTransfer.c: 414: space = 3 - 1;
  4160  000DAC  0E02               	movlw	2
  4161  000DAE  6E1E               	movwf	crcBufS_get@space,c
  4162  000DB0                     l2505:
  4163                           
  4164                           ;FastTransfer.c: 415: }
  4165                           ;FastTransfer.c: 416: time = time + 1;
  4166  000DB0  281D               	incf	crcBufS_get@time,w,c
  4167  000DB2  6E1D               	movwf	crcBufS_get@time,c
  4168                           
  4169                           ;FastTransfer.c: 417: int wantedTime = time * 3;
  4170  000DB4  501D               	movf	crcBufS_get@time,w,c
  4171  000DB6  0D03               	mullw	3
  4172  000DB8  CFF3 F083          	movff	prodl,crcBufS_get@wantedTime
  4173  000DBC  CFF4 F084          	movff	prodh,crcBufS_get@wantedTime+1
  4174                           
  4175                           ;FastTransfer.c: 418: if (wantedTime > _this->head) {
  4176  000DC0  EE20 F00F          	lfsr	2,15
  4177  000DC4  501B               	movf	crcBufS_get@_this,w,c
  4178  000DC6  26D9               	addwf	fsr2l,f,c
  4179  000DC8  501C               	movf	crcBufS_get@_this+1,w,c
  4180  000DCA  22DA               	addwfc	fsr2h,f,c
  4181  000DCC  0100               	movlb	0	; () banked
  4182  000DCE  5183               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4183  000DD0  5CDE               	subwf	postinc2,w,c
  4184  000DD2  50DE               	movf	postinc2,w,c
  4185  000DD4  0A80               	xorlw	128
  4186  000DD6  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4187  000DD8  0100               	movlb	0	; () banked
  4188  000DDA  5184               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4189  000DDC  0A80               	xorlw	128
  4190  000DDE  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4191  000DE0  B0D8               	btfsc	status,0,c
  4192  000DE2  D030               	goto	l2517
  4193                           
  4194                           ; BSR set to: 0
  4195                           ;FastTransfer.c: 419: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4196  000DE4  EE20 F00F          	lfsr	2,15
  4197  000DE8  501B               	movf	crcBufS_get@_this,w,c
  4198  000DEA  26D9               	addwf	fsr2l,f,c
  4199  000DEC  501C               	movf	crcBufS_get@_this+1,w,c
  4200  000DEE  22DA               	addwfc	fsr2h,f,c
  4201  000DF0  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4202  000DF4  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4203  000DF8  1E1F               	comf	??_crcBufS_get,f,c
  4204  000DFA  1E20               	comf	??_crcBufS_get+1,f,c
  4205  000DFC  4A1F               	infsnz	??_crcBufS_get,f,c
  4206  000DFE  2A20               	incf	??_crcBufS_get+1,f,c
  4207  000E00  0100               	movlb	0	; () banked
  4208  000E02  5183               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4209  000E04  261F               	addwf	??_crcBufS_get,f,c
  4210  000E06  0100               	movlb	0	; () banked
  4211  000E08  5184               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4212  000E0A  2220               	addwfc	??_crcBufS_get+1,f,c
  4213  000E0C  1E1F               	comf	??_crcBufS_get,f,c
  4214  000E0E  1E20               	comf	??_crcBufS_get+1,f,c
  4215  000E10  4A1F               	infsnz	??_crcBufS_get,f,c
  4216  000E12  2A20               	incf	??_crcBufS_get+1,f,c
  4217  000E14  0E0F               	movlw	15
  4218  000E16  241F               	addwf	??_crcBufS_get,w,c
  4219  000E18  0100               	movlb	0	; () banked
  4220  000E1A  6F83               	movwf	crcBufS_get@wantedTime& (0+255),b
  4221  000E1C  0E00               	movlw	0
  4222  000E1E  2020               	addwfc	??_crcBufS_get+1,w,c
  4223  000E20  0100               	movlb	0	; () banked
  4224  000E22  6F84               	movwf	(crcBufS_get@wantedTime+1)& (0+255),b
  4225                           
  4226                           ;FastTransfer.c: 420: return (_this->buf[(wantedTime + space)]);
  4227  000E24  501E               	movf	crcBufS_get@space,w,c
  4228  000E26  0100               	movlb	0	; () banked
  4229  000E28  2583               	addwf	crcBufS_get@wantedTime& (0+255),w,b
  4230  000E2A  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4231  000E2C  0E00               	movlw	0
  4232  000E2E  0100               	movlb	0	; () banked
  4233  000E30  2184               	addwfc	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4234  000E32  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4235  000E34  501F               	movf	??_crcBufS_get,w,c
  4236  000E36  241B               	addwf	crcBufS_get@_this,w,c
  4237  000E38  6ED9               	movwf	fsr2l,c
  4238  000E3A  5020               	movf	??_crcBufS_get+1,w,c
  4239  000E3C  201C               	addwfc	crcBufS_get@_this+1,w,c
  4240  000E3E  6EDA               	movwf	fsr2h,c
  4241  000E40  50DF               	movf	indf2,w,c
  4242                           
  4243                           ; BSR set to: 0
  4244                           ;FastTransfer.c: 421: } else {
  4245                           
  4246                           ; BSR set to: 0
  4247  000E42  0012               	return	
  4248  000E44                     l2517:
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;FastTransfer.c: 422: return (_this->buf[(_this->head - wantedTime) + space]);
  4252  000E44  EE20 F00F          	lfsr	2,15
  4253  000E48  501B               	movf	crcBufS_get@_this,w,c
  4254  000E4A  26D9               	addwf	fsr2l,f,c
  4255  000E4C  501C               	movf	crcBufS_get@_this+1,w,c
  4256  000E4E  22DA               	addwfc	fsr2h,f,c
  4257  000E50  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4258  000E54  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4259  000E58  C083  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4260  000E5C  C084  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4261  000E60  1E21               	comf	??_crcBufS_get+2,f,c
  4262  000E62  1E22               	comf	??_crcBufS_get+3,f,c
  4263  000E64  4A21               	infsnz	??_crcBufS_get+2,f,c
  4264  000E66  2A22               	incf	??_crcBufS_get+3,f,c
  4265  000E68  501E               	movf	crcBufS_get@space,w,c
  4266  000E6A  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4267  000E6C  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4268  000E6E  5021               	movf	??_crcBufS_get+2,w,c
  4269  000E70  2623               	addwf	??_crcBufS_get+4,f,c
  4270  000E72  5022               	movf	??_crcBufS_get+3,w,c
  4271  000E74  2224               	addwfc	??_crcBufS_get+5,f,c
  4272  000E76  501F               	movf	??_crcBufS_get,w,c
  4273  000E78  2623               	addwf	??_crcBufS_get+4,f,c
  4274  000E7A  5020               	movf	??_crcBufS_get+1,w,c
  4275  000E7C  2224               	addwfc	??_crcBufS_get+5,f,c
  4276  000E7E  5023               	movf	??_crcBufS_get+4,w,c
  4277  000E80  241B               	addwf	crcBufS_get@_this,w,c
  4278  000E82  6ED9               	movwf	fsr2l,c
  4279  000E84  5024               	movf	??_crcBufS_get+5,w,c
  4280  000E86  201C               	addwfc	crcBufS_get@_this+1,w,c
  4281  000E88  6EDA               	movwf	fsr2h,c
  4282  000E8A  50DF               	movf	indf2,w,c
  4283                           
  4284                           ; BSR set to: 0
  4285  000E8C  0012               	return	
  4286  000E8E                     __end_of_crcBufS_get:
  4287                           	opt stack 0
  4288                           tosu	equ	0xFFF
  4289                           tosh	equ	0xFFE
  4290                           tosl	equ	0xFFD
  4291                           pclath	equ	0xFFA
  4292                           tblptru	equ	0xFF8
  4293                           tblptrh	equ	0xFF7
  4294                           tblptrl	equ	0xFF6
  4295                           tablat	equ	0xFF5
  4296                           prodh	equ	0xFF4
  4297                           prodl	equ	0xFF3
  4298                           postinc0	equ	0xFEE
  4299                           wreg	equ	0xFE8
  4300                           indf2	equ	0xFDF
  4301                           postinc2	equ	0xFDE
  4302                           postdec2	equ	0xFDD
  4303                           plusw2	equ	0xFDB
  4304                           fsr2h	equ	0xFDA
  4305                           fsr2l	equ	0xFD9
  4306                           status	equ	0xFD8
  4307                           
  4308 ;; *************** function _Receive_get *****************
  4309 ;; Defined at:
  4310 ;;		line 126 in file "UART.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;		None
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;		None
  4315 ;; Return value:  Size  Location     Type
  4316 ;;                  1    wreg      unsigned char 
  4317 ;; Registers used:
  4318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4319 ;; Tracked objects:
  4320 ;;		On entry : 0/0
  4321 ;;		On exit  : 0/0
  4322 ;;		Unchanged: 0/0
  4323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4324 ;;      Params:         0       0       0       0       0       0       0
  4325 ;;      Locals:         0       0       0       0       0       0       0
  4326 ;;      Temps:          0       0       0       0       0       0       0
  4327 ;;      Totals:         0       0       0       0       0       0       0
  4328 ;;Total ram usage:        0 bytes
  4329 ;; Hardware stack levels used:    1
  4330 ;; Hardware stack levels required when called:    6
  4331 ;; This function calls:
  4332 ;;		_UART_buff_get
  4333 ;; This function is called by:
  4334 ;;		_ComStart
  4335 ;;		_getch
  4336 ;;		_CRCcheck
  4337 ;;		_receiveData
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341                           	psect	text19
  4342  00183E                     __ptext19:
  4343                           	opt stack 0
  4344  00183E                     _Receive_get:
  4345                           	opt stack 22
  4346                           
  4347                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;incstack = 0
  4351  00183E  0E00               	movlw	low _input_buffer
  4352  001840  6E21               	movwf	UART_buff_get@_this,c
  4353  001842  0E03               	movlw	high _input_buffer
  4354  001844  6E22               	movwf	UART_buff_get@_this+1,c
  4355  001846  EC8A  F008         	call	_UART_buff_get	;wreg free
  4356  00184A  0012               	return	
  4357  00184C                     __end_of_Receive_get:
  4358                           	opt stack 0
  4359                           tosu	equ	0xFFF
  4360                           tosh	equ	0xFFE
  4361                           tosl	equ	0xFFD
  4362                           pclath	equ	0xFFA
  4363                           tblptru	equ	0xFF8
  4364                           tblptrh	equ	0xFF7
  4365                           tblptrl	equ	0xFF6
  4366                           tablat	equ	0xFF5
  4367                           prodh	equ	0xFF4
  4368                           prodl	equ	0xFF3
  4369                           postinc0	equ	0xFEE
  4370                           wreg	equ	0xFE8
  4371                           indf2	equ	0xFDF
  4372                           postinc2	equ	0xFDE
  4373                           postdec2	equ	0xFDD
  4374                           plusw2	equ	0xFDB
  4375                           fsr2h	equ	0xFDA
  4376                           fsr2l	equ	0xFD9
  4377                           status	equ	0xFD8
  4378                           
  4379 ;; *************** function _UART_buff_get *****************
  4380 ;; Defined at:
  4381 ;;		line 81 in file "UART.c"
  4382 ;; Parameters:    Size  Location     Type
  4383 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  4384 ;;		 -> output_buffer(206), input_buffer(206), 
  4385 ;; Auto vars:     Size  Location     Type
  4386 ;;  c               1   36[COMRAM] unsigned char 
  4387 ;; Return value:  Size  Location     Type
  4388 ;;                  1    wreg      unsigned char 
  4389 ;; Registers used:
  4390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4391 ;; Tracked objects:
  4392 ;;		On entry : 0/0
  4393 ;;		On exit  : 0/0
  4394 ;;		Unchanged: 0/0
  4395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4396 ;;      Params:         2       0       0       0       0       0       0
  4397 ;;      Locals:         1       0       0       0       0       0       0
  4398 ;;      Temps:          2       0       0       0       0       0       0
  4399 ;;      Totals:         5       0       0       0       0       0       0
  4400 ;;Total ram usage:        5 bytes
  4401 ;; Hardware stack levels used:    1
  4402 ;; Hardware stack levels required when called:    5
  4403 ;; This function calls:
  4404 ;;		_UART_buff_modulo_inc
  4405 ;; This function is called by:
  4406 ;;		_Receive_get
  4407 ;;		_Send_put
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           	psect	text20
  4412  001114                     __ptext20:
  4413                           	opt stack 0
  4414  001114                     _UART_buff_get:
  4415                           	opt stack 21
  4416                           
  4417                           ;UART.c: 82: unsigned char c;
  4418                           ;UART.c: 83: if (_this->count > 0) {
  4419                           
  4420                           ;incstack = 0
  4421  001114  EE20 F0CC          	lfsr	2,204
  4422  001118  5021               	movf	UART_buff_get@_this,w,c
  4423  00111A  26D9               	addwf	fsr2l,f,c
  4424  00111C  5022               	movf	UART_buff_get@_this+1,w,c
  4425  00111E  22DA               	addwfc	fsr2h,f,c
  4426  001120  0E01               	movlw	1
  4427  001122  BEDB               	btfsc	plusw2,7,c
  4428  001124  D03C               	goto	l2437
  4429  001126  0E01               	movlw	1
  4430  001128  50DB               	movf	plusw2,w,c
  4431  00112A  E103               	bnz	u2450
  4432  00112C  04DE               	decf	postinc2,w,c
  4433  00112E  A0D8               	btfss	status,0,c
  4434  001130  D036               	goto	l2437
  4435  001132                     u2450:
  4436                           
  4437                           ;UART.c: 84: c = _this->buf[_this->tail];
  4438  001132  EE20 F0CA          	lfsr	2,202
  4439  001136  5021               	movf	UART_buff_get@_this,w,c
  4440  001138  26D9               	addwf	fsr2l,f,c
  4441  00113A  5022               	movf	UART_buff_get@_this+1,w,c
  4442  00113C  22DA               	addwfc	fsr2h,f,c
  4443  00113E  CFDE F023          	movff	postinc2,??_UART_buff_get
  4444  001142  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  4445  001146  5023               	movf	??_UART_buff_get,w,c
  4446  001148  2421               	addwf	UART_buff_get@_this,w,c
  4447  00114A  6ED9               	movwf	fsr2l,c
  4448  00114C  5024               	movf	??_UART_buff_get+1,w,c
  4449  00114E  2022               	addwfc	UART_buff_get@_this+1,w,c
  4450  001150  6EDA               	movwf	fsr2h,c
  4451  001152  50DF               	movf	indf2,w,c
  4452  001154  6E25               	movwf	UART_buff_get@c,c
  4453                           
  4454                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4455  001156  EE20 F0CA          	lfsr	2,202
  4456  00115A  5021               	movf	UART_buff_get@_this,w,c
  4457  00115C  26D9               	addwf	fsr2l,f,c
  4458  00115E  5022               	movf	UART_buff_get@_this+1,w,c
  4459  001160  22DA               	addwfc	fsr2h,f,c
  4460  001162  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4461  001166  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4462  00116A  0E00               	movlw	0
  4463  00116C  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4464  00116E  0EC8               	movlw	200
  4465  001170  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4466  001172  EC40  F00B         	call	_UART_buff_modulo_inc	;wreg free
  4467  001176  EE20 F0CA          	lfsr	2,202
  4468  00117A  5021               	movf	UART_buff_get@_this,w,c
  4469  00117C  26D9               	addwf	fsr2l,f,c
  4470  00117E  5022               	movf	UART_buff_get@_this+1,w,c
  4471  001180  22DA               	addwfc	fsr2h,f,c
  4472  001182  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4473  001186  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4474                           
  4475                           ;UART.c: 86: --_this->count;
  4476  00118A  EE20 F0CC          	lfsr	2,204
  4477  00118E  5021               	movf	UART_buff_get@_this,w,c
  4478  001190  26D9               	addwf	fsr2l,f,c
  4479  001192  5022               	movf	UART_buff_get@_this+1,w,c
  4480  001194  22DA               	addwfc	fsr2h,f,c
  4481  001196  06DE               	decf	postinc2,f,c
  4482  001198  0E00               	movlw	0
  4483  00119A  5ADD               	subwfb	postdec2,f,c
  4484                           
  4485                           ;UART.c: 87: } else {
  4486  00119C  D002               	goto	l290
  4487  00119E                     l2437:
  4488                           
  4489                           ;UART.c: 88: c = 0;
  4490  00119E  0E00               	movlw	0
  4491  0011A0  6E25               	movwf	UART_buff_get@c,c
  4492  0011A2                     l290:
  4493                           
  4494                           ;UART.c: 89: }
  4495                           ;UART.c: 90: return (c);
  4496  0011A2  5025               	movf	UART_buff_get@c,w,c
  4497  0011A4  0012               	return	
  4498  0011A6                     __end_of_UART_buff_get:
  4499                           	opt stack 0
  4500                           tosu	equ	0xFFF
  4501                           tosh	equ	0xFFE
  4502                           tosl	equ	0xFFD
  4503                           pclath	equ	0xFFA
  4504                           tblptru	equ	0xFF8
  4505                           tblptrh	equ	0xFF7
  4506                           tblptrl	equ	0xFF6
  4507                           tablat	equ	0xFF5
  4508                           prodh	equ	0xFF4
  4509                           prodl	equ	0xFF3
  4510                           postinc0	equ	0xFEE
  4511                           wreg	equ	0xFE8
  4512                           indf2	equ	0xFDF
  4513                           postinc2	equ	0xFDE
  4514                           postdec2	equ	0xFDD
  4515                           plusw2	equ	0xFDB
  4516                           fsr2h	equ	0xFDA
  4517                           fsr2l	equ	0xFD9
  4518                           status	equ	0xFD8
  4519                           
  4520 ;; *************** function _UART_buff_modulo_inc *****************
  4521 ;; Defined at:
  4522 ;;		line 106 in file "UART.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;  value           2   26[COMRAM] const unsigned int 
  4525 ;;  modulus         2   28[COMRAM] const unsigned int 
  4526 ;; Auto vars:     Size  Location     Type
  4527 ;;  my_value        2   30[COMRAM] unsigned int 
  4528 ;; Return value:  Size  Location     Type
  4529 ;;                  2   26[COMRAM] unsigned int 
  4530 ;; Registers used:
  4531 ;;		wreg, status,2, status,0
  4532 ;; Tracked objects:
  4533 ;;		On entry : 0/0
  4534 ;;		On exit  : 0/0
  4535 ;;		Unchanged: 0/0
  4536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4537 ;;      Params:         4       0       0       0       0       0       0
  4538 ;;      Locals:         2       0       0       0       0       0       0
  4539 ;;      Temps:          0       0       0       0       0       0       0
  4540 ;;      Totals:         6       0       0       0       0       0       0
  4541 ;;Total ram usage:        6 bytes
  4542 ;; Hardware stack levels used:    1
  4543 ;; Hardware stack levels required when called:    4
  4544 ;; This function calls:
  4545 ;;		Nothing
  4546 ;; This function is called by:
  4547 ;;		_UART_buff_put
  4548 ;;		_UART_buff_get
  4549 ;; This function uses a non-reentrant model
  4550 ;;
  4551                           
  4552                           	psect	text21
  4553  001680                     __ptext21:
  4554                           	opt stack 0
  4555  001680                     _UART_buff_modulo_inc:
  4556                           	opt stack 21
  4557                           
  4558                           ;UART.c: 107: unsigned int my_value = value + 1;
  4559                           
  4560                           ;incstack = 0
  4561  001680  0E01               	movlw	1
  4562  001682  241B               	addwf	UART_buff_modulo_inc@value,w,c
  4563  001684  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4564  001686  0E00               	movlw	0
  4565  001688  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  4566  00168A  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4567                           
  4568                           ;UART.c: 108: if (my_value >= modulus) {
  4569  00168C  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  4570  00168E  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  4571  001690  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  4572  001692  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  4573  001694  A0D8               	btfss	status,0,c
  4574  001696  D004               	goto	l2395
  4575                           
  4576                           ;UART.c: 109: my_value = 0;
  4577  001698  0E00               	movlw	0
  4578  00169A  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4579  00169C  0E00               	movlw	0
  4580  00169E  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4581  0016A0                     l2395:
  4582                           
  4583                           ;UART.c: 110: }
  4584                           ;UART.c: 111: return (my_value);
  4585  0016A0  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  4586  0016A4  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  4587  0016A8  0012               	return	
  4588  0016AA                     __end_of_UART_buff_modulo_inc:
  4589                           	opt stack 0
  4590                           tosu	equ	0xFFF
  4591                           tosh	equ	0xFFE
  4592                           tosl	equ	0xFFD
  4593                           pclath	equ	0xFFA
  4594                           tblptru	equ	0xFF8
  4595                           tblptrh	equ	0xFF7
  4596                           tblptrl	equ	0xFF6
  4597                           tablat	equ	0xFF5
  4598                           prodh	equ	0xFF4
  4599                           prodl	equ	0xFF3
  4600                           postinc0	equ	0xFEE
  4601                           wreg	equ	0xFE8
  4602                           indf2	equ	0xFDF
  4603                           postinc2	equ	0xFDE
  4604                           postdec2	equ	0xFDD
  4605                           plusw2	equ	0xFDB
  4606                           fsr2h	equ	0xFDA
  4607                           fsr2l	equ	0xFD9
  4608                           status	equ	0xFD8
  4609                           
  4610 ;; *************** function _Receive_available *****************
  4611 ;; Defined at:
  4612 ;;		line 122 in file "UART.c"
  4613 ;; Parameters:    Size  Location     Type
  4614 ;;		None
  4615 ;; Auto vars:     Size  Location     Type
  4616 ;;		None
  4617 ;; Return value:  Size  Location     Type
  4618 ;;                  2   28[COMRAM] int 
  4619 ;; Registers used:
  4620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4621 ;; Tracked objects:
  4622 ;;		On entry : 0/0
  4623 ;;		On exit  : 0/0
  4624 ;;		Unchanged: 0/0
  4625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4626 ;;      Params:         2       0       0       0       0       0       0
  4627 ;;      Locals:         0       0       0       0       0       0       0
  4628 ;;      Temps:          0       0       0       0       0       0       0
  4629 ;;      Totals:         2       0       0       0       0       0       0
  4630 ;;Total ram usage:        2 bytes
  4631 ;; Hardware stack levels used:    1
  4632 ;; Hardware stack levels required when called:    5
  4633 ;; This function calls:
  4634 ;;		_UART_buff_size
  4635 ;; This function is called by:
  4636 ;;		_ComStart
  4637 ;;		_CRCcheck
  4638 ;;		_receiveData
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           	psect	text22
  4643  0017B8                     __ptext22:
  4644                           	opt stack 0
  4645  0017B8                     _Receive_available:
  4646                           	opt stack 23
  4647                           
  4648                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  4649                           
  4650                           ;incstack = 0
  4651  0017B8  0E00               	movlw	low _input_buffer
  4652  0017BA  6E1B               	movwf	UART_buff_size@_this,c
  4653  0017BC  0E03               	movlw	high _input_buffer
  4654  0017BE  6E1C               	movwf	UART_buff_size@_this+1,c
  4655  0017C0  ECE7  F00B         	call	_UART_buff_size	;wreg free
  4656  0017C4  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  4657  0017C8  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  4658  0017CC  0012               	return	
  4659  0017CE                     __end_of_Receive_available:
  4660                           	opt stack 0
  4661                           tosu	equ	0xFFF
  4662                           tosh	equ	0xFFE
  4663                           tosl	equ	0xFFD
  4664                           pclath	equ	0xFFA
  4665                           tblptru	equ	0xFF8
  4666                           tblptrh	equ	0xFF7
  4667                           tblptrl	equ	0xFF6
  4668                           tablat	equ	0xFF5
  4669                           prodh	equ	0xFF4
  4670                           prodl	equ	0xFF3
  4671                           postinc0	equ	0xFEE
  4672                           wreg	equ	0xFE8
  4673                           indf2	equ	0xFDF
  4674                           postinc2	equ	0xFDE
  4675                           postdec2	equ	0xFDD
  4676                           plusw2	equ	0xFDB
  4677                           fsr2h	equ	0xFDA
  4678                           fsr2l	equ	0xFD9
  4679                           status	equ	0xFD8
  4680                           
  4681 ;; *************** function _UART_buff_size *****************
  4682 ;; Defined at:
  4683 ;;		line 102 in file "UART.c"
  4684 ;; Parameters:    Size  Location     Type
  4685 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  4686 ;;		 -> output_buffer(206), input_buffer(206), 
  4687 ;; Auto vars:     Size  Location     Type
  4688 ;;		None
  4689 ;; Return value:  Size  Location     Type
  4690 ;;                  2   26[COMRAM] int 
  4691 ;; Registers used:
  4692 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4693 ;; Tracked objects:
  4694 ;;		On entry : 0/0
  4695 ;;		On exit  : 0/0
  4696 ;;		Unchanged: 0/0
  4697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4698 ;;      Params:         2       0       0       0       0       0       0
  4699 ;;      Locals:         0       0       0       0       0       0       0
  4700 ;;      Temps:          0       0       0       0       0       0       0
  4701 ;;      Totals:         2       0       0       0       0       0       0
  4702 ;;Total ram usage:        2 bytes
  4703 ;; Hardware stack levels used:    1
  4704 ;; Hardware stack levels required when called:    4
  4705 ;; This function calls:
  4706 ;;		Nothing
  4707 ;; This function is called by:
  4708 ;;		_Receive_available
  4709 ;; This function uses a non-reentrant model
  4710 ;;
  4711                           
  4712                           	psect	text23
  4713  0017CE                     __ptext23:
  4714                           	opt stack 0
  4715  0017CE                     _UART_buff_size:
  4716                           	opt stack 23
  4717                           
  4718                           ;UART.c: 103: return (_this->count);
  4719                           
  4720                           ;incstack = 0
  4721  0017CE  EE20 F0CC          	lfsr	2,204
  4722  0017D2  501B               	movf	UART_buff_size@_this,w,c
  4723  0017D4  26D9               	addwf	fsr2l,f,c
  4724  0017D6  501C               	movf	UART_buff_size@_this+1,w,c
  4725  0017D8  22DA               	addwfc	fsr2h,f,c
  4726  0017DA  CFDE F01B          	movff	postinc2,?_UART_buff_size
  4727  0017DE  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  4728  0017E2  0012               	return	
  4729  0017E4                     __end_of_UART_buff_size:
  4730                           	opt stack 0
  4731                           tosu	equ	0xFFF
  4732                           tosh	equ	0xFFE
  4733                           tosl	equ	0xFFD
  4734                           pclath	equ	0xFFA
  4735                           tblptru	equ	0xFF8
  4736                           tblptrh	equ	0xFF7
  4737                           tblptrl	equ	0xFF6
  4738                           tablat	equ	0xFF5
  4739                           prodh	equ	0xFF4
  4740                           prodl	equ	0xFF3
  4741                           postinc0	equ	0xFEE
  4742                           wreg	equ	0xFE8
  4743                           indf2	equ	0xFDF
  4744                           postinc2	equ	0xFDE
  4745                           postdec2	equ	0xFDD
  4746                           plusw2	equ	0xFDB
  4747                           fsr2h	equ	0xFDA
  4748                           fsr2l	equ	0xFD9
  4749                           status	equ	0xFD8
  4750                           
  4751 ;; *************** function _CRC8 *****************
  4752 ;; Defined at:
  4753 ;;		line 89 in file "FastTransfer.c"
  4754 ;; Parameters:    Size  Location     Type
  4755 ;;  data            2   26[COMRAM] PTR const unsigned char 
  4756 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_329(3), receiveData@holder(3), 
  4757 ;;		 -> rx_buffer(200), ring_buffer(206), 
  4758 ;;  len             1   28[COMRAM] unsigned char 
  4759 ;; Auto vars:     Size  Location     Type
  4760 ;;  sum             1   29[COMRAM] unsigned char 
  4761 ;;  tempI           1   31[COMRAM] unsigned char 
  4762 ;;  extract         1   30[COMRAM] unsigned char 
  4763 ;;  crc             1   32[COMRAM] unsigned char 
  4764 ;; Return value:  Size  Location     Type
  4765 ;;                  1    wreg      unsigned char 
  4766 ;; Registers used:
  4767 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4768 ;; Tracked objects:
  4769 ;;		On entry : 0/0
  4770 ;;		On exit  : 0/0
  4771 ;;		Unchanged: 0/0
  4772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4773 ;;      Params:         3       0       0       0       0       0       0
  4774 ;;      Locals:         4       0       0       0       0       0       0
  4775 ;;      Temps:          0       0       0       0       0       0       0
  4776 ;;      Totals:         7       0       0       0       0       0       0
  4777 ;;Total ram usage:        7 bytes
  4778 ;; Hardware stack levels used:    1
  4779 ;; Hardware stack levels required when called:    4
  4780 ;; This function calls:
  4781 ;;		Nothing
  4782 ;; This function is called by:
  4783 ;;		_sendData
  4784 ;;		_receiveData
  4785 ;;		_CRCcheck
  4786 ;; This function uses a non-reentrant model
  4787 ;;
  4788                           
  4789                           	psect	text24
  4790  001498                     __ptext24:
  4791                           	opt stack 0
  4792  001498                     _CRC8:
  4793                           	opt stack 23
  4794                           
  4795                           ;FastTransfer.c: 90: unsigned char crc = 0x00;
  4796                           
  4797                           ;incstack = 0
  4798  001498  0E00               	movlw	0
  4799  00149A  6E21               	movwf	CRC8@crc,c
  4800                           
  4801                           ;FastTransfer.c: 91: while (len--) {
  4802  00149C  D01C               	goto	l2463
  4803  00149E                     l2447:
  4804                           
  4805                           ;FastTransfer.c: 92: unsigned char extract = *data++;
  4806  00149E  C01B  FFD9         	movff	CRC8@data,fsr2l
  4807  0014A2  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  4808  0014A6  50DF               	movf	indf2,w,c
  4809  0014A8  6E1F               	movwf	CRC8@extract,c
  4810  0014AA  4A1B               	infsnz	CRC8@data,f,c
  4811  0014AC  2A1C               	incf	CRC8@data+1,f,c
  4812                           
  4813                           ;FastTransfer.c: 93: unsigned char tempI;
  4814                           ;FastTransfer.c: 94: for (tempI = 8; tempI; tempI--) {
  4815  0014AE  0E08               	movlw	8
  4816  0014B0  6E20               	movwf	CRC8@tempI,c
  4817  0014B2  D00E               	goto	l2461
  4818  0014B4                     l2453:
  4819                           
  4820                           ;FastTransfer.c: 95: unsigned char sum = (crc ^ extract) & 0x01;
  4821  0014B4  5021               	movf	CRC8@crc,w,c
  4822  0014B6  181F               	xorwf	CRC8@extract,w,c
  4823  0014B8  0B01               	andlw	1
  4824  0014BA  6E1E               	movwf	CRC8@sum,c
  4825                           
  4826                           ;FastTransfer.c: 96: crc >>= 1;
  4827  0014BC  90D8               	bcf	status,0,c
  4828  0014BE  3221               	rrcf	CRC8@crc,f,c
  4829                           
  4830                           ;FastTransfer.c: 97: if (sum) {
  4831  0014C0  501E               	movf	CRC8@sum,w,c
  4832  0014C2  B4D8               	btfsc	status,2,c
  4833  0014C4  D002               	goto	l112
  4834                           
  4835                           ;FastTransfer.c: 98: crc ^= 0x8C;
  4836  0014C6  0E8C               	movlw	140
  4837  0014C8  1A21               	xorwf	CRC8@crc,f,c
  4838  0014CA                     l112:
  4839                           
  4840                           ;FastTransfer.c: 99: }
  4841                           ;FastTransfer.c: 100: extract >>= 1;
  4842  0014CA  90D8               	bcf	status,0,c
  4843  0014CC  321F               	rrcf	CRC8@extract,f,c
  4844  0014CE  0620               	decf	CRC8@tempI,f,c
  4845  0014D0                     l2461:
  4846  0014D0  5020               	movf	CRC8@tempI,w,c
  4847  0014D2  A4D8               	btfss	status,2,c
  4848  0014D4  D7EF               	goto	l2453
  4849  0014D6                     l2463:
  4850  0014D6  061D               	decf	CRC8@len,f,c
  4851  0014D8  281D               	incf	CRC8@len,w,c
  4852  0014DA  A4D8               	btfss	status,2,c
  4853  0014DC  D7E0               	goto	l2447
  4854                           
  4855                           ;FastTransfer.c: 101: }
  4856                           ;FastTransfer.c: 102: }
  4857                           ;FastTransfer.c: 103: return crc;
  4858  0014DE  5021               	movf	CRC8@crc,w,c
  4859  0014E0  0012               	return	
  4860  0014E2                     __end_of_CRC8:
  4861                           	opt stack 0
  4862                           tosu	equ	0xFFF
  4863                           tosh	equ	0xFFE
  4864                           tosl	equ	0xFFD
  4865                           pclath	equ	0xFFA
  4866                           tblptru	equ	0xFF8
  4867                           tblptrh	equ	0xFF7
  4868                           tblptrl	equ	0xFF6
  4869                           tablat	equ	0xFF5
  4870                           prodh	equ	0xFF4
  4871                           prodl	equ	0xFF3
  4872                           postinc0	equ	0xFEE
  4873                           wreg	equ	0xFE8
  4874                           indf2	equ	0xFDF
  4875                           postinc2	equ	0xFDE
  4876                           postdec2	equ	0xFDD
  4877                           plusw2	equ	0xFDB
  4878                           fsr2h	equ	0xFDA
  4879                           fsr2l	equ	0xFD9
  4880                           status	equ	0xFD8
  4881                           
  4882 ;; *************** function _Start *****************
  4883 ;; Defined at:
  4884 ;;		line 32 in file "Function.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;		None
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;		None
  4889 ;; Return value:  Size  Location     Type
  4890 ;;                  1    wreg      void 
  4891 ;; Registers used:
  4892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4893 ;; Tracked objects:
  4894 ;;		On entry : 0/0
  4895 ;;		On exit  : 0/0
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4898 ;;      Params:         0       0       0       0       0       0       0
  4899 ;;      Locals:         0       0       0       0       0       0       0
  4900 ;;      Temps:          0       0       0       0       0       0       0
  4901 ;;      Totals:         0       0       0       0       0       0       0
  4902 ;;Total ram usage:        0 bytes
  4903 ;; Hardware stack levels used:    1
  4904 ;; Hardware stack levels required when called:    8
  4905 ;; This function calls:
  4906 ;;		_ComStart
  4907 ;;		_INTERRUPT_Initialize
  4908 ;;		_TMR0_Initialize
  4909 ;; This function is called by:
  4910 ;;		_main
  4911 ;; This function uses a non-reentrant model
  4912 ;;
  4913                           
  4914                           	psect	text25
  4915  0014E2                     __ptext25:
  4916                           	opt stack 0
  4917  0014E2                     _Start:
  4918                           	opt stack 22
  4919                           
  4920                           ;Function.c: 97: TRISCbits.TRISC5 = 1;
  4921                           
  4922                           ;incstack = 0
  4923  0014E2  8A94               	bsf	3988,5,c	;volatile
  4924                           
  4925                           ;Function.c: 98: TRISCbits.TRISC4 = 1;
  4926  0014E4  8894               	bsf	3988,4,c	;volatile
  4927                           
  4928                           ;Function.c: 99: TRISDbits.TRISD3 = 1;
  4929  0014E6  8695               	bsf	3989,3,c	;volatile
  4930                           
  4931                           ;Function.c: 100: TRISDbits.TRISD2 = 1;
  4932  0014E8  8495               	bsf	3989,2,c	;volatile
  4933                           
  4934                           ;Function.c: 101: TRISDbits.TRISD1 = 1;
  4935  0014EA  8295               	bsf	3989,1,c	;volatile
  4936                           
  4937                           ;Function.c: 102: TRISDbits.TRISD0 = 1;
  4938  0014EC  8095               	bsf	3989,0,c	;volatile
  4939                           
  4940                           ;Function.c: 103: TRISCbits.TRISC3 = 1;
  4941  0014EE  8694               	bsf	3988,3,c	;volatile
  4942                           
  4943                           ;Function.c: 104: TRISCbits.TRISC2 = 1;
  4944  0014F0  8494               	bsf	3988,2,c	;volatile
  4945                           
  4946                           ;Function.c: 105: TRISCbits.TRISC1 = 1;
  4947  0014F2  8294               	bsf	3988,1,c	;volatile
  4948                           
  4949                           ;Function.c: 106: TRISAbits.TRISA7 = 1;
  4950  0014F4  8E92               	bsf	3986,7,c	;volatile
  4951                           
  4952                           ;Function.c: 107: TRISCbits.TRISC0 = 1;
  4953  0014F6  8094               	bsf	3988,0,c	;volatile
  4954                           
  4955                           ;Function.c: 109: TRISAbits.TRISA4 = 1;
  4956  0014F8  8892               	bsf	3986,4,c	;volatile
  4957                           
  4958                           ;Function.c: 110: TRISAbits.TRISA6 = 1;
  4959  0014FA  8C92               	bsf	3986,6,c	;volatile
  4960                           
  4961                           ;Function.c: 111: TRISAbits.TRISA3 = 0;
  4962  0014FC  9692               	bcf	3986,3,c	;volatile
  4963                           
  4964                           ;Function.c: 113: TRISAbits.TRISA3 = 0;
  4965  0014FE  9692               	bcf	3986,3,c	;volatile
  4966                           
  4967                           ;Function.c: 118: ANSELA = 0;
  4968  001500  0E00               	movlw	0
  4969  001502  010F               	movlb	15	; () banked
  4970  001504  6F38               	movwf	56,b	;volatile
  4971                           
  4972                           ;Function.c: 119: ANSELC = 0;
  4973  001506  0E00               	movlw	0
  4974  001508  010F               	movlb	15	; () banked
  4975  00150A  6F3A               	movwf	58,b	;volatile
  4976                           
  4977                           ;Function.c: 120: ANSELD = 0;
  4978  00150C  0E00               	movlw	0
  4979  00150E  010F               	movlb	15	; () banked
  4980  001510  6F3B               	movwf	59,b	;volatile
  4981                           
  4982                           ;Function.c: 123: OSCCON = 0x72;
  4983  001512  0E72               	movlw	114
  4984  001514  6ED3               	movwf	4051,c	;volatile
  4985                           
  4986                           ;Function.c: 125: OSCCON2 = 0x04;
  4987  001516  0E04               	movlw	4
  4988  001518  6ED2               	movwf	4050,c	;volatile
  4989                           
  4990                           ;Function.c: 127: OSCTUNE = 0x00;
  4991  00151A  0E00               	movlw	0
  4992  00151C  6E9B               	movwf	3995,c	;volatile
  4993                           
  4994                           ; BSR set to: 15
  4995                           ;Function.c: 130: ComStart();
  4996  00151E  ECF4  F009         	call	_ComStart	;wreg free
  4997                           
  4998                           ;Function.c: 131: INTERRUPT_Initialize();
  4999  001522  ECC5  F00B         	call	_INTERRUPT_Initialize	;wreg free
  5000                           
  5001                           ;Function.c: 132: TMR0_Initialize();
  5002  001526  EC8B  F00B         	call	_TMR0_Initialize	;wreg free
  5003  00152A  0012               	return		;funcret
  5004  00152C                     __end_of_Start:
  5005                           	opt stack 0
  5006                           tosu	equ	0xFFF
  5007                           tosh	equ	0xFFE
  5008                           tosl	equ	0xFFD
  5009                           pclath	equ	0xFFA
  5010                           tblptru	equ	0xFF8
  5011                           tblptrh	equ	0xFF7
  5012                           tblptrl	equ	0xFF6
  5013                           tablat	equ	0xFF5
  5014                           prodh	equ	0xFF4
  5015                           prodl	equ	0xFF3
  5016                           postinc0	equ	0xFEE
  5017                           wreg	equ	0xFE8
  5018                           indf2	equ	0xFDF
  5019                           postinc2	equ	0xFDE
  5020                           postdec2	equ	0xFDD
  5021                           plusw2	equ	0xFDB
  5022                           fsr2h	equ	0xFDA
  5023                           fsr2l	equ	0xFD9
  5024                           status	equ	0xFD8
  5025                           
  5026 ;; *************** function _TMR0_Initialize *****************
  5027 ;; Defined at:
  5028 ;;		line 23 in file "tmr0.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;		None
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;		None
  5033 ;; Return value:  Size  Location     Type
  5034 ;;                  1    wreg      void 
  5035 ;; Registers used:
  5036 ;;		wreg, status,2, cstack
  5037 ;; Tracked objects:
  5038 ;;		On entry : 0/0
  5039 ;;		On exit  : 0/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5042 ;;      Params:         0       0       0       0       0       0       0
  5043 ;;      Locals:         0       0       0       0       0       0       0
  5044 ;;      Temps:          0       0       0       0       0       0       0
  5045 ;;      Totals:         0       0       0       0       0       0       0
  5046 ;;Total ram usage:        0 bytes
  5047 ;; Hardware stack levels used:    1
  5048 ;; Hardware stack levels required when called:    5
  5049 ;; This function calls:
  5050 ;;		_TMR0_StartTimer
  5051 ;; This function is called by:
  5052 ;;		_Start
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           	psect	text26
  5057  001716                     __ptext26:
  5058                           	opt stack 0
  5059  001716                     _TMR0_Initialize:
  5060                           	opt stack 24
  5061                           
  5062                           ;tmr0.c: 27: T0CON = 0x94;
  5063                           
  5064                           ;incstack = 0
  5065  001716  0E94               	movlw	148
  5066  001718  6ED5               	movwf	4053,c	;volatile
  5067                           
  5068                           ;tmr0.c: 30: TMR0H = 0xCF;
  5069  00171A  0ECF               	movlw	207
  5070  00171C  6ED7               	movwf	4055,c	;volatile
  5071                           
  5072                           ;tmr0.c: 33: TMR0L = 0x2C;
  5073  00171E  0E2C               	movlw	44
  5074  001720  6ED6               	movwf	4054,c	;volatile
  5075                           
  5076                           ;tmr0.c: 36: timer0ReloadVal16bit = 53036;
  5077  001722  0ECF               	movlw	207
  5078  001724  6E39               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  5079  001726  0E2C               	movlw	44
  5080  001728  6E38               	movwf	_timer0ReloadVal16bit,c	;volatile
  5081                           
  5082                           ;tmr0.c: 39: INTCONbits.TMR0IF = 0;
  5083  00172A  94F2               	bcf	intcon,2,c	;volatile
  5084                           
  5085                           ;tmr0.c: 42: INTCONbits.TMR0IE = 1;
  5086  00172C  8AF2               	bsf	intcon,5,c	;volatile
  5087                           
  5088                           ;tmr0.c: 45: TMR0_StartTimer();
  5089  00172E  EC26  F00C         	call	_TMR0_StartTimer	;wreg free
  5090  001732  0012               	return		;funcret
  5091  001734                     __end_of_TMR0_Initialize:
  5092                           	opt stack 0
  5093                           tosu	equ	0xFFF
  5094                           tosh	equ	0xFFE
  5095                           tosl	equ	0xFFD
  5096                           pclath	equ	0xFFA
  5097                           tblptru	equ	0xFF8
  5098                           tblptrh	equ	0xFF7
  5099                           tblptrl	equ	0xFF6
  5100                           tablat	equ	0xFF5
  5101                           prodh	equ	0xFF4
  5102                           prodl	equ	0xFF3
  5103                           intcon	equ	0xFF2
  5104                           postinc0	equ	0xFEE
  5105                           wreg	equ	0xFE8
  5106                           indf2	equ	0xFDF
  5107                           postinc2	equ	0xFDE
  5108                           postdec2	equ	0xFDD
  5109                           plusw2	equ	0xFDB
  5110                           fsr2h	equ	0xFDA
  5111                           fsr2l	equ	0xFD9
  5112                           status	equ	0xFD8
  5113                           
  5114 ;; *************** function _TMR0_StartTimer *****************
  5115 ;; Defined at:
  5116 ;;		line 48 in file "tmr0.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;		None
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;		None
  5121 ;; Return value:  Size  Location     Type
  5122 ;;                  1    wreg      void 
  5123 ;; Registers used:
  5124 ;;		None
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5130 ;;      Params:         0       0       0       0       0       0       0
  5131 ;;      Locals:         0       0       0       0       0       0       0
  5132 ;;      Temps:          0       0       0       0       0       0       0
  5133 ;;      Totals:         0       0       0       0       0       0       0
  5134 ;;Total ram usage:        0 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; Hardware stack levels required when called:    4
  5137 ;; This function calls:
  5138 ;;		Nothing
  5139 ;; This function is called by:
  5140 ;;		_TMR0_Initialize
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           	psect	text27
  5145  00184C                     __ptext27:
  5146                           	opt stack 0
  5147  00184C                     _TMR0_StartTimer:
  5148                           	opt stack 24
  5149                           
  5150                           ;tmr0.c: 50: T0CONbits.TMR0ON = 1;
  5151                           
  5152                           ;incstack = 0
  5153  00184C  8ED5               	bsf	4053,7,c	;volatile
  5154  00184E  0012               	return		;funcret
  5155  001850                     __end_of_TMR0_StartTimer:
  5156                           	opt stack 0
  5157                           tosu	equ	0xFFF
  5158                           tosh	equ	0xFFE
  5159                           tosl	equ	0xFFD
  5160                           pclath	equ	0xFFA
  5161                           tblptru	equ	0xFF8
  5162                           tblptrh	equ	0xFF7
  5163                           tblptrl	equ	0xFF6
  5164                           tablat	equ	0xFF5
  5165                           prodh	equ	0xFF4
  5166                           prodl	equ	0xFF3
  5167                           intcon	equ	0xFF2
  5168                           postinc0	equ	0xFEE
  5169                           wreg	equ	0xFE8
  5170                           indf2	equ	0xFDF
  5171                           postinc2	equ	0xFDE
  5172                           postdec2	equ	0xFDD
  5173                           plusw2	equ	0xFDB
  5174                           fsr2h	equ	0xFDA
  5175                           fsr2l	equ	0xFD9
  5176                           status	equ	0xFD8
  5177                           
  5178 ;; *************** function _INTERRUPT_Initialize *****************
  5179 ;; Defined at:
  5180 ;;		line 135 in file "Function.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;		None
  5183 ;; Auto vars:     Size  Location     Type
  5184 ;;		None
  5185 ;; Return value:  Size  Location     Type
  5186 ;;                  1    wreg      void 
  5187 ;; Registers used:
  5188 ;;		None
  5189 ;; Tracked objects:
  5190 ;;		On entry : 0/0
  5191 ;;		On exit  : 0/0
  5192 ;;		Unchanged: 0/0
  5193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5194 ;;      Params:         0       0       0       0       0       0       0
  5195 ;;      Locals:         0       0       0       0       0       0       0
  5196 ;;      Temps:          0       0       0       0       0       0       0
  5197 ;;      Totals:         0       0       0       0       0       0       0
  5198 ;;Total ram usage:        0 bytes
  5199 ;; Hardware stack levels used:    1
  5200 ;; Hardware stack levels required when called:    4
  5201 ;; This function calls:
  5202 ;;		Nothing
  5203 ;; This function is called by:
  5204 ;;		_Start
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           	psect	text28
  5209  00178A                     __ptext28:
  5210                           	opt stack 0
  5211  00178A                     _INTERRUPT_Initialize:
  5212                           	opt stack 25
  5213                           
  5214                           ;Function.c: 137: INTCONbits.PEIE = 1;
  5215                           
  5216                           ;incstack = 0
  5217  00178A  8CF2               	bsf	intcon,6,c	;volatile
  5218                           
  5219                           ;Function.c: 138: INTCONbits.GIE = 1;
  5220  00178C  8EF2               	bsf	intcon,7,c	;volatile
  5221                           
  5222                           ;Function.c: 140: RCONbits.IPEN = 0;
  5223  00178E  9ED0               	bcf	4048,7,c	;volatile
  5224                           
  5225                           ;Function.c: 145: IPR1bits.RC1IP = 0;
  5226  001790  9A9F               	bcf	3999,5,c	;volatile
  5227                           
  5228                           ;Function.c: 147: IPR1bits.TX1IP = 0;
  5229  001792  989F               	bcf	3999,4,c	;volatile
  5230                           
  5231                           ;Function.c: 150: INTCONbits.TMR0IF = 0;
  5232  001794  94F2               	bcf	intcon,2,c	;volatile
  5233                           
  5234                           ;Function.c: 153: INTCONbits.TMR0IE = 1;
  5235  001796  8AF2               	bsf	intcon,5,c	;volatile
  5236                           
  5237                           ;Function.c: 155: IPR1bits.ADIP = 0;
  5238  001798  9C9F               	bcf	3999,6,c	;volatile
  5239                           
  5240                           ;Function.c: 157: IPR1bits.SSP1IP = 0;
  5241  00179A  969F               	bcf	3999,3,c	;volatile
  5242                           
  5243                           ;Function.c: 159: IPR2bits.BCL1IP = 0;
  5244  00179C  96A2               	bcf	4002,3,c	;volatile
  5245                           
  5246                           ;Function.c: 160: IPR1bits.TMR2IP=0;
  5247  00179E  929F               	bcf	3999,1,c	;volatile
  5248  0017A0  0012               	return		;funcret
  5249  0017A2                     __end_of_INTERRUPT_Initialize:
  5250                           	opt stack 0
  5251                           tosu	equ	0xFFF
  5252                           tosh	equ	0xFFE
  5253                           tosl	equ	0xFFD
  5254                           pclath	equ	0xFFA
  5255                           tblptru	equ	0xFF8
  5256                           tblptrh	equ	0xFF7
  5257                           tblptrl	equ	0xFF6
  5258                           tablat	equ	0xFF5
  5259                           prodh	equ	0xFF4
  5260                           prodl	equ	0xFF3
  5261                           intcon	equ	0xFF2
  5262                           postinc0	equ	0xFEE
  5263                           wreg	equ	0xFE8
  5264                           indf2	equ	0xFDF
  5265                           postinc2	equ	0xFDE
  5266                           postdec2	equ	0xFDD
  5267                           plusw2	equ	0xFDB
  5268                           fsr2h	equ	0xFDA
  5269                           fsr2l	equ	0xFD9
  5270                           status	equ	0xFD8
  5271                           
  5272 ;; *************** function _ComStart *****************
  5273 ;; Defined at:
  5274 ;;		line 12 in file "Communications.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;		None
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;		None
  5279 ;; Return value:  Size  Location     Type
  5280 ;;                  1    wreg      void 
  5281 ;; Registers used:
  5282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5288 ;;      Params:         0       0       0       0       0       0       0
  5289 ;;      Locals:         0       0       0       0       0       0       0
  5290 ;;      Temps:          0       0       0       0       0       0       0
  5291 ;;      Totals:         0       0       0       0       0       0       0
  5292 ;;Total ram usage:        0 bytes
  5293 ;; Hardware stack levels used:    1
  5294 ;; Hardware stack levels required when called:    7
  5295 ;; This function calls:
  5296 ;;		_EUSART1_Initialize
  5297 ;;		_begin
  5298 ;; This function is called by:
  5299 ;;		_Start
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           	psect	text29
  5304  0013E8                     __ptext29:
  5305                           	opt stack 0
  5306  0013E8                     _ComStart:
  5307                           	opt stack 22
  5308                           
  5309                           ;Communications.c: 13: EUSART1_Initialize();
  5310                           
  5311                           ;incstack = 0
  5312  0013E8  EC96  F00A         	call	_EUSART1_Initialize	;wreg free
  5313                           
  5314                           ;Communications.c: 14: begin(receiveArray, sizeof (receiveArray), 8, 0, Send_put, Receiv
      +                          e_get, Receive_available, Receive_peek);
  5315  0013EC  0E79               	movlw	low _receiveArray
  5316  0013EE  0100               	movlb	0	; () banked
  5317  0013F0  6F83               	movwf	begin@ptr& (0+255),b
  5318  0013F2  0E00               	movlw	high _receiveArray
  5319  0013F4  0100               	movlb	0	; () banked
  5320  0013F6  6F84               	movwf	(begin@ptr+1)& (0+255),b
  5321  0013F8  0E0A               	movlw	10
  5322  0013FA  0100               	movlb	0	; () banked
  5323  0013FC  6F85               	movwf	begin@maxSize& (0+255),b
  5324  0013FE  0E08               	movlw	8
  5325  001400  0100               	movlb	0	; () banked
  5326  001402  6F86               	movwf	begin@givenAddress& (0+255),b
  5327  001404  0E00               	movlw	0
  5328  001406  0100               	movlb	0	; () banked
  5329  001408  6F87               	movwf	begin@error& (0+255),b
  5330  00140A  0ECE               	movlw	low _Send_put
  5331  00140C  0100               	movlb	0	; () banked
  5332  00140E  6F88               	movwf	begin@stufftosend& (0+255),b
  5333  001410  0E15               	movlw	high _Send_put
  5334  001412  0100               	movlb	0	; () banked
  5335  001414  6F89               	movwf	(begin@stufftosend+1)& (0+255),b
  5336  001416  0E3E               	movlw	low _Receive_get
  5337  001418  0100               	movlb	0	; () banked
  5338  00141A  6F8A               	movwf	begin@stufftoreceive& (0+255),b
  5339  00141C  0E18               	movlw	high _Receive_get
  5340  00141E  0100               	movlb	0	; () banked
  5341  001420  6F8B               	movwf	(begin@stufftoreceive+1)& (0+255),b
  5342  001422  0EB8               	movlw	low _Receive_available
  5343  001424  0100               	movlb	0	; () banked
  5344  001426  6F8C               	movwf	begin@stuffavailable& (0+255),b
  5345  001428  0E17               	movlw	high _Receive_available
  5346  00142A  0100               	movlb	0	; () banked
  5347  00142C  6F8D               	movwf	(begin@stuffavailable+1)& (0+255),b
  5348  00142E  0E30               	movlw	low _Receive_peek
  5349  001430  0100               	movlb	0	; () banked
  5350  001432  6F8E               	movwf	begin@stuffpeek& (0+255),b
  5351  001434  0E18               	movlw	high _Receive_peek
  5352  001436  0100               	movlb	0	; () banked
  5353  001438  6F8F               	movwf	(begin@stuffpeek+1)& (0+255),b
  5354  00143A  EC20  F00A         	call	_begin	;wreg free
  5355  00143E  0012               	return		;funcret
  5356  001440                     __end_of_ComStart:
  5357                           	opt stack 0
  5358                           tosu	equ	0xFFF
  5359                           tosh	equ	0xFFE
  5360                           tosl	equ	0xFFD
  5361                           pclath	equ	0xFFA
  5362                           tblptru	equ	0xFF8
  5363                           tblptrh	equ	0xFF7
  5364                           tblptrl	equ	0xFF6
  5365                           tablat	equ	0xFF5
  5366                           prodh	equ	0xFF4
  5367                           prodl	equ	0xFF3
  5368                           intcon	equ	0xFF2
  5369                           postinc0	equ	0xFEE
  5370                           wreg	equ	0xFE8
  5371                           indf2	equ	0xFDF
  5372                           postinc2	equ	0xFDE
  5373                           postdec2	equ	0xFDD
  5374                           plusw2	equ	0xFDB
  5375                           fsr2h	equ	0xFDA
  5376                           fsr2l	equ	0xFD9
  5377                           status	equ	0xFD8
  5378                           
  5379 ;; *************** function _begin *****************
  5380 ;; Defined at:
  5381 ;;		line 73 in file "FastTransfer.c"
  5382 ;; Parameters:    Size  Location     Type
  5383 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  5384 ;;		 -> receiveArray(10), 
  5385 ;;  maxSize         1    2[BANK0 ] unsigned char 
  5386 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  5387 ;;  error           1    4[BANK0 ] unsigned char 
  5388 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  5389 ;;		 -> Send_put(1), 
  5390 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  5391 ;;		 -> Receive_get(1), 
  5392 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  5393 ;;		 -> Receive_available(2), 
  5394 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  5395 ;;		 -> Receive_peek(1), 
  5396 ;; Auto vars:     Size  Location     Type
  5397 ;;		None
  5398 ;; Return value:  Size  Location     Type
  5399 ;;                  1    wreg      void 
  5400 ;; Registers used:
  5401 ;;		wreg, status,2, status,0, cstack
  5402 ;; Tracked objects:
  5403 ;;		On entry : 0/0
  5404 ;;		On exit  : 0/0
  5405 ;;		Unchanged: 0/0
  5406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5407 ;;      Params:         0      13       0       0       0       0       0
  5408 ;;      Locals:         0       0       0       0       0       0       0
  5409 ;;      Temps:          0       0       0       0       0       0       0
  5410 ;;      Totals:         0      13       0       0       0       0       0
  5411 ;;Total ram usage:       13 bytes
  5412 ;; Hardware stack levels used:    1
  5413 ;; Hardware stack levels required when called:    5
  5414 ;; This function calls:
  5415 ;;		___awdiv
  5416 ;; This function is called by:
  5417 ;;		_ComStart
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           	psect	text30
  5422  001440                     __ptext30:
  5423                           	opt stack 0
  5424  001440                     _begin:
  5425                           	opt stack 23
  5426                           
  5427                           ;FastTransfer.c: 74: receiveArrayAddress = ptr;
  5428                           
  5429                           ;incstack = 0
  5430  001440  C083  F02C         	movff	begin@ptr,_receiveArrayAddress
  5431  001444  C084  F02D         	movff	begin@ptr+1,_receiveArrayAddress+1
  5432                           
  5433                           ;FastTransfer.c: 75: moduleAddress = givenAddress;
  5434  001448  C086  F03F         	movff	begin@givenAddress,_moduleAddress
  5435                           
  5436                           ;FastTransfer.c: 76: serial_write = stufftosend;
  5437  00144C  C088  F036         	movff	begin@stufftosend,_serial_write
  5438  001450  C089  F037         	movff	begin@stufftosend+1,_serial_write+1
  5439                           
  5440                           ;FastTransfer.c: 77: serial_available = stuffavailable;
  5441  001454  C08C  F030         	movff	begin@stuffavailable,_serial_available
  5442  001458  C08D  F031         	movff	begin@stuffavailable+1,_serial_available+1
  5443                           
  5444                           ;FastTransfer.c: 78: serial_peek = stuffpeek;
  5445  00145C  C08E  F032         	movff	begin@stuffpeek,_serial_peek
  5446  001460  C08F  F033         	movff	begin@stuffpeek+1,_serial_peek+1
  5447                           
  5448                           ;FastTransfer.c: 79: serial_read = stufftoreceive;
  5449  001464  C08A  F034         	movff	begin@stufftoreceive,_serial_read
  5450  001468  C08B  F035         	movff	begin@stufftoreceive+1,_serial_read+1
  5451                           
  5452                           ;FastTransfer.c: 80: maxDataAddress = maxSize / 2;
  5453  00146C  C085  F01B         	movff	begin@maxSize,___awdiv@dividend
  5454  001470  6A1C               	clrf	___awdiv@dividend+1,c
  5455  001472  0E00               	movlw	0
  5456  001474  6E1E               	movwf	___awdiv@divisor+1,c
  5457  001476  0E02               	movlw	2
  5458  001478  6E1D               	movwf	___awdiv@divisor,c
  5459  00147A  EC1C  F009         	call	___awdiv	;wreg free
  5460  00147E  501B               	movf	?___awdiv,w,c
  5461  001480  6E3E               	movwf	_maxDataAddress,c
  5462                           
  5463                           ;FastTransfer.c: 81: sendStructAddress = (unsigned char*) & ring_buffer;
  5464  001482  0E00               	movlw	low _ring_buffer
  5465  001484  6E2E               	movwf	_sendStructAddress,c
  5466  001486  0E01               	movlw	high _ring_buffer
  5467  001488  6E2F               	movwf	_sendStructAddress+1,c
  5468                           
  5469                           ;FastTransfer.c: 82: AKNAKsend = error;
  5470  00148A  C087  F03A         	movff	begin@error,_AKNAKsend
  5471                           
  5472                           ;FastTransfer.c: 83: alignErrorCounter = 0;
  5473  00148E  0E00               	movlw	0
  5474  001490  6E27               	movwf	_alignErrorCounter+1,c
  5475  001492  0E00               	movlw	0
  5476  001494  6E26               	movwf	_alignErrorCounter,c
  5477  001496  0012               	return		;funcret
  5478  001498                     __end_of_begin:
  5479                           	opt stack 0
  5480                           tosu	equ	0xFFF
  5481                           tosh	equ	0xFFE
  5482                           tosl	equ	0xFFD
  5483                           pclath	equ	0xFFA
  5484                           tblptru	equ	0xFF8
  5485                           tblptrh	equ	0xFF7
  5486                           tblptrl	equ	0xFF6
  5487                           tablat	equ	0xFF5
  5488                           prodh	equ	0xFF4
  5489                           prodl	equ	0xFF3
  5490                           intcon	equ	0xFF2
  5491                           postinc0	equ	0xFEE
  5492                           wreg	equ	0xFE8
  5493                           indf2	equ	0xFDF
  5494                           postinc2	equ	0xFDE
  5495                           postdec2	equ	0xFDD
  5496                           plusw2	equ	0xFDB
  5497                           fsr2h	equ	0xFDA
  5498                           fsr2l	equ	0xFD9
  5499                           status	equ	0xFD8
  5500                           
  5501 ;; *************** function ___awdiv *****************
  5502 ;; Defined at:
  5503 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;  dividend        2   26[COMRAM] int 
  5506 ;;  divisor         2   28[COMRAM] int 
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;  quotient        2   32[COMRAM] int 
  5509 ;;  sign            1   31[COMRAM] unsigned char 
  5510 ;;  counter         1   30[COMRAM] unsigned char 
  5511 ;; Return value:  Size  Location     Type
  5512 ;;                  2   26[COMRAM] int 
  5513 ;; Registers used:
  5514 ;;		wreg, status,2, status,0
  5515 ;; Tracked objects:
  5516 ;;		On entry : 0/0
  5517 ;;		On exit  : 0/0
  5518 ;;		Unchanged: 0/0
  5519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5520 ;;      Params:         4       0       0       0       0       0       0
  5521 ;;      Locals:         4       0       0       0       0       0       0
  5522 ;;      Temps:          0       0       0       0       0       0       0
  5523 ;;      Totals:         8       0       0       0       0       0       0
  5524 ;;Total ram usage:        8 bytes
  5525 ;; Hardware stack levels used:    1
  5526 ;; Hardware stack levels required when called:    4
  5527 ;; This function calls:
  5528 ;;		Nothing
  5529 ;; This function is called by:
  5530 ;;		_begin
  5531 ;; This function uses a non-reentrant model
  5532 ;;
  5533                           
  5534                           	psect	text31
  5535  001238                     __ptext31:
  5536                           	opt stack 0
  5537  001238                     ___awdiv:
  5538                           	opt stack 23
  5539                           
  5540                           ;incstack = 0
  5541  001238  0E00               	movlw	0
  5542  00123A  6E20               	movwf	___awdiv@sign,c
  5543  00123C  AE1E               	btfss	___awdiv@divisor+1,7,c
  5544  00123E  D006               	goto	l1937
  5545  001240  6C1D               	negf	___awdiv@divisor,c
  5546  001242  1E1E               	comf	___awdiv@divisor+1,f,c
  5547  001244  B0D8               	btfsc	status,0,c
  5548  001246  2A1E               	incf	___awdiv@divisor+1,f,c
  5549  001248  0E01               	movlw	1
  5550  00124A  6E20               	movwf	___awdiv@sign,c
  5551  00124C                     l1937:
  5552  00124C  AE1C               	btfss	___awdiv@dividend+1,7,c
  5553  00124E  D006               	goto	l1943
  5554  001250  6C1B               	negf	___awdiv@dividend,c
  5555  001252  1E1C               	comf	___awdiv@dividend+1,f,c
  5556  001254  B0D8               	btfsc	status,0,c
  5557  001256  2A1C               	incf	___awdiv@dividend+1,f,c
  5558  001258  0E01               	movlw	1
  5559  00125A  1A20               	xorwf	___awdiv@sign,f,c
  5560  00125C                     l1943:
  5561  00125C  0E00               	movlw	0
  5562  00125E  6E22               	movwf	___awdiv@quotient+1,c
  5563  001260  0E00               	movlw	0
  5564  001262  6E21               	movwf	___awdiv@quotient,c
  5565  001264  501D               	movf	___awdiv@divisor,w,c
  5566  001266  101E               	iorwf	___awdiv@divisor+1,w,c
  5567  001268  B4D8               	btfsc	status,2,c
  5568  00126A  D01C               	goto	l1965
  5569  00126C  0E01               	movlw	1
  5570  00126E  6E1F               	movwf	___awdiv@counter,c
  5571  001270  D004               	goto	l1951
  5572  001272                     l1949:
  5573  001272  90D8               	bcf	status,0,c
  5574  001274  361D               	rlcf	___awdiv@divisor,f,c
  5575  001276  361E               	rlcf	___awdiv@divisor+1,f,c
  5576  001278  2A1F               	incf	___awdiv@counter,f,c
  5577  00127A                     l1951:
  5578  00127A  AE1E               	btfss	___awdiv@divisor+1,7,c
  5579  00127C  D7FA               	goto	l1949
  5580  00127E                     l1953:
  5581  00127E  90D8               	bcf	status,0,c
  5582  001280  3621               	rlcf	___awdiv@quotient,f,c
  5583  001282  3622               	rlcf	___awdiv@quotient+1,f,c
  5584  001284  501D               	movf	___awdiv@divisor,w,c
  5585  001286  5C1B               	subwf	___awdiv@dividend,w,c
  5586  001288  501E               	movf	___awdiv@divisor+1,w,c
  5587  00128A  581C               	subwfb	___awdiv@dividend+1,w,c
  5588  00128C  A0D8               	btfss	status,0,c
  5589  00128E  D005               	goto	l1961
  5590  001290  501D               	movf	___awdiv@divisor,w,c
  5591  001292  5E1B               	subwf	___awdiv@dividend,f,c
  5592  001294  501E               	movf	___awdiv@divisor+1,w,c
  5593  001296  5A1C               	subwfb	___awdiv@dividend+1,f,c
  5594  001298  8021               	bsf	___awdiv@quotient,0,c
  5595  00129A                     l1961:
  5596  00129A  90D8               	bcf	status,0,c
  5597  00129C  321E               	rrcf	___awdiv@divisor+1,f,c
  5598  00129E  321D               	rrcf	___awdiv@divisor,f,c
  5599  0012A0  2E1F               	decfsz	___awdiv@counter,f,c
  5600  0012A2  D7ED               	goto	l1953
  5601  0012A4                     l1965:
  5602  0012A4  5020               	movf	___awdiv@sign,w,c
  5603  0012A6  B4D8               	btfsc	status,2,c
  5604  0012A8  D004               	goto	l1969
  5605  0012AA  6C21               	negf	___awdiv@quotient,c
  5606  0012AC  1E22               	comf	___awdiv@quotient+1,f,c
  5607  0012AE  B0D8               	btfsc	status,0,c
  5608  0012B0  2A22               	incf	___awdiv@quotient+1,f,c
  5609  0012B2                     l1969:
  5610  0012B2  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  5611  0012B6  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  5612  0012BA  0012               	return	
  5613  0012BC                     __end_of___awdiv:
  5614                           	opt stack 0
  5615                           tosu	equ	0xFFF
  5616                           tosh	equ	0xFFE
  5617                           tosl	equ	0xFFD
  5618                           pclath	equ	0xFFA
  5619                           tblptru	equ	0xFF8
  5620                           tblptrh	equ	0xFF7
  5621                           tblptrl	equ	0xFF6
  5622                           tablat	equ	0xFF5
  5623                           prodh	equ	0xFF4
  5624                           prodl	equ	0xFF3
  5625                           intcon	equ	0xFF2
  5626                           postinc0	equ	0xFEE
  5627                           wreg	equ	0xFE8
  5628                           indf2	equ	0xFDF
  5629                           postinc2	equ	0xFDE
  5630                           postdec2	equ	0xFDD
  5631                           plusw2	equ	0xFDB
  5632                           fsr2h	equ	0xFDA
  5633                           fsr2l	equ	0xFD9
  5634                           status	equ	0xFD8
  5635                           
  5636 ;; *************** function _EUSART1_Initialize *****************
  5637 ;; Defined at:
  5638 ;;		line 21 in file "UART.c"
  5639 ;; Parameters:    Size  Location     Type
  5640 ;;		None
  5641 ;; Auto vars:     Size  Location     Type
  5642 ;;		None
  5643 ;; Return value:  Size  Location     Type
  5644 ;;                  1    wreg      void 
  5645 ;; Registers used:
  5646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5647 ;; Tracked objects:
  5648 ;;		On entry : 0/0
  5649 ;;		On exit  : 0/0
  5650 ;;		Unchanged: 0/0
  5651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5652 ;;      Params:         0       0       0       0       0       0       0
  5653 ;;      Locals:         0       0       0       0       0       0       0
  5654 ;;      Temps:          0       0       0       0       0       0       0
  5655 ;;      Totals:         0       0       0       0       0       0       0
  5656 ;;Total ram usage:        0 bytes
  5657 ;; Hardware stack levels used:    1
  5658 ;; Hardware stack levels required when called:    6
  5659 ;; This function calls:
  5660 ;;		_UART_buff_init
  5661 ;; This function is called by:
  5662 ;;		_ComStart
  5663 ;; This function uses a non-reentrant model
  5664 ;;
  5665                           
  5666                           	psect	text32
  5667  00152C                     __ptext32:
  5668                           	opt stack 0
  5669  00152C                     _EUSART1_Initialize:
  5670                           	opt stack 22
  5671                           
  5672                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  5673                           
  5674                           ;incstack = 0
  5675  00152C  9A9D               	bcf	3997,5,c	;volatile
  5676                           
  5677                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  5678  00152E  989D               	bcf	3997,4,c	;volatile
  5679                           
  5680                           ;UART.c: 29: BAUD1CON = 0x48;
  5681  001530  0E48               	movlw	72
  5682  001532  6EB8               	movwf	4024,c	;volatile
  5683                           
  5684                           ;UART.c: 32: RC1STA = 0x98;
  5685  001534  0E98               	movlw	152
  5686  001536  6EAB               	movwf	4011,c	;volatile
  5687                           
  5688                           ;UART.c: 35: TX1STA = 0x26;
  5689  001538  0E26               	movlw	38
  5690  00153A  6EAC               	movwf	4012,c	;volatile
  5691                           
  5692                           ;UART.c: 38: SPBRG1 = (((16000000/38400)/4)-1);
  5693  00153C  0E67               	movlw	103
  5694  00153E  6EAF               	movwf	4015,c	;volatile
  5695                           
  5696                           ;UART.c: 41: SPBRGH1 = 0x00;
  5697  001540  0E00               	movlw	0
  5698  001542  6EB0               	movwf	4016,c	;volatile
  5699                           
  5700                           ;UART.c: 44: TXREG1 = 0x00;
  5701  001544  0E00               	movlw	0
  5702  001546  6EAD               	movwf	4013,c	;volatile
  5703                           
  5704                           ;UART.c: 47: RCREG1 = 0x00;
  5705  001548  0E00               	movlw	0
  5706  00154A  6EAE               	movwf	4014,c	;volatile
  5707                           
  5708                           ;UART.c: 49: UART_buff_init(&input_buffer);
  5709  00154C  0E00               	movlw	low _input_buffer
  5710  00154E  6E23               	movwf	UART_buff_init@_this,c
  5711  001550  0E03               	movlw	high _input_buffer
  5712  001552  6E24               	movwf	UART_buff_init@_this+1,c
  5713  001554  EC9A  F00B         	call	_UART_buff_init	;wreg free
  5714                           
  5715                           ;UART.c: 50: UART_buff_init(&output_buffer);
  5716  001558  0E00               	movlw	low _output_buffer
  5717  00155A  6E23               	movwf	UART_buff_init@_this,c
  5718  00155C  0E04               	movlw	high _output_buffer
  5719  00155E  6E24               	movwf	UART_buff_init@_this+1,c
  5720  001560  EC9A  F00B         	call	_UART_buff_init	;wreg free
  5721                           
  5722                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  5723  001564  8A9D               	bsf	3997,5,c	;volatile
  5724  001566  0012               	return		;funcret
  5725  001568                     __end_of_EUSART1_Initialize:
  5726                           	opt stack 0
  5727                           tosu	equ	0xFFF
  5728                           tosh	equ	0xFFE
  5729                           tosl	equ	0xFFD
  5730                           pclath	equ	0xFFA
  5731                           tblptru	equ	0xFF8
  5732                           tblptrh	equ	0xFF7
  5733                           tblptrl	equ	0xFF6
  5734                           tablat	equ	0xFF5
  5735                           prodh	equ	0xFF4
  5736                           prodl	equ	0xFF3
  5737                           intcon	equ	0xFF2
  5738                           postinc0	equ	0xFEE
  5739                           wreg	equ	0xFE8
  5740                           indf2	equ	0xFDF
  5741                           postinc2	equ	0xFDE
  5742                           postdec2	equ	0xFDD
  5743                           plusw2	equ	0xFDB
  5744                           fsr2h	equ	0xFDA
  5745                           fsr2l	equ	0xFD9
  5746                           status	equ	0xFD8
  5747                           
  5748 ;; *************** function _UART_buff_init *****************
  5749 ;; Defined at:
  5750 ;;		line 56 in file "UART.c"
  5751 ;; Parameters:    Size  Location     Type
  5752 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  5753 ;;		 -> output_buffer(206), input_buffer(206), 
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;		None
  5756 ;; Return value:  Size  Location     Type
  5757 ;;                  1    wreg      void 
  5758 ;; Registers used:
  5759 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5765 ;;      Params:         2       0       0       0       0       0       0
  5766 ;;      Locals:         0       0       0       0       0       0       0
  5767 ;;      Temps:          0       0       0       0       0       0       0
  5768 ;;      Totals:         2       0       0       0       0       0       0
  5769 ;;Total ram usage:        2 bytes
  5770 ;; Hardware stack levels used:    1
  5771 ;; Hardware stack levels required when called:    5
  5772 ;; This function calls:
  5773 ;;		_memset
  5774 ;; This function is called by:
  5775 ;;		_EUSART1_Initialize
  5776 ;; This function uses a non-reentrant model
  5777 ;;
  5778                           
  5779                           	psect	text33
  5780  001734                     __ptext33:
  5781                           	opt stack 0
  5782  001734                     _UART_buff_init:
  5783                           	opt stack 22
  5784                           
  5785                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  5786                           
  5787                           ;incstack = 0
  5788  001734  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  5789  001738  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  5790  00173C  0E00               	movlw	0
  5791  00173E  6E1E               	movwf	memset@c+1,c
  5792  001740  0E00               	movlw	0
  5793  001742  6E1D               	movwf	memset@c,c
  5794  001744  0E00               	movlw	0
  5795  001746  6E20               	movwf	memset@n+1,c
  5796  001748  0ECE               	movlw	206
  5797  00174A  6E1F               	movwf	memset@n,c
  5798  00174C  EC15  F00B         	call	_memset	;wreg free
  5799  001750  0012               	return		;funcret
  5800  001752                     __end_of_UART_buff_init:
  5801                           	opt stack 0
  5802                           tosu	equ	0xFFF
  5803                           tosh	equ	0xFFE
  5804                           tosl	equ	0xFFD
  5805                           pclath	equ	0xFFA
  5806                           tblptru	equ	0xFF8
  5807                           tblptrh	equ	0xFF7
  5808                           tblptrl	equ	0xFF6
  5809                           tablat	equ	0xFF5
  5810                           prodh	equ	0xFF4
  5811                           prodl	equ	0xFF3
  5812                           intcon	equ	0xFF2
  5813                           postinc0	equ	0xFEE
  5814                           wreg	equ	0xFE8
  5815                           indf2	equ	0xFDF
  5816                           postinc2	equ	0xFDE
  5817                           postdec2	equ	0xFDD
  5818                           plusw2	equ	0xFDB
  5819                           fsr2h	equ	0xFDA
  5820                           fsr2l	equ	0xFD9
  5821                           status	equ	0xFD8
  5822                           
  5823 ;; *************** function _memset *****************
  5824 ;; Defined at:
  5825 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  5826 ;; Parameters:    Size  Location     Type
  5827 ;;  p1              2   26[COMRAM] PTR void 
  5828 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  5829 ;;  c               2   28[COMRAM] int 
  5830 ;;  n               2   30[COMRAM] unsigned int 
  5831 ;; Auto vars:     Size  Location     Type
  5832 ;;  p               2   32[COMRAM] PTR unsigned char 
  5833 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  5834 ;; Return value:  Size  Location     Type
  5835 ;;                  2   26[COMRAM] PTR void 
  5836 ;; Registers used:
  5837 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5838 ;; Tracked objects:
  5839 ;;		On entry : 0/0
  5840 ;;		On exit  : 0/0
  5841 ;;		Unchanged: 0/0
  5842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5843 ;;      Params:         6       0       0       0       0       0       0
  5844 ;;      Locals:         2       0       0       0       0       0       0
  5845 ;;      Temps:          0       0       0       0       0       0       0
  5846 ;;      Totals:         8       0       0       0       0       0       0
  5847 ;;Total ram usage:        8 bytes
  5848 ;; Hardware stack levels used:    1
  5849 ;; Hardware stack levels required when called:    4
  5850 ;; This function calls:
  5851 ;;		Nothing
  5852 ;; This function is called by:
  5853 ;;		_FastTransfer_buffer_flush
  5854 ;;		_UART_buff_init
  5855 ;;		_UART_buff_flush
  5856 ;; This function uses a non-reentrant model
  5857 ;;
  5858                           
  5859                           	psect	text34
  5860  00162A                     __ptext34:
  5861                           	opt stack 0
  5862  00162A                     _memset:
  5863                           	opt stack 22
  5864                           
  5865                           ;incstack = 0
  5866  00162A  C01B  F021         	movff	memset@p1,memset@p
  5867  00162E  C01C  F022         	movff	memset@p1+1,memset@p+1
  5868  001632  D008               	goto	l2413
  5869  001634                     l2409:
  5870  001634  C021  FFD9         	movff	memset@p,fsr2l
  5871  001638  C022  FFDA         	movff	memset@p+1,fsr2h
  5872  00163C  C01D  FFDF         	movff	memset@c,indf2
  5873  001640  4A21               	infsnz	memset@p,f,c
  5874  001642  2A22               	incf	memset@p+1,f,c
  5875  001644                     l2413:
  5876  001644  061F               	decf	memset@n,f,c
  5877  001646  A0D8               	btfss	status,0,c
  5878  001648  0620               	decf	memset@n+1,f,c
  5879  00164A  281F               	incf	memset@n,w,c
  5880  00164C  E1F3               	bnz	l2409
  5881  00164E  2820               	incf	memset@n+1,w,c
  5882  001650  B4D8               	btfsc	status,2,c
  5883  001652  0012               	return	
  5884  001654  D7EF               	goto	l2409
  5885  001656                     __end_of_memset:
  5886                           	opt stack 0
  5887                           tosu	equ	0xFFF
  5888                           tosh	equ	0xFFE
  5889                           tosl	equ	0xFFD
  5890                           pclath	equ	0xFFA
  5891                           tblptru	equ	0xFF8
  5892                           tblptrh	equ	0xFF7
  5893                           tblptrl	equ	0xFF6
  5894                           tablat	equ	0xFF5
  5895                           prodh	equ	0xFF4
  5896                           prodl	equ	0xFF3
  5897                           intcon	equ	0xFF2
  5898                           postinc0	equ	0xFEE
  5899                           wreg	equ	0xFE8
  5900                           indf2	equ	0xFDF
  5901                           postinc2	equ	0xFDE
  5902                           postdec2	equ	0xFDD
  5903                           plusw2	equ	0xFDB
  5904                           fsr2h	equ	0xFDA
  5905                           fsr2l	equ	0xFD9
  5906                           status	equ	0xFD8
  5907                           
  5908 ;; *************** function _SetTime *****************
  5909 ;; Defined at:
  5910 ;;		line 98 in file "tmr0.c"
  5911 ;; Parameters:    Size  Location     Type
  5912 ;;		None
  5913 ;; Auto vars:     Size  Location     Type
  5914 ;;		None
  5915 ;; Return value:  Size  Location     Type
  5916 ;;                  1    wreg      void 
  5917 ;; Registers used:
  5918 ;;		wreg, status,2
  5919 ;; Tracked objects:
  5920 ;;		On entry : 0/0
  5921 ;;		On exit  : 0/0
  5922 ;;		Unchanged: 0/0
  5923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5924 ;;      Params:         0       0       0       0       0       0       0
  5925 ;;      Locals:         0       0       0       0       0       0       0
  5926 ;;      Temps:          0       0       0       0       0       0       0
  5927 ;;      Totals:         0       0       0       0       0       0       0
  5928 ;;Total ram usage:        0 bytes
  5929 ;; Hardware stack levels used:    1
  5930 ;; Hardware stack levels required when called:    4
  5931 ;; This function calls:
  5932 ;;		Nothing
  5933 ;; This function is called by:
  5934 ;;		_main
  5935 ;; This function uses a non-reentrant model
  5936 ;;
  5937                           
  5938                           	psect	text35
  5939  0017FA                     __ptext35:
  5940                           	opt stack 0
  5941  0017FA                     _SetTime:
  5942                           	opt stack 26
  5943                           
  5944                           ;tmr0.c: 99: time = 0;
  5945                           
  5946                           ;incstack = 0
  5947  0017FA  0E00               	movlw	0
  5948  0017FC  0100               	movlb	0	; () banked
  5949  0017FE  6F60               	movwf	_time& (0+255),b
  5950  001800  0E00               	movlw	0
  5951  001802  6F61               	movwf	(_time+1)& (0+255),b
  5952  001804  0E00               	movlw	0
  5953  001806  6F62               	movwf	(_time+2)& (0+255),b
  5954  001808  0E00               	movlw	0
  5955  00180A  6F63               	movwf	(_time+3)& (0+255),b
  5956                           
  5957                           ; BSR set to: 0
  5958  00180C  0012               	return		;funcret
  5959  00180E                     __end_of_SetTime:
  5960                           	opt stack 0
  5961                           tosu	equ	0xFFF
  5962                           tosh	equ	0xFFE
  5963                           tosl	equ	0xFFD
  5964                           pclath	equ	0xFFA
  5965                           tblptru	equ	0xFF8
  5966                           tblptrh	equ	0xFF7
  5967                           tblptrl	equ	0xFF6
  5968                           tablat	equ	0xFF5
  5969                           prodh	equ	0xFF4
  5970                           prodl	equ	0xFF3
  5971                           intcon	equ	0xFF2
  5972                           postinc0	equ	0xFEE
  5973                           wreg	equ	0xFE8
  5974                           indf2	equ	0xFDF
  5975                           postinc2	equ	0xFDE
  5976                           postdec2	equ	0xFDD
  5977                           plusw2	equ	0xFDB
  5978                           fsr2h	equ	0xFDA
  5979                           fsr2l	equ	0xFD9
  5980                           status	equ	0xFD8
  5981                           
  5982 ;; *************** function _ReadFaults *****************
  5983 ;; Defined at:
  5984 ;;		line 9 in file "Function.c"
  5985 ;; Parameters:    Size  Location     Type
  5986 ;;		None
  5987 ;; Auto vars:     Size  Location     Type
  5988 ;;		None
  5989 ;; Return value:  Size  Location     Type
  5990 ;;                  1    wreg      void 
  5991 ;; Registers used:
  5992 ;;		wreg, status,2, status,0
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5998 ;;      Params:         0       0       0       0       0       0       0
  5999 ;;      Locals:         0       0       0       0       0       0       0
  6000 ;;      Temps:          1       0       0       0       0       0       0
  6001 ;;      Totals:         1       0       0       0       0       0       0
  6002 ;;Total ram usage:        1 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; Hardware stack levels required when called:    4
  6005 ;; This function calls:
  6006 ;;		Nothing
  6007 ;; This function is called by:
  6008 ;;		_main
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           	psect	text36
  6013  000F66                     __ptext36:
  6014                           	opt stack 0
  6015  000F66                     _ReadFaults:
  6016                           	opt stack 26
  6017                           
  6018                           ;Function.c: 10: ByteHigh = ByteHigh | ((LATCbits.LATC5&0x01) << 0);
  6019                           
  6020                           ; BSR set to: 0
  6021                           ;incstack = 0
  6022  000F66  AA8B               	btfss	3979,5,c	;volatile
  6023  000F68  D002               	goto	u1010
  6024  000F6A  0E01               	movlw	1
  6025  000F6C  D001               	goto	u1016
  6026  000F6E                     u1010:
  6027  000F6E  0E00               	movlw	0
  6028  000F70                     u1016:
  6029  000F70  103B               	iorwf	_ByteHigh,w,c
  6030  000F72  6E3B               	movwf	_ByteHigh,c
  6031                           
  6032                           ;Function.c: 11: ByteHigh = ByteHigh | ((LATCbits.LATC4&0x01) << 1);
  6033  000F74  A88B               	btfss	3979,4,c	;volatile
  6034  000F76  D003               	goto	u1020
  6035  000F78  6A1B               	clrf	??_ReadFaults& (0+255),c
  6036  000F7A  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6037  000F7C  D001               	goto	u1028
  6038  000F7E                     u1020:
  6039  000F7E  6A1B               	clrf	??_ReadFaults& (0+255),c
  6040  000F80                     u1028:
  6041  000F80  90D8               	bcf	status,0,c
  6042  000F82  341B               	rlcf	??_ReadFaults,w,c
  6043  000F84  103B               	iorwf	_ByteHigh,w,c
  6044  000F86  6E3B               	movwf	_ByteHigh,c
  6045                           
  6046                           ;Function.c: 12: ByteHigh = ByteHigh | ((LATDbits.LATD3&0x01) << 2);
  6047  000F88  A68C               	btfss	3980,3,c	;volatile
  6048  000F8A  D003               	goto	u1030
  6049  000F8C  6A1B               	clrf	??_ReadFaults& (0+255),c
  6050  000F8E  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6051  000F90  D001               	goto	u1038
  6052  000F92                     u1030:
  6053  000F92  6A1B               	clrf	??_ReadFaults& (0+255),c
  6054  000F94                     u1038:
  6055  000F94  90D8               	bcf	status,0,c
  6056  000F96  361B               	rlcf	??_ReadFaults,f,c
  6057  000F98  90D8               	bcf	status,0,c
  6058  000F9A  341B               	rlcf	??_ReadFaults,w,c
  6059  000F9C  103B               	iorwf	_ByteHigh,w,c
  6060  000F9E  6E3B               	movwf	_ByteHigh,c
  6061                           
  6062                           ;Function.c: 13: ByteHigh = ByteHigh | ((LATDbits.LATD2&0x01) << 3);
  6063  000FA0  A48C               	btfss	3980,2,c	;volatile
  6064  000FA2  D003               	goto	u1040
  6065  000FA4  6A1B               	clrf	??_ReadFaults& (0+255),c
  6066  000FA6  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6067  000FA8  D001               	goto	u1048
  6068  000FAA                     u1040:
  6069  000FAA  6A1B               	clrf	??_ReadFaults& (0+255),c
  6070  000FAC                     u1048:
  6071  000FAC  90D8               	bcf	status,0,c
  6072  000FAE  361B               	rlcf	??_ReadFaults,f,c
  6073  000FB0  90D8               	bcf	status,0,c
  6074  000FB2  361B               	rlcf	??_ReadFaults,f,c
  6075  000FB4  90D8               	bcf	status,0,c
  6076  000FB6  341B               	rlcf	??_ReadFaults,w,c
  6077  000FB8  103B               	iorwf	_ByteHigh,w,c
  6078  000FBA  6E3B               	movwf	_ByteHigh,c
  6079                           
  6080                           ;Function.c: 14: ByteHigh = ByteHigh | ((LATDbits.LATD1&0x01) << 4);
  6081  000FBC  A28C               	btfss	3980,1,c	;volatile
  6082  000FBE  D003               	goto	u1050
  6083  000FC0  6A1B               	clrf	??_ReadFaults& (0+255),c
  6084  000FC2  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6085  000FC4  D001               	goto	u1058
  6086  000FC6                     u1050:
  6087  000FC6  6A1B               	clrf	??_ReadFaults& (0+255),c
  6088  000FC8                     u1058:
  6089  000FC8  381B               	swapf	??_ReadFaults,w,c
  6090  000FCA  0BF0               	andlw	240
  6091  000FCC  103B               	iorwf	_ByteHigh,w,c
  6092  000FCE  6E3B               	movwf	_ByteHigh,c
  6093                           
  6094                           ;Function.c: 15: ByteHigh = ByteHigh | ((LATDbits.LATD0&0x01) << 5);
  6095  000FD0  A08C               	btfss	3980,0,c	;volatile
  6096  000FD2  D003               	goto	u1060
  6097  000FD4  0E20               	movlw	32
  6098  000FD6  6E1B               	movwf	??_ReadFaults& (0+255),c
  6099  000FD8  D001               	goto	u1075
  6100  000FDA                     u1060:
  6101  000FDA  6A1B               	clrf	??_ReadFaults& (0+255),c
  6102  000FDC                     u1075:
  6103  000FDC  501B               	movf	??_ReadFaults,w,c
  6104  000FDE  103B               	iorwf	_ByteHigh,w,c
  6105  000FE0  6E3B               	movwf	_ByteHigh,c
  6106                           
  6107                           ;Function.c: 16: ByteHigh = ByteHigh | ((LATCbits.LATC3&0x01) << 6);
  6108  000FE2  A68B               	btfss	3979,3,c	;volatile
  6109  000FE4  D003               	goto	u1080
  6110  000FE6  0E40               	movlw	64
  6111  000FE8  6E1B               	movwf	??_ReadFaults& (0+255),c
  6112  000FEA  D001               	goto	u1095
  6113  000FEC                     u1080:
  6114  000FEC  6A1B               	clrf	??_ReadFaults& (0+255),c
  6115  000FEE                     u1095:
  6116  000FEE  501B               	movf	??_ReadFaults,w,c
  6117  000FF0  103B               	iorwf	_ByteHigh,w,c
  6118  000FF2  6E3B               	movwf	_ByteHigh,c
  6119                           
  6120                           ;Function.c: 17: ByteHigh = ByteHigh | ((LATCbits.LATC2&0x01) << 7);
  6121  000FF4  A48B               	btfss	3979,2,c	;volatile
  6122  000FF6  D003               	goto	u1100
  6123  000FF8  0E80               	movlw	128
  6124  000FFA  6E1B               	movwf	??_ReadFaults& (0+255),c
  6125  000FFC  D001               	goto	u1115
  6126  000FFE                     u1100:
  6127  000FFE  6A1B               	clrf	??_ReadFaults& (0+255),c
  6128  001000                     u1115:
  6129  001000  501B               	movf	??_ReadFaults,w,c
  6130  001002  103B               	iorwf	_ByteHigh,w,c
  6131  001004  6E3B               	movwf	_ByteHigh,c
  6132                           
  6133                           ;Function.c: 18: ByteLow = ByteLow | ((LATCbits.LATC1&0x01) << 0);
  6134  001006  A28B               	btfss	3979,1,c	;volatile
  6135  001008  D002               	goto	u1120
  6136  00100A  0E01               	movlw	1
  6137  00100C  D001               	goto	u1126
  6138  00100E                     u1120:
  6139  00100E  0E00               	movlw	0
  6140  001010                     u1126:
  6141  001010  103C               	iorwf	_ByteLow,w,c
  6142  001012  6E3C               	movwf	_ByteLow,c
  6143                           
  6144                           ;Function.c: 19: ByteLow = ByteLow | ((LATAbits.LATA7&0x01) << 1);
  6145  001014  AE89               	btfss	3977,7,c	;volatile
  6146  001016  D003               	goto	u1130
  6147  001018  6A1B               	clrf	??_ReadFaults& (0+255),c
  6148  00101A  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6149  00101C  D001               	goto	u1138
  6150  00101E                     u1130:
  6151  00101E  6A1B               	clrf	??_ReadFaults& (0+255),c
  6152  001020                     u1138:
  6153  001020  90D8               	bcf	status,0,c
  6154  001022  341B               	rlcf	??_ReadFaults,w,c
  6155  001024  103C               	iorwf	_ByteLow,w,c
  6156  001026  6E3C               	movwf	_ByteLow,c
  6157                           
  6158                           ;Function.c: 20: ByteLow = ByteLow | ((LATCbits.LATC0&0x01) << 1);
  6159  001028  A08B               	btfss	3979,0,c	;volatile
  6160  00102A  D003               	goto	u1140
  6161  00102C  6A1B               	clrf	??_ReadFaults& (0+255),c
  6162  00102E  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6163  001030  D001               	goto	u1148
  6164  001032                     u1140:
  6165  001032  6A1B               	clrf	??_ReadFaults& (0+255),c
  6166  001034                     u1148:
  6167  001034  90D8               	bcf	status,0,c
  6168  001036  341B               	rlcf	??_ReadFaults,w,c
  6169  001038  103C               	iorwf	_ByteLow,w,c
  6170  00103A  6E3C               	movwf	_ByteLow,c
  6171  00103C  0012               	return		;funcret
  6172  00103E                     __end_of_ReadFaults:
  6173                           	opt stack 0
  6174                           tosu	equ	0xFFF
  6175                           tosh	equ	0xFFE
  6176                           tosl	equ	0xFFD
  6177                           pclath	equ	0xFFA
  6178                           tblptru	equ	0xFF8
  6179                           tblptrh	equ	0xFF7
  6180                           tblptrl	equ	0xFF6
  6181                           tablat	equ	0xFF5
  6182                           prodh	equ	0xFF4
  6183                           prodl	equ	0xFF3
  6184                           intcon	equ	0xFF2
  6185                           postinc0	equ	0xFEE
  6186                           wreg	equ	0xFE8
  6187                           indf2	equ	0xFDF
  6188                           postinc2	equ	0xFDE
  6189                           postdec2	equ	0xFDD
  6190                           plusw2	equ	0xFDB
  6191                           fsr2h	equ	0xFDA
  6192                           fsr2l	equ	0xFD9
  6193                           status	equ	0xFD8
  6194                           
  6195 ;; *************** function _GetTime *****************
  6196 ;; Defined at:
  6197 ;;		line 94 in file "tmr0.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;		None
  6200 ;; Auto vars:     Size  Location     Type
  6201 ;;		None
  6202 ;; Return value:  Size  Location     Type
  6203 ;;                  4   26[COMRAM] long 
  6204 ;; Registers used:
  6205 ;;		None
  6206 ;; Tracked objects:
  6207 ;;		On entry : 0/0
  6208 ;;		On exit  : 0/0
  6209 ;;		Unchanged: 0/0
  6210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6211 ;;      Params:         4       0       0       0       0       0       0
  6212 ;;      Locals:         0       0       0       0       0       0       0
  6213 ;;      Temps:          0       0       0       0       0       0       0
  6214 ;;      Totals:         4       0       0       0       0       0       0
  6215 ;;Total ram usage:        4 bytes
  6216 ;; Hardware stack levels used:    1
  6217 ;; Hardware stack levels required when called:    4
  6218 ;; This function calls:
  6219 ;;		Nothing
  6220 ;; This function is called by:
  6221 ;;		_main
  6222 ;; This function uses a non-reentrant model
  6223 ;;
  6224                           
  6225                           	psect	text37
  6226  00180E                     __ptext37:
  6227                           	opt stack 0
  6228  00180E                     _GetTime:
  6229                           	opt stack 26
  6230                           
  6231                           ;tmr0.c: 95: return time;
  6232                           
  6233                           ;incstack = 0
  6234  00180E  C060  F01B         	movff	_time,?_GetTime
  6235  001812  C061  F01C         	movff	_time+1,?_GetTime+1
  6236  001816  C062  F01D         	movff	_time+2,?_GetTime+2
  6237  00181A  C063  F01E         	movff	_time+3,?_GetTime+3
  6238  00181E  0012               	return		;funcret
  6239  001820                     __end_of_GetTime:
  6240                           	opt stack 0
  6241                           tosu	equ	0xFFF
  6242                           tosh	equ	0xFFE
  6243                           tosl	equ	0xFFD
  6244                           pclath	equ	0xFFA
  6245                           tblptru	equ	0xFF8
  6246                           tblptrh	equ	0xFF7
  6247                           tblptrl	equ	0xFF6
  6248                           tablat	equ	0xFF5
  6249                           prodh	equ	0xFF4
  6250                           prodl	equ	0xFF3
  6251                           intcon	equ	0xFF2
  6252                           postinc0	equ	0xFEE
  6253                           wreg	equ	0xFE8
  6254                           indf2	equ	0xFDF
  6255                           postinc2	equ	0xFDE
  6256                           postdec2	equ	0xFDD
  6257                           plusw2	equ	0xFDB
  6258                           fsr2h	equ	0xFDA
  6259                           fsr2l	equ	0xFD9
  6260                           status	equ	0xFD8
  6261                           
  6262 ;; *************** function _INTERRUPT_InterruptManager *****************
  6263 ;; Defined at:
  6264 ;;		line 164 in file "Function.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;		None
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;		None
  6269 ;; Return value:  Size  Location     Type
  6270 ;;                  1    wreg      void 
  6271 ;; Registers used:
  6272 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6278 ;;      Params:         0       0       0       0       0       0       0
  6279 ;;      Locals:         0       0       0       0       0       0       0
  6280 ;;      Temps:         14       0       0       0       0       0       0
  6281 ;;      Totals:        14       0       0       0       0       0       0
  6282 ;;Total ram usage:       14 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; Hardware stack levels required when called:    3
  6285 ;; This function calls:
  6286 ;;		_EUSART1_Receive_ISR
  6287 ;;		_EUSART1_Transmit_ISR
  6288 ;;		_TMR0_ISR
  6289 ;; This function is called by:
  6290 ;;		Interrupt level 2
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           	psect	intcode
  6295  000008                     __pintcode:
  6296                           	opt stack 0
  6297  000008                     _INTERRUPT_InterruptManager:
  6298                           	opt stack 21
  6299                           
  6300                           ;incstack = 0
  6301  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6302  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  6303  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6304  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6305  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6306  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6307  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6308  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6309  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6310  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6311  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6312  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6313  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6314  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6315  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6316                           
  6317                           ;Function.c: 167: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  6318  000042  BA9D               	btfsc	3997,5,c	;volatile
  6319  000044  AA9E               	btfss	3998,5,c	;volatile
  6320  000046  D003               	goto	i2l453
  6321                           
  6322                           ;Function.c: 168: {
  6323                           ;Function.c: 169: EUSART1_Receive_ISR();
  6324  000048  ECA9  F00B         	call	_EUSART1_Receive_ISR	;wreg free
  6325                           
  6326                           ;Function.c: 170: }
  6327  00004C  D00B               	goto	i2l459
  6328  00004E                     i2l453:
  6329                           
  6330                           ;Function.c: 171: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  6331  00004E  B89D               	btfsc	3997,4,c	;volatile
  6332  000050  A89E               	btfss	3998,4,c	;volatile
  6333  000052  D003               	goto	i2l455
  6334                           
  6335                           ;Function.c: 172: {
  6336                           ;Function.c: 173: EUSART1_Transmit_ISR();
  6337  000054  ECCE  F00A         	call	_EUSART1_Transmit_ISR	;wreg free
  6338                           
  6339                           ;Function.c: 174: }
  6340  000058  D005               	goto	i2l459
  6341  00005A                     i2l455:
  6342                           
  6343                           ;Function.c: 175: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  6344  00005A  BAF2               	btfsc	intcon,5,c	;volatile
  6345  00005C  A4F2               	btfss	intcon,2,c	;volatile
  6346  00005E  D002               	goto	i2l459
  6347                           
  6348                           ;Function.c: 176: {
  6349                           ;Function.c: 177: TMR0_ISR();
  6350  000060  ECB8  F00B         	call	_TMR0_ISR	;wreg free
  6351  000064                     i2l459:
  6352  000064  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6353  000068  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6354  00006C  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6355  000070  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6356  000074  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6357  000078  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6358  00007C  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6359  000080  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6360  000084  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6361  000088  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6362  00008C  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6363  000090  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6364  000094  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6365  000098  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6366  00009C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6367  00009E  0011               	retfie		f
  6368  0000A0                     __end_of_INTERRUPT_InterruptManager:
  6369                           	opt stack 0
  6370                           tosu	equ	0xFFF
  6371                           tosh	equ	0xFFE
  6372                           tosl	equ	0xFFD
  6373                           pclatu	equ	0xFFB
  6374                           pclath	equ	0xFFA
  6375                           tblptru	equ	0xFF8
  6376                           tblptrh	equ	0xFF7
  6377                           tblptrl	equ	0xFF6
  6378                           tablat	equ	0xFF5
  6379                           prodh	equ	0xFF4
  6380                           prodl	equ	0xFF3
  6381                           intcon	equ	0xFF2
  6382                           postinc0	equ	0xFEE
  6383                           fsr0h	equ	0xFEA
  6384                           fsr0l	equ	0xFE9
  6385                           wreg	equ	0xFE8
  6386                           fsr1h	equ	0xFE2
  6387                           fsr1l	equ	0xFE1
  6388                           indf2	equ	0xFDF
  6389                           postinc2	equ	0xFDE
  6390                           postdec2	equ	0xFDD
  6391                           plusw2	equ	0xFDB
  6392                           fsr2h	equ	0xFDA
  6393                           fsr2l	equ	0xFD9
  6394                           status	equ	0xFD8
  6395                           
  6396 ;; *************** function _TMR0_ISR *****************
  6397 ;; Defined at:
  6398 ;;		line 82 in file "tmr0.c"
  6399 ;; Parameters:    Size  Location     Type
  6400 ;;		None
  6401 ;; Auto vars:     Size  Location     Type
  6402 ;;		None
  6403 ;; Return value:  Size  Location     Type
  6404 ;;                  1    wreg      void 
  6405 ;; Registers used:
  6406 ;;		wreg, status,2, status,0
  6407 ;; Tracked objects:
  6408 ;;		On entry : 0/0
  6409 ;;		On exit  : 0/0
  6410 ;;		Unchanged: 0/0
  6411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6412 ;;      Params:         0       0       0       0       0       0       0
  6413 ;;      Locals:         0       0       0       0       0       0       0
  6414 ;;      Temps:          0       0       0       0       0       0       0
  6415 ;;      Totals:         0       0       0       0       0       0       0
  6416 ;;Total ram usage:        0 bytes
  6417 ;; Hardware stack levels used:    1
  6418 ;; This function calls:
  6419 ;;		Nothing
  6420 ;; This function is called by:
  6421 ;;		_INTERRUPT_InterruptManager
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           	psect	text39
  6426  001770                     __ptext39:
  6427                           	opt stack 0
  6428  001770                     _TMR0_ISR:
  6429                           	opt stack 23
  6430                           
  6431                           ;tmr0.c: 85: TMR0H = timer0ReloadVal16bit >> 8;
  6432                           
  6433                           ;incstack = 0
  6434  001770  5039               	movf	_timer0ReloadVal16bit+1,w,c	;volatile
  6435  001772  6ED7               	movwf	4055,c	;volatile
  6436                           
  6437                           ;tmr0.c: 86: TMR0L = (uint8_t) timer0ReloadVal16bit;
  6438  001774  C038  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
  6439                           
  6440                           ;tmr0.c: 88: time++;
  6441  001778  0E01               	movlw	1
  6442  00177A  0100               	movlb	0	; () banked
  6443  00177C  2760               	addwf	_time& (0+255),f,b
  6444  00177E  0E00               	movlw	0
  6445  001780  2361               	addwfc	(_time+1)& (0+255),f,b
  6446  001782  2362               	addwfc	(_time+2)& (0+255),f,b
  6447  001784  2363               	addwfc	(_time+3)& (0+255),f,b
  6448                           
  6449                           ; BSR set to: 0
  6450                           ;tmr0.c: 91: INTCONbits.TMR0IF = 0;
  6451  001786  94F2               	bcf	intcon,2,c	;volatile
  6452                           
  6453                           ; BSR set to: 0
  6454  001788  0012               	return		;funcret
  6455  00178A                     __end_of_TMR0_ISR:
  6456                           	opt stack 0
  6457                           tosu	equ	0xFFF
  6458                           tosh	equ	0xFFE
  6459                           tosl	equ	0xFFD
  6460                           pclatu	equ	0xFFB
  6461                           pclath	equ	0xFFA
  6462                           tblptru	equ	0xFF8
  6463                           tblptrh	equ	0xFF7
  6464                           tblptrl	equ	0xFF6
  6465                           tablat	equ	0xFF5
  6466                           prodh	equ	0xFF4
  6467                           prodl	equ	0xFF3
  6468                           intcon	equ	0xFF2
  6469                           postinc0	equ	0xFEE
  6470                           fsr0h	equ	0xFEA
  6471                           fsr0l	equ	0xFE9
  6472                           wreg	equ	0xFE8
  6473                           fsr1h	equ	0xFE2
  6474                           fsr1l	equ	0xFE1
  6475                           indf2	equ	0xFDF
  6476                           postinc2	equ	0xFDE
  6477                           postdec2	equ	0xFDD
  6478                           plusw2	equ	0xFDB
  6479                           fsr2h	equ	0xFDA
  6480                           fsr2l	equ	0xFD9
  6481                           status	equ	0xFD8
  6482                           
  6483 ;; *************** function _EUSART1_Transmit_ISR *****************
  6484 ;; Defined at:
  6485 ;;		line 150 in file "UART.c"
  6486 ;; Parameters:    Size  Location     Type
  6487 ;;		None
  6488 ;; Auto vars:     Size  Location     Type
  6489 ;;		None
  6490 ;; Return value:  Size  Location     Type
  6491 ;;                  1    wreg      void 
  6492 ;; Registers used:
  6493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6494 ;; Tracked objects:
  6495 ;;		On entry : 0/0
  6496 ;;		On exit  : 0/0
  6497 ;;		Unchanged: 0/0
  6498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6499 ;;      Params:         0       0       0       0       0       0       0
  6500 ;;      Locals:         0       0       0       0       0       0       0
  6501 ;;      Temps:          0       0       0       0       0       0       0
  6502 ;;      Totals:         0       0       0       0       0       0       0
  6503 ;;Total ram usage:        0 bytes
  6504 ;; Hardware stack levels used:    1
  6505 ;; Hardware stack levels required when called:    2
  6506 ;; This function calls:
  6507 ;;		i2_UART_buff_get
  6508 ;;		i2_UART_buff_size
  6509 ;; This function is called by:
  6510 ;;		_INTERRUPT_InterruptManager
  6511 ;; This function uses a non-reentrant model
  6512 ;;
  6513                           
  6514                           	psect	text40
  6515  00159C                     __ptext40:
  6516                           	opt stack 0
  6517  00159C                     _EUSART1_Transmit_ISR:
  6518                           	opt stack 21
  6519                           
  6520                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  6521                           
  6522                           ; BSR set to: 0
  6523                           ;incstack = 0
  6524  00159C  0E00               	movlw	low _output_buffer
  6525  00159E  6E01               	movwf	i2UART_buff_size@_this,c
  6526  0015A0  0E04               	movlw	high _output_buffer
  6527  0015A2  6E02               	movwf	i2UART_buff_size@_this+1,c
  6528  0015A4  ECF2  F00B         	call	i2_UART_buff_size	;wreg free
  6529  0015A8  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  6530  0015AA  D00D               	goto	i2l2317
  6531  0015AC  5002               	movf	?i2_UART_buff_size+1,w,c
  6532  0015AE  E103               	bnz	i2u228_40
  6533  0015B0  0401               	decf	?i2_UART_buff_size,w,c
  6534  0015B2  A0D8               	btfss	status,0,c
  6535  0015B4  D008               	goto	i2l2317
  6536  0015B6                     i2u228_40:
  6537                           
  6538                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  6539  0015B6  0E00               	movlw	low _output_buffer
  6540  0015B8  6E07               	movwf	i2UART_buff_get@_this,c
  6541  0015BA  0E04               	movlw	high _output_buffer
  6542  0015BC  6E08               	movwf	i2UART_buff_get@_this+1,c
  6543  0015BE  ECD3  F008         	call	i2_UART_buff_get	;wreg free
  6544  0015C2  6EAD               	movwf	4013,c	;volatile
  6545                           
  6546                           ;UART.c: 154: } else {
  6547  0015C4  0012               	return	
  6548  0015C6                     i2l2317:
  6549                           
  6550                           ;UART.c: 155: Transmit_stall = 1;
  6551  0015C6  0E01               	movlw	1
  6552  0015C8  6E44               	movwf	_Transmit_stall,c
  6553                           
  6554                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  6555  0015CA  989D               	bcf	3997,4,c	;volatile
  6556  0015CC  0012               	return	
  6557  0015CE                     __end_of_EUSART1_Transmit_ISR:
  6558                           	opt stack 0
  6559                           tosu	equ	0xFFF
  6560                           tosh	equ	0xFFE
  6561                           tosl	equ	0xFFD
  6562                           pclatu	equ	0xFFB
  6563                           pclath	equ	0xFFA
  6564                           tblptru	equ	0xFF8
  6565                           tblptrh	equ	0xFF7
  6566                           tblptrl	equ	0xFF6
  6567                           tablat	equ	0xFF5
  6568                           prodh	equ	0xFF4
  6569                           prodl	equ	0xFF3
  6570                           intcon	equ	0xFF2
  6571                           postinc0	equ	0xFEE
  6572                           fsr0h	equ	0xFEA
  6573                           fsr0l	equ	0xFE9
  6574                           wreg	equ	0xFE8
  6575                           fsr1h	equ	0xFE2
  6576                           fsr1l	equ	0xFE1
  6577                           indf2	equ	0xFDF
  6578                           postinc2	equ	0xFDE
  6579                           postdec2	equ	0xFDD
  6580                           plusw2	equ	0xFDB
  6581                           fsr2h	equ	0xFDA
  6582                           fsr2l	equ	0xFD9
  6583                           status	equ	0xFD8
  6584                           
  6585 ;; *************** function i2_UART_buff_size *****************
  6586 ;; Defined at:
  6587 ;;		line 102 in file "UART.c"
  6588 ;; Parameters:    Size  Location     Type
  6589 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  6590 ;;		 -> output_buffer(206), input_buffer(206), 
  6591 ;; Auto vars:     Size  Location     Type
  6592 ;;		None
  6593 ;; Return value:  Size  Location     Type
  6594 ;;                  2    0[COMRAM] int 
  6595 ;; Registers used:
  6596 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6597 ;; Tracked objects:
  6598 ;;		On entry : 0/0
  6599 ;;		On exit  : 0/0
  6600 ;;		Unchanged: 0/0
  6601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6602 ;;      Params:         2       0       0       0       0       0       0
  6603 ;;      Locals:         0       0       0       0       0       0       0
  6604 ;;      Temps:          0       0       0       0       0       0       0
  6605 ;;      Totals:         2       0       0       0       0       0       0
  6606 ;;Total ram usage:        2 bytes
  6607 ;; Hardware stack levels used:    1
  6608 ;; This function calls:
  6609 ;;		Nothing
  6610 ;; This function is called by:
  6611 ;;		_EUSART1_Transmit_ISR
  6612 ;; This function uses a non-reentrant model
  6613 ;;
  6614                           
  6615                           	psect	text41
  6616  0017E4                     __ptext41:
  6617                           	opt stack 0
  6618  0017E4                     i2_UART_buff_size:
  6619                           	opt stack 22
  6620                           
  6621                           ;UART.c: 103: return (_this->count);
  6622                           
  6623                           ;incstack = 0
  6624  0017E4  EE20 F0CC          	lfsr	2,204
  6625  0017E8  5001               	movf	i2UART_buff_size@_this,w,c
  6626  0017EA  26D9               	addwf	fsr2l,f,c
  6627  0017EC  5002               	movf	i2UART_buff_size@_this+1,w,c
  6628  0017EE  22DA               	addwfc	fsr2h,f,c
  6629  0017F0  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  6630  0017F4  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  6631  0017F8  0012               	return	
  6632  0017FA                     __end_ofi2_UART_buff_size:
  6633                           	opt stack 0
  6634                           tosu	equ	0xFFF
  6635                           tosh	equ	0xFFE
  6636                           tosl	equ	0xFFD
  6637                           pclatu	equ	0xFFB
  6638                           pclath	equ	0xFFA
  6639                           tblptru	equ	0xFF8
  6640                           tblptrh	equ	0xFF7
  6641                           tblptrl	equ	0xFF6
  6642                           tablat	equ	0xFF5
  6643                           prodh	equ	0xFF4
  6644                           prodl	equ	0xFF3
  6645                           intcon	equ	0xFF2
  6646                           postinc0	equ	0xFEE
  6647                           fsr0h	equ	0xFEA
  6648                           fsr0l	equ	0xFE9
  6649                           wreg	equ	0xFE8
  6650                           fsr1h	equ	0xFE2
  6651                           fsr1l	equ	0xFE1
  6652                           indf2	equ	0xFDF
  6653                           postinc2	equ	0xFDE
  6654                           postdec2	equ	0xFDD
  6655                           plusw2	equ	0xFDB
  6656                           fsr2h	equ	0xFDA
  6657                           fsr2l	equ	0xFD9
  6658                           status	equ	0xFD8
  6659                           
  6660 ;; *************** function i2_UART_buff_get *****************
  6661 ;; Defined at:
  6662 ;;		line 81 in file "UART.c"
  6663 ;; Parameters:    Size  Location     Type
  6664 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  6665 ;;		 -> output_buffer(206), input_buffer(206), 
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  6668 ;; Return value:  Size  Location     Type
  6669 ;;                  1    wreg      unsigned char 
  6670 ;; Registers used:
  6671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6672 ;; Tracked objects:
  6673 ;;		On entry : 0/0
  6674 ;;		On exit  : 0/0
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6677 ;;      Params:         2       0       0       0       0       0       0
  6678 ;;      Locals:         1       0       0       0       0       0       0
  6679 ;;      Temps:          2       0       0       0       0       0       0
  6680 ;;      Totals:         5       0       0       0       0       0       0
  6681 ;;Total ram usage:        5 bytes
  6682 ;; Hardware stack levels used:    1
  6683 ;; Hardware stack levels required when called:    1
  6684 ;; This function calls:
  6685 ;;		i2_UART_buff_modulo_inc
  6686 ;; This function is called by:
  6687 ;;		_EUSART1_Transmit_ISR
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           	psect	text42
  6692  0011A6                     __ptext42:
  6693                           	opt stack 0
  6694  0011A6                     i2_UART_buff_get:
  6695                           	opt stack 21
  6696                           
  6697                           ;UART.c: 82: unsigned char c;
  6698                           ;UART.c: 83: if (_this->count > 0) {
  6699                           
  6700                           ;incstack = 0
  6701  0011A6  EE20 F0CC          	lfsr	2,204
  6702  0011AA  5007               	movf	i2UART_buff_get@_this,w,c
  6703  0011AC  26D9               	addwf	fsr2l,f,c
  6704  0011AE  5008               	movf	i2UART_buff_get@_this+1,w,c
  6705  0011B0  22DA               	addwfc	fsr2h,f,c
  6706  0011B2  0E01               	movlw	1
  6707  0011B4  BEDB               	btfsc	plusw2,7,c
  6708  0011B6  D03C               	goto	i2l2281
  6709  0011B8  0E01               	movlw	1
  6710  0011BA  50DB               	movf	plusw2,w,c
  6711  0011BC  E103               	bnz	i2u225_40
  6712  0011BE  04DE               	decf	postinc2,w,c
  6713  0011C0  A0D8               	btfss	status,0,c
  6714  0011C2  D036               	goto	i2l2281
  6715  0011C4                     i2u225_40:
  6716                           
  6717                           ;UART.c: 84: c = _this->buf[_this->tail];
  6718  0011C4  EE20 F0CA          	lfsr	2,202
  6719  0011C8  5007               	movf	i2UART_buff_get@_this,w,c
  6720  0011CA  26D9               	addwf	fsr2l,f,c
  6721  0011CC  5008               	movf	i2UART_buff_get@_this+1,w,c
  6722  0011CE  22DA               	addwfc	fsr2h,f,c
  6723  0011D0  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  6724  0011D4  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  6725  0011D8  5009               	movf	??i2_UART_buff_get,w,c
  6726  0011DA  2407               	addwf	i2UART_buff_get@_this,w,c
  6727  0011DC  6ED9               	movwf	fsr2l,c
  6728  0011DE  500A               	movf	??i2_UART_buff_get+1,w,c
  6729  0011E0  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  6730  0011E2  6EDA               	movwf	fsr2h,c
  6731  0011E4  50DF               	movf	indf2,w,c
  6732  0011E6  6E0B               	movwf	i2UART_buff_get@c,c
  6733                           
  6734                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  6735  0011E8  EE20 F0CA          	lfsr	2,202
  6736  0011EC  5007               	movf	i2UART_buff_get@_this,w,c
  6737  0011EE  26D9               	addwf	fsr2l,f,c
  6738  0011F0  5008               	movf	i2UART_buff_get@_this+1,w,c
  6739  0011F2  22DA               	addwfc	fsr2h,f,c
  6740  0011F4  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  6741  0011F8  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  6742  0011FC  0E00               	movlw	0
  6743  0011FE  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  6744  001200  0EC8               	movlw	200
  6745  001202  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  6746  001204  EC55  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  6747  001208  EE20 F0CA          	lfsr	2,202
  6748  00120C  5007               	movf	i2UART_buff_get@_this,w,c
  6749  00120E  26D9               	addwf	fsr2l,f,c
  6750  001210  5008               	movf	i2UART_buff_get@_this+1,w,c
  6751  001212  22DA               	addwfc	fsr2h,f,c
  6752  001214  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  6753  001218  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  6754                           
  6755                           ;UART.c: 86: --_this->count;
  6756  00121C  EE20 F0CC          	lfsr	2,204
  6757  001220  5007               	movf	i2UART_buff_get@_this,w,c
  6758  001222  26D9               	addwf	fsr2l,f,c
  6759  001224  5008               	movf	i2UART_buff_get@_this+1,w,c
  6760  001226  22DA               	addwfc	fsr2h,f,c
  6761  001228  06DE               	decf	postinc2,f,c
  6762  00122A  0E00               	movlw	0
  6763  00122C  5ADD               	subwfb	postdec2,f,c
  6764                           
  6765                           ;UART.c: 87: } else {
  6766  00122E  D002               	goto	i2l290
  6767  001230                     i2l2281:
  6768                           
  6769                           ;UART.c: 88: c = 0;
  6770  001230  0E00               	movlw	0
  6771  001232  6E0B               	movwf	i2UART_buff_get@c,c
  6772  001234                     i2l290:
  6773                           
  6774                           ;UART.c: 89: }
  6775                           ;UART.c: 90: return (c);
  6776  001234  500B               	movf	i2UART_buff_get@c,w,c
  6777  001236  0012               	return	
  6778  001238                     __end_ofi2_UART_buff_get:
  6779                           	opt stack 0
  6780                           tosu	equ	0xFFF
  6781                           tosh	equ	0xFFE
  6782                           tosl	equ	0xFFD
  6783                           pclatu	equ	0xFFB
  6784                           pclath	equ	0xFFA
  6785                           tblptru	equ	0xFF8
  6786                           tblptrh	equ	0xFF7
  6787                           tblptrl	equ	0xFF6
  6788                           tablat	equ	0xFF5
  6789                           prodh	equ	0xFF4
  6790                           prodl	equ	0xFF3
  6791                           intcon	equ	0xFF2
  6792                           postinc0	equ	0xFEE
  6793                           fsr0h	equ	0xFEA
  6794                           fsr0l	equ	0xFE9
  6795                           wreg	equ	0xFE8
  6796                           fsr1h	equ	0xFE2
  6797                           fsr1l	equ	0xFE1
  6798                           indf2	equ	0xFDF
  6799                           postinc2	equ	0xFDE
  6800                           postdec2	equ	0xFDD
  6801                           plusw2	equ	0xFDB
  6802                           fsr2h	equ	0xFDA
  6803                           fsr2l	equ	0xFD9
  6804                           status	equ	0xFD8
  6805                           
  6806 ;; *************** function _EUSART1_Receive_ISR *****************
  6807 ;; Defined at:
  6808 ;;		line 139 in file "UART.c"
  6809 ;; Parameters:    Size  Location     Type
  6810 ;;		None
  6811 ;; Auto vars:     Size  Location     Type
  6812 ;;  data            1   11[COMRAM] unsigned char 
  6813 ;; Return value:  Size  Location     Type
  6814 ;;                  1    wreg      void 
  6815 ;; Registers used:
  6816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6817 ;; Tracked objects:
  6818 ;;		On entry : 0/0
  6819 ;;		On exit  : 0/0
  6820 ;;		Unchanged: 0/0
  6821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6822 ;;      Params:         0       0       0       0       0       0       0
  6823 ;;      Locals:         1       0       0       0       0       0       0
  6824 ;;      Temps:          0       0       0       0       0       0       0
  6825 ;;      Totals:         1       0       0       0       0       0       0
  6826 ;;Total ram usage:        1 bytes
  6827 ;; Hardware stack levels used:    1
  6828 ;; Hardware stack levels required when called:    2
  6829 ;; This function calls:
  6830 ;;		i2_UART_buff_put
  6831 ;; This function is called by:
  6832 ;;		_INTERRUPT_InterruptManager
  6833 ;; This function uses a non-reentrant model
  6834 ;;
  6835                           
  6836                           	psect	text43
  6837  001752                     __ptext43:
  6838                           	opt stack 0
  6839  001752                     _EUSART1_Receive_ISR:
  6840                           	opt stack 21
  6841                           
  6842                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  6843                           
  6844                           ;incstack = 0
  6845  001752  A2AB               	btfss	4011,1,c	;volatile
  6846  001754  D002               	goto	i2l321
  6847                           
  6848                           ;UART.c: 143: RC1STAbits.CREN = 0;
  6849  001756  98AB               	bcf	4011,4,c	;volatile
  6850                           
  6851                           ;UART.c: 144: RC1STAbits.CREN = 1;
  6852  001758  88AB               	bsf	4011,4,c	;volatile
  6853  00175A                     i2l321:
  6854                           
  6855                           ;UART.c: 145: }
  6856                           ;UART.c: 146: unsigned char data = RCREG1;
  6857  00175A  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  6858                           
  6859                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  6860  00175E  0E00               	movlw	low _input_buffer
  6861  001760  6E07               	movwf	i2UART_buff_put@_this,c
  6862  001762  0E03               	movlw	high _input_buffer
  6863  001764  6E08               	movwf	i2UART_buff_put@_this+1,c
  6864  001766  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  6865  00176A  EC41  F006         	call	i2_UART_buff_put	;wreg free
  6866  00176E  0012               	return		;funcret
  6867  001770                     __end_of_EUSART1_Receive_ISR:
  6868                           	opt stack 0
  6869                           tosu	equ	0xFFF
  6870                           tosh	equ	0xFFE
  6871                           tosl	equ	0xFFD
  6872                           pclatu	equ	0xFFB
  6873                           pclath	equ	0xFFA
  6874                           tblptru	equ	0xFF8
  6875                           tblptrh	equ	0xFF7
  6876                           tblptrl	equ	0xFF6
  6877                           tablat	equ	0xFF5
  6878                           prodh	equ	0xFF4
  6879                           prodl	equ	0xFF3
  6880                           intcon	equ	0xFF2
  6881                           postinc0	equ	0xFEE
  6882                           fsr0h	equ	0xFEA
  6883                           fsr0l	equ	0xFE9
  6884                           wreg	equ	0xFE8
  6885                           fsr1h	equ	0xFE2
  6886                           fsr1l	equ	0xFE1
  6887                           indf2	equ	0xFDF
  6888                           postinc2	equ	0xFDE
  6889                           postdec2	equ	0xFDD
  6890                           plusw2	equ	0xFDB
  6891                           fsr2h	equ	0xFDA
  6892                           fsr2l	equ	0xFD9
  6893                           status	equ	0xFD8
  6894                           
  6895 ;; *************** function i2_UART_buff_put *****************
  6896 ;; Defined at:
  6897 ;;		line 68 in file "UART.c"
  6898 ;; Parameters:    Size  Location     Type
  6899 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  6900 ;;		 -> output_buffer(206), input_buffer(206), 
  6901 ;;  c               1    8[COMRAM] const unsigned char 
  6902 ;; Auto vars:     Size  Location     Type
  6903 ;;		None
  6904 ;; Return value:  Size  Location     Type
  6905 ;;                  1    wreg      void 
  6906 ;; Registers used:
  6907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6908 ;; Tracked objects:
  6909 ;;		On entry : 0/0
  6910 ;;		On exit  : 0/0
  6911 ;;		Unchanged: 0/0
  6912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6913 ;;      Params:         3       0       0       0       0       0       0
  6914 ;;      Locals:         0       0       0       0       0       0       0
  6915 ;;      Temps:          2       0       0       0       0       0       0
  6916 ;;      Totals:         5       0       0       0       0       0       0
  6917 ;;Total ram usage:        5 bytes
  6918 ;; Hardware stack levels used:    1
  6919 ;; Hardware stack levels required when called:    1
  6920 ;; This function calls:
  6921 ;;		i2_UART_buff_modulo_inc
  6922 ;; This function is called by:
  6923 ;;		_EUSART1_Receive_ISR
  6924 ;; This function uses a non-reentrant model
  6925 ;;
  6926                           
  6927                           	psect	text44
  6928  000C82                     __ptext44:
  6929                           	opt stack 0
  6930  000C82                     i2_UART_buff_put:
  6931                           	opt stack 21
  6932                           
  6933                           ;UART.c: 69: if (_this->count < 200) {
  6934                           
  6935                           ;incstack = 0
  6936  000C82  EE20 F0CC          	lfsr	2,204
  6937  000C86  5007               	movf	i2UART_buff_put@_this,w,c
  6938  000C88  26D9               	addwf	fsr2l,f,c
  6939  000C8A  5008               	movf	i2UART_buff_put@_this+1,w,c
  6940  000C8C  22DA               	addwfc	fsr2h,f,c
  6941  000C8E  0E01               	movlw	1
  6942  000C90  BEDB               	btfsc	plusw2,7,c
  6943  000C92  D007               	goto	i2l2261
  6944  000C94  0E01               	movlw	1
  6945  000C96  50DB               	movf	plusw2,w,c
  6946  000C98  E13A               	bnz	i2l2267
  6947  000C9A  0EC8               	movlw	200
  6948  000C9C  5CDE               	subwf	postinc2,w,c
  6949  000C9E  B0D8               	btfsc	status,0,c
  6950  000CA0  D036               	goto	i2l2267
  6951  000CA2                     i2l2261:
  6952                           
  6953                           ;UART.c: 70: _this->buf[_this->head] = c;
  6954  000CA2  EE20 F0C8          	lfsr	2,200
  6955  000CA6  5007               	movf	i2UART_buff_put@_this,w,c
  6956  000CA8  26D9               	addwf	fsr2l,f,c
  6957  000CAA  5008               	movf	i2UART_buff_put@_this+1,w,c
  6958  000CAC  22DA               	addwfc	fsr2h,f,c
  6959  000CAE  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  6960  000CB2  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  6961  000CB6  500A               	movf	??i2_UART_buff_put,w,c
  6962  000CB8  2407               	addwf	i2UART_buff_put@_this,w,c
  6963  000CBA  6ED9               	movwf	fsr2l,c
  6964  000CBC  500B               	movf	??i2_UART_buff_put+1,w,c
  6965  000CBE  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  6966  000CC0  6EDA               	movwf	fsr2h,c
  6967  000CC2  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  6968                           
  6969                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  6970  000CC6  EE20 F0C8          	lfsr	2,200
  6971  000CCA  5007               	movf	i2UART_buff_put@_this,w,c
  6972  000CCC  26D9               	addwf	fsr2l,f,c
  6973  000CCE  5008               	movf	i2UART_buff_put@_this+1,w,c
  6974  000CD0  22DA               	addwfc	fsr2h,f,c
  6975  000CD2  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  6976  000CD6  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  6977  000CDA  0E00               	movlw	0
  6978  000CDC  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  6979  000CDE  0EC8               	movlw	200
  6980  000CE0  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  6981  000CE2  EC55  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  6982  000CE6  EE20 F0C8          	lfsr	2,200
  6983  000CEA  5007               	movf	i2UART_buff_put@_this,w,c
  6984  000CEC  26D9               	addwf	fsr2l,f,c
  6985  000CEE  5008               	movf	i2UART_buff_put@_this+1,w,c
  6986  000CF0  22DA               	addwfc	fsr2h,f,c
  6987  000CF2  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  6988  000CF6  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  6989                           
  6990                           ;UART.c: 72: ++_this->count;
  6991  000CFA  EE20 F0CC          	lfsr	2,204
  6992  000CFE  5007               	movf	i2UART_buff_put@_this,w,c
  6993  000D00  26D9               	addwf	fsr2l,f,c
  6994  000D02  5008               	movf	i2UART_buff_put@_this+1,w,c
  6995  000D04  22DA               	addwfc	fsr2h,f,c
  6996  000D06  2ADE               	incf	postinc2,f,c
  6997  000D08  0E00               	movlw	0
  6998  000D0A  22DD               	addwfc	postdec2,f,c
  6999                           
  7000                           ;UART.c: 73: } else {
  7001  000D0C  0012               	return	
  7002  000D0E                     i2l2267:
  7003                           
  7004                           ;UART.c: 74: _this->buf[_this->head] = c;
  7005  000D0E  EE20 F0C8          	lfsr	2,200
  7006  000D12  5007               	movf	i2UART_buff_put@_this,w,c
  7007  000D14  26D9               	addwf	fsr2l,f,c
  7008  000D16  5008               	movf	i2UART_buff_put@_this+1,w,c
  7009  000D18  22DA               	addwfc	fsr2h,f,c
  7010  000D1A  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  7011  000D1E  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  7012  000D22  500A               	movf	??i2_UART_buff_put,w,c
  7013  000D24  2407               	addwf	i2UART_buff_put@_this,w,c
  7014  000D26  6ED9               	movwf	fsr2l,c
  7015  000D28  500B               	movf	??i2_UART_buff_put+1,w,c
  7016  000D2A  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  7017  000D2C  6EDA               	movwf	fsr2h,c
  7018  000D2E  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  7019                           
  7020                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  7021  000D32  EE20 F0C8          	lfsr	2,200
  7022  000D36  5007               	movf	i2UART_buff_put@_this,w,c
  7023  000D38  26D9               	addwf	fsr2l,f,c
  7024  000D3A  5008               	movf	i2UART_buff_put@_this+1,w,c
  7025  000D3C  22DA               	addwfc	fsr2h,f,c
  7026  000D3E  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  7027  000D42  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  7028  000D46  0E00               	movlw	0
  7029  000D48  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  7030  000D4A  0EC8               	movlw	200
  7031  000D4C  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  7032  000D4E  EC55  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  7033  000D52  EE20 F0C8          	lfsr	2,200
  7034  000D56  5007               	movf	i2UART_buff_put@_this,w,c
  7035  000D58  26D9               	addwf	fsr2l,f,c
  7036  000D5A  5008               	movf	i2UART_buff_put@_this+1,w,c
  7037  000D5C  22DA               	addwfc	fsr2h,f,c
  7038  000D5E  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  7039  000D62  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  7040                           
  7041                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7042  000D66  EE20 F0CA          	lfsr	2,202
  7043  000D6A  5007               	movf	i2UART_buff_put@_this,w,c
  7044  000D6C  26D9               	addwf	fsr2l,f,c
  7045  000D6E  5008               	movf	i2UART_buff_put@_this+1,w,c
  7046  000D70  22DA               	addwfc	fsr2h,f,c
  7047  000D72  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  7048  000D76  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  7049  000D7A  0E00               	movlw	0
  7050  000D7C  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  7051  000D7E  0EC8               	movlw	200
  7052  000D80  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  7053  000D82  EC55  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  7054  000D86  EE20 F0CA          	lfsr	2,202
  7055  000D8A  5007               	movf	i2UART_buff_put@_this,w,c
  7056  000D8C  26D9               	addwf	fsr2l,f,c
  7057  000D8E  5008               	movf	i2UART_buff_put@_this+1,w,c
  7058  000D90  22DA               	addwfc	fsr2h,f,c
  7059  000D92  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  7060  000D96  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  7061  000D9A  0012               	return	
  7062  000D9C                     __end_ofi2_UART_buff_put:
  7063                           	opt stack 0
  7064                           tosu	equ	0xFFF
  7065                           tosh	equ	0xFFE
  7066                           tosl	equ	0xFFD
  7067                           pclatu	equ	0xFFB
  7068                           pclath	equ	0xFFA
  7069                           tblptru	equ	0xFF8
  7070                           tblptrh	equ	0xFF7
  7071                           tblptrl	equ	0xFF6
  7072                           tablat	equ	0xFF5
  7073                           prodh	equ	0xFF4
  7074                           prodl	equ	0xFF3
  7075                           intcon	equ	0xFF2
  7076                           postinc0	equ	0xFEE
  7077                           fsr0h	equ	0xFEA
  7078                           fsr0l	equ	0xFE9
  7079                           wreg	equ	0xFE8
  7080                           fsr1h	equ	0xFE2
  7081                           fsr1l	equ	0xFE1
  7082                           indf2	equ	0xFDF
  7083                           postinc2	equ	0xFDE
  7084                           postdec2	equ	0xFDD
  7085                           plusw2	equ	0xFDB
  7086                           fsr2h	equ	0xFDA
  7087                           fsr2l	equ	0xFD9
  7088                           status	equ	0xFD8
  7089                           
  7090 ;; *************** function i2_UART_buff_modulo_inc *****************
  7091 ;; Defined at:
  7092 ;;		line 106 in file "UART.c"
  7093 ;; Parameters:    Size  Location     Type
  7094 ;;  value           2    0[COMRAM] const unsigned int 
  7095 ;;  modulus         2    2[COMRAM] const unsigned int 
  7096 ;; Auto vars:     Size  Location     Type
  7097 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  7098 ;; Return value:  Size  Location     Type
  7099 ;;                  2    0[COMRAM] unsigned int 
  7100 ;; Registers used:
  7101 ;;		wreg, status,2, status,0
  7102 ;; Tracked objects:
  7103 ;;		On entry : 0/0
  7104 ;;		On exit  : 0/0
  7105 ;;		Unchanged: 0/0
  7106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7107 ;;      Params:         4       0       0       0       0       0       0
  7108 ;;      Locals:         2       0       0       0       0       0       0
  7109 ;;      Temps:          0       0       0       0       0       0       0
  7110 ;;      Totals:         6       0       0       0       0       0       0
  7111 ;;Total ram usage:        6 bytes
  7112 ;; Hardware stack levels used:    1
  7113 ;; This function calls:
  7114 ;;		Nothing
  7115 ;; This function is called by:
  7116 ;;		i2_UART_buff_put
  7117 ;;		i2_UART_buff_get
  7118 ;; This function uses a non-reentrant model
  7119 ;;
  7120                           
  7121                           	psect	text45
  7122  0016AA                     __ptext45:
  7123                           	opt stack 0
  7124  0016AA                     i2_UART_buff_modulo_inc:
  7125                           	opt stack 21
  7126                           
  7127                           ;UART.c: 107: unsigned int my_value = value + 1;
  7128                           
  7129                           ;incstack = 0
  7130  0016AA  0E01               	movlw	1
  7131  0016AC  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  7132  0016AE  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  7133  0016B0  0E00               	movlw	0
  7134  0016B2  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  7135  0016B4  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  7136                           
  7137                           ;UART.c: 108: if (my_value >= modulus) {
  7138  0016B6  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  7139  0016B8  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  7140  0016BA  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  7141  0016BC  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  7142  0016BE  A0D8               	btfss	status,0,c
  7143  0016C0  D004               	goto	i2l2073
  7144                           
  7145                           ;UART.c: 109: my_value = 0;
  7146  0016C2  0E00               	movlw	0
  7147  0016C4  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  7148  0016C6  0E00               	movlw	0
  7149  0016C8  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  7150  0016CA                     i2l2073:
  7151                           
  7152                           ;UART.c: 110: }
  7153                           ;UART.c: 111: return (my_value);
  7154  0016CA  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  7155  0016CE  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  7156  0016D2  0012               	return	
  7157  0016D4                     __end_ofi2_UART_buff_modulo_inc:
  7158                           	opt stack 0
  7159  0000                     tosu	equ	0xFFF
  7160                           tosh	equ	0xFFE
  7161                           tosl	equ	0xFFD
  7162                           pclatu	equ	0xFFB
  7163                           pclath	equ	0xFFA
  7164                           tblptru	equ	0xFF8
  7165                           tblptrh	equ	0xFF7
  7166                           tblptrl	equ	0xFF6
  7167                           tablat	equ	0xFF5
  7168                           prodh	equ	0xFF4
  7169                           prodl	equ	0xFF3
  7170                           intcon	equ	0xFF2
  7171                           postinc0	equ	0xFEE
  7172                           fsr0h	equ	0xFEA
  7173                           fsr0l	equ	0xFE9
  7174                           wreg	equ	0xFE8
  7175                           fsr1h	equ	0xFE2
  7176                           fsr1l	equ	0xFE1
  7177                           indf2	equ	0xFDF
  7178                           postinc2	equ	0xFDE
  7179                           postdec2	equ	0xFDD
  7180                           plusw2	equ	0xFDB
  7181                           fsr2h	equ	0xFDA
  7182                           fsr2l	equ	0xFD9
  7183                           status	equ	0xFD8
  7184                           tosu	equ	0xFFF
  7185                           tosh	equ	0xFFE
  7186                           tosl	equ	0xFFD
  7187                           pclatu	equ	0xFFB
  7188                           pclath	equ	0xFFA
  7189                           tblptru	equ	0xFF8
  7190                           tblptrh	equ	0xFF7
  7191                           tblptrl	equ	0xFF6
  7192                           tablat	equ	0xFF5
  7193                           prodh	equ	0xFF4
  7194                           prodl	equ	0xFF3
  7195                           intcon	equ	0xFF2
  7196                           postinc0	equ	0xFEE
  7197                           fsr0h	equ	0xFEA
  7198                           fsr0l	equ	0xFE9
  7199                           wreg	equ	0xFE8
  7200                           fsr1h	equ	0xFE2
  7201                           fsr1l	equ	0xFE1
  7202                           indf2	equ	0xFDF
  7203                           postinc2	equ	0xFDE
  7204                           postdec2	equ	0xFDD
  7205                           plusw2	equ	0xFDB
  7206                           fsr2h	equ	0xFDA
  7207                           fsr2l	equ	0xFD9
  7208                           status	equ	0xFD8
  7209                           
  7210                           	psect	text46
  7211  000000                     __ptext46:
  7212                           	opt stack 0
  7213                           tosu	equ	0xFFF
  7214                           tosh	equ	0xFFE
  7215                           tosl	equ	0xFFD
  7216                           pclatu	equ	0xFFB
  7217                           pclath	equ	0xFFA
  7218                           tblptru	equ	0xFF8
  7219                           tblptrh	equ	0xFF7
  7220                           tblptrl	equ	0xFF6
  7221                           tablat	equ	0xFF5
  7222                           prodh	equ	0xFF4
  7223                           prodl	equ	0xFF3
  7224                           intcon	equ	0xFF2
  7225                           postinc0	equ	0xFEE
  7226                           fsr0h	equ	0xFEA
  7227                           fsr0l	equ	0xFE9
  7228                           wreg	equ	0xFE8
  7229                           fsr1h	equ	0xFE2
  7230                           fsr1l	equ	0xFE1
  7231                           indf2	equ	0xFDF
  7232                           postinc2	equ	0xFDE
  7233                           postdec2	equ	0xFDD
  7234                           plusw2	equ	0xFDB
  7235                           fsr2h	equ	0xFDA
  7236                           fsr2l	equ	0xFD9
  7237                           status	equ	0xFD8
  7238                           
  7239                           	psect	rparam
  7240  0000                     tosu	equ	0xFFF
  7241                           tosh	equ	0xFFE
  7242                           tosl	equ	0xFFD
  7243                           pclatu	equ	0xFFB
  7244                           pclath	equ	0xFFA
  7245                           tblptru	equ	0xFF8
  7246                           tblptrh	equ	0xFF7
  7247                           tblptrl	equ	0xFF6
  7248                           tablat	equ	0xFF5
  7249                           prodh	equ	0xFF4
  7250                           prodl	equ	0xFF3
  7251                           intcon	equ	0xFF2
  7252                           postinc0	equ	0xFEE
  7253                           fsr0h	equ	0xFEA
  7254                           fsr0l	equ	0xFE9
  7255                           wreg	equ	0xFE8
  7256                           fsr1h	equ	0xFE2
  7257                           fsr1l	equ	0xFE1
  7258                           indf2	equ	0xFDF
  7259                           postinc2	equ	0xFDE
  7260                           postdec2	equ	0xFDD
  7261                           plusw2	equ	0xFDB
  7262                           fsr2h	equ	0xFDA
  7263                           fsr2l	equ	0xFD9
  7264                           status	equ	0xFD8
  7265                           
  7266                           	psect	temp
  7267  000045                     btemp:
  7268                           	opt stack 0
  7269  000045                     	ds	1
  7270  0000                     int$flags	set	btemp
  7271                           tosu	equ	0xFFF
  7272                           tosh	equ	0xFFE
  7273                           tosl	equ	0xFFD
  7274                           pclatu	equ	0xFFB
  7275                           pclath	equ	0xFFA
  7276                           tblptru	equ	0xFF8
  7277                           tblptrh	equ	0xFF7
  7278                           tblptrl	equ	0xFF6
  7279                           tablat	equ	0xFF5
  7280                           prodh	equ	0xFF4
  7281                           prodl	equ	0xFF3
  7282                           intcon	equ	0xFF2
  7283                           postinc0	equ	0xFEE
  7284                           fsr0h	equ	0xFEA
  7285                           fsr0l	equ	0xFE9
  7286                           wreg	equ	0xFE8
  7287                           fsr1h	equ	0xFE2
  7288                           fsr1l	equ	0xFE1
  7289                           indf2	equ	0xFDF
  7290                           postinc2	equ	0xFDE
  7291                           postdec2	equ	0xFDD
  7292                           plusw2	equ	0xFDB
  7293                           fsr2h	equ	0xFDA
  7294                           fsr2l	equ	0xFD9
  7295                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         883
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      68
    BANK0           160     27      62
    BANK1           256      0     206
    BANK2           256      0     200
    BANK3           256      0     206
    BANK4           256      0     206
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK3[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_329(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK2[200]), ring_buffer(BANK1[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK1[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 10
		 -> receiveArray(BANK0[10]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 10
		 -> NULL(NULL[0]), receiveArray(BANK0[10]), 


Critical Paths under _main in COMRAM

    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _sendData->_FastTransfer_buffer_flush
    _ToSend->_FastTransfer_buffer_put
    _receiveData->_CRCcheck
    _CRCcheck->_crcBufS_get
    _ComStart->_begin

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   20681
                            _GetTime
                         _ReadFaults
                            _SetTime
                              _Start
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   18374
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           1     1      0    7659
                                              9 BANK0      1     1      0
                              _Delay
                          _GetFaults
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    5704
                                              4 BANK0      5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                              0 BANK0      4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1751
                                              2 BANK0      3     1      2
            _FastTransfer_buffer_put
                          _GetFaults (ARG)
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _GetFaults                                            1     1      0      30
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     174
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0   10715
                                              9 BANK0     18    18      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                              0 BANK0      1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                              2 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    10     6      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Start                                                0     0      0    2307
                           _ComStart
               _INTERRUPT_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ComStart                                             0     0      0    2307
                 _EUSART1_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (3) _begin                                               13     0     13    1292
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     428
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (4) _UART_buff_init                                       2     0      2    1015
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _SetTime                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadFaults                                           1     1      0       0
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              4     0      4       0
                                             26 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetTime
   _ReadFaults
   _SetTime
   _Start
     _ComStart
       _EUSART1_Initialize
         _UART_buff_init
           _memset
       _begin
         ___awdiv
     _INTERRUPT_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _updateComms
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _respondECU
       _Delay
       _GetFaults
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
         _GetFaults (ARG)
       _sendData
         Absolute function(Fake) *
         _CRC8 *
         _FastTransfer_buffer_flush *
           _memset
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C8       8       78.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      CE       6       80.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1B      3E       4       38.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3B4       9        0.0%
DATA                 0      0     3B4      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Thu Sep 29 13:54:27 2016

      __end_of_FastTransfer_buffer_flush 1328                   i2_UART_buff_modulo_inc 16AA  
                           _rx_array_inx 0042                             ___awdiv@sign 0020  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    l112 14CA                                      l226 0A1C  
                                    l290 11A2                                      l462 1586  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
   FastTransfer_buffer_flush@clearBuffer 0085                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
          i2UART_buff_modulo_inc@modulus 0003                             __CFG_LVP$OFF 000000  
                                   l1323 17AE                                     l2403 1676  
                                   l2413 1644                                     l2501 0DA6  
                                   l2423 0BF4                                     l2409 1634  
                                   l2505 0DB0                                     l2417 0B88  
                                   l2601 0AF8                                     l2611 08C2  
                                   l2453 14B4                                     l2461 14D0  
                                   l2437 119E                                     l2517 0E44  
                                   l2533 10CE                                     l2525 1048  
                                   l2621 0984                                     l2613 08EA  
                                   l2605 0B34                                     l2447 149E  
                                   l2463 14D6                                     l2711 0260  
                                   l2625 099A                                     l2801 06BA  
                                   l2395 16A0                                     l2635 09EE  
                                   l2643 0A16                                     l2803 06D4  
                                   l2715 0292                                     l2483 0776  
                                   l2805 0722                                     l2733 03F0  
                                   l1951 127A                                     l1943 125C  
                                   l2639 0A0E                                     l2807 073E  
                                   l2751 04AA                                     l2735 03F6  
                                   l2727 0356                                     l2719 02BA  
                                   l2815 074A                                     l2663 0100  
                                   l2591 0A86                                     l1961 129A  
                                   l1953 127E                                     l1937 124C  
                                   l2761 052C                                     l2753 04C4  
                                   l2737 040A                                     l2681 01C0  
                                   l2593 0AA0                                     l2763 0546  
                                   l2755 04DE                                     l2683 01C6  
                                   l2659 00D4                                     l2667 0104  
                                   l2691 0200                                     l2595 0ABC  
                                   l2587 0A50                                     l1949 1272  
                                   l1965 12A4                                     l2765 0594  
                                   l2757 04F8                                     l2597 0AC8  
                                   l2589 0A6A                                     l2791 0638  
                                   l2759 0512                                     l2767 05B0  
                                   l2679 01A8                                     l2599 0AF2  
                                   l1969 12B2                                     l2793 0652  
                                   l2777 05BC                                     l2697 020C  
                                   l2873 1602                                     l2795 066C  
                                   l2699 0232                                     l2797 0686  
                                   l2799 06A0                                     l1999 1572  
                   receiveData@crcHolder 0098                                     _CRC8 1498  
                                   u1010 0F6E                                     u1100 0FFE  
                                   u1020 0F7E                                     u1030 0F92  
                                   u1120 100E                                     u1040 0FAA  
                                   u1016 0F70                                     u1130 101E  
                                   u1050 0FC6                                     u1115 1000  
                                   u1140 1032                                     u1060 0FDA  
                                   u1028 0F80                                     u1126 1010  
                                   u1038 0F94                                     u1080 0FEC  
                                   u1048 0FAC                                     u1138 1020  
                                   u1058 0FC8                                     u1075 0FDC  
                                   u1148 1034                                     u1095 0FEE  
                                   u3008 0264                                     u3041 02FA  
                                   u3009 0278                                     u3018 0296  
                                   u3019 02AA                                     u3108 04AE  
                                   u3118 04C8                                     u2511 0774  
                                   u3208 063C                                     u3128 04E2  
                                   u2450 1132                                     u3218 0656  
                                   u3138 04FC                                     u3330 161E  
                                   u3228 0670                                     u3148 0516  
                                   u3238 068A                                     u3158 0530  
                                   u3248 06A4                                     u3168 054A  
                                   u2608 0A6E                                     u3258 06BE  
                                   u3178 0598                                     u3098 0494  
                                   u2490 0F50                                     u2618 0A8A  
                                   u2708 0926                                     u3268 06D8  
                                   u2628 0AA4                                     u2709 093A  
                                   u3357 1578                                     u2718 0942  
                                   u3278 0726                                     u3198 0622  
                                   u2638 0ACC                                     u2719 0956  
                                   u2808 00AE                                     u2809 00C2  
                                   u2658 0B1C                                     u2668 08C6  
                                   u2908 0178                                     u2828 00DC  
                                   u2588 0A3A                                     u2669 08DA  
                                   u2909 018C                                     u2829 00F0  
                                   u2598 0A54                                     u2688 08EE  
                                   u2928 01AC                                     u2848 0108  
                                   u2689 0902                                     u2849 011C  
                                   u2698 090A                                     u2699 091E  
                                   u2868 0126                                     u2869 013A  
                                   u2968 0210                                     u2888 0144  
                                   u2969 0224                                     u2889 0158  
                                   u2898 015E                                     u2899 0172  
                                   u2988 0236                                     u2989 024A  
                                   _main 15FE                          _TMR0_StartTimer 184C  
                                   _time 0060                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   btemp 0045                            __CFG_BORV$190 000000  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3          __end_of_FastTransfer_buffer_put 08C2  
                                   start 00A0                            __CFG_IESO$OFF 000000  
                        __end_of_GetTime 1820                             ___param_bank 000010  
         i2UART_buff_modulo_inc@my_value 0005                                    ?_CRC8 001B  
                        __end_of_SetTime 180E                  __end_of_TMR0_Initialize 1734  
                       __end_of_CRCcheck 0A1E                       crcBufS_put@address 001D  
                                  ?_main 0001                          __end_of___awdiv 12BC  
                                  _T0CON 000FD5                          ___awdiv@divisor 001D  
                         __CFG_DEBUG$OFF 000000                                    i2l321 175A  
                                  i2l290 1234                                    i2l453 004E  
                                  i2l455 005A                                    i2l459 0064  
                        ___awdiv@counter 001F                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6                                    _Delay 1568  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 159C                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                       __end_of_TMR0_ISR 178A                                    _Start 14E2  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _begin 1440  
                         __CFG_EBTRB$OFF 000000                                    _group 002A  
                     __CFG_MCLRE$EXTMCLR 000000                                    pclath 000FFA  
                                  tablat 000FF5                            ??_Receive_get 0026  
                   __size_of_crcBufS_get 00F2                                    plusw2 000FDB  
                         begin@stuffpeek 008E                     __size_of_crcBufS_put 00D8  
                                  status 000FD8                           __CFG_HFOFST$ON 000000  
                           ?_receiveData 0001                           __CFG_PBADEN$ON 000000  
                           __end_of_CRC8 14E2                         __end_of_ComStart 1440  
                        CRCcheck@SentCRC 0085                               _ReadFaults 0F66  
                        __initialization 1328               __end_of_EUSART1_Initialize 1568  
                           __end_of_main 162A                               ToSend@what 0085  
                                 ??_CRC8 001E              ?_INTERRUPT_InterruptManager 0001  
                     __size_of_GetFaults 0016                                   ??_main 0026  
                  receiveData@holder_329 0095                            __activetblptr 000002  
                       __end_of_Send_put 15FE                __size_ofi2_UART_buff_size 0016  
                                 ?_Delay 001B                    ?_EUSART1_Transmit_ISR 0001  
          FastTransfer_buffer_put@towhat 0024                                   ?_Start 0001  
                          ?_Receive_peek 0001                                   ?_begin 0083  
                __end_of_TMR0_StartTimer 1850                         ___awdiv@dividend 001B  
                                 _ANSELA 000F38                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                          i2_UART_buff_get 11A6  
                                 _RC1STA 000FAB                          i2_UART_buff_put 0C82  
                                 i2l2073 16CA                                   i2l2261 0CA2  
                                 i2l2317 15C6                                   i2l2281 1230  
                                 i2l2267 0D0E                           __CFG_WDTEN$OFF 000000  
                                 Delay@x 001E              UART_buff_modulo_inc@modulus 001D  
                                 _RCREG1 000FAE                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                                ??_GetTime 001F  
                                 _TX1STA 000FAC                                   _TXREG1 000FAD  
                              ??_SetTime 001B                           __CFG_XINST$OFF 000000  
                                 _ToSend 16F8                      __end_of_Receive_get 184C  
                       crcBufS_get@_this 001B              ??_FastTransfer_buffer_flush 0023  
                          _output_buffer 0400                         crcBufS_get@space 001E  
                              ??___awdiv 001F                                CRC8@tempI 0020  
                         __CFG_STVREN$ON 000000                         ?_TMR0_Initialize 0001  
                                 _memset 162A                                   clear_0 132E  
                                 clear_1 133A                                   clear_2 1346  
                                 clear_3 1352                                   clear_4 135E  
                                 clear_5 136A                         ___awdiv@quotient 0021  
                                 _rx_len 0043                         __end_of_sendData 0B68  
                           __pdataCOMRAM 0044                            Send_put@_data 0083  
                         ??_Receive_peek 001F                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 0174             __end_of_UART_buff_modulo_inc 16AA  
          __size_of_INTERRUPT_Initialize 0018                               __accesstop 0060  
                __end_of__initialization 1382                                ?_CRCcheck 0001  
                      __end_of_GetFaults 17B8                            ___rparam_used 000001  
                ?i2_UART_buff_modulo_inc 0001                             ?_updateComms 0001  
                          __end_of_Delay 159C                              ?_ReadFaults 0001  
                         __pcstackCOMRAM 0001                            __end_of_Start 152C  
                     _crcBufS_status_put 103E                         crcBufS_put@_this 001B  
                          __end_of_begin 1498                                ?_TMR0_ISR 0001  
 __end_of_FastTransfer_buffer_modulo_inc 1680  __size_of_FastTransfer_buffer_modulo_inc 002A  
         _FastTransfer_buffer_modulo_inc 1656             FastTransfer_buffer_put@_this 0021  
                            ToSend@where 0087                       UART_buff_get@_this 0021  
                    ?_crcBufS_status_put 001B                    __end_of_UART_buff_get 11A6  
                 ??_EUSART1_Transmit_ISR 000C                    __end_of_UART_buff_put 0C82  
                                ??_Delay 001D                  __end_ofi2_UART_buff_get 1238  
                __end_ofi2_UART_buff_put 0D9C              __end_of_EUSART1_Receive_ISR 1770  
              _FastTransfer_buffer_flush 12BC                                  CRC8@crc 0021  
                                CRC8@len 001D                                  ??_Start 0025  
                                CRC8@sum 001E                                ?_ComStart 0001  
                                ??_begin 0023                         ?_TMR0_StartTimer 0001  
                    _addressErrorCounter 0064                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                        __CFG_PLLCFG$OFF 000000                              _Receive_get 183E  
                             ??_CRCcheck 0026                     ??_crcBufS_status_put 001F  
         __end_ofi2_UART_buff_modulo_inc 16D4                        begin@givenAddress 0086  
                __size_of_UART_buff_init 001E                  __size_of_UART_buff_peek 0024  
                __size_of_UART_buff_size 0016                                ?_Send_put 0001  
                   __size_of_receiveData 06AA                                  ?_ToSend 0085  
                     __CFG_CCP2MX$PORTC1 000000                               ??_TMR0_ISR 0001  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 001B  
                                ?_memset 001B                               _crc_buffer 0068  
                     UART_buff_put@_this 0021                         i2_UART_buff_size 17E4  
            i2UART_buff_modulo_inc@value 0001                                  _OSCCON2 000FD2  
                      _Receive_available 17B8             UART_buff_modulo_inc@my_value 001F  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                               ??_ComStart 0025  
                    sendData@whereToSend 0088                      _receiveArrayAddress 002C  
                    __size_of_ReadFaults 00D8                       ?_Receive_available 001D  
                             begin@error 0087                                  _GetTime 180E  
                                _ByteLow 003C                      ??_Receive_available 001F  
                              ?_sendData 0001                        _alignErrorCounter 0026  
                        __CFG_PWRTEN$OFF 000000                               ??_Send_put 0026  
                                __Hparam 0000                                  _SetTime 17FA  
                                __Lparam 0000                          __size_of_ToSend 001E  
                   __end_of_Receive_peek 183E                                _AKNAKsend 003A  
                                ___awdiv 1238                     _UART_buff_modulo_inc 1680  
                                _calc_CS 003D                                  __pcinit 1328  
                        __size_of_memset 002C                                  __ramtop 0600  
                       i2UART_buff_get@c 000B                                  __ptext0 15FE  
                                __ptext1 1820                                  __ptext2 1390  
                                __ptext3 0A1E                                  __ptext4 0E8E  
                                __ptext5 12BC                                  __ptext6 16F8  
                                __ptext7 074E                                  __ptext8 1656  
                                __ptext9 17A2                                _T0CONbits 000FD5  
                       i2UART_buff_put@c 0009                __end_of_Receive_available 17CE  
                _FastTransfer_buffer_put 074E                    CRCcheck@calculatedCRC 0086  
                     _EUSART1_Initialize 152C                         ?i2_UART_buff_get 0007  
                       ?i2_UART_buff_put 0007             crcBufS_status_put@wantedTime 0023  
                          ??_crcBufS_get 001F                            ??_crcBufS_put 0020  
                   end_of_initialization 1382                                Delay@wait 001B  
                    ?_EUSART1_Initialize 0001                                  memset@c 001D  
                                memset@n 001F                                  memset@p 0021  
                          __Lmediumconst 0000                               ??_sendData 0087  
                  ?_UART_buff_modulo_inc 001B                     __size_of_updateComms 0010  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                               _respondECU 1390  
                       begin@stufftosend 0088                      CRCcheck@arrayHolder 0087  
                   ??_EUSART1_Initialize 0025                   _dataAdressErrorCounter 0066  
                             _rx_address 0041                                _TRISAbits 000F92  
                              _TRISCbits 000F94                                _TRISDbits 000F95  
                           begin@maxSize 0085       __size_of_FastTransfer_buffer_flush 006C  
                  i2UART_buff_size@_this 0001                           _UART_buff_init 1734  
                         _UART_buff_peek 16D4                           _UART_buff_size 17CE  
                    __end_of_crcBufS_get 0E8E                      __end_of_crcBufS_put 0F66  
                      __size_of_CRCcheck 015C                             ??_ReadFaults 001B  
                              _GetFaults 17A2                            _moduleAddress 003F  
                   _timer0ReloadVal16bit 0038                               CRCcheck@rt 008A  
                         __end_of_ToSend 1716             __end_of_INTERRUPT_Initialize 17A2  
                        _crcErrorCounter 0028                        crcBufS_put@oldCRC 001E  
                          __pidataCOMRAM 1850                        __size_of_TMR0_ISR 001A  
              ??_FastTransfer_buffer_put 0083                           __end_of_memset 1656  
                      crcBufS_put@status 001F                             receiveData@r 009C  
             __size_of_Receive_available 0016                             receiveData@u 009A  
                    start_initialization 1328                 __size_of_TMR0_Initialize 001E  
                  crcBufS_get@wantedTime 0083                       __end_of_ReadFaults 103E  
                      __size_of_ComStart 0058                   __end_of_UART_buff_init 1752  
                 __end_of_UART_buff_peek 16F8                           UART_buff_get@c 0025  
                 __end_of_UART_buff_size 17E4                             ?_Receive_get 0001  
                         UART_buff_put@c 0023                    __size_of_Receive_peek 000E  
               __end_ofi2_UART_buff_size 17FA                                 ??_ToSend 0026  
                 ??_UART_buff_modulo_inc 001F                               ?_GetFaults 0001  
                               CRC8@data 001B                          crcBufS_get@time 001D  
                      __size_of_Send_put 0030                              ?_respondECU 0001  
                               ??_memset 0021                              __pbssCOMRAM 0026  
          __size_of_EUSART1_Transmit_ISR 0032                            __pcstackBANK0 0083  
                           _Receive_peek 1830                      UART_buff_init@_this 0023  
                            _crcBufS_get 0D9C                      UART_buff_peek@_this 001B  
                            _crcBufS_put 0E8E                          ?_UART_buff_init 0023  
                        ?_UART_buff_peek 001B                          ?_UART_buff_size 001B  
           __size_of_EUSART1_Receive_ISR 001E                                 ?_GetTime 001B  
                          ??_receiveData 008C              __size_of_crcBufS_status_put 00D6  
                             sendData@CS 0089                 __size_of_TMR0_StartTimer 0004  
                 __size_of_UART_buff_get 0092                   __size_of_UART_buff_put 011A  
                               ?_SetTime 0001                        __size_of_sendData 014A  
                           GetFaults@num 001B                                __pintcode 0008  
                               ?___awdiv 001B             ??_INTERRUPT_InterruptManager 000D  
                   i2UART_buff_get@_this 0007                 receiveData@crcHolder_330 0099  
                               _BAUD1CON 000FB8                           __size_of_Delay 0034  
                         __size_of_Start 004A                           __size_of_begin 0058  
                    __size_of_respondECU 0058                     _INTERRUPT_Initialize 178A  
                           _receiveArray 0079                        ??_TMR0_Initialize 001B  
                               _CRCcheck 08C2                                 _LATAbits 000F89  
                               _LATCbits 000F8B                                 _LATDbits 000F8C  
                    UART_buff_size@_this 001B                                 _IPR1bits 000F9F  
                               _IPR2bits 000FA2                                 _PIE1bits 000F9D  
    __size_of_INTERRUPT_InterruptManager 0098                                 i2u225_40 11C4  
                               i2u228_40 15B6                                 _PIR1bits 000F9E  
                            ??_GetFaults 001B                      begin@stuffavailable 008C  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 074E                                 _TMR0_ISR 1770  
         FastTransfer_buffer_flush@_this 0083                             _input_buffer 0300  
                              _rx_buffer 0200                     i2UART_buff_put@_this 0007  
                          _UART_buff_get 1114                            _UART_buff_put 0B68  
                               _ComStart 13E8                 ??i2_UART_buff_modulo_inc 0005  
                  ?_INTERRUPT_Initialize 0001                        _sendStructAddress 002E  
                               _ByteHigh 003B                 __size_ofi2_UART_buff_get 0092  
               __size_ofi2_UART_buff_put 011A                         __size_of_GetTime 0012  
                          ??_updateComms 0026                     __size_of_Receive_get 000E  
                               __Hrparam 0000                                 _Send_put 15CE  
                               __Lrparam 0000                       __CFG_BOREN$SBORDIS 000000  
                       __size_of_SetTime 0014                        __CFG_P2BMX$PORTD2 000000  
                      ??_TMR0_StartTimer 001B                         __size_of___awdiv 0084  
            __size_of_EUSART1_Initialize 003C                      begin@stufftoreceive 008A  
                         ?_UART_buff_get 0021                           ?_UART_buff_put 0021  
                            CRC8@extract 001F                                sendData@i 008A  
               crcBufS_status_put@status 001E                                 __ptext10 1568  
                               __ptext11 00A4                                 __ptext20 1114  
                               __ptext12 15CE                                 __ptext21 1680  
                               __ptext13 0B68                                 __ptext30 1440  
                               __ptext22 17B8                                 __ptext14 1830  
                               __ptext31 1238                                 __ptext23 17CE  
                               __ptext15 16D4                                 __ptext40 159C  
                               __ptext32 152C                                 __ptext24 1498  
                               __ptext16 08C2                                 __ptext41 17E4  
                               __ptext33 1734                                 __ptext25 14E2  
                               __ptext17 103E                                 __ptext42 11A6  
                               __ptext34 162A                                 __ptext26 1716  
                               __ptext18 0D9C                                 __ptext43 1752  
                               __ptext35 17FA                                 __ptext27 184C  
                               __ptext19 183E                                 __ptext44 0C82  
                               __ptext36 0F66                                 __ptext28 178A  
                               __ptext45 16AA                                 __ptext37 180E  
                               __ptext29 13E8                                 __ptext46 0000  
                               __ptext39 1770                            __size_of_CRC8 004A  
                               begin@ptr 0083                  EUSART1_Receive_ISR@data 000C  
                          _returnAddress 0040                            __size_of_main 002C  
                            _receiveData 00A4                           _Transmit_stall 0044  
                               _sendData 0A1E                        ?i2_UART_buff_size 0001  
                             _RC1STAbits 000FAB                             ??_respondECU 008C  
                     ??i2_UART_buff_size 0003                                 int$flags 0045  
                           _serial_write 0036                      __end_of_updateComms 1830  
     __end_of_INTERRUPT_InterruptManager 00A0               _INTERRUPT_InterruptManager 0008  
                    _EUSART1_Receive_ISR 1752                        receiveData@holder 0092  
                             _INTCONbits 000FF2                UART_buff_modulo_inc@value 001B  
                       ??_UART_buff_init 0025                         ??_UART_buff_peek 001D  
                       ??_UART_buff_size 001D                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 0030  
        __size_ofi2_UART_buff_modulo_inc 002A                             ?_crcBufS_get 001B  
                           ?_crcBufS_put 001B                                 intlevel2 0000  
                crcBufS_status_put@_this 001B                       __end_of_respondECU 13E8  
                   ?_EUSART1_Receive_ISR 0001   FastTransfer_buffer_modulo_inc@my_value 001F  
         FastTransfer_buffer_put@towhere 0023             __end_of_EUSART1_Transmit_ISR 15CE  
                            _ring_buffer 0100               ?_FastTransfer_buffer_flush 0083  
                      ??i2_UART_buff_get 0009                              _serial_peek 0032  
                            _serial_read 0034                        ??i2_UART_buff_put 000A  
               ?_FastTransfer_buffer_put 0021            __size_of_UART_buff_modulo_inc 002A  
                        ??_UART_buff_get 0023                          ??_UART_buff_put 0024  
  FastTransfer_buffer_modulo_inc@modulus 001D                   crcBufS_status_put@time 001D  
                        _TMR0_Initialize 1716                        __CFG_T3CMX$PORTC0 000000  
                         _maxDataAddress 003E               __end_of_crcBufS_status_put 1114  
                  ??_EUSART1_Receive_ISR 000C         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B                        __CFG_FOSC$INTIO67 000000  
                            _updateComms 1820  
