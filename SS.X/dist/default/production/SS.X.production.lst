

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Oct 07 01:46:53 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    60                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    61  0000                     
    62 ;; Function _Receive_peek is unused but had its address taken
    63  0000                     
    64                           	psect	idataCOMRAM
    65  001540                     __pidataCOMRAM:
    66                           	opt stack 0
    67                           
    68                           ;initializer for _Transmit_stall
    69  001540  01                 	db	1
    70  0000                     _ANSELA	set	3896
    71  0000                     _ANSELC	set	3898
    72  0000                     _ANSELD	set	3899
    73  0000                     _BAUD1CON	set	4024
    74  0000                     _INTCONbits	set	4082
    75  0000                     _IPR1bits	set	3999
    76  0000                     _IPR2bits	set	4002
    77  0000                     _LATAbits	set	3977
    78  0000                     _LATDbits	set	3980
    79  0000                     _OSCCON	set	4051
    80  0000                     _OSCCON2	set	4050
    81  0000                     _OSCTUNE	set	3995
    82  0000                     _PIE1bits	set	3997
    83  0000                     _PIR1bits	set	3998
    84  0000                     _PORTAbits	set	3968
    85  0000                     _PORTCbits	set	3970
    86  0000                     _PORTDbits	set	3971
    87  0000                     _RC1STA	set	4011
    88  0000                     _RC1STAbits	set	4011
    89  0000                     _RCONbits	set	4048
    90  0000                     _RCREG1	set	4014
    91  0000                     _SPBRG1	set	4015
    92  0000                     _SPBRGH1	set	4016
    93  0000                     _T0CON	set	4053
    94  0000                     _T0CONbits	set	4053
    95  0000                     _TMR0H	set	4055
    96  0000                     _TMR0L	set	4054
    97  0000                     _TRISAbits	set	3986
    98  0000                     _TRISCbits	set	3988
    99  0000                     _TRISDbits	set	3989
   100  0000                     _TX1STA	set	4012
   101  0000                     _TXREG1	set	4013
   102                           
   103                           ; #config settings
   104  0000                     
   105                           	psect	cinit
   106  001020                     __pcinit:
   107                           	opt stack 0
   108  001020                     start_initialization:
   109                           	opt stack 0
   110  001020                     __initialization:
   111                           	opt stack 0
   112                           
   113                           ; Clear objects allocated to BANK4 (206 bytes)
   114  001020  EE04  F000         	lfsr	0,__pbssBANK4
   115  001024  0ECE               	movlw	206
   116  001026                     clear_0:
   117  001026  6AEE               	clrf	postinc0,c
   118  001028  06E8               	decf	wreg,f,c
   119  00102A  E1FD               	bnz	clear_0
   120                           
   121                           ; Clear objects allocated to BANK3 (206 bytes)
   122  00102C  EE03  F000         	lfsr	0,__pbssBANK3
   123  001030  0ECE               	movlw	206
   124  001032                     clear_1:
   125  001032  6AEE               	clrf	postinc0,c
   126  001034  06E8               	decf	wreg,f,c
   127  001036  E1FD               	bnz	clear_1
   128                           
   129                           ; Clear objects allocated to BANK2 (200 bytes)
   130  001038  EE02  F000         	lfsr	0,__pbssBANK2
   131  00103C  0EC8               	movlw	200
   132  00103E                     clear_2:
   133  00103E  6AEE               	clrf	postinc0,c
   134  001040  06E8               	decf	wreg,f,c
   135  001042  E1FD               	bnz	clear_2
   136                           
   137                           ; Clear objects allocated to BANK1 (206 bytes)
   138  001044  EE01  F000         	lfsr	0,__pbssBANK1
   139  001048  0ECE               	movlw	206
   140  00104A                     clear_3:
   141  00104A  6AEE               	clrf	postinc0,c
   142  00104C  06E8               	decf	wreg,f,c
   143  00104E  E1FD               	bnz	clear_3
   144                           
   145                           ; Clear objects allocated to BANK0 (31 bytes)
   146  001050  EE00  F060         	lfsr	0,__pbssBANK0
   147  001054  0E1F               	movlw	31
   148  001056                     clear_4:
   149  001056  6AEE               	clrf	postinc0,c
   150  001058  06E8               	decf	wreg,f,c
   151  00105A  E1FD               	bnz	clear_4
   152                           
   153                           ; Clear objects allocated to COMRAM (34 bytes)
   154  00105C  EE00  F001         	lfsr	0,__pbssCOMRAM
   155  001060  0E22               	movlw	34
   156  001062                     clear_5:
   157  001062  6AEE               	clrf	postinc0,c
   158  001064  06E8               	decf	wreg,f,c
   159  001066  E1FD               	bnz	clear_5
   160                           
   161                           ; Initialize objects allocated to COMRAM (1 bytes)
   162                           ; load TBLPTR registers with __pidataCOMRAM
   163  001068  0E40               	movlw	low __pidataCOMRAM
   164  00106A  6EF6               	movwf	tblptrl,c
   165  00106C  0E15               	movlw	high __pidataCOMRAM
   166  00106E  6EF7               	movwf	tblptrh,c
   167  001070  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   168  001072  6EF8               	movwf	tblptru,c
   169  001074  0009               	tblrd		*+	;fetch initializer
   170  001076  CFF5 F044          	movff	tablat,__pdataCOMRAM
   171  00107A                     end_of_initialization:
   172                           	opt stack 0
   173  00107A                     __end_of__initialization:
   174                           	opt stack 0
   175  00107A  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   176  00107C  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   177  00107E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   178  001080  6EF8               	movwf	tblptru,c
   179  001082  0100               	movlb	0
   180  001084  EF8B  F009         	goto	_main	;jump to C main() function
   181                           tblptru	equ	0xFF8
   182                           tblptrh	equ	0xFF7
   183                           tblptrl	equ	0xFF6
   184                           tablat	equ	0xFF5
   185                           postinc0	equ	0xFEE
   186                           wreg	equ	0xFE8
   187                           
   188                           	psect	bssCOMRAM
   189  000001                     __pbssCOMRAM:
   190                           	opt stack 0
   191  000001                     _addressErrorCounter:
   192                           	opt stack 0
   193  000001                     	ds	2
   194  000003                     _alignErrorCounter:
   195                           	opt stack 0
   196  000003                     	ds	2
   197  000005                     _crcErrorCounter:
   198                           	opt stack 0
   199  000005                     	ds	2
   200  000007                     _dataAdressErrorCounter:
   201                           	opt stack 0
   202  000007                     	ds	2
   203  000009                     _group:
   204                           	opt stack 0
   205  000009                     	ds	2
   206  00000B                     _receiveArrayAddress:
   207                           	opt stack 0
   208  00000B                     	ds	2
   209  00000D                     _sendStructAddress:
   210                           	opt stack 0
   211  00000D                     	ds	2
   212  00000F                     _serial_available:
   213                           	opt stack 0
   214  00000F                     	ds	2
   215  000011                     _serial_peek:
   216                           	opt stack 0
   217  000011                     	ds	2
   218  000013                     _serial_read:
   219                           	opt stack 0
   220  000013                     	ds	2
   221  000015                     _serial_write:
   222                           	opt stack 0
   223  000015                     	ds	2
   224  000017                     _timer0ReloadVal16bit:
   225                           	opt stack 0
   226  000017                     	ds	2
   227  000019                     _AKNAKsend:
   228                           	opt stack 0
   229  000019                     	ds	1
   230  00001A                     _ByteHigh:
   231                           	opt stack 0
   232  00001A                     	ds	1
   233  00001B                     _ByteLow:
   234                           	opt stack 0
   235  00001B                     	ds	1
   236  00001C                     _calc_CS:
   237                           	opt stack 0
   238  00001C                     	ds	1
   239  00001D                     _maxDataAddress:
   240                           	opt stack 0
   241  00001D                     	ds	1
   242  00001E                     _moduleAddress:
   243                           	opt stack 0
   244  00001E                     	ds	1
   245  00001F                     _returnAddress:
   246                           	opt stack 0
   247  00001F                     	ds	1
   248  000020                     _rx_address:
   249                           	opt stack 0
   250  000020                     	ds	1
   251  000021                     _rx_array_inx:
   252                           	opt stack 0
   253  000021                     	ds	1
   254  000022                     _rx_len:
   255                           	opt stack 0
   256  000022                     	ds	1
   257                           tblptru	equ	0xFF8
   258                           tblptrh	equ	0xFF7
   259                           tblptrl	equ	0xFF6
   260                           tablat	equ	0xFF5
   261                           postinc0	equ	0xFEE
   262                           wreg	equ	0xFE8
   263                           
   264                           	psect	dataCOMRAM
   265  000044                     __pdataCOMRAM:
   266                           	opt stack 0
   267  000044                     _Transmit_stall:
   268                           	opt stack 0
   269  000044                     	ds	1
   270                           tblptru	equ	0xFF8
   271                           tblptrh	equ	0xFF7
   272                           tblptrl	equ	0xFF6
   273                           tablat	equ	0xFF5
   274                           postinc0	equ	0xFEE
   275                           wreg	equ	0xFE8
   276                           
   277                           	psect	bssBANK0
   278  000060                     __pbssBANK0:
   279                           	opt stack 0
   280  000060                     _time:
   281                           	opt stack 0
   282  000060                     	ds	4
   283  000064                     _crc_buffer:
   284                           	opt stack 0
   285  000064                     	ds	17
   286  000075                     _receiveArray:
   287                           	opt stack 0
   288  000075                     	ds	10
   289                           tblptru	equ	0xFF8
   290                           tblptrh	equ	0xFF7
   291                           tblptrl	equ	0xFF6
   292                           tablat	equ	0xFF5
   293                           postinc0	equ	0xFEE
   294                           wreg	equ	0xFE8
   295                           
   296                           	psect	bssBANK1
   297  000100                     __pbssBANK1:
   298                           	opt stack 0
   299  000100                     _ring_buffer:
   300                           	opt stack 0
   301  000100                     	ds	206
   302                           tblptru	equ	0xFF8
   303                           tblptrh	equ	0xFF7
   304                           tblptrl	equ	0xFF6
   305                           tablat	equ	0xFF5
   306                           postinc0	equ	0xFEE
   307                           wreg	equ	0xFE8
   308                           
   309                           	psect	bssBANK2
   310  000200                     __pbssBANK2:
   311                           	opt stack 0
   312  000200                     _rx_buffer:
   313                           	opt stack 0
   314  000200                     	ds	200
   315                           tblptru	equ	0xFF8
   316                           tblptrh	equ	0xFF7
   317                           tblptrl	equ	0xFF6
   318                           tablat	equ	0xFF5
   319                           postinc0	equ	0xFEE
   320                           wreg	equ	0xFE8
   321                           
   322                           	psect	bssBANK3
   323  000300                     __pbssBANK3:
   324                           	opt stack 0
   325  000300                     _input_buffer:
   326                           	opt stack 0
   327  000300                     	ds	206
   328                           tblptru	equ	0xFF8
   329                           tblptrh	equ	0xFF7
   330                           tblptrl	equ	0xFF6
   331                           tablat	equ	0xFF5
   332                           postinc0	equ	0xFEE
   333                           wreg	equ	0xFE8
   334                           
   335                           	psect	bssBANK4
   336  000400                     __pbssBANK4:
   337                           	opt stack 0
   338  000400                     _output_buffer:
   339                           	opt stack 0
   340  000400                     	ds	206
   341                           tblptru	equ	0xFF8
   342                           tblptrh	equ	0xFF7
   343                           tblptrl	equ	0xFF6
   344                           tablat	equ	0xFF5
   345                           postinc0	equ	0xFEE
   346                           wreg	equ	0xFE8
   347                           
   348                           	psect	cstackBANK0
   349  00007F                     __pcstackBANK0:
   350                           	opt stack 0
   351  00007F                     ___awdiv@counter:
   352                           	opt stack 0
   353  00007F                     FastTransfer_buffer_put@_this:
   354                           	opt stack 0
   355  00007F                     UART_buff_put@_this:
   356                           	opt stack 0
   357  00007F                     UART_buff_get@_this:
   358                           	opt stack 0
   359  00007F                     memset@p:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x0
   363  00007F                     	ds	1
   364  000080                     ___awdiv@sign:
   365                           	opt stack 0
   366                           
   367                           ; 1 bytes @ 0x1
   368  000080                     	ds	1
   369  000081                     ??_UART_buff_get:
   370  000081                     FastTransfer_buffer_put@towhere:
   371                           	opt stack 0
   372  000081                     UART_buff_put@c:
   373                           	opt stack 0
   374  000081                     FastTransfer_buffer_flush@_this:
   375                           	opt stack 0
   376  000081                     UART_buff_init@_this:
   377                           	opt stack 0
   378  000081                     ___awdiv@quotient:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0x2
   382  000081                     	ds	1
   383  000082                     ??_UART_buff_put:
   384  000082                     FastTransfer_buffer_put@towhat:
   385                           	opt stack 0
   386                           
   387                           ; 2 bytes @ 0x3
   388  000082                     	ds	1
   389  000083                     begin@ptr:
   390                           	opt stack 0
   391  000083                     FastTransfer_buffer_flush@clearBuffer:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x4
   395  000083                     	ds	1
   396  000084                     ??_FastTransfer_buffer_put:
   397  000084                     Send_put@_data:
   398                           	opt stack 0
   399                           
   400                           ; 1 bytes @ 0x5
   401  000084                     	ds	1
   402  000085                     ??_receiveData:
   403  000085                     ??_sendData:
   404  000085                     begin@maxSize:
   405                           	opt stack 0
   406                           
   407                           ; 1 bytes @ 0x6
   408  000085                     	ds	1
   409  000086                     begin@givenAddress:
   410                           	opt stack 0
   411  000086                     sendData@whereToSend:
   412                           	opt stack 0
   413  000086                     ToSend@what:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x7
   417  000086                     	ds	1
   418  000087                     begin@error:
   419                           	opt stack 0
   420  000087                     sendData@CS:
   421                           	opt stack 0
   422                           
   423                           ; 1 bytes @ 0x8
   424  000087                     	ds	1
   425  000088                     begin@stufftosend:
   426                           	opt stack 0
   427  000088                     sendData@i:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0x9
   431  000088                     	ds	2
   432  00008A                     ??_respondECU:
   433  00008A                     begin@stufftoreceive:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0xB
   437  00008A                     	ds	1
   438  00008B                     receiveData@holder:
   439                           	opt stack 0
   440                           
   441                           ; 3 bytes @ 0xC
   442  00008B                     	ds	1
   443  00008C                     begin@stuffavailable:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0xD
   447  00008C                     	ds	2
   448  00008E                     begin@stuffpeek:
   449                           	opt stack 0
   450  00008E                     receiveData@holder_324:
   451                           	opt stack 0
   452                           
   453                           ; 3 bytes @ 0xF
   454  00008E                     	ds	3
   455  000091                     receiveData@crcHolder:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x12
   459  000091                     	ds	1
   460  000092                     receiveData@crcHolder_325:
   461                           	opt stack 0
   462                           
   463                           ; 1 bytes @ 0x13
   464  000092                     	ds	1
   465  000093                     receiveData@u:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x14
   469  000093                     	ds	2
   470  000095                     receiveData@r:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x16
   474  000095                     	ds	2
   475                           tblptru	equ	0xFF8
   476                           tblptrh	equ	0xFF7
   477                           tblptrl	equ	0xFF6
   478                           tablat	equ	0xFF5
   479                           postinc0	equ	0xFEE
   480                           wreg	equ	0xFE8
   481                           
   482                           	psect	cstackCOMRAM
   483  000023                     __pcstackCOMRAM:
   484                           	opt stack 0
   485  000023                     ?i2_UART_buff_size:
   486                           	opt stack 0
   487  000023                     ?i2_UART_buff_modulo_inc:
   488                           	opt stack 0
   489  000023                     i2UART_buff_size@_this:
   490                           	opt stack 0
   491  000023                     i2UART_buff_modulo_inc@value:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x0
   495  000023                     	ds	2
   496  000025                     i2UART_buff_modulo_inc@modulus:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x2
   500  000025                     	ds	2
   501  000027                     i2UART_buff_modulo_inc@my_value:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x4
   505  000027                     	ds	2
   506  000029                     i2UART_buff_put@_this:
   507                           	opt stack 0
   508  000029                     i2UART_buff_get@_this:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x6
   512  000029                     	ds	2
   513  00002B                     ??i2_UART_buff_get:
   514  00002B                     i2UART_buff_put@c:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x8
   518  00002B                     	ds	1
   519  00002C                     ??i2_UART_buff_put:
   520                           
   521                           ; 1 bytes @ 0x9
   522  00002C                     	ds	1
   523  00002D                     i2UART_buff_get@c:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0xA
   527  00002D                     	ds	1
   528  00002E                     EUSART1_Receive_ISR@data:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0xB
   532  00002E                     	ds	1
   533  00002F                     ??_INTERRUPT_InterruptManager:
   534                           
   535                           ; 1 bytes @ 0xC
   536  00002F                     	ds	14
   537  00003D                     ??_ReadFaults:
   538  00003D                     ?_FastTransfer_buffer_modulo_inc:
   539                           	opt stack 0
   540  00003D                     ?_UART_buff_modulo_inc:
   541                           	opt stack 0
   542  00003D                     ?_UART_buff_size:
   543                           	opt stack 0
   544  00003D                     ?___awdiv:
   545                           	opt stack 0
   546  00003D                     ?_GetTime:
   547                           	opt stack 0
   548  00003D                     GetFaults@num:
   549                           	opt stack 0
   550  00003D                     CRC8@data:
   551                           	opt stack 0
   552  00003D                     FastTransfer_buffer_modulo_inc@value:
   553                           	opt stack 0
   554  00003D                     crcBufS_put@_this:
   555                           	opt stack 0
   556  00003D                     UART_buff_size@_this:
   557                           	opt stack 0
   558  00003D                     UART_buff_modulo_inc@value:
   559                           	opt stack 0
   560  00003D                     Delay@wait:
   561                           	opt stack 0
   562  00003D                     ___awdiv@dividend:
   563                           	opt stack 0
   564  00003D                     memset@p1:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0x1A
   568  00003D                     	ds	2
   569  00003F                     ??_Delay:
   570  00003F                     ?_Receive_available:
   571                           	opt stack 0
   572  00003F                     CRC8@len:
   573                           	opt stack 0
   574  00003F                     crcBufS_put@address:
   575                           	opt stack 0
   576  00003F                     FastTransfer_buffer_modulo_inc@modulus:
   577                           	opt stack 0
   578  00003F                     UART_buff_modulo_inc@modulus:
   579                           	opt stack 0
   580  00003F                     ___awdiv@divisor:
   581                           	opt stack 0
   582  00003F                     memset@c:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x1C
   586  00003F                     	ds	1
   587  000040                     CRC8@sum:
   588                           	opt stack 0
   589  000040                     crcBufS_put@oldCRC:
   590                           	opt stack 0
   591  000040                     Delay@x:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x1D
   595  000040                     	ds	1
   596  000041                     CRC8@extract:
   597                           	opt stack 0
   598  000041                     crcBufS_put@status:
   599                           	opt stack 0
   600  000041                     FastTransfer_buffer_modulo_inc@my_value:
   601                           	opt stack 0
   602  000041                     UART_buff_modulo_inc@my_value:
   603                           	opt stack 0
   604  000041                     memset@n:
   605                           	opt stack 0
   606                           
   607                           ; 2 bytes @ 0x1E
   608  000041                     	ds	1
   609  000042                     ??_crcBufS_put:
   610  000042                     CRC8@tempI:
   611                           	opt stack 0
   612                           
   613                           ; 1 bytes @ 0x1F
   614  000042                     	ds	1
   615  000043                     CRC8@crc:
   616                           	opt stack 0
   617  000043                     ToSend@where:
   618                           	opt stack 0
   619  000043                     UART_buff_get@c:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0x20
   623  000043                     	ds	1
   624  000044                     tblptru	equ	0xFF8
   625                           tblptrh	equ	0xFF7
   626                           tblptrl	equ	0xFF6
   627                           tablat	equ	0xFF5
   628                           postinc0	equ	0xFEE
   629                           wreg	equ	0xFE8
   630                           
   631                           ; 1 bytes @ 0x21
   632 ;;
   633 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   634 ;;
   635 ;; *************** function _main *****************
   636 ;; Defined at:
   637 ;;		line 23 in file "Main.c"
   638 ;; Parameters:    Size  Location     Type
   639 ;;		None
   640 ;; Auto vars:     Size  Location     Type
   641 ;;		None
   642 ;; Return value:  Size  Location     Type
   643 ;;                  1    wreg      void 
   644 ;; Registers used:
   645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   646 ;; Tracked objects:
   647 ;;		On entry : 0/0
   648 ;;		On exit  : 0/0
   649 ;;		Unchanged: 0/0
   650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   651 ;;      Params:         0       0       0       0       0       0       0
   652 ;;      Locals:         0       0       0       0       0       0       0
   653 ;;      Temps:          0       0       0       0       0       0       0
   654 ;;      Totals:         0       0       0       0       0       0       0
   655 ;;Total ram usage:        0 bytes
   656 ;; Hardware stack levels required when called:   10
   657 ;; This function calls:
   658 ;;		_GetTime
   659 ;;		_ReadFaults
   660 ;;		_SetTime
   661 ;;		_Start
   662 ;;		_updateComms
   663 ;; This function is called by:
   664 ;;		Startup code after reset
   665 ;; This function uses a non-reentrant model
   666 ;;
   667                           
   668                           	psect	text0
   669  001316                     __ptext0:
   670                           	opt stack 0
   671  001316                     _main:
   672                           	opt stack 21
   673                           
   674                           ;Main.c: 24: Start();
   675                           
   676                           ;incstack = 0
   677  001316  ECF5  F008         	call	_Start	;wreg free
   678                           
   679                           ;Main.c: 25: LATDbits.LATD4 = 0;
   680  00131A  988C               	bcf	3980,4,c	;volatile
   681  00131C                     l2790:
   682                           
   683                           ;Main.c: 27: updateComms();
   684  00131C  EC96  F00A         	call	_updateComms	;wreg free
   685                           
   686                           ;Main.c: 28: if(GetTime() > 5){
   687  001320  EC8D  F00A         	call	_GetTime	;wreg free
   688  001324  BE40               	btfsc	?_GetTime+3,7,c
   689  001326  D7FA               	goto	l2790
   690  001328  5040               	movf	?_GetTime+3,w,c
   691  00132A  103F               	iorwf	?_GetTime+2,w,c
   692  00132C  103E               	iorwf	?_GetTime+1,w,c
   693  00132E  E104               	bnz	u3140
   694  001330  0E06               	movlw	6
   695  001332  5C3D               	subwf	?_GetTime,w,c
   696  001334  A0D8               	btfss	status,0,c
   697  001336  D7F2               	goto	l2790
   698  001338                     u3140:
   699                           
   700                           ;Main.c: 29: LATAbits.LATA3 ^= 1;
   701  001338  7689               	btg	3977,3,c	;volatile
   702                           
   703                           ;Main.c: 30: ReadFaults();
   704  00133A  EC17  F006         	call	_ReadFaults	;wreg free
   705                           
   706                           ;Main.c: 31: SetTime();
   707  00133E  EC7A  F00A         	call	_SetTime	;wreg free
   708  001342  D7EC               	goto	l2790
   709  001344                     __end_of_main:
   710                           	opt stack 0
   711                           tblptru	equ	0xFF8
   712                           tblptrh	equ	0xFF7
   713                           tblptrl	equ	0xFF6
   714                           tablat	equ	0xFF5
   715                           postinc0	equ	0xFEE
   716                           wreg	equ	0xFE8
   717                           status	equ	0xFD8
   718                           
   719 ;; *************** function _updateComms *****************
   720 ;; Defined at:
   721 ;;		line 17 in file "Communications.c"
   722 ;; Parameters:    Size  Location     Type
   723 ;;		None
   724 ;; Auto vars:     Size  Location     Type
   725 ;;		None
   726 ;; Return value:  Size  Location     Type
   727 ;;                  1    wreg      void 
   728 ;; Registers used:
   729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   730 ;; Tracked objects:
   731 ;;		On entry : 0/0
   732 ;;		On exit  : 0/0
   733 ;;		Unchanged: 0/0
   734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   735 ;;      Params:         0       0       0       0       0       0       0
   736 ;;      Locals:         0       0       0       0       0       0       0
   737 ;;      Temps:          0       0       0       0       0       0       0
   738 ;;      Totals:         0       0       0       0       0       0       0
   739 ;;Total ram usage:        0 bytes
   740 ;; Hardware stack levels used:    1
   741 ;; Hardware stack levels required when called:    9
   742 ;; This function calls:
   743 ;;		_receiveData
   744 ;;		_respondECU
   745 ;; This function is called by:
   746 ;;		_main
   747 ;; This function uses a non-reentrant model
   748 ;;
   749                           
   750                           	psect	text1
   751  00152C                     __ptext1:
   752                           	opt stack 0
   753  00152C                     _updateComms:
   754                           	opt stack 21
   755                           
   756                           ;Communications.c: 18: if (receiveData()) {
   757                           
   758                           ;incstack = 0
   759  00152C  EC52  F000         	call	_receiveData	;wreg free
   760  001530  0900               	iorlw	0
   761  001532  B4D8               	btfsc	status,2,c
   762  001534  0012               	return	
   763                           
   764                           ;Communications.c: 19: respondECU();
   765  001536  EC44  F008         	call	_respondECU	;wreg free
   766  00153A  0012               	return	
   767  00153C                     __end_of_updateComms:
   768                           	opt stack 0
   769                           tblptru	equ	0xFF8
   770                           tblptrh	equ	0xFF7
   771                           tblptrl	equ	0xFF6
   772                           tablat	equ	0xFF5
   773                           postinc0	equ	0xFEE
   774                           wreg	equ	0xFE8
   775                           status	equ	0xFD8
   776                           
   777 ;; *************** function _respondECU *****************
   778 ;; Defined at:
   779 ;;		line 23 in file "Communications.c"
   780 ;; Parameters:    Size  Location     Type
   781 ;;		None
   782 ;; Auto vars:     Size  Location     Type
   783 ;;		None
   784 ;; Return value:  Size  Location     Type
   785 ;;                  1    wreg      void 
   786 ;; Registers used:
   787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
   788 ;; Tracked objects:
   789 ;;		On entry : 0/0
   790 ;;		On exit  : 0/0
   791 ;;		Unchanged: 0/0
   792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   793 ;;      Params:         0       0       0       0       0       0       0
   794 ;;      Locals:         0       0       0       0       0       0       0
   795 ;;      Temps:          0       1       0       0       0       0       0
   796 ;;      Totals:         0       1       0       0       0       0       0
   797 ;;Total ram usage:        1 bytes
   798 ;; Hardware stack levels used:    1
   799 ;; Hardware stack levels required when called:    8
   800 ;; This function calls:
   801 ;;		_Delay
   802 ;;		_GetFaults
   803 ;;		_ToSend
   804 ;;		_sendData
   805 ;; This function is called by:
   806 ;;		_updateComms
   807 ;; This function uses a non-reentrant model
   808 ;;
   809                           
   810                           	psect	text2
   811  001088                     __ptext2:
   812                           	opt stack 0
   813  001088                     _respondECU:
   814                           	opt stack 21
   815                           
   816                           ;Communications.c: 24: LATDbits.LATD4 = 1;
   817                           
   818                           ;incstack = 0
   819  001088  888C               	bsf	3980,4,c	;volatile
   820                           
   821                           ;Communications.c: 25: ToSend(0,8);
   822  00108A  0E00               	movlw	0
   823  00108C  0100               	movlb	0	; () banked
   824  00108E  6F87               	movwf	(ToSend@what+1)& (0+255),b
   825  001090  0E08               	movlw	8
   826  001092  6F86               	movwf	ToSend@what& (0+255),b
   827  001094  0E00               	movlw	0
   828  001096  ECF8  F009         	call	_ToSend
   829                           
   830                           ;Communications.c: 26: ToSend(1,(unsigned int)GetFaults(1));
   831  00109A  0E01               	movlw	1
   832  00109C  EC4E  F00A         	call	_GetFaults
   833  0010A0  0100               	movlb	0	; () banked
   834  0010A2  6F8A               	movwf	??_respondECU& (0+255),b
   835  0010A4  0100               	movlb	0	; () banked
   836  0010A6  518A               	movf	??_respondECU& (0+255),w,b
   837  0010A8  0100               	movlb	0	; () banked
   838  0010AA  6F86               	movwf	ToSend@what& (0+255),b
   839  0010AC  6B87               	clrf	(ToSend@what+1)& (0+255),b
   840  0010AE  0E01               	movlw	1
   841  0010B0  ECF8  F009         	call	_ToSend
   842                           
   843                           ;Communications.c: 27: ToSend(2,(unsigned int)GetFaults(0));
   844  0010B4  0E00               	movlw	0
   845  0010B6  EC4E  F00A         	call	_GetFaults
   846  0010BA  0100               	movlb	0	; () banked
   847  0010BC  6F8A               	movwf	??_respondECU& (0+255),b
   848  0010BE  0100               	movlb	0	; () banked
   849  0010C0  518A               	movf	??_respondECU& (0+255),w,b
   850  0010C2  0100               	movlb	0	; () banked
   851  0010C4  6F86               	movwf	ToSend@what& (0+255),b
   852  0010C6  6B87               	clrf	(ToSend@what+1)& (0+255),b
   853  0010C8  0E02               	movlw	2
   854  0010CA  ECF8  F009         	call	_ToSend
   855                           
   856                           ;Communications.c: 28: Delay(5);
   857  0010CE  0E00               	movlw	0
   858  0010D0  6E3E               	movwf	Delay@wait+1,c
   859  0010D2  0E05               	movlw	5
   860  0010D4  6E3D               	movwf	Delay@wait,c
   861  0010D6  EC58  F009         	call	_Delay	;wreg free
   862                           
   863                           ;Communications.c: 29: sendData(1);
   864  0010DA  0E01               	movlw	1
   865  0010DC  EC46  F004         	call	_sendData
   866                           
   867                           ;Communications.c: 30: Delay(3);
   868  0010E0  0E00               	movlw	0
   869  0010E2  6E3E               	movwf	Delay@wait+1,c
   870  0010E4  0E03               	movlw	3
   871  0010E6  6E3D               	movwf	Delay@wait,c
   872  0010E8  EC58  F009         	call	_Delay	;wreg free
   873                           
   874                           ;Communications.c: 31: LATDbits.LATD4 = 0;
   875  0010EC  988C               	bcf	3980,4,c	;volatile
   876  0010EE  0012               	return		;funcret
   877  0010F0                     __end_of_respondECU:
   878                           	opt stack 0
   879                           tblptru	equ	0xFF8
   880                           tblptrh	equ	0xFF7
   881                           tblptrl	equ	0xFF6
   882                           tablat	equ	0xFF5
   883                           postinc0	equ	0xFEE
   884                           wreg	equ	0xFE8
   885                           status	equ	0xFD8
   886                           
   887 ;; *************** function _sendData *****************
   888 ;; Defined at:
   889 ;;		line 108 in file "FastTransfer.c"
   890 ;; Parameters:    Size  Location     Type
   891 ;;  whereToSend     1    wreg     unsigned char 
   892 ;; Auto vars:     Size  Location     Type
   893 ;;  whereToSend     1    7[BANK0 ] unsigned char 
   894 ;;  i               2    9[BANK0 ] int 
   895 ;;  CS              1    8[BANK0 ] unsigned char 
   896 ;; Return value:  Size  Location     Type
   897 ;;                  1    wreg      void 
   898 ;; Registers used:
   899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
   900 ;; Tracked objects:
   901 ;;		On entry : 0/0
   902 ;;		On exit  : 0/0
   903 ;;		Unchanged: 0/0
   904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   905 ;;      Params:         0       0       0       0       0       0       0
   906 ;;      Locals:         0       4       0       0       0       0       0
   907 ;;      Temps:          0       1       0       0       0       0       0
   908 ;;      Totals:         0       5       0       0       0       0       0
   909 ;;Total ram usage:        5 bytes
   910 ;; Hardware stack levels used:    1
   911 ;; Hardware stack levels required when called:    7
   912 ;; This function calls:
   913 ;;		Absolute function
   914 ;;		_CRC8
   915 ;;		_FastTransfer_buffer_flush
   916 ;;		_Send_put
   917 ;;		_crcBufS_put
   918 ;; This function is called by:
   919 ;;		_respondECU
   920 ;; This function uses a non-reentrant model
   921 ;;
   922                           
   923                           	psect	text3
   924  00088C                     __ptext3:
   925                           	opt stack 0
   926  00088C                     _sendData:
   927                           	opt stack 21
   928                           
   929                           ;incstack = 0
   930                           ;sendData@whereToSend stored from wreg
   931  00088C  0100               	movlb	0	; () banked
   932  00088E  6F86               	movwf	sendData@whereToSend& (0+255),b
   933                           
   934                           ;FastTransfer.c: 111: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
   935  000890  C00D  F03D         	movff	_sendStructAddress,CRC8@data
   936  000894  C00E  F03E         	movff	_sendStructAddress+1,CRC8@data+1
   937  000898  C1CC  F03F         	movff	_ring_buffer+204,CRC8@len
   938  00089C  ECD0  F008         	call	_CRC8	;wreg free
   939  0008A0  0100               	movlb	0	; () banked
   940  0008A2  6F87               	movwf	sendData@CS& (0+255),b
   941                           
   942                           ; BSR set to: 0
   943                           ;FastTransfer.c: 113: serial_write(0x06);
   944  0008A4  D801               	call	u2488
   945  0008A6  D00B               	goto	l2540
   946  0008A8                     u2488:
   947  0008A8  0005               	push	
   948  0008AA  6EFA               	movwf	pclath,c
   949  0008AC  5015               	movf	_serial_write,w,c
   950  0008AE  6EFD               	movwf	tosl,c
   951  0008B0  5016               	movf	_serial_write+1,w,c
   952  0008B2  6EFE               	movwf	tosh,c
   953  0008B4  50F8               	movf	tblptru,w,c
   954  0008B6  6EFF               	movwf	tosu,c
   955  0008B8  50FA               	movf	pclath,w,c
   956  0008BA  0E06               	movlw	6
   957  0008BC  0012               	return		;indir
   958  0008BE                     l2540:
   959                           
   960                           ;FastTransfer.c: 114: serial_write(0x85);
   961  0008BE  D801               	call	u2498
   962  0008C0  D00B               	goto	l2542
   963  0008C2                     u2498:
   964  0008C2  0005               	push	
   965  0008C4  6EFA               	movwf	pclath,c
   966  0008C6  5015               	movf	_serial_write,w,c
   967  0008C8  6EFD               	movwf	tosl,c
   968  0008CA  5016               	movf	_serial_write+1,w,c
   969  0008CC  6EFE               	movwf	tosh,c
   970  0008CE  50F8               	movf	tblptru,w,c
   971  0008D0  6EFF               	movwf	tosu,c
   972  0008D2  50FA               	movf	pclath,w,c
   973  0008D4  0E85               	movlw	133
   974  0008D6  0012               	return		;indir
   975  0008D8                     l2542:
   976                           
   977                           ;FastTransfer.c: 115: serial_write(whereToSend);
   978  0008D8  D801               	call	u2508
   979  0008DA  D00C               	goto	l2544
   980  0008DC                     u2508:
   981  0008DC  0005               	push	
   982  0008DE  6EFA               	movwf	pclath,c
   983  0008E0  5015               	movf	_serial_write,w,c
   984  0008E2  6EFD               	movwf	tosl,c
   985  0008E4  5016               	movf	_serial_write+1,w,c
   986  0008E6  6EFE               	movwf	tosh,c
   987  0008E8  50F8               	movf	tblptru,w,c
   988  0008EA  6EFF               	movwf	tosu,c
   989  0008EC  50FA               	movf	pclath,w,c
   990  0008EE  0100               	movlb	0	; () banked
   991  0008F0  5186               	movf	sendData@whereToSend& (0+255),w,b
   992  0008F2  0012               	return		;indir
   993  0008F4                     l2544:
   994                           
   995                           ;FastTransfer.c: 116: serial_write(moduleAddress);
   996  0008F4  D801               	call	u2518
   997  0008F6  D00B               	goto	l2546
   998  0008F8                     u2518:
   999  0008F8  0005               	push	
  1000  0008FA  6EFA               	movwf	pclath,c
  1001  0008FC  5015               	movf	_serial_write,w,c
  1002  0008FE  6EFD               	movwf	tosl,c
  1003  000900  5016               	movf	_serial_write+1,w,c
  1004  000902  6EFE               	movwf	tosh,c
  1005  000904  50F8               	movf	tblptru,w,c
  1006  000906  6EFF               	movwf	tosu,c
  1007  000908  50FA               	movf	pclath,w,c
  1008  00090A  501E               	movf	_moduleAddress,w,c
  1009  00090C  0012               	return		;indir
  1010  00090E                     l2546:
  1011                           
  1012                           ;FastTransfer.c: 117: serial_write(ring_buffer.count);
  1013  00090E  D801               	call	u2528
  1014  000910  D00C               	goto	l2548
  1015  000912                     u2528:
  1016  000912  0005               	push	
  1017  000914  6EFA               	movwf	pclath,c
  1018  000916  5015               	movf	_serial_write,w,c
  1019  000918  6EFD               	movwf	tosl,c
  1020  00091A  5016               	movf	_serial_write+1,w,c
  1021  00091C  6EFE               	movwf	tosh,c
  1022  00091E  50F8               	movf	tblptru,w,c
  1023  000920  6EFF               	movwf	tosu,c
  1024  000922  50FA               	movf	pclath,w,c
  1025  000924  0101               	movlb	1	; () banked
  1026  000926  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1027  000928  0012               	return		;indir
  1028  00092A                     l2548:
  1029                           
  1030                           ;FastTransfer.c: 121: int i;
  1031                           ;FastTransfer.c: 122: for (i = 0; i < ring_buffer.count; i++) {
  1032  00092A  0E00               	movlw	0
  1033  00092C  0100               	movlb	0	; () banked
  1034  00092E  6F89               	movwf	(sendData@i+1)& (0+255),b
  1035  000930  0E00               	movlw	0
  1036  000932  6F88               	movwf	sendData@i& (0+255),b
  1037  000934  D018               	goto	l2554
  1038  000936                     l2550:
  1039                           
  1040                           ; BSR set to: 0
  1041                           ;FastTransfer.c: 123: serial_write(*(sendStructAddress + i));
  1042  000936  D801               	call	u2538
  1043  000938  D013               	goto	l2552
  1044  00093A                     u2538:
  1045  00093A  0005               	push	
  1046  00093C  6EFA               	movwf	pclath,c
  1047  00093E  5015               	movf	_serial_write,w,c
  1048  000940  6EFD               	movwf	tosl,c
  1049  000942  5016               	movf	_serial_write+1,w,c
  1050  000944  6EFE               	movwf	tosh,c
  1051  000946  50F8               	movf	tblptru,w,c
  1052  000948  6EFF               	movwf	tosu,c
  1053  00094A  50FA               	movf	pclath,w,c
  1054  00094C  0100               	movlb	0	; () banked
  1055  00094E  5188               	movf	sendData@i& (0+255),w,b
  1056  000950  240D               	addwf	_sendStructAddress,w,c
  1057  000952  6ED9               	movwf	fsr2l,c
  1058  000954  0100               	movlb	0	; () banked
  1059  000956  5189               	movf	(sendData@i+1)& (0+255),w,b
  1060  000958  200E               	addwfc	_sendStructAddress+1,w,c
  1061  00095A  6EDA               	movwf	fsr2h,c
  1062  00095C  50DF               	movf	indf2,w,c
  1063  00095E  0012               	return		;indir
  1064  000960                     l2552:
  1065  000960  0100               	movlb	0	; () banked
  1066  000962  4B88               	infsnz	sendData@i& (0+255),f,b
  1067  000964  2B89               	incf	(sendData@i+1)& (0+255),f,b
  1068  000966                     l2554:
  1069                           
  1070                           ; BSR set to: 0
  1071  000966  0101               	movlb	1	; () banked
  1072  000968  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1073  00096A  0100               	movlb	0	; () banked
  1074  00096C  5D88               	subwf	sendData@i& (0+255),w,b
  1075  00096E  0100               	movlb	0	; () banked
  1076  000970  5189               	movf	(sendData@i+1)& (0+255),w,b
  1077  000972  0A80               	xorlw	128
  1078  000974  0100               	movlb	0	; () banked
  1079  000976  6F85               	movwf	??_sendData& (0+255),b
  1080  000978  0101               	movlb	1	; () banked
  1081  00097A  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  1082  00097C  0A80               	xorlw	128
  1083  00097E  0100               	movlb	0	; () banked
  1084  000980  5985               	subwfb	??_sendData& (0+255),w,b
  1085  000982  A0D8               	btfss	status,0,c
  1086  000984  D7D8               	goto	l2550
  1087                           
  1088                           ; BSR set to: 0
  1089                           ;FastTransfer.c: 124: }
  1090                           ;FastTransfer.c: 127: serial_write(CS);
  1091                           
  1092                           ; BSR set to: 0
  1093  000986  D801               	call	u2558
  1094  000988  D00C               	goto	l2558
  1095  00098A                     u2558:
  1096  00098A  0005               	push	
  1097  00098C  6EFA               	movwf	pclath,c
  1098  00098E  5015               	movf	_serial_write,w,c
  1099  000990  6EFD               	movwf	tosl,c
  1100  000992  5016               	movf	_serial_write+1,w,c
  1101  000994  6EFE               	movwf	tosh,c
  1102  000996  50F8               	movf	tblptru,w,c
  1103  000998  6EFF               	movwf	tosu,c
  1104  00099A  50FA               	movf	pclath,w,c
  1105  00099C  0100               	movlb	0	; () banked
  1106  00099E  5187               	movf	sendData@CS& (0+255),w,b
  1107  0009A0  0012               	return		;indir
  1108  0009A2                     l2558:
  1109                           
  1110                           ;FastTransfer.c: 130: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1111  0009A2  0E64               	movlw	low _crc_buffer
  1112  0009A4  6E3D               	movwf	crcBufS_put@_this,c
  1113  0009A6  0E00               	movlw	high _crc_buffer
  1114  0009A8  6E3E               	movwf	crcBufS_put@_this+1,c
  1115  0009AA  C086  F03F         	movff	sendData@whereToSend,crcBufS_put@address
  1116  0009AE  C087  F040         	movff	sendData@CS,crcBufS_put@oldCRC
  1117  0009B2  0E00               	movlw	0
  1118  0009B4  6E41               	movwf	crcBufS_put@status,c
  1119  0009B6  EC85  F006         	call	_crcBufS_put
  1120                           
  1121                           ;FastTransfer.c: 133: FastTransfer_buffer_flush(&ring_buffer, 1);
  1122  0009BA  0E00               	movlw	low _ring_buffer
  1123  0009BC  0100               	movlb	0	; () banked
  1124  0009BE  6F81               	movwf	FastTransfer_buffer_flush@_this& (0+255),b
  1125  0009C0  0E01               	movlw	high _ring_buffer
  1126  0009C2  0100               	movlb	0	; () banked
  1127  0009C4  6F82               	movwf	(FastTransfer_buffer_flush@_this+1)& (0+255),b
  1128  0009C6  0E00               	movlw	0
  1129  0009C8  0100               	movlb	0	; () banked
  1130  0009CA  6F84               	movwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),b
  1131  0009CC  0E01               	movlw	1
  1132  0009CE  6F83               	movwf	FastTransfer_buffer_flush@clearBuffer& (0+255),b
  1133  0009D0  ECDA  F007         	call	_FastTransfer_buffer_flush	;wreg free
  1134  0009D4  0012               	return		;funcret
  1135  0009D6                     __end_of_sendData:
  1136                           	opt stack 0
  1137                           tosu	equ	0xFFF
  1138                           tosh	equ	0xFFE
  1139                           tosl	equ	0xFFD
  1140                           pclath	equ	0xFFA
  1141                           tblptru	equ	0xFF8
  1142                           tblptrh	equ	0xFF7
  1143                           tblptrl	equ	0xFF6
  1144                           tablat	equ	0xFF5
  1145                           postinc0	equ	0xFEE
  1146                           wreg	equ	0xFE8
  1147                           indf2	equ	0xFDF
  1148                           fsr2h	equ	0xFDA
  1149                           fsr2l	equ	0xFD9
  1150                           status	equ	0xFD8
  1151                           
  1152 ;; *************** function _crcBufS_put *****************
  1153 ;; Defined at:
  1154 ;;		line 378 in file "FastTransfer.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1157 ;;		 -> crc_buffer(17), 
  1158 ;;  address         1   28[COMRAM] unsigned char 
  1159 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1160 ;;  status          1   30[COMRAM] unsigned char 
  1161 ;; Auto vars:     Size  Location     Type
  1162 ;;		None
  1163 ;; Return value:  Size  Location     Type
  1164 ;;                  1    wreg      void 
  1165 ;; Registers used:
  1166 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1167 ;; Tracked objects:
  1168 ;;		On entry : 0/0
  1169 ;;		On exit  : 0/0
  1170 ;;		Unchanged: 0/0
  1171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1172 ;;      Params:         5       0       0       0       0       0       0
  1173 ;;      Locals:         0       0       0       0       0       0       0
  1174 ;;      Temps:          2       0       0       0       0       0       0
  1175 ;;      Totals:         7       0       0       0       0       0       0
  1176 ;;Total ram usage:        7 bytes
  1177 ;; Hardware stack levels used:    1
  1178 ;; Hardware stack levels required when called:    4
  1179 ;; This function calls:
  1180 ;;		Nothing
  1181 ;; This function is called by:
  1182 ;;		_sendData
  1183 ;; This function uses a non-reentrant model
  1184 ;;
  1185                           
  1186                           	psect	text4
  1187  000D0A                     __ptext4:
  1188                           	opt stack 0
  1189  000D0A                     _crcBufS_put:
  1190                           	opt stack 23
  1191                           
  1192                           ;FastTransfer.c: 379: _this->buf[_this->head] = address;
  1193                           
  1194                           ;incstack = 0
  1195  000D0A  EE20 F00F          	lfsr	2,15
  1196  000D0E  503D               	movf	crcBufS_put@_this,w,c
  1197  000D10  26D9               	addwf	fsr2l,f,c
  1198  000D12  503E               	movf	crcBufS_put@_this+1,w,c
  1199  000D14  22DA               	addwfc	fsr2h,f,c
  1200  000D16  CFDE F042          	movff	postinc2,??_crcBufS_put
  1201  000D1A  CFDD F043          	movff	postdec2,??_crcBufS_put+1
  1202  000D1E  5042               	movf	??_crcBufS_put,w,c
  1203  000D20  243D               	addwf	crcBufS_put@_this,w,c
  1204  000D22  6ED9               	movwf	fsr2l,c
  1205  000D24  5043               	movf	??_crcBufS_put+1,w,c
  1206  000D26  203E               	addwfc	crcBufS_put@_this+1,w,c
  1207  000D28  6EDA               	movwf	fsr2h,c
  1208  000D2A  C03F  FFDF         	movff	crcBufS_put@address,indf2
  1209                           
  1210                           ;FastTransfer.c: 380: _this->head++;
  1211  000D2E  EE20 F00F          	lfsr	2,15
  1212  000D32  503D               	movf	crcBufS_put@_this,w,c
  1213  000D34  26D9               	addwf	fsr2l,f,c
  1214  000D36  503E               	movf	crcBufS_put@_this+1,w,c
  1215  000D38  22DA               	addwfc	fsr2h,f,c
  1216  000D3A  2ADE               	incf	postinc2,f,c
  1217  000D3C  0E00               	movlw	0
  1218  000D3E  22DD               	addwfc	postdec2,f,c
  1219                           
  1220                           ;FastTransfer.c: 381: _this->buf[_this->head] = oldCRC;
  1221  000D40  EE20 F00F          	lfsr	2,15
  1222  000D44  503D               	movf	crcBufS_put@_this,w,c
  1223  000D46  26D9               	addwf	fsr2l,f,c
  1224  000D48  503E               	movf	crcBufS_put@_this+1,w,c
  1225  000D4A  22DA               	addwfc	fsr2h,f,c
  1226  000D4C  CFDE F042          	movff	postinc2,??_crcBufS_put
  1227  000D50  CFDD F043          	movff	postdec2,??_crcBufS_put+1
  1228  000D54  5042               	movf	??_crcBufS_put,w,c
  1229  000D56  243D               	addwf	crcBufS_put@_this,w,c
  1230  000D58  6ED9               	movwf	fsr2l,c
  1231  000D5A  5043               	movf	??_crcBufS_put+1,w,c
  1232  000D5C  203E               	addwfc	crcBufS_put@_this+1,w,c
  1233  000D5E  6EDA               	movwf	fsr2h,c
  1234  000D60  C040  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1235                           
  1236                           ;FastTransfer.c: 382: _this->head++;
  1237  000D64  EE20 F00F          	lfsr	2,15
  1238  000D68  503D               	movf	crcBufS_put@_this,w,c
  1239  000D6A  26D9               	addwf	fsr2l,f,c
  1240  000D6C  503E               	movf	crcBufS_put@_this+1,w,c
  1241  000D6E  22DA               	addwfc	fsr2h,f,c
  1242  000D70  2ADE               	incf	postinc2,f,c
  1243  000D72  0E00               	movlw	0
  1244  000D74  22DD               	addwfc	postdec2,f,c
  1245                           
  1246                           ;FastTransfer.c: 383: _this->buf[_this->head] = status;
  1247  000D76  EE20 F00F          	lfsr	2,15
  1248  000D7A  503D               	movf	crcBufS_put@_this,w,c
  1249  000D7C  26D9               	addwf	fsr2l,f,c
  1250  000D7E  503E               	movf	crcBufS_put@_this+1,w,c
  1251  000D80  22DA               	addwfc	fsr2h,f,c
  1252  000D82  CFDE F042          	movff	postinc2,??_crcBufS_put
  1253  000D86  CFDD F043          	movff	postdec2,??_crcBufS_put+1
  1254  000D8A  5042               	movf	??_crcBufS_put,w,c
  1255  000D8C  243D               	addwf	crcBufS_put@_this,w,c
  1256  000D8E  6ED9               	movwf	fsr2l,c
  1257  000D90  5043               	movf	??_crcBufS_put+1,w,c
  1258  000D92  203E               	addwfc	crcBufS_put@_this+1,w,c
  1259  000D94  6EDA               	movwf	fsr2h,c
  1260  000D96  C041  FFDF         	movff	crcBufS_put@status,indf2
  1261                           
  1262                           ;FastTransfer.c: 384: _this->head++;
  1263  000D9A  EE20 F00F          	lfsr	2,15
  1264  000D9E  503D               	movf	crcBufS_put@_this,w,c
  1265  000DA0  26D9               	addwf	fsr2l,f,c
  1266  000DA2  503E               	movf	crcBufS_put@_this+1,w,c
  1267  000DA4  22DA               	addwfc	fsr2h,f,c
  1268  000DA6  2ADE               	incf	postinc2,f,c
  1269  000DA8  0E00               	movlw	0
  1270  000DAA  22DD               	addwfc	postdec2,f,c
  1271                           
  1272                           ;FastTransfer.c: 385: if (_this->head >= (5 * 3)) {
  1273  000DAC  EE20 F00F          	lfsr	2,15
  1274  000DB0  503D               	movf	crcBufS_put@_this,w,c
  1275  000DB2  26D9               	addwf	fsr2l,f,c
  1276  000DB4  503E               	movf	crcBufS_put@_this+1,w,c
  1277  000DB6  22DA               	addwfc	fsr2h,f,c
  1278  000DB8  0E01               	movlw	1
  1279  000DBA  BEDB               	btfsc	plusw2,7,c
  1280  000DBC  0012               	return	
  1281  000DBE  0E01               	movlw	1
  1282  000DC0  50DB               	movf	plusw2,w,c
  1283  000DC2  E104               	bnz	u2380
  1284  000DC4  0E0F               	movlw	15
  1285  000DC6  5CDE               	subwf	postinc2,w,c
  1286  000DC8  A0D8               	btfss	status,0,c
  1287  000DCA  0012               	return	
  1288  000DCC                     u2380:
  1289                           
  1290                           ;FastTransfer.c: 386: _this->head = 0;
  1291  000DCC  EE20 F00F          	lfsr	2,15
  1292  000DD0  503D               	movf	crcBufS_put@_this,w,c
  1293  000DD2  26D9               	addwf	fsr2l,f,c
  1294  000DD4  503E               	movf	crcBufS_put@_this+1,w,c
  1295  000DD6  22DA               	addwfc	fsr2h,f,c
  1296  000DD8  0E00               	movlw	0
  1297  000DDA  6EDE               	movwf	postinc2,c
  1298  000DDC  0E00               	movlw	0
  1299  000DDE  6EDD               	movwf	postdec2,c
  1300  000DE0  0012               	return	
  1301  000DE2                     __end_of_crcBufS_put:
  1302                           	opt stack 0
  1303                           tosu	equ	0xFFF
  1304                           tosh	equ	0xFFE
  1305                           tosl	equ	0xFFD
  1306                           pclath	equ	0xFFA
  1307                           tblptru	equ	0xFF8
  1308                           tblptrh	equ	0xFF7
  1309                           tblptrl	equ	0xFF6
  1310                           tablat	equ	0xFF5
  1311                           postinc0	equ	0xFEE
  1312                           wreg	equ	0xFE8
  1313                           indf2	equ	0xFDF
  1314                           postinc2	equ	0xFDE
  1315                           postdec2	equ	0xFDD
  1316                           plusw2	equ	0xFDB
  1317                           fsr2h	equ	0xFDA
  1318                           fsr2l	equ	0xFD9
  1319                           status	equ	0xFD8
  1320                           
  1321 ;; *************** function _FastTransfer_buffer_flush *****************
  1322 ;; Defined at:
  1323 ;;		line 318 in file "FastTransfer.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  _this           2    2[BANK0 ] PTR struct ringBufS
  1326 ;;		 -> ring_buffer(206), 
  1327 ;;  clearBuffer     2    4[BANK0 ] const int 
  1328 ;; Auto vars:     Size  Location     Type
  1329 ;;		None
  1330 ;; Return value:  Size  Location     Type
  1331 ;;                  1    wreg      void 
  1332 ;; Registers used:
  1333 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1339 ;;      Params:         0       4       0       0       0       0       0
  1340 ;;      Locals:         0       0       0       0       0       0       0
  1341 ;;      Temps:          0       0       0       0       0       0       0
  1342 ;;      Totals:         0       4       0       0       0       0       0
  1343 ;;Total ram usage:        4 bytes
  1344 ;; Hardware stack levels used:    1
  1345 ;; Hardware stack levels required when called:    5
  1346 ;; This function calls:
  1347 ;;		_memset
  1348 ;; This function is called by:
  1349 ;;		_sendData
  1350 ;; This function uses a non-reentrant model
  1351 ;;
  1352                           
  1353                           	psect	text5
  1354  000FB4                     __ptext5:
  1355                           	opt stack 0
  1356  000FB4                     _FastTransfer_buffer_flush:
  1357                           	opt stack 22
  1358                           
  1359                           ;FastTransfer.c: 319: _this->count = 0;
  1360                           
  1361                           ;incstack = 0
  1362  000FB4  0100               	movlb	0	; () banked
  1363  000FB6  EE20 F0CC          	lfsr	2,204
  1364  000FBA  5181               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1365  000FBC  26D9               	addwf	fsr2l,f,c
  1366  000FBE  5182               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1367  000FC0  22DA               	addwfc	fsr2h,f,c
  1368  000FC2  0E00               	movlw	0
  1369  000FC4  6EDE               	movwf	postinc2,c
  1370  000FC6  0E00               	movlw	0
  1371  000FC8  6EDD               	movwf	postdec2,c
  1372                           
  1373                           ;FastTransfer.c: 320: _this->head = 0;
  1374  000FCA  0100               	movlb	0	; () banked
  1375  000FCC  EE20 F0C8          	lfsr	2,200
  1376  000FD0  5181               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1377  000FD2  26D9               	addwf	fsr2l,f,c
  1378  000FD4  5182               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1379  000FD6  22DA               	addwfc	fsr2h,f,c
  1380  000FD8  0E00               	movlw	0
  1381  000FDA  6EDE               	movwf	postinc2,c
  1382  000FDC  0E00               	movlw	0
  1383  000FDE  6EDD               	movwf	postdec2,c
  1384                           
  1385                           ;FastTransfer.c: 321: _this->tail = 0;
  1386  000FE0  0100               	movlb	0	; () banked
  1387  000FE2  EE20 F0CA          	lfsr	2,202
  1388  000FE6  5181               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1389  000FE8  26D9               	addwf	fsr2l,f,c
  1390  000FEA  5182               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1391  000FEC  22DA               	addwfc	fsr2h,f,c
  1392  000FEE  0E00               	movlw	0
  1393  000FF0  6EDE               	movwf	postinc2,c
  1394  000FF2  0E00               	movlw	0
  1395  000FF4  6EDD               	movwf	postdec2,c
  1396                           
  1397                           ; BSR set to: 0
  1398                           ;FastTransfer.c: 322: if (clearBuffer) {
  1399  000FF6  0100               	movlb	0	; () banked
  1400  000FF8  5183               	movf	FastTransfer_buffer_flush@clearBuffer& (0+255),w,b
  1401  000FFA  0100               	movlb	0	; () banked
  1402  000FFC  1184               	iorwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),w,b
  1403  000FFE  B4D8               	btfsc	status,2,c
  1404  001000  0012               	return	
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;FastTransfer.c: 323: memset(_this->buf, 0, sizeof (_this->buf));
  1408  001002  C081  F03D         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1409  001006  C082  F03E         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1410  00100A  0E00               	movlw	0
  1411  00100C  6E40               	movwf	memset@c+1,c
  1412  00100E  0E00               	movlw	0
  1413  001010  6E3F               	movwf	memset@c,c
  1414  001012  0E00               	movlw	0
  1415  001014  6E42               	movwf	memset@n+1,c
  1416  001016  0EC8               	movlw	200
  1417  001018  6E41               	movwf	memset@n,c
  1418  00101A  ECA2  F009         	call	_memset	;wreg free
  1419  00101E  0012               	return	
  1420  001020                     __end_of_FastTransfer_buffer_flush:
  1421                           	opt stack 0
  1422                           tosu	equ	0xFFF
  1423                           tosh	equ	0xFFE
  1424                           tosl	equ	0xFFD
  1425                           pclath	equ	0xFFA
  1426                           tblptru	equ	0xFF8
  1427                           tblptrh	equ	0xFF7
  1428                           tblptrl	equ	0xFF6
  1429                           tablat	equ	0xFF5
  1430                           postinc0	equ	0xFEE
  1431                           wreg	equ	0xFE8
  1432                           indf2	equ	0xFDF
  1433                           postinc2	equ	0xFDE
  1434                           postdec2	equ	0xFDD
  1435                           plusw2	equ	0xFDB
  1436                           fsr2h	equ	0xFDA
  1437                           fsr2l	equ	0xFD9
  1438                           status	equ	0xFD8
  1439                           
  1440 ;; *************** function _ToSend *****************
  1441 ;; Defined at:
  1442 ;;		line 273 in file "FastTransfer.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;  where           1    wreg     unsigned char 
  1445 ;;  what            2    7[BANK0 ] unsigned int 
  1446 ;; Auto vars:     Size  Location     Type
  1447 ;;  where           1   32[COMRAM] unsigned char 
  1448 ;; Return value:  Size  Location     Type
  1449 ;;                  1    wreg      void 
  1450 ;; Registers used:
  1451 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1452 ;; Tracked objects:
  1453 ;;		On entry : 0/0
  1454 ;;		On exit  : 0/0
  1455 ;;		Unchanged: 0/0
  1456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1457 ;;      Params:         0       2       0       0       0       0       0
  1458 ;;      Locals:         1       0       0       0       0       0       0
  1459 ;;      Temps:          0       0       0       0       0       0       0
  1460 ;;      Totals:         1       2       0       0       0       0       0
  1461 ;;Total ram usage:        3 bytes
  1462 ;; Hardware stack levels used:    1
  1463 ;; Hardware stack levels required when called:    6
  1464 ;; This function calls:
  1465 ;;		_FastTransfer_buffer_put
  1466 ;; This function is called by:
  1467 ;;		_respondECU
  1468 ;; This function uses a non-reentrant model
  1469 ;;
  1470                           
  1471                           	psect	text6
  1472  0013F0                     __ptext6:
  1473                           	opt stack 0
  1474  0013F0                     _ToSend:
  1475                           	opt stack 22
  1476                           
  1477                           ;incstack = 0
  1478                           ;ToSend@where stored from wreg
  1479  0013F0  6E43               	movwf	ToSend@where,c
  1480                           
  1481                           ;FastTransfer.c: 274: FastTransfer_buffer_put(&ring_buffer, where, what);
  1482  0013F2  0E00               	movlw	low _ring_buffer
  1483  0013F4  0100               	movlb	0	; () banked
  1484  0013F6  6F7F               	movwf	FastTransfer_buffer_put@_this& (0+255),b
  1485  0013F8  0E01               	movlw	high _ring_buffer
  1486  0013FA  0100               	movlb	0	; () banked
  1487  0013FC  6F80               	movwf	(FastTransfer_buffer_put@_this+1)& (0+255),b
  1488  0013FE  C043  F081         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  1489  001402  C086  F082         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  1490  001406  C087  F083         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  1491  00140A  EC79  F003         	call	_FastTransfer_buffer_put	;wreg free
  1492  00140E  0012               	return		;funcret
  1493  001410                     __end_of_ToSend:
  1494                           	opt stack 0
  1495                           tosu	equ	0xFFF
  1496                           tosh	equ	0xFFE
  1497                           tosl	equ	0xFFD
  1498                           pclath	equ	0xFFA
  1499                           tblptru	equ	0xFF8
  1500                           tblptrh	equ	0xFF7
  1501                           tblptrl	equ	0xFF6
  1502                           tablat	equ	0xFF5
  1503                           postinc0	equ	0xFEE
  1504                           wreg	equ	0xFE8
  1505                           indf2	equ	0xFDF
  1506                           postinc2	equ	0xFDE
  1507                           postdec2	equ	0xFDD
  1508                           plusw2	equ	0xFDB
  1509                           fsr2h	equ	0xFDA
  1510                           fsr2l	equ	0xFD9
  1511                           status	equ	0xFD8
  1512                           
  1513 ;; *************** function _FastTransfer_buffer_put *****************
  1514 ;; Defined at:
  1515 ;;		line 280 in file "FastTransfer.c"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;  _this           2    0[BANK0 ] PTR struct ringBufS
  1518 ;;		 -> ring_buffer(206), 
  1519 ;;  towhere         1    2[BANK0 ] unsigned char 
  1520 ;;  towhat          2    3[BANK0 ] unsigned int 
  1521 ;; Auto vars:     Size  Location     Type
  1522 ;;		None
  1523 ;; Return value:  Size  Location     Type
  1524 ;;                  1    wreg      void 
  1525 ;; Registers used:
  1526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1527 ;; Tracked objects:
  1528 ;;		On entry : 0/0
  1529 ;;		On exit  : 0/0
  1530 ;;		Unchanged: 0/0
  1531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1532 ;;      Params:         0       5       0       0       0       0       0
  1533 ;;      Locals:         0       0       0       0       0       0       0
  1534 ;;      Temps:          0       2       0       0       0       0       0
  1535 ;;      Totals:         0       7       0       0       0       0       0
  1536 ;;Total ram usage:        7 bytes
  1537 ;; Hardware stack levels used:    1
  1538 ;; Hardware stack levels required when called:    5
  1539 ;; This function calls:
  1540 ;;		_FastTransfer_buffer_modulo_inc
  1541 ;; This function is called by:
  1542 ;;		_ToSend
  1543 ;; This function uses a non-reentrant model
  1544 ;;
  1545                           
  1546                           	psect	text7
  1547  0006F2                     __ptext7:
  1548                           	opt stack 0
  1549  0006F2                     _FastTransfer_buffer_put:
  1550                           	opt stack 22
  1551                           
  1552                           ;FastTransfer.c: 282: group.integer = towhat;
  1553                           
  1554                           ;incstack = 0
  1555  0006F2  C082  F009         	movff	FastTransfer_buffer_put@towhat,_group
  1556  0006F6  C083  F00A         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  1557                           
  1558                           ;FastTransfer.c: 284: if (_this->count < (200 - 3)) {
  1559  0006FA  0100               	movlb	0	; () banked
  1560  0006FC  EE20 F0CC          	lfsr	2,204
  1561  000700  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1562  000702  26D9               	addwf	fsr2l,f,c
  1563  000704  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1564  000706  22DA               	addwfc	fsr2h,f,c
  1565  000708  0E01               	movlw	1
  1566  00070A  BEDB               	btfsc	plusw2,7,c
  1567  00070C  D007               	goto	l2438
  1568  00070E  0E01               	movlw	1
  1569  000710  50DB               	movf	plusw2,w,c
  1570  000712  E103               	bnz	u2401
  1571  000714  0EC5               	movlw	197
  1572  000716  5CDE               	subwf	postinc2,w,c
  1573  000718  B0D8               	btfsc	status,0,c
  1574  00071A                     u2401:
  1575  00071A  0012               	return	
  1576  00071C                     l2438:
  1577                           
  1578                           ; BSR set to: 0
  1579                           ;FastTransfer.c: 285: _this->buf[_this->head] = towhere;
  1580  00071C  0100               	movlb	0	; () banked
  1581  00071E  EE20 F0C8          	lfsr	2,200
  1582  000722  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1583  000724  26D9               	addwf	fsr2l,f,c
  1584  000726  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1585  000728  22DA               	addwfc	fsr2h,f,c
  1586  00072A  CFDE F084          	movff	postinc2,??_FastTransfer_buffer_put
  1587  00072E  CFDD F085          	movff	postdec2,??_FastTransfer_buffer_put+1
  1588  000732  0100               	movlb	0	; () banked
  1589  000734  5184               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1590  000736  0100               	movlb	0	; () banked
  1591  000738  257F               	addwf	FastTransfer_buffer_put@_this& (0+255),w,b
  1592  00073A  6ED9               	movwf	fsr2l,c
  1593  00073C  0100               	movlb	0	; () banked
  1594  00073E  5185               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1595  000740  0100               	movlb	0	; () banked
  1596  000742  2180               	addwfc	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1597  000744  6EDA               	movwf	fsr2h,c
  1598  000746  C081  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;FastTransfer.c: 286: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1602  00074A  0100               	movlb	0	; () banked
  1603  00074C  EE20 F0C8          	lfsr	2,200
  1604  000750  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1605  000752  26D9               	addwf	fsr2l,f,c
  1606  000754  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1607  000756  22DA               	addwfc	fsr2h,f,c
  1608  000758  CFDE F03D          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1609  00075C  CFDD F03E          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1610  000760  0E00               	movlw	0
  1611  000762  6E40               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1612  000764  0EC8               	movlw	200
  1613  000766  6E3F               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1614  000768  ECB9  F009         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1615  00076C  0100               	movlb	0	; () banked
  1616  00076E  EE20 F0C8          	lfsr	2,200
  1617  000772  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1618  000774  26D9               	addwf	fsr2l,f,c
  1619  000776  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1620  000778  22DA               	addwfc	fsr2h,f,c
  1621  00077A  C03D  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1622  00077E  C03E  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1623                           
  1624                           ; BSR set to: 0
  1625                           ;FastTransfer.c: 287: ++_this->count;
  1626  000782  0100               	movlb	0	; () banked
  1627  000784  EE20 F0CC          	lfsr	2,204
  1628  000788  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1629  00078A  26D9               	addwf	fsr2l,f,c
  1630  00078C  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1631  00078E  22DA               	addwfc	fsr2h,f,c
  1632  000790  2ADE               	incf	postinc2,f,c
  1633  000792  0E00               	movlw	0
  1634  000794  22DD               	addwfc	postdec2,f,c
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;FastTransfer.c: 288: _this->buf[_this->head] = group.parts[0];
  1638  000796  0100               	movlb	0	; () banked
  1639  000798  EE20 F0C8          	lfsr	2,200
  1640  00079C  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1641  00079E  26D9               	addwf	fsr2l,f,c
  1642  0007A0  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1643  0007A2  22DA               	addwfc	fsr2h,f,c
  1644  0007A4  CFDE F084          	movff	postinc2,??_FastTransfer_buffer_put
  1645  0007A8  CFDD F085          	movff	postdec2,??_FastTransfer_buffer_put+1
  1646  0007AC  0100               	movlb	0	; () banked
  1647  0007AE  5184               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1648  0007B0  0100               	movlb	0	; () banked
  1649  0007B2  257F               	addwf	FastTransfer_buffer_put@_this& (0+255),w,b
  1650  0007B4  6ED9               	movwf	fsr2l,c
  1651  0007B6  0100               	movlb	0	; () banked
  1652  0007B8  5185               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1653  0007BA  0100               	movlb	0	; () banked
  1654  0007BC  2180               	addwfc	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1655  0007BE  6EDA               	movwf	fsr2h,c
  1656  0007C0  C009  FFDF         	movff	_group,indf2
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;FastTransfer.c: 289: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1660  0007C4  0100               	movlb	0	; () banked
  1661  0007C6  EE20 F0C8          	lfsr	2,200
  1662  0007CA  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1663  0007CC  26D9               	addwf	fsr2l,f,c
  1664  0007CE  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1665  0007D0  22DA               	addwfc	fsr2h,f,c
  1666  0007D2  CFDE F03D          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1667  0007D6  CFDD F03E          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1668  0007DA  0E00               	movlw	0
  1669  0007DC  6E40               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1670  0007DE  0EC8               	movlw	200
  1671  0007E0  6E3F               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1672  0007E2  ECB9  F009         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1673  0007E6  0100               	movlb	0	; () banked
  1674  0007E8  EE20 F0C8          	lfsr	2,200
  1675  0007EC  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1676  0007EE  26D9               	addwf	fsr2l,f,c
  1677  0007F0  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1678  0007F2  22DA               	addwfc	fsr2h,f,c
  1679  0007F4  C03D  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1680  0007F8  C03E  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1681                           
  1682                           ;FastTransfer.c: 290: ++_this->count;
  1683  0007FC  0100               	movlb	0	; () banked
  1684  0007FE  EE20 F0CC          	lfsr	2,204
  1685  000802  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1686  000804  26D9               	addwf	fsr2l,f,c
  1687  000806  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1688  000808  22DA               	addwfc	fsr2h,f,c
  1689  00080A  2ADE               	incf	postinc2,f,c
  1690  00080C  0E00               	movlw	0
  1691  00080E  22DD               	addwfc	postdec2,f,c
  1692                           
  1693                           ;FastTransfer.c: 291: _this->buf[_this->head] = group.parts[1];
  1694  000810  0100               	movlb	0	; () banked
  1695  000812  EE20 F0C8          	lfsr	2,200
  1696  000816  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1697  000818  26D9               	addwf	fsr2l,f,c
  1698  00081A  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1699  00081C  22DA               	addwfc	fsr2h,f,c
  1700  00081E  CFDE F084          	movff	postinc2,??_FastTransfer_buffer_put
  1701  000822  CFDD F085          	movff	postdec2,??_FastTransfer_buffer_put+1
  1702  000826  0100               	movlb	0	; () banked
  1703  000828  5184               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1704  00082A  0100               	movlb	0	; () banked
  1705  00082C  257F               	addwf	FastTransfer_buffer_put@_this& (0+255),w,b
  1706  00082E  6ED9               	movwf	fsr2l,c
  1707  000830  0100               	movlb	0	; () banked
  1708  000832  5185               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1709  000834  0100               	movlb	0	; () banked
  1710  000836  2180               	addwfc	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1711  000838  6EDA               	movwf	fsr2h,c
  1712  00083A  C00A  FFDF         	movff	_group+1,indf2
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;FastTransfer.c: 292: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1716  00083E  0100               	movlb	0	; () banked
  1717  000840  EE20 F0C8          	lfsr	2,200
  1718  000844  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1719  000846  26D9               	addwf	fsr2l,f,c
  1720  000848  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1721  00084A  22DA               	addwfc	fsr2h,f,c
  1722  00084C  CFDE F03D          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1723  000850  CFDD F03E          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1724  000854  0E00               	movlw	0
  1725  000856  6E40               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1726  000858  0EC8               	movlw	200
  1727  00085A  6E3F               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1728  00085C  ECB9  F009         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1729  000860  0100               	movlb	0	; () banked
  1730  000862  EE20 F0C8          	lfsr	2,200
  1731  000866  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1732  000868  26D9               	addwf	fsr2l,f,c
  1733  00086A  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1734  00086C  22DA               	addwfc	fsr2h,f,c
  1735  00086E  C03D  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1736  000872  C03E  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;FastTransfer.c: 293: ++_this->count;
  1740  000876  0100               	movlb	0	; () banked
  1741  000878  EE20 F0CC          	lfsr	2,204
  1742  00087C  517F               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1743  00087E  26D9               	addwf	fsr2l,f,c
  1744  000880  5180               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1745  000882  22DA               	addwfc	fsr2h,f,c
  1746  000884  2ADE               	incf	postinc2,f,c
  1747  000886  0E00               	movlw	0
  1748  000888  22DD               	addwfc	postdec2,f,c
  1749  00088A  0012               	return	
  1750  00088C                     __end_of_FastTransfer_buffer_put:
  1751                           	opt stack 0
  1752                           tosu	equ	0xFFF
  1753                           tosh	equ	0xFFE
  1754                           tosl	equ	0xFFD
  1755                           pclath	equ	0xFFA
  1756                           tblptru	equ	0xFF8
  1757                           tblptrh	equ	0xFF7
  1758                           tblptrl	equ	0xFF6
  1759                           tablat	equ	0xFF5
  1760                           postinc0	equ	0xFEE
  1761                           wreg	equ	0xFE8
  1762                           indf2	equ	0xFDF
  1763                           postinc2	equ	0xFDE
  1764                           postdec2	equ	0xFDD
  1765                           plusw2	equ	0xFDB
  1766                           fsr2h	equ	0xFDA
  1767                           fsr2l	equ	0xFD9
  1768                           status	equ	0xFD8
  1769                           
  1770 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  1771 ;; Defined at:
  1772 ;;		line 330 in file "FastTransfer.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;  value           2   26[COMRAM] const unsigned int 
  1775 ;;  modulus         2   28[COMRAM] const unsigned int 
  1776 ;; Auto vars:     Size  Location     Type
  1777 ;;  my_value        2   30[COMRAM] unsigned int 
  1778 ;; Return value:  Size  Location     Type
  1779 ;;                  2   26[COMRAM] unsigned int 
  1780 ;; Registers used:
  1781 ;;		wreg, status,2, status,0
  1782 ;; Tracked objects:
  1783 ;;		On entry : 0/0
  1784 ;;		On exit  : 0/0
  1785 ;;		Unchanged: 0/0
  1786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1787 ;;      Params:         4       0       0       0       0       0       0
  1788 ;;      Locals:         2       0       0       0       0       0       0
  1789 ;;      Temps:          0       0       0       0       0       0       0
  1790 ;;      Totals:         6       0       0       0       0       0       0
  1791 ;;Total ram usage:        6 bytes
  1792 ;; Hardware stack levels used:    1
  1793 ;; Hardware stack levels required when called:    4
  1794 ;; This function calls:
  1795 ;;		Nothing
  1796 ;; This function is called by:
  1797 ;;		_FastTransfer_buffer_put
  1798 ;;		_FastTransfer_buffer_get
  1799 ;; This function uses a non-reentrant model
  1800 ;;
  1801                           
  1802                           	psect	text8
  1803  001372                     __ptext8:
  1804                           	opt stack 0
  1805  001372                     _FastTransfer_buffer_modulo_inc:
  1806                           	opt stack 22
  1807                           
  1808                           ;FastTransfer.c: 331: unsigned int my_value = value + 1;
  1809                           
  1810                           ; BSR set to: 0
  1811                           ;incstack = 0
  1812  001372  0E01               	movlw	1
  1813  001374  243D               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  1814  001376  6E41               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1815  001378  0E00               	movlw	0
  1816  00137A  203E               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  1817  00137C  6E42               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1818                           
  1819                           ;FastTransfer.c: 332: if (my_value >= modulus) {
  1820  00137E  503F               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  1821  001380  5C41               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  1822  001382  5040               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  1823  001384  5842               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  1824  001386  A0D8               	btfss	status,0,c
  1825  001388  D004               	goto	l1754
  1826                           
  1827                           ;FastTransfer.c: 333: my_value = 0;
  1828  00138A  0E00               	movlw	0
  1829  00138C  6E42               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1830  00138E  0E00               	movlw	0
  1831  001390  6E41               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1832  001392                     l1754:
  1833                           
  1834                           ;FastTransfer.c: 334: }
  1835                           ;FastTransfer.c: 335: return (my_value);
  1836  001392  C041  F03D         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  1837  001396  C042  F03E         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  1838  00139A  0012               	return	
  1839  00139C                     __end_of_FastTransfer_buffer_modulo_inc:
  1840                           	opt stack 0
  1841                           tosu	equ	0xFFF
  1842                           tosh	equ	0xFFE
  1843                           tosl	equ	0xFFD
  1844                           pclath	equ	0xFFA
  1845                           tblptru	equ	0xFF8
  1846                           tblptrh	equ	0xFF7
  1847                           tblptrl	equ	0xFF6
  1848                           tablat	equ	0xFF5
  1849                           postinc0	equ	0xFEE
  1850                           wreg	equ	0xFE8
  1851                           indf2	equ	0xFDF
  1852                           postinc2	equ	0xFDE
  1853                           postdec2	equ	0xFDD
  1854                           plusw2	equ	0xFDB
  1855                           fsr2h	equ	0xFDA
  1856                           fsr2l	equ	0xFD9
  1857                           status	equ	0xFD8
  1858                           
  1859 ;; *************** function _GetFaults *****************
  1860 ;; Defined at:
  1861 ;;		line 34 in file "Function.c"
  1862 ;; Parameters:    Size  Location     Type
  1863 ;;  num             1    wreg     unsigned char 
  1864 ;; Auto vars:     Size  Location     Type
  1865 ;;  num             1   26[COMRAM] unsigned char 
  1866 ;; Return value:  Size  Location     Type
  1867 ;;                  1    wreg      unsigned char 
  1868 ;; Registers used:
  1869 ;;		wreg, status,2, status,0
  1870 ;; Tracked objects:
  1871 ;;		On entry : 0/0
  1872 ;;		On exit  : 0/0
  1873 ;;		Unchanged: 0/0
  1874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1875 ;;      Params:         0       0       0       0       0       0       0
  1876 ;;      Locals:         1       0       0       0       0       0       0
  1877 ;;      Temps:          0       0       0       0       0       0       0
  1878 ;;      Totals:         1       0       0       0       0       0       0
  1879 ;;Total ram usage:        1 bytes
  1880 ;; Hardware stack levels used:    1
  1881 ;; Hardware stack levels required when called:    4
  1882 ;; This function calls:
  1883 ;;		Nothing
  1884 ;; This function is called by:
  1885 ;;		_respondECU
  1886 ;; This function uses a non-reentrant model
  1887 ;;
  1888                           
  1889                           	psect	text9
  1890  00149C                     __ptext9:
  1891                           	opt stack 0
  1892  00149C                     _GetFaults:
  1893                           	opt stack 24
  1894                           
  1895                           ;incstack = 0
  1896                           ;GetFaults@num stored from wreg
  1897  00149C  6E3D               	movwf	GetFaults@num,c
  1898                           
  1899                           ;Function.c: 35: if(num == 1){
  1900  00149E  043D               	decf	GetFaults@num,w,c
  1901  0014A0  A4D8               	btfss	status,2,c
  1902  0014A2  D002               	goto	l1270
  1903                           
  1904                           ;Function.c: 36: return ByteHigh;
  1905  0014A4  501A               	movf	_ByteHigh,w,c
  1906  0014A6  0012               	return	
  1907  0014A8                     l1270:
  1908                           
  1909                           ;Function.c: 37: }
  1910                           ;Function.c: 38: if(num == 0){
  1911  0014A8  503D               	movf	GetFaults@num,w,c
  1912  0014AA  A4D8               	btfss	status,2,c
  1913  0014AC  0012               	return	
  1914                           
  1915                           ;Function.c: 39: return ByteLow;
  1916  0014AE  501B               	movf	_ByteLow,w,c
  1917  0014B0  0012               	return	
  1918  0014B2                     __end_of_GetFaults:
  1919                           	opt stack 0
  1920                           tosu	equ	0xFFF
  1921                           tosh	equ	0xFFE
  1922                           tosl	equ	0xFFD
  1923                           pclath	equ	0xFFA
  1924                           tblptru	equ	0xFF8
  1925                           tblptrh	equ	0xFF7
  1926                           tblptrl	equ	0xFF6
  1927                           tablat	equ	0xFF5
  1928                           postinc0	equ	0xFEE
  1929                           wreg	equ	0xFE8
  1930                           indf2	equ	0xFDF
  1931                           postinc2	equ	0xFDE
  1932                           postdec2	equ	0xFDD
  1933                           plusw2	equ	0xFDB
  1934                           fsr2h	equ	0xFDA
  1935                           fsr2l	equ	0xFD9
  1936                           status	equ	0xFD8
  1937                           
  1938 ;; *************** function _Delay *****************
  1939 ;; Defined at:
  1940 ;;		line 196 in file "Function.c"
  1941 ;; Parameters:    Size  Location     Type
  1942 ;;  wait            2   26[COMRAM] int 
  1943 ;; Auto vars:     Size  Location     Type
  1944 ;;  x               2   29[COMRAM] int 
  1945 ;; Return value:  Size  Location     Type
  1946 ;;                  1    wreg      void 
  1947 ;; Registers used:
  1948 ;;		wreg, status,2, status,0
  1949 ;; Tracked objects:
  1950 ;;		On entry : 0/0
  1951 ;;		On exit  : 0/0
  1952 ;;		Unchanged: 0/0
  1953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1954 ;;      Params:         2       0       0       0       0       0       0
  1955 ;;      Locals:         2       0       0       0       0       0       0
  1956 ;;      Temps:          1       0       0       0       0       0       0
  1957 ;;      Totals:         5       0       0       0       0       0       0
  1958 ;;Total ram usage:        5 bytes
  1959 ;; Hardware stack levels used:    1
  1960 ;; Hardware stack levels required when called:    4
  1961 ;; This function calls:
  1962 ;;		Nothing
  1963 ;; This function is called by:
  1964 ;;		_respondECU
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           	psect	text10
  1969  0012B0                     __ptext10:
  1970                           	opt stack 0
  1971  0012B0                     _Delay:
  1972                           	opt stack 24
  1973                           
  1974                           ;Function.c: 197: int x;
  1975                           ;Function.c: 198: for (x = 0; x < wait; x++) {
  1976                           
  1977                           ;incstack = 0
  1978  0012B0  0E00               	movlw	0
  1979  0012B2  6E41               	movwf	Delay@x+1,c
  1980  0012B4  0E00               	movlw	0
  1981  0012B6  6E40               	movwf	Delay@x,c
  1982  0012B8  D00A               	goto	l457
  1983  0012BA                     l1930:
  1984                           
  1985                           ;Function.c: 199: _delay((unsigned long)((1)*(16000000/4000.0)));
  1986  0012BA  0E06               	movlw	6
  1987  0012BC  6E3F               	movwf	??_Delay& (0+255),c
  1988  0012BE  0E30               	movlw	48
  1989  0012C0                     u3167:
  1990  0012C0  2EE8               	decfsz	wreg,f,c
  1991  0012C2  D7FE               	goto	u3167
  1992  0012C4  2E3F               	decfsz	??_Delay& (0+255),f,c
  1993  0012C6  D7FC               	goto	u3167
  1994  0012C8  D000               	nop2	
  1995  0012CA  4A40               	infsnz	Delay@x,f,c
  1996  0012CC  2A41               	incf	Delay@x+1,f,c
  1997  0012CE                     l457:
  1998  0012CE  503D               	movf	Delay@wait,w,c
  1999  0012D0  5C40               	subwf	Delay@x,w,c
  2000  0012D2  5041               	movf	Delay@x+1,w,c
  2001  0012D4  0A80               	xorlw	128
  2002  0012D6  6E3F               	movwf	??_Delay& (0+255),c
  2003  0012D8  503E               	movf	Delay@wait+1,w,c
  2004  0012DA  0A80               	xorlw	128
  2005  0012DC  583F               	subwfb	??_Delay& (0+255),w,c
  2006  0012DE  B0D8               	btfsc	status,0,c
  2007  0012E0  0012               	return	
  2008  0012E2  D7EB               	goto	l1930
  2009  0012E4                     __end_of_Delay:
  2010                           	opt stack 0
  2011                           tosu	equ	0xFFF
  2012                           tosh	equ	0xFFE
  2013                           tosl	equ	0xFFD
  2014                           pclath	equ	0xFFA
  2015                           tblptru	equ	0xFF8
  2016                           tblptrh	equ	0xFF7
  2017                           tblptrl	equ	0xFF6
  2018                           tablat	equ	0xFF5
  2019                           postinc0	equ	0xFEE
  2020                           wreg	equ	0xFE8
  2021                           indf2	equ	0xFDF
  2022                           postinc2	equ	0xFDE
  2023                           postdec2	equ	0xFDD
  2024                           plusw2	equ	0xFDB
  2025                           fsr2h	equ	0xFDA
  2026                           fsr2l	equ	0xFD9
  2027                           status	equ	0xFD8
  2028                           
  2029 ;; *************** function _receiveData *****************
  2030 ;; Defined at:
  2031 ;;		line 137 in file "FastTransfer.c"
  2032 ;; Parameters:    Size  Location     Type
  2033 ;;		None
  2034 ;; Auto vars:     Size  Location     Type
  2035 ;;  holder          3   15[BANK0 ] unsigned char [3]
  2036 ;;  crcHolder       1   19[BANK0 ] unsigned char 
  2037 ;;  holder          3   12[BANK0 ] unsigned char [3]
  2038 ;;  crcHolder       1   18[BANK0 ] unsigned char 
  2039 ;;  u               2   20[BANK0 ] int 
  2040 ;;  r               2   22[BANK0 ] int 
  2041 ;; Return value:  Size  Location     Type
  2042 ;;                  1    wreg      unsigned char 
  2043 ;; Registers used:
  2044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2045 ;; Tracked objects:
  2046 ;;		On entry : 0/0
  2047 ;;		On exit  : 0/0
  2048 ;;		Unchanged: 0/0
  2049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2050 ;;      Params:         0       0       0       0       0       0       0
  2051 ;;      Locals:         0      12       0       0       0       0       0
  2052 ;;      Temps:          0       6       0       0       0       0       0
  2053 ;;      Totals:         0      18       0       0       0       0       0
  2054 ;;Total ram usage:       18 bytes
  2055 ;; Hardware stack levels used:    1
  2056 ;; Hardware stack levels required when called:    7
  2057 ;; This function calls:
  2058 ;;		Absolute function
  2059 ;;		_CRC8
  2060 ;;		_Receive_available
  2061 ;;		_Receive_get
  2062 ;;		_Send_put
  2063 ;; This function is called by:
  2064 ;;		_updateComms
  2065 ;; This function uses a non-reentrant model
  2066 ;;
  2067                           
  2068                           	psect	text11
  2069  0000A4                     __ptext11:
  2070                           	opt stack 0
  2071  0000A4                     _receiveData:
  2072                           	opt stack 22
  2073                           
  2074                           ;FastTransfer.c: 140: if (rx_len == 0) {
  2075                           
  2076                           ;incstack = 0
  2077  0000A4  5022               	movf	_rx_len,w,c
  2078  0000A6  A4D8               	btfss	status,2,c
  2079  0000A8  D0AA               	goto	l2612
  2080                           
  2081                           ;FastTransfer.c: 142: if (serial_available() > 4) {
  2082  0000AA  D801               	call	u2578
  2083  0000AC  D00A               	goto	u2579
  2084  0000AE                     u2578:
  2085  0000AE  0005               	push	
  2086  0000B0  6EFA               	movwf	pclath,c
  2087  0000B2  500F               	movf	_serial_available,w,c
  2088  0000B4  6EFD               	movwf	tosl,c
  2089  0000B6  5010               	movf	_serial_available+1,w,c
  2090  0000B8  6EFE               	movwf	tosh,c
  2091  0000BA  50F8               	movf	tblptru,w,c
  2092  0000BC  6EFF               	movwf	tosu,c
  2093  0000BE  50FA               	movf	pclath,w,c
  2094  0000C0  0012               	return		;indir
  2095  0000C2                     u2579:
  2096  0000C2  BE40               	btfsc	?_Receive_available+1,7,c
  2097  0000C4  D09C               	goto	l2612
  2098  0000C6  5040               	movf	?_Receive_available+1,w,c
  2099  0000C8  E11D               	bnz	l2588
  2100  0000CA  0E05               	movlw	5
  2101  0000CC  5C3F               	subwf	?_Receive_available,w,c
  2102  0000CE  B0D8               	btfsc	status,0,c
  2103  0000D0  D019               	goto	l2588
  2104  0000D2  D095               	goto	l2612
  2105  0000D4                     l2580:
  2106                           
  2107                           ;FastTransfer.c: 148: alignErrorCounter++;
  2108  0000D4  4A03               	infsnz	_alignErrorCounter,f,c
  2109  0000D6  2A04               	incf	_alignErrorCounter+1,f,c
  2110                           
  2111                           ;FastTransfer.c: 149: if (serial_available() < 5)
  2112  0000D8  D801               	call	u2598
  2113  0000DA  D00A               	goto	u2599
  2114  0000DC                     u2598:
  2115  0000DC  0005               	push	
  2116  0000DE  6EFA               	movwf	pclath,c
  2117  0000E0  500F               	movf	_serial_available,w,c
  2118  0000E2  6EFD               	movwf	tosl,c
  2119  0000E4  5010               	movf	_serial_available+1,w,c
  2120  0000E6  6EFE               	movwf	tosh,c
  2121  0000E8  50F8               	movf	tblptru,w,c
  2122  0000EA  6EFF               	movwf	tosu,c
  2123  0000EC  50FA               	movf	pclath,w,c
  2124  0000EE  0012               	return		;indir
  2125  0000F0                     u2599:
  2126  0000F0  BE40               	btfsc	?_Receive_available+1,7,c
  2127  0000F2  D006               	goto	l2584
  2128  0000F4  5040               	movf	?_Receive_available+1,w,c
  2129  0000F6  E106               	bnz	l2588
  2130  0000F8  0E05               	movlw	5
  2131  0000FA  5C3F               	subwf	?_Receive_available,w,c
  2132  0000FC  B0D8               	btfsc	status,0,c
  2133  0000FE  D002               	goto	l2588
  2134  000100                     l2584:
  2135                           
  2136                           ;FastTransfer.c: 150: return 0;
  2137  000100  0E00               	movlw	0
  2138  000102  0012               	return	
  2139  000104                     l2588:
  2140  000104  D801               	call	u2618
  2141  000106  D00A               	goto	u2619
  2142  000108                     u2618:
  2143  000108  0005               	push	
  2144  00010A  6EFA               	movwf	pclath,c
  2145  00010C  5013               	movf	_serial_read,w,c
  2146  00010E  6EFD               	movwf	tosl,c
  2147  000110  5014               	movf	_serial_read+1,w,c
  2148  000112  6EFE               	movwf	tosh,c
  2149  000114  50F8               	movf	tblptru,w,c
  2150  000116  6EFF               	movwf	tosu,c
  2151  000118  50FA               	movf	pclath,w,c
  2152  00011A  0012               	return		;indir
  2153  00011C                     u2619:
  2154  00011C  0A06               	xorlw	6
  2155  00011E  A4D8               	btfss	status,2,c
  2156  000120  D7D9               	goto	l2580
  2157                           
  2158                           ;FastTransfer.c: 151: }
  2159                           ;FastTransfer.c: 152: if (serial_read() == 0x85) {
  2160  000122  D801               	call	u2638
  2161  000124  D00A               	goto	u2639
  2162  000126                     u2638:
  2163  000126  0005               	push	
  2164  000128  6EFA               	movwf	pclath,c
  2165  00012A  5013               	movf	_serial_read,w,c
  2166  00012C  6EFD               	movwf	tosl,c
  2167  00012E  5014               	movf	_serial_read+1,w,c
  2168  000130  6EFE               	movwf	tosh,c
  2169  000132  50F8               	movf	tblptru,w,c
  2170  000134  6EFF               	movwf	tosu,c
  2171  000136  50FA               	movf	pclath,w,c
  2172  000138  0012               	return		;indir
  2173  00013A                     u2639:
  2174  00013A  0A85               	xorlw	133
  2175  00013C  A4D8               	btfss	status,2,c
  2176  00013E  D05F               	goto	l2612
  2177                           
  2178                           ;FastTransfer.c: 154: rx_address = serial_read();
  2179  000140  D801               	call	u2658
  2180  000142  D00A               	goto	u2659
  2181  000144                     u2658:
  2182  000144  0005               	push	
  2183  000146  6EFA               	movwf	pclath,c
  2184  000148  5013               	movf	_serial_read,w,c
  2185  00014A  6EFD               	movwf	tosl,c
  2186  00014C  5014               	movf	_serial_read+1,w,c
  2187  00014E  6EFE               	movwf	tosh,c
  2188  000150  50F8               	movf	tblptru,w,c
  2189  000152  6EFF               	movwf	tosu,c
  2190  000154  50FA               	movf	pclath,w,c
  2191  000156  0012               	return		;indir
  2192  000158                     u2659:
  2193  000158  6E20               	movwf	_rx_address,c
  2194                           
  2195                           ;FastTransfer.c: 155: returnAddress = serial_read();
  2196  00015A  D801               	call	u2668
  2197  00015C  D00A               	goto	u2669
  2198  00015E                     u2668:
  2199  00015E  0005               	push	
  2200  000160  6EFA               	movwf	pclath,c
  2201  000162  5013               	movf	_serial_read,w,c
  2202  000164  6EFD               	movwf	tosl,c
  2203  000166  5014               	movf	_serial_read+1,w,c
  2204  000168  6EFE               	movwf	tosh,c
  2205  00016A  50F8               	movf	tblptru,w,c
  2206  00016C  6EFF               	movwf	tosu,c
  2207  00016E  50FA               	movf	pclath,w,c
  2208  000170  0012               	return		;indir
  2209  000172                     u2669:
  2210  000172  6E1F               	movwf	_returnAddress,c
  2211                           
  2212                           ;FastTransfer.c: 156: rx_len = serial_read();
  2213  000174  D801               	call	u2678
  2214  000176  D00A               	goto	u2679
  2215  000178                     u2678:
  2216  000178  0005               	push	
  2217  00017A  6EFA               	movwf	pclath,c
  2218  00017C  5013               	movf	_serial_read,w,c
  2219  00017E  6EFD               	movwf	tosl,c
  2220  000180  5014               	movf	_serial_read+1,w,c
  2221  000182  6EFE               	movwf	tosh,c
  2222  000184  50F8               	movf	tblptru,w,c
  2223  000186  6EFF               	movwf	tosu,c
  2224  000188  50FA               	movf	pclath,w,c
  2225  00018A  0012               	return		;indir
  2226  00018C                     u2679:
  2227  00018C  6E22               	movwf	_rx_len,c
  2228                           
  2229                           ;FastTransfer.c: 158: if (rx_address != moduleAddress) {
  2230  00018E  501E               	movf	_moduleAddress,w,c
  2231  000190  1820               	xorwf	_rx_address,w,c
  2232  000192  B4D8               	btfsc	status,2,c
  2233  000194  D034               	goto	l2612
  2234                           
  2235                           ;FastTransfer.c: 159: addressErrorCounter++;
  2236  000196  4A01               	infsnz	_addressErrorCounter,f,c
  2237  000198  2A02               	incf	_addressErrorCounter+1,f,c
  2238                           
  2239                           ;FastTransfer.c: 162: int u;
  2240                           ;FastTransfer.c: 163: for (u = 0; u <= (rx_len + 1); u++) {
  2241  00019A  0E00               	movlw	0
  2242  00019C  0100               	movlb	0	; () banked
  2243  00019E  6F94               	movwf	(receiveData@u+1)& (0+255),b
  2244  0001A0  0E00               	movlw	0
  2245  0001A2  6F93               	movwf	receiveData@u& (0+255),b
  2246  0001A4  D00F               	goto	l2604
  2247  0001A6                     l2600:
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;FastTransfer.c: 164: serial_read();
  2251  0001A6  D801               	call	u2698
  2252  0001A8  D00A               	goto	l2602
  2253  0001AA                     u2698:
  2254  0001AA  0005               	push	
  2255  0001AC  6EFA               	movwf	pclath,c
  2256  0001AE  5013               	movf	_serial_read,w,c
  2257  0001B0  6EFD               	movwf	tosl,c
  2258  0001B2  5014               	movf	_serial_read+1,w,c
  2259  0001B4  6EFE               	movwf	tosh,c
  2260  0001B6  50F8               	movf	tblptru,w,c
  2261  0001B8  6EFF               	movwf	tosu,c
  2262  0001BA  50FA               	movf	pclath,w,c
  2263  0001BC  0012               	return		;indir
  2264  0001BE                     l2602:
  2265  0001BE  0100               	movlb	0	; () banked
  2266  0001C0  4B93               	infsnz	receiveData@u& (0+255),f,b
  2267  0001C2  2B94               	incf	(receiveData@u+1)& (0+255),f,b
  2268  0001C4                     l2604:
  2269                           
  2270                           ; BSR set to: 0
  2271  0001C4  5022               	movf	_rx_len,w,c
  2272  0001C6  0100               	movlb	0	; () banked
  2273  0001C8  6F85               	movwf	??_receiveData& (0+255),b
  2274  0001CA  6B86               	clrf	(??_receiveData+1)& (0+255),b
  2275  0001CC  0E01               	movlw	1
  2276  0001CE  0100               	movlb	0	; () banked
  2277  0001D0  2785               	addwf	??_receiveData& (0+255),f,b
  2278  0001D2  0E00               	movlw	0
  2279  0001D4  2386               	addwfc	(??_receiveData+1)& (0+255),f,b
  2280  0001D6  0100               	movlb	0	; () banked
  2281  0001D8  5193               	movf	receiveData@u& (0+255),w,b
  2282  0001DA  0100               	movlb	0	; () banked
  2283  0001DC  5D85               	subwf	??_receiveData& (0+255),w,b
  2284  0001DE  0100               	movlb	0	; () banked
  2285  0001E0  5186               	movf	(??_receiveData+1)& (0+255),w,b
  2286  0001E2  0A80               	xorlw	128
  2287  0001E4  0100               	movlb	0	; () banked
  2288  0001E6  6F87               	movwf	(??_receiveData+2)& (0+255),b
  2289  0001E8  0100               	movlb	0	; () banked
  2290  0001EA  5194               	movf	(receiveData@u+1)& (0+255),w,b
  2291  0001EC  0A80               	xorlw	128
  2292  0001EE  0100               	movlb	0	; () banked
  2293  0001F0  5987               	subwfb	(??_receiveData+2)& (0+255),w,b
  2294  0001F2  B0D8               	btfsc	status,0,c
  2295  0001F4  D7D8               	goto	l2600
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;FastTransfer.c: 165: }
  2299                           ;FastTransfer.c: 166: rx_len = 0;
  2300                           
  2301                           ; BSR set to: 0
  2302  0001F6  0E00               	movlw	0
  2303  0001F8  6E22               	movwf	_rx_len,c
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;FastTransfer.c: 167: return 0;
  2307  0001FA  0E00               	movlw	0
  2308                           
  2309                           ; BSR set to: 0
  2310  0001FC  0012               	return	
  2311  0001FE                     l2612:
  2312                           
  2313                           ;FastTransfer.c: 168: }
  2314                           ;FastTransfer.c: 170: }
  2315                           ;FastTransfer.c: 171: }
  2316                           ;FastTransfer.c: 172: }
  2317                           ;FastTransfer.c: 175: if (rx_len != 0) {
  2318  0001FE  5022               	movf	_rx_len,w,c
  2319  000200  A4D8               	btfss	status,2,c
  2320  000202  D01A               	goto	l2620
  2321  000204  D274               	goto	l2720
  2322  000206                     l2616:
  2323                           
  2324                           ;FastTransfer.c: 191: rx_buffer[rx_array_inx++] = serial_read();
  2325  000206  D801               	call	u2728
  2326  000208  D00A               	goto	u2729
  2327  00020A                     u2728:
  2328  00020A  0005               	push	
  2329  00020C  6EFA               	movwf	pclath,c
  2330  00020E  5013               	movf	_serial_read,w,c
  2331  000210  6EFD               	movwf	tosl,c
  2332  000212  5014               	movf	_serial_read+1,w,c
  2333  000214  6EFE               	movwf	tosh,c
  2334  000216  50F8               	movf	tblptru,w,c
  2335  000218  6EFF               	movwf	tosu,c
  2336  00021A  50FA               	movf	pclath,w,c
  2337  00021C  0012               	return		;indir
  2338  00021E                     u2729:
  2339  00021E  0100               	movlb	0	; () banked
  2340  000220  6F85               	movwf	??_receiveData& (0+255),b
  2341  000222  5021               	movf	_rx_array_inx,w,c
  2342  000224  0D01               	mullw	1
  2343  000226  0E00               	movlw	low _rx_buffer
  2344  000228  24F3               	addwf	prodl,w,c
  2345  00022A  6ED9               	movwf	fsr2l,c
  2346  00022C  0E02               	movlw	high _rx_buffer
  2347  00022E  20F4               	addwfc	prodh,w,c
  2348  000230  6EDA               	movwf	fsr2h,c
  2349  000232  C085  FFDF         	movff	??_receiveData,indf2
  2350                           
  2351                           ; BSR set to: 0
  2352  000236  2A21               	incf	_rx_array_inx,f,c
  2353  000238                     l2620:
  2354  000238  D801               	call	u2738
  2355  00023A  D00A               	goto	u2739
  2356  00023C                     u2738:
  2357  00023C  0005               	push	
  2358  00023E  6EFA               	movwf	pclath,c
  2359  000240  500F               	movf	_serial_available,w,c
  2360  000242  6EFD               	movwf	tosl,c
  2361  000244  5010               	movf	_serial_available+1,w,c
  2362  000246  6EFE               	movwf	tosh,c
  2363  000248  50F8               	movf	tblptru,w,c
  2364  00024A  6EFF               	movwf	tosu,c
  2365  00024C  50FA               	movf	pclath,w,c
  2366  00024E  0012               	return		;indir
  2367  000250                     u2739:
  2368  000250  503F               	movf	?_Receive_available,w,c
  2369  000252  1040               	iorwf	?_Receive_available+1,w,c
  2370  000254  B4D8               	btfsc	status,2,c
  2371  000256  D004               	goto	l2624
  2372  000258  5021               	movf	_rx_array_inx,w,c
  2373  00025A  5C22               	subwf	_rx_len,w,c
  2374  00025C  B0D8               	btfsc	status,0,c
  2375  00025E  D7D3               	goto	l2616
  2376  000260                     l2624:
  2377                           
  2378                           ;FastTransfer.c: 192: }
  2379                           ;FastTransfer.c: 194: if (rx_len == (rx_array_inx - 1)) {
  2380  000260  5022               	movf	_rx_len,w,c
  2381  000262  0100               	movlb	0	; () banked
  2382  000264  6F85               	movwf	??_receiveData& (0+255),b
  2383  000266  6B86               	clrf	(??_receiveData+1)& (0+255),b
  2384  000268  0EFF               	movlw	255
  2385  00026A  0100               	movlb	0	; () banked
  2386  00026C  6F87               	movwf	(??_receiveData+2)& (0+255),b
  2387  00026E  0EFF               	movlw	255
  2388  000270  0100               	movlb	0	; () banked
  2389  000272  6F88               	movwf	(??_receiveData+3)& (0+255),b
  2390  000274  5021               	movf	_rx_array_inx,w,c
  2391  000276  0100               	movlb	0	; () banked
  2392  000278  6F89               	movwf	(??_receiveData+4)& (0+255),b
  2393  00027A  6B8A               	clrf	(??_receiveData+5)& (0+255),b
  2394  00027C  0100               	movlb	0	; () banked
  2395  00027E  5187               	movf	(??_receiveData+2)& (0+255),w,b
  2396  000280  0100               	movlb	0	; () banked
  2397  000282  2789               	addwf	(??_receiveData+4)& (0+255),f,b
  2398  000284  0100               	movlb	0	; () banked
  2399  000286  5188               	movf	(??_receiveData+3)& (0+255),w,b
  2400  000288  0100               	movlb	0	; () banked
  2401  00028A  238A               	addwfc	(??_receiveData+5)& (0+255),f,b
  2402  00028C  0100               	movlb	0	; () banked
  2403  00028E  5185               	movf	??_receiveData& (0+255),w,b
  2404  000290  0100               	movlb	0	; () banked
  2405  000292  1989               	xorwf	(??_receiveData+4)& (0+255),w,b
  2406  000294  E105               	bnz	u2761
  2407  000296  0100               	movlb	0	; () banked
  2408  000298  5186               	movf	(??_receiveData+1)& (0+255),w,b
  2409  00029A  0100               	movlb	0	; () banked
  2410  00029C  198A               	xorwf	(??_receiveData+5)& (0+255),w,b
  2411  00029E  A4D8               	btfss	status,2,c
  2412  0002A0                     u2761:
  2413  0002A0  D226               	goto	l2720
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;FastTransfer.c: 197: calc_CS = CRC8(rx_buffer, rx_len);
  2417  0002A2  0E00               	movlw	low _rx_buffer
  2418  0002A4  6E3D               	movwf	CRC8@data,c
  2419  0002A6  0E02               	movlw	high _rx_buffer
  2420  0002A8  6E3E               	movwf	CRC8@data+1,c
  2421  0002AA  C022  F03F         	movff	_rx_len,CRC8@len
  2422  0002AE  ECD0  F008         	call	_CRC8	;wreg free
  2423  0002B2  6E1C               	movwf	_calc_CS,c
  2424                           
  2425                           ;FastTransfer.c: 201: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2426  0002B4  0EFF               	movlw	255
  2427  0002B6  0100               	movlb	0	; () banked
  2428  0002B8  6F85               	movwf	??_receiveData& (0+255),b
  2429  0002BA  0EFF               	movlw	255
  2430  0002BC  0100               	movlb	0	; () banked
  2431  0002BE  6F86               	movwf	(??_receiveData+1)& (0+255),b
  2432  0002C0  5021               	movf	_rx_array_inx,w,c
  2433  0002C2  0100               	movlb	0	; () banked
  2434  0002C4  6F87               	movwf	(??_receiveData+2)& (0+255),b
  2435  0002C6  6B88               	clrf	(??_receiveData+3)& (0+255),b
  2436  0002C8  0100               	movlb	0	; () banked
  2437  0002CA  5185               	movf	??_receiveData& (0+255),w,b
  2438  0002CC  0100               	movlb	0	; () banked
  2439  0002CE  2787               	addwf	(??_receiveData+2)& (0+255),f,b
  2440  0002D0  0100               	movlb	0	; () banked
  2441  0002D2  5186               	movf	(??_receiveData+1)& (0+255),w,b
  2442  0002D4  0100               	movlb	0	; () banked
  2443  0002D6  2388               	addwfc	(??_receiveData+3)& (0+255),f,b
  2444  0002D8  0E00               	movlw	low _rx_buffer
  2445  0002DA  0100               	movlb	0	; () banked
  2446  0002DC  2587               	addwf	(??_receiveData+2)& (0+255),w,b
  2447  0002DE  6ED9               	movwf	fsr2l,c
  2448  0002E0  0E02               	movlw	high _rx_buffer
  2449  0002E2  0100               	movlb	0	; () banked
  2450  0002E4  2188               	addwfc	(??_receiveData+3)& (0+255),w,b
  2451  0002E6  6EDA               	movwf	fsr2h,c
  2452  0002E8  501C               	movf	_calc_CS,w,c
  2453  0002EA  18DE               	xorwf	postinc2,w,c
  2454  0002EC  A4D8               	btfss	status,2,c
  2455  0002EE  D138               	goto	l2682
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;FastTransfer.c: 204: int r;
  2459                           ;FastTransfer.c: 205: for (r = 0; r < rx_len; r = r + 3) {
  2460  0002F0  0E00               	movlw	0
  2461  0002F2  0100               	movlb	0	; () banked
  2462  0002F4  6F96               	movwf	(receiveData@r+1)& (0+255),b
  2463  0002F6  0E00               	movlw	0
  2464  0002F8  6F95               	movwf	receiveData@r& (0+255),b
  2465  0002FA  D059               	goto	l2642
  2466  0002FC                     l2632:
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;FastTransfer.c: 206: if (rx_buffer[r] < maxDataAddress) {
  2470  0002FC  0E00               	movlw	low _rx_buffer
  2471  0002FE  0100               	movlb	0	; () banked
  2472  000300  2595               	addwf	receiveData@r& (0+255),w,b
  2473  000302  6ED9               	movwf	fsr2l,c
  2474  000304  0E02               	movlw	high _rx_buffer
  2475  000306  0100               	movlb	0	; () banked
  2476  000308  2196               	addwfc	(receiveData@r+1)& (0+255),w,b
  2477  00030A  6EDA               	movwf	fsr2h,c
  2478  00030C  501D               	movf	_maxDataAddress,w,c
  2479  00030E  5CDE               	subwf	postinc2,w,c
  2480  000310  B0D8               	btfsc	status,0,c
  2481  000312  D041               	goto	l2638
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;FastTransfer.c: 207: group.parts[0] = rx_buffer[r + 1];
  2485  000314  0E01               	movlw	1
  2486  000316  0100               	movlb	0	; () banked
  2487  000318  2595               	addwf	receiveData@r& (0+255),w,b
  2488  00031A  0100               	movlb	0	; () banked
  2489  00031C  6F85               	movwf	??_receiveData& (0+255),b
  2490  00031E  0E00               	movlw	0
  2491  000320  0100               	movlb	0	; () banked
  2492  000322  2196               	addwfc	(receiveData@r+1)& (0+255),w,b
  2493  000324  0100               	movlb	0	; () banked
  2494  000326  6F86               	movwf	(??_receiveData+1)& (0+255),b
  2495  000328  0E00               	movlw	low _rx_buffer
  2496  00032A  0100               	movlb	0	; () banked
  2497  00032C  2585               	addwf	??_receiveData& (0+255),w,b
  2498  00032E  6ED9               	movwf	fsr2l,c
  2499  000330  0E02               	movlw	high _rx_buffer
  2500  000332  0100               	movlb	0	; () banked
  2501  000334  2186               	addwfc	(??_receiveData+1)& (0+255),w,b
  2502  000336  6EDA               	movwf	fsr2h,c
  2503  000338  50DF               	movf	indf2,w,c
  2504  00033A  6E09               	movwf	_group,c
  2505                           
  2506                           ;FastTransfer.c: 208: group.parts[1] = rx_buffer[r + 2];
  2507  00033C  0E02               	movlw	2
  2508  00033E  0100               	movlb	0	; () banked
  2509  000340  2595               	addwf	receiveData@r& (0+255),w,b
  2510  000342  0100               	movlb	0	; () banked
  2511  000344  6F85               	movwf	??_receiveData& (0+255),b
  2512  000346  0E00               	movlw	0
  2513  000348  0100               	movlb	0	; () banked
  2514  00034A  2196               	addwfc	(receiveData@r+1)& (0+255),w,b
  2515  00034C  0100               	movlb	0	; () banked
  2516  00034E  6F86               	movwf	(??_receiveData+1)& (0+255),b
  2517  000350  0E00               	movlw	low _rx_buffer
  2518  000352  0100               	movlb	0	; () banked
  2519  000354  2585               	addwf	??_receiveData& (0+255),w,b
  2520  000356  6ED9               	movwf	fsr2l,c
  2521  000358  0E02               	movlw	high _rx_buffer
  2522  00035A  0100               	movlb	0	; () banked
  2523  00035C  2186               	addwfc	(??_receiveData+1)& (0+255),w,b
  2524  00035E  6EDA               	movwf	fsr2h,c
  2525  000360  50DF               	movf	indf2,w,c
  2526  000362  6E0A               	movwf	_group+1,c
  2527                           
  2528                           ; BSR set to: 0
  2529                           ;FastTransfer.c: 209: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2530  000364  0E00               	movlw	low _rx_buffer
  2531  000366  0100               	movlb	0	; () banked
  2532  000368  2595               	addwf	receiveData@r& (0+255),w,b
  2533  00036A  6ED9               	movwf	fsr2l,c
  2534  00036C  0E02               	movlw	high _rx_buffer
  2535  00036E  0100               	movlb	0	; () banked
  2536  000370  2196               	addwfc	(receiveData@r+1)& (0+255),w,b
  2537  000372  6EDA               	movwf	fsr2h,c
  2538  000374  50DF               	movf	indf2,w,c
  2539  000376  0100               	movlb	0	; () banked
  2540  000378  6F85               	movwf	??_receiveData& (0+255),b
  2541  00037A  0100               	movlb	0	; () banked
  2542  00037C  5185               	movf	??_receiveData& (0+255),w,b
  2543  00037E  0D02               	mullw	2
  2544  000380  50F3               	movf	prodl,w,c
  2545  000382  240B               	addwf	_receiveArrayAddress,w,c
  2546  000384  6ED9               	movwf	fsr2l,c
  2547  000386  50F4               	movf	prodh,w,c
  2548  000388  200C               	addwfc	_receiveArrayAddress+1,w,c
  2549  00038A  6EDA               	movwf	fsr2h,c
  2550  00038C  C009  FFDE         	movff	_group,postinc2
  2551  000390  C00A  FFDD         	movff	_group+1,postdec2
  2552                           
  2553                           ;FastTransfer.c: 210: } else {
  2554  000394  D002               	goto	l2640
  2555  000396                     l2638:
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;FastTransfer.c: 211: dataAdressErrorCounter++;
  2559  000396  4A07               	infsnz	_dataAdressErrorCounter,f,c
  2560  000398  2A08               	incf	_dataAdressErrorCounter+1,f,c
  2561  00039A                     l2640:
  2562                           
  2563                           ; BSR set to: 0
  2564  00039A  0E03               	movlw	3
  2565  00039C  0100               	movlb	0	; () banked
  2566  00039E  2595               	addwf	receiveData@r& (0+255),w,b
  2567  0003A0  0100               	movlb	0	; () banked
  2568  0003A2  6F95               	movwf	receiveData@r& (0+255),b
  2569  0003A4  0E00               	movlw	0
  2570  0003A6  0100               	movlb	0	; () banked
  2571  0003A8  2196               	addwfc	(receiveData@r+1)& (0+255),w,b
  2572  0003AA  0100               	movlb	0	; () banked
  2573  0003AC  6F96               	movwf	(receiveData@r+1)& (0+255),b
  2574  0003AE                     l2642:
  2575                           
  2576                           ; BSR set to: 0
  2577  0003AE  5022               	movf	_rx_len,w,c
  2578  0003B0  0100               	movlb	0	; () banked
  2579  0003B2  6F85               	movwf	??_receiveData& (0+255),b
  2580  0003B4  6B86               	clrf	(??_receiveData+1)& (0+255),b
  2581  0003B6  0100               	movlb	0	; () banked
  2582  0003B8  5185               	movf	??_receiveData& (0+255),w,b
  2583  0003BA  0100               	movlb	0	; () banked
  2584  0003BC  5D95               	subwf	receiveData@r& (0+255),w,b
  2585  0003BE  0100               	movlb	0	; () banked
  2586  0003C0  5196               	movf	(receiveData@r+1)& (0+255),w,b
  2587  0003C2  0A80               	xorlw	128
  2588  0003C4  0100               	movlb	0	; () banked
  2589  0003C6  6F87               	movwf	(??_receiveData+2)& (0+255),b
  2590  0003C8  0100               	movlb	0	; () banked
  2591  0003CA  5186               	movf	(??_receiveData+1)& (0+255),w,b
  2592  0003CC  0A80               	xorlw	128
  2593  0003CE  0100               	movlb	0	; () banked
  2594  0003D0  5987               	subwfb	(??_receiveData+2)& (0+255),w,b
  2595  0003D2  A0D8               	btfss	status,0,c
  2596  0003D4  D793               	goto	l2632
  2597                           
  2598                           ; BSR set to: 0
  2599                           ;FastTransfer.c: 212: }
  2600                           ;FastTransfer.c: 213: }
  2601                           ;FastTransfer.c: 216: if (AKNAKsend) {
  2602                           
  2603                           ; BSR set to: 0
  2604  0003D6  5019               	movf	_AKNAKsend,w,c
  2605  0003D8  B4D8               	btfsc	status,2,c
  2606  0003DA  D0BC               	goto	l2672
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;FastTransfer.c: 217: unsigned char holder[3];
  2610                           ;FastTransfer.c: 218: holder[0] = 255;
  2611  0003DC  0100               	movlb	0	; () banked
  2612  0003DE  698B               	setf	receiveData@holder& (0+255),b
  2613                           
  2614                           ; BSR set to: 0
  2615                           ;FastTransfer.c: 219: holder[1] = 1;
  2616  0003E0  0E01               	movlw	1
  2617  0003E2  0100               	movlb	0	; () banked
  2618  0003E4  6F8C               	movwf	(receiveData@holder+1)& (0+255),b
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;FastTransfer.c: 220: holder[2] = rx_buffer[rx_array_inx - 1];
  2622  0003E6  0EFF               	movlw	255
  2623  0003E8  0100               	movlb	0	; () banked
  2624  0003EA  6F85               	movwf	??_receiveData& (0+255),b
  2625  0003EC  0EFF               	movlw	255
  2626  0003EE  0100               	movlb	0	; () banked
  2627  0003F0  6F86               	movwf	(??_receiveData+1)& (0+255),b
  2628  0003F2  5021               	movf	_rx_array_inx,w,c
  2629  0003F4  0100               	movlb	0	; () banked
  2630  0003F6  6F87               	movwf	(??_receiveData+2)& (0+255),b
  2631  0003F8  6B88               	clrf	(??_receiveData+3)& (0+255),b
  2632  0003FA  0100               	movlb	0	; () banked
  2633  0003FC  5185               	movf	??_receiveData& (0+255),w,b
  2634  0003FE  0100               	movlb	0	; () banked
  2635  000400  2787               	addwf	(??_receiveData+2)& (0+255),f,b
  2636  000402  0100               	movlb	0	; () banked
  2637  000404  5186               	movf	(??_receiveData+1)& (0+255),w,b
  2638  000406  0100               	movlb	0	; () banked
  2639  000408  2388               	addwfc	(??_receiveData+3)& (0+255),f,b
  2640  00040A  0E00               	movlw	low _rx_buffer
  2641  00040C  0100               	movlb	0	; () banked
  2642  00040E  2587               	addwf	(??_receiveData+2)& (0+255),w,b
  2643  000410  6ED9               	movwf	fsr2l,c
  2644  000412  0E02               	movlw	high _rx_buffer
  2645  000414  0100               	movlb	0	; () banked
  2646  000416  2188               	addwfc	(??_receiveData+3)& (0+255),w,b
  2647  000418  6EDA               	movwf	fsr2h,c
  2648  00041A  50DF               	movf	indf2,w,c
  2649  00041C  0100               	movlb	0	; () banked
  2650  00041E  6F8D               	movwf	(receiveData@holder+2)& (0+255),b
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;FastTransfer.c: 221: unsigned char crcHolder = CRC8(holder, 3);
  2654  000420  0E8B               	movlw	low receiveData@holder
  2655  000422  6E3D               	movwf	CRC8@data,c
  2656  000424  0E00               	movlw	high receiveData@holder
  2657  000426  6E3E               	movwf	CRC8@data+1,c
  2658  000428  0E03               	movlw	3
  2659  00042A  6E3F               	movwf	CRC8@len,c
  2660  00042C  ECD0  F008         	call	_CRC8	;wreg free
  2661  000430  0100               	movlb	0	; () banked
  2662  000432  6F91               	movwf	receiveData@crcHolder& (0+255),b
  2663                           
  2664                           ; BSR set to: 0
  2665                           ;FastTransfer.c: 222: serial_write(0x06);
  2666  000434  D801               	call	u2818
  2667  000436  D00B               	goto	l2656
  2668  000438                     u2818:
  2669  000438  0005               	push	
  2670  00043A  6EFA               	movwf	pclath,c
  2671  00043C  5015               	movf	_serial_write,w,c
  2672  00043E  6EFD               	movwf	tosl,c
  2673  000440  5016               	movf	_serial_write+1,w,c
  2674  000442  6EFE               	movwf	tosh,c
  2675  000444  50F8               	movf	tblptru,w,c
  2676  000446  6EFF               	movwf	tosu,c
  2677  000448  50FA               	movf	pclath,w,c
  2678  00044A  0E06               	movlw	6
  2679  00044C  0012               	return		;indir
  2680  00044E                     l2656:
  2681                           
  2682                           ;FastTransfer.c: 223: serial_write(0x85);
  2683  00044E  D801               	call	u2828
  2684  000450  D00B               	goto	l2658
  2685  000452                     u2828:
  2686  000452  0005               	push	
  2687  000454  6EFA               	movwf	pclath,c
  2688  000456  5015               	movf	_serial_write,w,c
  2689  000458  6EFD               	movwf	tosl,c
  2690  00045A  5016               	movf	_serial_write+1,w,c
  2691  00045C  6EFE               	movwf	tosh,c
  2692  00045E  50F8               	movf	tblptru,w,c
  2693  000460  6EFF               	movwf	tosu,c
  2694  000462  50FA               	movf	pclath,w,c
  2695  000464  0E85               	movlw	133
  2696  000466  0012               	return		;indir
  2697  000468                     l2658:
  2698                           
  2699                           ;FastTransfer.c: 224: serial_write(returnAddress);
  2700  000468  D801               	call	u2838
  2701  00046A  D00B               	goto	l2660
  2702  00046C                     u2838:
  2703  00046C  0005               	push	
  2704  00046E  6EFA               	movwf	pclath,c
  2705  000470  5015               	movf	_serial_write,w,c
  2706  000472  6EFD               	movwf	tosl,c
  2707  000474  5016               	movf	_serial_write+1,w,c
  2708  000476  6EFE               	movwf	tosh,c
  2709  000478  50F8               	movf	tblptru,w,c
  2710  00047A  6EFF               	movwf	tosu,c
  2711  00047C  50FA               	movf	pclath,w,c
  2712  00047E  501F               	movf	_returnAddress,w,c
  2713  000480  0012               	return		;indir
  2714  000482                     l2660:
  2715                           
  2716                           ;FastTransfer.c: 225: serial_write(moduleAddress);
  2717  000482  D801               	call	u2848
  2718  000484  D00B               	goto	l2662
  2719  000486                     u2848:
  2720  000486  0005               	push	
  2721  000488  6EFA               	movwf	pclath,c
  2722  00048A  5015               	movf	_serial_write,w,c
  2723  00048C  6EFD               	movwf	tosl,c
  2724  00048E  5016               	movf	_serial_write+1,w,c
  2725  000490  6EFE               	movwf	tosh,c
  2726  000492  50F8               	movf	tblptru,w,c
  2727  000494  6EFF               	movwf	tosu,c
  2728  000496  50FA               	movf	pclath,w,c
  2729  000498  501E               	movf	_moduleAddress,w,c
  2730  00049A  0012               	return		;indir
  2731  00049C                     l2662:
  2732                           
  2733                           ;FastTransfer.c: 226: serial_write(3);
  2734  00049C  D801               	call	u2858
  2735  00049E  D00B               	goto	l2664
  2736  0004A0                     u2858:
  2737  0004A0  0005               	push	
  2738  0004A2  6EFA               	movwf	pclath,c
  2739  0004A4  5015               	movf	_serial_write,w,c
  2740  0004A6  6EFD               	movwf	tosl,c
  2741  0004A8  5016               	movf	_serial_write+1,w,c
  2742  0004AA  6EFE               	movwf	tosh,c
  2743  0004AC  50F8               	movf	tblptru,w,c
  2744  0004AE  6EFF               	movwf	tosu,c
  2745  0004B0  50FA               	movf	pclath,w,c
  2746  0004B2  0E03               	movlw	3
  2747  0004B4  0012               	return		;indir
  2748  0004B6                     l2664:
  2749                           
  2750                           ;FastTransfer.c: 227: serial_write(255);
  2751  0004B6  D801               	call	u2868
  2752  0004B8  D00B               	goto	l2666
  2753  0004BA                     u2868:
  2754  0004BA  0005               	push	
  2755  0004BC  6EFA               	movwf	pclath,c
  2756  0004BE  5015               	movf	_serial_write,w,c
  2757  0004C0  6EFD               	movwf	tosl,c
  2758  0004C2  5016               	movf	_serial_write+1,w,c
  2759  0004C4  6EFE               	movwf	tosh,c
  2760  0004C6  50F8               	movf	tblptru,w,c
  2761  0004C8  6EFF               	movwf	tosu,c
  2762  0004CA  50FA               	movf	pclath,w,c
  2763  0004CC  0EFF               	movlw	255
  2764  0004CE  0012               	return		;indir
  2765  0004D0                     l2666:
  2766                           
  2767                           ;FastTransfer.c: 228: serial_write(1);
  2768  0004D0  D801               	call	u2878
  2769  0004D2  D00B               	goto	l2668
  2770  0004D4                     u2878:
  2771  0004D4  0005               	push	
  2772  0004D6  6EFA               	movwf	pclath,c
  2773  0004D8  5015               	movf	_serial_write,w,c
  2774  0004DA  6EFD               	movwf	tosl,c
  2775  0004DC  5016               	movf	_serial_write+1,w,c
  2776  0004DE  6EFE               	movwf	tosh,c
  2777  0004E0  50F8               	movf	tblptru,w,c
  2778  0004E2  6EFF               	movwf	tosu,c
  2779  0004E4  50FA               	movf	pclath,w,c
  2780  0004E6  0E01               	movlw	1
  2781  0004E8  0012               	return		;indir
  2782  0004EA                     l2668:
  2783                           
  2784                           ;FastTransfer.c: 229: serial_write(rx_buffer[rx_array_inx - 1]);
  2785  0004EA  D801               	call	u2888
  2786  0004EC  D025               	goto	l2670
  2787  0004EE                     u2888:
  2788  0004EE  0005               	push	
  2789  0004F0  6EFA               	movwf	pclath,c
  2790  0004F2  5015               	movf	_serial_write,w,c
  2791  0004F4  6EFD               	movwf	tosl,c
  2792  0004F6  5016               	movf	_serial_write+1,w,c
  2793  0004F8  6EFE               	movwf	tosh,c
  2794  0004FA  50F8               	movf	tblptru,w,c
  2795  0004FC  6EFF               	movwf	tosu,c
  2796  0004FE  50FA               	movf	pclath,w,c
  2797  000500  0EFF               	movlw	255
  2798  000502  0100               	movlb	0	; () banked
  2799  000504  6F85               	movwf	??_receiveData& (0+255),b
  2800  000506  0EFF               	movlw	255
  2801  000508  0100               	movlb	0	; () banked
  2802  00050A  6F86               	movwf	(??_receiveData+1)& (0+255),b
  2803  00050C  5021               	movf	_rx_array_inx,w,c
  2804  00050E  0100               	movlb	0	; () banked
  2805  000510  6F87               	movwf	(??_receiveData+2)& (0+255),b
  2806  000512  6B88               	clrf	(??_receiveData+3)& (0+255),b
  2807  000514  0100               	movlb	0	; () banked
  2808  000516  5185               	movf	??_receiveData& (0+255),w,b
  2809  000518  0100               	movlb	0	; () banked
  2810  00051A  2787               	addwf	(??_receiveData+2)& (0+255),f,b
  2811  00051C  0100               	movlb	0	; () banked
  2812  00051E  5186               	movf	(??_receiveData+1)& (0+255),w,b
  2813  000520  0100               	movlb	0	; () banked
  2814  000522  2388               	addwfc	(??_receiveData+3)& (0+255),f,b
  2815  000524  0E00               	movlw	low _rx_buffer
  2816  000526  0100               	movlb	0	; () banked
  2817  000528  2587               	addwf	(??_receiveData+2)& (0+255),w,b
  2818  00052A  6ED9               	movwf	fsr2l,c
  2819  00052C  0E02               	movlw	high _rx_buffer
  2820  00052E  0100               	movlb	0	; () banked
  2821  000530  2188               	addwfc	(??_receiveData+3)& (0+255),w,b
  2822  000532  6EDA               	movwf	fsr2h,c
  2823  000534  50DF               	movf	indf2,w,c
  2824  000536  0012               	return		;indir
  2825  000538                     l2670:
  2826                           
  2827                           ;FastTransfer.c: 230: serial_write(crcHolder);
  2828  000538  D801               	call	u2898
  2829  00053A  D00C               	goto	l2672
  2830  00053C                     u2898:
  2831  00053C  0005               	push	
  2832  00053E  6EFA               	movwf	pclath,c
  2833  000540  5015               	movf	_serial_write,w,c
  2834  000542  6EFD               	movwf	tosl,c
  2835  000544  5016               	movf	_serial_write+1,w,c
  2836  000546  6EFE               	movwf	tosh,c
  2837  000548  50F8               	movf	tblptru,w,c
  2838  00054A  6EFF               	movwf	tosu,c
  2839  00054C  50FA               	movf	pclath,w,c
  2840  00054E  0100               	movlb	0	; () banked
  2841  000550  5191               	movf	receiveData@crcHolder& (0+255),w,b
  2842  000552  0012               	return		;indir
  2843  000554                     l2672:
  2844                           
  2845                           ;FastTransfer.c: 231: }
  2846                           ;FastTransfer.c: 235: rx_len = 0;
  2847  000554  0E00               	movlw	0
  2848  000556  6E22               	movwf	_rx_len,c
  2849                           
  2850                           ;FastTransfer.c: 236: rx_array_inx = 0;
  2851  000558  0E00               	movlw	0
  2852  00055A  6E21               	movwf	_rx_array_inx,c
  2853                           
  2854                           ;FastTransfer.c: 237: return 1;
  2855  00055C  0E01               	movlw	1
  2856  00055E  0012               	return	
  2857  000560                     l2682:
  2858                           
  2859                           ;FastTransfer.c: 239: crcErrorCounter++;
  2860  000560  4A05               	infsnz	_crcErrorCounter,f,c
  2861  000562  2A06               	incf	_crcErrorCounter+1,f,c
  2862                           
  2863                           ;FastTransfer.c: 241: if (AKNAKsend) {
  2864  000564  5019               	movf	_AKNAKsend,w,c
  2865  000566  B4D8               	btfsc	status,2,c
  2866  000568  D0BC               	goto	l2712
  2867                           
  2868                           ;FastTransfer.c: 242: unsigned char holder[3];
  2869                           ;FastTransfer.c: 243: holder[0] = 255;
  2870  00056A  0100               	movlb	0	; () banked
  2871  00056C  698E               	setf	receiveData@holder_324& (0+255),b
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;FastTransfer.c: 244: holder[1] = 2;
  2875  00056E  0E02               	movlw	2
  2876  000570  0100               	movlb	0	; () banked
  2877  000572  6F8F               	movwf	(receiveData@holder_324+1)& (0+255),b
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;FastTransfer.c: 245: holder[2] = rx_buffer[rx_array_inx - 1];
  2881  000574  0EFF               	movlw	255
  2882  000576  0100               	movlb	0	; () banked
  2883  000578  6F85               	movwf	??_receiveData& (0+255),b
  2884  00057A  0EFF               	movlw	255
  2885  00057C  0100               	movlb	0	; () banked
  2886  00057E  6F86               	movwf	(??_receiveData+1)& (0+255),b
  2887  000580  5021               	movf	_rx_array_inx,w,c
  2888  000582  0100               	movlb	0	; () banked
  2889  000584  6F87               	movwf	(??_receiveData+2)& (0+255),b
  2890  000586  6B88               	clrf	(??_receiveData+3)& (0+255),b
  2891  000588  0100               	movlb	0	; () banked
  2892  00058A  5185               	movf	??_receiveData& (0+255),w,b
  2893  00058C  0100               	movlb	0	; () banked
  2894  00058E  2787               	addwf	(??_receiveData+2)& (0+255),f,b
  2895  000590  0100               	movlb	0	; () banked
  2896  000592  5186               	movf	(??_receiveData+1)& (0+255),w,b
  2897  000594  0100               	movlb	0	; () banked
  2898  000596  2388               	addwfc	(??_receiveData+3)& (0+255),f,b
  2899  000598  0E00               	movlw	low _rx_buffer
  2900  00059A  0100               	movlb	0	; () banked
  2901  00059C  2587               	addwf	(??_receiveData+2)& (0+255),w,b
  2902  00059E  6ED9               	movwf	fsr2l,c
  2903  0005A0  0E02               	movlw	high _rx_buffer
  2904  0005A2  0100               	movlb	0	; () banked
  2905  0005A4  2188               	addwfc	(??_receiveData+3)& (0+255),w,b
  2906  0005A6  6EDA               	movwf	fsr2h,c
  2907  0005A8  50DF               	movf	indf2,w,c
  2908  0005AA  0100               	movlb	0	; () banked
  2909  0005AC  6F90               	movwf	(receiveData@holder_324+2)& (0+255),b
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;FastTransfer.c: 246: unsigned char crcHolder = CRC8(holder, 3);
  2913  0005AE  0E8E               	movlw	low receiveData@holder_324
  2914  0005B0  6E3D               	movwf	CRC8@data,c
  2915  0005B2  0E00               	movlw	high receiveData@holder_324
  2916  0005B4  6E3E               	movwf	CRC8@data+1,c
  2917  0005B6  0E03               	movlw	3
  2918  0005B8  6E3F               	movwf	CRC8@len,c
  2919  0005BA  ECD0  F008         	call	_CRC8
  2920  0005BE  0100               	movlb	0	; () banked
  2921  0005C0  6F92               	movwf	receiveData@crcHolder_325& (0+255),b
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;FastTransfer.c: 247: serial_write(0x06);
  2925  0005C2  D801               	call	u2918
  2926  0005C4  D00B               	goto	l2696
  2927  0005C6                     u2918:
  2928  0005C6  0005               	push	
  2929  0005C8  6EFA               	movwf	pclath,c
  2930  0005CA  5015               	movf	_serial_write,w,c
  2931  0005CC  6EFD               	movwf	tosl,c
  2932  0005CE  5016               	movf	_serial_write+1,w,c
  2933  0005D0  6EFE               	movwf	tosh,c
  2934  0005D2  50F8               	movf	tblptru,w,c
  2935  0005D4  6EFF               	movwf	tosu,c
  2936  0005D6  50FA               	movf	pclath,w,c
  2937  0005D8  0E06               	movlw	6
  2938  0005DA  0012               	return		;indir
  2939  0005DC                     l2696:
  2940                           
  2941                           ;FastTransfer.c: 248: serial_write(0x85);
  2942  0005DC  D801               	call	u2928
  2943  0005DE  D00B               	goto	l2698
  2944  0005E0                     u2928:
  2945  0005E0  0005               	push	
  2946  0005E2  6EFA               	movwf	pclath,c
  2947  0005E4  5015               	movf	_serial_write,w,c
  2948  0005E6  6EFD               	movwf	tosl,c
  2949  0005E8  5016               	movf	_serial_write+1,w,c
  2950  0005EA  6EFE               	movwf	tosh,c
  2951  0005EC  50F8               	movf	tblptru,w,c
  2952  0005EE  6EFF               	movwf	tosu,c
  2953  0005F0  50FA               	movf	pclath,w,c
  2954  0005F2  0E85               	movlw	133
  2955  0005F4  0012               	return		;indir
  2956  0005F6                     l2698:
  2957                           
  2958                           ;FastTransfer.c: 249: serial_write(returnAddress);
  2959  0005F6  D801               	call	u2938
  2960  0005F8  D00B               	goto	l2700
  2961  0005FA                     u2938:
  2962  0005FA  0005               	push	
  2963  0005FC  6EFA               	movwf	pclath,c
  2964  0005FE  5015               	movf	_serial_write,w,c
  2965  000600  6EFD               	movwf	tosl,c
  2966  000602  5016               	movf	_serial_write+1,w,c
  2967  000604  6EFE               	movwf	tosh,c
  2968  000606  50F8               	movf	tblptru,w,c
  2969  000608  6EFF               	movwf	tosu,c
  2970  00060A  50FA               	movf	pclath,w,c
  2971  00060C  501F               	movf	_returnAddress,w,c
  2972  00060E  0012               	return		;indir
  2973  000610                     l2700:
  2974                           
  2975                           ;FastTransfer.c: 250: serial_write(moduleAddress);
  2976  000610  D801               	call	u2948
  2977  000612  D00B               	goto	l2702
  2978  000614                     u2948:
  2979  000614  0005               	push	
  2980  000616  6EFA               	movwf	pclath,c
  2981  000618  5015               	movf	_serial_write,w,c
  2982  00061A  6EFD               	movwf	tosl,c
  2983  00061C  5016               	movf	_serial_write+1,w,c
  2984  00061E  6EFE               	movwf	tosh,c
  2985  000620  50F8               	movf	tblptru,w,c
  2986  000622  6EFF               	movwf	tosu,c
  2987  000624  50FA               	movf	pclath,w,c
  2988  000626  501E               	movf	_moduleAddress,w,c
  2989  000628  0012               	return		;indir
  2990  00062A                     l2702:
  2991                           
  2992                           ;FastTransfer.c: 251: serial_write(3);
  2993  00062A  D801               	call	u2958
  2994  00062C  D00B               	goto	l2704
  2995  00062E                     u2958:
  2996  00062E  0005               	push	
  2997  000630  6EFA               	movwf	pclath,c
  2998  000632  5015               	movf	_serial_write,w,c
  2999  000634  6EFD               	movwf	tosl,c
  3000  000636  5016               	movf	_serial_write+1,w,c
  3001  000638  6EFE               	movwf	tosh,c
  3002  00063A  50F8               	movf	tblptru,w,c
  3003  00063C  6EFF               	movwf	tosu,c
  3004  00063E  50FA               	movf	pclath,w,c
  3005  000640  0E03               	movlw	3
  3006  000642  0012               	return		;indir
  3007  000644                     l2704:
  3008                           
  3009                           ;FastTransfer.c: 252: serial_write(255);
  3010  000644  D801               	call	u2968
  3011  000646  D00B               	goto	l2706
  3012  000648                     u2968:
  3013  000648  0005               	push	
  3014  00064A  6EFA               	movwf	pclath,c
  3015  00064C  5015               	movf	_serial_write,w,c
  3016  00064E  6EFD               	movwf	tosl,c
  3017  000650  5016               	movf	_serial_write+1,w,c
  3018  000652  6EFE               	movwf	tosh,c
  3019  000654  50F8               	movf	tblptru,w,c
  3020  000656  6EFF               	movwf	tosu,c
  3021  000658  50FA               	movf	pclath,w,c
  3022  00065A  0EFF               	movlw	255
  3023  00065C  0012               	return		;indir
  3024  00065E                     l2706:
  3025                           
  3026                           ;FastTransfer.c: 253: serial_write(2);
  3027  00065E  D801               	call	u2978
  3028  000660  D00B               	goto	l2708
  3029  000662                     u2978:
  3030  000662  0005               	push	
  3031  000664  6EFA               	movwf	pclath,c
  3032  000666  5015               	movf	_serial_write,w,c
  3033  000668  6EFD               	movwf	tosl,c
  3034  00066A  5016               	movf	_serial_write+1,w,c
  3035  00066C  6EFE               	movwf	tosh,c
  3036  00066E  50F8               	movf	tblptru,w,c
  3037  000670  6EFF               	movwf	tosu,c
  3038  000672  50FA               	movf	pclath,w,c
  3039  000674  0E02               	movlw	2
  3040  000676  0012               	return		;indir
  3041  000678                     l2708:
  3042                           
  3043                           ;FastTransfer.c: 254: serial_write(rx_buffer[rx_array_inx - 1]);
  3044  000678  D801               	call	u2988
  3045  00067A  D025               	goto	l2710
  3046  00067C                     u2988:
  3047  00067C  0005               	push	
  3048  00067E  6EFA               	movwf	pclath,c
  3049  000680  5015               	movf	_serial_write,w,c
  3050  000682  6EFD               	movwf	tosl,c
  3051  000684  5016               	movf	_serial_write+1,w,c
  3052  000686  6EFE               	movwf	tosh,c
  3053  000688  50F8               	movf	tblptru,w,c
  3054  00068A  6EFF               	movwf	tosu,c
  3055  00068C  50FA               	movf	pclath,w,c
  3056  00068E  0EFF               	movlw	255
  3057  000690  0100               	movlb	0	; () banked
  3058  000692  6F85               	movwf	??_receiveData& (0+255),b
  3059  000694  0EFF               	movlw	255
  3060  000696  0100               	movlb	0	; () banked
  3061  000698  6F86               	movwf	(??_receiveData+1)& (0+255),b
  3062  00069A  5021               	movf	_rx_array_inx,w,c
  3063  00069C  0100               	movlb	0	; () banked
  3064  00069E  6F87               	movwf	(??_receiveData+2)& (0+255),b
  3065  0006A0  6B88               	clrf	(??_receiveData+3)& (0+255),b
  3066  0006A2  0100               	movlb	0	; () banked
  3067  0006A4  5185               	movf	??_receiveData& (0+255),w,b
  3068  0006A6  0100               	movlb	0	; () banked
  3069  0006A8  2787               	addwf	(??_receiveData+2)& (0+255),f,b
  3070  0006AA  0100               	movlb	0	; () banked
  3071  0006AC  5186               	movf	(??_receiveData+1)& (0+255),w,b
  3072  0006AE  0100               	movlb	0	; () banked
  3073  0006B0  2388               	addwfc	(??_receiveData+3)& (0+255),f,b
  3074  0006B2  0E00               	movlw	low _rx_buffer
  3075  0006B4  0100               	movlb	0	; () banked
  3076  0006B6  2587               	addwf	(??_receiveData+2)& (0+255),w,b
  3077  0006B8  6ED9               	movwf	fsr2l,c
  3078  0006BA  0E02               	movlw	high _rx_buffer
  3079  0006BC  0100               	movlb	0	; () banked
  3080  0006BE  2188               	addwfc	(??_receiveData+3)& (0+255),w,b
  3081  0006C0  6EDA               	movwf	fsr2h,c
  3082  0006C2  50DF               	movf	indf2,w,c
  3083  0006C4  0012               	return		;indir
  3084  0006C6                     l2710:
  3085                           
  3086                           ;FastTransfer.c: 255: serial_write(crcHolder);
  3087  0006C6  D801               	call	u2998
  3088  0006C8  D00C               	goto	l2712
  3089  0006CA                     u2998:
  3090  0006CA  0005               	push	
  3091  0006CC  6EFA               	movwf	pclath,c
  3092  0006CE  5015               	movf	_serial_write,w,c
  3093  0006D0  6EFD               	movwf	tosl,c
  3094  0006D2  5016               	movf	_serial_write+1,w,c
  3095  0006D4  6EFE               	movwf	tosh,c
  3096  0006D6  50F8               	movf	tblptru,w,c
  3097  0006D8  6EFF               	movwf	tosu,c
  3098  0006DA  50FA               	movf	pclath,w,c
  3099  0006DC  0100               	movlb	0	; () banked
  3100  0006DE  5192               	movf	receiveData@crcHolder_325& (0+255),w,b
  3101  0006E0  0012               	return		;indir
  3102  0006E2                     l2712:
  3103                           
  3104                           ;FastTransfer.c: 256: }
  3105                           ;FastTransfer.c: 259: rx_len = 0;
  3106  0006E2  0E00               	movlw	0
  3107  0006E4  6E22               	movwf	_rx_len,c
  3108                           
  3109                           ;FastTransfer.c: 260: rx_array_inx = 0;
  3110  0006E6  0E00               	movlw	0
  3111  0006E8  6E21               	movwf	_rx_array_inx,c
  3112                           
  3113                           ;FastTransfer.c: 261: return 0;
  3114  0006EA  0E00               	movlw	0
  3115  0006EC  0012               	return	
  3116  0006EE                     l2720:
  3117                           
  3118                           ;FastTransfer.c: 262: }
  3119                           ;FastTransfer.c: 263: }
  3120                           ;FastTransfer.c: 264: }
  3121                           ;FastTransfer.c: 267: return 0;
  3122  0006EE  0E00               	movlw	0
  3123  0006F0  0012               	return	
  3124  0006F2                     __end_of_receiveData:
  3125                           	opt stack 0
  3126                           tosu	equ	0xFFF
  3127                           tosh	equ	0xFFE
  3128                           tosl	equ	0xFFD
  3129                           pclath	equ	0xFFA
  3130                           tblptru	equ	0xFF8
  3131                           tblptrh	equ	0xFF7
  3132                           tblptrl	equ	0xFF6
  3133                           tablat	equ	0xFF5
  3134                           prodh	equ	0xFF4
  3135                           prodl	equ	0xFF3
  3136                           postinc0	equ	0xFEE
  3137                           wreg	equ	0xFE8
  3138                           indf2	equ	0xFDF
  3139                           postinc2	equ	0xFDE
  3140                           postdec2	equ	0xFDD
  3141                           plusw2	equ	0xFDB
  3142                           fsr2h	equ	0xFDA
  3143                           fsr2l	equ	0xFD9
  3144                           status	equ	0xFD8
  3145                           
  3146 ;; *************** function _Send_put *****************
  3147 ;; Defined at:
  3148 ;;		line 130 in file "UART.c"
  3149 ;; Parameters:    Size  Location     Type
  3150 ;;  _data           1    wreg     unsigned char 
  3151 ;; Auto vars:     Size  Location     Type
  3152 ;;  _data           1    5[BANK0 ] unsigned char 
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  1    wreg      void 
  3155 ;; Registers used:
  3156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 0/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3162 ;;      Params:         0       0       0       0       0       0       0
  3163 ;;      Locals:         0       1       0       0       0       0       0
  3164 ;;      Temps:          0       0       0       0       0       0       0
  3165 ;;      Totals:         0       1       0       0       0       0       0
  3166 ;;Total ram usage:        1 bytes
  3167 ;; Hardware stack levels used:    1
  3168 ;; Hardware stack levels required when called:    6
  3169 ;; This function calls:
  3170 ;;		_UART_buff_get
  3171 ;;		_UART_buff_put
  3172 ;; This function is called by:
  3173 ;;		_ComStart
  3174 ;;		_putch
  3175 ;;		_sendData
  3176 ;;		_receiveData
  3177 ;; This function uses a non-reentrant model
  3178 ;;
  3179                           
  3180                           	psect	text12
  3181  001278                     __ptext12:
  3182                           	opt stack 0
  3183  001278                     _Send_put:
  3184                           	opt stack 21
  3185                           
  3186                           ;incstack = 0
  3187                           ;Send_put@_data stored from wreg
  3188  001278  0100               	movlb	0	; () banked
  3189  00127A  6F84               	movwf	Send_put@_data& (0+255),b
  3190                           
  3191                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  3192  00127C  0E00               	movlw	low _output_buffer
  3193  00127E  0100               	movlb	0	; () banked
  3194  001280  6F7F               	movwf	UART_buff_put@_this& (0+255),b
  3195  001282  0E04               	movlw	high _output_buffer
  3196  001284  0100               	movlb	0	; () banked
  3197  001286  6F80               	movwf	(UART_buff_put@_this+1)& (0+255),b
  3198  001288  C084  F081         	movff	Send_put@_data,UART_buff_put@c
  3199  00128C  ECEB  F004         	call	_UART_buff_put
  3200                           
  3201                           ;UART.c: 132: if (Transmit_stall == 1) {
  3202  001290  0444               	decf	_Transmit_stall,w,c
  3203  001292  A4D8               	btfss	status,2,c
  3204  001294  0012               	return	
  3205                           
  3206                           ;UART.c: 133: Transmit_stall = 0;
  3207  001296  0E00               	movlw	0
  3208  001298  6E44               	movwf	_Transmit_stall,c
  3209                           
  3210                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  3211  00129A  0E00               	movlw	low _output_buffer
  3212  00129C  0100               	movlb	0	; () banked
  3213  00129E  6F7F               	movwf	UART_buff_get@_this& (0+255),b
  3214  0012A0  0E04               	movlw	high _output_buffer
  3215  0012A2  0100               	movlb	0	; () banked
  3216  0012A4  6F80               	movwf	(UART_buff_get@_this+1)& (0+255),b
  3217  0012A6  ECF1  F006         	call	_UART_buff_get	;wreg free
  3218  0012AA  6EAD               	movwf	4013,c	;volatile
  3219                           
  3220                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  3221  0012AC  889D               	bsf	3997,4,c	;volatile
  3222  0012AE  0012               	return	
  3223  0012B0                     __end_of_Send_put:
  3224                           	opt stack 0
  3225                           tosu	equ	0xFFF
  3226                           tosh	equ	0xFFE
  3227                           tosl	equ	0xFFD
  3228                           pclath	equ	0xFFA
  3229                           tblptru	equ	0xFF8
  3230                           tblptrh	equ	0xFF7
  3231                           tblptrl	equ	0xFF6
  3232                           tablat	equ	0xFF5
  3233                           prodh	equ	0xFF4
  3234                           prodl	equ	0xFF3
  3235                           postinc0	equ	0xFEE
  3236                           wreg	equ	0xFE8
  3237                           indf2	equ	0xFDF
  3238                           postinc2	equ	0xFDE
  3239                           postdec2	equ	0xFDD
  3240                           plusw2	equ	0xFDB
  3241                           fsr2h	equ	0xFDA
  3242                           fsr2l	equ	0xFD9
  3243                           status	equ	0xFD8
  3244                           
  3245 ;; *************** function _UART_buff_put *****************
  3246 ;; Defined at:
  3247 ;;		line 68 in file "UART.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;  _this           2    0[BANK0 ] PTR struct UART_ring_buf
  3250 ;;		 -> output_buffer(206), input_buffer(206), 
  3251 ;;  c               1    2[BANK0 ] const unsigned char 
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;		None
  3254 ;; Return value:  Size  Location     Type
  3255 ;;                  1    wreg      void 
  3256 ;; Registers used:
  3257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3258 ;; Tracked objects:
  3259 ;;		On entry : 0/0
  3260 ;;		On exit  : 0/0
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3263 ;;      Params:         0       3       0       0       0       0       0
  3264 ;;      Locals:         0       0       0       0       0       0       0
  3265 ;;      Temps:          0       2       0       0       0       0       0
  3266 ;;      Totals:         0       5       0       0       0       0       0
  3267 ;;Total ram usage:        5 bytes
  3268 ;; Hardware stack levels used:    1
  3269 ;; Hardware stack levels required when called:    5
  3270 ;; This function calls:
  3271 ;;		_UART_buff_modulo_inc
  3272 ;; This function is called by:
  3273 ;;		_Send_put
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           	psect	text13
  3278  0009D6                     __ptext13:
  3279                           	opt stack 0
  3280  0009D6                     _UART_buff_put:
  3281                           	opt stack 21
  3282                           
  3283                           ;UART.c: 69: if (_this->count < 200) {
  3284                           
  3285                           ;incstack = 0
  3286  0009D6  0100               	movlb	0	; () banked
  3287  0009D8  EE20 F0CC          	lfsr	2,204
  3288  0009DC  517F               	movf	UART_buff_put@_this& (0+255),w,b
  3289  0009DE  26D9               	addwf	fsr2l,f,c
  3290  0009E0  5180               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3291  0009E2  22DA               	addwfc	fsr2h,f,c
  3292  0009E4  0E01               	movlw	1
  3293  0009E6  BEDB               	btfsc	plusw2,7,c
  3294  0009E8  D007               	goto	l2376
  3295  0009EA  0E01               	movlw	1
  3296  0009EC  50DB               	movf	plusw2,w,c
  3297  0009EE  E142               	bnz	l2382
  3298  0009F0  0EC8               	movlw	200
  3299  0009F2  5CDE               	subwf	postinc2,w,c
  3300  0009F4  B0D8               	btfsc	status,0,c
  3301  0009F6  D03E               	goto	l2382
  3302  0009F8                     l2376:
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;UART.c: 70: _this->buf[_this->head] = c;
  3306  0009F8  0100               	movlb	0	; () banked
  3307  0009FA  EE20 F0C8          	lfsr	2,200
  3308  0009FE  517F               	movf	UART_buff_put@_this& (0+255),w,b
  3309  000A00  26D9               	addwf	fsr2l,f,c
  3310  000A02  5180               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3311  000A04  22DA               	addwfc	fsr2h,f,c
  3312  000A06  CFDE F082          	movff	postinc2,??_UART_buff_put
  3313  000A0A  CFDD F083          	movff	postdec2,??_UART_buff_put+1
  3314  000A0E  0100               	movlb	0	; () banked
  3315  000A10  5182               	movf	??_UART_buff_put& (0+255),w,b
  3316  000A12  0100               	movlb	0	; () banked
  3317  000A14  257F               	addwf	UART_buff_put@_this& (0+255),w,b
  3318  000A16  6ED9               	movwf	fsr2l,c
  3319  000A18  0100               	movlb	0	; () banked
  3320  000A1A  5183               	movf	(??_UART_buff_put+1)& (0+255),w,b
  3321  000A1C  0100               	movlb	0	; () banked
  3322  000A1E  2180               	addwfc	(UART_buff_put@_this+1)& (0+255),w,b
  3323  000A20  6EDA               	movwf	fsr2h,c
  3324  000A22  C081  FFDF         	movff	UART_buff_put@c,indf2
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3328  000A26  0100               	movlb	0	; () banked
  3329  000A28  EE20 F0C8          	lfsr	2,200
  3330  000A2C  517F               	movf	UART_buff_put@_this& (0+255),w,b
  3331  000A2E  26D9               	addwf	fsr2l,f,c
  3332  000A30  5180               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3333  000A32  22DA               	addwfc	fsr2h,f,c
  3334  000A34  CFDE F03D          	movff	postinc2,UART_buff_modulo_inc@value
  3335  000A38  CFDD F03E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3336  000A3C  0E00               	movlw	0
  3337  000A3E  6E40               	movwf	UART_buff_modulo_inc@modulus+1,c
  3338  000A40  0EC8               	movlw	200
  3339  000A42  6E3F               	movwf	UART_buff_modulo_inc@modulus,c
  3340  000A44  ECCE  F009         	call	_UART_buff_modulo_inc	;wreg free
  3341  000A48  0100               	movlb	0	; () banked
  3342  000A4A  EE20 F0C8          	lfsr	2,200
  3343  000A4E  517F               	movf	UART_buff_put@_this& (0+255),w,b
  3344  000A50  26D9               	addwf	fsr2l,f,c
  3345  000A52  5180               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3346  000A54  22DA               	addwfc	fsr2h,f,c
  3347  000A56  C03D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3348  000A5A  C03E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;UART.c: 72: ++_this->count;
  3352  000A5E  0100               	movlb	0	; () banked
  3353  000A60  EE20 F0CC          	lfsr	2,204
  3354  000A64  517F               	movf	UART_buff_put@_this& (0+255),w,b
  3355  000A66  26D9               	addwf	fsr2l,f,c
  3356  000A68  5180               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3357  000A6A  22DA               	addwfc	fsr2h,f,c
  3358  000A6C  2ADE               	incf	postinc2,f,c
  3359  000A6E  0E00               	movlw	0
  3360  000A70  22DD               	addwfc	postdec2,f,c
  3361                           
  3362                           ;UART.c: 73: } else {
  3363  000A72  0012               	return	
  3364  000A74                     l2382:
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;UART.c: 74: _this->buf[_this->head] = c;
  3368  000A74  0100               	movlb	0	; () banked
  3369  000A76  EE20 F0C8          	lfsr	2,200
  3370  000A7A  517F               	movf	UART_buff_put@_this& (0+255),w,b
  3371  000A7C  26D9               	addwf	fsr2l,f,c
  3372  000A7E  5180               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3373  000A80  22DA               	addwfc	fsr2h,f,c
  3374  000A82  CFDE F082          	movff	postinc2,??_UART_buff_put
  3375  000A86  CFDD F083          	movff	postdec2,??_UART_buff_put+1
  3376  000A8A  0100               	movlb	0	; () banked
  3377  000A8C  5182               	movf	??_UART_buff_put& (0+255),w,b
  3378  000A8E  0100               	movlb	0	; () banked
  3379  000A90  257F               	addwf	UART_buff_put@_this& (0+255),w,b
  3380  000A92  6ED9               	movwf	fsr2l,c
  3381  000A94  0100               	movlb	0	; () banked
  3382  000A96  5183               	movf	(??_UART_buff_put+1)& (0+255),w,b
  3383  000A98  0100               	movlb	0	; () banked
  3384  000A9A  2180               	addwfc	(UART_buff_put@_this+1)& (0+255),w,b
  3385  000A9C  6EDA               	movwf	fsr2h,c
  3386  000A9E  C081  FFDF         	movff	UART_buff_put@c,indf2
  3387                           
  3388                           ; BSR set to: 0
  3389                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3390  000AA2  0100               	movlb	0	; () banked
  3391  000AA4  EE20 F0C8          	lfsr	2,200
  3392  000AA8  517F               	movf	UART_buff_put@_this& (0+255),w,b
  3393  000AAA  26D9               	addwf	fsr2l,f,c
  3394  000AAC  5180               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3395  000AAE  22DA               	addwfc	fsr2h,f,c
  3396  000AB0  CFDE F03D          	movff	postinc2,UART_buff_modulo_inc@value
  3397  000AB4  CFDD F03E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3398  000AB8  0E00               	movlw	0
  3399  000ABA  6E40               	movwf	UART_buff_modulo_inc@modulus+1,c
  3400  000ABC  0EC8               	movlw	200
  3401  000ABE  6E3F               	movwf	UART_buff_modulo_inc@modulus,c
  3402  000AC0  ECCE  F009         	call	_UART_buff_modulo_inc	;wreg free
  3403  000AC4  0100               	movlb	0	; () banked
  3404  000AC6  EE20 F0C8          	lfsr	2,200
  3405  000ACA  517F               	movf	UART_buff_put@_this& (0+255),w,b
  3406  000ACC  26D9               	addwf	fsr2l,f,c
  3407  000ACE  5180               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3408  000AD0  22DA               	addwfc	fsr2h,f,c
  3409  000AD2  C03D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3410  000AD6  C03E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3414  000ADA  0100               	movlb	0	; () banked
  3415  000ADC  EE20 F0CA          	lfsr	2,202
  3416  000AE0  517F               	movf	UART_buff_put@_this& (0+255),w,b
  3417  000AE2  26D9               	addwf	fsr2l,f,c
  3418  000AE4  5180               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3419  000AE6  22DA               	addwfc	fsr2h,f,c
  3420  000AE8  CFDE F03D          	movff	postinc2,UART_buff_modulo_inc@value
  3421  000AEC  CFDD F03E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3422  000AF0  0E00               	movlw	0
  3423  000AF2  6E40               	movwf	UART_buff_modulo_inc@modulus+1,c
  3424  000AF4  0EC8               	movlw	200
  3425  000AF6  6E3F               	movwf	UART_buff_modulo_inc@modulus,c
  3426  000AF8  ECCE  F009         	call	_UART_buff_modulo_inc	;wreg free
  3427  000AFC  0100               	movlb	0	; () banked
  3428  000AFE  EE20 F0CA          	lfsr	2,202
  3429  000B02  517F               	movf	UART_buff_put@_this& (0+255),w,b
  3430  000B04  26D9               	addwf	fsr2l,f,c
  3431  000B06  5180               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3432  000B08  22DA               	addwfc	fsr2h,f,c
  3433  000B0A  C03D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3434  000B0E  C03E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3435  000B12  0012               	return	
  3436  000B14                     __end_of_UART_buff_put:
  3437                           	opt stack 0
  3438                           tosu	equ	0xFFF
  3439                           tosh	equ	0xFFE
  3440                           tosl	equ	0xFFD
  3441                           pclath	equ	0xFFA
  3442                           tblptru	equ	0xFF8
  3443                           tblptrh	equ	0xFF7
  3444                           tblptrl	equ	0xFF6
  3445                           tablat	equ	0xFF5
  3446                           prodh	equ	0xFF4
  3447                           prodl	equ	0xFF3
  3448                           postinc0	equ	0xFEE
  3449                           wreg	equ	0xFE8
  3450                           indf2	equ	0xFDF
  3451                           postinc2	equ	0xFDE
  3452                           postdec2	equ	0xFDD
  3453                           plusw2	equ	0xFDB
  3454                           fsr2h	equ	0xFDA
  3455                           fsr2l	equ	0xFD9
  3456                           status	equ	0xFD8
  3457                           
  3458 ;; *************** function _Receive_get *****************
  3459 ;; Defined at:
  3460 ;;		line 126 in file "UART.c"
  3461 ;; Parameters:    Size  Location     Type
  3462 ;;		None
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;		None
  3465 ;; Return value:  Size  Location     Type
  3466 ;;                  1    wreg      unsigned char 
  3467 ;; Registers used:
  3468 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3469 ;; Tracked objects:
  3470 ;;		On entry : 0/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3474 ;;      Params:         0       0       0       0       0       0       0
  3475 ;;      Locals:         0       0       0       0       0       0       0
  3476 ;;      Temps:          0       0       0       0       0       0       0
  3477 ;;      Totals:         0       0       0       0       0       0       0
  3478 ;;Total ram usage:        0 bytes
  3479 ;; Hardware stack levels used:    1
  3480 ;; Hardware stack levels required when called:    6
  3481 ;; This function calls:
  3482 ;;		_UART_buff_get
  3483 ;; This function is called by:
  3484 ;;		_ComStart
  3485 ;;		_getch
  3486 ;;		_receiveData
  3487 ;;		_CRCcheck
  3488 ;; This function uses a non-reentrant model
  3489 ;;
  3490                           
  3491                           	psect	text14
  3492  001508                     __ptext14:
  3493                           	opt stack 0
  3494  001508                     _Receive_get:
  3495                           	opt stack 22
  3496                           
  3497                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;incstack = 0
  3501  001508  0E00               	movlw	low _input_buffer
  3502  00150A  0100               	movlb	0	; () banked
  3503  00150C  6F7F               	movwf	UART_buff_get@_this& (0+255),b
  3504  00150E  0E03               	movlw	high _input_buffer
  3505  001510  0100               	movlb	0	; () banked
  3506  001512  6F80               	movwf	(UART_buff_get@_this+1)& (0+255),b
  3507  001514  ECF1  F006         	call	_UART_buff_get	;wreg free
  3508  001518  0012               	return	
  3509  00151A                     __end_of_Receive_get:
  3510                           	opt stack 0
  3511                           tosu	equ	0xFFF
  3512                           tosh	equ	0xFFE
  3513                           tosl	equ	0xFFD
  3514                           pclath	equ	0xFFA
  3515                           tblptru	equ	0xFF8
  3516                           tblptrh	equ	0xFF7
  3517                           tblptrl	equ	0xFF6
  3518                           tablat	equ	0xFF5
  3519                           prodh	equ	0xFF4
  3520                           prodl	equ	0xFF3
  3521                           postinc0	equ	0xFEE
  3522                           wreg	equ	0xFE8
  3523                           indf2	equ	0xFDF
  3524                           postinc2	equ	0xFDE
  3525                           postdec2	equ	0xFDD
  3526                           plusw2	equ	0xFDB
  3527                           fsr2h	equ	0xFDA
  3528                           fsr2l	equ	0xFD9
  3529                           status	equ	0xFD8
  3530                           
  3531 ;; *************** function _UART_buff_get *****************
  3532 ;; Defined at:
  3533 ;;		line 81 in file "UART.c"
  3534 ;; Parameters:    Size  Location     Type
  3535 ;;  _this           2    0[BANK0 ] PTR struct UART_ring_buf
  3536 ;;		 -> output_buffer(206), input_buffer(206), 
  3537 ;; Auto vars:     Size  Location     Type
  3538 ;;  c               1   32[COMRAM] unsigned char 
  3539 ;; Return value:  Size  Location     Type
  3540 ;;                  1    wreg      unsigned char 
  3541 ;; Registers used:
  3542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3543 ;; Tracked objects:
  3544 ;;		On entry : 0/0
  3545 ;;		On exit  : 0/0
  3546 ;;		Unchanged: 0/0
  3547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3548 ;;      Params:         0       2       0       0       0       0       0
  3549 ;;      Locals:         1       0       0       0       0       0       0
  3550 ;;      Temps:          0       2       0       0       0       0       0
  3551 ;;      Totals:         1       4       0       0       0       0       0
  3552 ;;Total ram usage:        5 bytes
  3553 ;; Hardware stack levels used:    1
  3554 ;; Hardware stack levels required when called:    5
  3555 ;; This function calls:
  3556 ;;		_UART_buff_modulo_inc
  3557 ;; This function is called by:
  3558 ;;		_Receive_get
  3559 ;;		_Send_put
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           	psect	text15
  3564  000DE2                     __ptext15:
  3565                           	opt stack 0
  3566  000DE2                     _UART_buff_get:
  3567                           	opt stack 21
  3568                           
  3569                           ;UART.c: 82: unsigned char c;
  3570                           ;UART.c: 83: if (_this->count > 0) {
  3571                           
  3572                           ;incstack = 0
  3573  000DE2  0100               	movlb	0	; () banked
  3574  000DE4  EE20 F0CC          	lfsr	2,204
  3575  000DE8  517F               	movf	UART_buff_get@_this& (0+255),w,b
  3576  000DEA  26D9               	addwf	fsr2l,f,c
  3577  000DEC  5180               	movf	(UART_buff_get@_this+1)& (0+255),w,b
  3578  000DEE  22DA               	addwfc	fsr2h,f,c
  3579  000DF0  0E01               	movlw	1
  3580  000DF2  BEDB               	btfsc	plusw2,7,c
  3581  000DF4  D044               	goto	l2396
  3582  000DF6  0E01               	movlw	1
  3583  000DF8  50DB               	movf	plusw2,w,c
  3584  000DFA  E103               	bnz	u2340
  3585  000DFC  04DE               	decf	postinc2,w,c
  3586  000DFE  A0D8               	btfss	status,0,c
  3587  000E00  D03E               	goto	l2396
  3588  000E02                     u2340:
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;UART.c: 84: c = _this->buf[_this->tail];
  3592  000E02  0100               	movlb	0	; () banked
  3593  000E04  EE20 F0CA          	lfsr	2,202
  3594  000E08  517F               	movf	UART_buff_get@_this& (0+255),w,b
  3595  000E0A  26D9               	addwf	fsr2l,f,c
  3596  000E0C  5180               	movf	(UART_buff_get@_this+1)& (0+255),w,b
  3597  000E0E  22DA               	addwfc	fsr2h,f,c
  3598  000E10  CFDE F081          	movff	postinc2,??_UART_buff_get
  3599  000E14  CFDD F082          	movff	postdec2,??_UART_buff_get+1
  3600  000E18  0100               	movlb	0	; () banked
  3601  000E1A  5181               	movf	??_UART_buff_get& (0+255),w,b
  3602  000E1C  0100               	movlb	0	; () banked
  3603  000E1E  257F               	addwf	UART_buff_get@_this& (0+255),w,b
  3604  000E20  6ED9               	movwf	fsr2l,c
  3605  000E22  0100               	movlb	0	; () banked
  3606  000E24  5182               	movf	(??_UART_buff_get+1)& (0+255),w,b
  3607  000E26  0100               	movlb	0	; () banked
  3608  000E28  2180               	addwfc	(UART_buff_get@_this+1)& (0+255),w,b
  3609  000E2A  6EDA               	movwf	fsr2h,c
  3610  000E2C  50DF               	movf	indf2,w,c
  3611  000E2E  6E43               	movwf	UART_buff_get@c,c
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3615  000E30  0100               	movlb	0	; () banked
  3616  000E32  EE20 F0CA          	lfsr	2,202
  3617  000E36  517F               	movf	UART_buff_get@_this& (0+255),w,b
  3618  000E38  26D9               	addwf	fsr2l,f,c
  3619  000E3A  5180               	movf	(UART_buff_get@_this+1)& (0+255),w,b
  3620  000E3C  22DA               	addwfc	fsr2h,f,c
  3621  000E3E  CFDE F03D          	movff	postinc2,UART_buff_modulo_inc@value
  3622  000E42  CFDD F03E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3623  000E46  0E00               	movlw	0
  3624  000E48  6E40               	movwf	UART_buff_modulo_inc@modulus+1,c
  3625  000E4A  0EC8               	movlw	200
  3626  000E4C  6E3F               	movwf	UART_buff_modulo_inc@modulus,c
  3627  000E4E  ECCE  F009         	call	_UART_buff_modulo_inc	;wreg free
  3628  000E52  0100               	movlb	0	; () banked
  3629  000E54  EE20 F0CA          	lfsr	2,202
  3630  000E58  517F               	movf	UART_buff_get@_this& (0+255),w,b
  3631  000E5A  26D9               	addwf	fsr2l,f,c
  3632  000E5C  5180               	movf	(UART_buff_get@_this+1)& (0+255),w,b
  3633  000E5E  22DA               	addwfc	fsr2h,f,c
  3634  000E60  C03D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3635  000E64  C03E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;UART.c: 86: --_this->count;
  3639  000E68  0100               	movlb	0	; () banked
  3640  000E6A  EE20 F0CC          	lfsr	2,204
  3641  000E6E  517F               	movf	UART_buff_get@_this& (0+255),w,b
  3642  000E70  26D9               	addwf	fsr2l,f,c
  3643  000E72  5180               	movf	(UART_buff_get@_this+1)& (0+255),w,b
  3644  000E74  22DA               	addwfc	fsr2h,f,c
  3645  000E76  06DE               	decf	postinc2,f,c
  3646  000E78  0E00               	movlw	0
  3647  000E7A  5ADD               	subwfb	postdec2,f,c
  3648                           
  3649                           ;UART.c: 87: } else {
  3650  000E7C  D002               	goto	l285
  3651  000E7E                     l2396:
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;UART.c: 88: c = 0;
  3655  000E7E  0E00               	movlw	0
  3656  000E80  6E43               	movwf	UART_buff_get@c,c
  3657  000E82                     l285:
  3658                           
  3659                           ; BSR set to: 0
  3660                           ;UART.c: 89: }
  3661                           ;UART.c: 90: return (c);
  3662  000E82  5043               	movf	UART_buff_get@c,w,c
  3663  000E84  0012               	return	
  3664  000E86                     __end_of_UART_buff_get:
  3665                           	opt stack 0
  3666                           tosu	equ	0xFFF
  3667                           tosh	equ	0xFFE
  3668                           tosl	equ	0xFFD
  3669                           pclath	equ	0xFFA
  3670                           tblptru	equ	0xFF8
  3671                           tblptrh	equ	0xFF7
  3672                           tblptrl	equ	0xFF6
  3673                           tablat	equ	0xFF5
  3674                           prodh	equ	0xFF4
  3675                           prodl	equ	0xFF3
  3676                           postinc0	equ	0xFEE
  3677                           wreg	equ	0xFE8
  3678                           indf2	equ	0xFDF
  3679                           postinc2	equ	0xFDE
  3680                           postdec2	equ	0xFDD
  3681                           plusw2	equ	0xFDB
  3682                           fsr2h	equ	0xFDA
  3683                           fsr2l	equ	0xFD9
  3684                           status	equ	0xFD8
  3685                           
  3686 ;; *************** function _UART_buff_modulo_inc *****************
  3687 ;; Defined at:
  3688 ;;		line 106 in file "UART.c"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;  value           2   26[COMRAM] const unsigned int 
  3691 ;;  modulus         2   28[COMRAM] const unsigned int 
  3692 ;; Auto vars:     Size  Location     Type
  3693 ;;  my_value        2   30[COMRAM] unsigned int 
  3694 ;; Return value:  Size  Location     Type
  3695 ;;                  2   26[COMRAM] unsigned int 
  3696 ;; Registers used:
  3697 ;;		wreg, status,2, status,0
  3698 ;; Tracked objects:
  3699 ;;		On entry : 0/0
  3700 ;;		On exit  : 0/0
  3701 ;;		Unchanged: 0/0
  3702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3703 ;;      Params:         4       0       0       0       0       0       0
  3704 ;;      Locals:         2       0       0       0       0       0       0
  3705 ;;      Temps:          0       0       0       0       0       0       0
  3706 ;;      Totals:         6       0       0       0       0       0       0
  3707 ;;Total ram usage:        6 bytes
  3708 ;; Hardware stack levels used:    1
  3709 ;; Hardware stack levels required when called:    4
  3710 ;; This function calls:
  3711 ;;		Nothing
  3712 ;; This function is called by:
  3713 ;;		_UART_buff_put
  3714 ;;		_UART_buff_get
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           	psect	text16
  3719  00139C                     __ptext16:
  3720                           	opt stack 0
  3721  00139C                     _UART_buff_modulo_inc:
  3722                           	opt stack 21
  3723                           
  3724                           ;UART.c: 107: unsigned int my_value = value + 1;
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;incstack = 0
  3728  00139C  0E01               	movlw	1
  3729  00139E  243D               	addwf	UART_buff_modulo_inc@value,w,c
  3730  0013A0  6E41               	movwf	UART_buff_modulo_inc@my_value,c
  3731  0013A2  0E00               	movlw	0
  3732  0013A4  203E               	addwfc	UART_buff_modulo_inc@value+1,w,c
  3733  0013A6  6E42               	movwf	UART_buff_modulo_inc@my_value+1,c
  3734                           
  3735                           ;UART.c: 108: if (my_value >= modulus) {
  3736  0013A8  503F               	movf	UART_buff_modulo_inc@modulus,w,c
  3737  0013AA  5C41               	subwf	UART_buff_modulo_inc@my_value,w,c
  3738  0013AC  5040               	movf	UART_buff_modulo_inc@modulus+1,w,c
  3739  0013AE  5842               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  3740  0013B0  A0D8               	btfss	status,0,c
  3741  0013B2  D004               	goto	l2362
  3742                           
  3743                           ;UART.c: 109: my_value = 0;
  3744  0013B4  0E00               	movlw	0
  3745  0013B6  6E42               	movwf	UART_buff_modulo_inc@my_value+1,c
  3746  0013B8  0E00               	movlw	0
  3747  0013BA  6E41               	movwf	UART_buff_modulo_inc@my_value,c
  3748  0013BC                     l2362:
  3749                           
  3750                           ;UART.c: 110: }
  3751                           ;UART.c: 111: return (my_value);
  3752  0013BC  C041  F03D         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  3753  0013C0  C042  F03E         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  3754  0013C4  0012               	return	
  3755  0013C6                     __end_of_UART_buff_modulo_inc:
  3756                           	opt stack 0
  3757                           tosu	equ	0xFFF
  3758                           tosh	equ	0xFFE
  3759                           tosl	equ	0xFFD
  3760                           pclath	equ	0xFFA
  3761                           tblptru	equ	0xFF8
  3762                           tblptrh	equ	0xFF7
  3763                           tblptrl	equ	0xFF6
  3764                           tablat	equ	0xFF5
  3765                           prodh	equ	0xFF4
  3766                           prodl	equ	0xFF3
  3767                           postinc0	equ	0xFEE
  3768                           wreg	equ	0xFE8
  3769                           indf2	equ	0xFDF
  3770                           postinc2	equ	0xFDE
  3771                           postdec2	equ	0xFDD
  3772                           plusw2	equ	0xFDB
  3773                           fsr2h	equ	0xFDA
  3774                           fsr2l	equ	0xFD9
  3775                           status	equ	0xFD8
  3776                           
  3777 ;; *************** function _Receive_available *****************
  3778 ;; Defined at:
  3779 ;;		line 122 in file "UART.c"
  3780 ;; Parameters:    Size  Location     Type
  3781 ;;		None
  3782 ;; Auto vars:     Size  Location     Type
  3783 ;;		None
  3784 ;; Return value:  Size  Location     Type
  3785 ;;                  2   28[COMRAM] int 
  3786 ;; Registers used:
  3787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3788 ;; Tracked objects:
  3789 ;;		On entry : 0/0
  3790 ;;		On exit  : 0/0
  3791 ;;		Unchanged: 0/0
  3792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3793 ;;      Params:         2       0       0       0       0       0       0
  3794 ;;      Locals:         0       0       0       0       0       0       0
  3795 ;;      Temps:          0       0       0       0       0       0       0
  3796 ;;      Totals:         2       0       0       0       0       0       0
  3797 ;;Total ram usage:        2 bytes
  3798 ;; Hardware stack levels used:    1
  3799 ;; Hardware stack levels required when called:    5
  3800 ;; This function calls:
  3801 ;;		_UART_buff_size
  3802 ;; This function is called by:
  3803 ;;		_ComStart
  3804 ;;		_receiveData
  3805 ;;		_CRCcheck
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           	psect	text17
  3810  0014B2                     __ptext17:
  3811                           	opt stack 0
  3812  0014B2                     _Receive_available:
  3813                           	opt stack 23
  3814                           
  3815                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  3816                           
  3817                           ;incstack = 0
  3818  0014B2  0E00               	movlw	low _input_buffer
  3819  0014B4  6E3D               	movwf	UART_buff_size@_this,c
  3820  0014B6  0E03               	movlw	high _input_buffer
  3821  0014B8  6E3E               	movwf	UART_buff_size@_this+1,c
  3822  0014BA  EC64  F00A         	call	_UART_buff_size	;wreg free
  3823  0014BE  C03D  F03F         	movff	?_UART_buff_size,?_Receive_available
  3824  0014C2  C03E  F040         	movff	?_UART_buff_size+1,?_Receive_available+1
  3825  0014C6  0012               	return	
  3826  0014C8                     __end_of_Receive_available:
  3827                           	opt stack 0
  3828                           tosu	equ	0xFFF
  3829                           tosh	equ	0xFFE
  3830                           tosl	equ	0xFFD
  3831                           pclath	equ	0xFFA
  3832                           tblptru	equ	0xFF8
  3833                           tblptrh	equ	0xFF7
  3834                           tblptrl	equ	0xFF6
  3835                           tablat	equ	0xFF5
  3836                           prodh	equ	0xFF4
  3837                           prodl	equ	0xFF3
  3838                           postinc0	equ	0xFEE
  3839                           wreg	equ	0xFE8
  3840                           indf2	equ	0xFDF
  3841                           postinc2	equ	0xFDE
  3842                           postdec2	equ	0xFDD
  3843                           plusw2	equ	0xFDB
  3844                           fsr2h	equ	0xFDA
  3845                           fsr2l	equ	0xFD9
  3846                           status	equ	0xFD8
  3847                           
  3848 ;; *************** function _UART_buff_size *****************
  3849 ;; Defined at:
  3850 ;;		line 102 in file "UART.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3853 ;;		 -> output_buffer(206), input_buffer(206), 
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;		None
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  2   26[COMRAM] int 
  3858 ;; Registers used:
  3859 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3865 ;;      Params:         2       0       0       0       0       0       0
  3866 ;;      Locals:         0       0       0       0       0       0       0
  3867 ;;      Temps:          0       0       0       0       0       0       0
  3868 ;;      Totals:         2       0       0       0       0       0       0
  3869 ;;Total ram usage:        2 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    4
  3872 ;; This function calls:
  3873 ;;		Nothing
  3874 ;; This function is called by:
  3875 ;;		_Receive_available
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           	psect	text18
  3880  0014C8                     __ptext18:
  3881                           	opt stack 0
  3882  0014C8                     _UART_buff_size:
  3883                           	opt stack 23
  3884                           
  3885                           ;UART.c: 103: return (_this->count);
  3886                           
  3887                           ;incstack = 0
  3888  0014C8  EE20 F0CC          	lfsr	2,204
  3889  0014CC  503D               	movf	UART_buff_size@_this,w,c
  3890  0014CE  26D9               	addwf	fsr2l,f,c
  3891  0014D0  503E               	movf	UART_buff_size@_this+1,w,c
  3892  0014D2  22DA               	addwfc	fsr2h,f,c
  3893  0014D4  CFDE F03D          	movff	postinc2,?_UART_buff_size
  3894  0014D8  CFDD F03E          	movff	postdec2,?_UART_buff_size+1
  3895  0014DC  0012               	return	
  3896  0014DE                     __end_of_UART_buff_size:
  3897                           	opt stack 0
  3898                           tosu	equ	0xFFF
  3899                           tosh	equ	0xFFE
  3900                           tosl	equ	0xFFD
  3901                           pclath	equ	0xFFA
  3902                           tblptru	equ	0xFF8
  3903                           tblptrh	equ	0xFF7
  3904                           tblptrl	equ	0xFF6
  3905                           tablat	equ	0xFF5
  3906                           prodh	equ	0xFF4
  3907                           prodl	equ	0xFF3
  3908                           postinc0	equ	0xFEE
  3909                           wreg	equ	0xFE8
  3910                           indf2	equ	0xFDF
  3911                           postinc2	equ	0xFDE
  3912                           postdec2	equ	0xFDD
  3913                           plusw2	equ	0xFDB
  3914                           fsr2h	equ	0xFDA
  3915                           fsr2l	equ	0xFD9
  3916                           status	equ	0xFD8
  3917                           
  3918 ;; *************** function _CRC8 *****************
  3919 ;; Defined at:
  3920 ;;		line 89 in file "FastTransfer.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;  data            2   26[COMRAM] PTR const unsigned char 
  3923 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_324(3), receiveData@holder(3), 
  3924 ;;		 -> rx_buffer(200), ring_buffer(206), 
  3925 ;;  len             1   28[COMRAM] unsigned char 
  3926 ;; Auto vars:     Size  Location     Type
  3927 ;;  sum             1   29[COMRAM] unsigned char 
  3928 ;;  tempI           1   31[COMRAM] unsigned char 
  3929 ;;  extract         1   30[COMRAM] unsigned char 
  3930 ;;  crc             1   32[COMRAM] unsigned char 
  3931 ;; Return value:  Size  Location     Type
  3932 ;;                  1    wreg      unsigned char 
  3933 ;; Registers used:
  3934 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3935 ;; Tracked objects:
  3936 ;;		On entry : 0/0
  3937 ;;		On exit  : 0/0
  3938 ;;		Unchanged: 0/0
  3939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3940 ;;      Params:         3       0       0       0       0       0       0
  3941 ;;      Locals:         4       0       0       0       0       0       0
  3942 ;;      Temps:          0       0       0       0       0       0       0
  3943 ;;      Totals:         7       0       0       0       0       0       0
  3944 ;;Total ram usage:        7 bytes
  3945 ;; Hardware stack levels used:    1
  3946 ;; Hardware stack levels required when called:    4
  3947 ;; This function calls:
  3948 ;;		Nothing
  3949 ;; This function is called by:
  3950 ;;		_sendData
  3951 ;;		_receiveData
  3952 ;;		_CRCcheck
  3953 ;; This function uses a non-reentrant model
  3954 ;;
  3955                           
  3956                           	psect	text19
  3957  0011A0                     __ptext19:
  3958                           	opt stack 0
  3959  0011A0                     _CRC8:
  3960                           	opt stack 23
  3961                           
  3962                           ;FastTransfer.c: 90: unsigned char crc = 0x00;
  3963                           
  3964                           ;incstack = 0
  3965  0011A0  0E00               	movlw	0
  3966  0011A2  6E43               	movwf	CRC8@crc,c
  3967                           
  3968                           ;FastTransfer.c: 91: while (len--) {
  3969  0011A4  D01C               	goto	l2418
  3970  0011A6                     l2402:
  3971                           
  3972                           ;FastTransfer.c: 92: unsigned char extract = *data++;
  3973  0011A6  C03D  FFD9         	movff	CRC8@data,fsr2l
  3974  0011AA  C03E  FFDA         	movff	CRC8@data+1,fsr2h
  3975  0011AE  50DF               	movf	indf2,w,c
  3976  0011B0  6E41               	movwf	CRC8@extract,c
  3977  0011B2  4A3D               	infsnz	CRC8@data,f,c
  3978  0011B4  2A3E               	incf	CRC8@data+1,f,c
  3979                           
  3980                           ;FastTransfer.c: 93: unsigned char tempI;
  3981                           ;FastTransfer.c: 94: for (tempI = 8; tempI; tempI--) {
  3982  0011B6  0E08               	movlw	8
  3983  0011B8  6E42               	movwf	CRC8@tempI,c
  3984  0011BA  D00E               	goto	l2416
  3985  0011BC                     l2408:
  3986                           
  3987                           ;FastTransfer.c: 95: unsigned char sum = (crc ^ extract) & 0x01;
  3988  0011BC  5043               	movf	CRC8@crc,w,c
  3989  0011BE  1841               	xorwf	CRC8@extract,w,c
  3990  0011C0  0B01               	andlw	1
  3991  0011C2  6E40               	movwf	CRC8@sum,c
  3992                           
  3993                           ;FastTransfer.c: 96: crc >>= 1;
  3994  0011C4  90D8               	bcf	status,0,c
  3995  0011C6  3243               	rrcf	CRC8@crc,f,c
  3996                           
  3997                           ;FastTransfer.c: 97: if (sum) {
  3998  0011C8  5040               	movf	CRC8@sum,w,c
  3999  0011CA  B4D8               	btfsc	status,2,c
  4000  0011CC  D002               	goto	l110
  4001                           
  4002                           ;FastTransfer.c: 98: crc ^= 0x8C;
  4003  0011CE  0E8C               	movlw	140
  4004  0011D0  1A43               	xorwf	CRC8@crc,f,c
  4005  0011D2                     l110:
  4006                           
  4007                           ;FastTransfer.c: 99: }
  4008                           ;FastTransfer.c: 100: extract >>= 1;
  4009  0011D2  90D8               	bcf	status,0,c
  4010  0011D4  3241               	rrcf	CRC8@extract,f,c
  4011  0011D6  0642               	decf	CRC8@tempI,f,c
  4012  0011D8                     l2416:
  4013  0011D8  5042               	movf	CRC8@tempI,w,c
  4014  0011DA  A4D8               	btfss	status,2,c
  4015  0011DC  D7EF               	goto	l2408
  4016  0011DE                     l2418:
  4017  0011DE  063F               	decf	CRC8@len,f,c
  4018  0011E0  283F               	incf	CRC8@len,w,c
  4019  0011E2  A4D8               	btfss	status,2,c
  4020  0011E4  D7E0               	goto	l2402
  4021                           
  4022                           ;FastTransfer.c: 101: }
  4023                           ;FastTransfer.c: 102: }
  4024                           ;FastTransfer.c: 103: return crc;
  4025  0011E6  5043               	movf	CRC8@crc,w,c
  4026  0011E8  0012               	return	
  4027  0011EA                     __end_of_CRC8:
  4028                           	opt stack 0
  4029                           tosu	equ	0xFFF
  4030                           tosh	equ	0xFFE
  4031                           tosl	equ	0xFFD
  4032                           pclath	equ	0xFFA
  4033                           tblptru	equ	0xFF8
  4034                           tblptrh	equ	0xFF7
  4035                           tblptrl	equ	0xFF6
  4036                           tablat	equ	0xFF5
  4037                           prodh	equ	0xFF4
  4038                           prodl	equ	0xFF3
  4039                           postinc0	equ	0xFEE
  4040                           wreg	equ	0xFE8
  4041                           indf2	equ	0xFDF
  4042                           postinc2	equ	0xFDE
  4043                           postdec2	equ	0xFDD
  4044                           plusw2	equ	0xFDB
  4045                           fsr2h	equ	0xFDA
  4046                           fsr2l	equ	0xFD9
  4047                           status	equ	0xFD8
  4048                           
  4049 ;; *************** function _Start *****************
  4050 ;; Defined at:
  4051 ;;		line 43 in file "Function.c"
  4052 ;; Parameters:    Size  Location     Type
  4053 ;;		None
  4054 ;; Auto vars:     Size  Location     Type
  4055 ;;		None
  4056 ;; Return value:  Size  Location     Type
  4057 ;;                  1    wreg      void 
  4058 ;; Registers used:
  4059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4060 ;; Tracked objects:
  4061 ;;		On entry : 0/0
  4062 ;;		On exit  : 0/0
  4063 ;;		Unchanged: 0/0
  4064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4065 ;;      Params:         0       0       0       0       0       0       0
  4066 ;;      Locals:         0       0       0       0       0       0       0
  4067 ;;      Temps:          0       0       0       0       0       0       0
  4068 ;;      Totals:         0       0       0       0       0       0       0
  4069 ;;Total ram usage:        0 bytes
  4070 ;; Hardware stack levels used:    1
  4071 ;; Hardware stack levels required when called:    8
  4072 ;; This function calls:
  4073 ;;		_ComStart
  4074 ;;		_INTERRUPT_Initialize
  4075 ;;		_TMR0_Initialize
  4076 ;; This function is called by:
  4077 ;;		_main
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           	psect	text20
  4082  0011EA                     __ptext20:
  4083                           	opt stack 0
  4084  0011EA                     _Start:
  4085                           	opt stack 22
  4086                           
  4087                           ;Function.c: 108: TRISCbits.TRISC5 = 1;
  4088                           
  4089                           ;incstack = 0
  4090  0011EA  8A94               	bsf	3988,5,c	;volatile
  4091                           
  4092                           ;Function.c: 109: TRISCbits.TRISC4 = 1;
  4093  0011EC  8894               	bsf	3988,4,c	;volatile
  4094                           
  4095                           ;Function.c: 110: TRISDbits.TRISD3 = 1;
  4096  0011EE  8695               	bsf	3989,3,c	;volatile
  4097                           
  4098                           ;Function.c: 111: TRISDbits.TRISD2 = 1;
  4099  0011F0  8495               	bsf	3989,2,c	;volatile
  4100                           
  4101                           ;Function.c: 112: TRISDbits.TRISD1 = 1;
  4102  0011F2  8295               	bsf	3989,1,c	;volatile
  4103                           
  4104                           ;Function.c: 113: TRISDbits.TRISD0 = 1;
  4105  0011F4  8095               	bsf	3989,0,c	;volatile
  4106                           
  4107                           ;Function.c: 114: TRISCbits.TRISC3 = 1;
  4108  0011F6  8694               	bsf	3988,3,c	;volatile
  4109                           
  4110                           ;Function.c: 115: TRISCbits.TRISC2 = 1;
  4111  0011F8  8494               	bsf	3988,2,c	;volatile
  4112                           
  4113                           ;Function.c: 116: TRISCbits.TRISC1 = 1;
  4114  0011FA  8294               	bsf	3988,1,c	;volatile
  4115                           
  4116                           ;Function.c: 117: TRISAbits.TRISA7 = 1;
  4117  0011FC  8E92               	bsf	3986,7,c	;volatile
  4118                           
  4119                           ;Function.c: 118: TRISCbits.TRISC0 = 1;
  4120  0011FE  8094               	bsf	3988,0,c	;volatile
  4121                           
  4122                           ;Function.c: 119: TRISAbits.TRISA4 = 1;
  4123  001200  8892               	bsf	3986,4,c	;volatile
  4124                           
  4125                           ;Function.c: 120: TRISAbits.TRISA6 = 1;
  4126  001202  8C92               	bsf	3986,6,c	;volatile
  4127                           
  4128                           ;Function.c: 123: TRISAbits.TRISA3 = 0;
  4129  001204  9692               	bcf	3986,3,c	;volatile
  4130                           
  4131                           ;Function.c: 124: TRISDbits.TRISD4 = 0;
  4132  001206  9895               	bcf	3989,4,c	;volatile
  4133                           
  4134                           ;Function.c: 129: ANSELA = 0;
  4135  001208  0E00               	movlw	0
  4136  00120A  010F               	movlb	15	; () banked
  4137  00120C  6F38               	movwf	56,b	;volatile
  4138                           
  4139                           ;Function.c: 130: ANSELC = 0;
  4140  00120E  0E00               	movlw	0
  4141  001210  010F               	movlb	15	; () banked
  4142  001212  6F3A               	movwf	58,b	;volatile
  4143                           
  4144                           ;Function.c: 131: ANSELD = 0;
  4145  001214  0E00               	movlw	0
  4146  001216  010F               	movlb	15	; () banked
  4147  001218  6F3B               	movwf	59,b	;volatile
  4148                           
  4149                           ;Function.c: 134: OSCCON = 0x72;
  4150  00121A  0E72               	movlw	114
  4151  00121C  6ED3               	movwf	4051,c	;volatile
  4152                           
  4153                           ;Function.c: 136: OSCCON2 = 0x04;
  4154  00121E  0E04               	movlw	4
  4155  001220  6ED2               	movwf	4050,c	;volatile
  4156                           
  4157                           ;Function.c: 138: OSCTUNE = 0x00;
  4158  001222  0E00               	movlw	0
  4159  001224  6E9B               	movwf	3995,c	;volatile
  4160                           
  4161                           ; BSR set to: 15
  4162                           ;Function.c: 141: ComStart();
  4163  001226  EC78  F008         	call	_ComStart	;wreg free
  4164                           
  4165                           ;Function.c: 142: INTERRUPT_Initialize();
  4166  00122A  EC42  F00A         	call	_INTERRUPT_Initialize	;wreg free
  4167                           
  4168                           ;Function.c: 143: TMR0_Initialize();
  4169  00122E  EC08  F00A         	call	_TMR0_Initialize	;wreg free
  4170  001232  0012               	return		;funcret
  4171  001234                     __end_of_Start:
  4172                           	opt stack 0
  4173                           tosu	equ	0xFFF
  4174                           tosh	equ	0xFFE
  4175                           tosl	equ	0xFFD
  4176                           pclath	equ	0xFFA
  4177                           tblptru	equ	0xFF8
  4178                           tblptrh	equ	0xFF7
  4179                           tblptrl	equ	0xFF6
  4180                           tablat	equ	0xFF5
  4181                           prodh	equ	0xFF4
  4182                           prodl	equ	0xFF3
  4183                           postinc0	equ	0xFEE
  4184                           wreg	equ	0xFE8
  4185                           indf2	equ	0xFDF
  4186                           postinc2	equ	0xFDE
  4187                           postdec2	equ	0xFDD
  4188                           plusw2	equ	0xFDB
  4189                           fsr2h	equ	0xFDA
  4190                           fsr2l	equ	0xFD9
  4191                           status	equ	0xFD8
  4192                           
  4193 ;; *************** function _TMR0_Initialize *****************
  4194 ;; Defined at:
  4195 ;;		line 23 in file "tmr0.c"
  4196 ;; Parameters:    Size  Location     Type
  4197 ;;		None
  4198 ;; Auto vars:     Size  Location     Type
  4199 ;;		None
  4200 ;; Return value:  Size  Location     Type
  4201 ;;                  1    wreg      void 
  4202 ;; Registers used:
  4203 ;;		wreg, status,2, cstack
  4204 ;; Tracked objects:
  4205 ;;		On entry : 0/0
  4206 ;;		On exit  : 0/0
  4207 ;;		Unchanged: 0/0
  4208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4209 ;;      Params:         0       0       0       0       0       0       0
  4210 ;;      Locals:         0       0       0       0       0       0       0
  4211 ;;      Temps:          0       0       0       0       0       0       0
  4212 ;;      Totals:         0       0       0       0       0       0       0
  4213 ;;Total ram usage:        0 bytes
  4214 ;; Hardware stack levels used:    1
  4215 ;; Hardware stack levels required when called:    5
  4216 ;; This function calls:
  4217 ;;		_TMR0_StartTimer
  4218 ;; This function is called by:
  4219 ;;		_Start
  4220 ;; This function uses a non-reentrant model
  4221 ;;
  4222                           
  4223                           	psect	text21
  4224  001410                     __ptext21:
  4225                           	opt stack 0
  4226  001410                     _TMR0_Initialize:
  4227                           	opt stack 24
  4228                           
  4229                           ;tmr0.c: 27: T0CON = 0x94;
  4230                           
  4231                           ;incstack = 0
  4232  001410  0E94               	movlw	148
  4233  001412  6ED5               	movwf	4053,c	;volatile
  4234                           
  4235                           ;tmr0.c: 30: TMR0H = 0xCF;
  4236  001414  0ECF               	movlw	207
  4237  001416  6ED7               	movwf	4055,c	;volatile
  4238                           
  4239                           ;tmr0.c: 33: TMR0L = 0x2C;
  4240  001418  0E2C               	movlw	44
  4241  00141A  6ED6               	movwf	4054,c	;volatile
  4242                           
  4243                           ;tmr0.c: 36: timer0ReloadVal16bit = 53036;
  4244  00141C  0ECF               	movlw	207
  4245  00141E  6E18               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  4246  001420  0E2C               	movlw	44
  4247  001422  6E17               	movwf	_timer0ReloadVal16bit,c	;volatile
  4248                           
  4249                           ;tmr0.c: 39: INTCONbits.TMR0IF = 0;
  4250  001424  94F2               	bcf	intcon,2,c	;volatile
  4251                           
  4252                           ;tmr0.c: 42: INTCONbits.TMR0IE = 1;
  4253  001426  8AF2               	bsf	intcon,5,c	;volatile
  4254                           
  4255                           ;tmr0.c: 45: TMR0_StartTimer();
  4256  001428  EC9E  F00A         	call	_TMR0_StartTimer	;wreg free
  4257  00142C  0012               	return		;funcret
  4258  00142E                     __end_of_TMR0_Initialize:
  4259                           	opt stack 0
  4260                           tosu	equ	0xFFF
  4261                           tosh	equ	0xFFE
  4262                           tosl	equ	0xFFD
  4263                           pclath	equ	0xFFA
  4264                           tblptru	equ	0xFF8
  4265                           tblptrh	equ	0xFF7
  4266                           tblptrl	equ	0xFF6
  4267                           tablat	equ	0xFF5
  4268                           prodh	equ	0xFF4
  4269                           prodl	equ	0xFF3
  4270                           intcon	equ	0xFF2
  4271                           postinc0	equ	0xFEE
  4272                           wreg	equ	0xFE8
  4273                           indf2	equ	0xFDF
  4274                           postinc2	equ	0xFDE
  4275                           postdec2	equ	0xFDD
  4276                           plusw2	equ	0xFDB
  4277                           fsr2h	equ	0xFDA
  4278                           fsr2l	equ	0xFD9
  4279                           status	equ	0xFD8
  4280                           
  4281 ;; *************** function _TMR0_StartTimer *****************
  4282 ;; Defined at:
  4283 ;;		line 48 in file "tmr0.c"
  4284 ;; Parameters:    Size  Location     Type
  4285 ;;		None
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;		None
  4288 ;; Return value:  Size  Location     Type
  4289 ;;                  1    wreg      void 
  4290 ;; Registers used:
  4291 ;;		None
  4292 ;; Tracked objects:
  4293 ;;		On entry : 0/0
  4294 ;;		On exit  : 0/0
  4295 ;;		Unchanged: 0/0
  4296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4297 ;;      Params:         0       0       0       0       0       0       0
  4298 ;;      Locals:         0       0       0       0       0       0       0
  4299 ;;      Temps:          0       0       0       0       0       0       0
  4300 ;;      Totals:         0       0       0       0       0       0       0
  4301 ;;Total ram usage:        0 bytes
  4302 ;; Hardware stack levels used:    1
  4303 ;; Hardware stack levels required when called:    4
  4304 ;; This function calls:
  4305 ;;		Nothing
  4306 ;; This function is called by:
  4307 ;;		_TMR0_Initialize
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text22
  4312  00153C                     __ptext22:
  4313                           	opt stack 0
  4314  00153C                     _TMR0_StartTimer:
  4315                           	opt stack 24
  4316                           
  4317                           ;tmr0.c: 50: T0CONbits.TMR0ON = 1;
  4318                           
  4319                           ;incstack = 0
  4320  00153C  8ED5               	bsf	4053,7,c	;volatile
  4321  00153E  0012               	return		;funcret
  4322  001540                     __end_of_TMR0_StartTimer:
  4323                           	opt stack 0
  4324                           tosu	equ	0xFFF
  4325                           tosh	equ	0xFFE
  4326                           tosl	equ	0xFFD
  4327                           pclath	equ	0xFFA
  4328                           tblptru	equ	0xFF8
  4329                           tblptrh	equ	0xFF7
  4330                           tblptrl	equ	0xFF6
  4331                           tablat	equ	0xFF5
  4332                           prodh	equ	0xFF4
  4333                           prodl	equ	0xFF3
  4334                           intcon	equ	0xFF2
  4335                           postinc0	equ	0xFEE
  4336                           wreg	equ	0xFE8
  4337                           indf2	equ	0xFDF
  4338                           postinc2	equ	0xFDE
  4339                           postdec2	equ	0xFDD
  4340                           plusw2	equ	0xFDB
  4341                           fsr2h	equ	0xFDA
  4342                           fsr2l	equ	0xFD9
  4343                           status	equ	0xFD8
  4344                           
  4345 ;; *************** function _INTERRUPT_Initialize *****************
  4346 ;; Defined at:
  4347 ;;		line 146 in file "Function.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;		None
  4350 ;; Auto vars:     Size  Location     Type
  4351 ;;		None
  4352 ;; Return value:  Size  Location     Type
  4353 ;;                  1    wreg      void 
  4354 ;; Registers used:
  4355 ;;		None
  4356 ;; Tracked objects:
  4357 ;;		On entry : 0/0
  4358 ;;		On exit  : 0/0
  4359 ;;		Unchanged: 0/0
  4360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4361 ;;      Params:         0       0       0       0       0       0       0
  4362 ;;      Locals:         0       0       0       0       0       0       0
  4363 ;;      Temps:          0       0       0       0       0       0       0
  4364 ;;      Totals:         0       0       0       0       0       0       0
  4365 ;;Total ram usage:        0 bytes
  4366 ;; Hardware stack levels used:    1
  4367 ;; Hardware stack levels required when called:    4
  4368 ;; This function calls:
  4369 ;;		Nothing
  4370 ;; This function is called by:
  4371 ;;		_Start
  4372 ;; This function uses a non-reentrant model
  4373 ;;
  4374                           
  4375                           	psect	text23
  4376  001484                     __ptext23:
  4377                           	opt stack 0
  4378  001484                     _INTERRUPT_Initialize:
  4379                           	opt stack 25
  4380                           
  4381                           ;Function.c: 148: INTCONbits.PEIE = 1;
  4382                           
  4383                           ;incstack = 0
  4384  001484  8CF2               	bsf	intcon,6,c	;volatile
  4385                           
  4386                           ;Function.c: 149: INTCONbits.GIE = 1;
  4387  001486  8EF2               	bsf	intcon,7,c	;volatile
  4388                           
  4389                           ;Function.c: 151: RCONbits.IPEN = 0;
  4390  001488  9ED0               	bcf	4048,7,c	;volatile
  4391                           
  4392                           ;Function.c: 156: IPR1bits.RC1IP = 0;
  4393  00148A  9A9F               	bcf	3999,5,c	;volatile
  4394                           
  4395                           ;Function.c: 158: IPR1bits.TX1IP = 0;
  4396  00148C  989F               	bcf	3999,4,c	;volatile
  4397                           
  4398                           ;Function.c: 161: INTCONbits.TMR0IF = 0;
  4399  00148E  94F2               	bcf	intcon,2,c	;volatile
  4400                           
  4401                           ;Function.c: 164: INTCONbits.TMR0IE = 1;
  4402  001490  8AF2               	bsf	intcon,5,c	;volatile
  4403                           
  4404                           ;Function.c: 166: IPR1bits.ADIP = 0;
  4405  001492  9C9F               	bcf	3999,6,c	;volatile
  4406                           
  4407                           ;Function.c: 168: IPR1bits.SSP1IP = 0;
  4408  001494  969F               	bcf	3999,3,c	;volatile
  4409                           
  4410                           ;Function.c: 170: IPR2bits.BCL1IP = 0;
  4411  001496  96A2               	bcf	4002,3,c	;volatile
  4412                           
  4413                           ;Function.c: 171: IPR1bits.TMR2IP=0;
  4414  001498  929F               	bcf	3999,1,c	;volatile
  4415  00149A  0012               	return		;funcret
  4416  00149C                     __end_of_INTERRUPT_Initialize:
  4417                           	opt stack 0
  4418                           tosu	equ	0xFFF
  4419                           tosh	equ	0xFFE
  4420                           tosl	equ	0xFFD
  4421                           pclath	equ	0xFFA
  4422                           tblptru	equ	0xFF8
  4423                           tblptrh	equ	0xFF7
  4424                           tblptrl	equ	0xFF6
  4425                           tablat	equ	0xFF5
  4426                           prodh	equ	0xFF4
  4427                           prodl	equ	0xFF3
  4428                           intcon	equ	0xFF2
  4429                           postinc0	equ	0xFEE
  4430                           wreg	equ	0xFE8
  4431                           indf2	equ	0xFDF
  4432                           postinc2	equ	0xFDE
  4433                           postdec2	equ	0xFDD
  4434                           plusw2	equ	0xFDB
  4435                           fsr2h	equ	0xFDA
  4436                           fsr2l	equ	0xFD9
  4437                           status	equ	0xFD8
  4438                           
  4439 ;; *************** function _ComStart *****************
  4440 ;; Defined at:
  4441 ;;		line 12 in file "Communications.c"
  4442 ;; Parameters:    Size  Location     Type
  4443 ;;		None
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;		None
  4446 ;; Return value:  Size  Location     Type
  4447 ;;                  1    wreg      void 
  4448 ;; Registers used:
  4449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4450 ;; Tracked objects:
  4451 ;;		On entry : 0/0
  4452 ;;		On exit  : 0/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4455 ;;      Params:         0       0       0       0       0       0       0
  4456 ;;      Locals:         0       0       0       0       0       0       0
  4457 ;;      Temps:          0       0       0       0       0       0       0
  4458 ;;      Totals:         0       0       0       0       0       0       0
  4459 ;;Total ram usage:        0 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; Hardware stack levels required when called:    7
  4462 ;; This function calls:
  4463 ;;		_EUSART1_Initialize
  4464 ;;		_begin
  4465 ;; This function is called by:
  4466 ;;		_Start
  4467 ;; This function uses a non-reentrant model
  4468 ;;
  4469                           
  4470                           	psect	text24
  4471  0010F0                     __ptext24:
  4472                           	opt stack 0
  4473  0010F0                     _ComStart:
  4474                           	opt stack 22
  4475                           
  4476                           ;Communications.c: 13: EUSART1_Initialize();
  4477                           
  4478                           ;incstack = 0
  4479  0010F0  EC1A  F009         	call	_EUSART1_Initialize	;wreg free
  4480                           
  4481                           ;Communications.c: 14: begin(receiveArray, sizeof (receiveArray), 8, 0, Send_put, Receiv
      +                          e_get, Receive_available, Receive_peek);
  4482  0010F4  0E75               	movlw	low _receiveArray
  4483  0010F6  0100               	movlb	0	; () banked
  4484  0010F8  6F83               	movwf	begin@ptr& (0+255),b
  4485  0010FA  0E00               	movlw	high _receiveArray
  4486  0010FC  0100               	movlb	0	; () banked
  4487  0010FE  6F84               	movwf	(begin@ptr+1)& (0+255),b
  4488  001100  0E0A               	movlw	10
  4489  001102  0100               	movlb	0	; () banked
  4490  001104  6F85               	movwf	begin@maxSize& (0+255),b
  4491  001106  0E08               	movlw	8
  4492  001108  0100               	movlb	0	; () banked
  4493  00110A  6F86               	movwf	begin@givenAddress& (0+255),b
  4494  00110C  0E00               	movlw	0
  4495  00110E  0100               	movlb	0	; () banked
  4496  001110  6F87               	movwf	begin@error& (0+255),b
  4497  001112  0E78               	movlw	low _Send_put
  4498  001114  0100               	movlb	0	; () banked
  4499  001116  6F88               	movwf	begin@stufftosend& (0+255),b
  4500  001118  0E12               	movlw	high _Send_put
  4501  00111A  0100               	movlb	0	; () banked
  4502  00111C  6F89               	movwf	(begin@stufftosend+1)& (0+255),b
  4503  00111E  0E08               	movlw	low _Receive_get
  4504  001120  0100               	movlb	0	; () banked
  4505  001122  6F8A               	movwf	begin@stufftoreceive& (0+255),b
  4506  001124  0E15               	movlw	high _Receive_get
  4507  001126  0100               	movlb	0	; () banked
  4508  001128  6F8B               	movwf	(begin@stufftoreceive+1)& (0+255),b
  4509  00112A  0EB2               	movlw	low _Receive_available
  4510  00112C  0100               	movlb	0	; () banked
  4511  00112E  6F8C               	movwf	begin@stuffavailable& (0+255),b
  4512  001130  0E14               	movlw	high _Receive_available
  4513  001132  0100               	movlb	0	; () banked
  4514  001134  6F8D               	movwf	(begin@stuffavailable+1)& (0+255),b
  4515  001136  0E00               	movlw	0
  4516  001138  0100               	movlb	0	; () banked
  4517  00113A  6F8E               	movwf	begin@stuffpeek& (0+255),b
  4518  00113C  0E00               	movlw	0
  4519  00113E  0100               	movlb	0	; () banked
  4520  001140  6F8F               	movwf	(begin@stuffpeek+1)& (0+255),b
  4521  001142  ECA4  F008         	call	_begin	;wreg free
  4522  001146  0012               	return		;funcret
  4523  001148                     __end_of_ComStart:
  4524                           	opt stack 0
  4525                           tosu	equ	0xFFF
  4526                           tosh	equ	0xFFE
  4527                           tosl	equ	0xFFD
  4528                           pclath	equ	0xFFA
  4529                           tblptru	equ	0xFF8
  4530                           tblptrh	equ	0xFF7
  4531                           tblptrl	equ	0xFF6
  4532                           tablat	equ	0xFF5
  4533                           prodh	equ	0xFF4
  4534                           prodl	equ	0xFF3
  4535                           intcon	equ	0xFF2
  4536                           postinc0	equ	0xFEE
  4537                           wreg	equ	0xFE8
  4538                           indf2	equ	0xFDF
  4539                           postinc2	equ	0xFDE
  4540                           postdec2	equ	0xFDD
  4541                           plusw2	equ	0xFDB
  4542                           fsr2h	equ	0xFDA
  4543                           fsr2l	equ	0xFD9
  4544                           status	equ	0xFD8
  4545                           
  4546 ;; *************** function _begin *****************
  4547 ;; Defined at:
  4548 ;;		line 73 in file "FastTransfer.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;  ptr             2    4[BANK0 ] PTR volatile int 
  4551 ;;		 -> receiveArray(10), 
  4552 ;;  maxSize         1    6[BANK0 ] unsigned char 
  4553 ;;  givenAddress    1    7[BANK0 ] unsigned char 
  4554 ;;  error           1    8[BANK0 ] unsigned char 
  4555 ;;  stufftosend     2    9[BANK0 ] PTR FTN(unsigned char ,)
  4556 ;;		 -> Send_put(1), 
  4557 ;;  stufftorecei    2   11[BANK0 ] PTR FTN()unsigned char 
  4558 ;;		 -> Receive_get(1), 
  4559 ;;  stuffavailab    2   13[BANK0 ] PTR FTN()int 
  4560 ;;		 -> Receive_available(2), 
  4561 ;;  stuffpeek       2   15[BANK0 ] PTR FTN()unsigned char 
  4562 ;;		 -> Receive_peek(1), 
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;		None
  4565 ;; Return value:  Size  Location     Type
  4566 ;;                  1    wreg      void 
  4567 ;; Registers used:
  4568 ;;		wreg, status,2, status,0, cstack
  4569 ;; Tracked objects:
  4570 ;;		On entry : 0/0
  4571 ;;		On exit  : 0/0
  4572 ;;		Unchanged: 0/0
  4573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4574 ;;      Params:         0      13       0       0       0       0       0
  4575 ;;      Locals:         0       0       0       0       0       0       0
  4576 ;;      Temps:          0       0       0       0       0       0       0
  4577 ;;      Totals:         0      13       0       0       0       0       0
  4578 ;;Total ram usage:       13 bytes
  4579 ;; Hardware stack levels used:    1
  4580 ;; Hardware stack levels required when called:    5
  4581 ;; This function calls:
  4582 ;;		___awdiv
  4583 ;; This function is called by:
  4584 ;;		_ComStart
  4585 ;; This function uses a non-reentrant model
  4586 ;;
  4587                           
  4588                           	psect	text25
  4589  001148                     __ptext25:
  4590                           	opt stack 0
  4591  001148                     _begin:
  4592                           	opt stack 23
  4593                           
  4594                           ;FastTransfer.c: 74: receiveArrayAddress = ptr;
  4595                           
  4596                           ;incstack = 0
  4597  001148  C083  F00B         	movff	begin@ptr,_receiveArrayAddress
  4598  00114C  C084  F00C         	movff	begin@ptr+1,_receiveArrayAddress+1
  4599                           
  4600                           ;FastTransfer.c: 75: moduleAddress = givenAddress;
  4601  001150  C086  F01E         	movff	begin@givenAddress,_moduleAddress
  4602                           
  4603                           ;FastTransfer.c: 76: serial_write = stufftosend;
  4604  001154  C088  F015         	movff	begin@stufftosend,_serial_write
  4605  001158  C089  F016         	movff	begin@stufftosend+1,_serial_write+1
  4606                           
  4607                           ;FastTransfer.c: 77: serial_available = stuffavailable;
  4608  00115C  C08C  F00F         	movff	begin@stuffavailable,_serial_available
  4609  001160  C08D  F010         	movff	begin@stuffavailable+1,_serial_available+1
  4610                           
  4611                           ;FastTransfer.c: 78: serial_peek = stuffpeek;
  4612  001164  C08E  F011         	movff	begin@stuffpeek,_serial_peek
  4613  001168  C08F  F012         	movff	begin@stuffpeek+1,_serial_peek+1
  4614                           
  4615                           ;FastTransfer.c: 79: serial_read = stufftoreceive;
  4616  00116C  C08A  F013         	movff	begin@stufftoreceive,_serial_read
  4617  001170  C08B  F014         	movff	begin@stufftoreceive+1,_serial_read+1
  4618                           
  4619                           ;FastTransfer.c: 80: maxDataAddress = maxSize / 2;
  4620  001174  C085  F03D         	movff	begin@maxSize,___awdiv@dividend
  4621  001178  6A3E               	clrf	___awdiv@dividend+1,c
  4622  00117A  0E00               	movlw	0
  4623  00117C  6E40               	movwf	___awdiv@divisor+1,c
  4624  00117E  0E02               	movlw	2
  4625  001180  6E3F               	movwf	___awdiv@divisor,c
  4626  001182  EC43  F007         	call	___awdiv	;wreg free
  4627  001186  503D               	movf	?___awdiv,w,c
  4628  001188  6E1D               	movwf	_maxDataAddress,c
  4629                           
  4630                           ;FastTransfer.c: 81: sendStructAddress = (unsigned char*) & ring_buffer;
  4631  00118A  0E00               	movlw	low _ring_buffer
  4632  00118C  6E0D               	movwf	_sendStructAddress,c
  4633  00118E  0E01               	movlw	high _ring_buffer
  4634  001190  6E0E               	movwf	_sendStructAddress+1,c
  4635                           
  4636                           ;FastTransfer.c: 82: AKNAKsend = error;
  4637  001192  C087  F019         	movff	begin@error,_AKNAKsend
  4638                           
  4639                           ;FastTransfer.c: 83: alignErrorCounter = 0;
  4640  001196  0E00               	movlw	0
  4641  001198  6E04               	movwf	_alignErrorCounter+1,c
  4642  00119A  0E00               	movlw	0
  4643  00119C  6E03               	movwf	_alignErrorCounter,c
  4644  00119E  0012               	return		;funcret
  4645  0011A0                     __end_of_begin:
  4646                           	opt stack 0
  4647                           tosu	equ	0xFFF
  4648                           tosh	equ	0xFFE
  4649                           tosl	equ	0xFFD
  4650                           pclath	equ	0xFFA
  4651                           tblptru	equ	0xFF8
  4652                           tblptrh	equ	0xFF7
  4653                           tblptrl	equ	0xFF6
  4654                           tablat	equ	0xFF5
  4655                           prodh	equ	0xFF4
  4656                           prodl	equ	0xFF3
  4657                           intcon	equ	0xFF2
  4658                           postinc0	equ	0xFEE
  4659                           wreg	equ	0xFE8
  4660                           indf2	equ	0xFDF
  4661                           postinc2	equ	0xFDE
  4662                           postdec2	equ	0xFDD
  4663                           plusw2	equ	0xFDB
  4664                           fsr2h	equ	0xFDA
  4665                           fsr2l	equ	0xFD9
  4666                           status	equ	0xFD8
  4667                           
  4668 ;; *************** function ___awdiv *****************
  4669 ;; Defined at:
  4670 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  4671 ;; Parameters:    Size  Location     Type
  4672 ;;  dividend        2   26[COMRAM] int 
  4673 ;;  divisor         2   28[COMRAM] int 
  4674 ;; Auto vars:     Size  Location     Type
  4675 ;;  quotient        2    2[BANK0 ] int 
  4676 ;;  sign            1    1[BANK0 ] unsigned char 
  4677 ;;  counter         1    0[BANK0 ] unsigned char 
  4678 ;; Return value:  Size  Location     Type
  4679 ;;                  2   26[COMRAM] int 
  4680 ;; Registers used:
  4681 ;;		wreg, status,2, status,0
  4682 ;; Tracked objects:
  4683 ;;		On entry : 0/0
  4684 ;;		On exit  : 0/0
  4685 ;;		Unchanged: 0/0
  4686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4687 ;;      Params:         4       0       0       0       0       0       0
  4688 ;;      Locals:         0       4       0       0       0       0       0
  4689 ;;      Temps:          0       0       0       0       0       0       0
  4690 ;;      Totals:         4       4       0       0       0       0       0
  4691 ;;Total ram usage:        8 bytes
  4692 ;; Hardware stack levels used:    1
  4693 ;; Hardware stack levels required when called:    4
  4694 ;; This function calls:
  4695 ;;		Nothing
  4696 ;; This function is called by:
  4697 ;;		_begin
  4698 ;; This function uses a non-reentrant model
  4699 ;;
  4700                           
  4701                           	psect	text26
  4702  000E86                     __ptext26:
  4703                           	opt stack 0
  4704  000E86                     ___awdiv:
  4705                           	opt stack 23
  4706                           
  4707                           ;incstack = 0
  4708  000E86  0E00               	movlw	0
  4709  000E88  0100               	movlb	0	; () banked
  4710  000E8A  6F80               	movwf	___awdiv@sign& (0+255),b
  4711                           
  4712                           ; BSR set to: 0
  4713  000E8C  AE40               	btfss	___awdiv@divisor+1,7,c
  4714  000E8E  D007               	goto	l2476
  4715                           
  4716                           ; BSR set to: 0
  4717  000E90  6C3F               	negf	___awdiv@divisor,c
  4718  000E92  1E40               	comf	___awdiv@divisor+1,f,c
  4719  000E94  B0D8               	btfsc	status,0,c
  4720  000E96  2A40               	incf	___awdiv@divisor+1,f,c
  4721                           
  4722                           ; BSR set to: 0
  4723  000E98  0E01               	movlw	1
  4724  000E9A  0100               	movlb	0	; () banked
  4725  000E9C  6F80               	movwf	___awdiv@sign& (0+255),b
  4726  000E9E                     l2476:
  4727                           
  4728                           ; BSR set to: 0
  4729  000E9E  AE3E               	btfss	___awdiv@dividend+1,7,c
  4730  000EA0  D007               	goto	l2482
  4731                           
  4732                           ; BSR set to: 0
  4733  000EA2  6C3D               	negf	___awdiv@dividend,c
  4734  000EA4  1E3E               	comf	___awdiv@dividend+1,f,c
  4735  000EA6  B0D8               	btfsc	status,0,c
  4736  000EA8  2A3E               	incf	___awdiv@dividend+1,f,c
  4737                           
  4738                           ; BSR set to: 0
  4739  000EAA  0E01               	movlw	1
  4740  000EAC  0100               	movlb	0	; () banked
  4741  000EAE  1B80               	xorwf	___awdiv@sign& (0+255),f,b
  4742  000EB0                     l2482:
  4743                           
  4744                           ; BSR set to: 0
  4745  000EB0  0E00               	movlw	0
  4746  000EB2  0100               	movlb	0	; () banked
  4747  000EB4  6F82               	movwf	(___awdiv@quotient+1)& (0+255),b
  4748  000EB6  0E00               	movlw	0
  4749  000EB8  6F81               	movwf	___awdiv@quotient& (0+255),b
  4750                           
  4751                           ; BSR set to: 0
  4752  000EBA  503F               	movf	___awdiv@divisor,w,c
  4753  000EBC  1040               	iorwf	___awdiv@divisor+1,w,c
  4754  000EBE  B4D8               	btfsc	status,2,c
  4755  000EC0  D021               	goto	l2504
  4756                           
  4757                           ; BSR set to: 0
  4758  000EC2  0E01               	movlw	1
  4759  000EC4  0100               	movlb	0	; () banked
  4760  000EC6  6F7F               	movwf	___awdiv@counter& (0+255),b
  4761  000EC8  D005               	goto	l2490
  4762  000ECA                     l2488:
  4763                           
  4764                           ; BSR set to: 0
  4765  000ECA  90D8               	bcf	status,0,c
  4766  000ECC  363F               	rlcf	___awdiv@divisor,f,c
  4767  000ECE  3640               	rlcf	___awdiv@divisor+1,f,c
  4768  000ED0  0100               	movlb	0	; () banked
  4769  000ED2  2B7F               	incf	___awdiv@counter& (0+255),f,b
  4770  000ED4                     l2490:
  4771                           
  4772                           ; BSR set to: 0
  4773  000ED4  AE40               	btfss	___awdiv@divisor+1,7,c
  4774  000ED6  D7F9               	goto	l2488
  4775  000ED8                     l2492:
  4776                           
  4777                           ; BSR set to: 0
  4778  000ED8  0100               	movlb	0	; () banked
  4779  000EDA  90D8               	bcf	status,0,c
  4780  000EDC  3781               	rlcf	___awdiv@quotient& (0+255),f,b
  4781  000EDE  3782               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4782                           
  4783                           ; BSR set to: 0
  4784  000EE0  503F               	movf	___awdiv@divisor,w,c
  4785  000EE2  5C3D               	subwf	___awdiv@dividend,w,c
  4786  000EE4  5040               	movf	___awdiv@divisor+1,w,c
  4787  000EE6  583E               	subwfb	___awdiv@dividend+1,w,c
  4788  000EE8  A0D8               	btfss	status,0,c
  4789  000EEA  D006               	goto	l2500
  4790                           
  4791                           ; BSR set to: 0
  4792  000EEC  503F               	movf	___awdiv@divisor,w,c
  4793  000EEE  5E3D               	subwf	___awdiv@dividend,f,c
  4794  000EF0  5040               	movf	___awdiv@divisor+1,w,c
  4795  000EF2  5A3E               	subwfb	___awdiv@dividend+1,f,c
  4796                           
  4797                           ; BSR set to: 0
  4798  000EF4  0100               	movlb	0	; () banked
  4799  000EF6  8181               	bsf	___awdiv@quotient& (0+255),0,b
  4800  000EF8                     l2500:
  4801                           
  4802                           ; BSR set to: 0
  4803  000EF8  90D8               	bcf	status,0,c
  4804  000EFA  3240               	rrcf	___awdiv@divisor+1,f,c
  4805  000EFC  323F               	rrcf	___awdiv@divisor,f,c
  4806                           
  4807                           ; BSR set to: 0
  4808  000EFE  0100               	movlb	0	; () banked
  4809  000F00  2F7F               	decfsz	___awdiv@counter& (0+255),f,b
  4810  000F02  D7EA               	goto	l2492
  4811  000F04                     l2504:
  4812                           
  4813                           ; BSR set to: 0
  4814  000F04  0100               	movlb	0	; () banked
  4815  000F06  5180               	movf	___awdiv@sign& (0+255),w,b
  4816  000F08  0100               	movlb	0	; () banked
  4817  000F0A  B4D8               	btfsc	status,2,c
  4818  000F0C  D005               	goto	l2508
  4819                           
  4820                           ; BSR set to: 0
  4821  000F0E  0100               	movlb	0	; () banked
  4822  000F10  6D81               	negf	___awdiv@quotient& (0+255),b
  4823  000F12  1F82               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4824  000F14  B0D8               	btfsc	status,0,c
  4825  000F16  2B82               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4826  000F18                     l2508:
  4827                           
  4828                           ; BSR set to: 0
  4829  000F18  C081  F03D         	movff	___awdiv@quotient,?___awdiv
  4830  000F1C  C082  F03E         	movff	___awdiv@quotient+1,?___awdiv+1
  4831  000F20  0012               	return	
  4832  000F22                     __end_of___awdiv:
  4833                           	opt stack 0
  4834                           tosu	equ	0xFFF
  4835                           tosh	equ	0xFFE
  4836                           tosl	equ	0xFFD
  4837                           pclath	equ	0xFFA
  4838                           tblptru	equ	0xFF8
  4839                           tblptrh	equ	0xFF7
  4840                           tblptrl	equ	0xFF6
  4841                           tablat	equ	0xFF5
  4842                           prodh	equ	0xFF4
  4843                           prodl	equ	0xFF3
  4844                           intcon	equ	0xFF2
  4845                           postinc0	equ	0xFEE
  4846                           wreg	equ	0xFE8
  4847                           indf2	equ	0xFDF
  4848                           postinc2	equ	0xFDE
  4849                           postdec2	equ	0xFDD
  4850                           plusw2	equ	0xFDB
  4851                           fsr2h	equ	0xFDA
  4852                           fsr2l	equ	0xFD9
  4853                           status	equ	0xFD8
  4854                           
  4855 ;; *************** function _EUSART1_Initialize *****************
  4856 ;; Defined at:
  4857 ;;		line 21 in file "UART.c"
  4858 ;; Parameters:    Size  Location     Type
  4859 ;;		None
  4860 ;; Auto vars:     Size  Location     Type
  4861 ;;		None
  4862 ;; Return value:  Size  Location     Type
  4863 ;;                  1    wreg      void 
  4864 ;; Registers used:
  4865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4866 ;; Tracked objects:
  4867 ;;		On entry : 0/0
  4868 ;;		On exit  : 0/0
  4869 ;;		Unchanged: 0/0
  4870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4871 ;;      Params:         0       0       0       0       0       0       0
  4872 ;;      Locals:         0       0       0       0       0       0       0
  4873 ;;      Temps:          0       0       0       0       0       0       0
  4874 ;;      Totals:         0       0       0       0       0       0       0
  4875 ;;Total ram usage:        0 bytes
  4876 ;; Hardware stack levels used:    1
  4877 ;; Hardware stack levels required when called:    6
  4878 ;; This function calls:
  4879 ;;		_UART_buff_init
  4880 ;; This function is called by:
  4881 ;;		_ComStart
  4882 ;; This function uses a non-reentrant model
  4883 ;;
  4884                           
  4885                           	psect	text27
  4886  001234                     __ptext27:
  4887                           	opt stack 0
  4888  001234                     _EUSART1_Initialize:
  4889                           	opt stack 22
  4890                           
  4891                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  4892                           
  4893                           ; BSR set to: 0
  4894                           ;incstack = 0
  4895  001234  9A9D               	bcf	3997,5,c	;volatile
  4896                           
  4897                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  4898  001236  989D               	bcf	3997,4,c	;volatile
  4899                           
  4900                           ;UART.c: 29: BAUD1CON = 0x48;
  4901  001238  0E48               	movlw	72
  4902  00123A  6EB8               	movwf	4024,c	;volatile
  4903                           
  4904                           ;UART.c: 32: RC1STA = 0x98;
  4905  00123C  0E98               	movlw	152
  4906  00123E  6EAB               	movwf	4011,c	;volatile
  4907                           
  4908                           ;UART.c: 35: TX1STA = 0x26;
  4909  001240  0E26               	movlw	38
  4910  001242  6EAC               	movwf	4012,c	;volatile
  4911                           
  4912                           ;UART.c: 38: SPBRG1 = (((16000000/38400)/4)-1);
  4913  001244  0E67               	movlw	103
  4914  001246  6EAF               	movwf	4015,c	;volatile
  4915                           
  4916                           ;UART.c: 41: SPBRGH1 = 0x00;
  4917  001248  0E00               	movlw	0
  4918  00124A  6EB0               	movwf	4016,c	;volatile
  4919                           
  4920                           ;UART.c: 44: TXREG1 = 0x00;
  4921  00124C  0E00               	movlw	0
  4922  00124E  6EAD               	movwf	4013,c	;volatile
  4923                           
  4924                           ;UART.c: 47: RCREG1 = 0x00;
  4925  001250  0E00               	movlw	0
  4926  001252  6EAE               	movwf	4014,c	;volatile
  4927                           
  4928                           ;UART.c: 49: UART_buff_init(&input_buffer);
  4929  001254  0E00               	movlw	low _input_buffer
  4930  001256  0100               	movlb	0	; () banked
  4931  001258  6F81               	movwf	UART_buff_init@_this& (0+255),b
  4932  00125A  0E03               	movlw	high _input_buffer
  4933  00125C  0100               	movlb	0	; () banked
  4934  00125E  6F82               	movwf	(UART_buff_init@_this+1)& (0+255),b
  4935  001260  EC17  F00A         	call	_UART_buff_init	;wreg free
  4936                           
  4937                           ;UART.c: 50: UART_buff_init(&output_buffer);
  4938  001264  0E00               	movlw	low _output_buffer
  4939  001266  0100               	movlb	0	; () banked
  4940  001268  6F81               	movwf	UART_buff_init@_this& (0+255),b
  4941  00126A  0E04               	movlw	high _output_buffer
  4942  00126C  0100               	movlb	0	; () banked
  4943  00126E  6F82               	movwf	(UART_buff_init@_this+1)& (0+255),b
  4944  001270  EC17  F00A         	call	_UART_buff_init	;wreg free
  4945                           
  4946                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  4947  001274  8A9D               	bsf	3997,5,c	;volatile
  4948  001276  0012               	return		;funcret
  4949  001278                     __end_of_EUSART1_Initialize:
  4950                           	opt stack 0
  4951                           tosu	equ	0xFFF
  4952                           tosh	equ	0xFFE
  4953                           tosl	equ	0xFFD
  4954                           pclath	equ	0xFFA
  4955                           tblptru	equ	0xFF8
  4956                           tblptrh	equ	0xFF7
  4957                           tblptrl	equ	0xFF6
  4958                           tablat	equ	0xFF5
  4959                           prodh	equ	0xFF4
  4960                           prodl	equ	0xFF3
  4961                           intcon	equ	0xFF2
  4962                           postinc0	equ	0xFEE
  4963                           wreg	equ	0xFE8
  4964                           indf2	equ	0xFDF
  4965                           postinc2	equ	0xFDE
  4966                           postdec2	equ	0xFDD
  4967                           plusw2	equ	0xFDB
  4968                           fsr2h	equ	0xFDA
  4969                           fsr2l	equ	0xFD9
  4970                           status	equ	0xFD8
  4971                           
  4972 ;; *************** function _UART_buff_init *****************
  4973 ;; Defined at:
  4974 ;;		line 56 in file "UART.c"
  4975 ;; Parameters:    Size  Location     Type
  4976 ;;  _this           2    2[BANK0 ] PTR struct UART_ring_buf
  4977 ;;		 -> output_buffer(206), input_buffer(206), 
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;		None
  4980 ;; Return value:  Size  Location     Type
  4981 ;;                  1    wreg      void 
  4982 ;; Registers used:
  4983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4984 ;; Tracked objects:
  4985 ;;		On entry : 0/0
  4986 ;;		On exit  : 0/0
  4987 ;;		Unchanged: 0/0
  4988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4989 ;;      Params:         0       2       0       0       0       0       0
  4990 ;;      Locals:         0       0       0       0       0       0       0
  4991 ;;      Temps:          0       0       0       0       0       0       0
  4992 ;;      Totals:         0       2       0       0       0       0       0
  4993 ;;Total ram usage:        2 bytes
  4994 ;; Hardware stack levels used:    1
  4995 ;; Hardware stack levels required when called:    5
  4996 ;; This function calls:
  4997 ;;		_memset
  4998 ;; This function is called by:
  4999 ;;		_EUSART1_Initialize
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           	psect	text28
  5004  00142E                     __ptext28:
  5005                           	opt stack 0
  5006  00142E                     _UART_buff_init:
  5007                           	opt stack 22
  5008                           
  5009                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  5010                           
  5011                           ;incstack = 0
  5012  00142E  C081  F03D         	movff	UART_buff_init@_this,memset@p1
  5013  001432  C082  F03E         	movff	UART_buff_init@_this+1,memset@p1+1
  5014  001436  0E00               	movlw	0
  5015  001438  6E40               	movwf	memset@c+1,c
  5016  00143A  0E00               	movlw	0
  5017  00143C  6E3F               	movwf	memset@c,c
  5018  00143E  0E00               	movlw	0
  5019  001440  6E42               	movwf	memset@n+1,c
  5020  001442  0ECE               	movlw	206
  5021  001444  6E41               	movwf	memset@n,c
  5022  001446  ECA2  F009         	call	_memset	;wreg free
  5023  00144A  0012               	return		;funcret
  5024  00144C                     __end_of_UART_buff_init:
  5025                           	opt stack 0
  5026                           tosu	equ	0xFFF
  5027                           tosh	equ	0xFFE
  5028                           tosl	equ	0xFFD
  5029                           pclath	equ	0xFFA
  5030                           tblptru	equ	0xFF8
  5031                           tblptrh	equ	0xFF7
  5032                           tblptrl	equ	0xFF6
  5033                           tablat	equ	0xFF5
  5034                           prodh	equ	0xFF4
  5035                           prodl	equ	0xFF3
  5036                           intcon	equ	0xFF2
  5037                           postinc0	equ	0xFEE
  5038                           wreg	equ	0xFE8
  5039                           indf2	equ	0xFDF
  5040                           postinc2	equ	0xFDE
  5041                           postdec2	equ	0xFDD
  5042                           plusw2	equ	0xFDB
  5043                           fsr2h	equ	0xFDA
  5044                           fsr2l	equ	0xFD9
  5045                           status	equ	0xFD8
  5046                           
  5047 ;; *************** function _memset *****************
  5048 ;; Defined at:
  5049 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  5050 ;; Parameters:    Size  Location     Type
  5051 ;;  p1              2   26[COMRAM] PTR void 
  5052 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  5053 ;;  c               2   28[COMRAM] int 
  5054 ;;  n               2   30[COMRAM] unsigned int 
  5055 ;; Auto vars:     Size  Location     Type
  5056 ;;  p               2    0[BANK0 ] PTR unsigned char 
  5057 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  5058 ;; Return value:  Size  Location     Type
  5059 ;;                  2   26[COMRAM] PTR void 
  5060 ;; Registers used:
  5061 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5062 ;; Tracked objects:
  5063 ;;		On entry : 0/0
  5064 ;;		On exit  : 0/0
  5065 ;;		Unchanged: 0/0
  5066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5067 ;;      Params:         6       0       0       0       0       0       0
  5068 ;;      Locals:         0       2       0       0       0       0       0
  5069 ;;      Temps:          0       0       0       0       0       0       0
  5070 ;;      Totals:         6       2       0       0       0       0       0
  5071 ;;Total ram usage:        8 bytes
  5072 ;; Hardware stack levels used:    1
  5073 ;; Hardware stack levels required when called:    4
  5074 ;; This function calls:
  5075 ;;		Nothing
  5076 ;; This function is called by:
  5077 ;;		_FastTransfer_buffer_flush
  5078 ;;		_UART_buff_init
  5079 ;;		_UART_buff_flush
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083                           	psect	text29
  5084  001344                     __ptext29:
  5085                           	opt stack 0
  5086  001344                     _memset:
  5087                           	opt stack 22
  5088                           
  5089                           ;incstack = 0
  5090  001344  C03D  F07F         	movff	memset@p1,memset@p
  5091  001348  C03E  F080         	movff	memset@p1+1,memset@p+1
  5092  00134C  D009               	goto	l2372
  5093  00134E                     l2368:
  5094  00134E  C07F  FFD9         	movff	memset@p,fsr2l
  5095  001352  C080  FFDA         	movff	memset@p+1,fsr2h
  5096  001356  C03F  FFDF         	movff	memset@c,indf2
  5097  00135A  0100               	movlb	0	; () banked
  5098  00135C  4B7F               	infsnz	memset@p& (0+255),f,b
  5099  00135E  2B80               	incf	(memset@p+1)& (0+255),f,b
  5100  001360                     l2372:
  5101  001360  0641               	decf	memset@n,f,c
  5102  001362  A0D8               	btfss	status,0,c
  5103  001364  0642               	decf	memset@n+1,f,c
  5104  001366  2841               	incf	memset@n,w,c
  5105  001368  E1F2               	bnz	l2368
  5106  00136A  2842               	incf	memset@n+1,w,c
  5107  00136C  B4D8               	btfsc	status,2,c
  5108  00136E  0012               	return	
  5109  001370  D7EE               	goto	l2368
  5110  001372                     __end_of_memset:
  5111                           	opt stack 0
  5112                           tosu	equ	0xFFF
  5113                           tosh	equ	0xFFE
  5114                           tosl	equ	0xFFD
  5115                           pclath	equ	0xFFA
  5116                           tblptru	equ	0xFF8
  5117                           tblptrh	equ	0xFF7
  5118                           tblptrl	equ	0xFF6
  5119                           tablat	equ	0xFF5
  5120                           prodh	equ	0xFF4
  5121                           prodl	equ	0xFF3
  5122                           intcon	equ	0xFF2
  5123                           postinc0	equ	0xFEE
  5124                           wreg	equ	0xFE8
  5125                           indf2	equ	0xFDF
  5126                           postinc2	equ	0xFDE
  5127                           postdec2	equ	0xFDD
  5128                           plusw2	equ	0xFDB
  5129                           fsr2h	equ	0xFDA
  5130                           fsr2l	equ	0xFD9
  5131                           status	equ	0xFD8
  5132                           
  5133 ;; *************** function _SetTime *****************
  5134 ;; Defined at:
  5135 ;;		line 98 in file "tmr0.c"
  5136 ;; Parameters:    Size  Location     Type
  5137 ;;		None
  5138 ;; Auto vars:     Size  Location     Type
  5139 ;;		None
  5140 ;; Return value:  Size  Location     Type
  5141 ;;                  1    wreg      void 
  5142 ;; Registers used:
  5143 ;;		wreg, status,2
  5144 ;; Tracked objects:
  5145 ;;		On entry : 0/0
  5146 ;;		On exit  : 0/0
  5147 ;;		Unchanged: 0/0
  5148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5149 ;;      Params:         0       0       0       0       0       0       0
  5150 ;;      Locals:         0       0       0       0       0       0       0
  5151 ;;      Temps:          0       0       0       0       0       0       0
  5152 ;;      Totals:         0       0       0       0       0       0       0
  5153 ;;Total ram usage:        0 bytes
  5154 ;; Hardware stack levels used:    1
  5155 ;; Hardware stack levels required when called:    4
  5156 ;; This function calls:
  5157 ;;		Nothing
  5158 ;; This function is called by:
  5159 ;;		_main
  5160 ;; This function uses a non-reentrant model
  5161 ;;
  5162                           
  5163                           	psect	text30
  5164  0014F4                     __ptext30:
  5165                           	opt stack 0
  5166  0014F4                     _SetTime:
  5167                           	opt stack 26
  5168                           
  5169                           ;tmr0.c: 99: time = 0;
  5170                           
  5171                           ;incstack = 0
  5172  0014F4  0E00               	movlw	0
  5173  0014F6  0100               	movlb	0	; () banked
  5174  0014F8  6F60               	movwf	_time& (0+255),b
  5175  0014FA  0E00               	movlw	0
  5176  0014FC  6F61               	movwf	(_time+1)& (0+255),b
  5177  0014FE  0E00               	movlw	0
  5178  001500  6F62               	movwf	(_time+2)& (0+255),b
  5179  001502  0E00               	movlw	0
  5180  001504  6F63               	movwf	(_time+3)& (0+255),b
  5181                           
  5182                           ; BSR set to: 0
  5183  001506  0012               	return		;funcret
  5184  001508                     __end_of_SetTime:
  5185                           	opt stack 0
  5186                           tosu	equ	0xFFF
  5187                           tosh	equ	0xFFE
  5188                           tosl	equ	0xFFD
  5189                           pclath	equ	0xFFA
  5190                           tblptru	equ	0xFF8
  5191                           tblptrh	equ	0xFF7
  5192                           tblptrl	equ	0xFF6
  5193                           tablat	equ	0xFF5
  5194                           prodh	equ	0xFF4
  5195                           prodl	equ	0xFF3
  5196                           intcon	equ	0xFF2
  5197                           postinc0	equ	0xFEE
  5198                           wreg	equ	0xFE8
  5199                           indf2	equ	0xFDF
  5200                           postinc2	equ	0xFDE
  5201                           postdec2	equ	0xFDD
  5202                           plusw2	equ	0xFDB
  5203                           fsr2h	equ	0xFDA
  5204                           fsr2l	equ	0xFD9
  5205                           status	equ	0xFD8
  5206                           
  5207 ;; *************** function _ReadFaults *****************
  5208 ;; Defined at:
  5209 ;;		line 9 in file "Function.c"
  5210 ;; Parameters:    Size  Location     Type
  5211 ;;		None
  5212 ;; Auto vars:     Size  Location     Type
  5213 ;;		None
  5214 ;; Return value:  Size  Location     Type
  5215 ;;                  1    wreg      void 
  5216 ;; Registers used:
  5217 ;;		wreg, status,2, status,0
  5218 ;; Tracked objects:
  5219 ;;		On entry : 0/0
  5220 ;;		On exit  : 0/0
  5221 ;;		Unchanged: 0/0
  5222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5223 ;;      Params:         0       0       0       0       0       0       0
  5224 ;;      Locals:         0       0       0       0       0       0       0
  5225 ;;      Temps:          1       0       0       0       0       0       0
  5226 ;;      Totals:         1       0       0       0       0       0       0
  5227 ;;Total ram usage:        1 bytes
  5228 ;; Hardware stack levels used:    1
  5229 ;; Hardware stack levels required when called:    4
  5230 ;; This function calls:
  5231 ;;		Nothing
  5232 ;; This function is called by:
  5233 ;;		_main
  5234 ;; This function uses a non-reentrant model
  5235 ;;
  5236                           
  5237                           	psect	text31
  5238  000C2E                     __ptext31:
  5239                           	opt stack 0
  5240  000C2E                     _ReadFaults:
  5241                           	opt stack 26
  5242                           
  5243                           ;Function.c: 10: ByteHigh = ByteHigh | (PORTCbits.RC5 << 0);
  5244                           
  5245                           ; BSR set to: 0
  5246                           ;incstack = 0
  5247  000C2E  AA82               	btfss	3970,5,c	;volatile
  5248  000C30  D002               	goto	u830
  5249  000C32  0E01               	movlw	1
  5250  000C34  D001               	goto	u836
  5251  000C36                     u830:
  5252  000C36  0E00               	movlw	0
  5253  000C38                     u836:
  5254  000C38  101A               	iorwf	_ByteHigh,w,c
  5255  000C3A  6E1A               	movwf	_ByteHigh,c
  5256                           
  5257                           ;Function.c: 11: ByteHigh = ByteHigh | (PORTCbits.RC4 << 1);
  5258  000C3C  A882               	btfss	3970,4,c	;volatile
  5259  000C3E  D003               	goto	u840
  5260  000C40  6A3D               	clrf	??_ReadFaults& (0+255),c
  5261  000C42  2A3D               	incf	??_ReadFaults& (0+255),f,c
  5262  000C44  D001               	goto	u848
  5263  000C46                     u840:
  5264  000C46  6A3D               	clrf	??_ReadFaults& (0+255),c
  5265  000C48                     u848:
  5266  000C48  90D8               	bcf	status,0,c
  5267  000C4A  343D               	rlcf	??_ReadFaults,w,c
  5268  000C4C  101A               	iorwf	_ByteHigh,w,c
  5269  000C4E  6E1A               	movwf	_ByteHigh,c
  5270                           
  5271                           ;Function.c: 12: ByteHigh = ByteHigh | (PORTDbits.RD3 << 2);
  5272  000C50  A683               	btfss	3971,3,c	;volatile
  5273  000C52  D003               	goto	u850
  5274  000C54  6A3D               	clrf	??_ReadFaults& (0+255),c
  5275  000C56  2A3D               	incf	??_ReadFaults& (0+255),f,c
  5276  000C58  D001               	goto	u858
  5277  000C5A                     u850:
  5278  000C5A  6A3D               	clrf	??_ReadFaults& (0+255),c
  5279  000C5C                     u858:
  5280  000C5C  90D8               	bcf	status,0,c
  5281  000C5E  363D               	rlcf	??_ReadFaults,f,c
  5282  000C60  90D8               	bcf	status,0,c
  5283  000C62  343D               	rlcf	??_ReadFaults,w,c
  5284  000C64  101A               	iorwf	_ByteHigh,w,c
  5285  000C66  6E1A               	movwf	_ByteHigh,c
  5286                           
  5287                           ;Function.c: 13: ByteHigh = ByteHigh | (PORTDbits.RD2 << 3);
  5288  000C68  A483               	btfss	3971,2,c	;volatile
  5289  000C6A  D003               	goto	u860
  5290  000C6C  6A3D               	clrf	??_ReadFaults& (0+255),c
  5291  000C6E  2A3D               	incf	??_ReadFaults& (0+255),f,c
  5292  000C70  D001               	goto	u868
  5293  000C72                     u860:
  5294  000C72  6A3D               	clrf	??_ReadFaults& (0+255),c
  5295  000C74                     u868:
  5296  000C74  90D8               	bcf	status,0,c
  5297  000C76  363D               	rlcf	??_ReadFaults,f,c
  5298  000C78  90D8               	bcf	status,0,c
  5299  000C7A  363D               	rlcf	??_ReadFaults,f,c
  5300  000C7C  90D8               	bcf	status,0,c
  5301  000C7E  343D               	rlcf	??_ReadFaults,w,c
  5302  000C80  101A               	iorwf	_ByteHigh,w,c
  5303  000C82  6E1A               	movwf	_ByteHigh,c
  5304                           
  5305                           ;Function.c: 14: ByteHigh = ByteHigh | (PORTDbits.RD1 << 4);
  5306  000C84  A283               	btfss	3971,1,c	;volatile
  5307  000C86  D003               	goto	u870
  5308  000C88  6A3D               	clrf	??_ReadFaults& (0+255),c
  5309  000C8A  2A3D               	incf	??_ReadFaults& (0+255),f,c
  5310  000C8C  D001               	goto	u878
  5311  000C8E                     u870:
  5312  000C8E  6A3D               	clrf	??_ReadFaults& (0+255),c
  5313  000C90                     u878:
  5314  000C90  383D               	swapf	??_ReadFaults,w,c
  5315  000C92  0BF0               	andlw	240
  5316  000C94  101A               	iorwf	_ByteHigh,w,c
  5317  000C96  6E1A               	movwf	_ByteHigh,c
  5318                           
  5319                           ;Function.c: 15: ByteHigh = ByteHigh | (PORTDbits.RD0 << 5);
  5320  000C98  A083               	btfss	3971,0,c	;volatile
  5321  000C9A  D003               	goto	u880
  5322  000C9C  0E20               	movlw	32
  5323  000C9E  6E3D               	movwf	??_ReadFaults& (0+255),c
  5324  000CA0  D001               	goto	u895
  5325  000CA2                     u880:
  5326  000CA2  6A3D               	clrf	??_ReadFaults& (0+255),c
  5327  000CA4                     u895:
  5328  000CA4  503D               	movf	??_ReadFaults,w,c
  5329  000CA6  101A               	iorwf	_ByteHigh,w,c
  5330  000CA8  6E1A               	movwf	_ByteHigh,c
  5331                           
  5332                           ;Function.c: 16: ByteHigh = ByteHigh | (PORTCbits.RC3 << 6);
  5333  000CAA  A682               	btfss	3970,3,c	;volatile
  5334  000CAC  D003               	goto	u900
  5335  000CAE  0E40               	movlw	64
  5336  000CB0  6E3D               	movwf	??_ReadFaults& (0+255),c
  5337  000CB2  D001               	goto	u915
  5338  000CB4                     u900:
  5339  000CB4  6A3D               	clrf	??_ReadFaults& (0+255),c
  5340  000CB6                     u915:
  5341  000CB6  503D               	movf	??_ReadFaults,w,c
  5342  000CB8  101A               	iorwf	_ByteHigh,w,c
  5343  000CBA  6E1A               	movwf	_ByteHigh,c
  5344                           
  5345                           ;Function.c: 17: ByteHigh = ByteHigh | (PORTCbits.RC2 << 7);
  5346  000CBC  A482               	btfss	3970,2,c	;volatile
  5347  000CBE  D003               	goto	u920
  5348  000CC0  0E80               	movlw	128
  5349  000CC2  6E3D               	movwf	??_ReadFaults& (0+255),c
  5350  000CC4  D001               	goto	u935
  5351  000CC6                     u920:
  5352  000CC6  6A3D               	clrf	??_ReadFaults& (0+255),c
  5353  000CC8                     u935:
  5354  000CC8  503D               	movf	??_ReadFaults,w,c
  5355  000CCA  101A               	iorwf	_ByteHigh,w,c
  5356  000CCC  6E1A               	movwf	_ByteHigh,c
  5357                           
  5358                           ;Function.c: 18: ByteLow = ByteLow | (PORTCbits.RC1 << 0);
  5359  000CCE  A282               	btfss	3970,1,c	;volatile
  5360  000CD0  D002               	goto	u940
  5361  000CD2  0E01               	movlw	1
  5362  000CD4  D001               	goto	u946
  5363  000CD6                     u940:
  5364  000CD6  0E00               	movlw	0
  5365  000CD8                     u946:
  5366  000CD8  101B               	iorwf	_ByteLow,w,c
  5367  000CDA  6E1B               	movwf	_ByteLow,c
  5368                           
  5369                           ;Function.c: 19: ByteLow = ByteLow | (PORTAbits.RA7 << 1);
  5370  000CDC  AE80               	btfss	3968,7,c	;volatile
  5371  000CDE  D003               	goto	u950
  5372  000CE0  6A3D               	clrf	??_ReadFaults& (0+255),c
  5373  000CE2  2A3D               	incf	??_ReadFaults& (0+255),f,c
  5374  000CE4  D001               	goto	u958
  5375  000CE6                     u950:
  5376  000CE6  6A3D               	clrf	??_ReadFaults& (0+255),c
  5377  000CE8                     u958:
  5378  000CE8  90D8               	bcf	status,0,c
  5379  000CEA  343D               	rlcf	??_ReadFaults,w,c
  5380  000CEC  101B               	iorwf	_ByteLow,w,c
  5381  000CEE  6E1B               	movwf	_ByteLow,c
  5382                           
  5383                           ;Function.c: 20: ByteLow = ByteLow | (PORTCbits.RC0 << 2);
  5384  000CF0  A082               	btfss	3970,0,c	;volatile
  5385  000CF2  D003               	goto	u960
  5386  000CF4  6A3D               	clrf	??_ReadFaults& (0+255),c
  5387  000CF6  2A3D               	incf	??_ReadFaults& (0+255),f,c
  5388  000CF8  D001               	goto	u968
  5389  000CFA                     u960:
  5390  000CFA  6A3D               	clrf	??_ReadFaults& (0+255),c
  5391  000CFC                     u968:
  5392  000CFC  90D8               	bcf	status,0,c
  5393  000CFE  363D               	rlcf	??_ReadFaults,f,c
  5394  000D00  90D8               	bcf	status,0,c
  5395  000D02  343D               	rlcf	??_ReadFaults,w,c
  5396  000D04  101B               	iorwf	_ByteLow,w,c
  5397  000D06  6E1B               	movwf	_ByteLow,c
  5398  000D08  0012               	return		;funcret
  5399  000D0A                     __end_of_ReadFaults:
  5400                           	opt stack 0
  5401                           tosu	equ	0xFFF
  5402                           tosh	equ	0xFFE
  5403                           tosl	equ	0xFFD
  5404                           pclath	equ	0xFFA
  5405                           tblptru	equ	0xFF8
  5406                           tblptrh	equ	0xFF7
  5407                           tblptrl	equ	0xFF6
  5408                           tablat	equ	0xFF5
  5409                           prodh	equ	0xFF4
  5410                           prodl	equ	0xFF3
  5411                           intcon	equ	0xFF2
  5412                           postinc0	equ	0xFEE
  5413                           wreg	equ	0xFE8
  5414                           indf2	equ	0xFDF
  5415                           postinc2	equ	0xFDE
  5416                           postdec2	equ	0xFDD
  5417                           plusw2	equ	0xFDB
  5418                           fsr2h	equ	0xFDA
  5419                           fsr2l	equ	0xFD9
  5420                           status	equ	0xFD8
  5421                           
  5422 ;; *************** function _GetTime *****************
  5423 ;; Defined at:
  5424 ;;		line 94 in file "tmr0.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;		None
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;		None
  5429 ;; Return value:  Size  Location     Type
  5430 ;;                  4   26[COMRAM] long 
  5431 ;; Registers used:
  5432 ;;		None
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5438 ;;      Params:         4       0       0       0       0       0       0
  5439 ;;      Locals:         0       0       0       0       0       0       0
  5440 ;;      Temps:          0       0       0       0       0       0       0
  5441 ;;      Totals:         4       0       0       0       0       0       0
  5442 ;;Total ram usage:        4 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; Hardware stack levels required when called:    4
  5445 ;; This function calls:
  5446 ;;		Nothing
  5447 ;; This function is called by:
  5448 ;;		_main
  5449 ;; This function uses a non-reentrant model
  5450 ;;
  5451                           
  5452                           	psect	text32
  5453  00151A                     __ptext32:
  5454                           	opt stack 0
  5455  00151A                     _GetTime:
  5456                           	opt stack 26
  5457                           
  5458                           ;tmr0.c: 95: return time;
  5459                           
  5460                           ;incstack = 0
  5461  00151A  C060  F03D         	movff	_time,?_GetTime
  5462  00151E  C061  F03E         	movff	_time+1,?_GetTime+1
  5463  001522  C062  F03F         	movff	_time+2,?_GetTime+2
  5464  001526  C063  F040         	movff	_time+3,?_GetTime+3
  5465  00152A  0012               	return		;funcret
  5466  00152C                     __end_of_GetTime:
  5467                           	opt stack 0
  5468                           tosu	equ	0xFFF
  5469                           tosh	equ	0xFFE
  5470                           tosl	equ	0xFFD
  5471                           pclath	equ	0xFFA
  5472                           tblptru	equ	0xFF8
  5473                           tblptrh	equ	0xFF7
  5474                           tblptrl	equ	0xFF6
  5475                           tablat	equ	0xFF5
  5476                           prodh	equ	0xFF4
  5477                           prodl	equ	0xFF3
  5478                           intcon	equ	0xFF2
  5479                           postinc0	equ	0xFEE
  5480                           wreg	equ	0xFE8
  5481                           indf2	equ	0xFDF
  5482                           postinc2	equ	0xFDE
  5483                           postdec2	equ	0xFDD
  5484                           plusw2	equ	0xFDB
  5485                           fsr2h	equ	0xFDA
  5486                           fsr2l	equ	0xFD9
  5487                           status	equ	0xFD8
  5488                           
  5489 ;; *************** function _INTERRUPT_InterruptManager *****************
  5490 ;; Defined at:
  5491 ;;		line 175 in file "Function.c"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;		None
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;		None
  5496 ;; Return value:  Size  Location     Type
  5497 ;;                  1    wreg      void 
  5498 ;; Registers used:
  5499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5505 ;;      Params:         0       0       0       0       0       0       0
  5506 ;;      Locals:         0       0       0       0       0       0       0
  5507 ;;      Temps:         14       0       0       0       0       0       0
  5508 ;;      Totals:        14       0       0       0       0       0       0
  5509 ;;Total ram usage:       14 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; Hardware stack levels required when called:    3
  5512 ;; This function calls:
  5513 ;;		_EUSART1_Receive_ISR
  5514 ;;		_EUSART1_Transmit_ISR
  5515 ;;		_TMR0_ISR
  5516 ;; This function is called by:
  5517 ;;		Interrupt level 2
  5518 ;; This function uses a non-reentrant model
  5519 ;;
  5520                           
  5521                           	psect	intcode
  5522  000008                     __pintcode:
  5523                           	opt stack 0
  5524  000008                     _INTERRUPT_InterruptManager:
  5525                           	opt stack 21
  5526                           
  5527                           ;incstack = 0
  5528  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5529  00000A  CFFA F02F          	movff	pclath,??_INTERRUPT_InterruptManager
  5530  00000E  CFFB F030          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  5531  000012  CFE9 F031          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  5532  000016  CFEA F032          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  5533  00001A  CFE1 F033          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  5534  00001E  CFE2 F034          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  5535  000022  CFD9 F035          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  5536  000026  CFDA F036          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  5537  00002A  CFF3 F037          	movff	prodl,??_INTERRUPT_InterruptManager+8
  5538  00002E  CFF4 F038          	movff	prodh,??_INTERRUPT_InterruptManager+9
  5539  000032  CFF6 F039          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  5540  000036  CFF7 F03A          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  5541  00003A  CFF8 F03B          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  5542  00003E  CFF5 F03C          	movff	tablat,??_INTERRUPT_InterruptManager+13
  5543                           
  5544                           ;Function.c: 178: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  5545  000042  BA9D               	btfsc	3997,5,c	;volatile
  5546  000044  AA9E               	btfss	3998,5,c	;volatile
  5547  000046  D003               	goto	i2l448
  5548                           
  5549                           ;Function.c: 179: {
  5550                           ;Function.c: 180: EUSART1_Receive_ISR();
  5551  000048  EC26  F00A         	call	_EUSART1_Receive_ISR	;wreg free
  5552                           
  5553                           ;Function.c: 181: }
  5554  00004C  D00B               	goto	i2l454
  5555  00004E                     i2l448:
  5556                           
  5557                           ;Function.c: 182: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  5558  00004E  B89D               	btfsc	3997,4,c	;volatile
  5559  000050  A89E               	btfss	3998,4,c	;volatile
  5560  000052  D003               	goto	i2l450
  5561                           
  5562                           ;Function.c: 183: {
  5563                           ;Function.c: 184: EUSART1_Transmit_ISR();
  5564  000054  EC72  F009         	call	_EUSART1_Transmit_ISR	;wreg free
  5565                           
  5566                           ;Function.c: 185: }
  5567  000058  D005               	goto	i2l454
  5568  00005A                     i2l450:
  5569                           
  5570                           ;Function.c: 186: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  5571  00005A  BAF2               	btfsc	intcon,5,c	;volatile
  5572  00005C  A4F2               	btfss	intcon,2,c	;volatile
  5573  00005E  D002               	goto	i2l454
  5574                           
  5575                           ;Function.c: 187: {
  5576                           ;Function.c: 188: TMR0_ISR();
  5577  000060  EC35  F00A         	call	_TMR0_ISR	;wreg free
  5578  000064                     i2l454:
  5579  000064  C03C  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  5580  000068  C03B  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  5581  00006C  C03A  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  5582  000070  C039  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  5583  000074  C038  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  5584  000078  C037  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  5585  00007C  C036  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  5586  000080  C035  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  5587  000084  C034  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  5588  000088  C033  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  5589  00008C  C032  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  5590  000090  C031  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  5591  000094  C030  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  5592  000098  C02F  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  5593  00009C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5594  00009E  0011               	retfie		f
  5595  0000A0                     __end_of_INTERRUPT_InterruptManager:
  5596                           	opt stack 0
  5597                           tosu	equ	0xFFF
  5598                           tosh	equ	0xFFE
  5599                           tosl	equ	0xFFD
  5600                           pclatu	equ	0xFFB
  5601                           pclath	equ	0xFFA
  5602                           tblptru	equ	0xFF8
  5603                           tblptrh	equ	0xFF7
  5604                           tblptrl	equ	0xFF6
  5605                           tablat	equ	0xFF5
  5606                           prodh	equ	0xFF4
  5607                           prodl	equ	0xFF3
  5608                           intcon	equ	0xFF2
  5609                           postinc0	equ	0xFEE
  5610                           fsr0h	equ	0xFEA
  5611                           fsr0l	equ	0xFE9
  5612                           wreg	equ	0xFE8
  5613                           fsr1h	equ	0xFE2
  5614                           fsr1l	equ	0xFE1
  5615                           indf2	equ	0xFDF
  5616                           postinc2	equ	0xFDE
  5617                           postdec2	equ	0xFDD
  5618                           plusw2	equ	0xFDB
  5619                           fsr2h	equ	0xFDA
  5620                           fsr2l	equ	0xFD9
  5621                           status	equ	0xFD8
  5622                           
  5623 ;; *************** function _TMR0_ISR *****************
  5624 ;; Defined at:
  5625 ;;		line 82 in file "tmr0.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;		None
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;		None
  5630 ;; Return value:  Size  Location     Type
  5631 ;;                  1    wreg      void 
  5632 ;; Registers used:
  5633 ;;		wreg, status,2, status,0
  5634 ;; Tracked objects:
  5635 ;;		On entry : 0/0
  5636 ;;		On exit  : 0/0
  5637 ;;		Unchanged: 0/0
  5638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5639 ;;      Params:         0       0       0       0       0       0       0
  5640 ;;      Locals:         0       0       0       0       0       0       0
  5641 ;;      Temps:          0       0       0       0       0       0       0
  5642 ;;      Totals:         0       0       0       0       0       0       0
  5643 ;;Total ram usage:        0 bytes
  5644 ;; Hardware stack levels used:    1
  5645 ;; This function calls:
  5646 ;;		Nothing
  5647 ;; This function is called by:
  5648 ;;		_INTERRUPT_InterruptManager
  5649 ;; This function uses a non-reentrant model
  5650 ;;
  5651                           
  5652                           	psect	text34
  5653  00146A                     __ptext34:
  5654                           	opt stack 0
  5655  00146A                     _TMR0_ISR:
  5656                           	opt stack 23
  5657                           
  5658                           ;tmr0.c: 85: TMR0H = timer0ReloadVal16bit >> 8;
  5659                           
  5660                           ;incstack = 0
  5661  00146A  5018               	movf	_timer0ReloadVal16bit+1,w,c	;volatile
  5662  00146C  6ED7               	movwf	4055,c	;volatile
  5663                           
  5664                           ;tmr0.c: 86: TMR0L = (uint8_t) timer0ReloadVal16bit;
  5665  00146E  C017  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
  5666                           
  5667                           ;tmr0.c: 88: time++;
  5668  001472  0E01               	movlw	1
  5669  001474  0100               	movlb	0	; () banked
  5670  001476  2760               	addwf	_time& (0+255),f,b
  5671  001478  0E00               	movlw	0
  5672  00147A  2361               	addwfc	(_time+1)& (0+255),f,b
  5673  00147C  2362               	addwfc	(_time+2)& (0+255),f,b
  5674  00147E  2363               	addwfc	(_time+3)& (0+255),f,b
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;tmr0.c: 91: INTCONbits.TMR0IF = 0;
  5678  001480  94F2               	bcf	intcon,2,c	;volatile
  5679                           
  5680                           ; BSR set to: 0
  5681  001482  0012               	return		;funcret
  5682  001484                     __end_of_TMR0_ISR:
  5683                           	opt stack 0
  5684                           tosu	equ	0xFFF
  5685                           tosh	equ	0xFFE
  5686                           tosl	equ	0xFFD
  5687                           pclatu	equ	0xFFB
  5688                           pclath	equ	0xFFA
  5689                           tblptru	equ	0xFF8
  5690                           tblptrh	equ	0xFF7
  5691                           tblptrl	equ	0xFF6
  5692                           tablat	equ	0xFF5
  5693                           prodh	equ	0xFF4
  5694                           prodl	equ	0xFF3
  5695                           intcon	equ	0xFF2
  5696                           postinc0	equ	0xFEE
  5697                           fsr0h	equ	0xFEA
  5698                           fsr0l	equ	0xFE9
  5699                           wreg	equ	0xFE8
  5700                           fsr1h	equ	0xFE2
  5701                           fsr1l	equ	0xFE1
  5702                           indf2	equ	0xFDF
  5703                           postinc2	equ	0xFDE
  5704                           postdec2	equ	0xFDD
  5705                           plusw2	equ	0xFDB
  5706                           fsr2h	equ	0xFDA
  5707                           fsr2l	equ	0xFD9
  5708                           status	equ	0xFD8
  5709                           
  5710 ;; *************** function _EUSART1_Transmit_ISR *****************
  5711 ;; Defined at:
  5712 ;;		line 150 in file "UART.c"
  5713 ;; Parameters:    Size  Location     Type
  5714 ;;		None
  5715 ;; Auto vars:     Size  Location     Type
  5716 ;;		None
  5717 ;; Return value:  Size  Location     Type
  5718 ;;                  1    wreg      void 
  5719 ;; Registers used:
  5720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5721 ;; Tracked objects:
  5722 ;;		On entry : 0/0
  5723 ;;		On exit  : 0/0
  5724 ;;		Unchanged: 0/0
  5725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5726 ;;      Params:         0       0       0       0       0       0       0
  5727 ;;      Locals:         0       0       0       0       0       0       0
  5728 ;;      Temps:          0       0       0       0       0       0       0
  5729 ;;      Totals:         0       0       0       0       0       0       0
  5730 ;;Total ram usage:        0 bytes
  5731 ;; Hardware stack levels used:    1
  5732 ;; Hardware stack levels required when called:    2
  5733 ;; This function calls:
  5734 ;;		i2_UART_buff_get
  5735 ;;		i2_UART_buff_size
  5736 ;; This function is called by:
  5737 ;;		_INTERRUPT_InterruptManager
  5738 ;; This function uses a non-reentrant model
  5739 ;;
  5740                           
  5741                           	psect	text35
  5742  0012E4                     __ptext35:
  5743                           	opt stack 0
  5744  0012E4                     _EUSART1_Transmit_ISR:
  5745                           	opt stack 21
  5746                           
  5747                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;incstack = 0
  5751  0012E4  0E00               	movlw	low _output_buffer
  5752  0012E6  6E23               	movwf	i2UART_buff_size@_this,c
  5753  0012E8  0E04               	movlw	high _output_buffer
  5754  0012EA  6E24               	movwf	i2UART_buff_size@_this+1,c
  5755  0012EC  EC6F  F00A         	call	i2_UART_buff_size	;wreg free
  5756  0012F0  BE24               	btfsc	?i2_UART_buff_size+1,7,c
  5757  0012F2  D00D               	goto	i2l2242
  5758  0012F4  5024               	movf	?i2_UART_buff_size+1,w,c
  5759  0012F6  E103               	bnz	i2u205_40
  5760  0012F8  0423               	decf	?i2_UART_buff_size,w,c
  5761  0012FA  A0D8               	btfss	status,0,c
  5762  0012FC  D008               	goto	i2l2242
  5763  0012FE                     i2u205_40:
  5764                           
  5765                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  5766  0012FE  0E00               	movlw	low _output_buffer
  5767  001300  6E29               	movwf	i2UART_buff_get@_this,c
  5768  001302  0E04               	movlw	high _output_buffer
  5769  001304  6E2A               	movwf	i2UART_buff_get@_this+1,c
  5770  001306  EC91  F007         	call	i2_UART_buff_get	;wreg free
  5771  00130A  6EAD               	movwf	4013,c	;volatile
  5772                           
  5773                           ;UART.c: 154: } else {
  5774  00130C  0012               	return	
  5775  00130E                     i2l2242:
  5776                           
  5777                           ;UART.c: 155: Transmit_stall = 1;
  5778  00130E  0E01               	movlw	1
  5779  001310  6E44               	movwf	_Transmit_stall,c
  5780                           
  5781                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  5782  001312  989D               	bcf	3997,4,c	;volatile
  5783  001314  0012               	return	
  5784  001316                     __end_of_EUSART1_Transmit_ISR:
  5785                           	opt stack 0
  5786                           tosu	equ	0xFFF
  5787                           tosh	equ	0xFFE
  5788                           tosl	equ	0xFFD
  5789                           pclatu	equ	0xFFB
  5790                           pclath	equ	0xFFA
  5791                           tblptru	equ	0xFF8
  5792                           tblptrh	equ	0xFF7
  5793                           tblptrl	equ	0xFF6
  5794                           tablat	equ	0xFF5
  5795                           prodh	equ	0xFF4
  5796                           prodl	equ	0xFF3
  5797                           intcon	equ	0xFF2
  5798                           postinc0	equ	0xFEE
  5799                           fsr0h	equ	0xFEA
  5800                           fsr0l	equ	0xFE9
  5801                           wreg	equ	0xFE8
  5802                           fsr1h	equ	0xFE2
  5803                           fsr1l	equ	0xFE1
  5804                           indf2	equ	0xFDF
  5805                           postinc2	equ	0xFDE
  5806                           postdec2	equ	0xFDD
  5807                           plusw2	equ	0xFDB
  5808                           fsr2h	equ	0xFDA
  5809                           fsr2l	equ	0xFD9
  5810                           status	equ	0xFD8
  5811                           
  5812 ;; *************** function i2_UART_buff_size *****************
  5813 ;; Defined at:
  5814 ;;		line 102 in file "UART.c"
  5815 ;; Parameters:    Size  Location     Type
  5816 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  5817 ;;		 -> output_buffer(206), input_buffer(206), 
  5818 ;; Auto vars:     Size  Location     Type
  5819 ;;		None
  5820 ;; Return value:  Size  Location     Type
  5821 ;;                  2    0[COMRAM] int 
  5822 ;; Registers used:
  5823 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5824 ;; Tracked objects:
  5825 ;;		On entry : 0/0
  5826 ;;		On exit  : 0/0
  5827 ;;		Unchanged: 0/0
  5828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5829 ;;      Params:         2       0       0       0       0       0       0
  5830 ;;      Locals:         0       0       0       0       0       0       0
  5831 ;;      Temps:          0       0       0       0       0       0       0
  5832 ;;      Totals:         2       0       0       0       0       0       0
  5833 ;;Total ram usage:        2 bytes
  5834 ;; Hardware stack levels used:    1
  5835 ;; This function calls:
  5836 ;;		Nothing
  5837 ;; This function is called by:
  5838 ;;		_EUSART1_Transmit_ISR
  5839 ;; This function uses a non-reentrant model
  5840 ;;
  5841                           
  5842                           	psect	text36
  5843  0014DE                     __ptext36:
  5844                           	opt stack 0
  5845  0014DE                     i2_UART_buff_size:
  5846                           	opt stack 22
  5847                           
  5848                           ;UART.c: 103: return (_this->count);
  5849                           
  5850                           ;incstack = 0
  5851  0014DE  EE20 F0CC          	lfsr	2,204
  5852  0014E2  5023               	movf	i2UART_buff_size@_this,w,c
  5853  0014E4  26D9               	addwf	fsr2l,f,c
  5854  0014E6  5024               	movf	i2UART_buff_size@_this+1,w,c
  5855  0014E8  22DA               	addwfc	fsr2h,f,c
  5856  0014EA  CFDE F023          	movff	postinc2,?i2_UART_buff_size
  5857  0014EE  CFDD F024          	movff	postdec2,?i2_UART_buff_size+1
  5858  0014F2  0012               	return	
  5859  0014F4                     __end_ofi2_UART_buff_size:
  5860                           	opt stack 0
  5861                           tosu	equ	0xFFF
  5862                           tosh	equ	0xFFE
  5863                           tosl	equ	0xFFD
  5864                           pclatu	equ	0xFFB
  5865                           pclath	equ	0xFFA
  5866                           tblptru	equ	0xFF8
  5867                           tblptrh	equ	0xFF7
  5868                           tblptrl	equ	0xFF6
  5869                           tablat	equ	0xFF5
  5870                           prodh	equ	0xFF4
  5871                           prodl	equ	0xFF3
  5872                           intcon	equ	0xFF2
  5873                           postinc0	equ	0xFEE
  5874                           fsr0h	equ	0xFEA
  5875                           fsr0l	equ	0xFE9
  5876                           wreg	equ	0xFE8
  5877                           fsr1h	equ	0xFE2
  5878                           fsr1l	equ	0xFE1
  5879                           indf2	equ	0xFDF
  5880                           postinc2	equ	0xFDE
  5881                           postdec2	equ	0xFDD
  5882                           plusw2	equ	0xFDB
  5883                           fsr2h	equ	0xFDA
  5884                           fsr2l	equ	0xFD9
  5885                           status	equ	0xFD8
  5886                           
  5887 ;; *************** function i2_UART_buff_get *****************
  5888 ;; Defined at:
  5889 ;;		line 81 in file "UART.c"
  5890 ;; Parameters:    Size  Location     Type
  5891 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  5892 ;;		 -> output_buffer(206), input_buffer(206), 
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  1    wreg      unsigned char 
  5897 ;; Registers used:
  5898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5904 ;;      Params:         2       0       0       0       0       0       0
  5905 ;;      Locals:         1       0       0       0       0       0       0
  5906 ;;      Temps:          2       0       0       0       0       0       0
  5907 ;;      Totals:         5       0       0       0       0       0       0
  5908 ;;Total ram usage:        5 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    1
  5911 ;; This function calls:
  5912 ;;		i2_UART_buff_modulo_inc
  5913 ;; This function is called by:
  5914 ;;		_EUSART1_Transmit_ISR
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           	psect	text37
  5919  000F22                     __ptext37:
  5920                           	opt stack 0
  5921  000F22                     i2_UART_buff_get:
  5922                           	opt stack 21
  5923                           
  5924                           ;UART.c: 82: unsigned char c;
  5925                           ;UART.c: 83: if (_this->count > 0) {
  5926                           
  5927                           ;incstack = 0
  5928  000F22  EE20 F0CC          	lfsr	2,204
  5929  000F26  5029               	movf	i2UART_buff_get@_this,w,c
  5930  000F28  26D9               	addwf	fsr2l,f,c
  5931  000F2A  502A               	movf	i2UART_buff_get@_this+1,w,c
  5932  000F2C  22DA               	addwfc	fsr2h,f,c
  5933  000F2E  0E01               	movlw	1
  5934  000F30  BEDB               	btfsc	plusw2,7,c
  5935  000F32  D03C               	goto	i2l2164
  5936  000F34  0E01               	movlw	1
  5937  000F36  50DB               	movf	plusw2,w,c
  5938  000F38  E103               	bnz	i2u197_40
  5939  000F3A  04DE               	decf	postinc2,w,c
  5940  000F3C  A0D8               	btfss	status,0,c
  5941  000F3E  D036               	goto	i2l2164
  5942  000F40                     i2u197_40:
  5943                           
  5944                           ;UART.c: 84: c = _this->buf[_this->tail];
  5945  000F40  EE20 F0CA          	lfsr	2,202
  5946  000F44  5029               	movf	i2UART_buff_get@_this,w,c
  5947  000F46  26D9               	addwf	fsr2l,f,c
  5948  000F48  502A               	movf	i2UART_buff_get@_this+1,w,c
  5949  000F4A  22DA               	addwfc	fsr2h,f,c
  5950  000F4C  CFDE F02B          	movff	postinc2,??i2_UART_buff_get
  5951  000F50  CFDD F02C          	movff	postdec2,??i2_UART_buff_get+1
  5952  000F54  502B               	movf	??i2_UART_buff_get,w,c
  5953  000F56  2429               	addwf	i2UART_buff_get@_this,w,c
  5954  000F58  6ED9               	movwf	fsr2l,c
  5955  000F5A  502C               	movf	??i2_UART_buff_get+1,w,c
  5956  000F5C  202A               	addwfc	i2UART_buff_get@_this+1,w,c
  5957  000F5E  6EDA               	movwf	fsr2h,c
  5958  000F60  50DF               	movf	indf2,w,c
  5959  000F62  6E2D               	movwf	i2UART_buff_get@c,c
  5960                           
  5961                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  5962  000F64  EE20 F0CA          	lfsr	2,202
  5963  000F68  5029               	movf	i2UART_buff_get@_this,w,c
  5964  000F6A  26D9               	addwf	fsr2l,f,c
  5965  000F6C  502A               	movf	i2UART_buff_get@_this+1,w,c
  5966  000F6E  22DA               	addwfc	fsr2h,f,c
  5967  000F70  CFDE F023          	movff	postinc2,i2UART_buff_modulo_inc@value
  5968  000F74  CFDD F024          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5969  000F78  0E00               	movlw	0
  5970  000F7A  6E26               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5971  000F7C  0EC8               	movlw	200
  5972  000F7E  6E25               	movwf	i2UART_buff_modulo_inc@modulus,c
  5973  000F80  ECE3  F009         	call	i2_UART_buff_modulo_inc	;wreg free
  5974  000F84  EE20 F0CA          	lfsr	2,202
  5975  000F88  5029               	movf	i2UART_buff_get@_this,w,c
  5976  000F8A  26D9               	addwf	fsr2l,f,c
  5977  000F8C  502A               	movf	i2UART_buff_get@_this+1,w,c
  5978  000F8E  22DA               	addwfc	fsr2h,f,c
  5979  000F90  C023  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5980  000F94  C024  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5981                           
  5982                           ;UART.c: 86: --_this->count;
  5983  000F98  EE20 F0CC          	lfsr	2,204
  5984  000F9C  5029               	movf	i2UART_buff_get@_this,w,c
  5985  000F9E  26D9               	addwf	fsr2l,f,c
  5986  000FA0  502A               	movf	i2UART_buff_get@_this+1,w,c
  5987  000FA2  22DA               	addwfc	fsr2h,f,c
  5988  000FA4  06DE               	decf	postinc2,f,c
  5989  000FA6  0E00               	movlw	0
  5990  000FA8  5ADD               	subwfb	postdec2,f,c
  5991                           
  5992                           ;UART.c: 87: } else {
  5993  000FAA  D002               	goto	i2l285
  5994  000FAC                     i2l2164:
  5995                           
  5996                           ;UART.c: 88: c = 0;
  5997  000FAC  0E00               	movlw	0
  5998  000FAE  6E2D               	movwf	i2UART_buff_get@c,c
  5999  000FB0                     i2l285:
  6000                           
  6001                           ;UART.c: 89: }
  6002                           ;UART.c: 90: return (c);
  6003  000FB0  502D               	movf	i2UART_buff_get@c,w,c
  6004  000FB2  0012               	return	
  6005  000FB4                     __end_ofi2_UART_buff_get:
  6006                           	opt stack 0
  6007                           tosu	equ	0xFFF
  6008                           tosh	equ	0xFFE
  6009                           tosl	equ	0xFFD
  6010                           pclatu	equ	0xFFB
  6011                           pclath	equ	0xFFA
  6012                           tblptru	equ	0xFF8
  6013                           tblptrh	equ	0xFF7
  6014                           tblptrl	equ	0xFF6
  6015                           tablat	equ	0xFF5
  6016                           prodh	equ	0xFF4
  6017                           prodl	equ	0xFF3
  6018                           intcon	equ	0xFF2
  6019                           postinc0	equ	0xFEE
  6020                           fsr0h	equ	0xFEA
  6021                           fsr0l	equ	0xFE9
  6022                           wreg	equ	0xFE8
  6023                           fsr1h	equ	0xFE2
  6024                           fsr1l	equ	0xFE1
  6025                           indf2	equ	0xFDF
  6026                           postinc2	equ	0xFDE
  6027                           postdec2	equ	0xFDD
  6028                           plusw2	equ	0xFDB
  6029                           fsr2h	equ	0xFDA
  6030                           fsr2l	equ	0xFD9
  6031                           status	equ	0xFD8
  6032                           
  6033 ;; *************** function _EUSART1_Receive_ISR *****************
  6034 ;; Defined at:
  6035 ;;		line 139 in file "UART.c"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;		None
  6038 ;; Auto vars:     Size  Location     Type
  6039 ;;  data            1   11[COMRAM] unsigned char 
  6040 ;; Return value:  Size  Location     Type
  6041 ;;                  1    wreg      void 
  6042 ;; Registers used:
  6043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6044 ;; Tracked objects:
  6045 ;;		On entry : 0/0
  6046 ;;		On exit  : 0/0
  6047 ;;		Unchanged: 0/0
  6048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6049 ;;      Params:         0       0       0       0       0       0       0
  6050 ;;      Locals:         1       0       0       0       0       0       0
  6051 ;;      Temps:          0       0       0       0       0       0       0
  6052 ;;      Totals:         1       0       0       0       0       0       0
  6053 ;;Total ram usage:        1 bytes
  6054 ;; Hardware stack levels used:    1
  6055 ;; Hardware stack levels required when called:    2
  6056 ;; This function calls:
  6057 ;;		i2_UART_buff_put
  6058 ;; This function is called by:
  6059 ;;		_INTERRUPT_InterruptManager
  6060 ;; This function uses a non-reentrant model
  6061 ;;
  6062                           
  6063                           	psect	text38
  6064  00144C                     __ptext38:
  6065                           	opt stack 0
  6066  00144C                     _EUSART1_Receive_ISR:
  6067                           	opt stack 21
  6068                           
  6069                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  6070                           
  6071                           ;incstack = 0
  6072  00144C  A2AB               	btfss	4011,1,c	;volatile
  6073  00144E  D002               	goto	i2l316
  6074                           
  6075                           ;UART.c: 143: RC1STAbits.CREN = 0;
  6076  001450  98AB               	bcf	4011,4,c	;volatile
  6077                           
  6078                           ;UART.c: 144: RC1STAbits.CREN = 1;
  6079  001452  88AB               	bsf	4011,4,c	;volatile
  6080  001454                     i2l316:
  6081                           
  6082                           ;UART.c: 145: }
  6083                           ;UART.c: 146: unsigned char data = RCREG1;
  6084  001454  CFAE F02E          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  6085                           
  6086                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  6087  001458  0E00               	movlw	low _input_buffer
  6088  00145A  6E29               	movwf	i2UART_buff_put@_this,c
  6089  00145C  0E03               	movlw	high _input_buffer
  6090  00145E  6E2A               	movwf	i2UART_buff_put@_this+1,c
  6091  001460  C02E  F02B         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  6092  001464  EC8A  F005         	call	i2_UART_buff_put	;wreg free
  6093  001468  0012               	return		;funcret
  6094  00146A                     __end_of_EUSART1_Receive_ISR:
  6095                           	opt stack 0
  6096                           tosu	equ	0xFFF
  6097                           tosh	equ	0xFFE
  6098                           tosl	equ	0xFFD
  6099                           pclatu	equ	0xFFB
  6100                           pclath	equ	0xFFA
  6101                           tblptru	equ	0xFF8
  6102                           tblptrh	equ	0xFF7
  6103                           tblptrl	equ	0xFF6
  6104                           tablat	equ	0xFF5
  6105                           prodh	equ	0xFF4
  6106                           prodl	equ	0xFF3
  6107                           intcon	equ	0xFF2
  6108                           postinc0	equ	0xFEE
  6109                           fsr0h	equ	0xFEA
  6110                           fsr0l	equ	0xFE9
  6111                           wreg	equ	0xFE8
  6112                           fsr1h	equ	0xFE2
  6113                           fsr1l	equ	0xFE1
  6114                           indf2	equ	0xFDF
  6115                           postinc2	equ	0xFDE
  6116                           postdec2	equ	0xFDD
  6117                           plusw2	equ	0xFDB
  6118                           fsr2h	equ	0xFDA
  6119                           fsr2l	equ	0xFD9
  6120                           status	equ	0xFD8
  6121                           
  6122 ;; *************** function i2_UART_buff_put *****************
  6123 ;; Defined at:
  6124 ;;		line 68 in file "UART.c"
  6125 ;; Parameters:    Size  Location     Type
  6126 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  6127 ;;		 -> output_buffer(206), input_buffer(206), 
  6128 ;;  c               1    8[COMRAM] const unsigned char 
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;		None
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  1    wreg      void 
  6133 ;; Registers used:
  6134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6140 ;;      Params:         3       0       0       0       0       0       0
  6141 ;;      Locals:         0       0       0       0       0       0       0
  6142 ;;      Temps:          2       0       0       0       0       0       0
  6143 ;;      Totals:         5       0       0       0       0       0       0
  6144 ;;Total ram usage:        5 bytes
  6145 ;; Hardware stack levels used:    1
  6146 ;; Hardware stack levels required when called:    1
  6147 ;; This function calls:
  6148 ;;		i2_UART_buff_modulo_inc
  6149 ;; This function is called by:
  6150 ;;		_EUSART1_Receive_ISR
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           	psect	text39
  6155  000B14                     __ptext39:
  6156                           	opt stack 0
  6157  000B14                     i2_UART_buff_put:
  6158                           	opt stack 21
  6159                           
  6160                           ;UART.c: 69: if (_this->count < 200) {
  6161                           
  6162                           ;incstack = 0
  6163  000B14  EE20 F0CC          	lfsr	2,204
  6164  000B18  5029               	movf	i2UART_buff_put@_this,w,c
  6165  000B1A  26D9               	addwf	fsr2l,f,c
  6166  000B1C  502A               	movf	i2UART_buff_put@_this+1,w,c
  6167  000B1E  22DA               	addwfc	fsr2h,f,c
  6168  000B20  0E01               	movlw	1
  6169  000B22  BEDB               	btfsc	plusw2,7,c
  6170  000B24  D007               	goto	i2l2144
  6171  000B26  0E01               	movlw	1
  6172  000B28  50DB               	movf	plusw2,w,c
  6173  000B2A  E13A               	bnz	i2l2150
  6174  000B2C  0EC8               	movlw	200
  6175  000B2E  5CDE               	subwf	postinc2,w,c
  6176  000B30  B0D8               	btfsc	status,0,c
  6177  000B32  D036               	goto	i2l2150
  6178  000B34                     i2l2144:
  6179                           
  6180                           ;UART.c: 70: _this->buf[_this->head] = c;
  6181  000B34  EE20 F0C8          	lfsr	2,200
  6182  000B38  5029               	movf	i2UART_buff_put@_this,w,c
  6183  000B3A  26D9               	addwf	fsr2l,f,c
  6184  000B3C  502A               	movf	i2UART_buff_put@_this+1,w,c
  6185  000B3E  22DA               	addwfc	fsr2h,f,c
  6186  000B40  CFDE F02C          	movff	postinc2,??i2_UART_buff_put
  6187  000B44  CFDD F02D          	movff	postdec2,??i2_UART_buff_put+1
  6188  000B48  502C               	movf	??i2_UART_buff_put,w,c
  6189  000B4A  2429               	addwf	i2UART_buff_put@_this,w,c
  6190  000B4C  6ED9               	movwf	fsr2l,c
  6191  000B4E  502D               	movf	??i2_UART_buff_put+1,w,c
  6192  000B50  202A               	addwfc	i2UART_buff_put@_this+1,w,c
  6193  000B52  6EDA               	movwf	fsr2h,c
  6194  000B54  C02B  FFDF         	movff	i2UART_buff_put@c,indf2
  6195                           
  6196                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  6197  000B58  EE20 F0C8          	lfsr	2,200
  6198  000B5C  5029               	movf	i2UART_buff_put@_this,w,c
  6199  000B5E  26D9               	addwf	fsr2l,f,c
  6200  000B60  502A               	movf	i2UART_buff_put@_this+1,w,c
  6201  000B62  22DA               	addwfc	fsr2h,f,c
  6202  000B64  CFDE F023          	movff	postinc2,i2UART_buff_modulo_inc@value
  6203  000B68  CFDD F024          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  6204  000B6C  0E00               	movlw	0
  6205  000B6E  6E26               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  6206  000B70  0EC8               	movlw	200
  6207  000B72  6E25               	movwf	i2UART_buff_modulo_inc@modulus,c
  6208  000B74  ECE3  F009         	call	i2_UART_buff_modulo_inc	;wreg free
  6209  000B78  EE20 F0C8          	lfsr	2,200
  6210  000B7C  5029               	movf	i2UART_buff_put@_this,w,c
  6211  000B7E  26D9               	addwf	fsr2l,f,c
  6212  000B80  502A               	movf	i2UART_buff_put@_this+1,w,c
  6213  000B82  22DA               	addwfc	fsr2h,f,c
  6214  000B84  C023  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  6215  000B88  C024  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  6216                           
  6217                           ;UART.c: 72: ++_this->count;
  6218  000B8C  EE20 F0CC          	lfsr	2,204
  6219  000B90  5029               	movf	i2UART_buff_put@_this,w,c
  6220  000B92  26D9               	addwf	fsr2l,f,c
  6221  000B94  502A               	movf	i2UART_buff_put@_this+1,w,c
  6222  000B96  22DA               	addwfc	fsr2h,f,c
  6223  000B98  2ADE               	incf	postinc2,f,c
  6224  000B9A  0E00               	movlw	0
  6225  000B9C  22DD               	addwfc	postdec2,f,c
  6226                           
  6227                           ;UART.c: 73: } else {
  6228  000B9E  0012               	return	
  6229  000BA0                     i2l2150:
  6230                           
  6231                           ;UART.c: 74: _this->buf[_this->head] = c;
  6232  000BA0  EE20 F0C8          	lfsr	2,200
  6233  000BA4  5029               	movf	i2UART_buff_put@_this,w,c
  6234  000BA6  26D9               	addwf	fsr2l,f,c
  6235  000BA8  502A               	movf	i2UART_buff_put@_this+1,w,c
  6236  000BAA  22DA               	addwfc	fsr2h,f,c
  6237  000BAC  CFDE F02C          	movff	postinc2,??i2_UART_buff_put
  6238  000BB0  CFDD F02D          	movff	postdec2,??i2_UART_buff_put+1
  6239  000BB4  502C               	movf	??i2_UART_buff_put,w,c
  6240  000BB6  2429               	addwf	i2UART_buff_put@_this,w,c
  6241  000BB8  6ED9               	movwf	fsr2l,c
  6242  000BBA  502D               	movf	??i2_UART_buff_put+1,w,c
  6243  000BBC  202A               	addwfc	i2UART_buff_put@_this+1,w,c
  6244  000BBE  6EDA               	movwf	fsr2h,c
  6245  000BC0  C02B  FFDF         	movff	i2UART_buff_put@c,indf2
  6246                           
  6247                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  6248  000BC4  EE20 F0C8          	lfsr	2,200
  6249  000BC8  5029               	movf	i2UART_buff_put@_this,w,c
  6250  000BCA  26D9               	addwf	fsr2l,f,c
  6251  000BCC  502A               	movf	i2UART_buff_put@_this+1,w,c
  6252  000BCE  22DA               	addwfc	fsr2h,f,c
  6253  000BD0  CFDE F023          	movff	postinc2,i2UART_buff_modulo_inc@value
  6254  000BD4  CFDD F024          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  6255  000BD8  0E00               	movlw	0
  6256  000BDA  6E26               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  6257  000BDC  0EC8               	movlw	200
  6258  000BDE  6E25               	movwf	i2UART_buff_modulo_inc@modulus,c
  6259  000BE0  ECE3  F009         	call	i2_UART_buff_modulo_inc	;wreg free
  6260  000BE4  EE20 F0C8          	lfsr	2,200
  6261  000BE8  5029               	movf	i2UART_buff_put@_this,w,c
  6262  000BEA  26D9               	addwf	fsr2l,f,c
  6263  000BEC  502A               	movf	i2UART_buff_put@_this+1,w,c
  6264  000BEE  22DA               	addwfc	fsr2h,f,c
  6265  000BF0  C023  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  6266  000BF4  C024  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  6267                           
  6268                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  6269  000BF8  EE20 F0CA          	lfsr	2,202
  6270  000BFC  5029               	movf	i2UART_buff_put@_this,w,c
  6271  000BFE  26D9               	addwf	fsr2l,f,c
  6272  000C00  502A               	movf	i2UART_buff_put@_this+1,w,c
  6273  000C02  22DA               	addwfc	fsr2h,f,c
  6274  000C04  CFDE F023          	movff	postinc2,i2UART_buff_modulo_inc@value
  6275  000C08  CFDD F024          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  6276  000C0C  0E00               	movlw	0
  6277  000C0E  6E26               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  6278  000C10  0EC8               	movlw	200
  6279  000C12  6E25               	movwf	i2UART_buff_modulo_inc@modulus,c
  6280  000C14  ECE3  F009         	call	i2_UART_buff_modulo_inc	;wreg free
  6281  000C18  EE20 F0CA          	lfsr	2,202
  6282  000C1C  5029               	movf	i2UART_buff_put@_this,w,c
  6283  000C1E  26D9               	addwf	fsr2l,f,c
  6284  000C20  502A               	movf	i2UART_buff_put@_this+1,w,c
  6285  000C22  22DA               	addwfc	fsr2h,f,c
  6286  000C24  C023  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  6287  000C28  C024  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  6288  000C2C  0012               	return	
  6289  000C2E                     __end_ofi2_UART_buff_put:
  6290                           	opt stack 0
  6291                           tosu	equ	0xFFF
  6292                           tosh	equ	0xFFE
  6293                           tosl	equ	0xFFD
  6294                           pclatu	equ	0xFFB
  6295                           pclath	equ	0xFFA
  6296                           tblptru	equ	0xFF8
  6297                           tblptrh	equ	0xFF7
  6298                           tblptrl	equ	0xFF6
  6299                           tablat	equ	0xFF5
  6300                           prodh	equ	0xFF4
  6301                           prodl	equ	0xFF3
  6302                           intcon	equ	0xFF2
  6303                           postinc0	equ	0xFEE
  6304                           fsr0h	equ	0xFEA
  6305                           fsr0l	equ	0xFE9
  6306                           wreg	equ	0xFE8
  6307                           fsr1h	equ	0xFE2
  6308                           fsr1l	equ	0xFE1
  6309                           indf2	equ	0xFDF
  6310                           postinc2	equ	0xFDE
  6311                           postdec2	equ	0xFDD
  6312                           plusw2	equ	0xFDB
  6313                           fsr2h	equ	0xFDA
  6314                           fsr2l	equ	0xFD9
  6315                           status	equ	0xFD8
  6316                           
  6317 ;; *************** function i2_UART_buff_modulo_inc *****************
  6318 ;; Defined at:
  6319 ;;		line 106 in file "UART.c"
  6320 ;; Parameters:    Size  Location     Type
  6321 ;;  value           2    0[COMRAM] const unsigned int 
  6322 ;;  modulus         2    2[COMRAM] const unsigned int 
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  6325 ;; Return value:  Size  Location     Type
  6326 ;;                  2    0[COMRAM] unsigned int 
  6327 ;; Registers used:
  6328 ;;		wreg, status,2, status,0
  6329 ;; Tracked objects:
  6330 ;;		On entry : 0/0
  6331 ;;		On exit  : 0/0
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6334 ;;      Params:         4       0       0       0       0       0       0
  6335 ;;      Locals:         2       0       0       0       0       0       0
  6336 ;;      Temps:          0       0       0       0       0       0       0
  6337 ;;      Totals:         6       0       0       0       0       0       0
  6338 ;;Total ram usage:        6 bytes
  6339 ;; Hardware stack levels used:    1
  6340 ;; This function calls:
  6341 ;;		Nothing
  6342 ;; This function is called by:
  6343 ;;		i2_UART_buff_put
  6344 ;;		i2_UART_buff_get
  6345 ;; This function uses a non-reentrant model
  6346 ;;
  6347                           
  6348                           	psect	text40
  6349  0013C6                     __ptext40:
  6350                           	opt stack 0
  6351  0013C6                     i2_UART_buff_modulo_inc:
  6352                           	opt stack 21
  6353                           
  6354                           ;UART.c: 107: unsigned int my_value = value + 1;
  6355                           
  6356                           ;incstack = 0
  6357  0013C6  0E01               	movlw	1
  6358  0013C8  2423               	addwf	i2UART_buff_modulo_inc@value,w,c
  6359  0013CA  6E27               	movwf	i2UART_buff_modulo_inc@my_value,c
  6360  0013CC  0E00               	movlw	0
  6361  0013CE  2024               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  6362  0013D0  6E28               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  6363                           
  6364                           ;UART.c: 108: if (my_value >= modulus) {
  6365  0013D2  5025               	movf	i2UART_buff_modulo_inc@modulus,w,c
  6366  0013D4  5C27               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  6367  0013D6  5026               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  6368  0013D8  5828               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  6369  0013DA  A0D8               	btfss	status,0,c
  6370  0013DC  D004               	goto	i2l1972
  6371                           
  6372                           ;UART.c: 109: my_value = 0;
  6373  0013DE  0E00               	movlw	0
  6374  0013E0  6E28               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  6375  0013E2  0E00               	movlw	0
  6376  0013E4  6E27               	movwf	i2UART_buff_modulo_inc@my_value,c
  6377  0013E6                     i2l1972:
  6378                           
  6379                           ;UART.c: 110: }
  6380                           ;UART.c: 111: return (my_value);
  6381  0013E6  C027  F023         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  6382  0013EA  C028  F024         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  6383  0013EE  0012               	return	
  6384  0013F0                     __end_ofi2_UART_buff_modulo_inc:
  6385                           	opt stack 0
  6386  0000                     tosu	equ	0xFFF
  6387                           tosh	equ	0xFFE
  6388                           tosl	equ	0xFFD
  6389                           pclatu	equ	0xFFB
  6390                           pclath	equ	0xFFA
  6391                           tblptru	equ	0xFF8
  6392                           tblptrh	equ	0xFF7
  6393                           tblptrl	equ	0xFF6
  6394                           tablat	equ	0xFF5
  6395                           prodh	equ	0xFF4
  6396                           prodl	equ	0xFF3
  6397                           intcon	equ	0xFF2
  6398                           postinc0	equ	0xFEE
  6399                           fsr0h	equ	0xFEA
  6400                           fsr0l	equ	0xFE9
  6401                           wreg	equ	0xFE8
  6402                           fsr1h	equ	0xFE2
  6403                           fsr1l	equ	0xFE1
  6404                           indf2	equ	0xFDF
  6405                           postinc2	equ	0xFDE
  6406                           postdec2	equ	0xFDD
  6407                           plusw2	equ	0xFDB
  6408                           fsr2h	equ	0xFDA
  6409                           fsr2l	equ	0xFD9
  6410                           status	equ	0xFD8
  6411                           tosu	equ	0xFFF
  6412                           tosh	equ	0xFFE
  6413                           tosl	equ	0xFFD
  6414                           pclatu	equ	0xFFB
  6415                           pclath	equ	0xFFA
  6416                           tblptru	equ	0xFF8
  6417                           tblptrh	equ	0xFF7
  6418                           tblptrl	equ	0xFF6
  6419                           tablat	equ	0xFF5
  6420                           prodh	equ	0xFF4
  6421                           prodl	equ	0xFF3
  6422                           intcon	equ	0xFF2
  6423                           postinc0	equ	0xFEE
  6424                           fsr0h	equ	0xFEA
  6425                           fsr0l	equ	0xFE9
  6426                           wreg	equ	0xFE8
  6427                           fsr1h	equ	0xFE2
  6428                           fsr1l	equ	0xFE1
  6429                           indf2	equ	0xFDF
  6430                           postinc2	equ	0xFDE
  6431                           postdec2	equ	0xFDD
  6432                           plusw2	equ	0xFDB
  6433                           fsr2h	equ	0xFDA
  6434                           fsr2l	equ	0xFD9
  6435                           status	equ	0xFD8
  6436                           
  6437                           	psect	text41
  6438  000000                     __ptext41:
  6439                           	opt stack 0
  6440                           tosu	equ	0xFFF
  6441                           tosh	equ	0xFFE
  6442                           tosl	equ	0xFFD
  6443                           pclatu	equ	0xFFB
  6444                           pclath	equ	0xFFA
  6445                           tblptru	equ	0xFF8
  6446                           tblptrh	equ	0xFF7
  6447                           tblptrl	equ	0xFF6
  6448                           tablat	equ	0xFF5
  6449                           prodh	equ	0xFF4
  6450                           prodl	equ	0xFF3
  6451                           intcon	equ	0xFF2
  6452                           postinc0	equ	0xFEE
  6453                           fsr0h	equ	0xFEA
  6454                           fsr0l	equ	0xFE9
  6455                           wreg	equ	0xFE8
  6456                           fsr1h	equ	0xFE2
  6457                           fsr1l	equ	0xFE1
  6458                           indf2	equ	0xFDF
  6459                           postinc2	equ	0xFDE
  6460                           postdec2	equ	0xFDD
  6461                           plusw2	equ	0xFDB
  6462                           fsr2h	equ	0xFDA
  6463                           fsr2l	equ	0xFD9
  6464                           status	equ	0xFD8
  6465                           
  6466                           	psect	rparam
  6467  0000                     tosu	equ	0xFFF
  6468                           tosh	equ	0xFFE
  6469                           tosl	equ	0xFFD
  6470                           pclatu	equ	0xFFB
  6471                           pclath	equ	0xFFA
  6472                           tblptru	equ	0xFF8
  6473                           tblptrh	equ	0xFF7
  6474                           tblptrl	equ	0xFF6
  6475                           tablat	equ	0xFF5
  6476                           prodh	equ	0xFF4
  6477                           prodl	equ	0xFF3
  6478                           intcon	equ	0xFF2
  6479                           postinc0	equ	0xFEE
  6480                           fsr0h	equ	0xFEA
  6481                           fsr0l	equ	0xFE9
  6482                           wreg	equ	0xFE8
  6483                           fsr1h	equ	0xFE2
  6484                           fsr1l	equ	0xFE1
  6485                           indf2	equ	0xFDF
  6486                           postinc2	equ	0xFDE
  6487                           postdec2	equ	0xFDD
  6488                           plusw2	equ	0xFDB
  6489                           fsr2h	equ	0xFDA
  6490                           fsr2l	equ	0xFD9
  6491                           status	equ	0xFD8
  6492                           
  6493                           	psect	temp
  6494  000045                     btemp:
  6495                           	opt stack 0
  6496  000045                     	ds	1
  6497  0000                     int$flags	set	btemp
  6498                           tosu	equ	0xFFF
  6499                           tosh	equ	0xFFE
  6500                           tosl	equ	0xFFD
  6501                           pclatu	equ	0xFFB
  6502                           pclath	equ	0xFFA
  6503                           tblptru	equ	0xFF8
  6504                           tblptrh	equ	0xFF7
  6505                           tblptrl	equ	0xFF6
  6506                           tablat	equ	0xFF5
  6507                           prodh	equ	0xFF4
  6508                           prodl	equ	0xFF3
  6509                           intcon	equ	0xFF2
  6510                           postinc0	equ	0xFEE
  6511                           fsr0h	equ	0xFEA
  6512                           fsr0l	equ	0xFE9
  6513                           wreg	equ	0xFE8
  6514                           fsr1h	equ	0xFE2
  6515                           fsr1l	equ	0xFE1
  6516                           indf2	equ	0xFDF
  6517                           postinc2	equ	0xFDE
  6518                           postdec2	equ	0xFDD
  6519                           plusw2	equ	0xFDB
  6520                           fsr2h	equ	0xFDA
  6521                           fsr2l	equ	0xFD9
  6522                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         883
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     33      68
    BANK0           160     24      55
    BANK1           256      0     206
    BANK2           256      0     200
    BANK3           256      0     206
    BANK4           256      0     206
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(COMRAM[3]), receiveData@holder_324(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK2[200]), ring_buffer(BANK1[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK1[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 10
		 -> receiveArray(BANK0[10]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 10
		 -> NULL(NULL[0]), receiveArray(BANK0[10]), 


Critical Paths under _main in COMRAM

    _respondECU->_ToSend
    _sendData->_CRC8
    _sendData->_crcBufS_put
    _FastTransfer_buffer_flush->_memset
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _receiveData->_CRC8
    _Send_put->_UART_buff_get
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _begin->___awdiv
    _UART_buff_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _sendData->_FastTransfer_buffer_flush
    _sendData->_Send_put
    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _receiveData->_Send_put
    _Send_put->_UART_buff_put
    _Receive_get->_UART_buff_get
    _ComStart->_begin
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   15532
                            _GetTime
                         _ReadFaults
                            _SetTime
                              _Start
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   13054
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           1     1      0    7592
                                             11 BANK0      1     1      0
                              _Delay
                          _GetFaults
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    5704
                                              6 BANK0      5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                              2 BANK0      4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1684
                                             32 COMRAM     1     1      0
                                              7 BANK0      2     0      2
            _FastTransfer_buffer_put
                          _GetFaults (ARG)
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1391
                                              0 BANK0      7     2      5
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     602
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _GetFaults                                            1     1      0      30
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     174
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0    5462
                                              6 BANK0     18    18      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                              5 BANK0      1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                              0 BANK0      5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     1     1      0
                                              0 BANK0      4     2      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Start                                                0     0      0    2478
                           _ComStart
               _INTERRUPT_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ComStart                                             0     0      0    2478
                 _EUSART1_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (3) _begin                                               13     0     13    1463
                                              4 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     599
                                             26 COMRAM     4     0      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (4) _UART_buff_init                                       2     0      2    1015
                                              2 BANK0      2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     6     0      6
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SetTime                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadFaults                                           1     1      0       0
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              4     0      4       0
                                             26 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetTime
   _ReadFaults
   _SetTime
   _Start
     _ComStart
       _EUSART1_Initialize
         _UART_buff_init
           _memset
       _begin
         ___awdiv
     _INTERRUPT_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _updateComms
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _respondECU
       _Delay
       _GetFaults
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
         _GetFaults (ARG)
       _sendData
         Absolute function(Fake) *
         _CRC8 *
         _FastTransfer_buffer_flush *
           _memset
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C8       8       78.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      CE       6       80.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     18      37       4       34.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     21      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3AD       9        0.0%
DATA                 0      0     3AD      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Oct 07 01:46:53 2016

      __end_of_FastTransfer_buffer_flush 1020                   i2_UART_buff_modulo_inc 13C6  
                           _rx_array_inx 0021                             ___awdiv@sign 0080  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    l110 11D2                                      l285 0E82  
                                    l457 12CE                             __CFG_CPB$OFF 000000  
                           __CFG_CPD$OFF 000000                                      u900 0CB4  
                                    u830 0C36                                      u920 0CC6  
                                    u840 0C46                                      u850 0C5A  
                                    u915 0CB6                                      u940 0CD6  
                                    u860 0C72                                      u836 0C38  
                                    u950 0CE6                                      u870 0C8E  
                                    u935 0CC8                                      u960 0CFA  
                                    u880 0CA2                                      u848 0C48  
                                    u946 0CD8                                      u858 0C5C  
                                    u868 0C74                                      u958 0CE8  
                                    u878 0C90                                      u895 0CA4  
                                    u968 0CFC     FastTransfer_buffer_flush@clearBuffer 0083  
                                    prod 000FF3                                      tosl 000FFD  
                                    wreg 000FE8            i2UART_buff_modulo_inc@modulus 0025  
                           __CFG_LVP$OFF 000000                                     l1270 14A8  
                                   l2402 11A6                                     l2500 0EF8  
                                   l2504 0F04                                     l2408 11BC  
                                   l2416 11D8                                     l2600 01A6  
                                   l2418 11DE                                     l2362 13BC  
                                   l2602 01BE                                     l2372 1360  
                                   l2508 0F18                                     l2700 0610  
                                   l2620 0238                                     l2604 01C4  
                                   l2612 01FE                                     l2540 08BE  
                                   l2382 0A74                                     l2710 06C6  
                                   l2702 062A                                     l2438 071C  
                                   l2550 0936                                     l2542 08D8  
                                   l2368 134E                                     l2376 09F8  
                                   l2704 0644                                     l2712 06E2  
                                   l2640 039A                                     l2632 02FC  
                                   l2624 0260                                     l2616 0206  
                                   l2720 06EE                                     l2552 0960  
                                   l2544 08F4                                     l2490 0ED4  
                                   l2482 0EB0                                     l2706 065E  
                                   l2642 03AE                                     l1930 12BA  
                                   l1754 1392                                     l2554 0966  
                                   l2546 090E                                     l2492 0ED8  
                                   l2476 0E9E                                     l2396 0E7E  
                                   l2708 0678                                     l2660 0482  
                                   l2580 00D4                                     l2548 092A  
                                   l2670 0538                                     l2662 049C  
                                   l2638 0396                                     l2558 09A2  
                                   l2488 0ECA                                     l2664 04B6  
                                   l2656 044E                                     l2672 0554  
                                   l2584 0100                                     l2666 04D0  
                                   l2658 0468                                     l2682 0560  
                                   l2668 04EA                                     l2588 0104  
                                   l2790 131C                                     l2696 05DC  
                                   l2698 05F6                     receiveData@crcHolder 0091  
                                   _CRC8 11A0                                     u2401 071A  
                                   u2340 0E02                                     u3140 1338  
                                   u2380 0DCC                                     u2508 08DC  
                                   u2518 08F8                                     u3167 12C0  
                                   u2528 0912                                     u2618 0108  
                                   u2538 093A                                     u2619 011C  
                                   u2638 0126                                     u2558 098A  
                                   u2639 013A                                     u2728 020A  
                                   u2488 08A8                                     u2761 02A0  
                                   u2729 021E                                     u2818 0438  
                                   u2738 023C                                     u2658 0144  
                                   u2578 00AE                                     u2498 08C2  
                                   u2739 0250                                     u2659 0158  
                                   u2579 00C2                                     u2828 0452  
                                   u2668 015E                                     u2669 0172  
                                   u2918 05C6                                     u2838 046C  
                                   u2678 0178                                     u2598 00DC  
                                   u2679 018C                                     u2599 00F0  
                                   u2928 05E0                                     u2848 0486  
                                   u2938 05FA                                     u2858 04A0  
                                   u2698 01AA                                     u2948 0614  
                                   u2868 04BA                                     u2958 062E  
                                   u2878 04D4                                     u2968 0648  
                                   u2888 04EE                                     u2978 0662  
                                   u2898 053C                                     u2988 067C  
                                   u2998 06CA                                     _main 1316  
                        _TMR0_StartTimer 153C                                     _time 0060  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     btemp 0045  
                          __CFG_BORV$190 000000                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 088C                                     start 00A0  
                          __CFG_IESO$OFF 000000                          __end_of_GetTime 152C  
                           ___param_bank 000010           i2UART_buff_modulo_inc@my_value 0027  
                                  ?_CRC8 003D                          __end_of_SetTime 1508  
                __end_of_TMR0_Initialize 142E                       crcBufS_put@address 003F  
                                  ?_main 0023                          __end_of___awdiv 0F22  
                                  _T0CON 000FD5                          ___awdiv@divisor 003F  
                         __CFG_DEBUG$OFF 000000                                    i2l316 1454  
                                  i2l450 005A                                    i2l285 0FB0  
                                  i2l454 0064                                    i2l448 004E  
                        ___awdiv@counter 007F                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6                                    _Delay 12B0  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 12E4                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                       __end_of_TMR0_ISR 1484                                    _Start 11EA  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _begin 1148  
                         __CFG_EBTRB$OFF 000000                                    _group 0009  
                     __CFG_MCLRE$EXTMCLR 000000                                    pclath 000FFA  
                                  tablat 000FF5                            ??_Receive_get 0044  
                                  plusw2 000FDB                           begin@stuffpeek 008E  
                   __size_of_crcBufS_put 00D8                                    status 000FD8  
                         __CFG_HFOFST$ON 000000                             ?_receiveData 0023  
                         __CFG_PBADEN$ON 000000                             __end_of_CRC8 11EA  
                       __end_of_ComStart 1148                               _ReadFaults 0C2E  
                        __initialization 1020               __end_of_EUSART1_Initialize 1278  
                           __end_of_main 1344                               ToSend@what 0086  
                                 ??_CRC8 0040              ?_INTERRUPT_InterruptManager 0023  
                     __size_of_GetFaults 0016                                   ??_main 0044  
                  receiveData@holder_324 008E                            __activetblptr 000002  
                       __end_of_Send_put 12B0                __size_ofi2_UART_buff_size 0016  
                                 ?_Delay 003D                    ?_EUSART1_Transmit_ISR 0023  
          FastTransfer_buffer_put@towhat 0082                                   ?_Start 0023  
                                 ?_begin 0083                  __end_of_TMR0_StartTimer 1540  
                       ___awdiv@dividend 003D                                   _ANSELA 000F38  
                                 _ANSELC 000F3A                                   _ANSELD 000F3B  
                        i2_UART_buff_get 0F22                                   _RC1STA 000FAB  
                                 i2l2150 0BA0                                   i2l2144 0B34  
                        i2_UART_buff_put 0B14                                   i2l2242 130E  
                                 i2l2164 0FAC                           __CFG_WDTEN$OFF 000000  
                                 Delay@x 0040              UART_buff_modulo_inc@modulus 003F  
                                 i2l1972 13E6                                   _RCREG1 000FAE  
                                 _OSCCON 000FD3                                   _SPBRG1 000FAF  
                              ??_GetTime 0041                                   _TX1STA 000FAC  
                                 _TXREG1 000FAD                                ??_SetTime 003D  
                         __CFG_XINST$OFF 000000                                   _ToSend 13F0  
                    __end_of_Receive_get 151A              ??_FastTransfer_buffer_flush 0043  
                          _output_buffer 0400                                ??___awdiv 0041  
                              CRC8@tempI 0042                           __CFG_STVREN$ON 000000  
                       ?_TMR0_Initialize 0023                                   _memset 1344  
                                 clear_0 1026                                   clear_1 1032  
                                 clear_2 103E                                   clear_3 104A  
                                 clear_4 1056                                   clear_5 1062  
                       ___awdiv@quotient 0081                                   _rx_len 0022  
                       __end_of_sendData 09D6                             __pdataCOMRAM 0044  
                          Send_put@_data 0084                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 019A             __end_of_UART_buff_modulo_inc 13C6  
          __size_of_INTERRUPT_Initialize 0018                               __accesstop 0060  
                __end_of__initialization 107A                        __end_of_GetFaults 14B2  
                          ___rparam_used 000001                  ?i2_UART_buff_modulo_inc 0023  
                           ?_updateComms 0023                            __end_of_Delay 12E4  
                            ?_ReadFaults 0023                           __pcstackCOMRAM 0023  
                          __end_of_Start 1234                         crcBufS_put@_this 003D  
                          __end_of_begin 11A0                                ?_TMR0_ISR 0023  
 __end_of_FastTransfer_buffer_modulo_inc 139C  __size_of_FastTransfer_buffer_modulo_inc 002A  
         _FastTransfer_buffer_modulo_inc 1372             FastTransfer_buffer_put@_this 007F  
                            ToSend@where 0043                       UART_buff_get@_this 007F  
                  __end_of_UART_buff_get 0E86                   ??_EUSART1_Transmit_ISR 002E  
                  __end_of_UART_buff_put 0B14                                  ??_Delay 003F  
                __end_ofi2_UART_buff_get 0FB4                  __end_ofi2_UART_buff_put 0C2E  
            __end_of_EUSART1_Receive_ISR 146A                _FastTransfer_buffer_flush 0FB4  
                                CRC8@crc 0043                                  CRC8@len 003F  
                                ??_Start 0043                                  CRC8@sum 0040  
                              ?_ComStart 0023                                  ??_begin 0041  
                       ?_TMR0_StartTimer 0023                      _addressErrorCounter 0001  
                             __pbssBANK0 0060                               __pbssBANK1 0100  
                             __pbssBANK2 0200                               __pbssBANK3 0300  
                             __pbssBANK4 0400                          __CFG_PLLCFG$OFF 000000  
                            _Receive_get 1508           __end_ofi2_UART_buff_modulo_inc 13F0  
                      begin@givenAddress 0086                  __size_of_UART_buff_init 001E  
                __size_of_UART_buff_size 0016                                ?_Send_put 0023  
                   __size_of_receiveData 064E                                  ?_ToSend 0086  
                     __CFG_CCP2MX$PORTC1 000000                               ??_TMR0_ISR 0023  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 003D  
                                ?_memset 003D                               _crc_buffer 0064  
                     UART_buff_put@_this 007F                         i2_UART_buff_size 14DE  
            i2UART_buff_modulo_inc@value 0023                                  _OSCCON2 000FD2  
                      _Receive_available 14B2             UART_buff_modulo_inc@my_value 0041  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                               ??_ComStart 0043  
                    sendData@whereToSend 0086                      _receiveArrayAddress 000B  
                    __size_of_ReadFaults 00DC                       ?_Receive_available 003F  
                             begin@error 0087                                  _GetTime 151A  
                                _ByteLow 001B                      ??_Receive_available 0041  
                              ?_sendData 0023                        _alignErrorCounter 0003  
                        __CFG_PWRTEN$OFF 000000                               ??_Send_put 0044  
                                __Hparam 0000                                  _SetTime 14F4  
                                __Lparam 0000                          __size_of_ToSend 0020  
                              _AKNAKsend 0019                                  ___awdiv 0E86  
                   _UART_buff_modulo_inc 139C                                  _calc_CS 001C  
                                __pcinit 1020                          __size_of_memset 002E  
                                __ramtop 0600                         i2UART_buff_get@c 002D  
                                __ptext0 1316                                  __ptext1 152C  
                                __ptext2 1088                                  __ptext3 088C  
                                __ptext4 0D0A                                  __ptext5 0FB4  
                                __ptext6 13F0                                  __ptext7 06F2  
                                __ptext8 1372                                  __ptext9 149C  
                              _T0CONbits 000FD5                         i2UART_buff_put@c 002B  
              __end_of_Receive_available 14C8                  _FastTransfer_buffer_put 06F2  
                     _EUSART1_Initialize 1234                         ?i2_UART_buff_get 0029  
                       ?i2_UART_buff_put 0029                            ??_crcBufS_put 0042  
                   end_of_initialization 107A                                Delay@wait 003D  
                    ?_EUSART1_Initialize 0023                                  memset@c 003F  
                                memset@n 0041                                  memset@p 007F  
                          __Lmediumconst 0000                               ??_sendData 0085  
                  ?_UART_buff_modulo_inc 003D                     __size_of_updateComms 0010  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                               _respondECU 1088  
                       begin@stufftosend 0088                     ??_EUSART1_Initialize 0043  
                              _PORTAbits 000F80                                _PORTCbits 000F82  
                              _PORTDbits 000F83                   _dataAdressErrorCounter 0007  
                             _rx_address 0020                                _TRISAbits 000F92  
                              _TRISCbits 000F94                                _TRISDbits 000F95  
                           begin@maxSize 0085       __size_of_FastTransfer_buffer_flush 006C  
                  i2UART_buff_size@_this 0023                           _UART_buff_init 142E  
                         _UART_buff_size 14C8                      __end_of_crcBufS_put 0DE2  
                           ??_ReadFaults 003D                                _GetFaults 149C  
                          _moduleAddress 001E                     _timer0ReloadVal16bit 0017  
                         __end_of_ToSend 1410             __end_of_INTERRUPT_Initialize 149C  
                        _crcErrorCounter 0005                        crcBufS_put@oldCRC 0040  
                          __pidataCOMRAM 1540                        __size_of_TMR0_ISR 001A  
              ??_FastTransfer_buffer_put 0084                           __end_of_memset 1372  
                      crcBufS_put@status 0041                             receiveData@r 0095  
             __size_of_Receive_available 0016                             receiveData@u 0093  
                    start_initialization 1020                 __size_of_TMR0_Initialize 001E  
                     __end_of_ReadFaults 0D0A                        __size_of_ComStart 0058  
                 __end_of_UART_buff_init 144C                           UART_buff_get@c 0043  
                 __end_of_UART_buff_size 14DE                             ?_Receive_get 0023  
                         UART_buff_put@c 0081                 __end_ofi2_UART_buff_size 14F4  
                               ??_ToSend 0043                   ??_UART_buff_modulo_inc 0041  
                             ?_GetFaults 0023                                 CRC8@data 003D  
                      __size_of_Send_put 0038                              ?_respondECU 0023  
                               ??_memset 0043                              __pbssCOMRAM 0001  
          __size_of_EUSART1_Transmit_ISR 0032                            __pcstackBANK0 007F  
                           _Receive_peek 000000                      UART_buff_init@_this 0081  
                            _crcBufS_put 0D0A                          ?_UART_buff_init 0081  
                        ?_UART_buff_size 003D             __size_of_EUSART1_Receive_ISR 001E  
                               ?_GetTime 003D                            ??_receiveData 0085  
                             sendData@CS 0087                 __size_of_TMR0_StartTimer 0004  
                 __size_of_UART_buff_get 00A4                   __size_of_UART_buff_put 013E  
                               ?_SetTime 0023                        __size_of_sendData 014A  
                           GetFaults@num 003D                                __pintcode 0008  
                               ?___awdiv 003D             ??_INTERRUPT_InterruptManager 002F  
                   i2UART_buff_get@_this 0029                 receiveData@crcHolder_325 0092  
                               _BAUD1CON 000FB8                           __size_of_Delay 0034  
                         __size_of_Start 004A                           __size_of_begin 0058  
                    __size_of_respondECU 0068                     _INTERRUPT_Initialize 1484  
                           _receiveArray 0075                        ??_TMR0_Initialize 003D  
                               _LATAbits 000F89                                 _LATDbits 000F8C  
                    UART_buff_size@_this 003D                                 _IPR1bits 000F9F  
                               _IPR2bits 000FA2                                 _PIE1bits 000F9D  
                               i2u205_40 12FE      __size_of_INTERRUPT_InterruptManager 0098  
                               _PIR1bits 000F9E                                 i2u197_40 0F40  
                            ??_GetFaults 003D                      begin@stuffavailable 008C  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 06F2                                 _TMR0_ISR 146A  
         FastTransfer_buffer_flush@_this 0081                             _input_buffer 0300  
                              _rx_buffer 0200                     i2UART_buff_put@_this 0029  
                          _UART_buff_get 0DE2                            _UART_buff_put 09D6  
                               _ComStart 10F0                 ??i2_UART_buff_modulo_inc 0027  
                  ?_INTERRUPT_Initialize 0023                        _sendStructAddress 000D  
                               _ByteHigh 001A                 __size_ofi2_UART_buff_get 0092  
               __size_ofi2_UART_buff_put 011A                         __size_of_GetTime 0012  
                          ??_updateComms 0044                     __size_of_Receive_get 0012  
                               __Hrparam 0000                                 _Send_put 1278  
                               __Lrparam 0000                       __CFG_BOREN$SBORDIS 000000  
                       __size_of_SetTime 0014                        __CFG_P2BMX$PORTD2 000000  
                      ??_TMR0_StartTimer 003D                         __size_of___awdiv 009C  
            __size_of_EUSART1_Initialize 0044                      begin@stufftoreceive 008A  
                         ?_UART_buff_get 007F                           ?_UART_buff_put 007F  
                            CRC8@extract 0041                                sendData@i 0088  
                               __ptext10 12B0                                 __ptext11 00A4  
                               __ptext20 11EA                                 __ptext12 1278  
                               __ptext21 1410                                 __ptext13 09D6  
                               __ptext30 14F4                                 __ptext22 153C  
                               __ptext14 1508                                 __ptext31 0C2E  
                               __ptext23 1484                                 __ptext15 0DE2  
                               __ptext40 13C6                                 __ptext32 151A  
                               __ptext24 10F0                                 __ptext16 139C  
                               __ptext41 0000                                 __ptext25 1148  
                               __ptext17 14B2                                 __ptext34 146A  
                               __ptext26 0E86                                 __ptext18 14C8  
                               __ptext35 12E4                                 __ptext27 1234  
                               __ptext19 11A0                                 __ptext36 14DE  
                               __ptext28 142E                                 __ptext37 0F22  
                               __ptext29 1344                                 __ptext38 144C  
                               __ptext39 0B14                            __size_of_CRC8 004A  
                               begin@ptr 0083                  EUSART1_Receive_ISR@data 002E  
                          _returnAddress 001F                            __size_of_main 002E  
                            _receiveData 00A4                           _Transmit_stall 0044  
                               _sendData 088C                        ?i2_UART_buff_size 0023  
                             _RC1STAbits 000FAB                             ??_respondECU 008A  
                     ??i2_UART_buff_size 0025                                 int$flags 0045  
                           _serial_write 0015                      __end_of_updateComms 153C  
     __end_of_INTERRUPT_InterruptManager 00A0               _INTERRUPT_InterruptManager 0008  
                    _EUSART1_Receive_ISR 144C                        receiveData@holder 008B  
                             _INTCONbits 000FF2                UART_buff_modulo_inc@value 003D  
                       ??_UART_buff_init 0043                         ??_UART_buff_size 003F  
                 ??_INTERRUPT_Initialize 003D                                 memset@p1 003D  
                       _serial_available 000F          __size_ofi2_UART_buff_modulo_inc 002A  
                           ?_crcBufS_put 003D                                 intlevel2 0000  
                     __end_of_respondECU 10F0                     ?_EUSART1_Receive_ISR 0023  
 FastTransfer_buffer_modulo_inc@my_value 0041           FastTransfer_buffer_put@towhere 0081  
           __end_of_EUSART1_Transmit_ISR 1316                              _ring_buffer 0100  
             ?_FastTransfer_buffer_flush 0081                        ??i2_UART_buff_get 002B  
                            _serial_peek 0011                              _serial_read 0013  
                      ??i2_UART_buff_put 002C                 ?_FastTransfer_buffer_put 007F  
          __size_of_UART_buff_modulo_inc 002A                          ??_UART_buff_get 0081  
                        ??_UART_buff_put 0082    FastTransfer_buffer_modulo_inc@modulus 003F  
                        _TMR0_Initialize 1410                        __CFG_T3CMX$PORTC0 000000  
                         _maxDataAddress 001D                    ??_EUSART1_Receive_ISR 002E  
       ??_FastTransfer_buffer_modulo_inc 0041          ?_FastTransfer_buffer_modulo_inc 003D  
                      __CFG_FOSC$INTIO67 000000                              _updateComms 152C  
