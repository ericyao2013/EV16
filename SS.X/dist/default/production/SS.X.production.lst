

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Oct 01 16:11:52 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    66  0000                     
    67                           	psect	idataCOMRAM
    68  001868                     __pidataCOMRAM:
    69                           	opt stack 0
    70                           
    71                           ;initializer for _Transmit_stall
    72  001868  01                 	db	1
    73  0000                     _ANSELA	set	3896
    74  0000                     _ANSELC	set	3898
    75  0000                     _ANSELD	set	3899
    76  0000                     _BAUD1CON	set	4024
    77  0000                     _INTCONbits	set	4082
    78  0000                     _IPR1bits	set	3999
    79  0000                     _IPR2bits	set	4002
    80  0000                     _LATAbits	set	3977
    81  0000                     _LATDbits	set	3980
    82  0000                     _OSCCON	set	4051
    83  0000                     _OSCCON2	set	4050
    84  0000                     _OSCTUNE	set	3995
    85  0000                     _PIE1bits	set	3997
    86  0000                     _PIR1bits	set	3998
    87  0000                     _PORTAbits	set	3968
    88  0000                     _PORTCbits	set	3970
    89  0000                     _PORTDbits	set	3971
    90  0000                     _RC1STA	set	4011
    91  0000                     _RC1STAbits	set	4011
    92  0000                     _RCONbits	set	4048
    93  0000                     _RCREG1	set	4014
    94  0000                     _SPBRG1	set	4015
    95  0000                     _SPBRGH1	set	4016
    96  0000                     _T0CON	set	4053
    97  0000                     _T0CONbits	set	4053
    98  0000                     _TMR0H	set	4055
    99  0000                     _TMR0L	set	4054
   100  0000                     _TRISAbits	set	3986
   101  0000                     _TRISCbits	set	3988
   102  0000                     _TRISDbits	set	3989
   103  0000                     _TX1STA	set	4012
   104  0000                     _TXREG1	set	4013
   105                           
   106                           ; #config settings
   107  0000                     
   108                           	psect	cinit
   109  00132C                     __pcinit:
   110                           	opt stack 0
   111  00132C                     start_initialization:
   112                           	opt stack 0
   113  00132C                     __initialization:
   114                           	opt stack 0
   115                           
   116                           ; Clear objects allocated to BANK4 (206 bytes)
   117  00132C  EE04  F000         	lfsr	0,__pbssBANK4
   118  001330  0ECE               	movlw	206
   119  001332                     clear_0:
   120  001332  6AEE               	clrf	postinc0,c
   121  001334  06E8               	decf	wreg,f,c
   122  001336  E1FD               	bnz	clear_0
   123                           
   124                           ; Clear objects allocated to BANK3 (206 bytes)
   125  001338  EE03  F000         	lfsr	0,__pbssBANK3
   126  00133C  0ECE               	movlw	206
   127  00133E                     clear_1:
   128  00133E  6AEE               	clrf	postinc0,c
   129  001340  06E8               	decf	wreg,f,c
   130  001342  E1FD               	bnz	clear_1
   131                           
   132                           ; Clear objects allocated to BANK2 (200 bytes)
   133  001344  EE02  F000         	lfsr	0,__pbssBANK2
   134  001348  0EC8               	movlw	200
   135  00134A                     clear_2:
   136  00134A  6AEE               	clrf	postinc0,c
   137  00134C  06E8               	decf	wreg,f,c
   138  00134E  E1FD               	bnz	clear_2
   139                           
   140                           ; Clear objects allocated to BANK1 (206 bytes)
   141  001350  EE01  F000         	lfsr	0,__pbssBANK1
   142  001354  0ECE               	movlw	206
   143  001356                     clear_3:
   144  001356  6AEE               	clrf	postinc0,c
   145  001358  06E8               	decf	wreg,f,c
   146  00135A  E1FD               	bnz	clear_3
   147                           
   148                           ; Clear objects allocated to BANK0 (35 bytes)
   149  00135C  EE00  F060         	lfsr	0,__pbssBANK0
   150  001360  0E23               	movlw	35
   151  001362                     clear_4:
   152  001362  6AEE               	clrf	postinc0,c
   153  001364  06E8               	decf	wreg,f,c
   154  001366  E1FD               	bnz	clear_4
   155                           
   156                           ; Clear objects allocated to COMRAM (30 bytes)
   157  001368  EE00  F026         	lfsr	0,__pbssCOMRAM
   158  00136C  0E1E               	movlw	30
   159  00136E                     clear_5:
   160  00136E  6AEE               	clrf	postinc0,c
   161  001370  06E8               	decf	wreg,f,c
   162  001372  E1FD               	bnz	clear_5
   163                           
   164                           ; Initialize objects allocated to COMRAM (1 bytes)
   165                           ; load TBLPTR registers with __pidataCOMRAM
   166  001374  0E68               	movlw	low __pidataCOMRAM
   167  001376  6EF6               	movwf	tblptrl,c
   168  001378  0E18               	movlw	high __pidataCOMRAM
   169  00137A  6EF7               	movwf	tblptrh,c
   170  00137C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   171  00137E  6EF8               	movwf	tblptru,c
   172  001380  0009               	tblrd		*+	;fetch initializer
   173  001382  CFF5 F044          	movff	tablat,__pdataCOMRAM
   174  001386                     end_of_initialization:
   175                           	opt stack 0
   176  001386                     __end_of__initialization:
   177                           	opt stack 0
   178  001386  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   179  001388  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   180  00138A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   181  00138C  6EF8               	movwf	tblptru,c
   182  00138E  0100               	movlb	0
   183  001390  EF0B  F00B         	goto	_main	;jump to C main() function
   184                           tblptru	equ	0xFF8
   185                           tblptrh	equ	0xFF7
   186                           tblptrl	equ	0xFF6
   187                           tablat	equ	0xFF5
   188                           postinc0	equ	0xFEE
   189                           wreg	equ	0xFE8
   190                           
   191                           	psect	bssCOMRAM
   192  000026                     __pbssCOMRAM:
   193                           	opt stack 0
   194  000026                     _alignErrorCounter:
   195                           	opt stack 0
   196  000026                     	ds	2
   197  000028                     _crcErrorCounter:
   198                           	opt stack 0
   199  000028                     	ds	2
   200  00002A                     _group:
   201                           	opt stack 0
   202  00002A                     	ds	2
   203  00002C                     _receiveArrayAddress:
   204                           	opt stack 0
   205  00002C                     	ds	2
   206  00002E                     _sendStructAddress:
   207                           	opt stack 0
   208  00002E                     	ds	2
   209  000030                     _serial_available:
   210                           	opt stack 0
   211  000030                     	ds	2
   212  000032                     _serial_peek:
   213                           	opt stack 0
   214  000032                     	ds	2
   215  000034                     _serial_read:
   216                           	opt stack 0
   217  000034                     	ds	2
   218  000036                     _serial_write:
   219                           	opt stack 0
   220  000036                     	ds	2
   221  000038                     _timer0ReloadVal16bit:
   222                           	opt stack 0
   223  000038                     	ds	2
   224  00003A                     _AKNAKsend:
   225                           	opt stack 0
   226  00003A                     	ds	1
   227  00003B                     _ByteHigh:
   228                           	opt stack 0
   229  00003B                     	ds	1
   230  00003C                     _ByteLow:
   231                           	opt stack 0
   232  00003C                     	ds	1
   233  00003D                     _calc_CS:
   234                           	opt stack 0
   235  00003D                     	ds	1
   236  00003E                     _maxDataAddress:
   237                           	opt stack 0
   238  00003E                     	ds	1
   239  00003F                     _moduleAddress:
   240                           	opt stack 0
   241  00003F                     	ds	1
   242  000040                     _returnAddress:
   243                           	opt stack 0
   244  000040                     	ds	1
   245  000041                     _rx_address:
   246                           	opt stack 0
   247  000041                     	ds	1
   248  000042                     _rx_array_inx:
   249                           	opt stack 0
   250  000042                     	ds	1
   251  000043                     _rx_len:
   252                           	opt stack 0
   253  000043                     	ds	1
   254                           tblptru	equ	0xFF8
   255                           tblptrh	equ	0xFF7
   256                           tblptrl	equ	0xFF6
   257                           tablat	equ	0xFF5
   258                           postinc0	equ	0xFEE
   259                           wreg	equ	0xFE8
   260                           
   261                           	psect	dataCOMRAM
   262  000044                     __pdataCOMRAM:
   263                           	opt stack 0
   264  000044                     _Transmit_stall:
   265                           	opt stack 0
   266  000044                     	ds	1
   267                           tblptru	equ	0xFF8
   268                           tblptrh	equ	0xFF7
   269                           tblptrl	equ	0xFF6
   270                           tablat	equ	0xFF5
   271                           postinc0	equ	0xFEE
   272                           wreg	equ	0xFE8
   273                           
   274                           	psect	bssBANK0
   275  000060                     __pbssBANK0:
   276                           	opt stack 0
   277  000060                     _time:
   278                           	opt stack 0
   279  000060                     	ds	4
   280  000064                     _addressErrorCounter:
   281                           	opt stack 0
   282  000064                     	ds	2
   283  000066                     _dataAdressErrorCounter:
   284                           	opt stack 0
   285  000066                     	ds	2
   286  000068                     _crc_buffer:
   287                           	opt stack 0
   288  000068                     	ds	17
   289  000079                     _receiveArray:
   290                           	opt stack 0
   291  000079                     	ds	10
   292                           tblptru	equ	0xFF8
   293                           tblptrh	equ	0xFF7
   294                           tblptrl	equ	0xFF6
   295                           tablat	equ	0xFF5
   296                           postinc0	equ	0xFEE
   297                           wreg	equ	0xFE8
   298                           
   299                           	psect	bssBANK1
   300  000100                     __pbssBANK1:
   301                           	opt stack 0
   302  000100                     _ring_buffer:
   303                           	opt stack 0
   304  000100                     	ds	206
   305                           tblptru	equ	0xFF8
   306                           tblptrh	equ	0xFF7
   307                           tblptrl	equ	0xFF6
   308                           tablat	equ	0xFF5
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           
   312                           	psect	bssBANK2
   313  000200                     __pbssBANK2:
   314                           	opt stack 0
   315  000200                     _rx_buffer:
   316                           	opt stack 0
   317  000200                     	ds	200
   318                           tblptru	equ	0xFF8
   319                           tblptrh	equ	0xFF7
   320                           tblptrl	equ	0xFF6
   321                           tablat	equ	0xFF5
   322                           postinc0	equ	0xFEE
   323                           wreg	equ	0xFE8
   324                           
   325                           	psect	bssBANK3
   326  000300                     __pbssBANK3:
   327                           	opt stack 0
   328  000300                     _input_buffer:
   329                           	opt stack 0
   330  000300                     	ds	206
   331                           tblptru	equ	0xFF8
   332                           tblptrh	equ	0xFF7
   333                           tblptrl	equ	0xFF6
   334                           tablat	equ	0xFF5
   335                           postinc0	equ	0xFEE
   336                           wreg	equ	0xFE8
   337                           
   338                           	psect	bssBANK4
   339  000400                     __pbssBANK4:
   340                           	opt stack 0
   341  000400                     _output_buffer:
   342                           	opt stack 0
   343  000400                     	ds	206
   344                           tblptru	equ	0xFF8
   345                           tblptrh	equ	0xFF7
   346                           tblptrl	equ	0xFF6
   347                           tablat	equ	0xFF5
   348                           postinc0	equ	0xFEE
   349                           wreg	equ	0xFE8
   350                           
   351                           	psect	cstackBANK0
   352  000083                     __pcstackBANK0:
   353                           	opt stack 0
   354  000083                     ??_FastTransfer_buffer_put:
   355  000083                     Send_put@_data:
   356                           	opt stack 0
   357  000083                     begin@ptr:
   358                           	opt stack 0
   359  000083                     FastTransfer_buffer_flush@_this:
   360                           	opt stack 0
   361  000083                     crcBufS_get@wantedTime:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0x0
   365  000083                     	ds	2
   366  000085                     begin@maxSize:
   367                           	opt stack 0
   368  000085                     CRCcheck@SentCRC:
   369                           	opt stack 0
   370  000085                     ToSend@what:
   371                           	opt stack 0
   372  000085                     FastTransfer_buffer_flush@clearBuffer:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x2
   376  000085                     	ds	1
   377  000086                     begin@givenAddress:
   378                           	opt stack 0
   379  000086                     CRCcheck@calculatedCRC:
   380                           	opt stack 0
   381                           
   382                           ; 1 bytes @ 0x3
   383  000086                     	ds	1
   384  000087                     ??_sendData:
   385  000087                     begin@error:
   386                           	opt stack 0
   387  000087                     ToSend@where:
   388                           	opt stack 0
   389  000087                     CRCcheck@arrayHolder:
   390                           	opt stack 0
   391                           
   392                           ; 3 bytes @ 0x4
   393  000087                     	ds	1
   394  000088                     sendData@whereToSend:
   395                           	opt stack 0
   396  000088                     begin@stufftosend:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x5
   400  000088                     	ds	1
   401  000089                     sendData@CS:
   402                           	opt stack 0
   403                           
   404                           ; 1 bytes @ 0x6
   405  000089                     	ds	1
   406  00008A                     begin@stufftoreceive:
   407                           	opt stack 0
   408  00008A                     sendData@i:
   409                           	opt stack 0
   410  00008A                     CRCcheck@rt:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x7
   414  00008A                     	ds	2
   415  00008C                     ??_receiveData:
   416  00008C                     ??_respondECU:
   417  00008C                     begin@stuffavailable:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x9
   421  00008C                     	ds	2
   422  00008E                     begin@stuffpeek:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0xB
   426  00008E                     	ds	4
   427  000092                     receiveData@holder:
   428                           	opt stack 0
   429                           
   430                           ; 3 bytes @ 0xF
   431  000092                     	ds	3
   432  000095                     receiveData@holder_329:
   433                           	opt stack 0
   434                           
   435                           ; 3 bytes @ 0x12
   436  000095                     	ds	3
   437  000098                     receiveData@crcHolder:
   438                           	opt stack 0
   439                           
   440                           ; 1 bytes @ 0x15
   441  000098                     	ds	1
   442  000099                     receiveData@crcHolder_330:
   443                           	opt stack 0
   444                           
   445                           ; 1 bytes @ 0x16
   446  000099                     	ds	1
   447  00009A                     receiveData@u:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x17
   451  00009A                     	ds	2
   452  00009C                     receiveData@r:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0x19
   456  00009C                     	ds	2
   457                           tblptru	equ	0xFF8
   458                           tblptrh	equ	0xFF7
   459                           tblptrl	equ	0xFF6
   460                           tablat	equ	0xFF5
   461                           postinc0	equ	0xFEE
   462                           wreg	equ	0xFE8
   463                           
   464                           	psect	cstackCOMRAM
   465  000001                     __pcstackCOMRAM:
   466                           	opt stack 0
   467  000001                     ?i2_UART_buff_size:
   468                           	opt stack 0
   469  000001                     ?i2_UART_buff_modulo_inc:
   470                           	opt stack 0
   471  000001                     i2UART_buff_size@_this:
   472                           	opt stack 0
   473  000001                     i2UART_buff_modulo_inc@value:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x0
   477  000001                     	ds	2
   478  000003                     i2UART_buff_modulo_inc@modulus:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x2
   482  000003                     	ds	2
   483  000005                     i2UART_buff_modulo_inc@my_value:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x4
   487  000005                     	ds	2
   488  000007                     i2UART_buff_put@_this:
   489                           	opt stack 0
   490  000007                     i2UART_buff_get@_this:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x6
   494  000007                     	ds	2
   495  000009                     ??i2_UART_buff_get:
   496  000009                     i2UART_buff_put@c:
   497                           	opt stack 0
   498                           
   499                           ; 1 bytes @ 0x8
   500  000009                     	ds	1
   501  00000A                     ??i2_UART_buff_put:
   502                           
   503                           ; 1 bytes @ 0x9
   504  00000A                     	ds	1
   505  00000B                     i2UART_buff_get@c:
   506                           	opt stack 0
   507                           
   508                           ; 1 bytes @ 0xA
   509  00000B                     	ds	1
   510  00000C                     EUSART1_Receive_ISR@data:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0xB
   514  00000C                     	ds	1
   515  00000D                     ??_INTERRUPT_InterruptManager:
   516                           
   517                           ; 1 bytes @ 0xC
   518  00000D                     	ds	14
   519  00001B                     ??_ReadFaults:
   520  00001B                     ?_FastTransfer_buffer_modulo_inc:
   521                           	opt stack 0
   522  00001B                     ?_UART_buff_modulo_inc:
   523                           	opt stack 0
   524  00001B                     ?_UART_buff_size:
   525                           	opt stack 0
   526  00001B                     ?___awdiv:
   527                           	opt stack 0
   528  00001B                     ?_GetTime:
   529                           	opt stack 0
   530  00001B                     GetFaults@num:
   531                           	opt stack 0
   532  00001B                     CRC8@data:
   533                           	opt stack 0
   534  00001B                     FastTransfer_buffer_modulo_inc@value:
   535                           	opt stack 0
   536  00001B                     crcBufS_put@_this:
   537                           	opt stack 0
   538  00001B                     crcBufS_status_put@_this:
   539                           	opt stack 0
   540  00001B                     crcBufS_get@_this:
   541                           	opt stack 0
   542  00001B                     UART_buff_size@_this:
   543                           	opt stack 0
   544  00001B                     UART_buff_modulo_inc@value:
   545                           	opt stack 0
   546  00001B                     UART_buff_peek@_this:
   547                           	opt stack 0
   548  00001B                     Delay@wait:
   549                           	opt stack 0
   550  00001B                     ___awdiv@dividend:
   551                           	opt stack 0
   552  00001B                     memset@p1:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x1A
   556  00001B                     	ds	2
   557  00001D                     ??_Delay:
   558  00001D                     ??_UART_buff_peek:
   559  00001D                     ?_Receive_available:
   560                           	opt stack 0
   561  00001D                     CRC8@len:
   562                           	opt stack 0
   563  00001D                     crcBufS_put@address:
   564                           	opt stack 0
   565  00001D                     crcBufS_status_put@time:
   566                           	opt stack 0
   567  00001D                     crcBufS_get@time:
   568                           	opt stack 0
   569  00001D                     FastTransfer_buffer_modulo_inc@modulus:
   570                           	opt stack 0
   571  00001D                     UART_buff_modulo_inc@modulus:
   572                           	opt stack 0
   573  00001D                     ___awdiv@divisor:
   574                           	opt stack 0
   575  00001D                     memset@c:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0x1C
   579  00001D                     	ds	1
   580  00001E                     CRC8@sum:
   581                           	opt stack 0
   582  00001E                     crcBufS_put@oldCRC:
   583                           	opt stack 0
   584  00001E                     crcBufS_status_put@status:
   585                           	opt stack 0
   586  00001E                     crcBufS_get@space:
   587                           	opt stack 0
   588  00001E                     Delay@x:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0x1D
   592  00001E                     	ds	1
   593  00001F                     ??_crcBufS_get:
   594  00001F                     ??_crcBufS_status_put:
   595  00001F                     CRC8@extract:
   596                           	opt stack 0
   597  00001F                     crcBufS_put@status:
   598                           	opt stack 0
   599  00001F                     ___awdiv@counter:
   600                           	opt stack 0
   601  00001F                     FastTransfer_buffer_modulo_inc@my_value:
   602                           	opt stack 0
   603  00001F                     UART_buff_modulo_inc@my_value:
   604                           	opt stack 0
   605  00001F                     memset@n:
   606                           	opt stack 0
   607                           
   608                           ; 2 bytes @ 0x1E
   609  00001F                     	ds	1
   610  000020                     ??_crcBufS_put:
   611  000020                     CRC8@tempI:
   612                           	opt stack 0
   613  000020                     ___awdiv@sign:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x1F
   617  000020                     	ds	1
   618  000021                     CRC8@crc:
   619                           	opt stack 0
   620  000021                     FastTransfer_buffer_put@_this:
   621                           	opt stack 0
   622  000021                     UART_buff_put@_this:
   623                           	opt stack 0
   624  000021                     UART_buff_get@_this:
   625                           	opt stack 0
   626  000021                     ___awdiv@quotient:
   627                           	opt stack 0
   628  000021                     memset@p:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x20
   632  000021                     	ds	2
   633  000023                     ??_UART_buff_get:
   634  000023                     FastTransfer_buffer_put@towhere:
   635                           	opt stack 0
   636  000023                     UART_buff_put@c:
   637                           	opt stack 0
   638  000023                     crcBufS_status_put@wantedTime:
   639                           	opt stack 0
   640  000023                     UART_buff_init@_this:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0x22
   644  000023                     	ds	1
   645  000024                     ??_UART_buff_put:
   646  000024                     FastTransfer_buffer_put@towhat:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0x23
   650  000024                     	ds	1
   651  000025                     UART_buff_get@c:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0x24
   655  000025                     	ds	1
   656  000026                     tblptru	equ	0xFF8
   657                           tblptrh	equ	0xFF7
   658                           tblptrl	equ	0xFF6
   659                           tablat	equ	0xFF5
   660                           postinc0	equ	0xFEE
   661                           wreg	equ	0xFE8
   662                           
   663                           ; 1 bytes @ 0x25
   664 ;;
   665 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   666 ;;
   667 ;; *************** function _main *****************
   668 ;; Defined at:
   669 ;;		line 23 in file "Main.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;		None
   672 ;; Auto vars:     Size  Location     Type
   673 ;;		None
   674 ;; Return value:  Size  Location     Type
   675 ;;                  1    wreg      void 
   676 ;; Registers used:
   677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   678 ;; Tracked objects:
   679 ;;		On entry : 0/0
   680 ;;		On exit  : 0/0
   681 ;;		Unchanged: 0/0
   682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   683 ;;      Params:         0       0       0       0       0       0       0
   684 ;;      Locals:         0       0       0       0       0       0       0
   685 ;;      Temps:          0       0       0       0       0       0       0
   686 ;;      Totals:         0       0       0       0       0       0       0
   687 ;;Total ram usage:        0 bytes
   688 ;; Hardware stack levels required when called:   10
   689 ;; This function calls:
   690 ;;		_GetTime
   691 ;;		_ReadFaults
   692 ;;		_SetTime
   693 ;;		_Start
   694 ;;		_updateComms
   695 ;; This function is called by:
   696 ;;		Startup code after reset
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700                           	psect	text0
   701  001616                     __ptext0:
   702                           	opt stack 0
   703  001616                     _main:
   704                           	opt stack 21
   705                           
   706                           ;Main.c: 24: Start();
   707                           
   708                           ;incstack = 0
   709  001616  EC56  F00A         	call	_Start	;wreg free
   710  00161A                     l2873:
   711                           
   712                           ;Main.c: 26: updateComms();
   713  00161A  EC1C  F00C         	call	_updateComms	;wreg free
   714                           
   715                           ;Main.c: 27: if(GetTime() > 5){
   716  00161E  EC13  F00C         	call	_GetTime	;wreg free
   717  001622  BE1E               	btfsc	?_GetTime+3,7,c
   718  001624  D7FA               	goto	l2873
   719  001626  501E               	movf	?_GetTime+3,w,c
   720  001628  101D               	iorwf	?_GetTime+2,w,c
   721  00162A  101C               	iorwf	?_GetTime+1,w,c
   722  00162C  E104               	bnz	u3330
   723  00162E  0E06               	movlw	6
   724  001630  5C1B               	subwf	?_GetTime,w,c
   725  001632  A0D8               	btfss	status,0,c
   726  001634  D7F2               	goto	l2873
   727  001636                     u3330:
   728                           
   729                           ;Main.c: 28: LATAbits.LATA3 ^= 1;
   730  001636  7689               	btg	3977,3,c	;volatile
   731                           
   732                           ;Main.c: 29: ReadFaults();
   733  001638  EC47  F007         	call	_ReadFaults	;wreg free
   734                           
   735                           ;Main.c: 30: SetTime();
   736  00163C  EC09  F00C         	call	_SetTime	;wreg free
   737  001640  D7EC               	goto	l2873
   738  001642                     __end_of_main:
   739                           	opt stack 0
   740                           tblptru	equ	0xFF8
   741                           tblptrh	equ	0xFF7
   742                           tblptrl	equ	0xFF6
   743                           tablat	equ	0xFF5
   744                           postinc0	equ	0xFEE
   745                           wreg	equ	0xFE8
   746                           status	equ	0xFD8
   747                           
   748 ;; *************** function _updateComms *****************
   749 ;; Defined at:
   750 ;;		line 17 in file "Communications.c"
   751 ;; Parameters:    Size  Location     Type
   752 ;;		None
   753 ;; Auto vars:     Size  Location     Type
   754 ;;		None
   755 ;; Return value:  Size  Location     Type
   756 ;;                  1    wreg      void 
   757 ;; Registers used:
   758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   759 ;; Tracked objects:
   760 ;;		On entry : 0/0
   761 ;;		On exit  : 0/0
   762 ;;		Unchanged: 0/0
   763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   764 ;;      Params:         0       0       0       0       0       0       0
   765 ;;      Locals:         0       0       0       0       0       0       0
   766 ;;      Temps:          0       0       0       0       0       0       0
   767 ;;      Totals:         0       0       0       0       0       0       0
   768 ;;Total ram usage:        0 bytes
   769 ;; Hardware stack levels used:    1
   770 ;; Hardware stack levels required when called:    9
   771 ;; This function calls:
   772 ;;		_receiveData
   773 ;;		_respondECU
   774 ;; This function is called by:
   775 ;;		_main
   776 ;; This function uses a non-reentrant model
   777 ;;
   778                           
   779                           	psect	text1
   780  001838                     __ptext1:
   781                           	opt stack 0
   782  001838                     _updateComms:
   783                           	opt stack 21
   784                           
   785                           ;Communications.c: 18: if (receiveData()) {
   786                           
   787                           ;incstack = 0
   788  001838  EC52  F000         	call	_receiveData	;wreg free
   789  00183C  0900               	iorlw	0
   790  00183E  B4D8               	btfsc	status,2,c
   791  001840  0012               	return	
   792                           
   793                           ;Communications.c: 19: respondECU();
   794  001842  ECCA  F009         	call	_respondECU	;wreg free
   795  001846  0012               	return	
   796  001848                     __end_of_updateComms:
   797                           	opt stack 0
   798                           tblptru	equ	0xFF8
   799                           tblptrh	equ	0xFF7
   800                           tblptrl	equ	0xFF6
   801                           tablat	equ	0xFF5
   802                           postinc0	equ	0xFEE
   803                           wreg	equ	0xFE8
   804                           status	equ	0xFD8
   805                           
   806 ;; *************** function _respondECU *****************
   807 ;; Defined at:
   808 ;;		line 23 in file "Communications.c"
   809 ;; Parameters:    Size  Location     Type
   810 ;;		None
   811 ;; Auto vars:     Size  Location     Type
   812 ;;		None
   813 ;; Return value:  Size  Location     Type
   814 ;;                  1    wreg      void 
   815 ;; Registers used:
   816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
   817 ;; Tracked objects:
   818 ;;		On entry : 0/0
   819 ;;		On exit  : 0/0
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   822 ;;      Params:         0       0       0       0       0       0       0
   823 ;;      Locals:         0       0       0       0       0       0       0
   824 ;;      Temps:          0       1       0       0       0       0       0
   825 ;;      Totals:         0       1       0       0       0       0       0
   826 ;;Total ram usage:        1 bytes
   827 ;; Hardware stack levels used:    1
   828 ;; Hardware stack levels required when called:    8
   829 ;; This function calls:
   830 ;;		_Delay
   831 ;;		_GetFaults
   832 ;;		_ToSend
   833 ;;		_sendData
   834 ;; This function is called by:
   835 ;;		_updateComms
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           	psect	text2
   840  001394                     __ptext2:
   841                           	opt stack 0
   842  001394                     _respondECU:
   843                           	opt stack 21
   844                           
   845                           ;Communications.c: 24: LATDbits.LATD4 = 1;
   846                           
   847                           ;incstack = 0
   848  001394  888C               	bsf	3980,4,c	;volatile
   849                           
   850                           ;Communications.c: 25: ToSend(0,8);
   851  001396  0E00               	movlw	0
   852  001398  0100               	movlb	0	; () banked
   853  00139A  6F86               	movwf	(ToSend@what+1)& (0+255),b
   854  00139C  0E08               	movlw	8
   855  00139E  6F85               	movwf	ToSend@what& (0+255),b
   856  0013A0  0E00               	movlw	0
   857  0013A2  EC88  F00B         	call	_ToSend
   858                           
   859                           ;Communications.c: 26: ToSend(1,GetFaults(1));
   860  0013A6  0E01               	movlw	1
   861  0013A8  ECDD  F00B         	call	_GetFaults
   862  0013AC  0100               	movlb	0	; () banked
   863  0013AE  6F8C               	movwf	??_respondECU& (0+255),b
   864  0013B0  0100               	movlb	0	; () banked
   865  0013B2  518C               	movf	??_respondECU& (0+255),w,b
   866  0013B4  0100               	movlb	0	; () banked
   867  0013B6  6F85               	movwf	ToSend@what& (0+255),b
   868  0013B8  6B86               	clrf	(ToSend@what+1)& (0+255),b
   869  0013BA  0E01               	movlw	1
   870  0013BC  EC88  F00B         	call	_ToSend
   871                           
   872                           ;Communications.c: 27: ToSend(2,GetFaults(0));
   873  0013C0  0E00               	movlw	0
   874  0013C2  ECDD  F00B         	call	_GetFaults
   875  0013C6  0100               	movlb	0	; () banked
   876  0013C8  6F8C               	movwf	??_respondECU& (0+255),b
   877  0013CA  0100               	movlb	0	; () banked
   878  0013CC  518C               	movf	??_respondECU& (0+255),w,b
   879  0013CE  0100               	movlb	0	; () banked
   880  0013D0  6F85               	movwf	ToSend@what& (0+255),b
   881  0013D2  6B86               	clrf	(ToSend@what+1)& (0+255),b
   882  0013D4  0E02               	movlw	2
   883  0013D6  EC88  F00B         	call	_ToSend
   884                           
   885                           ;Communications.c: 28: Delay(9);
   886  0013DA  0E00               	movlw	0
   887  0013DC  6E1C               	movwf	Delay@wait+1,c
   888  0013DE  0E09               	movlw	9
   889  0013E0  6E1B               	movwf	Delay@wait,c
   890  0013E2  ECC0  F00A         	call	_Delay	;wreg free
   891                           
   892                           ;Communications.c: 29: sendData(1);
   893  0013E6  0E01               	movlw	1
   894  0013E8  EC0F  F005         	call	_sendData
   895                           
   896                           ;Communications.c: 30: Delay(3);
   897  0013EC  0E00               	movlw	0
   898  0013EE  6E1C               	movwf	Delay@wait+1,c
   899  0013F0  0E03               	movlw	3
   900  0013F2  6E1B               	movwf	Delay@wait,c
   901  0013F4  ECC0  F00A         	call	_Delay	;wreg free
   902                           
   903                           ;Communications.c: 31: LATDbits.LATD4 = 0;
   904  0013F8  988C               	bcf	3980,4,c	;volatile
   905  0013FA  0012               	return		;funcret
   906  0013FC                     __end_of_respondECU:
   907                           	opt stack 0
   908                           tblptru	equ	0xFF8
   909                           tblptrh	equ	0xFF7
   910                           tblptrl	equ	0xFF6
   911                           tablat	equ	0xFF5
   912                           postinc0	equ	0xFEE
   913                           wreg	equ	0xFE8
   914                           status	equ	0xFD8
   915                           
   916 ;; *************** function _sendData *****************
   917 ;; Defined at:
   918 ;;		line 108 in file "FastTransfer.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;  whereToSend     1    wreg     unsigned char 
   921 ;; Auto vars:     Size  Location     Type
   922 ;;  whereToSend     1    5[BANK0 ] unsigned char 
   923 ;;  i               2    7[BANK0 ] int 
   924 ;;  CS              1    6[BANK0 ] unsigned char 
   925 ;; Return value:  Size  Location     Type
   926 ;;                  1    wreg      void 
   927 ;; Registers used:
   928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
   929 ;; Tracked objects:
   930 ;;		On entry : 0/0
   931 ;;		On exit  : 0/0
   932 ;;		Unchanged: 0/0
   933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   934 ;;      Params:         0       0       0       0       0       0       0
   935 ;;      Locals:         0       4       0       0       0       0       0
   936 ;;      Temps:          0       1       0       0       0       0       0
   937 ;;      Totals:         0       5       0       0       0       0       0
   938 ;;Total ram usage:        5 bytes
   939 ;; Hardware stack levels used:    1
   940 ;; Hardware stack levels required when called:    7
   941 ;; This function calls:
   942 ;;		Absolute function
   943 ;;		_CRC8
   944 ;;		_FastTransfer_buffer_flush
   945 ;;		_Send_put
   946 ;;		_crcBufS_put
   947 ;; This function is called by:
   948 ;;		_respondECU
   949 ;; This function uses a non-reentrant model
   950 ;;
   951                           
   952                           	psect	text3
   953  000A1E                     __ptext3:
   954                           	opt stack 0
   955  000A1E                     _sendData:
   956                           	opt stack 21
   957                           
   958                           ;incstack = 0
   959                           ;sendData@whereToSend stored from wreg
   960  000A1E  0100               	movlb	0	; () banked
   961  000A20  6F88               	movwf	sendData@whereToSend& (0+255),b
   962                           
   963                           ;FastTransfer.c: 111: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
   964  000A22  C02E  F01B         	movff	_sendStructAddress,CRC8@data
   965  000A26  C02F  F01C         	movff	_sendStructAddress+1,CRC8@data+1
   966  000A2A  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
   967  000A2E  EC7D  F00A         	call	_CRC8	;wreg free
   968  000A32  0100               	movlb	0	; () banked
   969  000A34  6F89               	movwf	sendData@CS& (0+255),b
   970                           
   971                           ; BSR set to: 0
   972                           ;FastTransfer.c: 113: serial_write(0x06);
   973  000A36  D801               	call	u2588
   974  000A38  D00B               	goto	l2587
   975  000A3A                     u2588:
   976  000A3A  0005               	push	
   977  000A3C  6EFA               	movwf	pclath,c
   978  000A3E  5036               	movf	_serial_write,w,c
   979  000A40  6EFD               	movwf	tosl,c
   980  000A42  5037               	movf	_serial_write+1,w,c
   981  000A44  6EFE               	movwf	tosh,c
   982  000A46  50F8               	movf	tblptru,w,c
   983  000A48  6EFF               	movwf	tosu,c
   984  000A4A  50FA               	movf	pclath,w,c
   985  000A4C  0E06               	movlw	6
   986  000A4E  0012               	return		;indir
   987  000A50                     l2587:
   988                           
   989                           ;FastTransfer.c: 114: serial_write(0x85);
   990  000A50  D801               	call	u2598
   991  000A52  D00B               	goto	l2589
   992  000A54                     u2598:
   993  000A54  0005               	push	
   994  000A56  6EFA               	movwf	pclath,c
   995  000A58  5036               	movf	_serial_write,w,c
   996  000A5A  6EFD               	movwf	tosl,c
   997  000A5C  5037               	movf	_serial_write+1,w,c
   998  000A5E  6EFE               	movwf	tosh,c
   999  000A60  50F8               	movf	tblptru,w,c
  1000  000A62  6EFF               	movwf	tosu,c
  1001  000A64  50FA               	movf	pclath,w,c
  1002  000A66  0E85               	movlw	133
  1003  000A68  0012               	return		;indir
  1004  000A6A                     l2589:
  1005                           
  1006                           ;FastTransfer.c: 115: serial_write(whereToSend);
  1007  000A6A  D801               	call	u2608
  1008  000A6C  D00C               	goto	l2591
  1009  000A6E                     u2608:
  1010  000A6E  0005               	push	
  1011  000A70  6EFA               	movwf	pclath,c
  1012  000A72  5036               	movf	_serial_write,w,c
  1013  000A74  6EFD               	movwf	tosl,c
  1014  000A76  5037               	movf	_serial_write+1,w,c
  1015  000A78  6EFE               	movwf	tosh,c
  1016  000A7A  50F8               	movf	tblptru,w,c
  1017  000A7C  6EFF               	movwf	tosu,c
  1018  000A7E  50FA               	movf	pclath,w,c
  1019  000A80  0100               	movlb	0	; () banked
  1020  000A82  5188               	movf	sendData@whereToSend& (0+255),w,b
  1021  000A84  0012               	return		;indir
  1022  000A86                     l2591:
  1023                           
  1024                           ;FastTransfer.c: 116: serial_write(moduleAddress);
  1025  000A86  D801               	call	u2618
  1026  000A88  D00B               	goto	l2593
  1027  000A8A                     u2618:
  1028  000A8A  0005               	push	
  1029  000A8C  6EFA               	movwf	pclath,c
  1030  000A8E  5036               	movf	_serial_write,w,c
  1031  000A90  6EFD               	movwf	tosl,c
  1032  000A92  5037               	movf	_serial_write+1,w,c
  1033  000A94  6EFE               	movwf	tosh,c
  1034  000A96  50F8               	movf	tblptru,w,c
  1035  000A98  6EFF               	movwf	tosu,c
  1036  000A9A  50FA               	movf	pclath,w,c
  1037  000A9C  503F               	movf	_moduleAddress,w,c
  1038  000A9E  0012               	return		;indir
  1039  000AA0                     l2593:
  1040                           
  1041                           ;FastTransfer.c: 117: serial_write(ring_buffer.count);
  1042  000AA0  D801               	call	u2628
  1043  000AA2  D00C               	goto	l2595
  1044  000AA4                     u2628:
  1045  000AA4  0005               	push	
  1046  000AA6  6EFA               	movwf	pclath,c
  1047  000AA8  5036               	movf	_serial_write,w,c
  1048  000AAA  6EFD               	movwf	tosl,c
  1049  000AAC  5037               	movf	_serial_write+1,w,c
  1050  000AAE  6EFE               	movwf	tosh,c
  1051  000AB0  50F8               	movf	tblptru,w,c
  1052  000AB2  6EFF               	movwf	tosu,c
  1053  000AB4  50FA               	movf	pclath,w,c
  1054  000AB6  0101               	movlb	1	; () banked
  1055  000AB8  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1056  000ABA  0012               	return		;indir
  1057  000ABC                     l2595:
  1058                           
  1059                           ;FastTransfer.c: 121: int i;
  1060                           ;FastTransfer.c: 122: for (i = 0; i < ring_buffer.count; i++) {
  1061  000ABC  0E00               	movlw	0
  1062  000ABE  0100               	movlb	0	; () banked
  1063  000AC0  6F8B               	movwf	(sendData@i+1)& (0+255),b
  1064  000AC2  0E00               	movlw	0
  1065  000AC4  6F8A               	movwf	sendData@i& (0+255),b
  1066  000AC6  D018               	goto	l2601
  1067  000AC8                     l2597:
  1068                           
  1069                           ; BSR set to: 0
  1070                           ;FastTransfer.c: 123: serial_write(*(sendStructAddress + i));
  1071  000AC8  D801               	call	u2638
  1072  000ACA  D013               	goto	l2599
  1073  000ACC                     u2638:
  1074  000ACC  0005               	push	
  1075  000ACE  6EFA               	movwf	pclath,c
  1076  000AD0  5036               	movf	_serial_write,w,c
  1077  000AD2  6EFD               	movwf	tosl,c
  1078  000AD4  5037               	movf	_serial_write+1,w,c
  1079  000AD6  6EFE               	movwf	tosh,c
  1080  000AD8  50F8               	movf	tblptru,w,c
  1081  000ADA  6EFF               	movwf	tosu,c
  1082  000ADC  50FA               	movf	pclath,w,c
  1083  000ADE  0100               	movlb	0	; () banked
  1084  000AE0  518A               	movf	sendData@i& (0+255),w,b
  1085  000AE2  242E               	addwf	_sendStructAddress,w,c
  1086  000AE4  6ED9               	movwf	fsr2l,c
  1087  000AE6  0100               	movlb	0	; () banked
  1088  000AE8  518B               	movf	(sendData@i+1)& (0+255),w,b
  1089  000AEA  202F               	addwfc	_sendStructAddress+1,w,c
  1090  000AEC  6EDA               	movwf	fsr2h,c
  1091  000AEE  50DF               	movf	indf2,w,c
  1092  000AF0  0012               	return		;indir
  1093  000AF2                     l2599:
  1094  000AF2  0100               	movlb	0	; () banked
  1095  000AF4  4B8A               	infsnz	sendData@i& (0+255),f,b
  1096  000AF6  2B8B               	incf	(sendData@i+1)& (0+255),f,b
  1097  000AF8                     l2601:
  1098                           
  1099                           ; BSR set to: 0
  1100  000AF8  0101               	movlb	1	; () banked
  1101  000AFA  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1102  000AFC  0100               	movlb	0	; () banked
  1103  000AFE  5D8A               	subwf	sendData@i& (0+255),w,b
  1104  000B00  0100               	movlb	0	; () banked
  1105  000B02  518B               	movf	(sendData@i+1)& (0+255),w,b
  1106  000B04  0A80               	xorlw	128
  1107  000B06  0100               	movlb	0	; () banked
  1108  000B08  6F87               	movwf	??_sendData& (0+255),b
  1109  000B0A  0101               	movlb	1	; () banked
  1110  000B0C  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  1111  000B0E  0A80               	xorlw	128
  1112  000B10  0100               	movlb	0	; () banked
  1113  000B12  5987               	subwfb	??_sendData& (0+255),w,b
  1114  000B14  A0D8               	btfss	status,0,c
  1115  000B16  D7D8               	goto	l2597
  1116                           
  1117                           ; BSR set to: 0
  1118                           ;FastTransfer.c: 124: }
  1119                           ;FastTransfer.c: 127: serial_write(CS);
  1120                           
  1121                           ; BSR set to: 0
  1122  000B18  D801               	call	u2658
  1123  000B1A  D00C               	goto	l2605
  1124  000B1C                     u2658:
  1125  000B1C  0005               	push	
  1126  000B1E  6EFA               	movwf	pclath,c
  1127  000B20  5036               	movf	_serial_write,w,c
  1128  000B22  6EFD               	movwf	tosl,c
  1129  000B24  5037               	movf	_serial_write+1,w,c
  1130  000B26  6EFE               	movwf	tosh,c
  1131  000B28  50F8               	movf	tblptru,w,c
  1132  000B2A  6EFF               	movwf	tosu,c
  1133  000B2C  50FA               	movf	pclath,w,c
  1134  000B2E  0100               	movlb	0	; () banked
  1135  000B30  5189               	movf	sendData@CS& (0+255),w,b
  1136  000B32  0012               	return		;indir
  1137  000B34                     l2605:
  1138                           
  1139                           ;FastTransfer.c: 130: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1140  000B34  0E68               	movlw	low _crc_buffer
  1141  000B36  6E1B               	movwf	crcBufS_put@_this,c
  1142  000B38  0E00               	movlw	high _crc_buffer
  1143  000B3A  6E1C               	movwf	crcBufS_put@_this+1,c
  1144  000B3C  C088  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1145  000B40  C089  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1146  000B44  0E00               	movlw	0
  1147  000B46  6E1F               	movwf	crcBufS_put@status,c
  1148  000B48  ECB5  F007         	call	_crcBufS_put
  1149                           
  1150                           ;FastTransfer.c: 133: FastTransfer_buffer_flush(&ring_buffer, 1);
  1151  000B4C  0E00               	movlw	low _ring_buffer
  1152  000B4E  0100               	movlb	0	; () banked
  1153  000B50  6F83               	movwf	FastTransfer_buffer_flush@_this& (0+255),b
  1154  000B52  0E01               	movlw	high _ring_buffer
  1155  000B54  0100               	movlb	0	; () banked
  1156  000B56  6F84               	movwf	(FastTransfer_buffer_flush@_this+1)& (0+255),b
  1157  000B58  0E00               	movlw	0
  1158  000B5A  0100               	movlb	0	; () banked
  1159  000B5C  6F86               	movwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),b
  1160  000B5E  0E01               	movlw	1
  1161  000B60  6F85               	movwf	FastTransfer_buffer_flush@clearBuffer& (0+255),b
  1162  000B62  EC60  F009         	call	_FastTransfer_buffer_flush	;wreg free
  1163  000B66  0012               	return		;funcret
  1164  000B68                     __end_of_sendData:
  1165                           	opt stack 0
  1166                           tosu	equ	0xFFF
  1167                           tosh	equ	0xFFE
  1168                           tosl	equ	0xFFD
  1169                           pclath	equ	0xFFA
  1170                           tblptru	equ	0xFF8
  1171                           tblptrh	equ	0xFF7
  1172                           tblptrl	equ	0xFF6
  1173                           tablat	equ	0xFF5
  1174                           postinc0	equ	0xFEE
  1175                           wreg	equ	0xFE8
  1176                           indf2	equ	0xFDF
  1177                           fsr2h	equ	0xFDA
  1178                           fsr2l	equ	0xFD9
  1179                           status	equ	0xFD8
  1180                           
  1181 ;; *************** function _crcBufS_put *****************
  1182 ;; Defined at:
  1183 ;;		line 377 in file "FastTransfer.c"
  1184 ;; Parameters:    Size  Location     Type
  1185 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1186 ;;		 -> crc_buffer(17), 
  1187 ;;  address         1   28[COMRAM] unsigned char 
  1188 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1189 ;;  status          1   30[COMRAM] unsigned char 
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;		None
  1192 ;; Return value:  Size  Location     Type
  1193 ;;                  1    wreg      void 
  1194 ;; Registers used:
  1195 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1196 ;; Tracked objects:
  1197 ;;		On entry : 0/0
  1198 ;;		On exit  : 0/0
  1199 ;;		Unchanged: 0/0
  1200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1201 ;;      Params:         5       0       0       0       0       0       0
  1202 ;;      Locals:         0       0       0       0       0       0       0
  1203 ;;      Temps:          2       0       0       0       0       0       0
  1204 ;;      Totals:         7       0       0       0       0       0       0
  1205 ;;Total ram usage:        7 bytes
  1206 ;; Hardware stack levels used:    1
  1207 ;; Hardware stack levels required when called:    4
  1208 ;; This function calls:
  1209 ;;		Nothing
  1210 ;; This function is called by:
  1211 ;;		_sendData
  1212 ;; This function uses a non-reentrant model
  1213 ;;
  1214                           
  1215                           	psect	text4
  1216  000F6A                     __ptext4:
  1217                           	opt stack 0
  1218  000F6A                     _crcBufS_put:
  1219                           	opt stack 23
  1220                           
  1221                           ;FastTransfer.c: 378: _this->buf[_this->head] = address;
  1222                           
  1223                           ;incstack = 0
  1224  000F6A  EE20 F00F          	lfsr	2,15
  1225  000F6E  501B               	movf	crcBufS_put@_this,w,c
  1226  000F70  26D9               	addwf	fsr2l,f,c
  1227  000F72  501C               	movf	crcBufS_put@_this+1,w,c
  1228  000F74  22DA               	addwfc	fsr2h,f,c
  1229  000F76  CFDE F020          	movff	postinc2,??_crcBufS_put
  1230  000F7A  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1231  000F7E  5020               	movf	??_crcBufS_put,w,c
  1232  000F80  241B               	addwf	crcBufS_put@_this,w,c
  1233  000F82  6ED9               	movwf	fsr2l,c
  1234  000F84  5021               	movf	??_crcBufS_put+1,w,c
  1235  000F86  201C               	addwfc	crcBufS_put@_this+1,w,c
  1236  000F88  6EDA               	movwf	fsr2h,c
  1237  000F8A  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1238                           
  1239                           ;FastTransfer.c: 379: _this->head++;
  1240  000F8E  EE20 F00F          	lfsr	2,15
  1241  000F92  501B               	movf	crcBufS_put@_this,w,c
  1242  000F94  26D9               	addwf	fsr2l,f,c
  1243  000F96  501C               	movf	crcBufS_put@_this+1,w,c
  1244  000F98  22DA               	addwfc	fsr2h,f,c
  1245  000F9A  2ADE               	incf	postinc2,f,c
  1246  000F9C  0E00               	movlw	0
  1247  000F9E  22DD               	addwfc	postdec2,f,c
  1248                           
  1249                           ;FastTransfer.c: 380: _this->buf[_this->head] = oldCRC;
  1250  000FA0  EE20 F00F          	lfsr	2,15
  1251  000FA4  501B               	movf	crcBufS_put@_this,w,c
  1252  000FA6  26D9               	addwf	fsr2l,f,c
  1253  000FA8  501C               	movf	crcBufS_put@_this+1,w,c
  1254  000FAA  22DA               	addwfc	fsr2h,f,c
  1255  000FAC  CFDE F020          	movff	postinc2,??_crcBufS_put
  1256  000FB0  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1257  000FB4  5020               	movf	??_crcBufS_put,w,c
  1258  000FB6  241B               	addwf	crcBufS_put@_this,w,c
  1259  000FB8  6ED9               	movwf	fsr2l,c
  1260  000FBA  5021               	movf	??_crcBufS_put+1,w,c
  1261  000FBC  201C               	addwfc	crcBufS_put@_this+1,w,c
  1262  000FBE  6EDA               	movwf	fsr2h,c
  1263  000FC0  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1264                           
  1265                           ;FastTransfer.c: 381: _this->head++;
  1266  000FC4  EE20 F00F          	lfsr	2,15
  1267  000FC8  501B               	movf	crcBufS_put@_this,w,c
  1268  000FCA  26D9               	addwf	fsr2l,f,c
  1269  000FCC  501C               	movf	crcBufS_put@_this+1,w,c
  1270  000FCE  22DA               	addwfc	fsr2h,f,c
  1271  000FD0  2ADE               	incf	postinc2,f,c
  1272  000FD2  0E00               	movlw	0
  1273  000FD4  22DD               	addwfc	postdec2,f,c
  1274                           
  1275                           ;FastTransfer.c: 382: _this->buf[_this->head] = status;
  1276  000FD6  EE20 F00F          	lfsr	2,15
  1277  000FDA  501B               	movf	crcBufS_put@_this,w,c
  1278  000FDC  26D9               	addwf	fsr2l,f,c
  1279  000FDE  501C               	movf	crcBufS_put@_this+1,w,c
  1280  000FE0  22DA               	addwfc	fsr2h,f,c
  1281  000FE2  CFDE F020          	movff	postinc2,??_crcBufS_put
  1282  000FE6  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1283  000FEA  5020               	movf	??_crcBufS_put,w,c
  1284  000FEC  241B               	addwf	crcBufS_put@_this,w,c
  1285  000FEE  6ED9               	movwf	fsr2l,c
  1286  000FF0  5021               	movf	??_crcBufS_put+1,w,c
  1287  000FF2  201C               	addwfc	crcBufS_put@_this+1,w,c
  1288  000FF4  6EDA               	movwf	fsr2h,c
  1289  000FF6  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1290                           
  1291                           ;FastTransfer.c: 383: _this->head++;
  1292  000FFA  EE20 F00F          	lfsr	2,15
  1293  000FFE  501B               	movf	crcBufS_put@_this,w,c
  1294  001000  26D9               	addwf	fsr2l,f,c
  1295  001002  501C               	movf	crcBufS_put@_this+1,w,c
  1296  001004  22DA               	addwfc	fsr2h,f,c
  1297  001006  2ADE               	incf	postinc2,f,c
  1298  001008  0E00               	movlw	0
  1299  00100A  22DD               	addwfc	postdec2,f,c
  1300                           
  1301                           ;FastTransfer.c: 384: if (_this->head >= (5 * 3)) {
  1302  00100C  EE20 F00F          	lfsr	2,15
  1303  001010  501B               	movf	crcBufS_put@_this,w,c
  1304  001012  26D9               	addwf	fsr2l,f,c
  1305  001014  501C               	movf	crcBufS_put@_this+1,w,c
  1306  001016  22DA               	addwfc	fsr2h,f,c
  1307  001018  0E01               	movlw	1
  1308  00101A  BEDB               	btfsc	plusw2,7,c
  1309  00101C  0012               	return	
  1310  00101E  0E01               	movlw	1
  1311  001020  50DB               	movf	plusw2,w,c
  1312  001022  E104               	bnz	u2490
  1313  001024  0E0F               	movlw	15
  1314  001026  5CDE               	subwf	postinc2,w,c
  1315  001028  A0D8               	btfss	status,0,c
  1316  00102A  0012               	return	
  1317  00102C                     u2490:
  1318                           
  1319                           ;FastTransfer.c: 385: _this->head = 0;
  1320  00102C  EE20 F00F          	lfsr	2,15
  1321  001030  501B               	movf	crcBufS_put@_this,w,c
  1322  001032  26D9               	addwf	fsr2l,f,c
  1323  001034  501C               	movf	crcBufS_put@_this+1,w,c
  1324  001036  22DA               	addwfc	fsr2h,f,c
  1325  001038  0E00               	movlw	0
  1326  00103A  6EDE               	movwf	postinc2,c
  1327  00103C  0E00               	movlw	0
  1328  00103E  6EDD               	movwf	postdec2,c
  1329  001040  0012               	return	
  1330  001042                     __end_of_crcBufS_put:
  1331                           	opt stack 0
  1332                           tosu	equ	0xFFF
  1333                           tosh	equ	0xFFE
  1334                           tosl	equ	0xFFD
  1335                           pclath	equ	0xFFA
  1336                           tblptru	equ	0xFF8
  1337                           tblptrh	equ	0xFF7
  1338                           tblptrl	equ	0xFF6
  1339                           tablat	equ	0xFF5
  1340                           postinc0	equ	0xFEE
  1341                           wreg	equ	0xFE8
  1342                           indf2	equ	0xFDF
  1343                           postinc2	equ	0xFDE
  1344                           postdec2	equ	0xFDD
  1345                           plusw2	equ	0xFDB
  1346                           fsr2h	equ	0xFDA
  1347                           fsr2l	equ	0xFD9
  1348                           status	equ	0xFD8
  1349                           
  1350 ;; *************** function _FastTransfer_buffer_flush *****************
  1351 ;; Defined at:
  1352 ;;		line 317 in file "FastTransfer.c"
  1353 ;; Parameters:    Size  Location     Type
  1354 ;;  _this           2    0[BANK0 ] PTR struct ringBufS
  1355 ;;		 -> ring_buffer(206), 
  1356 ;;  clearBuffer     2    2[BANK0 ] const int 
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;		None
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  1    wreg      void 
  1361 ;; Registers used:
  1362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1368 ;;      Params:         0       4       0       0       0       0       0
  1369 ;;      Locals:         0       0       0       0       0       0       0
  1370 ;;      Temps:          0       0       0       0       0       0       0
  1371 ;;      Totals:         0       4       0       0       0       0       0
  1372 ;;Total ram usage:        4 bytes
  1373 ;; Hardware stack levels used:    1
  1374 ;; Hardware stack levels required when called:    5
  1375 ;; This function calls:
  1376 ;;		_memset
  1377 ;; This function is called by:
  1378 ;;		_sendData
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382                           	psect	text5
  1383  0012C0                     __ptext5:
  1384                           	opt stack 0
  1385  0012C0                     _FastTransfer_buffer_flush:
  1386                           	opt stack 22
  1387                           
  1388                           ;FastTransfer.c: 318: _this->count = 0;
  1389                           
  1390                           ;incstack = 0
  1391  0012C0  0100               	movlb	0	; () banked
  1392  0012C2  EE20 F0CC          	lfsr	2,204
  1393  0012C6  5183               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1394  0012C8  26D9               	addwf	fsr2l,f,c
  1395  0012CA  5184               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1396  0012CC  22DA               	addwfc	fsr2h,f,c
  1397  0012CE  0E00               	movlw	0
  1398  0012D0  6EDE               	movwf	postinc2,c
  1399  0012D2  0E00               	movlw	0
  1400  0012D4  6EDD               	movwf	postdec2,c
  1401                           
  1402                           ;FastTransfer.c: 319: _this->head = 0;
  1403  0012D6  0100               	movlb	0	; () banked
  1404  0012D8  EE20 F0C8          	lfsr	2,200
  1405  0012DC  5183               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1406  0012DE  26D9               	addwf	fsr2l,f,c
  1407  0012E0  5184               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1408  0012E2  22DA               	addwfc	fsr2h,f,c
  1409  0012E4  0E00               	movlw	0
  1410  0012E6  6EDE               	movwf	postinc2,c
  1411  0012E8  0E00               	movlw	0
  1412  0012EA  6EDD               	movwf	postdec2,c
  1413                           
  1414                           ;FastTransfer.c: 320: _this->tail = 0;
  1415  0012EC  0100               	movlb	0	; () banked
  1416  0012EE  EE20 F0CA          	lfsr	2,202
  1417  0012F2  5183               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1418  0012F4  26D9               	addwf	fsr2l,f,c
  1419  0012F6  5184               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1420  0012F8  22DA               	addwfc	fsr2h,f,c
  1421  0012FA  0E00               	movlw	0
  1422  0012FC  6EDE               	movwf	postinc2,c
  1423  0012FE  0E00               	movlw	0
  1424  001300  6EDD               	movwf	postdec2,c
  1425                           
  1426                           ; BSR set to: 0
  1427                           ;FastTransfer.c: 321: if (clearBuffer) {
  1428  001302  0100               	movlb	0	; () banked
  1429  001304  5185               	movf	FastTransfer_buffer_flush@clearBuffer& (0+255),w,b
  1430  001306  0100               	movlb	0	; () banked
  1431  001308  1186               	iorwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),w,b
  1432  00130A  B4D8               	btfsc	status,2,c
  1433  00130C  0012               	return	
  1434                           
  1435                           ; BSR set to: 0
  1436                           ;FastTransfer.c: 322: memset(_this->buf, 0, sizeof (_this->buf));
  1437  00130E  C083  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1438  001312  C084  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1439  001316  0E00               	movlw	0
  1440  001318  6E1E               	movwf	memset@c+1,c
  1441  00131A  0E00               	movlw	0
  1442  00131C  6E1D               	movwf	memset@c,c
  1443  00131E  0E00               	movlw	0
  1444  001320  6E20               	movwf	memset@n+1,c
  1445  001322  0EC8               	movlw	200
  1446  001324  6E1F               	movwf	memset@n,c
  1447  001326  EC21  F00B         	call	_memset	;wreg free
  1448  00132A  0012               	return	
  1449  00132C                     __end_of_FastTransfer_buffer_flush:
  1450                           	opt stack 0
  1451                           tosu	equ	0xFFF
  1452                           tosh	equ	0xFFE
  1453                           tosl	equ	0xFFD
  1454                           pclath	equ	0xFFA
  1455                           tblptru	equ	0xFF8
  1456                           tblptrh	equ	0xFF7
  1457                           tblptrl	equ	0xFF6
  1458                           tablat	equ	0xFF5
  1459                           postinc0	equ	0xFEE
  1460                           wreg	equ	0xFE8
  1461                           indf2	equ	0xFDF
  1462                           postinc2	equ	0xFDE
  1463                           postdec2	equ	0xFDD
  1464                           plusw2	equ	0xFDB
  1465                           fsr2h	equ	0xFDA
  1466                           fsr2l	equ	0xFD9
  1467                           status	equ	0xFD8
  1468                           
  1469 ;; *************** function _ToSend *****************
  1470 ;; Defined at:
  1471 ;;		line 272 in file "FastTransfer.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;  where           1    wreg     unsigned char 
  1474 ;;  what            2    2[BANK0 ] unsigned int 
  1475 ;; Auto vars:     Size  Location     Type
  1476 ;;  where           1    4[BANK0 ] unsigned char 
  1477 ;; Return value:  Size  Location     Type
  1478 ;;                  1    wreg      void 
  1479 ;; Registers used:
  1480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1486 ;;      Params:         0       2       0       0       0       0       0
  1487 ;;      Locals:         0       1       0       0       0       0       0
  1488 ;;      Temps:          0       0       0       0       0       0       0
  1489 ;;      Totals:         0       3       0       0       0       0       0
  1490 ;;Total ram usage:        3 bytes
  1491 ;; Hardware stack levels used:    1
  1492 ;; Hardware stack levels required when called:    6
  1493 ;; This function calls:
  1494 ;;		_FastTransfer_buffer_put
  1495 ;; This function is called by:
  1496 ;;		_respondECU
  1497 ;; This function uses a non-reentrant model
  1498 ;;
  1499                           
  1500                           	psect	text6
  1501  001710                     __ptext6:
  1502                           	opt stack 0
  1503  001710                     _ToSend:
  1504                           	opt stack 22
  1505                           
  1506                           ;incstack = 0
  1507                           ;ToSend@where stored from wreg
  1508  001710  0100               	movlb	0	; () banked
  1509  001712  6F87               	movwf	ToSend@where& (0+255),b
  1510                           
  1511                           ;FastTransfer.c: 273: FastTransfer_buffer_put(&ring_buffer, where, what);
  1512  001714  0E00               	movlw	low _ring_buffer
  1513  001716  6E21               	movwf	FastTransfer_buffer_put@_this,c
  1514  001718  0E01               	movlw	high _ring_buffer
  1515  00171A  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  1516  00171C  C087  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  1517  001720  C085  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  1518  001724  C086  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  1519  001728  ECA7  F003         	call	_FastTransfer_buffer_put	;wreg free
  1520  00172C  0012               	return		;funcret
  1521  00172E                     __end_of_ToSend:
  1522                           	opt stack 0
  1523                           tosu	equ	0xFFF
  1524                           tosh	equ	0xFFE
  1525                           tosl	equ	0xFFD
  1526                           pclath	equ	0xFFA
  1527                           tblptru	equ	0xFF8
  1528                           tblptrh	equ	0xFF7
  1529                           tblptrl	equ	0xFF6
  1530                           tablat	equ	0xFF5
  1531                           postinc0	equ	0xFEE
  1532                           wreg	equ	0xFE8
  1533                           indf2	equ	0xFDF
  1534                           postinc2	equ	0xFDE
  1535                           postdec2	equ	0xFDD
  1536                           plusw2	equ	0xFDB
  1537                           fsr2h	equ	0xFDA
  1538                           fsr2l	equ	0xFD9
  1539                           status	equ	0xFD8
  1540                           
  1541 ;; *************** function _FastTransfer_buffer_put *****************
  1542 ;; Defined at:
  1543 ;;		line 279 in file "FastTransfer.c"
  1544 ;; Parameters:    Size  Location     Type
  1545 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  1546 ;;		 -> ring_buffer(206), 
  1547 ;;  towhere         1   34[COMRAM] unsigned char 
  1548 ;;  towhat          2   35[COMRAM] unsigned int 
  1549 ;; Auto vars:     Size  Location     Type
  1550 ;;		None
  1551 ;; Return value:  Size  Location     Type
  1552 ;;                  1    wreg      void 
  1553 ;; Registers used:
  1554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1555 ;; Tracked objects:
  1556 ;;		On entry : 0/0
  1557 ;;		On exit  : 0/0
  1558 ;;		Unchanged: 0/0
  1559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1560 ;;      Params:         5       0       0       0       0       0       0
  1561 ;;      Locals:         0       0       0       0       0       0       0
  1562 ;;      Temps:          0       2       0       0       0       0       0
  1563 ;;      Totals:         5       2       0       0       0       0       0
  1564 ;;Total ram usage:        7 bytes
  1565 ;; Hardware stack levels used:    1
  1566 ;; Hardware stack levels required when called:    5
  1567 ;; This function calls:
  1568 ;;		_FastTransfer_buffer_modulo_inc
  1569 ;; This function is called by:
  1570 ;;		_ToSend
  1571 ;; This function uses a non-reentrant model
  1572 ;;
  1573                           
  1574                           	psect	text7
  1575  00074E                     __ptext7:
  1576                           	opt stack 0
  1577  00074E                     _FastTransfer_buffer_put:
  1578                           	opt stack 22
  1579                           
  1580                           ;FastTransfer.c: 281: group.integer = towhat;
  1581                           
  1582                           ;incstack = 0
  1583  00074E  C024  F02A         	movff	FastTransfer_buffer_put@towhat,_group
  1584  000752  C025  F02B         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  1585                           
  1586                           ;FastTransfer.c: 283: if (_this->count < (200 - 3)) {
  1587  000756  EE20 F0CC          	lfsr	2,204
  1588  00075A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1589  00075C  26D9               	addwf	fsr2l,f,c
  1590  00075E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1591  000760  22DA               	addwfc	fsr2h,f,c
  1592  000762  0E01               	movlw	1
  1593  000764  BEDB               	btfsc	plusw2,7,c
  1594  000766  D007               	goto	l2483
  1595  000768  0E01               	movlw	1
  1596  00076A  50DB               	movf	plusw2,w,c
  1597  00076C  E103               	bnz	u2511
  1598  00076E  0EC5               	movlw	197
  1599  000770  5CDE               	subwf	postinc2,w,c
  1600  000772  B0D8               	btfsc	status,0,c
  1601  000774                     u2511:
  1602  000774  0012               	return	
  1603  000776                     l2483:
  1604                           
  1605                           ;FastTransfer.c: 284: _this->buf[_this->head] = towhere;
  1606  000776  EE20 F0C8          	lfsr	2,200
  1607  00077A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1608  00077C  26D9               	addwf	fsr2l,f,c
  1609  00077E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1610  000780  22DA               	addwfc	fsr2h,f,c
  1611  000782  CFDE F083          	movff	postinc2,??_FastTransfer_buffer_put
  1612  000786  CFDD F084          	movff	postdec2,??_FastTransfer_buffer_put+1
  1613  00078A  0100               	movlb	0	; () banked
  1614  00078C  5183               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1615  00078E  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1616  000790  6ED9               	movwf	fsr2l,c
  1617  000792  0100               	movlb	0	; () banked
  1618  000794  5184               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1619  000796  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1620  000798  6EDA               	movwf	fsr2h,c
  1621  00079A  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;FastTransfer.c: 285: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1625  00079E  EE20 F0C8          	lfsr	2,200
  1626  0007A2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1627  0007A4  26D9               	addwf	fsr2l,f,c
  1628  0007A6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1629  0007A8  22DA               	addwfc	fsr2h,f,c
  1630  0007AA  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1631  0007AE  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1632  0007B2  0E00               	movlw	0
  1633  0007B4  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1634  0007B6  0EC8               	movlw	200
  1635  0007B8  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1636  0007BA  EC37  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1637  0007BE  EE20 F0C8          	lfsr	2,200
  1638  0007C2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1639  0007C4  26D9               	addwf	fsr2l,f,c
  1640  0007C6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1641  0007C8  22DA               	addwfc	fsr2h,f,c
  1642  0007CA  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1643  0007CE  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1644                           
  1645                           ;FastTransfer.c: 286: ++_this->count;
  1646  0007D2  EE20 F0CC          	lfsr	2,204
  1647  0007D6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1648  0007D8  26D9               	addwf	fsr2l,f,c
  1649  0007DA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1650  0007DC  22DA               	addwfc	fsr2h,f,c
  1651  0007DE  2ADE               	incf	postinc2,f,c
  1652  0007E0  0E00               	movlw	0
  1653  0007E2  22DD               	addwfc	postdec2,f,c
  1654                           
  1655                           ;FastTransfer.c: 287: _this->buf[_this->head] = group.parts[0];
  1656  0007E4  EE20 F0C8          	lfsr	2,200
  1657  0007E8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1658  0007EA  26D9               	addwf	fsr2l,f,c
  1659  0007EC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1660  0007EE  22DA               	addwfc	fsr2h,f,c
  1661  0007F0  CFDE F083          	movff	postinc2,??_FastTransfer_buffer_put
  1662  0007F4  CFDD F084          	movff	postdec2,??_FastTransfer_buffer_put+1
  1663  0007F8  0100               	movlb	0	; () banked
  1664  0007FA  5183               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1665  0007FC  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1666  0007FE  6ED9               	movwf	fsr2l,c
  1667  000800  0100               	movlb	0	; () banked
  1668  000802  5184               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1669  000804  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1670  000806  6EDA               	movwf	fsr2h,c
  1671  000808  C02A  FFDF         	movff	_group,indf2
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;FastTransfer.c: 288: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1675  00080C  EE20 F0C8          	lfsr	2,200
  1676  000810  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1677  000812  26D9               	addwf	fsr2l,f,c
  1678  000814  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1679  000816  22DA               	addwfc	fsr2h,f,c
  1680  000818  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1681  00081C  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1682  000820  0E00               	movlw	0
  1683  000822  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1684  000824  0EC8               	movlw	200
  1685  000826  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1686  000828  EC37  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1687  00082C  EE20 F0C8          	lfsr	2,200
  1688  000830  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1689  000832  26D9               	addwf	fsr2l,f,c
  1690  000834  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1691  000836  22DA               	addwfc	fsr2h,f,c
  1692  000838  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1693  00083C  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1694                           
  1695                           ;FastTransfer.c: 289: ++_this->count;
  1696  000840  EE20 F0CC          	lfsr	2,204
  1697  000844  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1698  000846  26D9               	addwf	fsr2l,f,c
  1699  000848  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1700  00084A  22DA               	addwfc	fsr2h,f,c
  1701  00084C  2ADE               	incf	postinc2,f,c
  1702  00084E  0E00               	movlw	0
  1703  000850  22DD               	addwfc	postdec2,f,c
  1704                           
  1705                           ;FastTransfer.c: 290: _this->buf[_this->head] = group.parts[1];
  1706  000852  EE20 F0C8          	lfsr	2,200
  1707  000856  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1708  000858  26D9               	addwf	fsr2l,f,c
  1709  00085A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1710  00085C  22DA               	addwfc	fsr2h,f,c
  1711  00085E  CFDE F083          	movff	postinc2,??_FastTransfer_buffer_put
  1712  000862  CFDD F084          	movff	postdec2,??_FastTransfer_buffer_put+1
  1713  000866  0100               	movlb	0	; () banked
  1714  000868  5183               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1715  00086A  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1716  00086C  6ED9               	movwf	fsr2l,c
  1717  00086E  0100               	movlb	0	; () banked
  1718  000870  5184               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1719  000872  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1720  000874  6EDA               	movwf	fsr2h,c
  1721  000876  C02B  FFDF         	movff	_group+1,indf2
  1722                           
  1723                           ; BSR set to: 0
  1724                           ;FastTransfer.c: 291: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1725  00087A  EE20 F0C8          	lfsr	2,200
  1726  00087E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1727  000880  26D9               	addwf	fsr2l,f,c
  1728  000882  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1729  000884  22DA               	addwfc	fsr2h,f,c
  1730  000886  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1731  00088A  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1732  00088E  0E00               	movlw	0
  1733  000890  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1734  000892  0EC8               	movlw	200
  1735  000894  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1736  000896  EC37  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1737  00089A  EE20 F0C8          	lfsr	2,200
  1738  00089E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1739  0008A0  26D9               	addwf	fsr2l,f,c
  1740  0008A2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1741  0008A4  22DA               	addwfc	fsr2h,f,c
  1742  0008A6  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1743  0008AA  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1744                           
  1745                           ;FastTransfer.c: 292: ++_this->count;
  1746  0008AE  EE20 F0CC          	lfsr	2,204
  1747  0008B2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1748  0008B4  26D9               	addwf	fsr2l,f,c
  1749  0008B6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1750  0008B8  22DA               	addwfc	fsr2h,f,c
  1751  0008BA  2ADE               	incf	postinc2,f,c
  1752  0008BC  0E00               	movlw	0
  1753  0008BE  22DD               	addwfc	postdec2,f,c
  1754  0008C0  0012               	return	
  1755  0008C2                     __end_of_FastTransfer_buffer_put:
  1756                           	opt stack 0
  1757                           tosu	equ	0xFFF
  1758                           tosh	equ	0xFFE
  1759                           tosl	equ	0xFFD
  1760                           pclath	equ	0xFFA
  1761                           tblptru	equ	0xFF8
  1762                           tblptrh	equ	0xFF7
  1763                           tblptrl	equ	0xFF6
  1764                           tablat	equ	0xFF5
  1765                           postinc0	equ	0xFEE
  1766                           wreg	equ	0xFE8
  1767                           indf2	equ	0xFDF
  1768                           postinc2	equ	0xFDE
  1769                           postdec2	equ	0xFDD
  1770                           plusw2	equ	0xFDB
  1771                           fsr2h	equ	0xFDA
  1772                           fsr2l	equ	0xFD9
  1773                           status	equ	0xFD8
  1774                           
  1775 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  1776 ;; Defined at:
  1777 ;;		line 329 in file "FastTransfer.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;  value           2   26[COMRAM] const unsigned int 
  1780 ;;  modulus         2   28[COMRAM] const unsigned int 
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;  my_value        2   30[COMRAM] unsigned int 
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  2   26[COMRAM] unsigned int 
  1785 ;; Registers used:
  1786 ;;		wreg, status,2, status,0
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1792 ;;      Params:         4       0       0       0       0       0       0
  1793 ;;      Locals:         2       0       0       0       0       0       0
  1794 ;;      Temps:          0       0       0       0       0       0       0
  1795 ;;      Totals:         6       0       0       0       0       0       0
  1796 ;;Total ram usage:        6 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    4
  1799 ;; This function calls:
  1800 ;;		Nothing
  1801 ;; This function is called by:
  1802 ;;		_FastTransfer_buffer_put
  1803 ;;		_FastTransfer_buffer_get
  1804 ;; This function uses a non-reentrant model
  1805 ;;
  1806                           
  1807                           	psect	text8
  1808  00166E                     __ptext8:
  1809                           	opt stack 0
  1810  00166E                     _FastTransfer_buffer_modulo_inc:
  1811                           	opt stack 22
  1812                           
  1813                           ;FastTransfer.c: 330: unsigned int my_value = value + 1;
  1814                           
  1815                           ;incstack = 0
  1816  00166E  0E01               	movlw	1
  1817  001670  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  1818  001672  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1819  001674  0E00               	movlw	0
  1820  001676  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  1821  001678  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1822                           
  1823                           ;FastTransfer.c: 331: if (my_value >= modulus) {
  1824  00167A  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  1825  00167C  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  1826  00167E  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  1827  001680  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  1828  001682  A0D8               	btfss	status,0,c
  1829  001684  D004               	goto	l2403
  1830                           
  1831                           ;FastTransfer.c: 332: my_value = 0;
  1832  001686  0E00               	movlw	0
  1833  001688  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1834  00168A  0E00               	movlw	0
  1835  00168C  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1836  00168E                     l2403:
  1837                           
  1838                           ;FastTransfer.c: 333: }
  1839                           ;FastTransfer.c: 334: return (my_value);
  1840  00168E  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  1841  001692  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  1842  001696  0012               	return	
  1843  001698                     __end_of_FastTransfer_buffer_modulo_inc:
  1844                           	opt stack 0
  1845                           tosu	equ	0xFFF
  1846                           tosh	equ	0xFFE
  1847                           tosl	equ	0xFFD
  1848                           pclath	equ	0xFFA
  1849                           tblptru	equ	0xFF8
  1850                           tblptrh	equ	0xFF7
  1851                           tblptrl	equ	0xFF6
  1852                           tablat	equ	0xFF5
  1853                           postinc0	equ	0xFEE
  1854                           wreg	equ	0xFE8
  1855                           indf2	equ	0xFDF
  1856                           postinc2	equ	0xFDE
  1857                           postdec2	equ	0xFDD
  1858                           plusw2	equ	0xFDB
  1859                           fsr2h	equ	0xFDA
  1860                           fsr2l	equ	0xFD9
  1861                           status	equ	0xFD8
  1862                           
  1863 ;; *************** function _GetFaults *****************
  1864 ;; Defined at:
  1865 ;;		line 34 in file "Function.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;  num             1    wreg     unsigned char 
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;  num             1   26[COMRAM] unsigned char 
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  1    wreg      unsigned char 
  1872 ;; Registers used:
  1873 ;;		wreg, status,2, status,0
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1879 ;;      Params:         0       0       0       0       0       0       0
  1880 ;;      Locals:         1       0       0       0       0       0       0
  1881 ;;      Temps:          0       0       0       0       0       0       0
  1882 ;;      Totals:         1       0       0       0       0       0       0
  1883 ;;Total ram usage:        1 bytes
  1884 ;; Hardware stack levels used:    1
  1885 ;; Hardware stack levels required when called:    4
  1886 ;; This function calls:
  1887 ;;		Nothing
  1888 ;; This function is called by:
  1889 ;;		_respondECU
  1890 ;; This function uses a non-reentrant model
  1891 ;;
  1892                           
  1893                           	psect	text9
  1894  0017BA                     __ptext9:
  1895                           	opt stack 0
  1896  0017BA                     _GetFaults:
  1897                           	opt stack 24
  1898                           
  1899                           ;incstack = 0
  1900                           ;GetFaults@num stored from wreg
  1901  0017BA  6E1B               	movwf	GetFaults@num,c
  1902                           
  1903                           ;Function.c: 35: if(num == 1){
  1904  0017BC  041B               	decf	GetFaults@num,w,c
  1905  0017BE  A4D8               	btfss	status,2,c
  1906  0017C0  D002               	goto	l1325
  1907                           
  1908                           ;Function.c: 36: return ByteHigh;
  1909  0017C2  503B               	movf	_ByteHigh,w,c
  1910  0017C4  0012               	return	
  1911  0017C6                     l1325:
  1912                           
  1913                           ;Function.c: 37: }
  1914                           ;Function.c: 38: if(num == 0){
  1915  0017C6  501B               	movf	GetFaults@num,w,c
  1916  0017C8  A4D8               	btfss	status,2,c
  1917  0017CA  0012               	return	
  1918                           
  1919                           ;Function.c: 39: return ByteLow;
  1920  0017CC  503C               	movf	_ByteLow,w,c
  1921  0017CE  0012               	return	
  1922  0017D0                     __end_of_GetFaults:
  1923                           	opt stack 0
  1924                           tosu	equ	0xFFF
  1925                           tosh	equ	0xFFE
  1926                           tosl	equ	0xFFD
  1927                           pclath	equ	0xFFA
  1928                           tblptru	equ	0xFF8
  1929                           tblptrh	equ	0xFF7
  1930                           tblptrl	equ	0xFF6
  1931                           tablat	equ	0xFF5
  1932                           postinc0	equ	0xFEE
  1933                           wreg	equ	0xFE8
  1934                           indf2	equ	0xFDF
  1935                           postinc2	equ	0xFDE
  1936                           postdec2	equ	0xFDD
  1937                           plusw2	equ	0xFDB
  1938                           fsr2h	equ	0xFDA
  1939                           fsr2l	equ	0xFD9
  1940                           status	equ	0xFD8
  1941                           
  1942 ;; *************** function _Delay *****************
  1943 ;; Defined at:
  1944 ;;		line 198 in file "Function.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;  wait            2   26[COMRAM] int 
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;  x               2   29[COMRAM] int 
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  1    wreg      void 
  1951 ;; Registers used:
  1952 ;;		wreg, status,2, status,0
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1958 ;;      Params:         2       0       0       0       0       0       0
  1959 ;;      Locals:         2       0       0       0       0       0       0
  1960 ;;      Temps:          1       0       0       0       0       0       0
  1961 ;;      Totals:         5       0       0       0       0       0       0
  1962 ;;Total ram usage:        5 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    4
  1965 ;; This function calls:
  1966 ;;		Nothing
  1967 ;; This function is called by:
  1968 ;;		_respondECU
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text10
  1973  001580                     __ptext10:
  1974                           	opt stack 0
  1975  001580                     _Delay:
  1976                           	opt stack 24
  1977                           
  1978                           ;Function.c: 199: int x;
  1979                           ;Function.c: 200: for (x = 0; x < wait; x++) {
  1980                           
  1981                           ;incstack = 0
  1982  001580  0E00               	movlw	0
  1983  001582  6E1F               	movwf	Delay@x+1,c
  1984  001584  0E00               	movlw	0
  1985  001586  6E1E               	movwf	Delay@x,c
  1986  001588  D00A               	goto	l462
  1987  00158A                     l1999:
  1988                           
  1989                           ;Function.c: 201: _delay((unsigned long)((1)*(16000000/4000.0)));
  1990  00158A  0E06               	movlw	6
  1991  00158C  6E1D               	movwf	??_Delay& (0+255),c
  1992  00158E  0E30               	movlw	48
  1993  001590                     u3357:
  1994  001590  2EE8               	decfsz	wreg,f,c
  1995  001592  D7FE               	goto	u3357
  1996  001594  2E1D               	decfsz	??_Delay& (0+255),f,c
  1997  001596  D7FC               	goto	u3357
  1998  001598  D000               	nop2	
  1999  00159A  4A1E               	infsnz	Delay@x,f,c
  2000  00159C  2A1F               	incf	Delay@x+1,f,c
  2001  00159E                     l462:
  2002  00159E  501B               	movf	Delay@wait,w,c
  2003  0015A0  5C1E               	subwf	Delay@x,w,c
  2004  0015A2  501F               	movf	Delay@x+1,w,c
  2005  0015A4  0A80               	xorlw	128
  2006  0015A6  6E1D               	movwf	??_Delay& (0+255),c
  2007  0015A8  501C               	movf	Delay@wait+1,w,c
  2008  0015AA  0A80               	xorlw	128
  2009  0015AC  581D               	subwfb	??_Delay& (0+255),w,c
  2010  0015AE  B0D8               	btfsc	status,0,c
  2011  0015B0  0012               	return	
  2012  0015B2  D7EB               	goto	l1999
  2013  0015B4                     __end_of_Delay:
  2014                           	opt stack 0
  2015                           tosu	equ	0xFFF
  2016                           tosh	equ	0xFFE
  2017                           tosl	equ	0xFFD
  2018                           pclath	equ	0xFFA
  2019                           tblptru	equ	0xFF8
  2020                           tblptrh	equ	0xFF7
  2021                           tblptrl	equ	0xFF6
  2022                           tablat	equ	0xFF5
  2023                           postinc0	equ	0xFEE
  2024                           wreg	equ	0xFE8
  2025                           indf2	equ	0xFDF
  2026                           postinc2	equ	0xFDE
  2027                           postdec2	equ	0xFDD
  2028                           plusw2	equ	0xFDB
  2029                           fsr2h	equ	0xFDA
  2030                           fsr2l	equ	0xFD9
  2031                           status	equ	0xFD8
  2032                           
  2033 ;; *************** function _receiveData *****************
  2034 ;; Defined at:
  2035 ;;		line 137 in file "FastTransfer.c"
  2036 ;; Parameters:    Size  Location     Type
  2037 ;;		None
  2038 ;; Auto vars:     Size  Location     Type
  2039 ;;  holder          3   18[BANK0 ] unsigned char [3]
  2040 ;;  crcHolder       1   22[BANK0 ] unsigned char 
  2041 ;;  holder          3   15[BANK0 ] unsigned char [3]
  2042 ;;  crcHolder       1   21[BANK0 ] unsigned char 
  2043 ;;  u               2   23[BANK0 ] int 
  2044 ;;  r               2   25[BANK0 ] int 
  2045 ;; Return value:  Size  Location     Type
  2046 ;;                  1    wreg      unsigned char 
  2047 ;; Registers used:
  2048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2049 ;; Tracked objects:
  2050 ;;		On entry : 0/0
  2051 ;;		On exit  : 0/0
  2052 ;;		Unchanged: 0/0
  2053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2054 ;;      Params:         0       0       0       0       0       0       0
  2055 ;;      Locals:         0      12       0       0       0       0       0
  2056 ;;      Temps:          0       6       0       0       0       0       0
  2057 ;;      Totals:         0      18       0       0       0       0       0
  2058 ;;Total ram usage:       18 bytes
  2059 ;; Hardware stack levels used:    1
  2060 ;; Hardware stack levels required when called:    8
  2061 ;; This function calls:
  2062 ;;		Absolute function
  2063 ;;		_CRC8
  2064 ;;		_CRCcheck
  2065 ;;		_Receive_available
  2066 ;;		_Receive_get
  2067 ;;		_Receive_peek
  2068 ;;		_Send_put
  2069 ;; This function is called by:
  2070 ;;		_updateComms
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           	psect	text11
  2075  0000A4                     __ptext11:
  2076                           	opt stack 0
  2077  0000A4                     _receiveData:
  2078                           	opt stack 21
  2079                           
  2080                           ;FastTransfer.c: 140: if (rx_len == 0) {
  2081                           
  2082                           ;incstack = 0
  2083  0000A4  5043               	movf	_rx_len,w,c
  2084  0000A6  A4D8               	btfss	status,2,c
  2085  0000A8  D0AB               	goto	l2691
  2086                           
  2087                           ;FastTransfer.c: 142: if (serial_available() > 4) {
  2088  0000AA  D801               	call	u2808
  2089  0000AC  D00A               	goto	u2809
  2090  0000AE                     u2808:
  2091  0000AE  0005               	push	
  2092  0000B0  6EFA               	movwf	pclath,c
  2093  0000B2  5030               	movf	_serial_available,w,c
  2094  0000B4  6EFD               	movwf	tosl,c
  2095  0000B6  5031               	movf	_serial_available+1,w,c
  2096  0000B8  6EFE               	movwf	tosh,c
  2097  0000BA  50F8               	movf	tblptru,w,c
  2098  0000BC  6EFF               	movwf	tosu,c
  2099  0000BE  50FA               	movf	pclath,w,c
  2100  0000C0  0012               	return		;indir
  2101  0000C2                     u2809:
  2102  0000C2  BE1E               	btfsc	?_Receive_available+1,7,c
  2103  0000C4  D09D               	goto	l2691
  2104  0000C6  501E               	movf	?_Receive_available+1,w,c
  2105  0000C8  E11D               	bnz	l2667
  2106  0000CA  0E05               	movlw	5
  2107  0000CC  5C1D               	subwf	?_Receive_available,w,c
  2108  0000CE  B0D8               	btfsc	status,0,c
  2109  0000D0  D019               	goto	l2667
  2110  0000D2  D096               	goto	l2691
  2111  0000D4                     l2659:
  2112                           
  2113                           ;FastTransfer.c: 148: alignErrorCounter++;
  2114  0000D4  4A26               	infsnz	_alignErrorCounter,f,c
  2115  0000D6  2A27               	incf	_alignErrorCounter+1,f,c
  2116                           
  2117                           ;FastTransfer.c: 149: if (serial_available() < 5)
  2118  0000D8  D801               	call	u2828
  2119  0000DA  D00A               	goto	u2829
  2120  0000DC                     u2828:
  2121  0000DC  0005               	push	
  2122  0000DE  6EFA               	movwf	pclath,c
  2123  0000E0  5030               	movf	_serial_available,w,c
  2124  0000E2  6EFD               	movwf	tosl,c
  2125  0000E4  5031               	movf	_serial_available+1,w,c
  2126  0000E6  6EFE               	movwf	tosh,c
  2127  0000E8  50F8               	movf	tblptru,w,c
  2128  0000EA  6EFF               	movwf	tosu,c
  2129  0000EC  50FA               	movf	pclath,w,c
  2130  0000EE  0012               	return		;indir
  2131  0000F0                     u2829:
  2132  0000F0  BE1E               	btfsc	?_Receive_available+1,7,c
  2133  0000F2  D006               	goto	l2663
  2134  0000F4  501E               	movf	?_Receive_available+1,w,c
  2135  0000F6  E106               	bnz	l2667
  2136  0000F8  0E05               	movlw	5
  2137  0000FA  5C1D               	subwf	?_Receive_available,w,c
  2138  0000FC  B0D8               	btfsc	status,0,c
  2139  0000FE  D002               	goto	l2667
  2140  000100                     l2663:
  2141                           
  2142                           ;FastTransfer.c: 150: return 0;
  2143  000100  0E00               	movlw	0
  2144  000102  0012               	return	
  2145  000104                     l2667:
  2146  000104  D801               	call	u2848
  2147  000106  D00A               	goto	u2849
  2148  000108                     u2848:
  2149  000108  0005               	push	
  2150  00010A  6EFA               	movwf	pclath,c
  2151  00010C  5034               	movf	_serial_read,w,c
  2152  00010E  6EFD               	movwf	tosl,c
  2153  000110  5035               	movf	_serial_read+1,w,c
  2154  000112  6EFE               	movwf	tosh,c
  2155  000114  50F8               	movf	tblptru,w,c
  2156  000116  6EFF               	movwf	tosu,c
  2157  000118  50FA               	movf	pclath,w,c
  2158  00011A  0012               	return		;indir
  2159  00011C                     u2849:
  2160  00011C  0A06               	xorlw	6
  2161  00011E  A4D8               	btfss	status,2,c
  2162  000120  D7D9               	goto	l2659
  2163                           
  2164                           ;FastTransfer.c: 151: }
  2165                           ;FastTransfer.c: 152: if (serial_read() == 0x85) {
  2166  000122  D801               	call	u2868
  2167  000124  D00A               	goto	u2869
  2168  000126                     u2868:
  2169  000126  0005               	push	
  2170  000128  6EFA               	movwf	pclath,c
  2171  00012A  5034               	movf	_serial_read,w,c
  2172  00012C  6EFD               	movwf	tosl,c
  2173  00012E  5035               	movf	_serial_read+1,w,c
  2174  000130  6EFE               	movwf	tosh,c
  2175  000132  50F8               	movf	tblptru,w,c
  2176  000134  6EFF               	movwf	tosu,c
  2177  000136  50FA               	movf	pclath,w,c
  2178  000138  0012               	return		;indir
  2179  00013A                     u2869:
  2180  00013A  0A85               	xorlw	133
  2181  00013C  A4D8               	btfss	status,2,c
  2182  00013E  D060               	goto	l2691
  2183                           
  2184                           ;FastTransfer.c: 154: rx_address = serial_read();
  2185  000140  D801               	call	u2888
  2186  000142  D00A               	goto	u2889
  2187  000144                     u2888:
  2188  000144  0005               	push	
  2189  000146  6EFA               	movwf	pclath,c
  2190  000148  5034               	movf	_serial_read,w,c
  2191  00014A  6EFD               	movwf	tosl,c
  2192  00014C  5035               	movf	_serial_read+1,w,c
  2193  00014E  6EFE               	movwf	tosh,c
  2194  000150  50F8               	movf	tblptru,w,c
  2195  000152  6EFF               	movwf	tosu,c
  2196  000154  50FA               	movf	pclath,w,c
  2197  000156  0012               	return		;indir
  2198  000158                     u2889:
  2199  000158  6E41               	movwf	_rx_address,c
  2200                           
  2201                           ;FastTransfer.c: 155: returnAddress = serial_read();
  2202  00015A  D801               	call	u2898
  2203  00015C  D00A               	goto	u2899
  2204  00015E                     u2898:
  2205  00015E  0005               	push	
  2206  000160  6EFA               	movwf	pclath,c
  2207  000162  5034               	movf	_serial_read,w,c
  2208  000164  6EFD               	movwf	tosl,c
  2209  000166  5035               	movf	_serial_read+1,w,c
  2210  000168  6EFE               	movwf	tosh,c
  2211  00016A  50F8               	movf	tblptru,w,c
  2212  00016C  6EFF               	movwf	tosu,c
  2213  00016E  50FA               	movf	pclath,w,c
  2214  000170  0012               	return		;indir
  2215  000172                     u2899:
  2216  000172  6E40               	movwf	_returnAddress,c
  2217                           
  2218                           ;FastTransfer.c: 156: rx_len = serial_read();
  2219  000174  D801               	call	u2908
  2220  000176  D00A               	goto	u2909
  2221  000178                     u2908:
  2222  000178  0005               	push	
  2223  00017A  6EFA               	movwf	pclath,c
  2224  00017C  5034               	movf	_serial_read,w,c
  2225  00017E  6EFD               	movwf	tosl,c
  2226  000180  5035               	movf	_serial_read+1,w,c
  2227  000182  6EFE               	movwf	tosh,c
  2228  000184  50F8               	movf	tblptru,w,c
  2229  000186  6EFF               	movwf	tosu,c
  2230  000188  50FA               	movf	pclath,w,c
  2231  00018A  0012               	return		;indir
  2232  00018C                     u2909:
  2233  00018C  6E43               	movwf	_rx_len,c
  2234                           
  2235                           ;FastTransfer.c: 158: if (rx_address != moduleAddress) {
  2236  00018E  503F               	movf	_moduleAddress,w,c
  2237  000190  1841               	xorwf	_rx_address,w,c
  2238  000192  B4D8               	btfsc	status,2,c
  2239  000194  D035               	goto	l2691
  2240                           
  2241                           ;FastTransfer.c: 159: addressErrorCounter++;
  2242  000196  0100               	movlb	0	; () banked
  2243  000198  4B64               	infsnz	_addressErrorCounter& (0+255),f,b
  2244  00019A  2B65               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;FastTransfer.c: 162: int u;
  2248                           ;FastTransfer.c: 163: for (u = 0; u <= (rx_len + 1); u++) {
  2249  00019C  0E00               	movlw	0
  2250  00019E  0100               	movlb	0	; () banked
  2251  0001A0  6F9B               	movwf	(receiveData@u+1)& (0+255),b
  2252  0001A2  0E00               	movlw	0
  2253  0001A4  6F9A               	movwf	receiveData@u& (0+255),b
  2254  0001A6  D00F               	goto	l2683
  2255  0001A8                     l2679:
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;FastTransfer.c: 164: serial_read();
  2259  0001A8  D801               	call	u2928
  2260  0001AA  D00A               	goto	l2681
  2261  0001AC                     u2928:
  2262  0001AC  0005               	push	
  2263  0001AE  6EFA               	movwf	pclath,c
  2264  0001B0  5034               	movf	_serial_read,w,c
  2265  0001B2  6EFD               	movwf	tosl,c
  2266  0001B4  5035               	movf	_serial_read+1,w,c
  2267  0001B6  6EFE               	movwf	tosh,c
  2268  0001B8  50F8               	movf	tblptru,w,c
  2269  0001BA  6EFF               	movwf	tosu,c
  2270  0001BC  50FA               	movf	pclath,w,c
  2271  0001BE  0012               	return		;indir
  2272  0001C0                     l2681:
  2273  0001C0  0100               	movlb	0	; () banked
  2274  0001C2  4B9A               	infsnz	receiveData@u& (0+255),f,b
  2275  0001C4  2B9B               	incf	(receiveData@u+1)& (0+255),f,b
  2276  0001C6                     l2683:
  2277                           
  2278                           ; BSR set to: 0
  2279  0001C6  5043               	movf	_rx_len,w,c
  2280  0001C8  0100               	movlb	0	; () banked
  2281  0001CA  6F8C               	movwf	??_receiveData& (0+255),b
  2282  0001CC  6B8D               	clrf	(??_receiveData+1)& (0+255),b
  2283  0001CE  0E01               	movlw	1
  2284  0001D0  0100               	movlb	0	; () banked
  2285  0001D2  278C               	addwf	??_receiveData& (0+255),f,b
  2286  0001D4  0E00               	movlw	0
  2287  0001D6  238D               	addwfc	(??_receiveData+1)& (0+255),f,b
  2288  0001D8  0100               	movlb	0	; () banked
  2289  0001DA  519A               	movf	receiveData@u& (0+255),w,b
  2290  0001DC  0100               	movlb	0	; () banked
  2291  0001DE  5D8C               	subwf	??_receiveData& (0+255),w,b
  2292  0001E0  0100               	movlb	0	; () banked
  2293  0001E2  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2294  0001E4  0A80               	xorlw	128
  2295  0001E6  0100               	movlb	0	; () banked
  2296  0001E8  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2297  0001EA  0100               	movlb	0	; () banked
  2298  0001EC  519B               	movf	(receiveData@u+1)& (0+255),w,b
  2299  0001EE  0A80               	xorlw	128
  2300  0001F0  0100               	movlb	0	; () banked
  2301  0001F2  598E               	subwfb	(??_receiveData+2)& (0+255),w,b
  2302  0001F4  B0D8               	btfsc	status,0,c
  2303  0001F6  D7D8               	goto	l2679
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;FastTransfer.c: 165: }
  2307                           ;FastTransfer.c: 166: rx_len = 0;
  2308                           
  2309                           ; BSR set to: 0
  2310  0001F8  0E00               	movlw	0
  2311  0001FA  6E43               	movwf	_rx_len,c
  2312                           
  2313                           ; BSR set to: 0
  2314                           ;FastTransfer.c: 167: return 0;
  2315  0001FC  0E00               	movlw	0
  2316                           
  2317                           ; BSR set to: 0
  2318  0001FE  0012               	return	
  2319  000200                     l2691:
  2320                           
  2321                           ;FastTransfer.c: 168: }
  2322                           ;FastTransfer.c: 170: }
  2323                           ;FastTransfer.c: 171: }
  2324                           ;FastTransfer.c: 172: }
  2325                           ;FastTransfer.c: 175: if (rx_len != 0) {
  2326  000200  5043               	movf	_rx_len,w,c
  2327  000202  B4D8               	btfsc	status,2,c
  2328  000204  D2A2               	goto	l2815
  2329                           
  2330                           ;FastTransfer.c: 178: if (rx_array_inx == 0) {
  2331  000206  5042               	movf	_rx_array_inx,w,c
  2332  000208  A4D8               	btfss	status,2,c
  2333  00020A  D043               	goto	l2715
  2334  00020C                     l2697:
  2335  00020C  D801               	call	u2968
  2336  00020E  D00A               	goto	u2969
  2337  000210                     u2968:
  2338  000210  0005               	push	
  2339  000212  6EFA               	movwf	pclath,c
  2340  000214  5030               	movf	_serial_available,w,c
  2341  000216  6EFD               	movwf	tosl,c
  2342  000218  5031               	movf	_serial_available+1,w,c
  2343  00021A  6EFE               	movwf	tosh,c
  2344  00021C  50F8               	movf	tblptru,w,c
  2345  00021E  6EFF               	movwf	tosu,c
  2346  000220  50FA               	movf	pclath,w,c
  2347  000222  0012               	return		;indir
  2348  000224                     u2969:
  2349  000224  BE1E               	btfsc	?_Receive_available+1,7,c
  2350  000226  D7F2               	goto	l2697
  2351  000228  501E               	movf	?_Receive_available+1,w,c
  2352  00022A  E103               	bnz	l2699
  2353  00022C  041D               	decf	?_Receive_available,w,c
  2354  00022E  A0D8               	btfss	status,0,c
  2355  000230  D7ED               	goto	l2697
  2356  000232                     l2699:
  2357                           
  2358                           ;FastTransfer.c: 180: if (255 == serial_peek()) {
  2359  000232  D801               	call	u2988
  2360  000234  D00A               	goto	u2989
  2361  000236                     u2988:
  2362  000236  0005               	push	
  2363  000238  6EFA               	movwf	pclath,c
  2364  00023A  5032               	movf	_serial_peek,w,c
  2365  00023C  6EFD               	movwf	tosl,c
  2366  00023E  5033               	movf	_serial_peek+1,w,c
  2367  000240  6EFE               	movwf	tosh,c
  2368  000242  50F8               	movf	tblptru,w,c
  2369  000244  6EFF               	movwf	tosu,c
  2370  000246  50FA               	movf	pclath,w,c
  2371  000248  0012               	return		;indir
  2372  00024A                     u2989:
  2373  00024A  0AFF               	xorlw	255
  2374  00024C  A4D8               	btfss	status,2,c
  2375  00024E  D021               	goto	l2715
  2376                           
  2377                           ;FastTransfer.c: 181: CRCcheck();
  2378  000250  EC61  F004         	call	_CRCcheck	;wreg free
  2379                           
  2380                           ;FastTransfer.c: 182: rx_len = 0;
  2381  000254  0E00               	movlw	0
  2382  000256  6E43               	movwf	_rx_len,c
  2383                           
  2384                           ;FastTransfer.c: 183: rx_array_inx = 0;
  2385  000258  0E00               	movlw	0
  2386  00025A  6E42               	movwf	_rx_array_inx,c
  2387                           
  2388                           ;FastTransfer.c: 184: return 0;
  2389  00025C  0E00               	movlw	0
  2390  00025E  0012               	return	
  2391  000260                     l2711:
  2392                           
  2393                           ;FastTransfer.c: 190: rx_buffer[rx_array_inx++] = serial_read();
  2394  000260  D801               	call	u3008
  2395  000262  D00A               	goto	u3009
  2396  000264                     u3008:
  2397  000264  0005               	push	
  2398  000266  6EFA               	movwf	pclath,c
  2399  000268  5034               	movf	_serial_read,w,c
  2400  00026A  6EFD               	movwf	tosl,c
  2401  00026C  5035               	movf	_serial_read+1,w,c
  2402  00026E  6EFE               	movwf	tosh,c
  2403  000270  50F8               	movf	tblptru,w,c
  2404  000272  6EFF               	movwf	tosu,c
  2405  000274  50FA               	movf	pclath,w,c
  2406  000276  0012               	return		;indir
  2407  000278                     u3009:
  2408  000278  0100               	movlb	0	; () banked
  2409  00027A  6F8C               	movwf	??_receiveData& (0+255),b
  2410  00027C  5042               	movf	_rx_array_inx,w,c
  2411  00027E  0D01               	mullw	1
  2412  000280  0E00               	movlw	low _rx_buffer
  2413  000282  24F3               	addwf	prodl,w,c
  2414  000284  6ED9               	movwf	fsr2l,c
  2415  000286  0E02               	movlw	high _rx_buffer
  2416  000288  20F4               	addwfc	prodh,w,c
  2417  00028A  6EDA               	movwf	fsr2h,c
  2418  00028C  C08C  FFDF         	movff	??_receiveData,indf2
  2419                           
  2420                           ; BSR set to: 0
  2421  000290  2A42               	incf	_rx_array_inx,f,c
  2422  000292                     l2715:
  2423  000292  D801               	call	u3018
  2424  000294  D00A               	goto	u3019
  2425  000296                     u3018:
  2426  000296  0005               	push	
  2427  000298  6EFA               	movwf	pclath,c
  2428  00029A  5030               	movf	_serial_available,w,c
  2429  00029C  6EFD               	movwf	tosl,c
  2430  00029E  5031               	movf	_serial_available+1,w,c
  2431  0002A0  6EFE               	movwf	tosh,c
  2432  0002A2  50F8               	movf	tblptru,w,c
  2433  0002A4  6EFF               	movwf	tosu,c
  2434  0002A6  50FA               	movf	pclath,w,c
  2435  0002A8  0012               	return		;indir
  2436  0002AA                     u3019:
  2437  0002AA  501D               	movf	?_Receive_available,w,c
  2438  0002AC  101E               	iorwf	?_Receive_available+1,w,c
  2439  0002AE  B4D8               	btfsc	status,2,c
  2440  0002B0  D004               	goto	l2719
  2441  0002B2  5042               	movf	_rx_array_inx,w,c
  2442  0002B4  5C43               	subwf	_rx_len,w,c
  2443  0002B6  B0D8               	btfsc	status,0,c
  2444  0002B8  D7D3               	goto	l2711
  2445  0002BA                     l2719:
  2446                           
  2447                           ;FastTransfer.c: 191: }
  2448                           ;FastTransfer.c: 193: if (rx_len == (rx_array_inx - 1)) {
  2449  0002BA  5043               	movf	_rx_len,w,c
  2450  0002BC  0100               	movlb	0	; () banked
  2451  0002BE  6F8C               	movwf	??_receiveData& (0+255),b
  2452  0002C0  6B8D               	clrf	(??_receiveData+1)& (0+255),b
  2453  0002C2  0EFF               	movlw	255
  2454  0002C4  0100               	movlb	0	; () banked
  2455  0002C6  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2456  0002C8  0EFF               	movlw	255
  2457  0002CA  0100               	movlb	0	; () banked
  2458  0002CC  6F8F               	movwf	(??_receiveData+3)& (0+255),b
  2459  0002CE  5042               	movf	_rx_array_inx,w,c
  2460  0002D0  0100               	movlb	0	; () banked
  2461  0002D2  6F90               	movwf	(??_receiveData+4)& (0+255),b
  2462  0002D4  6B91               	clrf	(??_receiveData+5)& (0+255),b
  2463  0002D6  0100               	movlb	0	; () banked
  2464  0002D8  518E               	movf	(??_receiveData+2)& (0+255),w,b
  2465  0002DA  0100               	movlb	0	; () banked
  2466  0002DC  2790               	addwf	(??_receiveData+4)& (0+255),f,b
  2467  0002DE  0100               	movlb	0	; () banked
  2468  0002E0  518F               	movf	(??_receiveData+3)& (0+255),w,b
  2469  0002E2  0100               	movlb	0	; () banked
  2470  0002E4  2391               	addwfc	(??_receiveData+5)& (0+255),f,b
  2471  0002E6  0100               	movlb	0	; () banked
  2472  0002E8  518C               	movf	??_receiveData& (0+255),w,b
  2473  0002EA  0100               	movlb	0	; () banked
  2474  0002EC  1990               	xorwf	(??_receiveData+4)& (0+255),w,b
  2475  0002EE  E105               	bnz	u3041
  2476  0002F0  0100               	movlb	0	; () banked
  2477  0002F2  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2478  0002F4  0100               	movlb	0	; () banked
  2479  0002F6  1991               	xorwf	(??_receiveData+5)& (0+255),w,b
  2480  0002F8  A4D8               	btfss	status,2,c
  2481  0002FA                     u3041:
  2482  0002FA  D227               	goto	l2815
  2483                           
  2484                           ; BSR set to: 0
  2485                           ;FastTransfer.c: 196: calc_CS = CRC8(rx_buffer, rx_len);
  2486  0002FC  0E00               	movlw	low _rx_buffer
  2487  0002FE  6E1B               	movwf	CRC8@data,c
  2488  000300  0E02               	movlw	high _rx_buffer
  2489  000302  6E1C               	movwf	CRC8@data+1,c
  2490  000304  C043  F01D         	movff	_rx_len,CRC8@len
  2491  000308  EC7D  F00A         	call	_CRC8	;wreg free
  2492  00030C  6E3D               	movwf	_calc_CS,c
  2493                           
  2494                           ;FastTransfer.c: 200: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2495  00030E  0EFF               	movlw	255
  2496  000310  0100               	movlb	0	; () banked
  2497  000312  6F8C               	movwf	??_receiveData& (0+255),b
  2498  000314  0EFF               	movlw	255
  2499  000316  0100               	movlb	0	; () banked
  2500  000318  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  2501  00031A  5042               	movf	_rx_array_inx,w,c
  2502  00031C  0100               	movlb	0	; () banked
  2503  00031E  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2504  000320  6B8F               	clrf	(??_receiveData+3)& (0+255),b
  2505  000322  0100               	movlb	0	; () banked
  2506  000324  518C               	movf	??_receiveData& (0+255),w,b
  2507  000326  0100               	movlb	0	; () banked
  2508  000328  278E               	addwf	(??_receiveData+2)& (0+255),f,b
  2509  00032A  0100               	movlb	0	; () banked
  2510  00032C  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2511  00032E  0100               	movlb	0	; () banked
  2512  000330  238F               	addwfc	(??_receiveData+3)& (0+255),f,b
  2513  000332  0E00               	movlw	low _rx_buffer
  2514  000334  0100               	movlb	0	; () banked
  2515  000336  258E               	addwf	(??_receiveData+2)& (0+255),w,b
  2516  000338  6ED9               	movwf	fsr2l,c
  2517  00033A  0E02               	movlw	high _rx_buffer
  2518  00033C  0100               	movlb	0	; () banked
  2519  00033E  218F               	addwfc	(??_receiveData+3)& (0+255),w,b
  2520  000340  6EDA               	movwf	fsr2h,c
  2521  000342  503D               	movf	_calc_CS,w,c
  2522  000344  18DE               	xorwf	postinc2,w,c
  2523  000346  A4D8               	btfss	status,2,c
  2524  000348  D139               	goto	l2777
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;FastTransfer.c: 203: int r;
  2528                           ;FastTransfer.c: 204: for (r = 0; r < rx_len; r = r + 3) {
  2529  00034A  0E00               	movlw	0
  2530  00034C  0100               	movlb	0	; () banked
  2531  00034E  6F9D               	movwf	(receiveData@r+1)& (0+255),b
  2532  000350  0E00               	movlw	0
  2533  000352  6F9C               	movwf	receiveData@r& (0+255),b
  2534  000354  D05A               	goto	l2737
  2535  000356                     l2727:
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;FastTransfer.c: 205: if (rx_buffer[r] < maxDataAddress) {
  2539  000356  0E00               	movlw	low _rx_buffer
  2540  000358  0100               	movlb	0	; () banked
  2541  00035A  259C               	addwf	receiveData@r& (0+255),w,b
  2542  00035C  6ED9               	movwf	fsr2l,c
  2543  00035E  0E02               	movlw	high _rx_buffer
  2544  000360  0100               	movlb	0	; () banked
  2545  000362  219D               	addwfc	(receiveData@r+1)& (0+255),w,b
  2546  000364  6EDA               	movwf	fsr2h,c
  2547  000366  503E               	movf	_maxDataAddress,w,c
  2548  000368  5CDE               	subwf	postinc2,w,c
  2549  00036A  B0D8               	btfsc	status,0,c
  2550  00036C  D041               	goto	l2733
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;FastTransfer.c: 206: group.parts[0] = rx_buffer[r + 1];
  2554  00036E  0E01               	movlw	1
  2555  000370  0100               	movlb	0	; () banked
  2556  000372  259C               	addwf	receiveData@r& (0+255),w,b
  2557  000374  0100               	movlb	0	; () banked
  2558  000376  6F8C               	movwf	??_receiveData& (0+255),b
  2559  000378  0E00               	movlw	0
  2560  00037A  0100               	movlb	0	; () banked
  2561  00037C  219D               	addwfc	(receiveData@r+1)& (0+255),w,b
  2562  00037E  0100               	movlb	0	; () banked
  2563  000380  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  2564  000382  0E00               	movlw	low _rx_buffer
  2565  000384  0100               	movlb	0	; () banked
  2566  000386  258C               	addwf	??_receiveData& (0+255),w,b
  2567  000388  6ED9               	movwf	fsr2l,c
  2568  00038A  0E02               	movlw	high _rx_buffer
  2569  00038C  0100               	movlb	0	; () banked
  2570  00038E  218D               	addwfc	(??_receiveData+1)& (0+255),w,b
  2571  000390  6EDA               	movwf	fsr2h,c
  2572  000392  50DF               	movf	indf2,w,c
  2573  000394  6E2A               	movwf	_group,c
  2574                           
  2575                           ;FastTransfer.c: 207: group.parts[1] = rx_buffer[r + 2];
  2576  000396  0E02               	movlw	2
  2577  000398  0100               	movlb	0	; () banked
  2578  00039A  259C               	addwf	receiveData@r& (0+255),w,b
  2579  00039C  0100               	movlb	0	; () banked
  2580  00039E  6F8C               	movwf	??_receiveData& (0+255),b
  2581  0003A0  0E00               	movlw	0
  2582  0003A2  0100               	movlb	0	; () banked
  2583  0003A4  219D               	addwfc	(receiveData@r+1)& (0+255),w,b
  2584  0003A6  0100               	movlb	0	; () banked
  2585  0003A8  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  2586  0003AA  0E00               	movlw	low _rx_buffer
  2587  0003AC  0100               	movlb	0	; () banked
  2588  0003AE  258C               	addwf	??_receiveData& (0+255),w,b
  2589  0003B0  6ED9               	movwf	fsr2l,c
  2590  0003B2  0E02               	movlw	high _rx_buffer
  2591  0003B4  0100               	movlb	0	; () banked
  2592  0003B6  218D               	addwfc	(??_receiveData+1)& (0+255),w,b
  2593  0003B8  6EDA               	movwf	fsr2h,c
  2594  0003BA  50DF               	movf	indf2,w,c
  2595  0003BC  6E2B               	movwf	_group+1,c
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;FastTransfer.c: 208: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2599  0003BE  0E00               	movlw	low _rx_buffer
  2600  0003C0  0100               	movlb	0	; () banked
  2601  0003C2  259C               	addwf	receiveData@r& (0+255),w,b
  2602  0003C4  6ED9               	movwf	fsr2l,c
  2603  0003C6  0E02               	movlw	high _rx_buffer
  2604  0003C8  0100               	movlb	0	; () banked
  2605  0003CA  219D               	addwfc	(receiveData@r+1)& (0+255),w,b
  2606  0003CC  6EDA               	movwf	fsr2h,c
  2607  0003CE  50DF               	movf	indf2,w,c
  2608  0003D0  0100               	movlb	0	; () banked
  2609  0003D2  6F8C               	movwf	??_receiveData& (0+255),b
  2610  0003D4  0100               	movlb	0	; () banked
  2611  0003D6  518C               	movf	??_receiveData& (0+255),w,b
  2612  0003D8  0D02               	mullw	2
  2613  0003DA  50F3               	movf	prodl,w,c
  2614  0003DC  242C               	addwf	_receiveArrayAddress,w,c
  2615  0003DE  6ED9               	movwf	fsr2l,c
  2616  0003E0  50F4               	movf	prodh,w,c
  2617  0003E2  202D               	addwfc	_receiveArrayAddress+1,w,c
  2618  0003E4  6EDA               	movwf	fsr2h,c
  2619  0003E6  C02A  FFDE         	movff	_group,postinc2
  2620  0003EA  C02B  FFDD         	movff	_group+1,postdec2
  2621                           
  2622                           ;FastTransfer.c: 209: } else {
  2623  0003EE  D003               	goto	l2735
  2624  0003F0                     l2733:
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;FastTransfer.c: 210: dataAdressErrorCounter++;
  2628  0003F0  0100               	movlb	0	; () banked
  2629  0003F2  4B66               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2630  0003F4  2B67               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2631  0003F6                     l2735:
  2632                           
  2633                           ; BSR set to: 0
  2634  0003F6  0E03               	movlw	3
  2635  0003F8  0100               	movlb	0	; () banked
  2636  0003FA  259C               	addwf	receiveData@r& (0+255),w,b
  2637  0003FC  0100               	movlb	0	; () banked
  2638  0003FE  6F9C               	movwf	receiveData@r& (0+255),b
  2639  000400  0E00               	movlw	0
  2640  000402  0100               	movlb	0	; () banked
  2641  000404  219D               	addwfc	(receiveData@r+1)& (0+255),w,b
  2642  000406  0100               	movlb	0	; () banked
  2643  000408  6F9D               	movwf	(receiveData@r+1)& (0+255),b
  2644  00040A                     l2737:
  2645                           
  2646                           ; BSR set to: 0
  2647  00040A  5043               	movf	_rx_len,w,c
  2648  00040C  0100               	movlb	0	; () banked
  2649  00040E  6F8C               	movwf	??_receiveData& (0+255),b
  2650  000410  6B8D               	clrf	(??_receiveData+1)& (0+255),b
  2651  000412  0100               	movlb	0	; () banked
  2652  000414  518C               	movf	??_receiveData& (0+255),w,b
  2653  000416  0100               	movlb	0	; () banked
  2654  000418  5D9C               	subwf	receiveData@r& (0+255),w,b
  2655  00041A  0100               	movlb	0	; () banked
  2656  00041C  519D               	movf	(receiveData@r+1)& (0+255),w,b
  2657  00041E  0A80               	xorlw	128
  2658  000420  0100               	movlb	0	; () banked
  2659  000422  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2660  000424  0100               	movlb	0	; () banked
  2661  000426  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2662  000428  0A80               	xorlw	128
  2663  00042A  0100               	movlb	0	; () banked
  2664  00042C  598E               	subwfb	(??_receiveData+2)& (0+255),w,b
  2665  00042E  A0D8               	btfss	status,0,c
  2666  000430  D792               	goto	l2727
  2667                           
  2668                           ; BSR set to: 0
  2669                           ;FastTransfer.c: 211: }
  2670                           ;FastTransfer.c: 212: }
  2671                           ;FastTransfer.c: 215: if (AKNAKsend) {
  2672                           
  2673                           ; BSR set to: 0
  2674  000432  503A               	movf	_AKNAKsend,w,c
  2675  000434  B4D8               	btfsc	status,2,c
  2676  000436  D0BC               	goto	l2767
  2677                           
  2678                           ; BSR set to: 0
  2679                           ;FastTransfer.c: 216: unsigned char holder[3];
  2680                           ;FastTransfer.c: 217: holder[0] = 255;
  2681  000438  0100               	movlb	0	; () banked
  2682  00043A  6992               	setf	receiveData@holder& (0+255),b
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;FastTransfer.c: 218: holder[1] = 1;
  2686  00043C  0E01               	movlw	1
  2687  00043E  0100               	movlb	0	; () banked
  2688  000440  6F93               	movwf	(receiveData@holder+1)& (0+255),b
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;FastTransfer.c: 219: holder[2] = rx_buffer[rx_array_inx - 1];
  2692  000442  0EFF               	movlw	255
  2693  000444  0100               	movlb	0	; () banked
  2694  000446  6F8C               	movwf	??_receiveData& (0+255),b
  2695  000448  0EFF               	movlw	255
  2696  00044A  0100               	movlb	0	; () banked
  2697  00044C  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  2698  00044E  5042               	movf	_rx_array_inx,w,c
  2699  000450  0100               	movlb	0	; () banked
  2700  000452  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2701  000454  6B8F               	clrf	(??_receiveData+3)& (0+255),b
  2702  000456  0100               	movlb	0	; () banked
  2703  000458  518C               	movf	??_receiveData& (0+255),w,b
  2704  00045A  0100               	movlb	0	; () banked
  2705  00045C  278E               	addwf	(??_receiveData+2)& (0+255),f,b
  2706  00045E  0100               	movlb	0	; () banked
  2707  000460  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2708  000462  0100               	movlb	0	; () banked
  2709  000464  238F               	addwfc	(??_receiveData+3)& (0+255),f,b
  2710  000466  0E00               	movlw	low _rx_buffer
  2711  000468  0100               	movlb	0	; () banked
  2712  00046A  258E               	addwf	(??_receiveData+2)& (0+255),w,b
  2713  00046C  6ED9               	movwf	fsr2l,c
  2714  00046E  0E02               	movlw	high _rx_buffer
  2715  000470  0100               	movlb	0	; () banked
  2716  000472  218F               	addwfc	(??_receiveData+3)& (0+255),w,b
  2717  000474  6EDA               	movwf	fsr2h,c
  2718  000476  50DF               	movf	indf2,w,c
  2719  000478  0100               	movlb	0	; () banked
  2720  00047A  6F94               	movwf	(receiveData@holder+2)& (0+255),b
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;FastTransfer.c: 220: unsigned char crcHolder = CRC8(holder, 3);
  2724  00047C  0E92               	movlw	low receiveData@holder
  2725  00047E  6E1B               	movwf	CRC8@data,c
  2726  000480  0E00               	movlw	high receiveData@holder
  2727  000482  6E1C               	movwf	CRC8@data+1,c
  2728  000484  0E03               	movlw	3
  2729  000486  6E1D               	movwf	CRC8@len,c
  2730  000488  EC7D  F00A         	call	_CRC8	;wreg free
  2731  00048C  0100               	movlb	0	; () banked
  2732  00048E  6F98               	movwf	receiveData@crcHolder& (0+255),b
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;FastTransfer.c: 221: serial_write(0x06);
  2736  000490  D801               	call	u3098
  2737  000492  D00B               	goto	l2751
  2738  000494                     u3098:
  2739  000494  0005               	push	
  2740  000496  6EFA               	movwf	pclath,c
  2741  000498  5036               	movf	_serial_write,w,c
  2742  00049A  6EFD               	movwf	tosl,c
  2743  00049C  5037               	movf	_serial_write+1,w,c
  2744  00049E  6EFE               	movwf	tosh,c
  2745  0004A0  50F8               	movf	tblptru,w,c
  2746  0004A2  6EFF               	movwf	tosu,c
  2747  0004A4  50FA               	movf	pclath,w,c
  2748  0004A6  0E06               	movlw	6
  2749  0004A8  0012               	return		;indir
  2750  0004AA                     l2751:
  2751                           
  2752                           ;FastTransfer.c: 222: serial_write(0x85);
  2753  0004AA  D801               	call	u3108
  2754  0004AC  D00B               	goto	l2753
  2755  0004AE                     u3108:
  2756  0004AE  0005               	push	
  2757  0004B0  6EFA               	movwf	pclath,c
  2758  0004B2  5036               	movf	_serial_write,w,c
  2759  0004B4  6EFD               	movwf	tosl,c
  2760  0004B6  5037               	movf	_serial_write+1,w,c
  2761  0004B8  6EFE               	movwf	tosh,c
  2762  0004BA  50F8               	movf	tblptru,w,c
  2763  0004BC  6EFF               	movwf	tosu,c
  2764  0004BE  50FA               	movf	pclath,w,c
  2765  0004C0  0E85               	movlw	133
  2766  0004C2  0012               	return		;indir
  2767  0004C4                     l2753:
  2768                           
  2769                           ;FastTransfer.c: 223: serial_write(returnAddress);
  2770  0004C4  D801               	call	u3118
  2771  0004C6  D00B               	goto	l2755
  2772  0004C8                     u3118:
  2773  0004C8  0005               	push	
  2774  0004CA  6EFA               	movwf	pclath,c
  2775  0004CC  5036               	movf	_serial_write,w,c
  2776  0004CE  6EFD               	movwf	tosl,c
  2777  0004D0  5037               	movf	_serial_write+1,w,c
  2778  0004D2  6EFE               	movwf	tosh,c
  2779  0004D4  50F8               	movf	tblptru,w,c
  2780  0004D6  6EFF               	movwf	tosu,c
  2781  0004D8  50FA               	movf	pclath,w,c
  2782  0004DA  5040               	movf	_returnAddress,w,c
  2783  0004DC  0012               	return		;indir
  2784  0004DE                     l2755:
  2785                           
  2786                           ;FastTransfer.c: 224: serial_write(moduleAddress);
  2787  0004DE  D801               	call	u3128
  2788  0004E0  D00B               	goto	l2757
  2789  0004E2                     u3128:
  2790  0004E2  0005               	push	
  2791  0004E4  6EFA               	movwf	pclath,c
  2792  0004E6  5036               	movf	_serial_write,w,c
  2793  0004E8  6EFD               	movwf	tosl,c
  2794  0004EA  5037               	movf	_serial_write+1,w,c
  2795  0004EC  6EFE               	movwf	tosh,c
  2796  0004EE  50F8               	movf	tblptru,w,c
  2797  0004F0  6EFF               	movwf	tosu,c
  2798  0004F2  50FA               	movf	pclath,w,c
  2799  0004F4  503F               	movf	_moduleAddress,w,c
  2800  0004F6  0012               	return		;indir
  2801  0004F8                     l2757:
  2802                           
  2803                           ;FastTransfer.c: 225: serial_write(3);
  2804  0004F8  D801               	call	u3138
  2805  0004FA  D00B               	goto	l2759
  2806  0004FC                     u3138:
  2807  0004FC  0005               	push	
  2808  0004FE  6EFA               	movwf	pclath,c
  2809  000500  5036               	movf	_serial_write,w,c
  2810  000502  6EFD               	movwf	tosl,c
  2811  000504  5037               	movf	_serial_write+1,w,c
  2812  000506  6EFE               	movwf	tosh,c
  2813  000508  50F8               	movf	tblptru,w,c
  2814  00050A  6EFF               	movwf	tosu,c
  2815  00050C  50FA               	movf	pclath,w,c
  2816  00050E  0E03               	movlw	3
  2817  000510  0012               	return		;indir
  2818  000512                     l2759:
  2819                           
  2820                           ;FastTransfer.c: 226: serial_write(255);
  2821  000512  D801               	call	u3148
  2822  000514  D00B               	goto	l2761
  2823  000516                     u3148:
  2824  000516  0005               	push	
  2825  000518  6EFA               	movwf	pclath,c
  2826  00051A  5036               	movf	_serial_write,w,c
  2827  00051C  6EFD               	movwf	tosl,c
  2828  00051E  5037               	movf	_serial_write+1,w,c
  2829  000520  6EFE               	movwf	tosh,c
  2830  000522  50F8               	movf	tblptru,w,c
  2831  000524  6EFF               	movwf	tosu,c
  2832  000526  50FA               	movf	pclath,w,c
  2833  000528  0EFF               	movlw	255
  2834  00052A  0012               	return		;indir
  2835  00052C                     l2761:
  2836                           
  2837                           ;FastTransfer.c: 227: serial_write(1);
  2838  00052C  D801               	call	u3158
  2839  00052E  D00B               	goto	l2763
  2840  000530                     u3158:
  2841  000530  0005               	push	
  2842  000532  6EFA               	movwf	pclath,c
  2843  000534  5036               	movf	_serial_write,w,c
  2844  000536  6EFD               	movwf	tosl,c
  2845  000538  5037               	movf	_serial_write+1,w,c
  2846  00053A  6EFE               	movwf	tosh,c
  2847  00053C  50F8               	movf	tblptru,w,c
  2848  00053E  6EFF               	movwf	tosu,c
  2849  000540  50FA               	movf	pclath,w,c
  2850  000542  0E01               	movlw	1
  2851  000544  0012               	return		;indir
  2852  000546                     l2763:
  2853                           
  2854                           ;FastTransfer.c: 228: serial_write(rx_buffer[rx_array_inx - 1]);
  2855  000546  D801               	call	u3168
  2856  000548  D025               	goto	l2765
  2857  00054A                     u3168:
  2858  00054A  0005               	push	
  2859  00054C  6EFA               	movwf	pclath,c
  2860  00054E  5036               	movf	_serial_write,w,c
  2861  000550  6EFD               	movwf	tosl,c
  2862  000552  5037               	movf	_serial_write+1,w,c
  2863  000554  6EFE               	movwf	tosh,c
  2864  000556  50F8               	movf	tblptru,w,c
  2865  000558  6EFF               	movwf	tosu,c
  2866  00055A  50FA               	movf	pclath,w,c
  2867  00055C  0EFF               	movlw	255
  2868  00055E  0100               	movlb	0	; () banked
  2869  000560  6F8C               	movwf	??_receiveData& (0+255),b
  2870  000562  0EFF               	movlw	255
  2871  000564  0100               	movlb	0	; () banked
  2872  000566  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  2873  000568  5042               	movf	_rx_array_inx,w,c
  2874  00056A  0100               	movlb	0	; () banked
  2875  00056C  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2876  00056E  6B8F               	clrf	(??_receiveData+3)& (0+255),b
  2877  000570  0100               	movlb	0	; () banked
  2878  000572  518C               	movf	??_receiveData& (0+255),w,b
  2879  000574  0100               	movlb	0	; () banked
  2880  000576  278E               	addwf	(??_receiveData+2)& (0+255),f,b
  2881  000578  0100               	movlb	0	; () banked
  2882  00057A  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2883  00057C  0100               	movlb	0	; () banked
  2884  00057E  238F               	addwfc	(??_receiveData+3)& (0+255),f,b
  2885  000580  0E00               	movlw	low _rx_buffer
  2886  000582  0100               	movlb	0	; () banked
  2887  000584  258E               	addwf	(??_receiveData+2)& (0+255),w,b
  2888  000586  6ED9               	movwf	fsr2l,c
  2889  000588  0E02               	movlw	high _rx_buffer
  2890  00058A  0100               	movlb	0	; () banked
  2891  00058C  218F               	addwfc	(??_receiveData+3)& (0+255),w,b
  2892  00058E  6EDA               	movwf	fsr2h,c
  2893  000590  50DF               	movf	indf2,w,c
  2894  000592  0012               	return		;indir
  2895  000594                     l2765:
  2896                           
  2897                           ;FastTransfer.c: 229: serial_write(crcHolder);
  2898  000594  D801               	call	u3178
  2899  000596  D00C               	goto	l2767
  2900  000598                     u3178:
  2901  000598  0005               	push	
  2902  00059A  6EFA               	movwf	pclath,c
  2903  00059C  5036               	movf	_serial_write,w,c
  2904  00059E  6EFD               	movwf	tosl,c
  2905  0005A0  5037               	movf	_serial_write+1,w,c
  2906  0005A2  6EFE               	movwf	tosh,c
  2907  0005A4  50F8               	movf	tblptru,w,c
  2908  0005A6  6EFF               	movwf	tosu,c
  2909  0005A8  50FA               	movf	pclath,w,c
  2910  0005AA  0100               	movlb	0	; () banked
  2911  0005AC  5198               	movf	receiveData@crcHolder& (0+255),w,b
  2912  0005AE  0012               	return		;indir
  2913  0005B0                     l2767:
  2914                           
  2915                           ;FastTransfer.c: 230: }
  2916                           ;FastTransfer.c: 234: rx_len = 0;
  2917  0005B0  0E00               	movlw	0
  2918  0005B2  6E43               	movwf	_rx_len,c
  2919                           
  2920                           ;FastTransfer.c: 235: rx_array_inx = 0;
  2921  0005B4  0E00               	movlw	0
  2922  0005B6  6E42               	movwf	_rx_array_inx,c
  2923                           
  2924                           ;FastTransfer.c: 236: return 1;
  2925  0005B8  0E01               	movlw	1
  2926  0005BA  0012               	return	
  2927  0005BC                     l2777:
  2928                           
  2929                           ;FastTransfer.c: 238: crcErrorCounter++;
  2930  0005BC  4A28               	infsnz	_crcErrorCounter,f,c
  2931  0005BE  2A29               	incf	_crcErrorCounter+1,f,c
  2932                           
  2933                           ;FastTransfer.c: 240: if (AKNAKsend) {
  2934  0005C0  503A               	movf	_AKNAKsend,w,c
  2935  0005C2  B4D8               	btfsc	status,2,c
  2936  0005C4  D0BC               	goto	l2807
  2937                           
  2938                           ;FastTransfer.c: 241: unsigned char holder[3];
  2939                           ;FastTransfer.c: 242: holder[0] = 255;
  2940  0005C6  0100               	movlb	0	; () banked
  2941  0005C8  6995               	setf	receiveData@holder_329& (0+255),b
  2942                           
  2943                           ; BSR set to: 0
  2944                           ;FastTransfer.c: 243: holder[1] = 2;
  2945  0005CA  0E02               	movlw	2
  2946  0005CC  0100               	movlb	0	; () banked
  2947  0005CE  6F96               	movwf	(receiveData@holder_329+1)& (0+255),b
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;FastTransfer.c: 244: holder[2] = rx_buffer[rx_array_inx - 1];
  2951  0005D0  0EFF               	movlw	255
  2952  0005D2  0100               	movlb	0	; () banked
  2953  0005D4  6F8C               	movwf	??_receiveData& (0+255),b
  2954  0005D6  0EFF               	movlw	255
  2955  0005D8  0100               	movlb	0	; () banked
  2956  0005DA  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  2957  0005DC  5042               	movf	_rx_array_inx,w,c
  2958  0005DE  0100               	movlb	0	; () banked
  2959  0005E0  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  2960  0005E2  6B8F               	clrf	(??_receiveData+3)& (0+255),b
  2961  0005E4  0100               	movlb	0	; () banked
  2962  0005E6  518C               	movf	??_receiveData& (0+255),w,b
  2963  0005E8  0100               	movlb	0	; () banked
  2964  0005EA  278E               	addwf	(??_receiveData+2)& (0+255),f,b
  2965  0005EC  0100               	movlb	0	; () banked
  2966  0005EE  518D               	movf	(??_receiveData+1)& (0+255),w,b
  2967  0005F0  0100               	movlb	0	; () banked
  2968  0005F2  238F               	addwfc	(??_receiveData+3)& (0+255),f,b
  2969  0005F4  0E00               	movlw	low _rx_buffer
  2970  0005F6  0100               	movlb	0	; () banked
  2971  0005F8  258E               	addwf	(??_receiveData+2)& (0+255),w,b
  2972  0005FA  6ED9               	movwf	fsr2l,c
  2973  0005FC  0E02               	movlw	high _rx_buffer
  2974  0005FE  0100               	movlb	0	; () banked
  2975  000600  218F               	addwfc	(??_receiveData+3)& (0+255),w,b
  2976  000602  6EDA               	movwf	fsr2h,c
  2977  000604  50DF               	movf	indf2,w,c
  2978  000606  0100               	movlb	0	; () banked
  2979  000608  6F97               	movwf	(receiveData@holder_329+2)& (0+255),b
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;FastTransfer.c: 245: unsigned char crcHolder = CRC8(holder, 3);
  2983  00060A  0E95               	movlw	low receiveData@holder_329
  2984  00060C  6E1B               	movwf	CRC8@data,c
  2985  00060E  0E00               	movlw	high receiveData@holder_329
  2986  000610  6E1C               	movwf	CRC8@data+1,c
  2987  000612  0E03               	movlw	3
  2988  000614  6E1D               	movwf	CRC8@len,c
  2989  000616  EC7D  F00A         	call	_CRC8
  2990  00061A  0100               	movlb	0	; () banked
  2991  00061C  6F99               	movwf	receiveData@crcHolder_330& (0+255),b
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;FastTransfer.c: 246: serial_write(0x06);
  2995  00061E  D801               	call	u3198
  2996  000620  D00B               	goto	l2791
  2997  000622                     u3198:
  2998  000622  0005               	push	
  2999  000624  6EFA               	movwf	pclath,c
  3000  000626  5036               	movf	_serial_write,w,c
  3001  000628  6EFD               	movwf	tosl,c
  3002  00062A  5037               	movf	_serial_write+1,w,c
  3003  00062C  6EFE               	movwf	tosh,c
  3004  00062E  50F8               	movf	tblptru,w,c
  3005  000630  6EFF               	movwf	tosu,c
  3006  000632  50FA               	movf	pclath,w,c
  3007  000634  0E06               	movlw	6
  3008  000636  0012               	return		;indir
  3009  000638                     l2791:
  3010                           
  3011                           ;FastTransfer.c: 247: serial_write(0x85);
  3012  000638  D801               	call	u3208
  3013  00063A  D00B               	goto	l2793
  3014  00063C                     u3208:
  3015  00063C  0005               	push	
  3016  00063E  6EFA               	movwf	pclath,c
  3017  000640  5036               	movf	_serial_write,w,c
  3018  000642  6EFD               	movwf	tosl,c
  3019  000644  5037               	movf	_serial_write+1,w,c
  3020  000646  6EFE               	movwf	tosh,c
  3021  000648  50F8               	movf	tblptru,w,c
  3022  00064A  6EFF               	movwf	tosu,c
  3023  00064C  50FA               	movf	pclath,w,c
  3024  00064E  0E85               	movlw	133
  3025  000650  0012               	return		;indir
  3026  000652                     l2793:
  3027                           
  3028                           ;FastTransfer.c: 248: serial_write(returnAddress);
  3029  000652  D801               	call	u3218
  3030  000654  D00B               	goto	l2795
  3031  000656                     u3218:
  3032  000656  0005               	push	
  3033  000658  6EFA               	movwf	pclath,c
  3034  00065A  5036               	movf	_serial_write,w,c
  3035  00065C  6EFD               	movwf	tosl,c
  3036  00065E  5037               	movf	_serial_write+1,w,c
  3037  000660  6EFE               	movwf	tosh,c
  3038  000662  50F8               	movf	tblptru,w,c
  3039  000664  6EFF               	movwf	tosu,c
  3040  000666  50FA               	movf	pclath,w,c
  3041  000668  5040               	movf	_returnAddress,w,c
  3042  00066A  0012               	return		;indir
  3043  00066C                     l2795:
  3044                           
  3045                           ;FastTransfer.c: 249: serial_write(moduleAddress);
  3046  00066C  D801               	call	u3228
  3047  00066E  D00B               	goto	l2797
  3048  000670                     u3228:
  3049  000670  0005               	push	
  3050  000672  6EFA               	movwf	pclath,c
  3051  000674  5036               	movf	_serial_write,w,c
  3052  000676  6EFD               	movwf	tosl,c
  3053  000678  5037               	movf	_serial_write+1,w,c
  3054  00067A  6EFE               	movwf	tosh,c
  3055  00067C  50F8               	movf	tblptru,w,c
  3056  00067E  6EFF               	movwf	tosu,c
  3057  000680  50FA               	movf	pclath,w,c
  3058  000682  503F               	movf	_moduleAddress,w,c
  3059  000684  0012               	return		;indir
  3060  000686                     l2797:
  3061                           
  3062                           ;FastTransfer.c: 250: serial_write(3);
  3063  000686  D801               	call	u3238
  3064  000688  D00B               	goto	l2799
  3065  00068A                     u3238:
  3066  00068A  0005               	push	
  3067  00068C  6EFA               	movwf	pclath,c
  3068  00068E  5036               	movf	_serial_write,w,c
  3069  000690  6EFD               	movwf	tosl,c
  3070  000692  5037               	movf	_serial_write+1,w,c
  3071  000694  6EFE               	movwf	tosh,c
  3072  000696  50F8               	movf	tblptru,w,c
  3073  000698  6EFF               	movwf	tosu,c
  3074  00069A  50FA               	movf	pclath,w,c
  3075  00069C  0E03               	movlw	3
  3076  00069E  0012               	return		;indir
  3077  0006A0                     l2799:
  3078                           
  3079                           ;FastTransfer.c: 251: serial_write(255);
  3080  0006A0  D801               	call	u3248
  3081  0006A2  D00B               	goto	l2801
  3082  0006A4                     u3248:
  3083  0006A4  0005               	push	
  3084  0006A6  6EFA               	movwf	pclath,c
  3085  0006A8  5036               	movf	_serial_write,w,c
  3086  0006AA  6EFD               	movwf	tosl,c
  3087  0006AC  5037               	movf	_serial_write+1,w,c
  3088  0006AE  6EFE               	movwf	tosh,c
  3089  0006B0  50F8               	movf	tblptru,w,c
  3090  0006B2  6EFF               	movwf	tosu,c
  3091  0006B4  50FA               	movf	pclath,w,c
  3092  0006B6  0EFF               	movlw	255
  3093  0006B8  0012               	return		;indir
  3094  0006BA                     l2801:
  3095                           
  3096                           ;FastTransfer.c: 252: serial_write(2);
  3097  0006BA  D801               	call	u3258
  3098  0006BC  D00B               	goto	l2803
  3099  0006BE                     u3258:
  3100  0006BE  0005               	push	
  3101  0006C0  6EFA               	movwf	pclath,c
  3102  0006C2  5036               	movf	_serial_write,w,c
  3103  0006C4  6EFD               	movwf	tosl,c
  3104  0006C6  5037               	movf	_serial_write+1,w,c
  3105  0006C8  6EFE               	movwf	tosh,c
  3106  0006CA  50F8               	movf	tblptru,w,c
  3107  0006CC  6EFF               	movwf	tosu,c
  3108  0006CE  50FA               	movf	pclath,w,c
  3109  0006D0  0E02               	movlw	2
  3110  0006D2  0012               	return		;indir
  3111  0006D4                     l2803:
  3112                           
  3113                           ;FastTransfer.c: 253: serial_write(rx_buffer[rx_array_inx - 1]);
  3114  0006D4  D801               	call	u3268
  3115  0006D6  D025               	goto	l2805
  3116  0006D8                     u3268:
  3117  0006D8  0005               	push	
  3118  0006DA  6EFA               	movwf	pclath,c
  3119  0006DC  5036               	movf	_serial_write,w,c
  3120  0006DE  6EFD               	movwf	tosl,c
  3121  0006E0  5037               	movf	_serial_write+1,w,c
  3122  0006E2  6EFE               	movwf	tosh,c
  3123  0006E4  50F8               	movf	tblptru,w,c
  3124  0006E6  6EFF               	movwf	tosu,c
  3125  0006E8  50FA               	movf	pclath,w,c
  3126  0006EA  0EFF               	movlw	255
  3127  0006EC  0100               	movlb	0	; () banked
  3128  0006EE  6F8C               	movwf	??_receiveData& (0+255),b
  3129  0006F0  0EFF               	movlw	255
  3130  0006F2  0100               	movlb	0	; () banked
  3131  0006F4  6F8D               	movwf	(??_receiveData+1)& (0+255),b
  3132  0006F6  5042               	movf	_rx_array_inx,w,c
  3133  0006F8  0100               	movlb	0	; () banked
  3134  0006FA  6F8E               	movwf	(??_receiveData+2)& (0+255),b
  3135  0006FC  6B8F               	clrf	(??_receiveData+3)& (0+255),b
  3136  0006FE  0100               	movlb	0	; () banked
  3137  000700  518C               	movf	??_receiveData& (0+255),w,b
  3138  000702  0100               	movlb	0	; () banked
  3139  000704  278E               	addwf	(??_receiveData+2)& (0+255),f,b
  3140  000706  0100               	movlb	0	; () banked
  3141  000708  518D               	movf	(??_receiveData+1)& (0+255),w,b
  3142  00070A  0100               	movlb	0	; () banked
  3143  00070C  238F               	addwfc	(??_receiveData+3)& (0+255),f,b
  3144  00070E  0E00               	movlw	low _rx_buffer
  3145  000710  0100               	movlb	0	; () banked
  3146  000712  258E               	addwf	(??_receiveData+2)& (0+255),w,b
  3147  000714  6ED9               	movwf	fsr2l,c
  3148  000716  0E02               	movlw	high _rx_buffer
  3149  000718  0100               	movlb	0	; () banked
  3150  00071A  218F               	addwfc	(??_receiveData+3)& (0+255),w,b
  3151  00071C  6EDA               	movwf	fsr2h,c
  3152  00071E  50DF               	movf	indf2,w,c
  3153  000720  0012               	return		;indir
  3154  000722                     l2805:
  3155                           
  3156                           ;FastTransfer.c: 254: serial_write(crcHolder);
  3157  000722  D801               	call	u3278
  3158  000724  D00C               	goto	l2807
  3159  000726                     u3278:
  3160  000726  0005               	push	
  3161  000728  6EFA               	movwf	pclath,c
  3162  00072A  5036               	movf	_serial_write,w,c
  3163  00072C  6EFD               	movwf	tosl,c
  3164  00072E  5037               	movf	_serial_write+1,w,c
  3165  000730  6EFE               	movwf	tosh,c
  3166  000732  50F8               	movf	tblptru,w,c
  3167  000734  6EFF               	movwf	tosu,c
  3168  000736  50FA               	movf	pclath,w,c
  3169  000738  0100               	movlb	0	; () banked
  3170  00073A  5199               	movf	receiveData@crcHolder_330& (0+255),w,b
  3171  00073C  0012               	return		;indir
  3172  00073E                     l2807:
  3173                           
  3174                           ;FastTransfer.c: 255: }
  3175                           ;FastTransfer.c: 258: rx_len = 0;
  3176  00073E  0E00               	movlw	0
  3177  000740  6E43               	movwf	_rx_len,c
  3178                           
  3179                           ;FastTransfer.c: 259: rx_array_inx = 0;
  3180  000742  0E00               	movlw	0
  3181  000744  6E42               	movwf	_rx_array_inx,c
  3182                           
  3183                           ;FastTransfer.c: 260: return 0;
  3184  000746  0E00               	movlw	0
  3185  000748  0012               	return	
  3186  00074A                     l2815:
  3187                           
  3188                           ;FastTransfer.c: 261: }
  3189                           ;FastTransfer.c: 262: }
  3190                           ;FastTransfer.c: 263: }
  3191                           ;FastTransfer.c: 266: return 0;
  3192  00074A  0E00               	movlw	0
  3193  00074C  0012               	return	
  3194  00074E                     __end_of_receiveData:
  3195                           	opt stack 0
  3196                           tosu	equ	0xFFF
  3197                           tosh	equ	0xFFE
  3198                           tosl	equ	0xFFD
  3199                           pclath	equ	0xFFA
  3200                           tblptru	equ	0xFF8
  3201                           tblptrh	equ	0xFF7
  3202                           tblptrl	equ	0xFF6
  3203                           tablat	equ	0xFF5
  3204                           prodh	equ	0xFF4
  3205                           prodl	equ	0xFF3
  3206                           postinc0	equ	0xFEE
  3207                           wreg	equ	0xFE8
  3208                           indf2	equ	0xFDF
  3209                           postinc2	equ	0xFDE
  3210                           postdec2	equ	0xFDD
  3211                           plusw2	equ	0xFDB
  3212                           fsr2h	equ	0xFDA
  3213                           fsr2l	equ	0xFD9
  3214                           status	equ	0xFD8
  3215                           
  3216 ;; *************** function _Send_put *****************
  3217 ;; Defined at:
  3218 ;;		line 130 in file "UART.c"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;  _data           1    wreg     unsigned char 
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;  _data           1    0[BANK0 ] unsigned char 
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  1    wreg      void 
  3225 ;; Registers used:
  3226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3232 ;;      Params:         0       0       0       0       0       0       0
  3233 ;;      Locals:         0       1       0       0       0       0       0
  3234 ;;      Temps:          0       0       0       0       0       0       0
  3235 ;;      Totals:         0       1       0       0       0       0       0
  3236 ;;Total ram usage:        1 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:    6
  3239 ;; This function calls:
  3240 ;;		_UART_buff_get
  3241 ;;		_UART_buff_put
  3242 ;; This function is called by:
  3243 ;;		_ComStart
  3244 ;;		_putch
  3245 ;;		_sendData
  3246 ;;		_receiveData
  3247 ;; This function uses a non-reentrant model
  3248 ;;
  3249                           
  3250                           	psect	text12
  3251  0015E6                     __ptext12:
  3252                           	opt stack 0
  3253  0015E6                     _Send_put:
  3254                           	opt stack 21
  3255                           
  3256                           ;incstack = 0
  3257                           ;Send_put@_data stored from wreg
  3258  0015E6  0100               	movlb	0	; () banked
  3259  0015E8  6F83               	movwf	Send_put@_data& (0+255),b
  3260                           
  3261                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  3262  0015EA  0E00               	movlw	low _output_buffer
  3263  0015EC  6E21               	movwf	UART_buff_put@_this,c
  3264  0015EE  0E04               	movlw	high _output_buffer
  3265  0015F0  6E22               	movwf	UART_buff_put@_this+1,c
  3266  0015F2  C083  F023         	movff	Send_put@_data,UART_buff_put@c
  3267  0015F6  ECB4  F005         	call	_UART_buff_put
  3268                           
  3269                           ;UART.c: 132: if (Transmit_stall == 1) {
  3270  0015FA  0444               	decf	_Transmit_stall,w,c
  3271  0015FC  A4D8               	btfss	status,2,c
  3272  0015FE  0012               	return	
  3273                           
  3274                           ;UART.c: 133: Transmit_stall = 0;
  3275  001600  0E00               	movlw	0
  3276  001602  6E44               	movwf	_Transmit_stall,c
  3277                           
  3278                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  3279  001604  0E00               	movlw	low _output_buffer
  3280  001606  6E21               	movwf	UART_buff_get@_this,c
  3281  001608  0E04               	movlw	high _output_buffer
  3282  00160A  6E22               	movwf	UART_buff_get@_this+1,c
  3283  00160C  EC8C  F008         	call	_UART_buff_get	;wreg free
  3284  001610  6EAD               	movwf	4013,c	;volatile
  3285                           
  3286                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  3287  001612  889D               	bsf	3997,4,c	;volatile
  3288  001614  0012               	return	
  3289  001616                     __end_of_Send_put:
  3290                           	opt stack 0
  3291                           tosu	equ	0xFFF
  3292                           tosh	equ	0xFFE
  3293                           tosl	equ	0xFFD
  3294                           pclath	equ	0xFFA
  3295                           tblptru	equ	0xFF8
  3296                           tblptrh	equ	0xFF7
  3297                           tblptrl	equ	0xFF6
  3298                           tablat	equ	0xFF5
  3299                           prodh	equ	0xFF4
  3300                           prodl	equ	0xFF3
  3301                           postinc0	equ	0xFEE
  3302                           wreg	equ	0xFE8
  3303                           indf2	equ	0xFDF
  3304                           postinc2	equ	0xFDE
  3305                           postdec2	equ	0xFDD
  3306                           plusw2	equ	0xFDB
  3307                           fsr2h	equ	0xFDA
  3308                           fsr2l	equ	0xFD9
  3309                           status	equ	0xFD8
  3310                           
  3311 ;; *************** function _UART_buff_put *****************
  3312 ;; Defined at:
  3313 ;;		line 68 in file "UART.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3316 ;;		 -> output_buffer(206), input_buffer(206), 
  3317 ;;  c               1   34[COMRAM] const unsigned char 
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;		None
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      void 
  3322 ;; Registers used:
  3323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3329 ;;      Params:         3       0       0       0       0       0       0
  3330 ;;      Locals:         0       0       0       0       0       0       0
  3331 ;;      Temps:          2       0       0       0       0       0       0
  3332 ;;      Totals:         5       0       0       0       0       0       0
  3333 ;;Total ram usage:        5 bytes
  3334 ;; Hardware stack levels used:    1
  3335 ;; Hardware stack levels required when called:    5
  3336 ;; This function calls:
  3337 ;;		_UART_buff_modulo_inc
  3338 ;; This function is called by:
  3339 ;;		_Send_put
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           	psect	text13
  3344  000B68                     __ptext13:
  3345                           	opt stack 0
  3346  000B68                     _UART_buff_put:
  3347                           	opt stack 21
  3348                           
  3349                           ;UART.c: 69: if (_this->count < 200) {
  3350                           
  3351                           ;incstack = 0
  3352  000B68  EE20 F0CC          	lfsr	2,204
  3353  000B6C  5021               	movf	UART_buff_put@_this,w,c
  3354  000B6E  26D9               	addwf	fsr2l,f,c
  3355  000B70  5022               	movf	UART_buff_put@_this+1,w,c
  3356  000B72  22DA               	addwfc	fsr2h,f,c
  3357  000B74  0E01               	movlw	1
  3358  000B76  BEDB               	btfsc	plusw2,7,c
  3359  000B78  D007               	goto	l2417
  3360  000B7A  0E01               	movlw	1
  3361  000B7C  50DB               	movf	plusw2,w,c
  3362  000B7E  E13A               	bnz	l2423
  3363  000B80  0EC8               	movlw	200
  3364  000B82  5CDE               	subwf	postinc2,w,c
  3365  000B84  B0D8               	btfsc	status,0,c
  3366  000B86  D036               	goto	l2423
  3367  000B88                     l2417:
  3368                           
  3369                           ;UART.c: 70: _this->buf[_this->head] = c;
  3370  000B88  EE20 F0C8          	lfsr	2,200
  3371  000B8C  5021               	movf	UART_buff_put@_this,w,c
  3372  000B8E  26D9               	addwf	fsr2l,f,c
  3373  000B90  5022               	movf	UART_buff_put@_this+1,w,c
  3374  000B92  22DA               	addwfc	fsr2h,f,c
  3375  000B94  CFDE F024          	movff	postinc2,??_UART_buff_put
  3376  000B98  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3377  000B9C  5024               	movf	??_UART_buff_put,w,c
  3378  000B9E  2421               	addwf	UART_buff_put@_this,w,c
  3379  000BA0  6ED9               	movwf	fsr2l,c
  3380  000BA2  5025               	movf	??_UART_buff_put+1,w,c
  3381  000BA4  2022               	addwfc	UART_buff_put@_this+1,w,c
  3382  000BA6  6EDA               	movwf	fsr2h,c
  3383  000BA8  C023  FFDF         	movff	UART_buff_put@c,indf2
  3384                           
  3385                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3386  000BAC  EE20 F0C8          	lfsr	2,200
  3387  000BB0  5021               	movf	UART_buff_put@_this,w,c
  3388  000BB2  26D9               	addwf	fsr2l,f,c
  3389  000BB4  5022               	movf	UART_buff_put@_this+1,w,c
  3390  000BB6  22DA               	addwfc	fsr2h,f,c
  3391  000BB8  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3392  000BBC  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3393  000BC0  0E00               	movlw	0
  3394  000BC2  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3395  000BC4  0EC8               	movlw	200
  3396  000BC6  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3397  000BC8  EC4C  F00B         	call	_UART_buff_modulo_inc	;wreg free
  3398  000BCC  EE20 F0C8          	lfsr	2,200
  3399  000BD0  5021               	movf	UART_buff_put@_this,w,c
  3400  000BD2  26D9               	addwf	fsr2l,f,c
  3401  000BD4  5022               	movf	UART_buff_put@_this+1,w,c
  3402  000BD6  22DA               	addwfc	fsr2h,f,c
  3403  000BD8  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3404  000BDC  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3405                           
  3406                           ;UART.c: 72: ++_this->count;
  3407  000BE0  EE20 F0CC          	lfsr	2,204
  3408  000BE4  5021               	movf	UART_buff_put@_this,w,c
  3409  000BE6  26D9               	addwf	fsr2l,f,c
  3410  000BE8  5022               	movf	UART_buff_put@_this+1,w,c
  3411  000BEA  22DA               	addwfc	fsr2h,f,c
  3412  000BEC  2ADE               	incf	postinc2,f,c
  3413  000BEE  0E00               	movlw	0
  3414  000BF0  22DD               	addwfc	postdec2,f,c
  3415                           
  3416                           ;UART.c: 73: } else {
  3417  000BF2  0012               	return	
  3418  000BF4                     l2423:
  3419                           
  3420                           ;UART.c: 74: _this->buf[_this->head] = c;
  3421  000BF4  EE20 F0C8          	lfsr	2,200
  3422  000BF8  5021               	movf	UART_buff_put@_this,w,c
  3423  000BFA  26D9               	addwf	fsr2l,f,c
  3424  000BFC  5022               	movf	UART_buff_put@_this+1,w,c
  3425  000BFE  22DA               	addwfc	fsr2h,f,c
  3426  000C00  CFDE F024          	movff	postinc2,??_UART_buff_put
  3427  000C04  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3428  000C08  5024               	movf	??_UART_buff_put,w,c
  3429  000C0A  2421               	addwf	UART_buff_put@_this,w,c
  3430  000C0C  6ED9               	movwf	fsr2l,c
  3431  000C0E  5025               	movf	??_UART_buff_put+1,w,c
  3432  000C10  2022               	addwfc	UART_buff_put@_this+1,w,c
  3433  000C12  6EDA               	movwf	fsr2h,c
  3434  000C14  C023  FFDF         	movff	UART_buff_put@c,indf2
  3435                           
  3436                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3437  000C18  EE20 F0C8          	lfsr	2,200
  3438  000C1C  5021               	movf	UART_buff_put@_this,w,c
  3439  000C1E  26D9               	addwf	fsr2l,f,c
  3440  000C20  5022               	movf	UART_buff_put@_this+1,w,c
  3441  000C22  22DA               	addwfc	fsr2h,f,c
  3442  000C24  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3443  000C28  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3444  000C2C  0E00               	movlw	0
  3445  000C2E  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3446  000C30  0EC8               	movlw	200
  3447  000C32  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3448  000C34  EC4C  F00B         	call	_UART_buff_modulo_inc	;wreg free
  3449  000C38  EE20 F0C8          	lfsr	2,200
  3450  000C3C  5021               	movf	UART_buff_put@_this,w,c
  3451  000C3E  26D9               	addwf	fsr2l,f,c
  3452  000C40  5022               	movf	UART_buff_put@_this+1,w,c
  3453  000C42  22DA               	addwfc	fsr2h,f,c
  3454  000C44  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3455  000C48  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3456                           
  3457                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3458  000C4C  EE20 F0CA          	lfsr	2,202
  3459  000C50  5021               	movf	UART_buff_put@_this,w,c
  3460  000C52  26D9               	addwf	fsr2l,f,c
  3461  000C54  5022               	movf	UART_buff_put@_this+1,w,c
  3462  000C56  22DA               	addwfc	fsr2h,f,c
  3463  000C58  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3464  000C5C  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3465  000C60  0E00               	movlw	0
  3466  000C62  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3467  000C64  0EC8               	movlw	200
  3468  000C66  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3469  000C68  EC4C  F00B         	call	_UART_buff_modulo_inc	;wreg free
  3470  000C6C  EE20 F0CA          	lfsr	2,202
  3471  000C70  5021               	movf	UART_buff_put@_this,w,c
  3472  000C72  26D9               	addwf	fsr2l,f,c
  3473  000C74  5022               	movf	UART_buff_put@_this+1,w,c
  3474  000C76  22DA               	addwfc	fsr2h,f,c
  3475  000C78  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3476  000C7C  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3477  000C80  0012               	return	
  3478  000C82                     __end_of_UART_buff_put:
  3479                           	opt stack 0
  3480                           tosu	equ	0xFFF
  3481                           tosh	equ	0xFFE
  3482                           tosl	equ	0xFFD
  3483                           pclath	equ	0xFFA
  3484                           tblptru	equ	0xFF8
  3485                           tblptrh	equ	0xFF7
  3486                           tblptrl	equ	0xFF6
  3487                           tablat	equ	0xFF5
  3488                           prodh	equ	0xFF4
  3489                           prodl	equ	0xFF3
  3490                           postinc0	equ	0xFEE
  3491                           wreg	equ	0xFE8
  3492                           indf2	equ	0xFDF
  3493                           postinc2	equ	0xFDE
  3494                           postdec2	equ	0xFDD
  3495                           plusw2	equ	0xFDB
  3496                           fsr2h	equ	0xFDA
  3497                           fsr2l	equ	0xFD9
  3498                           status	equ	0xFD8
  3499                           
  3500 ;; *************** function _Receive_peek *****************
  3501 ;; Defined at:
  3502 ;;		line 118 in file "UART.c"
  3503 ;; Parameters:    Size  Location     Type
  3504 ;;		None
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;		None
  3507 ;; Return value:  Size  Location     Type
  3508 ;;                  1    wreg      unsigned char 
  3509 ;; Registers used:
  3510 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3511 ;; Tracked objects:
  3512 ;;		On entry : 0/0
  3513 ;;		On exit  : 0/0
  3514 ;;		Unchanged: 0/0
  3515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3516 ;;      Params:         0       0       0       0       0       0       0
  3517 ;;      Locals:         0       0       0       0       0       0       0
  3518 ;;      Temps:          0       0       0       0       0       0       0
  3519 ;;      Totals:         0       0       0       0       0       0       0
  3520 ;;Total ram usage:        0 bytes
  3521 ;; Hardware stack levels used:    1
  3522 ;; Hardware stack levels required when called:    5
  3523 ;; This function calls:
  3524 ;;		_UART_buff_peek
  3525 ;; This function is called by:
  3526 ;;		_ComStart
  3527 ;;		_receiveData
  3528 ;; This function uses a non-reentrant model
  3529 ;;
  3530                           
  3531                           	psect	text14
  3532  001848                     __ptext14:
  3533                           	opt stack 0
  3534  001848                     _Receive_peek:
  3535                           	opt stack 23
  3536                           
  3537                           ;UART.c: 119: return UART_buff_peek(&input_buffer);
  3538                           
  3539                           ;incstack = 0
  3540  001848  0E00               	movlw	low _input_buffer
  3541  00184A  6E1B               	movwf	UART_buff_peek@_this,c
  3542  00184C  0E03               	movlw	high _input_buffer
  3543  00184E  6E1C               	movwf	UART_buff_peek@_this+1,c
  3544  001850  EC76  F00B         	call	_UART_buff_peek	;wreg free
  3545  001854  0012               	return	
  3546  001856                     __end_of_Receive_peek:
  3547                           	opt stack 0
  3548                           tosu	equ	0xFFF
  3549                           tosh	equ	0xFFE
  3550                           tosl	equ	0xFFD
  3551                           pclath	equ	0xFFA
  3552                           tblptru	equ	0xFF8
  3553                           tblptrh	equ	0xFF7
  3554                           tblptrl	equ	0xFF6
  3555                           tablat	equ	0xFF5
  3556                           prodh	equ	0xFF4
  3557                           prodl	equ	0xFF3
  3558                           postinc0	equ	0xFEE
  3559                           wreg	equ	0xFE8
  3560                           indf2	equ	0xFDF
  3561                           postinc2	equ	0xFDE
  3562                           postdec2	equ	0xFDD
  3563                           plusw2	equ	0xFDB
  3564                           fsr2h	equ	0xFDA
  3565                           fsr2l	equ	0xFD9
  3566                           status	equ	0xFD8
  3567                           
  3568 ;; *************** function _UART_buff_peek *****************
  3569 ;; Defined at:
  3570 ;;		line 114 in file "UART.c"
  3571 ;; Parameters:    Size  Location     Type
  3572 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3573 ;;		 -> input_buffer(206), 
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;		None
  3576 ;; Return value:  Size  Location     Type
  3577 ;;                  1    wreg      unsigned char 
  3578 ;; Registers used:
  3579 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3580 ;; Tracked objects:
  3581 ;;		On entry : 0/0
  3582 ;;		On exit  : 0/0
  3583 ;;		Unchanged: 0/0
  3584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3585 ;;      Params:         2       0       0       0       0       0       0
  3586 ;;      Locals:         0       0       0       0       0       0       0
  3587 ;;      Temps:          2       0       0       0       0       0       0
  3588 ;;      Totals:         4       0       0       0       0       0       0
  3589 ;;Total ram usage:        4 bytes
  3590 ;; Hardware stack levels used:    1
  3591 ;; Hardware stack levels required when called:    4
  3592 ;; This function calls:
  3593 ;;		Nothing
  3594 ;; This function is called by:
  3595 ;;		_Receive_peek
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           	psect	text15
  3600  0016EC                     __ptext15:
  3601                           	opt stack 0
  3602  0016EC                     _UART_buff_peek:
  3603                           	opt stack 23
  3604                           
  3605                           ;UART.c: 115: return _this->buf[_this->tail];
  3606                           
  3607                           ;incstack = 0
  3608  0016EC  EE20 F0CA          	lfsr	2,202
  3609  0016F0  501B               	movf	UART_buff_peek@_this,w,c
  3610  0016F2  26D9               	addwf	fsr2l,f,c
  3611  0016F4  501C               	movf	UART_buff_peek@_this+1,w,c
  3612  0016F6  22DA               	addwfc	fsr2h,f,c
  3613  0016F8  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  3614  0016FC  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  3615  001700  501D               	movf	??_UART_buff_peek,w,c
  3616  001702  241B               	addwf	UART_buff_peek@_this,w,c
  3617  001704  6ED9               	movwf	fsr2l,c
  3618  001706  501E               	movf	??_UART_buff_peek+1,w,c
  3619  001708  201C               	addwfc	UART_buff_peek@_this+1,w,c
  3620  00170A  6EDA               	movwf	fsr2h,c
  3621  00170C  50DF               	movf	indf2,w,c
  3622  00170E  0012               	return	
  3623  001710                     __end_of_UART_buff_peek:
  3624                           	opt stack 0
  3625                           tosu	equ	0xFFF
  3626                           tosh	equ	0xFFE
  3627                           tosl	equ	0xFFD
  3628                           pclath	equ	0xFFA
  3629                           tblptru	equ	0xFF8
  3630                           tblptrh	equ	0xFF7
  3631                           tblptrl	equ	0xFF6
  3632                           tablat	equ	0xFF5
  3633                           prodh	equ	0xFF4
  3634                           prodl	equ	0xFF3
  3635                           postinc0	equ	0xFEE
  3636                           wreg	equ	0xFE8
  3637                           indf2	equ	0xFDF
  3638                           postinc2	equ	0xFDE
  3639                           postdec2	equ	0xFDD
  3640                           plusw2	equ	0xFDB
  3641                           fsr2h	equ	0xFDA
  3642                           fsr2l	equ	0xFD9
  3643                           status	equ	0xFD8
  3644                           
  3645 ;; *************** function _CRCcheck *****************
  3646 ;; Defined at:
  3647 ;;		line 429 in file "FastTransfer.c"
  3648 ;; Parameters:    Size  Location     Type
  3649 ;;		None
  3650 ;; Auto vars:     Size  Location     Type
  3651 ;;  rt              2    7[BANK0 ] int 
  3652 ;;  arrayHolder     3    4[BANK0 ] unsigned char [3]
  3653 ;;  calculatedCR    1    3[BANK0 ] unsigned char 
  3654 ;;  SentCRC         1    2[BANK0 ] unsigned char 
  3655 ;; Return value:  Size  Location     Type
  3656 ;;                  1    wreg      void 
  3657 ;; Registers used:
  3658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3659 ;; Tracked objects:
  3660 ;;		On entry : 0/0
  3661 ;;		On exit  : 0/0
  3662 ;;		Unchanged: 0/0
  3663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3664 ;;      Params:         0       0       0       0       0       0       0
  3665 ;;      Locals:         0       7       0       0       0       0       0
  3666 ;;      Temps:          0       0       0       0       0       0       0
  3667 ;;      Totals:         0       7       0       0       0       0       0
  3668 ;;Total ram usage:        7 bytes
  3669 ;; Hardware stack levels used:    1
  3670 ;; Hardware stack levels required when called:    7
  3671 ;; This function calls:
  3672 ;;		Absolute function
  3673 ;;		_CRC8
  3674 ;;		_Receive_available
  3675 ;;		_Receive_get
  3676 ;;		_crcBufS_get
  3677 ;;		_crcBufS_status_put
  3678 ;; This function is called by:
  3679 ;;		_receiveData
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           	psect	text16
  3684  0008C2                     __ptext16:
  3685                           	opt stack 0
  3686  0008C2                     _CRCcheck:
  3687                           	opt stack 21
  3688  0008C2                     l2611:
  3689  0008C2  D801               	call	u2668
  3690  0008C4  D00A               	goto	u2669
  3691  0008C6                     u2668:
  3692  0008C6  0005               	push	
  3693  0008C8  6EFA               	movwf	pclath,c
  3694  0008CA  5030               	movf	_serial_available,w,c
  3695  0008CC  6EFD               	movwf	tosl,c
  3696  0008CE  5031               	movf	_serial_available+1,w,c
  3697  0008D0  6EFE               	movwf	tosh,c
  3698  0008D2  50F8               	movf	tblptru,w,c
  3699  0008D4  6EFF               	movwf	tosu,c
  3700  0008D6  50FA               	movf	pclath,w,c
  3701  0008D8  0012               	return		;indir
  3702  0008DA                     u2669:
  3703  0008DA  BE1E               	btfsc	?_Receive_available+1,7,c
  3704  0008DC  D7F2               	goto	l2611
  3705  0008DE  501E               	movf	?_Receive_available+1,w,c
  3706  0008E0  E104               	bnz	l2613
  3707  0008E2  0E04               	movlw	4
  3708  0008E4  5C1D               	subwf	?_Receive_available,w,c
  3709  0008E6  A0D8               	btfss	status,0,c
  3710  0008E8  D7EC               	goto	l2611
  3711  0008EA                     l2613:
  3712                           
  3713                           ;FastTransfer.c: 433: unsigned char arrayHolder[3];
  3714                           ;FastTransfer.c: 434: arrayHolder[0] = serial_read();
  3715  0008EA  D801               	call	u2688
  3716  0008EC  D00A               	goto	u2689
  3717  0008EE                     u2688:
  3718  0008EE  0005               	push	
  3719  0008F0  6EFA               	movwf	pclath,c
  3720  0008F2  5034               	movf	_serial_read,w,c
  3721  0008F4  6EFD               	movwf	tosl,c
  3722  0008F6  5035               	movf	_serial_read+1,w,c
  3723  0008F8  6EFE               	movwf	tosh,c
  3724  0008FA  50F8               	movf	tblptru,w,c
  3725  0008FC  6EFF               	movwf	tosu,c
  3726  0008FE  50FA               	movf	pclath,w,c
  3727  000900  0012               	return		;indir
  3728  000902                     u2689:
  3729  000902  0100               	movlb	0	; () banked
  3730  000904  6F87               	movwf	CRCcheck@arrayHolder& (0+255),b
  3731                           
  3732                           ;FastTransfer.c: 435: arrayHolder[1] = serial_read();
  3733  000906  D801               	call	u2698
  3734  000908  D00A               	goto	u2699
  3735  00090A                     u2698:
  3736  00090A  0005               	push	
  3737  00090C  6EFA               	movwf	pclath,c
  3738  00090E  5034               	movf	_serial_read,w,c
  3739  000910  6EFD               	movwf	tosl,c
  3740  000912  5035               	movf	_serial_read+1,w,c
  3741  000914  6EFE               	movwf	tosh,c
  3742  000916  50F8               	movf	tblptru,w,c
  3743  000918  6EFF               	movwf	tosu,c
  3744  00091A  50FA               	movf	pclath,w,c
  3745  00091C  0012               	return		;indir
  3746  00091E                     u2699:
  3747  00091E  0100               	movlb	0	; () banked
  3748  000920  6F88               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  3749                           
  3750                           ;FastTransfer.c: 436: arrayHolder[2] = serial_read();
  3751  000922  D801               	call	u2708
  3752  000924  D00A               	goto	u2709
  3753  000926                     u2708:
  3754  000926  0005               	push	
  3755  000928  6EFA               	movwf	pclath,c
  3756  00092A  5034               	movf	_serial_read,w,c
  3757  00092C  6EFD               	movwf	tosl,c
  3758  00092E  5035               	movf	_serial_read+1,w,c
  3759  000930  6EFE               	movwf	tosh,c
  3760  000932  50F8               	movf	tblptru,w,c
  3761  000934  6EFF               	movwf	tosu,c
  3762  000936  50FA               	movf	pclath,w,c
  3763  000938  0012               	return		;indir
  3764  00093A                     u2709:
  3765  00093A  0100               	movlb	0	; () banked
  3766  00093C  6F89               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  3767                           
  3768                           ;FastTransfer.c: 437: unsigned char SentCRC = serial_read();
  3769  00093E  D801               	call	u2718
  3770  000940  D00A               	goto	u2719
  3771  000942                     u2718:
  3772  000942  0005               	push	
  3773  000944  6EFA               	movwf	pclath,c
  3774  000946  5034               	movf	_serial_read,w,c
  3775  000948  6EFD               	movwf	tosl,c
  3776  00094A  5035               	movf	_serial_read+1,w,c
  3777  00094C  6EFE               	movwf	tosh,c
  3778  00094E  50F8               	movf	tblptru,w,c
  3779  000950  6EFF               	movwf	tosu,c
  3780  000952  50FA               	movf	pclath,w,c
  3781  000954  0012               	return		;indir
  3782  000956                     u2719:
  3783  000956  0100               	movlb	0	; () banked
  3784  000958  6F85               	movwf	CRCcheck@SentCRC& (0+255),b
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;FastTransfer.c: 438: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  3788  00095A  0E87               	movlw	low CRCcheck@arrayHolder
  3789  00095C  6E1B               	movwf	CRC8@data,c
  3790  00095E  0E00               	movlw	high CRCcheck@arrayHolder
  3791  000960  6E1C               	movwf	CRC8@data+1,c
  3792  000962  0E03               	movlw	3
  3793  000964  6E1D               	movwf	CRC8@len,c
  3794  000966  EC7D  F00A         	call	_CRC8	;wreg free
  3795  00096A  0100               	movlb	0	; () banked
  3796  00096C  6F86               	movwf	CRCcheck@calculatedCRC& (0+255),b
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;FastTransfer.c: 441: if (SentCRC == calculatedCRC) {
  3800  00096E  0100               	movlb	0	; () banked
  3801  000970  5186               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  3802  000972  0100               	movlb	0	; () banked
  3803  000974  1985               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  3804  000976  A4D8               	btfss	status,2,c
  3805  000978  D04E               	goto	l2643
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;FastTransfer.c: 443: int rt;
  3809                           ;FastTransfer.c: 444: for (rt = 0; rt < 5; rt++) {
  3810  00097A  0E00               	movlw	0
  3811  00097C  0100               	movlb	0	; () banked
  3812  00097E  6F8B               	movwf	(CRCcheck@rt+1)& (0+255),b
  3813  000980  0E00               	movlw	0
  3814  000982  6F8A               	movwf	CRCcheck@rt& (0+255),b
  3815  000984                     l2621:
  3816                           
  3817                           ; BSR set to: 0
  3818  000984  0100               	movlb	0	; () banked
  3819  000986  BF8B               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3820  000988  D008               	goto	l2625
  3821  00098A  0100               	movlb	0	; () banked
  3822  00098C  518B               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3823  00098E  E146               	bnz	l226
  3824  000990  0E05               	movlw	5
  3825  000992  0100               	movlb	0	; () banked
  3826  000994  5D8A               	subwf	CRCcheck@rt& (0+255),w,b
  3827  000996  B0D8               	btfsc	status,0,c
  3828  000998  0012               	return	
  3829  00099A                     l2625:
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;FastTransfer.c: 445: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3833  00099A  0E68               	movlw	low _crc_buffer
  3834  00099C  6E1B               	movwf	crcBufS_get@_this,c
  3835  00099E  0E00               	movlw	high _crc_buffer
  3836  0009A0  6E1C               	movwf	crcBufS_get@_this+1,c
  3837  0009A2  C08A  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3838  0009A6  0E00               	movlw	0
  3839  0009A8  6E1E               	movwf	crcBufS_get@space,c
  3840  0009AA  ECCE  F006         	call	_crcBufS_get	;wreg free
  3841  0009AE  1840               	xorwf	_returnAddress,w,c
  3842  0009B0  A4D8               	btfss	status,2,c
  3843  0009B2  D02D               	goto	l2639
  3844                           
  3845                           ;FastTransfer.c: 446: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3846  0009B4  0E68               	movlw	low _crc_buffer
  3847  0009B6  6E1B               	movwf	crcBufS_get@_this,c
  3848  0009B8  0E00               	movlw	high _crc_buffer
  3849  0009BA  6E1C               	movwf	crcBufS_get@_this+1,c
  3850  0009BC  C08A  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3851  0009C0  0E01               	movlw	1
  3852  0009C2  6E1E               	movwf	crcBufS_get@space,c
  3853  0009C4  ECCE  F006         	call	_crcBufS_get	;wreg free
  3854  0009C8  0100               	movlb	0	; () banked
  3855  0009CA  1989               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3856  0009CC  A4D8               	btfss	status,2,c
  3857  0009CE  D01F               	goto	l2639
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;FastTransfer.c: 447: if (arrayHolder[1] == 1) {
  3861  0009D0  0100               	movlb	0	; () banked
  3862  0009D2  0588               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3863  0009D4  A4D8               	btfss	status,2,c
  3864  0009D6  D00B               	goto	l2635
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;FastTransfer.c: 448: crcBufS_status_put(&crc_buffer, rt, 1);
  3868  0009D8  0E68               	movlw	low _crc_buffer
  3869  0009DA  6E1B               	movwf	crcBufS_status_put@_this,c
  3870  0009DC  0E00               	movlw	high _crc_buffer
  3871  0009DE  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3872  0009E0  C08A  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3873  0009E4  0E01               	movlw	1
  3874  0009E6  6E1E               	movwf	crcBufS_status_put@status,c
  3875  0009E8  EC21  F008         	call	_crcBufS_status_put	;wreg free
  3876                           
  3877                           ;FastTransfer.c: 449: break;
  3878  0009EC  0012               	return	
  3879  0009EE                     l2635:
  3880  0009EE  0E02               	movlw	2
  3881  0009F0  0100               	movlb	0	; () banked
  3882  0009F2  1988               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3883  0009F4  A4D8               	btfss	status,2,c
  3884  0009F6  D00B               	goto	l2639
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;FastTransfer.c: 451: crcBufS_status_put(&crc_buffer, rt, 2);
  3888  0009F8  0E68               	movlw	low _crc_buffer
  3889  0009FA  6E1B               	movwf	crcBufS_status_put@_this,c
  3890  0009FC  0E00               	movlw	high _crc_buffer
  3891  0009FE  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3892  000A00  C08A  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3893  000A04  0E02               	movlw	2
  3894  000A06  6E1E               	movwf	crcBufS_status_put@status,c
  3895  000A08  EC21  F008         	call	_crcBufS_status_put	;wreg free
  3896                           
  3897                           ;FastTransfer.c: 452: break;
  3898  000A0C  0012               	return	
  3899  000A0E                     l2639:
  3900  000A0E  0100               	movlb	0	; () banked
  3901  000A10  4B8A               	infsnz	CRCcheck@rt& (0+255),f,b
  3902  000A12  2B8B               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3903  000A14  D7B7               	goto	l2621
  3904  000A16                     l2643:
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;FastTransfer.c: 458: crcErrorCounter++;
  3908  000A16  4A28               	infsnz	_crcErrorCounter,f,c
  3909  000A18  2A29               	incf	_crcErrorCounter+1,f,c
  3910  000A1A  0012               	return	
  3911  000A1C                     l226:
  3912  000A1C  0012               	return		;funcret
  3913  000A1E                     __end_of_CRCcheck:
  3914                           	opt stack 0
  3915                           tosu	equ	0xFFF
  3916                           tosh	equ	0xFFE
  3917                           tosl	equ	0xFFD
  3918                           pclath	equ	0xFFA
  3919                           tblptru	equ	0xFF8
  3920                           tblptrh	equ	0xFF7
  3921                           tblptrl	equ	0xFF6
  3922                           tablat	equ	0xFF5
  3923                           prodh	equ	0xFF4
  3924                           prodl	equ	0xFF3
  3925                           postinc0	equ	0xFEE
  3926                           wreg	equ	0xFE8
  3927                           indf2	equ	0xFDF
  3928                           postinc2	equ	0xFDE
  3929                           postdec2	equ	0xFDD
  3930                           plusw2	equ	0xFDB
  3931                           fsr2h	equ	0xFDA
  3932                           fsr2l	equ	0xFD9
  3933                           status	equ	0xFD8
  3934                           
  3935 ;; *************** function _crcBufS_status_put *****************
  3936 ;; Defined at:
  3937 ;;		line 392 in file "FastTransfer.c"
  3938 ;; Parameters:    Size  Location     Type
  3939 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3940 ;;		 -> crc_buffer(17), 
  3941 ;;  time            1   28[COMRAM] unsigned char 
  3942 ;;  status          1   29[COMRAM] unsigned char 
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;  wantedTime      2   34[COMRAM] int 
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  1    wreg      void 
  3947 ;; Registers used:
  3948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3954 ;;      Params:         4       0       0       0       0       0       0
  3955 ;;      Locals:         2       0       0       0       0       0       0
  3956 ;;      Temps:          4       0       0       0       0       0       0
  3957 ;;      Totals:        10       0       0       0       0       0       0
  3958 ;;Total ram usage:       10 bytes
  3959 ;; Hardware stack levels used:    1
  3960 ;; Hardware stack levels required when called:    4
  3961 ;; This function calls:
  3962 ;;		Nothing
  3963 ;; This function is called by:
  3964 ;;		_CRCcheck
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           	psect	text17
  3969  001042                     __ptext17:
  3970                           	opt stack 0
  3971  001042                     _crcBufS_status_put:
  3972                           	opt stack 23
  3973                           
  3974                           ;FastTransfer.c: 393: if (time >= 5) {
  3975                           
  3976                           ;incstack = 0
  3977  001042  0E04               	movlw	4
  3978  001044  641D               	cpfsgt	crcBufS_status_put@time,c
  3979  001046  D002               	goto	l2525
  3980                           
  3981                           ;FastTransfer.c: 394: time = 5 - 1;
  3982  001048  0E04               	movlw	4
  3983  00104A  6E1D               	movwf	crcBufS_status_put@time,c
  3984  00104C                     l2525:
  3985                           
  3986                           ;FastTransfer.c: 395: }
  3987                           ;FastTransfer.c: 396: time = time + 1;
  3988  00104C  281D               	incf	crcBufS_status_put@time,w,c
  3989  00104E  6E1D               	movwf	crcBufS_status_put@time,c
  3990                           
  3991                           ;FastTransfer.c: 397: int wantedTime = time * 3;
  3992  001050  501D               	movf	crcBufS_status_put@time,w,c
  3993  001052  0D03               	mullw	3
  3994  001054  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  3995  001058  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  3996                           
  3997                           ;FastTransfer.c: 398: if (wantedTime > _this->head) {
  3998  00105C  EE20 F00F          	lfsr	2,15
  3999  001060  501B               	movf	crcBufS_status_put@_this,w,c
  4000  001062  26D9               	addwf	fsr2l,f,c
  4001  001064  501C               	movf	crcBufS_status_put@_this+1,w,c
  4002  001066  22DA               	addwfc	fsr2h,f,c
  4003  001068  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4004  00106A  5CDE               	subwf	postinc2,w,c
  4005  00106C  50DE               	movf	postinc2,w,c
  4006  00106E  0A80               	xorlw	128
  4007  001070  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  4008  001072  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4009  001074  0A80               	xorlw	128
  4010  001076  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  4011  001078  B0D8               	btfsc	status,0,c
  4012  00107A  D02B               	goto	l2533
  4013                           
  4014                           ;FastTransfer.c: 399: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4015  00107C  EE20 F00F          	lfsr	2,15
  4016  001080  501B               	movf	crcBufS_status_put@_this,w,c
  4017  001082  26D9               	addwf	fsr2l,f,c
  4018  001084  501C               	movf	crcBufS_status_put@_this+1,w,c
  4019  001086  22DA               	addwfc	fsr2h,f,c
  4020  001088  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4021  00108C  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4022  001090  1E1F               	comf	??_crcBufS_status_put,f,c
  4023  001092  1E20               	comf	??_crcBufS_status_put+1,f,c
  4024  001094  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4025  001096  2A20               	incf	??_crcBufS_status_put+1,f,c
  4026  001098  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4027  00109A  261F               	addwf	??_crcBufS_status_put,f,c
  4028  00109C  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4029  00109E  2220               	addwfc	??_crcBufS_status_put+1,f,c
  4030  0010A0  1E1F               	comf	??_crcBufS_status_put,f,c
  4031  0010A2  1E20               	comf	??_crcBufS_status_put+1,f,c
  4032  0010A4  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4033  0010A6  2A20               	incf	??_crcBufS_status_put+1,f,c
  4034  0010A8  0E0F               	movlw	15
  4035  0010AA  241F               	addwf	??_crcBufS_status_put,w,c
  4036  0010AC  6E23               	movwf	crcBufS_status_put@wantedTime,c
  4037  0010AE  0E00               	movlw	0
  4038  0010B0  2020               	addwfc	??_crcBufS_status_put+1,w,c
  4039  0010B2  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  4040                           
  4041                           ;FastTransfer.c: 400: _this->buf[(wantedTime + 2)] = status;
  4042  0010B4  0E02               	movlw	2
  4043  0010B6  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4044  0010B8  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4045  0010BA  0E00               	movlw	0
  4046  0010BC  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4047  0010BE  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4048  0010C0  501F               	movf	??_crcBufS_status_put,w,c
  4049  0010C2  241B               	addwf	crcBufS_status_put@_this,w,c
  4050  0010C4  6ED9               	movwf	fsr2l,c
  4051  0010C6  5020               	movf	??_crcBufS_status_put+1,w,c
  4052  0010C8  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4053  0010CA  6EDA               	movwf	fsr2h,c
  4054  0010CC  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4055                           
  4056                           ;FastTransfer.c: 401: } else {
  4057  0010D0  0012               	return	
  4058  0010D2                     l2533:
  4059                           
  4060                           ;FastTransfer.c: 402: _this->buf[(_this->head - wantedTime) + 2] = status;
  4061  0010D2  EE20 F00F          	lfsr	2,15
  4062  0010D6  501B               	movf	crcBufS_status_put@_this,w,c
  4063  0010D8  26D9               	addwf	fsr2l,f,c
  4064  0010DA  501C               	movf	crcBufS_status_put@_this+1,w,c
  4065  0010DC  22DA               	addwfc	fsr2h,f,c
  4066  0010DE  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4067  0010E2  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4068  0010E6  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4069  0010EA  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4070  0010EE  1E21               	comf	??_crcBufS_status_put+2,f,c
  4071  0010F0  1E22               	comf	??_crcBufS_status_put+3,f,c
  4072  0010F2  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4073  0010F4  2A22               	incf	??_crcBufS_status_put+3,f,c
  4074  0010F6  501F               	movf	??_crcBufS_status_put,w,c
  4075  0010F8  2621               	addwf	??_crcBufS_status_put+2,f,c
  4076  0010FA  5020               	movf	??_crcBufS_status_put+1,w,c
  4077  0010FC  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4078  0010FE  0E02               	movlw	2
  4079  001100  2621               	addwf	??_crcBufS_status_put+2,f,c
  4080  001102  0E00               	movlw	0
  4081  001104  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4082  001106  5021               	movf	??_crcBufS_status_put+2,w,c
  4083  001108  241B               	addwf	crcBufS_status_put@_this,w,c
  4084  00110A  6ED9               	movwf	fsr2l,c
  4085  00110C  5022               	movf	??_crcBufS_status_put+3,w,c
  4086  00110E  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4087  001110  6EDA               	movwf	fsr2h,c
  4088  001112  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4089  001116  0012               	return	
  4090  001118                     __end_of_crcBufS_status_put:
  4091                           	opt stack 0
  4092                           tosu	equ	0xFFF
  4093                           tosh	equ	0xFFE
  4094                           tosl	equ	0xFFD
  4095                           pclath	equ	0xFFA
  4096                           tblptru	equ	0xFF8
  4097                           tblptrh	equ	0xFF7
  4098                           tblptrl	equ	0xFF6
  4099                           tablat	equ	0xFF5
  4100                           prodh	equ	0xFF4
  4101                           prodl	equ	0xFF3
  4102                           postinc0	equ	0xFEE
  4103                           wreg	equ	0xFE8
  4104                           indf2	equ	0xFDF
  4105                           postinc2	equ	0xFDE
  4106                           postdec2	equ	0xFDD
  4107                           plusw2	equ	0xFDB
  4108                           fsr2h	equ	0xFDA
  4109                           fsr2l	equ	0xFD9
  4110                           status	equ	0xFD8
  4111                           
  4112 ;; *************** function _crcBufS_get *****************
  4113 ;; Defined at:
  4114 ;;		line 409 in file "FastTransfer.c"
  4115 ;; Parameters:    Size  Location     Type
  4116 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4117 ;;		 -> crc_buffer(17), 
  4118 ;;  time            1   28[COMRAM] unsigned char 
  4119 ;;  space           1   29[COMRAM] unsigned char 
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;  wantedTime      2    0[BANK0 ] int 
  4122 ;; Return value:  Size  Location     Type
  4123 ;;                  1    wreg      unsigned char 
  4124 ;; Registers used:
  4125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4131 ;;      Params:         4       0       0       0       0       0       0
  4132 ;;      Locals:         0       2       0       0       0       0       0
  4133 ;;      Temps:          6       0       0       0       0       0       0
  4134 ;;      Totals:        10       2       0       0       0       0       0
  4135 ;;Total ram usage:       12 bytes
  4136 ;; Hardware stack levels used:    1
  4137 ;; Hardware stack levels required when called:    4
  4138 ;; This function calls:
  4139 ;;		Nothing
  4140 ;; This function is called by:
  4141 ;;		_CRCcheck
  4142 ;;		_AKNAK
  4143 ;; This function uses a non-reentrant model
  4144 ;;
  4145                           
  4146                           	psect	text18
  4147  000D9C                     __ptext18:
  4148                           	opt stack 0
  4149  000D9C                     _crcBufS_get:
  4150                           	opt stack 23
  4151                           
  4152                           ;FastTransfer.c: 410: if (time >= 5) {
  4153                           
  4154                           ;incstack = 0
  4155  000D9C  0E04               	movlw	4
  4156  000D9E  641D               	cpfsgt	crcBufS_get@time,c
  4157  000DA0  D002               	goto	l2501
  4158                           
  4159                           ;FastTransfer.c: 411: time = 5 - 1;
  4160  000DA2  0E04               	movlw	4
  4161  000DA4  6E1D               	movwf	crcBufS_get@time,c
  4162  000DA6                     l2501:
  4163                           
  4164                           ;FastTransfer.c: 412: }
  4165                           ;FastTransfer.c: 413: if (space >= 3) {
  4166  000DA6  0E02               	movlw	2
  4167  000DA8  641E               	cpfsgt	crcBufS_get@space,c
  4168  000DAA  D002               	goto	l2505
  4169                           
  4170                           ;FastTransfer.c: 414: space = 3 - 1;
  4171  000DAC  0E02               	movlw	2
  4172  000DAE  6E1E               	movwf	crcBufS_get@space,c
  4173  000DB0                     l2505:
  4174                           
  4175                           ;FastTransfer.c: 415: }
  4176                           ;FastTransfer.c: 416: time = time + 1;
  4177  000DB0  281D               	incf	crcBufS_get@time,w,c
  4178  000DB2  6E1D               	movwf	crcBufS_get@time,c
  4179                           
  4180                           ;FastTransfer.c: 417: int wantedTime = time * 3;
  4181  000DB4  501D               	movf	crcBufS_get@time,w,c
  4182  000DB6  0D03               	mullw	3
  4183  000DB8  CFF3 F083          	movff	prodl,crcBufS_get@wantedTime
  4184  000DBC  CFF4 F084          	movff	prodh,crcBufS_get@wantedTime+1
  4185                           
  4186                           ;FastTransfer.c: 418: if (wantedTime > _this->head) {
  4187  000DC0  EE20 F00F          	lfsr	2,15
  4188  000DC4  501B               	movf	crcBufS_get@_this,w,c
  4189  000DC6  26D9               	addwf	fsr2l,f,c
  4190  000DC8  501C               	movf	crcBufS_get@_this+1,w,c
  4191  000DCA  22DA               	addwfc	fsr2h,f,c
  4192  000DCC  0100               	movlb	0	; () banked
  4193  000DCE  5183               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4194  000DD0  5CDE               	subwf	postinc2,w,c
  4195  000DD2  50DE               	movf	postinc2,w,c
  4196  000DD4  0A80               	xorlw	128
  4197  000DD6  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4198  000DD8  0100               	movlb	0	; () banked
  4199  000DDA  5184               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4200  000DDC  0A80               	xorlw	128
  4201  000DDE  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4202  000DE0  B0D8               	btfsc	status,0,c
  4203  000DE2  D030               	goto	l2517
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;FastTransfer.c: 419: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4207  000DE4  EE20 F00F          	lfsr	2,15
  4208  000DE8  501B               	movf	crcBufS_get@_this,w,c
  4209  000DEA  26D9               	addwf	fsr2l,f,c
  4210  000DEC  501C               	movf	crcBufS_get@_this+1,w,c
  4211  000DEE  22DA               	addwfc	fsr2h,f,c
  4212  000DF0  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4213  000DF4  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4214  000DF8  1E1F               	comf	??_crcBufS_get,f,c
  4215  000DFA  1E20               	comf	??_crcBufS_get+1,f,c
  4216  000DFC  4A1F               	infsnz	??_crcBufS_get,f,c
  4217  000DFE  2A20               	incf	??_crcBufS_get+1,f,c
  4218  000E00  0100               	movlb	0	; () banked
  4219  000E02  5183               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4220  000E04  261F               	addwf	??_crcBufS_get,f,c
  4221  000E06  0100               	movlb	0	; () banked
  4222  000E08  5184               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4223  000E0A  2220               	addwfc	??_crcBufS_get+1,f,c
  4224  000E0C  1E1F               	comf	??_crcBufS_get,f,c
  4225  000E0E  1E20               	comf	??_crcBufS_get+1,f,c
  4226  000E10  4A1F               	infsnz	??_crcBufS_get,f,c
  4227  000E12  2A20               	incf	??_crcBufS_get+1,f,c
  4228  000E14  0E0F               	movlw	15
  4229  000E16  241F               	addwf	??_crcBufS_get,w,c
  4230  000E18  0100               	movlb	0	; () banked
  4231  000E1A  6F83               	movwf	crcBufS_get@wantedTime& (0+255),b
  4232  000E1C  0E00               	movlw	0
  4233  000E1E  2020               	addwfc	??_crcBufS_get+1,w,c
  4234  000E20  0100               	movlb	0	; () banked
  4235  000E22  6F84               	movwf	(crcBufS_get@wantedTime+1)& (0+255),b
  4236                           
  4237                           ;FastTransfer.c: 420: return (_this->buf[(wantedTime + space)]);
  4238  000E24  501E               	movf	crcBufS_get@space,w,c
  4239  000E26  0100               	movlb	0	; () banked
  4240  000E28  2583               	addwf	crcBufS_get@wantedTime& (0+255),w,b
  4241  000E2A  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4242  000E2C  0E00               	movlw	0
  4243  000E2E  0100               	movlb	0	; () banked
  4244  000E30  2184               	addwfc	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4245  000E32  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4246  000E34  501F               	movf	??_crcBufS_get,w,c
  4247  000E36  241B               	addwf	crcBufS_get@_this,w,c
  4248  000E38  6ED9               	movwf	fsr2l,c
  4249  000E3A  5020               	movf	??_crcBufS_get+1,w,c
  4250  000E3C  201C               	addwfc	crcBufS_get@_this+1,w,c
  4251  000E3E  6EDA               	movwf	fsr2h,c
  4252  000E40  50DF               	movf	indf2,w,c
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;FastTransfer.c: 421: } else {
  4256                           
  4257                           ; BSR set to: 0
  4258  000E42  0012               	return	
  4259  000E44                     l2517:
  4260                           
  4261                           ; BSR set to: 0
  4262                           ;FastTransfer.c: 422: return (_this->buf[(_this->head - wantedTime) + space]);
  4263  000E44  EE20 F00F          	lfsr	2,15
  4264  000E48  501B               	movf	crcBufS_get@_this,w,c
  4265  000E4A  26D9               	addwf	fsr2l,f,c
  4266  000E4C  501C               	movf	crcBufS_get@_this+1,w,c
  4267  000E4E  22DA               	addwfc	fsr2h,f,c
  4268  000E50  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4269  000E54  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4270  000E58  C083  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4271  000E5C  C084  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4272  000E60  1E21               	comf	??_crcBufS_get+2,f,c
  4273  000E62  1E22               	comf	??_crcBufS_get+3,f,c
  4274  000E64  4A21               	infsnz	??_crcBufS_get+2,f,c
  4275  000E66  2A22               	incf	??_crcBufS_get+3,f,c
  4276  000E68  501E               	movf	crcBufS_get@space,w,c
  4277  000E6A  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4278  000E6C  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4279  000E6E  5021               	movf	??_crcBufS_get+2,w,c
  4280  000E70  2623               	addwf	??_crcBufS_get+4,f,c
  4281  000E72  5022               	movf	??_crcBufS_get+3,w,c
  4282  000E74  2224               	addwfc	??_crcBufS_get+5,f,c
  4283  000E76  501F               	movf	??_crcBufS_get,w,c
  4284  000E78  2623               	addwf	??_crcBufS_get+4,f,c
  4285  000E7A  5020               	movf	??_crcBufS_get+1,w,c
  4286  000E7C  2224               	addwfc	??_crcBufS_get+5,f,c
  4287  000E7E  5023               	movf	??_crcBufS_get+4,w,c
  4288  000E80  241B               	addwf	crcBufS_get@_this,w,c
  4289  000E82  6ED9               	movwf	fsr2l,c
  4290  000E84  5024               	movf	??_crcBufS_get+5,w,c
  4291  000E86  201C               	addwfc	crcBufS_get@_this+1,w,c
  4292  000E88  6EDA               	movwf	fsr2h,c
  4293  000E8A  50DF               	movf	indf2,w,c
  4294                           
  4295                           ; BSR set to: 0
  4296  000E8C  0012               	return	
  4297  000E8E                     __end_of_crcBufS_get:
  4298                           	opt stack 0
  4299                           tosu	equ	0xFFF
  4300                           tosh	equ	0xFFE
  4301                           tosl	equ	0xFFD
  4302                           pclath	equ	0xFFA
  4303                           tblptru	equ	0xFF8
  4304                           tblptrh	equ	0xFF7
  4305                           tblptrl	equ	0xFF6
  4306                           tablat	equ	0xFF5
  4307                           prodh	equ	0xFF4
  4308                           prodl	equ	0xFF3
  4309                           postinc0	equ	0xFEE
  4310                           wreg	equ	0xFE8
  4311                           indf2	equ	0xFDF
  4312                           postinc2	equ	0xFDE
  4313                           postdec2	equ	0xFDD
  4314                           plusw2	equ	0xFDB
  4315                           fsr2h	equ	0xFDA
  4316                           fsr2l	equ	0xFD9
  4317                           status	equ	0xFD8
  4318                           
  4319 ;; *************** function _Receive_get *****************
  4320 ;; Defined at:
  4321 ;;		line 126 in file "UART.c"
  4322 ;; Parameters:    Size  Location     Type
  4323 ;;		None
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;		None
  4326 ;; Return value:  Size  Location     Type
  4327 ;;                  1    wreg      unsigned char 
  4328 ;; Registers used:
  4329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4330 ;; Tracked objects:
  4331 ;;		On entry : 0/0
  4332 ;;		On exit  : 0/0
  4333 ;;		Unchanged: 0/0
  4334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4335 ;;      Params:         0       0       0       0       0       0       0
  4336 ;;      Locals:         0       0       0       0       0       0       0
  4337 ;;      Temps:          0       0       0       0       0       0       0
  4338 ;;      Totals:         0       0       0       0       0       0       0
  4339 ;;Total ram usage:        0 bytes
  4340 ;; Hardware stack levels used:    1
  4341 ;; Hardware stack levels required when called:    6
  4342 ;; This function calls:
  4343 ;;		_UART_buff_get
  4344 ;; This function is called by:
  4345 ;;		_ComStart
  4346 ;;		_getch
  4347 ;;		_CRCcheck
  4348 ;;		_receiveData
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           	psect	text19
  4353  001856                     __ptext19:
  4354                           	opt stack 0
  4355  001856                     _Receive_get:
  4356                           	opt stack 22
  4357                           
  4358                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;incstack = 0
  4362  001856  0E00               	movlw	low _input_buffer
  4363  001858  6E21               	movwf	UART_buff_get@_this,c
  4364  00185A  0E03               	movlw	high _input_buffer
  4365  00185C  6E22               	movwf	UART_buff_get@_this+1,c
  4366  00185E  EC8C  F008         	call	_UART_buff_get	;wreg free
  4367  001862  0012               	return	
  4368  001864                     __end_of_Receive_get:
  4369                           	opt stack 0
  4370                           tosu	equ	0xFFF
  4371                           tosh	equ	0xFFE
  4372                           tosl	equ	0xFFD
  4373                           pclath	equ	0xFFA
  4374                           tblptru	equ	0xFF8
  4375                           tblptrh	equ	0xFF7
  4376                           tblptrl	equ	0xFF6
  4377                           tablat	equ	0xFF5
  4378                           prodh	equ	0xFF4
  4379                           prodl	equ	0xFF3
  4380                           postinc0	equ	0xFEE
  4381                           wreg	equ	0xFE8
  4382                           indf2	equ	0xFDF
  4383                           postinc2	equ	0xFDE
  4384                           postdec2	equ	0xFDD
  4385                           plusw2	equ	0xFDB
  4386                           fsr2h	equ	0xFDA
  4387                           fsr2l	equ	0xFD9
  4388                           status	equ	0xFD8
  4389                           
  4390 ;; *************** function _UART_buff_get *****************
  4391 ;; Defined at:
  4392 ;;		line 81 in file "UART.c"
  4393 ;; Parameters:    Size  Location     Type
  4394 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  4395 ;;		 -> output_buffer(206), input_buffer(206), 
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;  c               1   36[COMRAM] unsigned char 
  4398 ;; Return value:  Size  Location     Type
  4399 ;;                  1    wreg      unsigned char 
  4400 ;; Registers used:
  4401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4402 ;; Tracked objects:
  4403 ;;		On entry : 0/0
  4404 ;;		On exit  : 0/0
  4405 ;;		Unchanged: 0/0
  4406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4407 ;;      Params:         2       0       0       0       0       0       0
  4408 ;;      Locals:         1       0       0       0       0       0       0
  4409 ;;      Temps:          2       0       0       0       0       0       0
  4410 ;;      Totals:         5       0       0       0       0       0       0
  4411 ;;Total ram usage:        5 bytes
  4412 ;; Hardware stack levels used:    1
  4413 ;; Hardware stack levels required when called:    5
  4414 ;; This function calls:
  4415 ;;		_UART_buff_modulo_inc
  4416 ;; This function is called by:
  4417 ;;		_Receive_get
  4418 ;;		_Send_put
  4419 ;; This function uses a non-reentrant model
  4420 ;;
  4421                           
  4422                           	psect	text20
  4423  001118                     __ptext20:
  4424                           	opt stack 0
  4425  001118                     _UART_buff_get:
  4426                           	opt stack 21
  4427                           
  4428                           ;UART.c: 82: unsigned char c;
  4429                           ;UART.c: 83: if (_this->count > 0) {
  4430                           
  4431                           ;incstack = 0
  4432  001118  EE20 F0CC          	lfsr	2,204
  4433  00111C  5021               	movf	UART_buff_get@_this,w,c
  4434  00111E  26D9               	addwf	fsr2l,f,c
  4435  001120  5022               	movf	UART_buff_get@_this+1,w,c
  4436  001122  22DA               	addwfc	fsr2h,f,c
  4437  001124  0E01               	movlw	1
  4438  001126  BEDB               	btfsc	plusw2,7,c
  4439  001128  D03C               	goto	l2437
  4440  00112A  0E01               	movlw	1
  4441  00112C  50DB               	movf	plusw2,w,c
  4442  00112E  E103               	bnz	u2450
  4443  001130  04DE               	decf	postinc2,w,c
  4444  001132  A0D8               	btfss	status,0,c
  4445  001134  D036               	goto	l2437
  4446  001136                     u2450:
  4447                           
  4448                           ;UART.c: 84: c = _this->buf[_this->tail];
  4449  001136  EE20 F0CA          	lfsr	2,202
  4450  00113A  5021               	movf	UART_buff_get@_this,w,c
  4451  00113C  26D9               	addwf	fsr2l,f,c
  4452  00113E  5022               	movf	UART_buff_get@_this+1,w,c
  4453  001140  22DA               	addwfc	fsr2h,f,c
  4454  001142  CFDE F023          	movff	postinc2,??_UART_buff_get
  4455  001146  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  4456  00114A  5023               	movf	??_UART_buff_get,w,c
  4457  00114C  2421               	addwf	UART_buff_get@_this,w,c
  4458  00114E  6ED9               	movwf	fsr2l,c
  4459  001150  5024               	movf	??_UART_buff_get+1,w,c
  4460  001152  2022               	addwfc	UART_buff_get@_this+1,w,c
  4461  001154  6EDA               	movwf	fsr2h,c
  4462  001156  50DF               	movf	indf2,w,c
  4463  001158  6E25               	movwf	UART_buff_get@c,c
  4464                           
  4465                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4466  00115A  EE20 F0CA          	lfsr	2,202
  4467  00115E  5021               	movf	UART_buff_get@_this,w,c
  4468  001160  26D9               	addwf	fsr2l,f,c
  4469  001162  5022               	movf	UART_buff_get@_this+1,w,c
  4470  001164  22DA               	addwfc	fsr2h,f,c
  4471  001166  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4472  00116A  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4473  00116E  0E00               	movlw	0
  4474  001170  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4475  001172  0EC8               	movlw	200
  4476  001174  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4477  001176  EC4C  F00B         	call	_UART_buff_modulo_inc	;wreg free
  4478  00117A  EE20 F0CA          	lfsr	2,202
  4479  00117E  5021               	movf	UART_buff_get@_this,w,c
  4480  001180  26D9               	addwf	fsr2l,f,c
  4481  001182  5022               	movf	UART_buff_get@_this+1,w,c
  4482  001184  22DA               	addwfc	fsr2h,f,c
  4483  001186  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4484  00118A  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4485                           
  4486                           ;UART.c: 86: --_this->count;
  4487  00118E  EE20 F0CC          	lfsr	2,204
  4488  001192  5021               	movf	UART_buff_get@_this,w,c
  4489  001194  26D9               	addwf	fsr2l,f,c
  4490  001196  5022               	movf	UART_buff_get@_this+1,w,c
  4491  001198  22DA               	addwfc	fsr2h,f,c
  4492  00119A  06DE               	decf	postinc2,f,c
  4493  00119C  0E00               	movlw	0
  4494  00119E  5ADD               	subwfb	postdec2,f,c
  4495                           
  4496                           ;UART.c: 87: } else {
  4497  0011A0  D002               	goto	l290
  4498  0011A2                     l2437:
  4499                           
  4500                           ;UART.c: 88: c = 0;
  4501  0011A2  0E00               	movlw	0
  4502  0011A4  6E25               	movwf	UART_buff_get@c,c
  4503  0011A6                     l290:
  4504                           
  4505                           ;UART.c: 89: }
  4506                           ;UART.c: 90: return (c);
  4507  0011A6  5025               	movf	UART_buff_get@c,w,c
  4508  0011A8  0012               	return	
  4509  0011AA                     __end_of_UART_buff_get:
  4510                           	opt stack 0
  4511                           tosu	equ	0xFFF
  4512                           tosh	equ	0xFFE
  4513                           tosl	equ	0xFFD
  4514                           pclath	equ	0xFFA
  4515                           tblptru	equ	0xFF8
  4516                           tblptrh	equ	0xFF7
  4517                           tblptrl	equ	0xFF6
  4518                           tablat	equ	0xFF5
  4519                           prodh	equ	0xFF4
  4520                           prodl	equ	0xFF3
  4521                           postinc0	equ	0xFEE
  4522                           wreg	equ	0xFE8
  4523                           indf2	equ	0xFDF
  4524                           postinc2	equ	0xFDE
  4525                           postdec2	equ	0xFDD
  4526                           plusw2	equ	0xFDB
  4527                           fsr2h	equ	0xFDA
  4528                           fsr2l	equ	0xFD9
  4529                           status	equ	0xFD8
  4530                           
  4531 ;; *************** function _UART_buff_modulo_inc *****************
  4532 ;; Defined at:
  4533 ;;		line 106 in file "UART.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;  value           2   26[COMRAM] const unsigned int 
  4536 ;;  modulus         2   28[COMRAM] const unsigned int 
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;  my_value        2   30[COMRAM] unsigned int 
  4539 ;; Return value:  Size  Location     Type
  4540 ;;                  2   26[COMRAM] unsigned int 
  4541 ;; Registers used:
  4542 ;;		wreg, status,2, status,0
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4548 ;;      Params:         4       0       0       0       0       0       0
  4549 ;;      Locals:         2       0       0       0       0       0       0
  4550 ;;      Temps:          0       0       0       0       0       0       0
  4551 ;;      Totals:         6       0       0       0       0       0       0
  4552 ;;Total ram usage:        6 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; Hardware stack levels required when called:    4
  4555 ;; This function calls:
  4556 ;;		Nothing
  4557 ;; This function is called by:
  4558 ;;		_UART_buff_put
  4559 ;;		_UART_buff_get
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           	psect	text21
  4564  001698                     __ptext21:
  4565                           	opt stack 0
  4566  001698                     _UART_buff_modulo_inc:
  4567                           	opt stack 21
  4568                           
  4569                           ;UART.c: 107: unsigned int my_value = value + 1;
  4570                           
  4571                           ;incstack = 0
  4572  001698  0E01               	movlw	1
  4573  00169A  241B               	addwf	UART_buff_modulo_inc@value,w,c
  4574  00169C  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4575  00169E  0E00               	movlw	0
  4576  0016A0  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  4577  0016A2  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4578                           
  4579                           ;UART.c: 108: if (my_value >= modulus) {
  4580  0016A4  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  4581  0016A6  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  4582  0016A8  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  4583  0016AA  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  4584  0016AC  A0D8               	btfss	status,0,c
  4585  0016AE  D004               	goto	l2395
  4586                           
  4587                           ;UART.c: 109: my_value = 0;
  4588  0016B0  0E00               	movlw	0
  4589  0016B2  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4590  0016B4  0E00               	movlw	0
  4591  0016B6  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4592  0016B8                     l2395:
  4593                           
  4594                           ;UART.c: 110: }
  4595                           ;UART.c: 111: return (my_value);
  4596  0016B8  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  4597  0016BC  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  4598  0016C0  0012               	return	
  4599  0016C2                     __end_of_UART_buff_modulo_inc:
  4600                           	opt stack 0
  4601                           tosu	equ	0xFFF
  4602                           tosh	equ	0xFFE
  4603                           tosl	equ	0xFFD
  4604                           pclath	equ	0xFFA
  4605                           tblptru	equ	0xFF8
  4606                           tblptrh	equ	0xFF7
  4607                           tblptrl	equ	0xFF6
  4608                           tablat	equ	0xFF5
  4609                           prodh	equ	0xFF4
  4610                           prodl	equ	0xFF3
  4611                           postinc0	equ	0xFEE
  4612                           wreg	equ	0xFE8
  4613                           indf2	equ	0xFDF
  4614                           postinc2	equ	0xFDE
  4615                           postdec2	equ	0xFDD
  4616                           plusw2	equ	0xFDB
  4617                           fsr2h	equ	0xFDA
  4618                           fsr2l	equ	0xFD9
  4619                           status	equ	0xFD8
  4620                           
  4621 ;; *************** function _Receive_available *****************
  4622 ;; Defined at:
  4623 ;;		line 122 in file "UART.c"
  4624 ;; Parameters:    Size  Location     Type
  4625 ;;		None
  4626 ;; Auto vars:     Size  Location     Type
  4627 ;;		None
  4628 ;; Return value:  Size  Location     Type
  4629 ;;                  2   28[COMRAM] int 
  4630 ;; Registers used:
  4631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4632 ;; Tracked objects:
  4633 ;;		On entry : 0/0
  4634 ;;		On exit  : 0/0
  4635 ;;		Unchanged: 0/0
  4636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4637 ;;      Params:         2       0       0       0       0       0       0
  4638 ;;      Locals:         0       0       0       0       0       0       0
  4639 ;;      Temps:          0       0       0       0       0       0       0
  4640 ;;      Totals:         2       0       0       0       0       0       0
  4641 ;;Total ram usage:        2 bytes
  4642 ;; Hardware stack levels used:    1
  4643 ;; Hardware stack levels required when called:    5
  4644 ;; This function calls:
  4645 ;;		_UART_buff_size
  4646 ;; This function is called by:
  4647 ;;		_ComStart
  4648 ;;		_CRCcheck
  4649 ;;		_receiveData
  4650 ;; This function uses a non-reentrant model
  4651 ;;
  4652                           
  4653                           	psect	text22
  4654  0017D0                     __ptext22:
  4655                           	opt stack 0
  4656  0017D0                     _Receive_available:
  4657                           	opt stack 23
  4658                           
  4659                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  4660                           
  4661                           ;incstack = 0
  4662  0017D0  0E00               	movlw	low _input_buffer
  4663  0017D2  6E1B               	movwf	UART_buff_size@_this,c
  4664  0017D4  0E03               	movlw	high _input_buffer
  4665  0017D6  6E1C               	movwf	UART_buff_size@_this+1,c
  4666  0017D8  ECF3  F00B         	call	_UART_buff_size	;wreg free
  4667  0017DC  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  4668  0017E0  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  4669  0017E4  0012               	return	
  4670  0017E6                     __end_of_Receive_available:
  4671                           	opt stack 0
  4672                           tosu	equ	0xFFF
  4673                           tosh	equ	0xFFE
  4674                           tosl	equ	0xFFD
  4675                           pclath	equ	0xFFA
  4676                           tblptru	equ	0xFF8
  4677                           tblptrh	equ	0xFF7
  4678                           tblptrl	equ	0xFF6
  4679                           tablat	equ	0xFF5
  4680                           prodh	equ	0xFF4
  4681                           prodl	equ	0xFF3
  4682                           postinc0	equ	0xFEE
  4683                           wreg	equ	0xFE8
  4684                           indf2	equ	0xFDF
  4685                           postinc2	equ	0xFDE
  4686                           postdec2	equ	0xFDD
  4687                           plusw2	equ	0xFDB
  4688                           fsr2h	equ	0xFDA
  4689                           fsr2l	equ	0xFD9
  4690                           status	equ	0xFD8
  4691                           
  4692 ;; *************** function _UART_buff_size *****************
  4693 ;; Defined at:
  4694 ;;		line 102 in file "UART.c"
  4695 ;; Parameters:    Size  Location     Type
  4696 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  4697 ;;		 -> output_buffer(206), input_buffer(206), 
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;		None
  4700 ;; Return value:  Size  Location     Type
  4701 ;;                  2   26[COMRAM] int 
  4702 ;; Registers used:
  4703 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4704 ;; Tracked objects:
  4705 ;;		On entry : 0/0
  4706 ;;		On exit  : 0/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4709 ;;      Params:         2       0       0       0       0       0       0
  4710 ;;      Locals:         0       0       0       0       0       0       0
  4711 ;;      Temps:          0       0       0       0       0       0       0
  4712 ;;      Totals:         2       0       0       0       0       0       0
  4713 ;;Total ram usage:        2 bytes
  4714 ;; Hardware stack levels used:    1
  4715 ;; Hardware stack levels required when called:    4
  4716 ;; This function calls:
  4717 ;;		Nothing
  4718 ;; This function is called by:
  4719 ;;		_Receive_available
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           	psect	text23
  4724  0017E6                     __ptext23:
  4725                           	opt stack 0
  4726  0017E6                     _UART_buff_size:
  4727                           	opt stack 23
  4728                           
  4729                           ;UART.c: 103: return (_this->count);
  4730                           
  4731                           ;incstack = 0
  4732  0017E6  EE20 F0CC          	lfsr	2,204
  4733  0017EA  501B               	movf	UART_buff_size@_this,w,c
  4734  0017EC  26D9               	addwf	fsr2l,f,c
  4735  0017EE  501C               	movf	UART_buff_size@_this+1,w,c
  4736  0017F0  22DA               	addwfc	fsr2h,f,c
  4737  0017F2  CFDE F01B          	movff	postinc2,?_UART_buff_size
  4738  0017F6  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  4739  0017FA  0012               	return	
  4740  0017FC                     __end_of_UART_buff_size:
  4741                           	opt stack 0
  4742                           tosu	equ	0xFFF
  4743                           tosh	equ	0xFFE
  4744                           tosl	equ	0xFFD
  4745                           pclath	equ	0xFFA
  4746                           tblptru	equ	0xFF8
  4747                           tblptrh	equ	0xFF7
  4748                           tblptrl	equ	0xFF6
  4749                           tablat	equ	0xFF5
  4750                           prodh	equ	0xFF4
  4751                           prodl	equ	0xFF3
  4752                           postinc0	equ	0xFEE
  4753                           wreg	equ	0xFE8
  4754                           indf2	equ	0xFDF
  4755                           postinc2	equ	0xFDE
  4756                           postdec2	equ	0xFDD
  4757                           plusw2	equ	0xFDB
  4758                           fsr2h	equ	0xFDA
  4759                           fsr2l	equ	0xFD9
  4760                           status	equ	0xFD8
  4761                           
  4762 ;; *************** function _CRC8 *****************
  4763 ;; Defined at:
  4764 ;;		line 89 in file "FastTransfer.c"
  4765 ;; Parameters:    Size  Location     Type
  4766 ;;  data            2   26[COMRAM] PTR const unsigned char 
  4767 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_329(3), receiveData@holder(3), 
  4768 ;;		 -> rx_buffer(200), ring_buffer(206), 
  4769 ;;  len             1   28[COMRAM] unsigned char 
  4770 ;; Auto vars:     Size  Location     Type
  4771 ;;  sum             1   29[COMRAM] unsigned char 
  4772 ;;  tempI           1   31[COMRAM] unsigned char 
  4773 ;;  extract         1   30[COMRAM] unsigned char 
  4774 ;;  crc             1   32[COMRAM] unsigned char 
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  1    wreg      unsigned char 
  4777 ;; Registers used:
  4778 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4784 ;;      Params:         3       0       0       0       0       0       0
  4785 ;;      Locals:         4       0       0       0       0       0       0
  4786 ;;      Temps:          0       0       0       0       0       0       0
  4787 ;;      Totals:         7       0       0       0       0       0       0
  4788 ;;Total ram usage:        7 bytes
  4789 ;; Hardware stack levels used:    1
  4790 ;; Hardware stack levels required when called:    4
  4791 ;; This function calls:
  4792 ;;		Nothing
  4793 ;; This function is called by:
  4794 ;;		_sendData
  4795 ;;		_receiveData
  4796 ;;		_CRCcheck
  4797 ;; This function uses a non-reentrant model
  4798 ;;
  4799                           
  4800                           	psect	text24
  4801  0014FA                     __ptext24:
  4802                           	opt stack 0
  4803  0014FA                     _CRC8:
  4804                           	opt stack 23
  4805                           
  4806                           ;FastTransfer.c: 90: unsigned char crc = 0x00;
  4807                           
  4808                           ;incstack = 0
  4809  0014FA  0E00               	movlw	0
  4810  0014FC  6E21               	movwf	CRC8@crc,c
  4811                           
  4812                           ;FastTransfer.c: 91: while (len--) {
  4813  0014FE  D01C               	goto	l2463
  4814  001500                     l2447:
  4815                           
  4816                           ;FastTransfer.c: 92: unsigned char extract = *data++;
  4817  001500  C01B  FFD9         	movff	CRC8@data,fsr2l
  4818  001504  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  4819  001508  50DF               	movf	indf2,w,c
  4820  00150A  6E1F               	movwf	CRC8@extract,c
  4821  00150C  4A1B               	infsnz	CRC8@data,f,c
  4822  00150E  2A1C               	incf	CRC8@data+1,f,c
  4823                           
  4824                           ;FastTransfer.c: 93: unsigned char tempI;
  4825                           ;FastTransfer.c: 94: for (tempI = 8; tempI; tempI--) {
  4826  001510  0E08               	movlw	8
  4827  001512  6E20               	movwf	CRC8@tempI,c
  4828  001514  D00E               	goto	l2461
  4829  001516                     l2453:
  4830                           
  4831                           ;FastTransfer.c: 95: unsigned char sum = (crc ^ extract) & 0x01;
  4832  001516  5021               	movf	CRC8@crc,w,c
  4833  001518  181F               	xorwf	CRC8@extract,w,c
  4834  00151A  0B01               	andlw	1
  4835  00151C  6E1E               	movwf	CRC8@sum,c
  4836                           
  4837                           ;FastTransfer.c: 96: crc >>= 1;
  4838  00151E  90D8               	bcf	status,0,c
  4839  001520  3221               	rrcf	CRC8@crc,f,c
  4840                           
  4841                           ;FastTransfer.c: 97: if (sum) {
  4842  001522  501E               	movf	CRC8@sum,w,c
  4843  001524  B4D8               	btfsc	status,2,c
  4844  001526  D002               	goto	l112
  4845                           
  4846                           ;FastTransfer.c: 98: crc ^= 0x8C;
  4847  001528  0E8C               	movlw	140
  4848  00152A  1A21               	xorwf	CRC8@crc,f,c
  4849  00152C                     l112:
  4850                           
  4851                           ;FastTransfer.c: 99: }
  4852                           ;FastTransfer.c: 100: extract >>= 1;
  4853  00152C  90D8               	bcf	status,0,c
  4854  00152E  321F               	rrcf	CRC8@extract,f,c
  4855  001530  0620               	decf	CRC8@tempI,f,c
  4856  001532                     l2461:
  4857  001532  5020               	movf	CRC8@tempI,w,c
  4858  001534  A4D8               	btfss	status,2,c
  4859  001536  D7EF               	goto	l2453
  4860  001538                     l2463:
  4861  001538  061D               	decf	CRC8@len,f,c
  4862  00153A  281D               	incf	CRC8@len,w,c
  4863  00153C  A4D8               	btfss	status,2,c
  4864  00153E  D7E0               	goto	l2447
  4865                           
  4866                           ;FastTransfer.c: 101: }
  4867                           ;FastTransfer.c: 102: }
  4868                           ;FastTransfer.c: 103: return crc;
  4869  001540  5021               	movf	CRC8@crc,w,c
  4870  001542  0012               	return	
  4871  001544                     __end_of_CRC8:
  4872                           	opt stack 0
  4873                           tosu	equ	0xFFF
  4874                           tosh	equ	0xFFE
  4875                           tosl	equ	0xFFD
  4876                           pclath	equ	0xFFA
  4877                           tblptru	equ	0xFF8
  4878                           tblptrh	equ	0xFF7
  4879                           tblptrl	equ	0xFF6
  4880                           tablat	equ	0xFF5
  4881                           prodh	equ	0xFF4
  4882                           prodl	equ	0xFF3
  4883                           postinc0	equ	0xFEE
  4884                           wreg	equ	0xFE8
  4885                           indf2	equ	0xFDF
  4886                           postinc2	equ	0xFDE
  4887                           postdec2	equ	0xFDD
  4888                           plusw2	equ	0xFDB
  4889                           fsr2h	equ	0xFDA
  4890                           fsr2l	equ	0xFD9
  4891                           status	equ	0xFD8
  4892                           
  4893 ;; *************** function _Start *****************
  4894 ;; Defined at:
  4895 ;;		line 43 in file "Function.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;		None
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;		None
  4900 ;; Return value:  Size  Location     Type
  4901 ;;                  1    wreg      void 
  4902 ;; Registers used:
  4903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4904 ;; Tracked objects:
  4905 ;;		On entry : 0/0
  4906 ;;		On exit  : 0/0
  4907 ;;		Unchanged: 0/0
  4908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4909 ;;      Params:         0       0       0       0       0       0       0
  4910 ;;      Locals:         0       0       0       0       0       0       0
  4911 ;;      Temps:          0       0       0       0       0       0       0
  4912 ;;      Totals:         0       0       0       0       0       0       0
  4913 ;;Total ram usage:        0 bytes
  4914 ;; Hardware stack levels used:    1
  4915 ;; Hardware stack levels required when called:    8
  4916 ;; This function calls:
  4917 ;;		_ComStart
  4918 ;;		_INTERRUPT_Initialize
  4919 ;;		_TMR0_Initialize
  4920 ;; This function is called by:
  4921 ;;		_main
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           	psect	text25
  4926  0014AC                     __ptext25:
  4927                           	opt stack 0
  4928  0014AC                     _Start:
  4929                           	opt stack 22
  4930                           
  4931                           ;Function.c: 108: TRISCbits.TRISC5 = 1;
  4932                           
  4933                           ;incstack = 0
  4934  0014AC  8A94               	bsf	3988,5,c	;volatile
  4935                           
  4936                           ;Function.c: 109: TRISCbits.TRISC4 = 1;
  4937  0014AE  8894               	bsf	3988,4,c	;volatile
  4938                           
  4939                           ;Function.c: 110: TRISDbits.TRISD3 = 1;
  4940  0014B0  8695               	bsf	3989,3,c	;volatile
  4941                           
  4942                           ;Function.c: 111: TRISDbits.TRISD2 = 1;
  4943  0014B2  8495               	bsf	3989,2,c	;volatile
  4944                           
  4945                           ;Function.c: 112: TRISDbits.TRISD1 = 1;
  4946  0014B4  8295               	bsf	3989,1,c	;volatile
  4947                           
  4948                           ;Function.c: 113: TRISDbits.TRISD0 = 1;
  4949  0014B6  8095               	bsf	3989,0,c	;volatile
  4950                           
  4951                           ;Function.c: 114: TRISCbits.TRISC3 = 1;
  4952  0014B8  8694               	bsf	3988,3,c	;volatile
  4953                           
  4954                           ;Function.c: 115: TRISCbits.TRISC2 = 1;
  4955  0014BA  8494               	bsf	3988,2,c	;volatile
  4956                           
  4957                           ;Function.c: 116: TRISCbits.TRISC1 = 1;
  4958  0014BC  8294               	bsf	3988,1,c	;volatile
  4959                           
  4960                           ;Function.c: 117: TRISAbits.TRISA7 = 1;
  4961  0014BE  8E92               	bsf	3986,7,c	;volatile
  4962                           
  4963                           ;Function.c: 118: TRISCbits.TRISC0 = 1;
  4964  0014C0  8094               	bsf	3988,0,c	;volatile
  4965                           
  4966                           ;Function.c: 120: TRISAbits.TRISA4 = 1;
  4967  0014C2  8892               	bsf	3986,4,c	;volatile
  4968                           
  4969                           ;Function.c: 121: TRISAbits.TRISA6 = 1;
  4970  0014C4  8C92               	bsf	3986,6,c	;volatile
  4971                           
  4972                           ;Function.c: 122: TRISAbits.TRISA3 = 0;
  4973  0014C6  9692               	bcf	3986,3,c	;volatile
  4974                           
  4975                           ;Function.c: 124: TRISAbits.TRISA3 = 0;
  4976  0014C8  9692               	bcf	3986,3,c	;volatile
  4977                           
  4978                           ;Function.c: 125: TRISDbits.TRISD4 = 0;
  4979  0014CA  9895               	bcf	3989,4,c	;volatile
  4980                           
  4981                           ;Function.c: 126: TRISDbits.TRISD2 = 1;
  4982  0014CC  8495               	bsf	3989,2,c	;volatile
  4983                           
  4984                           ;Function.c: 131: ANSELA = 0;
  4985  0014CE  0E00               	movlw	0
  4986  0014D0  010F               	movlb	15	; () banked
  4987  0014D2  6F38               	movwf	56,b	;volatile
  4988                           
  4989                           ;Function.c: 132: ANSELC = 0;
  4990  0014D4  0E00               	movlw	0
  4991  0014D6  010F               	movlb	15	; () banked
  4992  0014D8  6F3A               	movwf	58,b	;volatile
  4993                           
  4994                           ;Function.c: 133: ANSELD = 0;
  4995  0014DA  0E00               	movlw	0
  4996  0014DC  010F               	movlb	15	; () banked
  4997  0014DE  6F3B               	movwf	59,b	;volatile
  4998                           
  4999                           ;Function.c: 136: OSCCON = 0x72;
  5000  0014E0  0E72               	movlw	114
  5001  0014E2  6ED3               	movwf	4051,c	;volatile
  5002                           
  5003                           ;Function.c: 138: OSCCON2 = 0x04;
  5004  0014E4  0E04               	movlw	4
  5005  0014E6  6ED2               	movwf	4050,c	;volatile
  5006                           
  5007                           ;Function.c: 140: OSCTUNE = 0x00;
  5008  0014E8  0E00               	movlw	0
  5009  0014EA  6E9B               	movwf	3995,c	;volatile
  5010                           
  5011                           ; BSR set to: 15
  5012                           ;Function.c: 143: ComStart();
  5013  0014EC  ECFE  F009         	call	_ComStart	;wreg free
  5014                           
  5015                           ;Function.c: 144: INTERRUPT_Initialize();
  5016  0014F0  ECD1  F00B         	call	_INTERRUPT_Initialize	;wreg free
  5017                           
  5018                           ;Function.c: 145: TMR0_Initialize();
  5019  0014F4  EC97  F00B         	call	_TMR0_Initialize	;wreg free
  5020  0014F8  0012               	return		;funcret
  5021  0014FA                     __end_of_Start:
  5022                           	opt stack 0
  5023                           tosu	equ	0xFFF
  5024                           tosh	equ	0xFFE
  5025                           tosl	equ	0xFFD
  5026                           pclath	equ	0xFFA
  5027                           tblptru	equ	0xFF8
  5028                           tblptrh	equ	0xFF7
  5029                           tblptrl	equ	0xFF6
  5030                           tablat	equ	0xFF5
  5031                           prodh	equ	0xFF4
  5032                           prodl	equ	0xFF3
  5033                           postinc0	equ	0xFEE
  5034                           wreg	equ	0xFE8
  5035                           indf2	equ	0xFDF
  5036                           postinc2	equ	0xFDE
  5037                           postdec2	equ	0xFDD
  5038                           plusw2	equ	0xFDB
  5039                           fsr2h	equ	0xFDA
  5040                           fsr2l	equ	0xFD9
  5041                           status	equ	0xFD8
  5042                           
  5043 ;; *************** function _TMR0_Initialize *****************
  5044 ;; Defined at:
  5045 ;;		line 23 in file "tmr0.c"
  5046 ;; Parameters:    Size  Location     Type
  5047 ;;		None
  5048 ;; Auto vars:     Size  Location     Type
  5049 ;;		None
  5050 ;; Return value:  Size  Location     Type
  5051 ;;                  1    wreg      void 
  5052 ;; Registers used:
  5053 ;;		wreg, status,2, cstack
  5054 ;; Tracked objects:
  5055 ;;		On entry : 0/0
  5056 ;;		On exit  : 0/0
  5057 ;;		Unchanged: 0/0
  5058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5059 ;;      Params:         0       0       0       0       0       0       0
  5060 ;;      Locals:         0       0       0       0       0       0       0
  5061 ;;      Temps:          0       0       0       0       0       0       0
  5062 ;;      Totals:         0       0       0       0       0       0       0
  5063 ;;Total ram usage:        0 bytes
  5064 ;; Hardware stack levels used:    1
  5065 ;; Hardware stack levels required when called:    5
  5066 ;; This function calls:
  5067 ;;		_TMR0_StartTimer
  5068 ;; This function is called by:
  5069 ;;		_Start
  5070 ;; This function uses a non-reentrant model
  5071 ;;
  5072                           
  5073                           	psect	text26
  5074  00172E                     __ptext26:
  5075                           	opt stack 0
  5076  00172E                     _TMR0_Initialize:
  5077                           	opt stack 24
  5078                           
  5079                           ;tmr0.c: 27: T0CON = 0x94;
  5080                           
  5081                           ;incstack = 0
  5082  00172E  0E94               	movlw	148
  5083  001730  6ED5               	movwf	4053,c	;volatile
  5084                           
  5085                           ;tmr0.c: 30: TMR0H = 0xCF;
  5086  001732  0ECF               	movlw	207
  5087  001734  6ED7               	movwf	4055,c	;volatile
  5088                           
  5089                           ;tmr0.c: 33: TMR0L = 0x2C;
  5090  001736  0E2C               	movlw	44
  5091  001738  6ED6               	movwf	4054,c	;volatile
  5092                           
  5093                           ;tmr0.c: 36: timer0ReloadVal16bit = 53036;
  5094  00173A  0ECF               	movlw	207
  5095  00173C  6E39               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  5096  00173E  0E2C               	movlw	44
  5097  001740  6E38               	movwf	_timer0ReloadVal16bit,c	;volatile
  5098                           
  5099                           ;tmr0.c: 39: INTCONbits.TMR0IF = 0;
  5100  001742  94F2               	bcf	intcon,2,c	;volatile
  5101                           
  5102                           ;tmr0.c: 42: INTCONbits.TMR0IE = 1;
  5103  001744  8AF2               	bsf	intcon,5,c	;volatile
  5104                           
  5105                           ;tmr0.c: 45: TMR0_StartTimer();
  5106  001746  EC32  F00C         	call	_TMR0_StartTimer	;wreg free
  5107  00174A  0012               	return		;funcret
  5108  00174C                     __end_of_TMR0_Initialize:
  5109                           	opt stack 0
  5110                           tosu	equ	0xFFF
  5111                           tosh	equ	0xFFE
  5112                           tosl	equ	0xFFD
  5113                           pclath	equ	0xFFA
  5114                           tblptru	equ	0xFF8
  5115                           tblptrh	equ	0xFF7
  5116                           tblptrl	equ	0xFF6
  5117                           tablat	equ	0xFF5
  5118                           prodh	equ	0xFF4
  5119                           prodl	equ	0xFF3
  5120                           intcon	equ	0xFF2
  5121                           postinc0	equ	0xFEE
  5122                           wreg	equ	0xFE8
  5123                           indf2	equ	0xFDF
  5124                           postinc2	equ	0xFDE
  5125                           postdec2	equ	0xFDD
  5126                           plusw2	equ	0xFDB
  5127                           fsr2h	equ	0xFDA
  5128                           fsr2l	equ	0xFD9
  5129                           status	equ	0xFD8
  5130                           
  5131 ;; *************** function _TMR0_StartTimer *****************
  5132 ;; Defined at:
  5133 ;;		line 48 in file "tmr0.c"
  5134 ;; Parameters:    Size  Location     Type
  5135 ;;		None
  5136 ;; Auto vars:     Size  Location     Type
  5137 ;;		None
  5138 ;; Return value:  Size  Location     Type
  5139 ;;                  1    wreg      void 
  5140 ;; Registers used:
  5141 ;;		None
  5142 ;; Tracked objects:
  5143 ;;		On entry : 0/0
  5144 ;;		On exit  : 0/0
  5145 ;;		Unchanged: 0/0
  5146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5147 ;;      Params:         0       0       0       0       0       0       0
  5148 ;;      Locals:         0       0       0       0       0       0       0
  5149 ;;      Temps:          0       0       0       0       0       0       0
  5150 ;;      Totals:         0       0       0       0       0       0       0
  5151 ;;Total ram usage:        0 bytes
  5152 ;; Hardware stack levels used:    1
  5153 ;; Hardware stack levels required when called:    4
  5154 ;; This function calls:
  5155 ;;		Nothing
  5156 ;; This function is called by:
  5157 ;;		_TMR0_Initialize
  5158 ;; This function uses a non-reentrant model
  5159 ;;
  5160                           
  5161                           	psect	text27
  5162  001864                     __ptext27:
  5163                           	opt stack 0
  5164  001864                     _TMR0_StartTimer:
  5165                           	opt stack 24
  5166                           
  5167                           ;tmr0.c: 50: T0CONbits.TMR0ON = 1;
  5168                           
  5169                           ;incstack = 0
  5170  001864  8ED5               	bsf	4053,7,c	;volatile
  5171  001866  0012               	return		;funcret
  5172  001868                     __end_of_TMR0_StartTimer:
  5173                           	opt stack 0
  5174                           tosu	equ	0xFFF
  5175                           tosh	equ	0xFFE
  5176                           tosl	equ	0xFFD
  5177                           pclath	equ	0xFFA
  5178                           tblptru	equ	0xFF8
  5179                           tblptrh	equ	0xFF7
  5180                           tblptrl	equ	0xFF6
  5181                           tablat	equ	0xFF5
  5182                           prodh	equ	0xFF4
  5183                           prodl	equ	0xFF3
  5184                           intcon	equ	0xFF2
  5185                           postinc0	equ	0xFEE
  5186                           wreg	equ	0xFE8
  5187                           indf2	equ	0xFDF
  5188                           postinc2	equ	0xFDE
  5189                           postdec2	equ	0xFDD
  5190                           plusw2	equ	0xFDB
  5191                           fsr2h	equ	0xFDA
  5192                           fsr2l	equ	0xFD9
  5193                           status	equ	0xFD8
  5194                           
  5195 ;; *************** function _INTERRUPT_Initialize *****************
  5196 ;; Defined at:
  5197 ;;		line 148 in file "Function.c"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;		None
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;		None
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  1    wreg      void 
  5204 ;; Registers used:
  5205 ;;		None
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/0
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5211 ;;      Params:         0       0       0       0       0       0       0
  5212 ;;      Locals:         0       0       0       0       0       0       0
  5213 ;;      Temps:          0       0       0       0       0       0       0
  5214 ;;      Totals:         0       0       0       0       0       0       0
  5215 ;;Total ram usage:        0 bytes
  5216 ;; Hardware stack levels used:    1
  5217 ;; Hardware stack levels required when called:    4
  5218 ;; This function calls:
  5219 ;;		Nothing
  5220 ;; This function is called by:
  5221 ;;		_Start
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           	psect	text28
  5226  0017A2                     __ptext28:
  5227                           	opt stack 0
  5228  0017A2                     _INTERRUPT_Initialize:
  5229                           	opt stack 25
  5230                           
  5231                           ;Function.c: 150: INTCONbits.PEIE = 1;
  5232                           
  5233                           ;incstack = 0
  5234  0017A2  8CF2               	bsf	intcon,6,c	;volatile
  5235                           
  5236                           ;Function.c: 151: INTCONbits.GIE = 1;
  5237  0017A4  8EF2               	bsf	intcon,7,c	;volatile
  5238                           
  5239                           ;Function.c: 153: RCONbits.IPEN = 0;
  5240  0017A6  9ED0               	bcf	4048,7,c	;volatile
  5241                           
  5242                           ;Function.c: 158: IPR1bits.RC1IP = 0;
  5243  0017A8  9A9F               	bcf	3999,5,c	;volatile
  5244                           
  5245                           ;Function.c: 160: IPR1bits.TX1IP = 0;
  5246  0017AA  989F               	bcf	3999,4,c	;volatile
  5247                           
  5248                           ;Function.c: 163: INTCONbits.TMR0IF = 0;
  5249  0017AC  94F2               	bcf	intcon,2,c	;volatile
  5250                           
  5251                           ;Function.c: 166: INTCONbits.TMR0IE = 1;
  5252  0017AE  8AF2               	bsf	intcon,5,c	;volatile
  5253                           
  5254                           ;Function.c: 168: IPR1bits.ADIP = 0;
  5255  0017B0  9C9F               	bcf	3999,6,c	;volatile
  5256                           
  5257                           ;Function.c: 170: IPR1bits.SSP1IP = 0;
  5258  0017B2  969F               	bcf	3999,3,c	;volatile
  5259                           
  5260                           ;Function.c: 172: IPR2bits.BCL1IP = 0;
  5261  0017B4  96A2               	bcf	4002,3,c	;volatile
  5262                           
  5263                           ;Function.c: 173: IPR1bits.TMR2IP=0;
  5264  0017B6  929F               	bcf	3999,1,c	;volatile
  5265  0017B8  0012               	return		;funcret
  5266  0017BA                     __end_of_INTERRUPT_Initialize:
  5267                           	opt stack 0
  5268                           tosu	equ	0xFFF
  5269                           tosh	equ	0xFFE
  5270                           tosl	equ	0xFFD
  5271                           pclath	equ	0xFFA
  5272                           tblptru	equ	0xFF8
  5273                           tblptrh	equ	0xFF7
  5274                           tblptrl	equ	0xFF6
  5275                           tablat	equ	0xFF5
  5276                           prodh	equ	0xFF4
  5277                           prodl	equ	0xFF3
  5278                           intcon	equ	0xFF2
  5279                           postinc0	equ	0xFEE
  5280                           wreg	equ	0xFE8
  5281                           indf2	equ	0xFDF
  5282                           postinc2	equ	0xFDE
  5283                           postdec2	equ	0xFDD
  5284                           plusw2	equ	0xFDB
  5285                           fsr2h	equ	0xFDA
  5286                           fsr2l	equ	0xFD9
  5287                           status	equ	0xFD8
  5288                           
  5289 ;; *************** function _ComStart *****************
  5290 ;; Defined at:
  5291 ;;		line 12 in file "Communications.c"
  5292 ;; Parameters:    Size  Location     Type
  5293 ;;		None
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;		None
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      void 
  5298 ;; Registers used:
  5299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5305 ;;      Params:         0       0       0       0       0       0       0
  5306 ;;      Locals:         0       0       0       0       0       0       0
  5307 ;;      Temps:          0       0       0       0       0       0       0
  5308 ;;      Totals:         0       0       0       0       0       0       0
  5309 ;;Total ram usage:        0 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; Hardware stack levels required when called:    7
  5312 ;; This function calls:
  5313 ;;		_EUSART1_Initialize
  5314 ;;		_begin
  5315 ;; This function is called by:
  5316 ;;		_Start
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           	psect	text29
  5321  0013FC                     __ptext29:
  5322                           	opt stack 0
  5323  0013FC                     _ComStart:
  5324                           	opt stack 22
  5325                           
  5326                           ;Communications.c: 13: EUSART1_Initialize();
  5327                           
  5328                           ;incstack = 0
  5329  0013FC  ECA2  F00A         	call	_EUSART1_Initialize	;wreg free
  5330                           
  5331                           ;Communications.c: 14: begin(receiveArray, sizeof (receiveArray), 8, 0, Send_put, Receiv
      +                          e_get, Receive_available, Receive_peek);
  5332  001400  0E79               	movlw	low _receiveArray
  5333  001402  0100               	movlb	0	; () banked
  5334  001404  6F83               	movwf	begin@ptr& (0+255),b
  5335  001406  0E00               	movlw	high _receiveArray
  5336  001408  0100               	movlb	0	; () banked
  5337  00140A  6F84               	movwf	(begin@ptr+1)& (0+255),b
  5338  00140C  0E0A               	movlw	10
  5339  00140E  0100               	movlb	0	; () banked
  5340  001410  6F85               	movwf	begin@maxSize& (0+255),b
  5341  001412  0E08               	movlw	8
  5342  001414  0100               	movlb	0	; () banked
  5343  001416  6F86               	movwf	begin@givenAddress& (0+255),b
  5344  001418  0E00               	movlw	0
  5345  00141A  0100               	movlb	0	; () banked
  5346  00141C  6F87               	movwf	begin@error& (0+255),b
  5347  00141E  0EE6               	movlw	low _Send_put
  5348  001420  0100               	movlb	0	; () banked
  5349  001422  6F88               	movwf	begin@stufftosend& (0+255),b
  5350  001424  0E15               	movlw	high _Send_put
  5351  001426  0100               	movlb	0	; () banked
  5352  001428  6F89               	movwf	(begin@stufftosend+1)& (0+255),b
  5353  00142A  0E56               	movlw	low _Receive_get
  5354  00142C  0100               	movlb	0	; () banked
  5355  00142E  6F8A               	movwf	begin@stufftoreceive& (0+255),b
  5356  001430  0E18               	movlw	high _Receive_get
  5357  001432  0100               	movlb	0	; () banked
  5358  001434  6F8B               	movwf	(begin@stufftoreceive+1)& (0+255),b
  5359  001436  0ED0               	movlw	low _Receive_available
  5360  001438  0100               	movlb	0	; () banked
  5361  00143A  6F8C               	movwf	begin@stuffavailable& (0+255),b
  5362  00143C  0E17               	movlw	high _Receive_available
  5363  00143E  0100               	movlb	0	; () banked
  5364  001440  6F8D               	movwf	(begin@stuffavailable+1)& (0+255),b
  5365  001442  0E48               	movlw	low _Receive_peek
  5366  001444  0100               	movlb	0	; () banked
  5367  001446  6F8E               	movwf	begin@stuffpeek& (0+255),b
  5368  001448  0E18               	movlw	high _Receive_peek
  5369  00144A  0100               	movlb	0	; () banked
  5370  00144C  6F8F               	movwf	(begin@stuffpeek+1)& (0+255),b
  5371  00144E  EC2A  F00A         	call	_begin	;wreg free
  5372  001452  0012               	return		;funcret
  5373  001454                     __end_of_ComStart:
  5374                           	opt stack 0
  5375                           tosu	equ	0xFFF
  5376                           tosh	equ	0xFFE
  5377                           tosl	equ	0xFFD
  5378                           pclath	equ	0xFFA
  5379                           tblptru	equ	0xFF8
  5380                           tblptrh	equ	0xFF7
  5381                           tblptrl	equ	0xFF6
  5382                           tablat	equ	0xFF5
  5383                           prodh	equ	0xFF4
  5384                           prodl	equ	0xFF3
  5385                           intcon	equ	0xFF2
  5386                           postinc0	equ	0xFEE
  5387                           wreg	equ	0xFE8
  5388                           indf2	equ	0xFDF
  5389                           postinc2	equ	0xFDE
  5390                           postdec2	equ	0xFDD
  5391                           plusw2	equ	0xFDB
  5392                           fsr2h	equ	0xFDA
  5393                           fsr2l	equ	0xFD9
  5394                           status	equ	0xFD8
  5395                           
  5396 ;; *************** function _begin *****************
  5397 ;; Defined at:
  5398 ;;		line 73 in file "FastTransfer.c"
  5399 ;; Parameters:    Size  Location     Type
  5400 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  5401 ;;		 -> receiveArray(10), 
  5402 ;;  maxSize         1    2[BANK0 ] unsigned char 
  5403 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  5404 ;;  error           1    4[BANK0 ] unsigned char 
  5405 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  5406 ;;		 -> Send_put(1), 
  5407 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  5408 ;;		 -> Receive_get(1), 
  5409 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  5410 ;;		 -> Receive_available(2), 
  5411 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  5412 ;;		 -> Receive_peek(1), 
  5413 ;; Auto vars:     Size  Location     Type
  5414 ;;		None
  5415 ;; Return value:  Size  Location     Type
  5416 ;;                  1    wreg      void 
  5417 ;; Registers used:
  5418 ;;		wreg, status,2, status,0, cstack
  5419 ;; Tracked objects:
  5420 ;;		On entry : 0/0
  5421 ;;		On exit  : 0/0
  5422 ;;		Unchanged: 0/0
  5423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5424 ;;      Params:         0      13       0       0       0       0       0
  5425 ;;      Locals:         0       0       0       0       0       0       0
  5426 ;;      Temps:          0       0       0       0       0       0       0
  5427 ;;      Totals:         0      13       0       0       0       0       0
  5428 ;;Total ram usage:       13 bytes
  5429 ;; Hardware stack levels used:    1
  5430 ;; Hardware stack levels required when called:    5
  5431 ;; This function calls:
  5432 ;;		___awdiv
  5433 ;; This function is called by:
  5434 ;;		_ComStart
  5435 ;; This function uses a non-reentrant model
  5436 ;;
  5437                           
  5438                           	psect	text30
  5439  001454                     __ptext30:
  5440                           	opt stack 0
  5441  001454                     _begin:
  5442                           	opt stack 23
  5443                           
  5444                           ;FastTransfer.c: 74: receiveArrayAddress = ptr;
  5445                           
  5446                           ;incstack = 0
  5447  001454  C083  F02C         	movff	begin@ptr,_receiveArrayAddress
  5448  001458  C084  F02D         	movff	begin@ptr+1,_receiveArrayAddress+1
  5449                           
  5450                           ;FastTransfer.c: 75: moduleAddress = givenAddress;
  5451  00145C  C086  F03F         	movff	begin@givenAddress,_moduleAddress
  5452                           
  5453                           ;FastTransfer.c: 76: serial_write = stufftosend;
  5454  001460  C088  F036         	movff	begin@stufftosend,_serial_write
  5455  001464  C089  F037         	movff	begin@stufftosend+1,_serial_write+1
  5456                           
  5457                           ;FastTransfer.c: 77: serial_available = stuffavailable;
  5458  001468  C08C  F030         	movff	begin@stuffavailable,_serial_available
  5459  00146C  C08D  F031         	movff	begin@stuffavailable+1,_serial_available+1
  5460                           
  5461                           ;FastTransfer.c: 78: serial_peek = stuffpeek;
  5462  001470  C08E  F032         	movff	begin@stuffpeek,_serial_peek
  5463  001474  C08F  F033         	movff	begin@stuffpeek+1,_serial_peek+1
  5464                           
  5465                           ;FastTransfer.c: 79: serial_read = stufftoreceive;
  5466  001478  C08A  F034         	movff	begin@stufftoreceive,_serial_read
  5467  00147C  C08B  F035         	movff	begin@stufftoreceive+1,_serial_read+1
  5468                           
  5469                           ;FastTransfer.c: 80: maxDataAddress = maxSize / 2;
  5470  001480  C085  F01B         	movff	begin@maxSize,___awdiv@dividend
  5471  001484  6A1C               	clrf	___awdiv@dividend+1,c
  5472  001486  0E00               	movlw	0
  5473  001488  6E1E               	movwf	___awdiv@divisor+1,c
  5474  00148A  0E02               	movlw	2
  5475  00148C  6E1D               	movwf	___awdiv@divisor,c
  5476  00148E  EC1E  F009         	call	___awdiv	;wreg free
  5477  001492  501B               	movf	?___awdiv,w,c
  5478  001494  6E3E               	movwf	_maxDataAddress,c
  5479                           
  5480                           ;FastTransfer.c: 81: sendStructAddress = (unsigned char*) & ring_buffer;
  5481  001496  0E00               	movlw	low _ring_buffer
  5482  001498  6E2E               	movwf	_sendStructAddress,c
  5483  00149A  0E01               	movlw	high _ring_buffer
  5484  00149C  6E2F               	movwf	_sendStructAddress+1,c
  5485                           
  5486                           ;FastTransfer.c: 82: AKNAKsend = error;
  5487  00149E  C087  F03A         	movff	begin@error,_AKNAKsend
  5488                           
  5489                           ;FastTransfer.c: 83: alignErrorCounter = 0;
  5490  0014A2  0E00               	movlw	0
  5491  0014A4  6E27               	movwf	_alignErrorCounter+1,c
  5492  0014A6  0E00               	movlw	0
  5493  0014A8  6E26               	movwf	_alignErrorCounter,c
  5494  0014AA  0012               	return		;funcret
  5495  0014AC                     __end_of_begin:
  5496                           	opt stack 0
  5497                           tosu	equ	0xFFF
  5498                           tosh	equ	0xFFE
  5499                           tosl	equ	0xFFD
  5500                           pclath	equ	0xFFA
  5501                           tblptru	equ	0xFF8
  5502                           tblptrh	equ	0xFF7
  5503                           tblptrl	equ	0xFF6
  5504                           tablat	equ	0xFF5
  5505                           prodh	equ	0xFF4
  5506                           prodl	equ	0xFF3
  5507                           intcon	equ	0xFF2
  5508                           postinc0	equ	0xFEE
  5509                           wreg	equ	0xFE8
  5510                           indf2	equ	0xFDF
  5511                           postinc2	equ	0xFDE
  5512                           postdec2	equ	0xFDD
  5513                           plusw2	equ	0xFDB
  5514                           fsr2h	equ	0xFDA
  5515                           fsr2l	equ	0xFD9
  5516                           status	equ	0xFD8
  5517                           
  5518 ;; *************** function ___awdiv *****************
  5519 ;; Defined at:
  5520 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  5521 ;; Parameters:    Size  Location     Type
  5522 ;;  dividend        2   26[COMRAM] int 
  5523 ;;  divisor         2   28[COMRAM] int 
  5524 ;; Auto vars:     Size  Location     Type
  5525 ;;  quotient        2   32[COMRAM] int 
  5526 ;;  sign            1   31[COMRAM] unsigned char 
  5527 ;;  counter         1   30[COMRAM] unsigned char 
  5528 ;; Return value:  Size  Location     Type
  5529 ;;                  2   26[COMRAM] int 
  5530 ;; Registers used:
  5531 ;;		wreg, status,2, status,0
  5532 ;; Tracked objects:
  5533 ;;		On entry : 0/0
  5534 ;;		On exit  : 0/0
  5535 ;;		Unchanged: 0/0
  5536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5537 ;;      Params:         4       0       0       0       0       0       0
  5538 ;;      Locals:         4       0       0       0       0       0       0
  5539 ;;      Temps:          0       0       0       0       0       0       0
  5540 ;;      Totals:         8       0       0       0       0       0       0
  5541 ;;Total ram usage:        8 bytes
  5542 ;; Hardware stack levels used:    1
  5543 ;; Hardware stack levels required when called:    4
  5544 ;; This function calls:
  5545 ;;		Nothing
  5546 ;; This function is called by:
  5547 ;;		_begin
  5548 ;; This function uses a non-reentrant model
  5549 ;;
  5550                           
  5551                           	psect	text31
  5552  00123C                     __ptext31:
  5553                           	opt stack 0
  5554  00123C                     ___awdiv:
  5555                           	opt stack 23
  5556                           
  5557                           ;incstack = 0
  5558  00123C  0E00               	movlw	0
  5559  00123E  6E20               	movwf	___awdiv@sign,c
  5560  001240  AE1E               	btfss	___awdiv@divisor+1,7,c
  5561  001242  D006               	goto	l1937
  5562  001244  6C1D               	negf	___awdiv@divisor,c
  5563  001246  1E1E               	comf	___awdiv@divisor+1,f,c
  5564  001248  B0D8               	btfsc	status,0,c
  5565  00124A  2A1E               	incf	___awdiv@divisor+1,f,c
  5566  00124C  0E01               	movlw	1
  5567  00124E  6E20               	movwf	___awdiv@sign,c
  5568  001250                     l1937:
  5569  001250  AE1C               	btfss	___awdiv@dividend+1,7,c
  5570  001252  D006               	goto	l1943
  5571  001254  6C1B               	negf	___awdiv@dividend,c
  5572  001256  1E1C               	comf	___awdiv@dividend+1,f,c
  5573  001258  B0D8               	btfsc	status,0,c
  5574  00125A  2A1C               	incf	___awdiv@dividend+1,f,c
  5575  00125C  0E01               	movlw	1
  5576  00125E  1A20               	xorwf	___awdiv@sign,f,c
  5577  001260                     l1943:
  5578  001260  0E00               	movlw	0
  5579  001262  6E22               	movwf	___awdiv@quotient+1,c
  5580  001264  0E00               	movlw	0
  5581  001266  6E21               	movwf	___awdiv@quotient,c
  5582  001268  501D               	movf	___awdiv@divisor,w,c
  5583  00126A  101E               	iorwf	___awdiv@divisor+1,w,c
  5584  00126C  B4D8               	btfsc	status,2,c
  5585  00126E  D01C               	goto	l1965
  5586  001270  0E01               	movlw	1
  5587  001272  6E1F               	movwf	___awdiv@counter,c
  5588  001274  D004               	goto	l1951
  5589  001276                     l1949:
  5590  001276  90D8               	bcf	status,0,c
  5591  001278  361D               	rlcf	___awdiv@divisor,f,c
  5592  00127A  361E               	rlcf	___awdiv@divisor+1,f,c
  5593  00127C  2A1F               	incf	___awdiv@counter,f,c
  5594  00127E                     l1951:
  5595  00127E  AE1E               	btfss	___awdiv@divisor+1,7,c
  5596  001280  D7FA               	goto	l1949
  5597  001282                     l1953:
  5598  001282  90D8               	bcf	status,0,c
  5599  001284  3621               	rlcf	___awdiv@quotient,f,c
  5600  001286  3622               	rlcf	___awdiv@quotient+1,f,c
  5601  001288  501D               	movf	___awdiv@divisor,w,c
  5602  00128A  5C1B               	subwf	___awdiv@dividend,w,c
  5603  00128C  501E               	movf	___awdiv@divisor+1,w,c
  5604  00128E  581C               	subwfb	___awdiv@dividend+1,w,c
  5605  001290  A0D8               	btfss	status,0,c
  5606  001292  D005               	goto	l1961
  5607  001294  501D               	movf	___awdiv@divisor,w,c
  5608  001296  5E1B               	subwf	___awdiv@dividend,f,c
  5609  001298  501E               	movf	___awdiv@divisor+1,w,c
  5610  00129A  5A1C               	subwfb	___awdiv@dividend+1,f,c
  5611  00129C  8021               	bsf	___awdiv@quotient,0,c
  5612  00129E                     l1961:
  5613  00129E  90D8               	bcf	status,0,c
  5614  0012A0  321E               	rrcf	___awdiv@divisor+1,f,c
  5615  0012A2  321D               	rrcf	___awdiv@divisor,f,c
  5616  0012A4  2E1F               	decfsz	___awdiv@counter,f,c
  5617  0012A6  D7ED               	goto	l1953
  5618  0012A8                     l1965:
  5619  0012A8  5020               	movf	___awdiv@sign,w,c
  5620  0012AA  B4D8               	btfsc	status,2,c
  5621  0012AC  D004               	goto	l1969
  5622  0012AE  6C21               	negf	___awdiv@quotient,c
  5623  0012B0  1E22               	comf	___awdiv@quotient+1,f,c
  5624  0012B2  B0D8               	btfsc	status,0,c
  5625  0012B4  2A22               	incf	___awdiv@quotient+1,f,c
  5626  0012B6                     l1969:
  5627  0012B6  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  5628  0012BA  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  5629  0012BE  0012               	return	
  5630  0012C0                     __end_of___awdiv:
  5631                           	opt stack 0
  5632                           tosu	equ	0xFFF
  5633                           tosh	equ	0xFFE
  5634                           tosl	equ	0xFFD
  5635                           pclath	equ	0xFFA
  5636                           tblptru	equ	0xFF8
  5637                           tblptrh	equ	0xFF7
  5638                           tblptrl	equ	0xFF6
  5639                           tablat	equ	0xFF5
  5640                           prodh	equ	0xFF4
  5641                           prodl	equ	0xFF3
  5642                           intcon	equ	0xFF2
  5643                           postinc0	equ	0xFEE
  5644                           wreg	equ	0xFE8
  5645                           indf2	equ	0xFDF
  5646                           postinc2	equ	0xFDE
  5647                           postdec2	equ	0xFDD
  5648                           plusw2	equ	0xFDB
  5649                           fsr2h	equ	0xFDA
  5650                           fsr2l	equ	0xFD9
  5651                           status	equ	0xFD8
  5652                           
  5653 ;; *************** function _EUSART1_Initialize *****************
  5654 ;; Defined at:
  5655 ;;		line 21 in file "UART.c"
  5656 ;; Parameters:    Size  Location     Type
  5657 ;;		None
  5658 ;; Auto vars:     Size  Location     Type
  5659 ;;		None
  5660 ;; Return value:  Size  Location     Type
  5661 ;;                  1    wreg      void 
  5662 ;; Registers used:
  5663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5664 ;; Tracked objects:
  5665 ;;		On entry : 0/0
  5666 ;;		On exit  : 0/0
  5667 ;;		Unchanged: 0/0
  5668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5669 ;;      Params:         0       0       0       0       0       0       0
  5670 ;;      Locals:         0       0       0       0       0       0       0
  5671 ;;      Temps:          0       0       0       0       0       0       0
  5672 ;;      Totals:         0       0       0       0       0       0       0
  5673 ;;Total ram usage:        0 bytes
  5674 ;; Hardware stack levels used:    1
  5675 ;; Hardware stack levels required when called:    6
  5676 ;; This function calls:
  5677 ;;		_UART_buff_init
  5678 ;; This function is called by:
  5679 ;;		_ComStart
  5680 ;; This function uses a non-reentrant model
  5681 ;;
  5682                           
  5683                           	psect	text32
  5684  001544                     __ptext32:
  5685                           	opt stack 0
  5686  001544                     _EUSART1_Initialize:
  5687                           	opt stack 22
  5688                           
  5689                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  5690                           
  5691                           ;incstack = 0
  5692  001544  9A9D               	bcf	3997,5,c	;volatile
  5693                           
  5694                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  5695  001546  989D               	bcf	3997,4,c	;volatile
  5696                           
  5697                           ;UART.c: 29: BAUD1CON = 0x48;
  5698  001548  0E48               	movlw	72
  5699  00154A  6EB8               	movwf	4024,c	;volatile
  5700                           
  5701                           ;UART.c: 32: RC1STA = 0x98;
  5702  00154C  0E98               	movlw	152
  5703  00154E  6EAB               	movwf	4011,c	;volatile
  5704                           
  5705                           ;UART.c: 35: TX1STA = 0x26;
  5706  001550  0E26               	movlw	38
  5707  001552  6EAC               	movwf	4012,c	;volatile
  5708                           
  5709                           ;UART.c: 38: SPBRG1 = (((16000000/38400)/4)-1);
  5710  001554  0E67               	movlw	103
  5711  001556  6EAF               	movwf	4015,c	;volatile
  5712                           
  5713                           ;UART.c: 41: SPBRGH1 = 0x00;
  5714  001558  0E00               	movlw	0
  5715  00155A  6EB0               	movwf	4016,c	;volatile
  5716                           
  5717                           ;UART.c: 44: TXREG1 = 0x00;
  5718  00155C  0E00               	movlw	0
  5719  00155E  6EAD               	movwf	4013,c	;volatile
  5720                           
  5721                           ;UART.c: 47: RCREG1 = 0x00;
  5722  001560  0E00               	movlw	0
  5723  001562  6EAE               	movwf	4014,c	;volatile
  5724                           
  5725                           ;UART.c: 49: UART_buff_init(&input_buffer);
  5726  001564  0E00               	movlw	low _input_buffer
  5727  001566  6E23               	movwf	UART_buff_init@_this,c
  5728  001568  0E03               	movlw	high _input_buffer
  5729  00156A  6E24               	movwf	UART_buff_init@_this+1,c
  5730  00156C  ECA6  F00B         	call	_UART_buff_init	;wreg free
  5731                           
  5732                           ;UART.c: 50: UART_buff_init(&output_buffer);
  5733  001570  0E00               	movlw	low _output_buffer
  5734  001572  6E23               	movwf	UART_buff_init@_this,c
  5735  001574  0E04               	movlw	high _output_buffer
  5736  001576  6E24               	movwf	UART_buff_init@_this+1,c
  5737  001578  ECA6  F00B         	call	_UART_buff_init	;wreg free
  5738                           
  5739                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  5740  00157C  8A9D               	bsf	3997,5,c	;volatile
  5741  00157E  0012               	return		;funcret
  5742  001580                     __end_of_EUSART1_Initialize:
  5743                           	opt stack 0
  5744                           tosu	equ	0xFFF
  5745                           tosh	equ	0xFFE
  5746                           tosl	equ	0xFFD
  5747                           pclath	equ	0xFFA
  5748                           tblptru	equ	0xFF8
  5749                           tblptrh	equ	0xFF7
  5750                           tblptrl	equ	0xFF6
  5751                           tablat	equ	0xFF5
  5752                           prodh	equ	0xFF4
  5753                           prodl	equ	0xFF3
  5754                           intcon	equ	0xFF2
  5755                           postinc0	equ	0xFEE
  5756                           wreg	equ	0xFE8
  5757                           indf2	equ	0xFDF
  5758                           postinc2	equ	0xFDE
  5759                           postdec2	equ	0xFDD
  5760                           plusw2	equ	0xFDB
  5761                           fsr2h	equ	0xFDA
  5762                           fsr2l	equ	0xFD9
  5763                           status	equ	0xFD8
  5764                           
  5765 ;; *************** function _UART_buff_init *****************
  5766 ;; Defined at:
  5767 ;;		line 56 in file "UART.c"
  5768 ;; Parameters:    Size  Location     Type
  5769 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  5770 ;;		 -> output_buffer(206), input_buffer(206), 
  5771 ;; Auto vars:     Size  Location     Type
  5772 ;;		None
  5773 ;; Return value:  Size  Location     Type
  5774 ;;                  1    wreg      void 
  5775 ;; Registers used:
  5776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5777 ;; Tracked objects:
  5778 ;;		On entry : 0/0
  5779 ;;		On exit  : 0/0
  5780 ;;		Unchanged: 0/0
  5781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5782 ;;      Params:         2       0       0       0       0       0       0
  5783 ;;      Locals:         0       0       0       0       0       0       0
  5784 ;;      Temps:          0       0       0       0       0       0       0
  5785 ;;      Totals:         2       0       0       0       0       0       0
  5786 ;;Total ram usage:        2 bytes
  5787 ;; Hardware stack levels used:    1
  5788 ;; Hardware stack levels required when called:    5
  5789 ;; This function calls:
  5790 ;;		_memset
  5791 ;; This function is called by:
  5792 ;;		_EUSART1_Initialize
  5793 ;; This function uses a non-reentrant model
  5794 ;;
  5795                           
  5796                           	psect	text33
  5797  00174C                     __ptext33:
  5798                           	opt stack 0
  5799  00174C                     _UART_buff_init:
  5800                           	opt stack 22
  5801                           
  5802                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  5803                           
  5804                           ;incstack = 0
  5805  00174C  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  5806  001750  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  5807  001754  0E00               	movlw	0
  5808  001756  6E1E               	movwf	memset@c+1,c
  5809  001758  0E00               	movlw	0
  5810  00175A  6E1D               	movwf	memset@c,c
  5811  00175C  0E00               	movlw	0
  5812  00175E  6E20               	movwf	memset@n+1,c
  5813  001760  0ECE               	movlw	206
  5814  001762  6E1F               	movwf	memset@n,c
  5815  001764  EC21  F00B         	call	_memset	;wreg free
  5816  001768  0012               	return		;funcret
  5817  00176A                     __end_of_UART_buff_init:
  5818                           	opt stack 0
  5819                           tosu	equ	0xFFF
  5820                           tosh	equ	0xFFE
  5821                           tosl	equ	0xFFD
  5822                           pclath	equ	0xFFA
  5823                           tblptru	equ	0xFF8
  5824                           tblptrh	equ	0xFF7
  5825                           tblptrl	equ	0xFF6
  5826                           tablat	equ	0xFF5
  5827                           prodh	equ	0xFF4
  5828                           prodl	equ	0xFF3
  5829                           intcon	equ	0xFF2
  5830                           postinc0	equ	0xFEE
  5831                           wreg	equ	0xFE8
  5832                           indf2	equ	0xFDF
  5833                           postinc2	equ	0xFDE
  5834                           postdec2	equ	0xFDD
  5835                           plusw2	equ	0xFDB
  5836                           fsr2h	equ	0xFDA
  5837                           fsr2l	equ	0xFD9
  5838                           status	equ	0xFD8
  5839                           
  5840 ;; *************** function _memset *****************
  5841 ;; Defined at:
  5842 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;  p1              2   26[COMRAM] PTR void 
  5845 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  5846 ;;  c               2   28[COMRAM] int 
  5847 ;;  n               2   30[COMRAM] unsigned int 
  5848 ;; Auto vars:     Size  Location     Type
  5849 ;;  p               2   32[COMRAM] PTR unsigned char 
  5850 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  5851 ;; Return value:  Size  Location     Type
  5852 ;;                  2   26[COMRAM] PTR void 
  5853 ;; Registers used:
  5854 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5855 ;; Tracked objects:
  5856 ;;		On entry : 0/0
  5857 ;;		On exit  : 0/0
  5858 ;;		Unchanged: 0/0
  5859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5860 ;;      Params:         6       0       0       0       0       0       0
  5861 ;;      Locals:         2       0       0       0       0       0       0
  5862 ;;      Temps:          0       0       0       0       0       0       0
  5863 ;;      Totals:         8       0       0       0       0       0       0
  5864 ;;Total ram usage:        8 bytes
  5865 ;; Hardware stack levels used:    1
  5866 ;; Hardware stack levels required when called:    4
  5867 ;; This function calls:
  5868 ;;		Nothing
  5869 ;; This function is called by:
  5870 ;;		_FastTransfer_buffer_flush
  5871 ;;		_UART_buff_init
  5872 ;;		_UART_buff_flush
  5873 ;; This function uses a non-reentrant model
  5874 ;;
  5875                           
  5876                           	psect	text34
  5877  001642                     __ptext34:
  5878                           	opt stack 0
  5879  001642                     _memset:
  5880                           	opt stack 22
  5881                           
  5882                           ;incstack = 0
  5883  001642  C01B  F021         	movff	memset@p1,memset@p
  5884  001646  C01C  F022         	movff	memset@p1+1,memset@p+1
  5885  00164A  D008               	goto	l2413
  5886  00164C                     l2409:
  5887  00164C  C021  FFD9         	movff	memset@p,fsr2l
  5888  001650  C022  FFDA         	movff	memset@p+1,fsr2h
  5889  001654  C01D  FFDF         	movff	memset@c,indf2
  5890  001658  4A21               	infsnz	memset@p,f,c
  5891  00165A  2A22               	incf	memset@p+1,f,c
  5892  00165C                     l2413:
  5893  00165C  061F               	decf	memset@n,f,c
  5894  00165E  A0D8               	btfss	status,0,c
  5895  001660  0620               	decf	memset@n+1,f,c
  5896  001662  281F               	incf	memset@n,w,c
  5897  001664  E1F3               	bnz	l2409
  5898  001666  2820               	incf	memset@n+1,w,c
  5899  001668  B4D8               	btfsc	status,2,c
  5900  00166A  0012               	return	
  5901  00166C  D7EF               	goto	l2409
  5902  00166E                     __end_of_memset:
  5903                           	opt stack 0
  5904                           tosu	equ	0xFFF
  5905                           tosh	equ	0xFFE
  5906                           tosl	equ	0xFFD
  5907                           pclath	equ	0xFFA
  5908                           tblptru	equ	0xFF8
  5909                           tblptrh	equ	0xFF7
  5910                           tblptrl	equ	0xFF6
  5911                           tablat	equ	0xFF5
  5912                           prodh	equ	0xFF4
  5913                           prodl	equ	0xFF3
  5914                           intcon	equ	0xFF2
  5915                           postinc0	equ	0xFEE
  5916                           wreg	equ	0xFE8
  5917                           indf2	equ	0xFDF
  5918                           postinc2	equ	0xFDE
  5919                           postdec2	equ	0xFDD
  5920                           plusw2	equ	0xFDB
  5921                           fsr2h	equ	0xFDA
  5922                           fsr2l	equ	0xFD9
  5923                           status	equ	0xFD8
  5924                           
  5925 ;; *************** function _SetTime *****************
  5926 ;; Defined at:
  5927 ;;		line 98 in file "tmr0.c"
  5928 ;; Parameters:    Size  Location     Type
  5929 ;;		None
  5930 ;; Auto vars:     Size  Location     Type
  5931 ;;		None
  5932 ;; Return value:  Size  Location     Type
  5933 ;;                  1    wreg      void 
  5934 ;; Registers used:
  5935 ;;		wreg, status,2
  5936 ;; Tracked objects:
  5937 ;;		On entry : 0/0
  5938 ;;		On exit  : 0/0
  5939 ;;		Unchanged: 0/0
  5940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5941 ;;      Params:         0       0       0       0       0       0       0
  5942 ;;      Locals:         0       0       0       0       0       0       0
  5943 ;;      Temps:          0       0       0       0       0       0       0
  5944 ;;      Totals:         0       0       0       0       0       0       0
  5945 ;;Total ram usage:        0 bytes
  5946 ;; Hardware stack levels used:    1
  5947 ;; Hardware stack levels required when called:    4
  5948 ;; This function calls:
  5949 ;;		Nothing
  5950 ;; This function is called by:
  5951 ;;		_main
  5952 ;; This function uses a non-reentrant model
  5953 ;;
  5954                           
  5955                           	psect	text35
  5956  001812                     __ptext35:
  5957                           	opt stack 0
  5958  001812                     _SetTime:
  5959                           	opt stack 26
  5960                           
  5961                           ;tmr0.c: 99: time = 0;
  5962                           
  5963                           ;incstack = 0
  5964  001812  0E00               	movlw	0
  5965  001814  0100               	movlb	0	; () banked
  5966  001816  6F60               	movwf	_time& (0+255),b
  5967  001818  0E00               	movlw	0
  5968  00181A  6F61               	movwf	(_time+1)& (0+255),b
  5969  00181C  0E00               	movlw	0
  5970  00181E  6F62               	movwf	(_time+2)& (0+255),b
  5971  001820  0E00               	movlw	0
  5972  001822  6F63               	movwf	(_time+3)& (0+255),b
  5973                           
  5974                           ; BSR set to: 0
  5975  001824  0012               	return		;funcret
  5976  001826                     __end_of_SetTime:
  5977                           	opt stack 0
  5978                           tosu	equ	0xFFF
  5979                           tosh	equ	0xFFE
  5980                           tosl	equ	0xFFD
  5981                           pclath	equ	0xFFA
  5982                           tblptru	equ	0xFF8
  5983                           tblptrh	equ	0xFF7
  5984                           tblptrl	equ	0xFF6
  5985                           tablat	equ	0xFF5
  5986                           prodh	equ	0xFF4
  5987                           prodl	equ	0xFF3
  5988                           intcon	equ	0xFF2
  5989                           postinc0	equ	0xFEE
  5990                           wreg	equ	0xFE8
  5991                           indf2	equ	0xFDF
  5992                           postinc2	equ	0xFDE
  5993                           postdec2	equ	0xFDD
  5994                           plusw2	equ	0xFDB
  5995                           fsr2h	equ	0xFDA
  5996                           fsr2l	equ	0xFD9
  5997                           status	equ	0xFD8
  5998                           
  5999 ;; *************** function _ReadFaults *****************
  6000 ;; Defined at:
  6001 ;;		line 9 in file "Function.c"
  6002 ;; Parameters:    Size  Location     Type
  6003 ;;		None
  6004 ;; Auto vars:     Size  Location     Type
  6005 ;;		None
  6006 ;; Return value:  Size  Location     Type
  6007 ;;                  1    wreg      void 
  6008 ;; Registers used:
  6009 ;;		wreg, status,2, status,0
  6010 ;; Tracked objects:
  6011 ;;		On entry : 0/0
  6012 ;;		On exit  : 0/0
  6013 ;;		Unchanged: 0/0
  6014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6015 ;;      Params:         0       0       0       0       0       0       0
  6016 ;;      Locals:         0       0       0       0       0       0       0
  6017 ;;      Temps:          1       0       0       0       0       0       0
  6018 ;;      Totals:         1       0       0       0       0       0       0
  6019 ;;Total ram usage:        1 bytes
  6020 ;; Hardware stack levels used:    1
  6021 ;; Hardware stack levels required when called:    4
  6022 ;; This function calls:
  6023 ;;		Nothing
  6024 ;; This function is called by:
  6025 ;;		_main
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029                           	psect	text36
  6030  000E8E                     __ptext36:
  6031                           	opt stack 0
  6032  000E8E                     _ReadFaults:
  6033                           	opt stack 26
  6034                           
  6035                           ;Function.c: 10: ByteHigh = ByteHigh | (PORTCbits.RC5 << 0);
  6036                           
  6037                           ; BSR set to: 0
  6038                           ;incstack = 0
  6039  000E8E  AA82               	btfss	3970,5,c	;volatile
  6040  000E90  D002               	goto	u1010
  6041  000E92  0E01               	movlw	1
  6042  000E94  D001               	goto	u1016
  6043  000E96                     u1010:
  6044  000E96  0E00               	movlw	0
  6045  000E98                     u1016:
  6046  000E98  103B               	iorwf	_ByteHigh,w,c
  6047  000E9A  6E3B               	movwf	_ByteHigh,c
  6048                           
  6049                           ;Function.c: 11: ByteHigh = ByteHigh | (PORTCbits.RC4 << 1);
  6050  000E9C  A882               	btfss	3970,4,c	;volatile
  6051  000E9E  D003               	goto	u1020
  6052  000EA0  6A1B               	clrf	??_ReadFaults& (0+255),c
  6053  000EA2  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6054  000EA4  D001               	goto	u1028
  6055  000EA6                     u1020:
  6056  000EA6  6A1B               	clrf	??_ReadFaults& (0+255),c
  6057  000EA8                     u1028:
  6058  000EA8  90D8               	bcf	status,0,c
  6059  000EAA  341B               	rlcf	??_ReadFaults,w,c
  6060  000EAC  103B               	iorwf	_ByteHigh,w,c
  6061  000EAE  6E3B               	movwf	_ByteHigh,c
  6062                           
  6063                           ;Function.c: 12: ByteHigh = ByteHigh | (PORTDbits.RD3 << 2);
  6064  000EB0  A683               	btfss	3971,3,c	;volatile
  6065  000EB2  D003               	goto	u1030
  6066  000EB4  6A1B               	clrf	??_ReadFaults& (0+255),c
  6067  000EB6  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6068  000EB8  D001               	goto	u1038
  6069  000EBA                     u1030:
  6070  000EBA  6A1B               	clrf	??_ReadFaults& (0+255),c
  6071  000EBC                     u1038:
  6072  000EBC  90D8               	bcf	status,0,c
  6073  000EBE  361B               	rlcf	??_ReadFaults,f,c
  6074  000EC0  90D8               	bcf	status,0,c
  6075  000EC2  341B               	rlcf	??_ReadFaults,w,c
  6076  000EC4  103B               	iorwf	_ByteHigh,w,c
  6077  000EC6  6E3B               	movwf	_ByteHigh,c
  6078                           
  6079                           ;Function.c: 13: ByteHigh = ByteHigh | (PORTDbits.RD2 << 3);
  6080  000EC8  A483               	btfss	3971,2,c	;volatile
  6081  000ECA  D003               	goto	u1040
  6082  000ECC  6A1B               	clrf	??_ReadFaults& (0+255),c
  6083  000ECE  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6084  000ED0  D001               	goto	u1048
  6085  000ED2                     u1040:
  6086  000ED2  6A1B               	clrf	??_ReadFaults& (0+255),c
  6087  000ED4                     u1048:
  6088  000ED4  90D8               	bcf	status,0,c
  6089  000ED6  361B               	rlcf	??_ReadFaults,f,c
  6090  000ED8  90D8               	bcf	status,0,c
  6091  000EDA  361B               	rlcf	??_ReadFaults,f,c
  6092  000EDC  90D8               	bcf	status,0,c
  6093  000EDE  341B               	rlcf	??_ReadFaults,w,c
  6094  000EE0  103B               	iorwf	_ByteHigh,w,c
  6095  000EE2  6E3B               	movwf	_ByteHigh,c
  6096                           
  6097                           ;Function.c: 14: ByteHigh = ByteHigh | (PORTDbits.RD1 << 4);
  6098  000EE4  A283               	btfss	3971,1,c	;volatile
  6099  000EE6  D003               	goto	u1050
  6100  000EE8  6A1B               	clrf	??_ReadFaults& (0+255),c
  6101  000EEA  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6102  000EEC  D001               	goto	u1058
  6103  000EEE                     u1050:
  6104  000EEE  6A1B               	clrf	??_ReadFaults& (0+255),c
  6105  000EF0                     u1058:
  6106  000EF0  381B               	swapf	??_ReadFaults,w,c
  6107  000EF2  0BF0               	andlw	240
  6108  000EF4  103B               	iorwf	_ByteHigh,w,c
  6109  000EF6  6E3B               	movwf	_ByteHigh,c
  6110                           
  6111                           ;Function.c: 15: ByteHigh = ByteHigh | (PORTDbits.RD0 << 5);
  6112  000EF8  A083               	btfss	3971,0,c	;volatile
  6113  000EFA  D003               	goto	u1060
  6114  000EFC  0E20               	movlw	32
  6115  000EFE  6E1B               	movwf	??_ReadFaults& (0+255),c
  6116  000F00  D001               	goto	u1075
  6117  000F02                     u1060:
  6118  000F02  6A1B               	clrf	??_ReadFaults& (0+255),c
  6119  000F04                     u1075:
  6120  000F04  501B               	movf	??_ReadFaults,w,c
  6121  000F06  103B               	iorwf	_ByteHigh,w,c
  6122  000F08  6E3B               	movwf	_ByteHigh,c
  6123                           
  6124                           ;Function.c: 16: ByteHigh = ByteHigh | (PORTCbits.RC3 << 6);
  6125  000F0A  A682               	btfss	3970,3,c	;volatile
  6126  000F0C  D003               	goto	u1080
  6127  000F0E  0E40               	movlw	64
  6128  000F10  6E1B               	movwf	??_ReadFaults& (0+255),c
  6129  000F12  D001               	goto	u1095
  6130  000F14                     u1080:
  6131  000F14  6A1B               	clrf	??_ReadFaults& (0+255),c
  6132  000F16                     u1095:
  6133  000F16  501B               	movf	??_ReadFaults,w,c
  6134  000F18  103B               	iorwf	_ByteHigh,w,c
  6135  000F1A  6E3B               	movwf	_ByteHigh,c
  6136                           
  6137                           ;Function.c: 17: ByteHigh = ByteHigh | (PORTCbits.RC2 << 7);
  6138  000F1C  A482               	btfss	3970,2,c	;volatile
  6139  000F1E  D003               	goto	u1100
  6140  000F20  0E80               	movlw	128
  6141  000F22  6E1B               	movwf	??_ReadFaults& (0+255),c
  6142  000F24  D001               	goto	u1115
  6143  000F26                     u1100:
  6144  000F26  6A1B               	clrf	??_ReadFaults& (0+255),c
  6145  000F28                     u1115:
  6146  000F28  501B               	movf	??_ReadFaults,w,c
  6147  000F2A  103B               	iorwf	_ByteHigh,w,c
  6148  000F2C  6E3B               	movwf	_ByteHigh,c
  6149                           
  6150                           ;Function.c: 18: ByteLow = ByteLow | (PORTCbits.RC1 << 0);
  6151  000F2E  A282               	btfss	3970,1,c	;volatile
  6152  000F30  D002               	goto	u1120
  6153  000F32  0E01               	movlw	1
  6154  000F34  D001               	goto	u1126
  6155  000F36                     u1120:
  6156  000F36  0E00               	movlw	0
  6157  000F38                     u1126:
  6158  000F38  103C               	iorwf	_ByteLow,w,c
  6159  000F3A  6E3C               	movwf	_ByteLow,c
  6160                           
  6161                           ;Function.c: 19: ByteLow = ByteLow | (PORTAbits.RA7 << 1);
  6162  000F3C  AE80               	btfss	3968,7,c	;volatile
  6163  000F3E  D003               	goto	u1130
  6164  000F40  6A1B               	clrf	??_ReadFaults& (0+255),c
  6165  000F42  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6166  000F44  D001               	goto	u1138
  6167  000F46                     u1130:
  6168  000F46  6A1B               	clrf	??_ReadFaults& (0+255),c
  6169  000F48                     u1138:
  6170  000F48  90D8               	bcf	status,0,c
  6171  000F4A  341B               	rlcf	??_ReadFaults,w,c
  6172  000F4C  103C               	iorwf	_ByteLow,w,c
  6173  000F4E  6E3C               	movwf	_ByteLow,c
  6174                           
  6175                           ;Function.c: 20: ByteLow = ByteLow | (PORTCbits.RC0 << 2);
  6176  000F50  A082               	btfss	3970,0,c	;volatile
  6177  000F52  D003               	goto	u1140
  6178  000F54  6A1B               	clrf	??_ReadFaults& (0+255),c
  6179  000F56  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6180  000F58  D001               	goto	u1148
  6181  000F5A                     u1140:
  6182  000F5A  6A1B               	clrf	??_ReadFaults& (0+255),c
  6183  000F5C                     u1148:
  6184  000F5C  90D8               	bcf	status,0,c
  6185  000F5E  361B               	rlcf	??_ReadFaults,f,c
  6186  000F60  90D8               	bcf	status,0,c
  6187  000F62  341B               	rlcf	??_ReadFaults,w,c
  6188  000F64  103C               	iorwf	_ByteLow,w,c
  6189  000F66  6E3C               	movwf	_ByteLow,c
  6190  000F68  0012               	return		;funcret
  6191  000F6A                     __end_of_ReadFaults:
  6192                           	opt stack 0
  6193                           tosu	equ	0xFFF
  6194                           tosh	equ	0xFFE
  6195                           tosl	equ	0xFFD
  6196                           pclath	equ	0xFFA
  6197                           tblptru	equ	0xFF8
  6198                           tblptrh	equ	0xFF7
  6199                           tblptrl	equ	0xFF6
  6200                           tablat	equ	0xFF5
  6201                           prodh	equ	0xFF4
  6202                           prodl	equ	0xFF3
  6203                           intcon	equ	0xFF2
  6204                           postinc0	equ	0xFEE
  6205                           wreg	equ	0xFE8
  6206                           indf2	equ	0xFDF
  6207                           postinc2	equ	0xFDE
  6208                           postdec2	equ	0xFDD
  6209                           plusw2	equ	0xFDB
  6210                           fsr2h	equ	0xFDA
  6211                           fsr2l	equ	0xFD9
  6212                           status	equ	0xFD8
  6213                           
  6214 ;; *************** function _GetTime *****************
  6215 ;; Defined at:
  6216 ;;		line 94 in file "tmr0.c"
  6217 ;; Parameters:    Size  Location     Type
  6218 ;;		None
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;		None
  6221 ;; Return value:  Size  Location     Type
  6222 ;;                  4   26[COMRAM] long 
  6223 ;; Registers used:
  6224 ;;		None
  6225 ;; Tracked objects:
  6226 ;;		On entry : 0/0
  6227 ;;		On exit  : 0/0
  6228 ;;		Unchanged: 0/0
  6229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6230 ;;      Params:         4       0       0       0       0       0       0
  6231 ;;      Locals:         0       0       0       0       0       0       0
  6232 ;;      Temps:          0       0       0       0       0       0       0
  6233 ;;      Totals:         4       0       0       0       0       0       0
  6234 ;;Total ram usage:        4 bytes
  6235 ;; Hardware stack levels used:    1
  6236 ;; Hardware stack levels required when called:    4
  6237 ;; This function calls:
  6238 ;;		Nothing
  6239 ;; This function is called by:
  6240 ;;		_main
  6241 ;; This function uses a non-reentrant model
  6242 ;;
  6243                           
  6244                           	psect	text37
  6245  001826                     __ptext37:
  6246                           	opt stack 0
  6247  001826                     _GetTime:
  6248                           	opt stack 26
  6249                           
  6250                           ;tmr0.c: 95: return time;
  6251                           
  6252                           ;incstack = 0
  6253  001826  C060  F01B         	movff	_time,?_GetTime
  6254  00182A  C061  F01C         	movff	_time+1,?_GetTime+1
  6255  00182E  C062  F01D         	movff	_time+2,?_GetTime+2
  6256  001832  C063  F01E         	movff	_time+3,?_GetTime+3
  6257  001836  0012               	return		;funcret
  6258  001838                     __end_of_GetTime:
  6259                           	opt stack 0
  6260                           tosu	equ	0xFFF
  6261                           tosh	equ	0xFFE
  6262                           tosl	equ	0xFFD
  6263                           pclath	equ	0xFFA
  6264                           tblptru	equ	0xFF8
  6265                           tblptrh	equ	0xFF7
  6266                           tblptrl	equ	0xFF6
  6267                           tablat	equ	0xFF5
  6268                           prodh	equ	0xFF4
  6269                           prodl	equ	0xFF3
  6270                           intcon	equ	0xFF2
  6271                           postinc0	equ	0xFEE
  6272                           wreg	equ	0xFE8
  6273                           indf2	equ	0xFDF
  6274                           postinc2	equ	0xFDE
  6275                           postdec2	equ	0xFDD
  6276                           plusw2	equ	0xFDB
  6277                           fsr2h	equ	0xFDA
  6278                           fsr2l	equ	0xFD9
  6279                           status	equ	0xFD8
  6280                           
  6281 ;; *************** function _INTERRUPT_InterruptManager *****************
  6282 ;; Defined at:
  6283 ;;		line 177 in file "Function.c"
  6284 ;; Parameters:    Size  Location     Type
  6285 ;;		None
  6286 ;; Auto vars:     Size  Location     Type
  6287 ;;		None
  6288 ;; Return value:  Size  Location     Type
  6289 ;;                  1    wreg      void 
  6290 ;; Registers used:
  6291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6292 ;; Tracked objects:
  6293 ;;		On entry : 0/0
  6294 ;;		On exit  : 0/0
  6295 ;;		Unchanged: 0/0
  6296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6297 ;;      Params:         0       0       0       0       0       0       0
  6298 ;;      Locals:         0       0       0       0       0       0       0
  6299 ;;      Temps:         14       0       0       0       0       0       0
  6300 ;;      Totals:        14       0       0       0       0       0       0
  6301 ;;Total ram usage:       14 bytes
  6302 ;; Hardware stack levels used:    1
  6303 ;; Hardware stack levels required when called:    3
  6304 ;; This function calls:
  6305 ;;		_EUSART1_Receive_ISR
  6306 ;;		_EUSART1_Transmit_ISR
  6307 ;;		_TMR0_ISR
  6308 ;; This function is called by:
  6309 ;;		Interrupt level 2
  6310 ;; This function uses a non-reentrant model
  6311 ;;
  6312                           
  6313                           	psect	intcode
  6314  000008                     __pintcode:
  6315                           	opt stack 0
  6316  000008                     _INTERRUPT_InterruptManager:
  6317                           	opt stack 21
  6318                           
  6319                           ;incstack = 0
  6320  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6321  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  6322  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6323  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6324  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6325  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6326  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6327  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6328  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6329  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6330  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6331  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6332  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6333  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6334  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6335                           
  6336                           ;Function.c: 180: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  6337  000042  BA9D               	btfsc	3997,5,c	;volatile
  6338  000044  AA9E               	btfss	3998,5,c	;volatile
  6339  000046  D003               	goto	i2l453
  6340                           
  6341                           ;Function.c: 181: {
  6342                           ;Function.c: 182: EUSART1_Receive_ISR();
  6343  000048  ECB5  F00B         	call	_EUSART1_Receive_ISR	;wreg free
  6344                           
  6345                           ;Function.c: 183: }
  6346  00004C  D00B               	goto	i2l459
  6347  00004E                     i2l453:
  6348                           
  6349                           ;Function.c: 184: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  6350  00004E  B89D               	btfsc	3997,4,c	;volatile
  6351  000050  A89E               	btfss	3998,4,c	;volatile
  6352  000052  D003               	goto	i2l455
  6353                           
  6354                           ;Function.c: 185: {
  6355                           ;Function.c: 186: EUSART1_Transmit_ISR();
  6356  000054  ECDA  F00A         	call	_EUSART1_Transmit_ISR	;wreg free
  6357                           
  6358                           ;Function.c: 187: }
  6359  000058  D005               	goto	i2l459
  6360  00005A                     i2l455:
  6361                           
  6362                           ;Function.c: 188: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  6363  00005A  BAF2               	btfsc	intcon,5,c	;volatile
  6364  00005C  A4F2               	btfss	intcon,2,c	;volatile
  6365  00005E  D002               	goto	i2l459
  6366                           
  6367                           ;Function.c: 189: {
  6368                           ;Function.c: 190: TMR0_ISR();
  6369  000060  ECC4  F00B         	call	_TMR0_ISR	;wreg free
  6370  000064                     i2l459:
  6371  000064  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6372  000068  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6373  00006C  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6374  000070  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6375  000074  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6376  000078  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6377  00007C  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6378  000080  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6379  000084  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6380  000088  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6381  00008C  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6382  000090  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6383  000094  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6384  000098  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6385  00009C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6386  00009E  0011               	retfie		f
  6387  0000A0                     __end_of_INTERRUPT_InterruptManager:
  6388                           	opt stack 0
  6389                           tosu	equ	0xFFF
  6390                           tosh	equ	0xFFE
  6391                           tosl	equ	0xFFD
  6392                           pclatu	equ	0xFFB
  6393                           pclath	equ	0xFFA
  6394                           tblptru	equ	0xFF8
  6395                           tblptrh	equ	0xFF7
  6396                           tblptrl	equ	0xFF6
  6397                           tablat	equ	0xFF5
  6398                           prodh	equ	0xFF4
  6399                           prodl	equ	0xFF3
  6400                           intcon	equ	0xFF2
  6401                           postinc0	equ	0xFEE
  6402                           fsr0h	equ	0xFEA
  6403                           fsr0l	equ	0xFE9
  6404                           wreg	equ	0xFE8
  6405                           fsr1h	equ	0xFE2
  6406                           fsr1l	equ	0xFE1
  6407                           indf2	equ	0xFDF
  6408                           postinc2	equ	0xFDE
  6409                           postdec2	equ	0xFDD
  6410                           plusw2	equ	0xFDB
  6411                           fsr2h	equ	0xFDA
  6412                           fsr2l	equ	0xFD9
  6413                           status	equ	0xFD8
  6414                           
  6415 ;; *************** function _TMR0_ISR *****************
  6416 ;; Defined at:
  6417 ;;		line 82 in file "tmr0.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;		None
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;		None
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  1    wreg      void 
  6424 ;; Registers used:
  6425 ;;		wreg, status,2, status,0
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6431 ;;      Params:         0       0       0       0       0       0       0
  6432 ;;      Locals:         0       0       0       0       0       0       0
  6433 ;;      Temps:          0       0       0       0       0       0       0
  6434 ;;      Totals:         0       0       0       0       0       0       0
  6435 ;;Total ram usage:        0 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; This function calls:
  6438 ;;		Nothing
  6439 ;; This function is called by:
  6440 ;;		_INTERRUPT_InterruptManager
  6441 ;; This function uses a non-reentrant model
  6442 ;;
  6443                           
  6444                           	psect	text39
  6445  001788                     __ptext39:
  6446                           	opt stack 0
  6447  001788                     _TMR0_ISR:
  6448                           	opt stack 23
  6449                           
  6450                           ;tmr0.c: 85: TMR0H = timer0ReloadVal16bit >> 8;
  6451                           
  6452                           ;incstack = 0
  6453  001788  5039               	movf	_timer0ReloadVal16bit+1,w,c	;volatile
  6454  00178A  6ED7               	movwf	4055,c	;volatile
  6455                           
  6456                           ;tmr0.c: 86: TMR0L = (uint8_t) timer0ReloadVal16bit;
  6457  00178C  C038  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
  6458                           
  6459                           ;tmr0.c: 88: time++;
  6460  001790  0E01               	movlw	1
  6461  001792  0100               	movlb	0	; () banked
  6462  001794  2760               	addwf	_time& (0+255),f,b
  6463  001796  0E00               	movlw	0
  6464  001798  2361               	addwfc	(_time+1)& (0+255),f,b
  6465  00179A  2362               	addwfc	(_time+2)& (0+255),f,b
  6466  00179C  2363               	addwfc	(_time+3)& (0+255),f,b
  6467                           
  6468                           ; BSR set to: 0
  6469                           ;tmr0.c: 91: INTCONbits.TMR0IF = 0;
  6470  00179E  94F2               	bcf	intcon,2,c	;volatile
  6471                           
  6472                           ; BSR set to: 0
  6473  0017A0  0012               	return		;funcret
  6474  0017A2                     __end_of_TMR0_ISR:
  6475                           	opt stack 0
  6476                           tosu	equ	0xFFF
  6477                           tosh	equ	0xFFE
  6478                           tosl	equ	0xFFD
  6479                           pclatu	equ	0xFFB
  6480                           pclath	equ	0xFFA
  6481                           tblptru	equ	0xFF8
  6482                           tblptrh	equ	0xFF7
  6483                           tblptrl	equ	0xFF6
  6484                           tablat	equ	0xFF5
  6485                           prodh	equ	0xFF4
  6486                           prodl	equ	0xFF3
  6487                           intcon	equ	0xFF2
  6488                           postinc0	equ	0xFEE
  6489                           fsr0h	equ	0xFEA
  6490                           fsr0l	equ	0xFE9
  6491                           wreg	equ	0xFE8
  6492                           fsr1h	equ	0xFE2
  6493                           fsr1l	equ	0xFE1
  6494                           indf2	equ	0xFDF
  6495                           postinc2	equ	0xFDE
  6496                           postdec2	equ	0xFDD
  6497                           plusw2	equ	0xFDB
  6498                           fsr2h	equ	0xFDA
  6499                           fsr2l	equ	0xFD9
  6500                           status	equ	0xFD8
  6501                           
  6502 ;; *************** function _EUSART1_Transmit_ISR *****************
  6503 ;; Defined at:
  6504 ;;		line 150 in file "UART.c"
  6505 ;; Parameters:    Size  Location     Type
  6506 ;;		None
  6507 ;; Auto vars:     Size  Location     Type
  6508 ;;		None
  6509 ;; Return value:  Size  Location     Type
  6510 ;;                  1    wreg      void 
  6511 ;; Registers used:
  6512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6513 ;; Tracked objects:
  6514 ;;		On entry : 0/0
  6515 ;;		On exit  : 0/0
  6516 ;;		Unchanged: 0/0
  6517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6518 ;;      Params:         0       0       0       0       0       0       0
  6519 ;;      Locals:         0       0       0       0       0       0       0
  6520 ;;      Temps:          0       0       0       0       0       0       0
  6521 ;;      Totals:         0       0       0       0       0       0       0
  6522 ;;Total ram usage:        0 bytes
  6523 ;; Hardware stack levels used:    1
  6524 ;; Hardware stack levels required when called:    2
  6525 ;; This function calls:
  6526 ;;		i2_UART_buff_get
  6527 ;;		i2_UART_buff_size
  6528 ;; This function is called by:
  6529 ;;		_INTERRUPT_InterruptManager
  6530 ;; This function uses a non-reentrant model
  6531 ;;
  6532                           
  6533                           	psect	text40
  6534  0015B4                     __ptext40:
  6535                           	opt stack 0
  6536  0015B4                     _EUSART1_Transmit_ISR:
  6537                           	opt stack 21
  6538                           
  6539                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  6540                           
  6541                           ; BSR set to: 0
  6542                           ;incstack = 0
  6543  0015B4  0E00               	movlw	low _output_buffer
  6544  0015B6  6E01               	movwf	i2UART_buff_size@_this,c
  6545  0015B8  0E04               	movlw	high _output_buffer
  6546  0015BA  6E02               	movwf	i2UART_buff_size@_this+1,c
  6547  0015BC  ECFE  F00B         	call	i2_UART_buff_size	;wreg free
  6548  0015C0  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  6549  0015C2  D00D               	goto	i2l2317
  6550  0015C4  5002               	movf	?i2_UART_buff_size+1,w,c
  6551  0015C6  E103               	bnz	i2u228_40
  6552  0015C8  0401               	decf	?i2_UART_buff_size,w,c
  6553  0015CA  A0D8               	btfss	status,0,c
  6554  0015CC  D008               	goto	i2l2317
  6555  0015CE                     i2u228_40:
  6556                           
  6557                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  6558  0015CE  0E00               	movlw	low _output_buffer
  6559  0015D0  6E07               	movwf	i2UART_buff_get@_this,c
  6560  0015D2  0E04               	movlw	high _output_buffer
  6561  0015D4  6E08               	movwf	i2UART_buff_get@_this+1,c
  6562  0015D6  ECD5  F008         	call	i2_UART_buff_get	;wreg free
  6563  0015DA  6EAD               	movwf	4013,c	;volatile
  6564                           
  6565                           ;UART.c: 154: } else {
  6566  0015DC  0012               	return	
  6567  0015DE                     i2l2317:
  6568                           
  6569                           ;UART.c: 155: Transmit_stall = 1;
  6570  0015DE  0E01               	movlw	1
  6571  0015E0  6E44               	movwf	_Transmit_stall,c
  6572                           
  6573                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  6574  0015E2  989D               	bcf	3997,4,c	;volatile
  6575  0015E4  0012               	return	
  6576  0015E6                     __end_of_EUSART1_Transmit_ISR:
  6577                           	opt stack 0
  6578                           tosu	equ	0xFFF
  6579                           tosh	equ	0xFFE
  6580                           tosl	equ	0xFFD
  6581                           pclatu	equ	0xFFB
  6582                           pclath	equ	0xFFA
  6583                           tblptru	equ	0xFF8
  6584                           tblptrh	equ	0xFF7
  6585                           tblptrl	equ	0xFF6
  6586                           tablat	equ	0xFF5
  6587                           prodh	equ	0xFF4
  6588                           prodl	equ	0xFF3
  6589                           intcon	equ	0xFF2
  6590                           postinc0	equ	0xFEE
  6591                           fsr0h	equ	0xFEA
  6592                           fsr0l	equ	0xFE9
  6593                           wreg	equ	0xFE8
  6594                           fsr1h	equ	0xFE2
  6595                           fsr1l	equ	0xFE1
  6596                           indf2	equ	0xFDF
  6597                           postinc2	equ	0xFDE
  6598                           postdec2	equ	0xFDD
  6599                           plusw2	equ	0xFDB
  6600                           fsr2h	equ	0xFDA
  6601                           fsr2l	equ	0xFD9
  6602                           status	equ	0xFD8
  6603                           
  6604 ;; *************** function i2_UART_buff_size *****************
  6605 ;; Defined at:
  6606 ;;		line 102 in file "UART.c"
  6607 ;; Parameters:    Size  Location     Type
  6608 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  6609 ;;		 -> output_buffer(206), input_buffer(206), 
  6610 ;; Auto vars:     Size  Location     Type
  6611 ;;		None
  6612 ;; Return value:  Size  Location     Type
  6613 ;;                  2    0[COMRAM] int 
  6614 ;; Registers used:
  6615 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6616 ;; Tracked objects:
  6617 ;;		On entry : 0/0
  6618 ;;		On exit  : 0/0
  6619 ;;		Unchanged: 0/0
  6620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6621 ;;      Params:         2       0       0       0       0       0       0
  6622 ;;      Locals:         0       0       0       0       0       0       0
  6623 ;;      Temps:          0       0       0       0       0       0       0
  6624 ;;      Totals:         2       0       0       0       0       0       0
  6625 ;;Total ram usage:        2 bytes
  6626 ;; Hardware stack levels used:    1
  6627 ;; This function calls:
  6628 ;;		Nothing
  6629 ;; This function is called by:
  6630 ;;		_EUSART1_Transmit_ISR
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           	psect	text41
  6635  0017FC                     __ptext41:
  6636                           	opt stack 0
  6637  0017FC                     i2_UART_buff_size:
  6638                           	opt stack 22
  6639                           
  6640                           ;UART.c: 103: return (_this->count);
  6641                           
  6642                           ;incstack = 0
  6643  0017FC  EE20 F0CC          	lfsr	2,204
  6644  001800  5001               	movf	i2UART_buff_size@_this,w,c
  6645  001802  26D9               	addwf	fsr2l,f,c
  6646  001804  5002               	movf	i2UART_buff_size@_this+1,w,c
  6647  001806  22DA               	addwfc	fsr2h,f,c
  6648  001808  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  6649  00180C  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  6650  001810  0012               	return	
  6651  001812                     __end_ofi2_UART_buff_size:
  6652                           	opt stack 0
  6653                           tosu	equ	0xFFF
  6654                           tosh	equ	0xFFE
  6655                           tosl	equ	0xFFD
  6656                           pclatu	equ	0xFFB
  6657                           pclath	equ	0xFFA
  6658                           tblptru	equ	0xFF8
  6659                           tblptrh	equ	0xFF7
  6660                           tblptrl	equ	0xFF6
  6661                           tablat	equ	0xFF5
  6662                           prodh	equ	0xFF4
  6663                           prodl	equ	0xFF3
  6664                           intcon	equ	0xFF2
  6665                           postinc0	equ	0xFEE
  6666                           fsr0h	equ	0xFEA
  6667                           fsr0l	equ	0xFE9
  6668                           wreg	equ	0xFE8
  6669                           fsr1h	equ	0xFE2
  6670                           fsr1l	equ	0xFE1
  6671                           indf2	equ	0xFDF
  6672                           postinc2	equ	0xFDE
  6673                           postdec2	equ	0xFDD
  6674                           plusw2	equ	0xFDB
  6675                           fsr2h	equ	0xFDA
  6676                           fsr2l	equ	0xFD9
  6677                           status	equ	0xFD8
  6678                           
  6679 ;; *************** function i2_UART_buff_get *****************
  6680 ;; Defined at:
  6681 ;;		line 81 in file "UART.c"
  6682 ;; Parameters:    Size  Location     Type
  6683 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  6684 ;;		 -> output_buffer(206), input_buffer(206), 
  6685 ;; Auto vars:     Size  Location     Type
  6686 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  6687 ;; Return value:  Size  Location     Type
  6688 ;;                  1    wreg      unsigned char 
  6689 ;; Registers used:
  6690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6691 ;; Tracked objects:
  6692 ;;		On entry : 0/0
  6693 ;;		On exit  : 0/0
  6694 ;;		Unchanged: 0/0
  6695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6696 ;;      Params:         2       0       0       0       0       0       0
  6697 ;;      Locals:         1       0       0       0       0       0       0
  6698 ;;      Temps:          2       0       0       0       0       0       0
  6699 ;;      Totals:         5       0       0       0       0       0       0
  6700 ;;Total ram usage:        5 bytes
  6701 ;; Hardware stack levels used:    1
  6702 ;; Hardware stack levels required when called:    1
  6703 ;; This function calls:
  6704 ;;		i2_UART_buff_modulo_inc
  6705 ;; This function is called by:
  6706 ;;		_EUSART1_Transmit_ISR
  6707 ;; This function uses a non-reentrant model
  6708 ;;
  6709                           
  6710                           	psect	text42
  6711  0011AA                     __ptext42:
  6712                           	opt stack 0
  6713  0011AA                     i2_UART_buff_get:
  6714                           	opt stack 21
  6715                           
  6716                           ;UART.c: 82: unsigned char c;
  6717                           ;UART.c: 83: if (_this->count > 0) {
  6718                           
  6719                           ;incstack = 0
  6720  0011AA  EE20 F0CC          	lfsr	2,204
  6721  0011AE  5007               	movf	i2UART_buff_get@_this,w,c
  6722  0011B0  26D9               	addwf	fsr2l,f,c
  6723  0011B2  5008               	movf	i2UART_buff_get@_this+1,w,c
  6724  0011B4  22DA               	addwfc	fsr2h,f,c
  6725  0011B6  0E01               	movlw	1
  6726  0011B8  BEDB               	btfsc	plusw2,7,c
  6727  0011BA  D03C               	goto	i2l2281
  6728  0011BC  0E01               	movlw	1
  6729  0011BE  50DB               	movf	plusw2,w,c
  6730  0011C0  E103               	bnz	i2u225_40
  6731  0011C2  04DE               	decf	postinc2,w,c
  6732  0011C4  A0D8               	btfss	status,0,c
  6733  0011C6  D036               	goto	i2l2281
  6734  0011C8                     i2u225_40:
  6735                           
  6736                           ;UART.c: 84: c = _this->buf[_this->tail];
  6737  0011C8  EE20 F0CA          	lfsr	2,202
  6738  0011CC  5007               	movf	i2UART_buff_get@_this,w,c
  6739  0011CE  26D9               	addwf	fsr2l,f,c
  6740  0011D0  5008               	movf	i2UART_buff_get@_this+1,w,c
  6741  0011D2  22DA               	addwfc	fsr2h,f,c
  6742  0011D4  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  6743  0011D8  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  6744  0011DC  5009               	movf	??i2_UART_buff_get,w,c
  6745  0011DE  2407               	addwf	i2UART_buff_get@_this,w,c
  6746  0011E0  6ED9               	movwf	fsr2l,c
  6747  0011E2  500A               	movf	??i2_UART_buff_get+1,w,c
  6748  0011E4  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  6749  0011E6  6EDA               	movwf	fsr2h,c
  6750  0011E8  50DF               	movf	indf2,w,c
  6751  0011EA  6E0B               	movwf	i2UART_buff_get@c,c
  6752                           
  6753                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  6754  0011EC  EE20 F0CA          	lfsr	2,202
  6755  0011F0  5007               	movf	i2UART_buff_get@_this,w,c
  6756  0011F2  26D9               	addwf	fsr2l,f,c
  6757  0011F4  5008               	movf	i2UART_buff_get@_this+1,w,c
  6758  0011F6  22DA               	addwfc	fsr2h,f,c
  6759  0011F8  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  6760  0011FC  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  6761  001200  0E00               	movlw	0
  6762  001202  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  6763  001204  0EC8               	movlw	200
  6764  001206  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  6765  001208  EC61  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  6766  00120C  EE20 F0CA          	lfsr	2,202
  6767  001210  5007               	movf	i2UART_buff_get@_this,w,c
  6768  001212  26D9               	addwf	fsr2l,f,c
  6769  001214  5008               	movf	i2UART_buff_get@_this+1,w,c
  6770  001216  22DA               	addwfc	fsr2h,f,c
  6771  001218  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  6772  00121C  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  6773                           
  6774                           ;UART.c: 86: --_this->count;
  6775  001220  EE20 F0CC          	lfsr	2,204
  6776  001224  5007               	movf	i2UART_buff_get@_this,w,c
  6777  001226  26D9               	addwf	fsr2l,f,c
  6778  001228  5008               	movf	i2UART_buff_get@_this+1,w,c
  6779  00122A  22DA               	addwfc	fsr2h,f,c
  6780  00122C  06DE               	decf	postinc2,f,c
  6781  00122E  0E00               	movlw	0
  6782  001230  5ADD               	subwfb	postdec2,f,c
  6783                           
  6784                           ;UART.c: 87: } else {
  6785  001232  D002               	goto	i2l290
  6786  001234                     i2l2281:
  6787                           
  6788                           ;UART.c: 88: c = 0;
  6789  001234  0E00               	movlw	0
  6790  001236  6E0B               	movwf	i2UART_buff_get@c,c
  6791  001238                     i2l290:
  6792                           
  6793                           ;UART.c: 89: }
  6794                           ;UART.c: 90: return (c);
  6795  001238  500B               	movf	i2UART_buff_get@c,w,c
  6796  00123A  0012               	return	
  6797  00123C                     __end_ofi2_UART_buff_get:
  6798                           	opt stack 0
  6799                           tosu	equ	0xFFF
  6800                           tosh	equ	0xFFE
  6801                           tosl	equ	0xFFD
  6802                           pclatu	equ	0xFFB
  6803                           pclath	equ	0xFFA
  6804                           tblptru	equ	0xFF8
  6805                           tblptrh	equ	0xFF7
  6806                           tblptrl	equ	0xFF6
  6807                           tablat	equ	0xFF5
  6808                           prodh	equ	0xFF4
  6809                           prodl	equ	0xFF3
  6810                           intcon	equ	0xFF2
  6811                           postinc0	equ	0xFEE
  6812                           fsr0h	equ	0xFEA
  6813                           fsr0l	equ	0xFE9
  6814                           wreg	equ	0xFE8
  6815                           fsr1h	equ	0xFE2
  6816                           fsr1l	equ	0xFE1
  6817                           indf2	equ	0xFDF
  6818                           postinc2	equ	0xFDE
  6819                           postdec2	equ	0xFDD
  6820                           plusw2	equ	0xFDB
  6821                           fsr2h	equ	0xFDA
  6822                           fsr2l	equ	0xFD9
  6823                           status	equ	0xFD8
  6824                           
  6825 ;; *************** function _EUSART1_Receive_ISR *****************
  6826 ;; Defined at:
  6827 ;;		line 139 in file "UART.c"
  6828 ;; Parameters:    Size  Location     Type
  6829 ;;		None
  6830 ;; Auto vars:     Size  Location     Type
  6831 ;;  data            1   11[COMRAM] unsigned char 
  6832 ;; Return value:  Size  Location     Type
  6833 ;;                  1    wreg      void 
  6834 ;; Registers used:
  6835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6836 ;; Tracked objects:
  6837 ;;		On entry : 0/0
  6838 ;;		On exit  : 0/0
  6839 ;;		Unchanged: 0/0
  6840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6841 ;;      Params:         0       0       0       0       0       0       0
  6842 ;;      Locals:         1       0       0       0       0       0       0
  6843 ;;      Temps:          0       0       0       0       0       0       0
  6844 ;;      Totals:         1       0       0       0       0       0       0
  6845 ;;Total ram usage:        1 bytes
  6846 ;; Hardware stack levels used:    1
  6847 ;; Hardware stack levels required when called:    2
  6848 ;; This function calls:
  6849 ;;		i2_UART_buff_put
  6850 ;; This function is called by:
  6851 ;;		_INTERRUPT_InterruptManager
  6852 ;; This function uses a non-reentrant model
  6853 ;;
  6854                           
  6855                           	psect	text43
  6856  00176A                     __ptext43:
  6857                           	opt stack 0
  6858  00176A                     _EUSART1_Receive_ISR:
  6859                           	opt stack 21
  6860                           
  6861                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  6862                           
  6863                           ;incstack = 0
  6864  00176A  A2AB               	btfss	4011,1,c	;volatile
  6865  00176C  D002               	goto	i2l321
  6866                           
  6867                           ;UART.c: 143: RC1STAbits.CREN = 0;
  6868  00176E  98AB               	bcf	4011,4,c	;volatile
  6869                           
  6870                           ;UART.c: 144: RC1STAbits.CREN = 1;
  6871  001770  88AB               	bsf	4011,4,c	;volatile
  6872  001772                     i2l321:
  6873                           
  6874                           ;UART.c: 145: }
  6875                           ;UART.c: 146: unsigned char data = RCREG1;
  6876  001772  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  6877                           
  6878                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  6879  001776  0E00               	movlw	low _input_buffer
  6880  001778  6E07               	movwf	i2UART_buff_put@_this,c
  6881  00177A  0E03               	movlw	high _input_buffer
  6882  00177C  6E08               	movwf	i2UART_buff_put@_this+1,c
  6883  00177E  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  6884  001782  EC41  F006         	call	i2_UART_buff_put	;wreg free
  6885  001786  0012               	return		;funcret
  6886  001788                     __end_of_EUSART1_Receive_ISR:
  6887                           	opt stack 0
  6888                           tosu	equ	0xFFF
  6889                           tosh	equ	0xFFE
  6890                           tosl	equ	0xFFD
  6891                           pclatu	equ	0xFFB
  6892                           pclath	equ	0xFFA
  6893                           tblptru	equ	0xFF8
  6894                           tblptrh	equ	0xFF7
  6895                           tblptrl	equ	0xFF6
  6896                           tablat	equ	0xFF5
  6897                           prodh	equ	0xFF4
  6898                           prodl	equ	0xFF3
  6899                           intcon	equ	0xFF2
  6900                           postinc0	equ	0xFEE
  6901                           fsr0h	equ	0xFEA
  6902                           fsr0l	equ	0xFE9
  6903                           wreg	equ	0xFE8
  6904                           fsr1h	equ	0xFE2
  6905                           fsr1l	equ	0xFE1
  6906                           indf2	equ	0xFDF
  6907                           postinc2	equ	0xFDE
  6908                           postdec2	equ	0xFDD
  6909                           plusw2	equ	0xFDB
  6910                           fsr2h	equ	0xFDA
  6911                           fsr2l	equ	0xFD9
  6912                           status	equ	0xFD8
  6913                           
  6914 ;; *************** function i2_UART_buff_put *****************
  6915 ;; Defined at:
  6916 ;;		line 68 in file "UART.c"
  6917 ;; Parameters:    Size  Location     Type
  6918 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  6919 ;;		 -> output_buffer(206), input_buffer(206), 
  6920 ;;  c               1    8[COMRAM] const unsigned char 
  6921 ;; Auto vars:     Size  Location     Type
  6922 ;;		None
  6923 ;; Return value:  Size  Location     Type
  6924 ;;                  1    wreg      void 
  6925 ;; Registers used:
  6926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6927 ;; Tracked objects:
  6928 ;;		On entry : 0/0
  6929 ;;		On exit  : 0/0
  6930 ;;		Unchanged: 0/0
  6931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6932 ;;      Params:         3       0       0       0       0       0       0
  6933 ;;      Locals:         0       0       0       0       0       0       0
  6934 ;;      Temps:          2       0       0       0       0       0       0
  6935 ;;      Totals:         5       0       0       0       0       0       0
  6936 ;;Total ram usage:        5 bytes
  6937 ;; Hardware stack levels used:    1
  6938 ;; Hardware stack levels required when called:    1
  6939 ;; This function calls:
  6940 ;;		i2_UART_buff_modulo_inc
  6941 ;; This function is called by:
  6942 ;;		_EUSART1_Receive_ISR
  6943 ;; This function uses a non-reentrant model
  6944 ;;
  6945                           
  6946                           	psect	text44
  6947  000C82                     __ptext44:
  6948                           	opt stack 0
  6949  000C82                     i2_UART_buff_put:
  6950                           	opt stack 21
  6951                           
  6952                           ;UART.c: 69: if (_this->count < 200) {
  6953                           
  6954                           ;incstack = 0
  6955  000C82  EE20 F0CC          	lfsr	2,204
  6956  000C86  5007               	movf	i2UART_buff_put@_this,w,c
  6957  000C88  26D9               	addwf	fsr2l,f,c
  6958  000C8A  5008               	movf	i2UART_buff_put@_this+1,w,c
  6959  000C8C  22DA               	addwfc	fsr2h,f,c
  6960  000C8E  0E01               	movlw	1
  6961  000C90  BEDB               	btfsc	plusw2,7,c
  6962  000C92  D007               	goto	i2l2261
  6963  000C94  0E01               	movlw	1
  6964  000C96  50DB               	movf	plusw2,w,c
  6965  000C98  E13A               	bnz	i2l2267
  6966  000C9A  0EC8               	movlw	200
  6967  000C9C  5CDE               	subwf	postinc2,w,c
  6968  000C9E  B0D8               	btfsc	status,0,c
  6969  000CA0  D036               	goto	i2l2267
  6970  000CA2                     i2l2261:
  6971                           
  6972                           ;UART.c: 70: _this->buf[_this->head] = c;
  6973  000CA2  EE20 F0C8          	lfsr	2,200
  6974  000CA6  5007               	movf	i2UART_buff_put@_this,w,c
  6975  000CA8  26D9               	addwf	fsr2l,f,c
  6976  000CAA  5008               	movf	i2UART_buff_put@_this+1,w,c
  6977  000CAC  22DA               	addwfc	fsr2h,f,c
  6978  000CAE  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  6979  000CB2  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  6980  000CB6  500A               	movf	??i2_UART_buff_put,w,c
  6981  000CB8  2407               	addwf	i2UART_buff_put@_this,w,c
  6982  000CBA  6ED9               	movwf	fsr2l,c
  6983  000CBC  500B               	movf	??i2_UART_buff_put+1,w,c
  6984  000CBE  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  6985  000CC0  6EDA               	movwf	fsr2h,c
  6986  000CC2  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  6987                           
  6988                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  6989  000CC6  EE20 F0C8          	lfsr	2,200
  6990  000CCA  5007               	movf	i2UART_buff_put@_this,w,c
  6991  000CCC  26D9               	addwf	fsr2l,f,c
  6992  000CCE  5008               	movf	i2UART_buff_put@_this+1,w,c
  6993  000CD0  22DA               	addwfc	fsr2h,f,c
  6994  000CD2  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  6995  000CD6  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  6996  000CDA  0E00               	movlw	0
  6997  000CDC  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  6998  000CDE  0EC8               	movlw	200
  6999  000CE0  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  7000  000CE2  EC61  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  7001  000CE6  EE20 F0C8          	lfsr	2,200
  7002  000CEA  5007               	movf	i2UART_buff_put@_this,w,c
  7003  000CEC  26D9               	addwf	fsr2l,f,c
  7004  000CEE  5008               	movf	i2UART_buff_put@_this+1,w,c
  7005  000CF0  22DA               	addwfc	fsr2h,f,c
  7006  000CF2  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  7007  000CF6  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  7008                           
  7009                           ;UART.c: 72: ++_this->count;
  7010  000CFA  EE20 F0CC          	lfsr	2,204
  7011  000CFE  5007               	movf	i2UART_buff_put@_this,w,c
  7012  000D00  26D9               	addwf	fsr2l,f,c
  7013  000D02  5008               	movf	i2UART_buff_put@_this+1,w,c
  7014  000D04  22DA               	addwfc	fsr2h,f,c
  7015  000D06  2ADE               	incf	postinc2,f,c
  7016  000D08  0E00               	movlw	0
  7017  000D0A  22DD               	addwfc	postdec2,f,c
  7018                           
  7019                           ;UART.c: 73: } else {
  7020  000D0C  0012               	return	
  7021  000D0E                     i2l2267:
  7022                           
  7023                           ;UART.c: 74: _this->buf[_this->head] = c;
  7024  000D0E  EE20 F0C8          	lfsr	2,200
  7025  000D12  5007               	movf	i2UART_buff_put@_this,w,c
  7026  000D14  26D9               	addwf	fsr2l,f,c
  7027  000D16  5008               	movf	i2UART_buff_put@_this+1,w,c
  7028  000D18  22DA               	addwfc	fsr2h,f,c
  7029  000D1A  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  7030  000D1E  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  7031  000D22  500A               	movf	??i2_UART_buff_put,w,c
  7032  000D24  2407               	addwf	i2UART_buff_put@_this,w,c
  7033  000D26  6ED9               	movwf	fsr2l,c
  7034  000D28  500B               	movf	??i2_UART_buff_put+1,w,c
  7035  000D2A  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  7036  000D2C  6EDA               	movwf	fsr2h,c
  7037  000D2E  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  7038                           
  7039                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  7040  000D32  EE20 F0C8          	lfsr	2,200
  7041  000D36  5007               	movf	i2UART_buff_put@_this,w,c
  7042  000D38  26D9               	addwf	fsr2l,f,c
  7043  000D3A  5008               	movf	i2UART_buff_put@_this+1,w,c
  7044  000D3C  22DA               	addwfc	fsr2h,f,c
  7045  000D3E  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  7046  000D42  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  7047  000D46  0E00               	movlw	0
  7048  000D48  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  7049  000D4A  0EC8               	movlw	200
  7050  000D4C  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  7051  000D4E  EC61  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  7052  000D52  EE20 F0C8          	lfsr	2,200
  7053  000D56  5007               	movf	i2UART_buff_put@_this,w,c
  7054  000D58  26D9               	addwf	fsr2l,f,c
  7055  000D5A  5008               	movf	i2UART_buff_put@_this+1,w,c
  7056  000D5C  22DA               	addwfc	fsr2h,f,c
  7057  000D5E  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  7058  000D62  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  7059                           
  7060                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7061  000D66  EE20 F0CA          	lfsr	2,202
  7062  000D6A  5007               	movf	i2UART_buff_put@_this,w,c
  7063  000D6C  26D9               	addwf	fsr2l,f,c
  7064  000D6E  5008               	movf	i2UART_buff_put@_this+1,w,c
  7065  000D70  22DA               	addwfc	fsr2h,f,c
  7066  000D72  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  7067  000D76  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  7068  000D7A  0E00               	movlw	0
  7069  000D7C  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  7070  000D7E  0EC8               	movlw	200
  7071  000D80  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  7072  000D82  EC61  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  7073  000D86  EE20 F0CA          	lfsr	2,202
  7074  000D8A  5007               	movf	i2UART_buff_put@_this,w,c
  7075  000D8C  26D9               	addwf	fsr2l,f,c
  7076  000D8E  5008               	movf	i2UART_buff_put@_this+1,w,c
  7077  000D90  22DA               	addwfc	fsr2h,f,c
  7078  000D92  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  7079  000D96  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  7080  000D9A  0012               	return	
  7081  000D9C                     __end_ofi2_UART_buff_put:
  7082                           	opt stack 0
  7083                           tosu	equ	0xFFF
  7084                           tosh	equ	0xFFE
  7085                           tosl	equ	0xFFD
  7086                           pclatu	equ	0xFFB
  7087                           pclath	equ	0xFFA
  7088                           tblptru	equ	0xFF8
  7089                           tblptrh	equ	0xFF7
  7090                           tblptrl	equ	0xFF6
  7091                           tablat	equ	0xFF5
  7092                           prodh	equ	0xFF4
  7093                           prodl	equ	0xFF3
  7094                           intcon	equ	0xFF2
  7095                           postinc0	equ	0xFEE
  7096                           fsr0h	equ	0xFEA
  7097                           fsr0l	equ	0xFE9
  7098                           wreg	equ	0xFE8
  7099                           fsr1h	equ	0xFE2
  7100                           fsr1l	equ	0xFE1
  7101                           indf2	equ	0xFDF
  7102                           postinc2	equ	0xFDE
  7103                           postdec2	equ	0xFDD
  7104                           plusw2	equ	0xFDB
  7105                           fsr2h	equ	0xFDA
  7106                           fsr2l	equ	0xFD9
  7107                           status	equ	0xFD8
  7108                           
  7109 ;; *************** function i2_UART_buff_modulo_inc *****************
  7110 ;; Defined at:
  7111 ;;		line 106 in file "UART.c"
  7112 ;; Parameters:    Size  Location     Type
  7113 ;;  value           2    0[COMRAM] const unsigned int 
  7114 ;;  modulus         2    2[COMRAM] const unsigned int 
  7115 ;; Auto vars:     Size  Location     Type
  7116 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  7117 ;; Return value:  Size  Location     Type
  7118 ;;                  2    0[COMRAM] unsigned int 
  7119 ;; Registers used:
  7120 ;;		wreg, status,2, status,0
  7121 ;; Tracked objects:
  7122 ;;		On entry : 0/0
  7123 ;;		On exit  : 0/0
  7124 ;;		Unchanged: 0/0
  7125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7126 ;;      Params:         4       0       0       0       0       0       0
  7127 ;;      Locals:         2       0       0       0       0       0       0
  7128 ;;      Temps:          0       0       0       0       0       0       0
  7129 ;;      Totals:         6       0       0       0       0       0       0
  7130 ;;Total ram usage:        6 bytes
  7131 ;; Hardware stack levels used:    1
  7132 ;; This function calls:
  7133 ;;		Nothing
  7134 ;; This function is called by:
  7135 ;;		i2_UART_buff_put
  7136 ;;		i2_UART_buff_get
  7137 ;; This function uses a non-reentrant model
  7138 ;;
  7139                           
  7140                           	psect	text45
  7141  0016C2                     __ptext45:
  7142                           	opt stack 0
  7143  0016C2                     i2_UART_buff_modulo_inc:
  7144                           	opt stack 21
  7145                           
  7146                           ;UART.c: 107: unsigned int my_value = value + 1;
  7147                           
  7148                           ;incstack = 0
  7149  0016C2  0E01               	movlw	1
  7150  0016C4  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  7151  0016C6  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  7152  0016C8  0E00               	movlw	0
  7153  0016CA  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  7154  0016CC  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  7155                           
  7156                           ;UART.c: 108: if (my_value >= modulus) {
  7157  0016CE  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  7158  0016D0  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  7159  0016D2  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  7160  0016D4  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  7161  0016D6  A0D8               	btfss	status,0,c
  7162  0016D8  D004               	goto	i2l2073
  7163                           
  7164                           ;UART.c: 109: my_value = 0;
  7165  0016DA  0E00               	movlw	0
  7166  0016DC  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  7167  0016DE  0E00               	movlw	0
  7168  0016E0  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  7169  0016E2                     i2l2073:
  7170                           
  7171                           ;UART.c: 110: }
  7172                           ;UART.c: 111: return (my_value);
  7173  0016E2  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  7174  0016E6  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  7175  0016EA  0012               	return	
  7176  0016EC                     __end_ofi2_UART_buff_modulo_inc:
  7177                           	opt stack 0
  7178  0000                     tosu	equ	0xFFF
  7179                           tosh	equ	0xFFE
  7180                           tosl	equ	0xFFD
  7181                           pclatu	equ	0xFFB
  7182                           pclath	equ	0xFFA
  7183                           tblptru	equ	0xFF8
  7184                           tblptrh	equ	0xFF7
  7185                           tblptrl	equ	0xFF6
  7186                           tablat	equ	0xFF5
  7187                           prodh	equ	0xFF4
  7188                           prodl	equ	0xFF3
  7189                           intcon	equ	0xFF2
  7190                           postinc0	equ	0xFEE
  7191                           fsr0h	equ	0xFEA
  7192                           fsr0l	equ	0xFE9
  7193                           wreg	equ	0xFE8
  7194                           fsr1h	equ	0xFE2
  7195                           fsr1l	equ	0xFE1
  7196                           indf2	equ	0xFDF
  7197                           postinc2	equ	0xFDE
  7198                           postdec2	equ	0xFDD
  7199                           plusw2	equ	0xFDB
  7200                           fsr2h	equ	0xFDA
  7201                           fsr2l	equ	0xFD9
  7202                           status	equ	0xFD8
  7203                           tosu	equ	0xFFF
  7204                           tosh	equ	0xFFE
  7205                           tosl	equ	0xFFD
  7206                           pclatu	equ	0xFFB
  7207                           pclath	equ	0xFFA
  7208                           tblptru	equ	0xFF8
  7209                           tblptrh	equ	0xFF7
  7210                           tblptrl	equ	0xFF6
  7211                           tablat	equ	0xFF5
  7212                           prodh	equ	0xFF4
  7213                           prodl	equ	0xFF3
  7214                           intcon	equ	0xFF2
  7215                           postinc0	equ	0xFEE
  7216                           fsr0h	equ	0xFEA
  7217                           fsr0l	equ	0xFE9
  7218                           wreg	equ	0xFE8
  7219                           fsr1h	equ	0xFE2
  7220                           fsr1l	equ	0xFE1
  7221                           indf2	equ	0xFDF
  7222                           postinc2	equ	0xFDE
  7223                           postdec2	equ	0xFDD
  7224                           plusw2	equ	0xFDB
  7225                           fsr2h	equ	0xFDA
  7226                           fsr2l	equ	0xFD9
  7227                           status	equ	0xFD8
  7228                           
  7229                           	psect	text46
  7230  000000                     __ptext46:
  7231                           	opt stack 0
  7232                           tosu	equ	0xFFF
  7233                           tosh	equ	0xFFE
  7234                           tosl	equ	0xFFD
  7235                           pclatu	equ	0xFFB
  7236                           pclath	equ	0xFFA
  7237                           tblptru	equ	0xFF8
  7238                           tblptrh	equ	0xFF7
  7239                           tblptrl	equ	0xFF6
  7240                           tablat	equ	0xFF5
  7241                           prodh	equ	0xFF4
  7242                           prodl	equ	0xFF3
  7243                           intcon	equ	0xFF2
  7244                           postinc0	equ	0xFEE
  7245                           fsr0h	equ	0xFEA
  7246                           fsr0l	equ	0xFE9
  7247                           wreg	equ	0xFE8
  7248                           fsr1h	equ	0xFE2
  7249                           fsr1l	equ	0xFE1
  7250                           indf2	equ	0xFDF
  7251                           postinc2	equ	0xFDE
  7252                           postdec2	equ	0xFDD
  7253                           plusw2	equ	0xFDB
  7254                           fsr2h	equ	0xFDA
  7255                           fsr2l	equ	0xFD9
  7256                           status	equ	0xFD8
  7257                           
  7258                           	psect	rparam
  7259  0000                     tosu	equ	0xFFF
  7260                           tosh	equ	0xFFE
  7261                           tosl	equ	0xFFD
  7262                           pclatu	equ	0xFFB
  7263                           pclath	equ	0xFFA
  7264                           tblptru	equ	0xFF8
  7265                           tblptrh	equ	0xFF7
  7266                           tblptrl	equ	0xFF6
  7267                           tablat	equ	0xFF5
  7268                           prodh	equ	0xFF4
  7269                           prodl	equ	0xFF3
  7270                           intcon	equ	0xFF2
  7271                           postinc0	equ	0xFEE
  7272                           fsr0h	equ	0xFEA
  7273                           fsr0l	equ	0xFE9
  7274                           wreg	equ	0xFE8
  7275                           fsr1h	equ	0xFE2
  7276                           fsr1l	equ	0xFE1
  7277                           indf2	equ	0xFDF
  7278                           postinc2	equ	0xFDE
  7279                           postdec2	equ	0xFDD
  7280                           plusw2	equ	0xFDB
  7281                           fsr2h	equ	0xFDA
  7282                           fsr2l	equ	0xFD9
  7283                           status	equ	0xFD8
  7284                           
  7285                           	psect	temp
  7286  000045                     btemp:
  7287                           	opt stack 0
  7288  000045                     	ds	1
  7289  0000                     int$flags	set	btemp
  7290                           tosu	equ	0xFFF
  7291                           tosh	equ	0xFFE
  7292                           tosl	equ	0xFFD
  7293                           pclatu	equ	0xFFB
  7294                           pclath	equ	0xFFA
  7295                           tblptru	equ	0xFF8
  7296                           tblptrh	equ	0xFF7
  7297                           tblptrl	equ	0xFF6
  7298                           tablat	equ	0xFF5
  7299                           prodh	equ	0xFF4
  7300                           prodl	equ	0xFF3
  7301                           intcon	equ	0xFF2
  7302                           postinc0	equ	0xFEE
  7303                           fsr0h	equ	0xFEA
  7304                           fsr0l	equ	0xFE9
  7305                           wreg	equ	0xFE8
  7306                           fsr1h	equ	0xFE2
  7307                           fsr1l	equ	0xFE1
  7308                           indf2	equ	0xFDF
  7309                           postinc2	equ	0xFDE
  7310                           postdec2	equ	0xFDD
  7311                           plusw2	equ	0xFDB
  7312                           fsr2h	equ	0xFDA
  7313                           fsr2l	equ	0xFD9
  7314                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         883
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      68
    BANK0           160     27      62
    BANK1           256      0     206
    BANK2           256      0     200
    BANK3           256      0     206
    BANK4           256      0     206
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK3[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_329(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK2[200]), ring_buffer(BANK1[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK1[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 10
		 -> receiveArray(BANK0[10]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 10
		 -> NULL(NULL[0]), receiveArray(BANK0[10]), 


Critical Paths under _main in COMRAM

    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _sendData->_FastTransfer_buffer_flush
    _ToSend->_FastTransfer_buffer_put
    _receiveData->_CRCcheck
    _CRCcheck->_crcBufS_get
    _ComStart->_begin

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   20758
                            _GetTime
                         _ReadFaults
                            _SetTime
                              _Start
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   18451
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           1     1      0    7736
                                              9 BANK0      1     1      0
                              _Delay
                          _GetFaults
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    5704
                                              4 BANK0      5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                              0 BANK0      4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1828
                                              2 BANK0      3     1      2
            _FastTransfer_buffer_put
                          _GetFaults (ARG)
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _GetFaults                                            1     1      0      30
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     174
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0   10715
                                              9 BANK0     18    18      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                              0 BANK0      1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                              2 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    10     6      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Start                                                0     0      0    2307
                           _ComStart
               _INTERRUPT_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ComStart                                             0     0      0    2307
                 _EUSART1_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (3) _begin                                               13     0     13    1292
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     428
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (4) _UART_buff_init                                       2     0      2    1015
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _SetTime                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadFaults                                           1     1      0       0
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              4     0      4       0
                                             26 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetTime
   _ReadFaults
   _SetTime
   _Start
     _ComStart
       _EUSART1_Initialize
         _UART_buff_init
           _memset
       _begin
         ___awdiv
     _INTERRUPT_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _updateComms
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _respondECU
       _Delay
       _GetFaults
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
         _GetFaults (ARG)
       _sendData
         Absolute function(Fake) *
         _CRC8 *
         _FastTransfer_buffer_flush *
           _memset
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C8       8       78.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      CE       6       80.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1B      3E       4       38.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3B4       9        0.0%
DATA                 0      0     3B4      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Oct 01 16:11:52 2016

      __end_of_FastTransfer_buffer_flush 132C                   i2_UART_buff_modulo_inc 16C2  
                           _rx_array_inx 0042                             ___awdiv@sign 0020  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    l112 152C                                      l226 0A1C  
                                    l290 11A6                                      l462 159E  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
   FastTransfer_buffer_flush@clearBuffer 0085                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
          i2UART_buff_modulo_inc@modulus 0003                             __CFG_LVP$OFF 000000  
                                   l1325 17C6                                     l2403 168E  
                                   l2413 165C                                     l2501 0DA6  
                                   l2423 0BF4                                     l2409 164C  
                                   l2505 0DB0                                     l2417 0B88  
                                   l2601 0AF8                                     l2611 08C2  
                                   l2453 1516                                     l2461 1532  
                                   l2437 11A2                                     l2517 0E44  
                                   l2533 10D2                                     l2525 104C  
                                   l2621 0984                                     l2613 08EA  
                                   l2605 0B34                                     l2447 1500  
                                   l2463 1538                                     l2711 0260  
                                   l2625 099A                                     l2801 06BA  
                                   l2395 16B8                                     l2635 09EE  
                                   l2643 0A16                                     l2803 06D4  
                                   l2715 0292                                     l2483 0776  
                                   l2805 0722                                     l2733 03F0  
                                   l1951 127E                                     l1943 1260  
                                   l2639 0A0E                                     l2807 073E  
                                   l2751 04AA                                     l2735 03F6  
                                   l2727 0356                                     l2719 02BA  
                                   l2815 074A                                     l2663 0100  
                                   l2591 0A86                                     l1961 129E  
                                   l1953 1282                                     l1937 1250  
                                   l2761 052C                                     l2753 04C4  
                                   l2737 040A                                     l2681 01C0  
                                   l2593 0AA0                                     l2763 0546  
                                   l2755 04DE                                     l2683 01C6  
                                   l2659 00D4                                     l2667 0104  
                                   l2691 0200                                     l2595 0ABC  
                                   l2587 0A50                                     l1949 1276  
                                   l1965 12A8                                     l2765 0594  
                                   l2757 04F8                                     l2597 0AC8  
                                   l2589 0A6A                                     l2791 0638  
                                   l2759 0512                                     l2767 05B0  
                                   l2679 01A8                                     l2599 0AF2  
                                   l1969 12B6                                     l2793 0652  
                                   l2777 05BC                                     l2697 020C  
                                   l2873 161A                                     l2795 066C  
                                   l2699 0232                                     l2797 0686  
                                   l2799 06A0                                     l1999 158A  
                   receiveData@crcHolder 0098                                     _CRC8 14FA  
                                   u1010 0E96                                     u1100 0F26  
                                   u1020 0EA6                                     u1030 0EBA  
                                   u1120 0F36                                     u1040 0ED2  
                                   u1016 0E98                                     u1130 0F46  
                                   u1050 0EEE                                     u1115 0F28  
                                   u1140 0F5A                                     u1060 0F02  
                                   u1028 0EA8                                     u1126 0F38  
                                   u1038 0EBC                                     u1080 0F14  
                                   u1048 0ED4                                     u1138 0F48  
                                   u1058 0EF0                                     u1075 0F04  
                                   u1148 0F5C                                     u1095 0F16  
                                   u3008 0264                                     u3041 02FA  
                                   u3009 0278                                     u3018 0296  
                                   u3019 02AA                                     u3108 04AE  
                                   u3118 04C8                                     u2511 0774  
                                   u3208 063C                                     u3128 04E2  
                                   u2450 1136                                     u3218 0656  
                                   u3138 04FC                                     u3330 1636  
                                   u3228 0670                                     u3148 0516  
                                   u3238 068A                                     u3158 0530  
                                   u3248 06A4                                     u3168 054A  
                                   u2608 0A6E                                     u3258 06BE  
                                   u3178 0598                                     u3098 0494  
                                   u2490 102C                                     u2618 0A8A  
                                   u2708 0926                                     u3268 06D8  
                                   u2628 0AA4                                     u2709 093A  
                                   u3357 1590                                     u2718 0942  
                                   u3278 0726                                     u3198 0622  
                                   u2638 0ACC                                     u2719 0956  
                                   u2808 00AE                                     u2809 00C2  
                                   u2658 0B1C                                     u2668 08C6  
                                   u2908 0178                                     u2828 00DC  
                                   u2588 0A3A                                     u2669 08DA  
                                   u2909 018C                                     u2829 00F0  
                                   u2598 0A54                                     u2688 08EE  
                                   u2928 01AC                                     u2848 0108  
                                   u2689 0902                                     u2849 011C  
                                   u2698 090A                                     u2699 091E  
                                   u2868 0126                                     u2869 013A  
                                   u2968 0210                                     u2888 0144  
                                   u2969 0224                                     u2889 0158  
                                   u2898 015E                                     u2899 0172  
                                   u2988 0236                                     u2989 024A  
                                   _main 1616                          _TMR0_StartTimer 1864  
                                   _time 0060                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   btemp 0045                            __CFG_BORV$190 000000  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3          __end_of_FastTransfer_buffer_put 08C2  
                                   start 00A0                            __CFG_IESO$OFF 000000  
                        __end_of_GetTime 1838                             ___param_bank 000010  
         i2UART_buff_modulo_inc@my_value 0005                                    ?_CRC8 001B  
                        __end_of_SetTime 1826                  __end_of_TMR0_Initialize 174C  
                       __end_of_CRCcheck 0A1E                       crcBufS_put@address 001D  
                                  ?_main 0001                          __end_of___awdiv 12C0  
                                  _T0CON 000FD5                          ___awdiv@divisor 001D  
                         __CFG_DEBUG$OFF 000000                                    i2l321 1772  
                                  i2l290 1238                                    i2l453 004E  
                                  i2l455 005A                                    i2l459 0064  
                        ___awdiv@counter 001F                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6                                    _Delay 1580  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 15B4                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                       __end_of_TMR0_ISR 17A2                                    _Start 14AC  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _begin 1454  
                         __CFG_EBTRB$OFF 000000                                    _group 002A  
                     __CFG_MCLRE$EXTMCLR 000000                                    pclath 000FFA  
                                  tablat 000FF5                            ??_Receive_get 0026  
                   __size_of_crcBufS_get 00F2                                    plusw2 000FDB  
                         begin@stuffpeek 008E                     __size_of_crcBufS_put 00D8  
                                  status 000FD8                           __CFG_HFOFST$ON 000000  
                           ?_receiveData 0001                           __CFG_PBADEN$ON 000000  
                           __end_of_CRC8 1544                         __end_of_ComStart 1454  
                        CRCcheck@SentCRC 0085                               _ReadFaults 0E8E  
                        __initialization 132C               __end_of_EUSART1_Initialize 1580  
                           __end_of_main 1642                               ToSend@what 0085  
                                 ??_CRC8 001E              ?_INTERRUPT_InterruptManager 0001  
                     __size_of_GetFaults 0016                                   ??_main 0026  
                  receiveData@holder_329 0095                            __activetblptr 000002  
                       __end_of_Send_put 1616                __size_ofi2_UART_buff_size 0016  
                                 ?_Delay 001B                    ?_EUSART1_Transmit_ISR 0001  
          FastTransfer_buffer_put@towhat 0024                                   ?_Start 0001  
                          ?_Receive_peek 0001                                   ?_begin 0083  
                __end_of_TMR0_StartTimer 1868                         ___awdiv@dividend 001B  
                                 _ANSELA 000F38                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                          i2_UART_buff_get 11AA  
                                 _RC1STA 000FAB                          i2_UART_buff_put 0C82  
                                 i2l2073 16E2                                   i2l2261 0CA2  
                                 i2l2317 15DE                                   i2l2281 1234  
                                 i2l2267 0D0E                           __CFG_WDTEN$OFF 000000  
                                 Delay@x 001E              UART_buff_modulo_inc@modulus 001D  
                                 _RCREG1 000FAE                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                                ??_GetTime 001F  
                                 _TX1STA 000FAC                                   _TXREG1 000FAD  
                              ??_SetTime 001B                           __CFG_XINST$OFF 000000  
                                 _ToSend 1710                      __end_of_Receive_get 1864  
                       crcBufS_get@_this 001B              ??_FastTransfer_buffer_flush 0023  
                          _output_buffer 0400                         crcBufS_get@space 001E  
                              ??___awdiv 001F                                CRC8@tempI 0020  
                         __CFG_STVREN$ON 000000                         ?_TMR0_Initialize 0001  
                                 _memset 1642                                   clear_0 1332  
                                 clear_1 133E                                   clear_2 134A  
                                 clear_3 1356                                   clear_4 1362  
                                 clear_5 136E                         ___awdiv@quotient 0021  
                                 _rx_len 0043                         __end_of_sendData 0B68  
                           __pdataCOMRAM 0044                            Send_put@_data 0083  
                         ??_Receive_peek 001F                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 0174             __end_of_UART_buff_modulo_inc 16C2  
          __size_of_INTERRUPT_Initialize 0018                               __accesstop 0060  
                __end_of__initialization 1386                                ?_CRCcheck 0001  
                      __end_of_GetFaults 17D0                            ___rparam_used 000001  
                ?i2_UART_buff_modulo_inc 0001                             ?_updateComms 0001  
                          __end_of_Delay 15B4                              ?_ReadFaults 0001  
                         __pcstackCOMRAM 0001                            __end_of_Start 14FA  
                     _crcBufS_status_put 1042                         crcBufS_put@_this 001B  
                          __end_of_begin 14AC                                ?_TMR0_ISR 0001  
 __end_of_FastTransfer_buffer_modulo_inc 1698  __size_of_FastTransfer_buffer_modulo_inc 002A  
         _FastTransfer_buffer_modulo_inc 166E             FastTransfer_buffer_put@_this 0021  
                            ToSend@where 0087                       UART_buff_get@_this 0021  
                    ?_crcBufS_status_put 001B                    __end_of_UART_buff_get 11AA  
                 ??_EUSART1_Transmit_ISR 000C                    __end_of_UART_buff_put 0C82  
                                ??_Delay 001D                  __end_ofi2_UART_buff_get 123C  
                __end_ofi2_UART_buff_put 0D9C              __end_of_EUSART1_Receive_ISR 1788  
              _FastTransfer_buffer_flush 12C0                                  CRC8@crc 0021  
                                CRC8@len 001D                                  ??_Start 0025  
                                CRC8@sum 001E                                ?_ComStart 0001  
                                ??_begin 0023                         ?_TMR0_StartTimer 0001  
                    _addressErrorCounter 0064                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                        __CFG_PLLCFG$OFF 000000                              _Receive_get 1856  
                             ??_CRCcheck 0026                     ??_crcBufS_status_put 001F  
         __end_ofi2_UART_buff_modulo_inc 16EC                        begin@givenAddress 0086  
                __size_of_UART_buff_init 001E                  __size_of_UART_buff_peek 0024  
                __size_of_UART_buff_size 0016                                ?_Send_put 0001  
                   __size_of_receiveData 06AA                                  ?_ToSend 0085  
                     __CFG_CCP2MX$PORTC1 000000                               ??_TMR0_ISR 0001  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 001B  
                                ?_memset 001B                               _crc_buffer 0068  
                     UART_buff_put@_this 0021                         i2_UART_buff_size 17FC  
            i2UART_buff_modulo_inc@value 0001                                  _OSCCON2 000FD2  
                      _Receive_available 17D0             UART_buff_modulo_inc@my_value 001F  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                               ??_ComStart 0025  
                    sendData@whereToSend 0088                      _receiveArrayAddress 002C  
                    __size_of_ReadFaults 00DC                       ?_Receive_available 001D  
                             begin@error 0087                                  _GetTime 1826  
                                _ByteLow 003C                      ??_Receive_available 001F  
                              ?_sendData 0001                        _alignErrorCounter 0026  
                        __CFG_PWRTEN$OFF 000000                               ??_Send_put 0026  
                                __Hparam 0000                                  _SetTime 1812  
                                __Lparam 0000                          __size_of_ToSend 001E  
                   __end_of_Receive_peek 1856                                _AKNAKsend 003A  
                                ___awdiv 123C                     _UART_buff_modulo_inc 1698  
                                _calc_CS 003D                                  __pcinit 132C  
                        __size_of_memset 002C                                  __ramtop 0600  
                       i2UART_buff_get@c 000B                                  __ptext0 1616  
                                __ptext1 1838                                  __ptext2 1394  
                                __ptext3 0A1E                                  __ptext4 0F6A  
                                __ptext5 12C0                                  __ptext6 1710  
                                __ptext7 074E                                  __ptext8 166E  
                                __ptext9 17BA                                _T0CONbits 000FD5  
                       i2UART_buff_put@c 0009                __end_of_Receive_available 17E6  
                _FastTransfer_buffer_put 074E                    CRCcheck@calculatedCRC 0086  
                     _EUSART1_Initialize 1544                         ?i2_UART_buff_get 0007  
                       ?i2_UART_buff_put 0007             crcBufS_status_put@wantedTime 0023  
                          ??_crcBufS_get 001F                            ??_crcBufS_put 0020  
                   end_of_initialization 1386                                Delay@wait 001B  
                    ?_EUSART1_Initialize 0001                                  memset@c 001D  
                                memset@n 001F                                  memset@p 0021  
                          __Lmediumconst 0000                               ??_sendData 0087  
                  ?_UART_buff_modulo_inc 001B                     __size_of_updateComms 0010  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                               _respondECU 1394  
                       begin@stufftosend 0088                      CRCcheck@arrayHolder 0087  
                   ??_EUSART1_Initialize 0025                                _PORTAbits 000F80  
                              _PORTCbits 000F82                                _PORTDbits 000F83  
                 _dataAdressErrorCounter 0066                               _rx_address 0041  
                              _TRISAbits 000F92                                _TRISCbits 000F94  
                              _TRISDbits 000F95                             begin@maxSize 0085  
     __size_of_FastTransfer_buffer_flush 006C                    i2UART_buff_size@_this 0001  
                         _UART_buff_init 174C                           _UART_buff_peek 16EC  
                         _UART_buff_size 17E6                      __end_of_crcBufS_get 0E8E  
                    __end_of_crcBufS_put 1042                        __size_of_CRCcheck 015C  
                           ??_ReadFaults 001B                                _GetFaults 17BA  
                          _moduleAddress 003F                     _timer0ReloadVal16bit 0038  
                             CRCcheck@rt 008A                           __end_of_ToSend 172E  
           __end_of_INTERRUPT_Initialize 17BA                          _crcErrorCounter 0028  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 1868  
                      __size_of_TMR0_ISR 001A                ??_FastTransfer_buffer_put 0083  
                         __end_of_memset 166E                        crcBufS_put@status 001F  
                           receiveData@r 009C               __size_of_Receive_available 0016  
                           receiveData@u 009A                      start_initialization 132C  
               __size_of_TMR0_Initialize 001E                    crcBufS_get@wantedTime 0083  
                     __end_of_ReadFaults 0F6A                        __size_of_ComStart 0058  
                 __end_of_UART_buff_init 176A                   __end_of_UART_buff_peek 1710  
                         UART_buff_get@c 0025                   __end_of_UART_buff_size 17FC  
                           ?_Receive_get 0001                           UART_buff_put@c 0023  
                  __size_of_Receive_peek 000E                 __end_ofi2_UART_buff_size 1812  
                               ??_ToSend 0026                   ??_UART_buff_modulo_inc 001F  
                             ?_GetFaults 0001                                 CRC8@data 001B  
                        crcBufS_get@time 001D                        __size_of_Send_put 0030  
                            ?_respondECU 0001                                 ??_memset 0021  
                            __pbssCOMRAM 0026            __size_of_EUSART1_Transmit_ISR 0032  
                          __pcstackBANK0 0083                             _Receive_peek 1848  
                    UART_buff_init@_this 0023                              _crcBufS_get 0D9C  
                    UART_buff_peek@_this 001B                              _crcBufS_put 0F6A  
                        ?_UART_buff_init 0023                          ?_UART_buff_peek 001B  
                        ?_UART_buff_size 001B             __size_of_EUSART1_Receive_ISR 001E  
                               ?_GetTime 001B                            ??_receiveData 008C  
            __size_of_crcBufS_status_put 00D6                               sendData@CS 0089  
               __size_of_TMR0_StartTimer 0004                   __size_of_UART_buff_get 0092  
                 __size_of_UART_buff_put 011A                                 ?_SetTime 0001  
                      __size_of_sendData 014A                             GetFaults@num 001B  
                              __pintcode 0008                                 ?___awdiv 001B  
           ??_INTERRUPT_InterruptManager 000D                     i2UART_buff_get@_this 0007  
               receiveData@crcHolder_330 0099                                 _BAUD1CON 000FB8  
                         __size_of_Delay 0034                           __size_of_Start 004E  
                         __size_of_begin 0058                      __size_of_respondECU 0068  
                   _INTERRUPT_Initialize 17A2                             _receiveArray 0079  
                      ??_TMR0_Initialize 001B                                 _CRCcheck 08C2  
                               _LATAbits 000F89                                 _LATDbits 000F8C  
                    UART_buff_size@_this 001B                                 _IPR1bits 000F9F  
                               _IPR2bits 000FA2                                 _PIE1bits 000F9D  
    __size_of_INTERRUPT_InterruptManager 0098                                 i2u225_40 11C8  
                               i2u228_40 15CE                                 _PIR1bits 000F9E  
                            ??_GetFaults 001B                      begin@stuffavailable 008C  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 074E                                 _TMR0_ISR 1788  
         FastTransfer_buffer_flush@_this 0083                             _input_buffer 0300  
                              _rx_buffer 0200                     i2UART_buff_put@_this 0007  
                          _UART_buff_get 1118                            _UART_buff_put 0B68  
                               _ComStart 13FC                 ??i2_UART_buff_modulo_inc 0005  
                  ?_INTERRUPT_Initialize 0001                        _sendStructAddress 002E  
                               _ByteHigh 003B                 __size_ofi2_UART_buff_get 0092  
               __size_ofi2_UART_buff_put 011A                         __size_of_GetTime 0012  
                          ??_updateComms 0026                     __size_of_Receive_get 000E  
                               __Hrparam 0000                                 _Send_put 15E6  
                               __Lrparam 0000                       __CFG_BOREN$SBORDIS 000000  
                       __size_of_SetTime 0014                        __CFG_P2BMX$PORTD2 000000  
                      ??_TMR0_StartTimer 001B                         __size_of___awdiv 0084  
            __size_of_EUSART1_Initialize 003C                      begin@stufftoreceive 008A  
                         ?_UART_buff_get 0021                           ?_UART_buff_put 0021  
                            CRC8@extract 001F                                sendData@i 008A  
               crcBufS_status_put@status 001E                                 __ptext10 1580  
                               __ptext11 00A4                                 __ptext20 1118  
                               __ptext12 15E6                                 __ptext21 1698  
                               __ptext13 0B68                                 __ptext30 1454  
                               __ptext22 17D0                                 __ptext14 1848  
                               __ptext31 123C                                 __ptext23 17E6  
                               __ptext15 16EC                                 __ptext40 15B4  
                               __ptext32 1544                                 __ptext24 14FA  
                               __ptext16 08C2                                 __ptext41 17FC  
                               __ptext33 174C                                 __ptext25 14AC  
                               __ptext17 1042                                 __ptext42 11AA  
                               __ptext34 1642                                 __ptext26 172E  
                               __ptext18 0D9C                                 __ptext43 176A  
                               __ptext35 1812                                 __ptext27 1864  
                               __ptext19 1856                                 __ptext44 0C82  
                               __ptext36 0E8E                                 __ptext28 17A2  
                               __ptext45 16C2                                 __ptext37 1826  
                               __ptext29 13FC                                 __ptext46 0000  
                               __ptext39 1788                            __size_of_CRC8 004A  
                               begin@ptr 0083                  EUSART1_Receive_ISR@data 000C  
                          _returnAddress 0040                            __size_of_main 002C  
                            _receiveData 00A4                           _Transmit_stall 0044  
                               _sendData 0A1E                        ?i2_UART_buff_size 0001  
                             _RC1STAbits 000FAB                             ??_respondECU 008C  
                     ??i2_UART_buff_size 0003                                 int$flags 0045  
                           _serial_write 0036                      __end_of_updateComms 1848  
     __end_of_INTERRUPT_InterruptManager 00A0               _INTERRUPT_InterruptManager 0008  
                    _EUSART1_Receive_ISR 176A                        receiveData@holder 0092  
                             _INTCONbits 000FF2                UART_buff_modulo_inc@value 001B  
                       ??_UART_buff_init 0025                         ??_UART_buff_peek 001D  
                       ??_UART_buff_size 001D                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 0030  
        __size_ofi2_UART_buff_modulo_inc 002A                             ?_crcBufS_get 001B  
                           ?_crcBufS_put 001B                                 intlevel2 0000  
                crcBufS_status_put@_this 001B                       __end_of_respondECU 13FC  
                   ?_EUSART1_Receive_ISR 0001   FastTransfer_buffer_modulo_inc@my_value 001F  
         FastTransfer_buffer_put@towhere 0023             __end_of_EUSART1_Transmit_ISR 15E6  
                            _ring_buffer 0100               ?_FastTransfer_buffer_flush 0083  
                      ??i2_UART_buff_get 0009                              _serial_peek 0032  
                            _serial_read 0034                        ??i2_UART_buff_put 000A  
               ?_FastTransfer_buffer_put 0021            __size_of_UART_buff_modulo_inc 002A  
                        ??_UART_buff_get 0023                          ??_UART_buff_put 0024  
  FastTransfer_buffer_modulo_inc@modulus 001D                   crcBufS_status_put@time 001D  
                        _TMR0_Initialize 172E                        __CFG_T3CMX$PORTC0 000000  
                         _maxDataAddress 003E               __end_of_crcBufS_status_put 1118  
                  ??_EUSART1_Receive_ISR 000C         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B                        __CFG_FOSC$INTIO67 000000  
                            _updateComms 1838  
