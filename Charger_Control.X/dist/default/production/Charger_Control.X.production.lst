

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Mon Sep 12 05:01:45 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75  0000                     
    76 ;; Function _putch is unused but had its address taken
    77  0000                     
    78                           	psect	idataCOMRAM
    79  001948                     __pidataCOMRAM:
    80                           	opt stack 0
    81                           
    82                           ;initializer for _Transmit_stall
    83  001948  01                 	db	1
    84                           
    85                           	psect	mediumconst
    86  007DE6                     __pmediumconst:
    87                           	opt stack 0
    88  007DE6  00                 	db	0
    89  007DE7                     _FONTLOOKUP:
    90                           	opt stack 0
    91  007DE7  00                 	db	0
    92  007DE8  00                 	db	0
    93  007DE9  00                 	db	0
    94  007DEA  00                 	db	0
    95  007DEB  00                 	db	0
    96  007DEC  00                 	db	0
    97  007DED  00                 	db	0
    98  007DEE  5F                 	db	95
    99  007DEF  00                 	db	0
   100  007DF0  00                 	db	0
   101  007DF1  00                 	db	0
   102  007DF2  07                 	db	7
   103  007DF3  00                 	db	0
   104  007DF4  07                 	db	7
   105  007DF5  00                 	db	0
   106  007DF6  14                 	db	20
   107  007DF7  7F                 	db	127
   108  007DF8  14                 	db	20
   109  007DF9  7F                 	db	127
   110  007DFA  14                 	db	20
   111  007DFB  24                 	db	36
   112  007DFC  2A                 	db	42
   113  007DFD  7F                 	db	127
   114  007DFE  2A                 	db	42
   115  007DFF  12                 	db	18
   116  007E00  23                 	db	35
   117  007E01  13                 	db	19
   118  007E02  08                 	db	8
   119  007E03  64                 	db	100
   120  007E04  62                 	db	98
   121  007E05  36                 	db	54
   122  007E06  49                 	db	73
   123  007E07  55                 	db	85
   124  007E08  22                 	db	34
   125  007E09  50                 	db	80
   126  007E0A  00                 	db	0
   127  007E0B  05                 	db	5
   128  007E0C  03                 	db	3
   129  007E0D  00                 	db	0
   130  007E0E  00                 	db	0
   131  007E0F  00                 	db	0
   132  007E10  1C                 	db	28
   133  007E11  22                 	db	34
   134  007E12  41                 	db	65
   135  007E13  00                 	db	0
   136  007E14  00                 	db	0
   137  007E15  41                 	db	65
   138  007E16  22                 	db	34
   139  007E17  1C                 	db	28
   140  007E18  00                 	db	0
   141  007E19  14                 	db	20
   142  007E1A  08                 	db	8
   143  007E1B  3E                 	db	62
   144  007E1C  08                 	db	8
   145  007E1D  14                 	db	20
   146  007E1E  08                 	db	8
   147  007E1F  08                 	db	8
   148  007E20  3E                 	db	62
   149  007E21  08                 	db	8
   150  007E22  08                 	db	8
   151  007E23  00                 	db	0
   152  007E24  50                 	db	80
   153  007E25  30                 	db	48
   154  007E26  00                 	db	0
   155  007E27  00                 	db	0
   156  007E28  08                 	db	8
   157  007E29  08                 	db	8
   158  007E2A  08                 	db	8
   159  007E2B  08                 	db	8
   160  007E2C  08                 	db	8
   161  007E2D  00                 	db	0
   162  007E2E  60                 	db	96
   163  007E2F  60                 	db	96
   164  007E30  00                 	db	0
   165  007E31  00                 	db	0
   166  007E32  20                 	db	32
   167  007E33  10                 	db	16
   168  007E34  08                 	db	8
   169  007E35  04                 	db	4
   170  007E36  02                 	db	2
   171  007E37  3E                 	db	62
   172  007E38  51                 	db	81
   173  007E39  49                 	db	73
   174  007E3A  45                 	db	69
   175  007E3B  3E                 	db	62
   176  007E3C  00                 	db	0
   177  007E3D  42                 	db	66
   178  007E3E  7F                 	db	127
   179  007E3F  40                 	db	64
   180  007E40  00                 	db	0
   181  007E41  42                 	db	66
   182  007E42  61                 	db	97
   183  007E43  51                 	db	81
   184  007E44  49                 	db	73
   185  007E45  46                 	db	70
   186  007E46  21                 	db	33
   187  007E47  41                 	db	65
   188  007E48  45                 	db	69
   189  007E49  4B                 	db	75
   190  007E4A  31                 	db	49
   191  007E4B  18                 	db	24
   192  007E4C  14                 	db	20
   193  007E4D  12                 	db	18
   194  007E4E  7F                 	db	127
   195  007E4F  10                 	db	16
   196  007E50  27                 	db	39
   197  007E51  45                 	db	69
   198  007E52  45                 	db	69
   199  007E53  45                 	db	69
   200  007E54  39                 	db	57
   201  007E55  3C                 	db	60
   202  007E56  4A                 	db	74
   203  007E57  49                 	db	73
   204  007E58  49                 	db	73
   205  007E59  30                 	db	48
   206  007E5A  01                 	db	1
   207  007E5B  71                 	db	113
   208  007E5C  09                 	db	9
   209  007E5D  05                 	db	5
   210  007E5E  03                 	db	3
   211  007E5F  36                 	db	54
   212  007E60  49                 	db	73
   213  007E61  49                 	db	73
   214  007E62  49                 	db	73
   215  007E63  36                 	db	54
   216  007E64  06                 	db	6
   217  007E65  49                 	db	73
   218  007E66  49                 	db	73
   219  007E67  29                 	db	41
   220  007E68  1E                 	db	30
   221  007E69  00                 	db	0
   222  007E6A  36                 	db	54
   223  007E6B  36                 	db	54
   224  007E6C  00                 	db	0
   225  007E6D  00                 	db	0
   226  007E6E  00                 	db	0
   227  007E6F  56                 	db	86
   228  007E70  36                 	db	54
   229  007E71  00                 	db	0
   230  007E72  00                 	db	0
   231  007E73  08                 	db	8
   232  007E74  14                 	db	20
   233  007E75  22                 	db	34
   234  007E76  41                 	db	65
   235  007E77  00                 	db	0
   236  007E78  14                 	db	20
   237  007E79  14                 	db	20
   238  007E7A  14                 	db	20
   239  007E7B  14                 	db	20
   240  007E7C  14                 	db	20
   241  007E7D  00                 	db	0
   242  007E7E  41                 	db	65
   243  007E7F  22                 	db	34
   244  007E80  14                 	db	20
   245  007E81  08                 	db	8
   246  007E82  02                 	db	2
   247  007E83  01                 	db	1
   248  007E84  51                 	db	81
   249  007E85  09                 	db	9
   250  007E86  06                 	db	6
   251  007E87  32                 	db	50
   252  007E88  49                 	db	73
   253  007E89  79                 	db	121
   254  007E8A  41                 	db	65
   255  007E8B  3E                 	db	62
   256  007E8C  7E                 	db	126
   257  007E8D  11                 	db	17
   258  007E8E  11                 	db	17
   259  007E8F  11                 	db	17
   260  007E90  7E                 	db	126
   261  007E91  7F                 	db	127
   262  007E92  49                 	db	73
   263  007E93  49                 	db	73
   264  007E94  49                 	db	73
   265  007E95  36                 	db	54
   266  007E96  3E                 	db	62
   267  007E97  41                 	db	65
   268  007E98  41                 	db	65
   269  007E99  41                 	db	65
   270  007E9A  22                 	db	34
   271  007E9B  7F                 	db	127
   272  007E9C  41                 	db	65
   273  007E9D  41                 	db	65
   274  007E9E  22                 	db	34
   275  007E9F  1C                 	db	28
   276  007EA0  7F                 	db	127
   277  007EA1  49                 	db	73
   278  007EA2  49                 	db	73
   279  007EA3  49                 	db	73
   280  007EA4  41                 	db	65
   281  007EA5  7F                 	db	127
   282  007EA6  09                 	db	9
   283  007EA7  09                 	db	9
   284  007EA8  09                 	db	9
   285  007EA9  01                 	db	1
   286  007EAA  3E                 	db	62
   287  007EAB  41                 	db	65
   288  007EAC  49                 	db	73
   289  007EAD  49                 	db	73
   290  007EAE  7A                 	db	122
   291  007EAF  7F                 	db	127
   292  007EB0  08                 	db	8
   293  007EB1  08                 	db	8
   294  007EB2  08                 	db	8
   295  007EB3  7F                 	db	127
   296  007EB4  00                 	db	0
   297  007EB5  41                 	db	65
   298  007EB6  7F                 	db	127
   299  007EB7  41                 	db	65
   300  007EB8  00                 	db	0
   301  007EB9  20                 	db	32
   302  007EBA  40                 	db	64
   303  007EBB  41                 	db	65
   304  007EBC  3F                 	db	63
   305  007EBD  01                 	db	1
   306  007EBE  7F                 	db	127
   307  007EBF  08                 	db	8
   308  007EC0  14                 	db	20
   309  007EC1  22                 	db	34
   310  007EC2  41                 	db	65
   311  007EC3  7F                 	db	127
   312  007EC4  40                 	db	64
   313  007EC5  40                 	db	64
   314  007EC6  40                 	db	64
   315  007EC7  40                 	db	64
   316  007EC8  7F                 	db	127
   317  007EC9  02                 	db	2
   318  007ECA  0C                 	db	12
   319  007ECB  02                 	db	2
   320  007ECC  7F                 	db	127
   321  007ECD  7F                 	db	127
   322  007ECE  04                 	db	4
   323  007ECF  08                 	db	8
   324  007ED0  10                 	db	16
   325  007ED1  7F                 	db	127
   326  007ED2  3E                 	db	62
   327  007ED3  41                 	db	65
   328  007ED4  41                 	db	65
   329  007ED5  41                 	db	65
   330  007ED6  3E                 	db	62
   331  007ED7  7F                 	db	127
   332  007ED8  09                 	db	9
   333  007ED9  09                 	db	9
   334  007EDA  09                 	db	9
   335  007EDB  06                 	db	6
   336  007EDC  3E                 	db	62
   337  007EDD  41                 	db	65
   338  007EDE  51                 	db	81
   339  007EDF  21                 	db	33
   340  007EE0  5E                 	db	94
   341  007EE1  7F                 	db	127
   342  007EE2  09                 	db	9
   343  007EE3  19                 	db	25
   344  007EE4  29                 	db	41
   345  007EE5  46                 	db	70
   346  007EE6  46                 	db	70
   347  007EE7  49                 	db	73
   348  007EE8  49                 	db	73
   349  007EE9  49                 	db	73
   350  007EEA  31                 	db	49
   351  007EEB  01                 	db	1
   352  007EEC  01                 	db	1
   353  007EED  7F                 	db	127
   354  007EEE  01                 	db	1
   355  007EEF  01                 	db	1
   356  007EF0  3F                 	db	63
   357  007EF1  40                 	db	64
   358  007EF2  40                 	db	64
   359  007EF3  40                 	db	64
   360  007EF4  3F                 	db	63
   361  007EF5  1F                 	db	31
   362  007EF6  20                 	db	32
   363  007EF7  40                 	db	64
   364  007EF8  20                 	db	32
   365  007EF9  1F                 	db	31
   366  007EFA  3F                 	db	63
   367  007EFB  40                 	db	64
   368  007EFC  38                 	db	56
   369  007EFD  40                 	db	64
   370  007EFE  3F                 	db	63
   371  007EFF  63                 	db	99
   372  007F00  14                 	db	20
   373  007F01  08                 	db	8
   374  007F02  14                 	db	20
   375  007F03  63                 	db	99
   376  007F04  07                 	db	7
   377  007F05  08                 	db	8
   378  007F06  70                 	db	112
   379  007F07  08                 	db	8
   380  007F08  07                 	db	7
   381  007F09  61                 	db	97
   382  007F0A  51                 	db	81
   383  007F0B  49                 	db	73
   384  007F0C  45                 	db	69
   385  007F0D  43                 	db	67
   386  007F0E  00                 	db	0
   387  007F0F  7F                 	db	127
   388  007F10  41                 	db	65
   389  007F11  41                 	db	65
   390  007F12  00                 	db	0
   391  007F13  02                 	db	2
   392  007F14  04                 	db	4
   393  007F15  08                 	db	8
   394  007F16  10                 	db	16
   395  007F17  20                 	db	32
   396  007F18  00                 	db	0
   397  007F19  41                 	db	65
   398  007F1A  41                 	db	65
   399  007F1B  7F                 	db	127
   400  007F1C  00                 	db	0
   401  007F1D  04                 	db	4
   402  007F1E  02                 	db	2
   403  007F1F  01                 	db	1
   404  007F20  02                 	db	2
   405  007F21  04                 	db	4
   406  007F22  40                 	db	64
   407  007F23  40                 	db	64
   408  007F24  40                 	db	64
   409  007F25  40                 	db	64
   410  007F26  40                 	db	64
   411  007F27  00                 	db	0
   412  007F28  01                 	db	1
   413  007F29  02                 	db	2
   414  007F2A  04                 	db	4
   415  007F2B  00                 	db	0
   416  007F2C  20                 	db	32
   417  007F2D  54                 	db	84
   418  007F2E  54                 	db	84
   419  007F2F  54                 	db	84
   420  007F30  78                 	db	120
   421  007F31  7F                 	db	127
   422  007F32  48                 	db	72
   423  007F33  44                 	db	68
   424  007F34  44                 	db	68
   425  007F35  38                 	db	56
   426  007F36  38                 	db	56
   427  007F37  44                 	db	68
   428  007F38  44                 	db	68
   429  007F39  44                 	db	68
   430  007F3A  20                 	db	32
   431  007F3B  38                 	db	56
   432  007F3C  44                 	db	68
   433  007F3D  44                 	db	68
   434  007F3E  48                 	db	72
   435  007F3F  7F                 	db	127
   436  007F40  38                 	db	56
   437  007F41  54                 	db	84
   438  007F42  54                 	db	84
   439  007F43  54                 	db	84
   440  007F44  18                 	db	24
   441  007F45  08                 	db	8
   442  007F46  7E                 	db	126
   443  007F47  09                 	db	9
   444  007F48  01                 	db	1
   445  007F49  02                 	db	2
   446  007F4A  0C                 	db	12
   447  007F4B  52                 	db	82
   448  007F4C  52                 	db	82
   449  007F4D  52                 	db	82
   450  007F4E  3E                 	db	62
   451  007F4F  7F                 	db	127
   452  007F50  08                 	db	8
   453  007F51  04                 	db	4
   454  007F52  04                 	db	4
   455  007F53  78                 	db	120
   456  007F54  00                 	db	0
   457  007F55  44                 	db	68
   458  007F56  7D                 	db	125
   459  007F57  40                 	db	64
   460  007F58  00                 	db	0
   461  007F59  20                 	db	32
   462  007F5A  40                 	db	64
   463  007F5B  44                 	db	68
   464  007F5C  3D                 	db	61
   465  007F5D  00                 	db	0
   466  007F5E  7F                 	db	127
   467  007F5F  10                 	db	16
   468  007F60  28                 	db	40
   469  007F61  44                 	db	68
   470  007F62  00                 	db	0
   471  007F63  00                 	db	0
   472  007F64  41                 	db	65
   473  007F65  7F                 	db	127
   474  007F66  40                 	db	64
   475  007F67  00                 	db	0
   476  007F68  7C                 	db	124
   477  007F69  04                 	db	4
   478  007F6A  18                 	db	24
   479  007F6B  04                 	db	4
   480  007F6C  78                 	db	120
   481  007F6D  7C                 	db	124
   482  007F6E  08                 	db	8
   483  007F6F  04                 	db	4
   484  007F70  04                 	db	4
   485  007F71  78                 	db	120
   486  007F72  38                 	db	56
   487  007F73  44                 	db	68
   488  007F74  44                 	db	68
   489  007F75  44                 	db	68
   490  007F76  38                 	db	56
   491  007F77  7C                 	db	124
   492  007F78  14                 	db	20
   493  007F79  14                 	db	20
   494  007F7A  14                 	db	20
   495  007F7B  08                 	db	8
   496  007F7C  08                 	db	8
   497  007F7D  14                 	db	20
   498  007F7E  14                 	db	20
   499  007F7F  18                 	db	24
   500  007F80  7C                 	db	124
   501  007F81  7C                 	db	124
   502  007F82  08                 	db	8
   503  007F83  04                 	db	4
   504  007F84  04                 	db	4
   505  007F85  08                 	db	8
   506  007F86  48                 	db	72
   507  007F87  54                 	db	84
   508  007F88  54                 	db	84
   509  007F89  54                 	db	84
   510  007F8A  20                 	db	32
   511  007F8B  04                 	db	4
   512  007F8C  3F                 	db	63
   513  007F8D  44                 	db	68
   514  007F8E  40                 	db	64
   515  007F8F  20                 	db	32
   516  007F90  3C                 	db	60
   517  007F91  40                 	db	64
   518  007F92  40                 	db	64
   519  007F93  20                 	db	32
   520  007F94  7C                 	db	124
   521  007F95  1C                 	db	28
   522  007F96  20                 	db	32
   523  007F97  40                 	db	64
   524  007F98  20                 	db	32
   525  007F99  1C                 	db	28
   526  007F9A  3C                 	db	60
   527  007F9B  40                 	db	64
   528  007F9C  30                 	db	48
   529  007F9D  40                 	db	64
   530  007F9E  3C                 	db	60
   531  007F9F  44                 	db	68
   532  007FA0  28                 	db	40
   533  007FA1  10                 	db	16
   534  007FA2  28                 	db	40
   535  007FA3  44                 	db	68
   536  007FA4  0C                 	db	12
   537  007FA5  50                 	db	80
   538  007FA6  50                 	db	80
   539  007FA7  50                 	db	80
   540  007FA8  3C                 	db	60
   541  007FA9  44                 	db	68
   542  007FAA  64                 	db	100
   543  007FAB  54                 	db	84
   544  007FAC  4C                 	db	76
   545  007FAD  44                 	db	68
   546  007FAE  00                 	db	0
   547  007FAF  08                 	db	8
   548  007FB0  36                 	db	54
   549  007FB1  41                 	db	65
   550  007FB2  00                 	db	0
   551  007FB3  00                 	db	0
   552  007FB4  00                 	db	0
   553  007FB5  7F                 	db	127
   554  007FB6  00                 	db	0
   555  007FB7  00                 	db	0
   556  007FB8  00                 	db	0
   557  007FB9  41                 	db	65
   558  007FBA  36                 	db	54
   559  007FBB  08                 	db	8
   560  007FBC  00                 	db	0
   561  007FBD  10                 	db	16
   562  007FBE  08                 	db	8
   563  007FBF  08                 	db	8
   564  007FC0  10                 	db	16
   565  007FC1  08                 	db	8
   566  007FC2  78                 	db	120
   567  007FC3  46                 	db	70
   568  007FC4  41                 	db	65
   569  007FC5  46                 	db	70
   570  007FC6  78                 	db	120
   571  007FC7                     __end_of_FONTLOOKUP:
   572                           	opt stack 0
   573  007FC7                     _dpowers:
   574                           	opt stack 0
   575  007FC7  0001               	dw	1
   576  007FC9  000A               	dw	10
   577  007FCB  0064               	dw	100
   578  007FCD  03E8               	dw	1000
   579  007FCF  2710               	dw	10000
   580  007FD1                     __end_of_dpowers:
   581                           	opt stack 0
   582  007FD1  43                 	db	67	;'C'
   583  007FD2  61                 	db	97	;'a'
   584  007FD3  72                 	db	114	;'r'
   585  007FD4  20                 	db	32
   586  007FD5  43                 	db	67	;'C'
   587  007FD6  68                 	db	104	;'h'
   588  007FD7  61                 	db	97	;'a'
   589  007FD8  72                 	db	114	;'r'
   590  007FD9  67                 	db	103	;'g'
   591  007FDA  65                 	db	101	;'e'
   592  007FDB  72                 	db	114	;'r'
   593  007FDC  00                 	db	0
   594  007FDD                     STR_7:
   595  007FDD  25                 	db	37
   596  007FDE  30                 	db	48	;'0'
   597  007FDF  33                 	db	51	;'3'
   598  007FE0  64                 	db	100	;'d'
   599  007FE1  2C                 	db	44
   600  007FE2  45                 	db	69	;'E'
   601  007FE3  0A                 	db	10
   602  007FE4  00                 	db	0
   603  007FE5  28                 	db	40
   604  007FE6  6E                 	db	110	;'n'
   605  007FE7  75                 	db	117	;'u'
   606  007FE8  6C                 	db	108	;'l'
   607  007FE9  6C                 	db	108	;'l'
   608  007FEA  29                 	db	41
   609  007FEB  00                 	db	0
   610  007FEC  4E                 	db	78	;'N'
   611  007FED  6F                 	db	111	;'o'
   612  007FEE  20                 	db	32
   613  007FEF  42                 	db	66	;'B'
   614  007FF0  4D                 	db	77	;'M'
   615  007FF1  4D                 	db	77	;'M'
   616  007FF2  00                 	db	0
   617  007FF3                     STR_3:
   618  007FF3  25                 	db	37
   619  007FF4  30                 	db	48	;'0'
   620  007FF5  33                 	db	51	;'3'
   621  007FF6  64                 	db	100	;'d'
   622  007FF7  2C                 	db	44
   623  007FF8  00                 	db	0
   624  007FF9                     STR_1:
   625  007FF9  4D                 	db	77	;'M'
   626  007FFA  2C                 	db	44
   627  007FFB  00                 	db	0
   628  007FFC                     STR_2:
   629  007FFC  25                 	db	37
   630  007FFD  73                 	db	115	;'s'
   631  007FFE  00                 	db	0
   632  0000                     
   633                           ; #config settings
   634  007FFF  00                 	db	0	; dummy byte at the end
   635  0000                     
   636                           	psect	nvCOMRAM
   637  00003A                     __pnvCOMRAM:
   638                           	opt stack 0
   639  00003A                     _serial_available:
   640                           	opt stack 0
   641  00003A                     	ds	2
   642  00003C                     _serial_read:
   643                           	opt stack 0
   644  00003C                     	ds	2
   645  00003E                     _serial_write:
   646                           	opt stack 0
   647  00003E                     	ds	2
   648  000040                     _timer0ReloadVal16bit:
   649                           	opt stack 0
   650  000040                     	ds	2
   651  000042                     _eusart1TxBufferRemaining:
   652                           	opt stack 0
   653  000042                     	ds	1
   654  000043                     _moduleAddress:
   655                           	opt stack 0
   656  000043                     	ds	1
   657                           
   658                           	psect	nvBANK0
   659  0000E3                     __pnvBANK0:
   660                           	opt stack 0
   661  0000E3                     _receiveArrayAddress:
   662                           	opt stack 0
   663  0000E3                     	ds	2
   664  0000E5                     _sendStructAddress:
   665                           	opt stack 0
   666  0000E5                     	ds	2
   667  0000E7                     _serial_peek:
   668                           	opt stack 0
   669  0000E7                     	ds	2
   670  0000E9                     _AKNAKsend:
   671                           	opt stack 0
   672  0000E9                     	ds	1
   673  0000EA                     _maxDataAddress:
   674                           	opt stack 0
   675  0000EA                     	ds	1
   676  0000                     _ANSELA	set	3896
   677  0000                     _ANSELB	set	3897
   678  0000                     _ANSELC	set	3898
   679  0000                     _ANSELD	set	3899
   680  0000                     _ANSELE	set	3900
   681  0000                     _ANSA3	set	31171
   682  0000                     _ANSB0	set	31176
   683  0000                     _ANSB1	set	31177
   684  0000                     _BAUD1CON	set	4024
   685  0000                     _BAUD2CON	set	3952
   686  0000                     _INTCON2bits	set	4081
   687  0000                     _INTCONbits	set	4082
   688  0000                     _IPR1bits	set	3999
   689  0000                     _IPR3bits	set	4005
   690  0000                     _LATA	set	3977
   691  0000                     _LATB	set	3978
   692  0000                     _LATBbits	set	3978
   693  0000                     _LATC	set	3979
   694  0000                     _LATD	set	3980
   695  0000                     _LATDbits	set	3980
   696  0000                     _LATE	set	3981
   697  0000                     _OSCCON	set	4051
   698  0000                     _OSCCON2	set	4050
   699  0000                     _OSCTUNE	set	3995
   700  0000                     _PIE1bits	set	3997
   701  0000                     _PIE3bits	set	4003
   702  0000                     _PIR1bits	set	3998
   703  0000                     _PIR3bits	set	4004
   704  0000                     _RC1STA	set	4011
   705  0000                     _RC1STAbits	set	4011
   706  0000                     _RC2STA	set	3953
   707  0000                     _RC2STAbits	set	3953
   708  0000                     _RCONbits	set	4048
   709  0000                     _RCREG1	set	4014
   710  0000                     _RCREG2	set	3956
   711  0000                     _SPBRG1	set	4015
   712  0000                     _SPBRG2	set	3957
   713  0000                     _SPBRGH1	set	4016
   714  0000                     _SPBRGH2	set	3958
   715  0000                     _SSP1ADD	set	4040
   716  0000                     _SSP1BUF	set	4041
   717  0000                     _SSP1CON1	set	4038
   718  0000                     _SSP1CON1bits	set	4038
   719  0000                     _SSP1STAT	set	4039
   720  0000                     _SSP1STATbits	set	4039
   721  0000                     _T0CON	set	4053
   722  0000                     _T0CONbits	set	4053
   723  0000                     _TMR0H	set	4055
   724  0000                     _TMR0L	set	4054
   725  0000                     _TRISA	set	3986
   726  0000                     _TRISAbits	set	3986
   727  0000                     _TRISB	set	3987
   728  0000                     _TRISBbits	set	3987
   729  0000                     _TRISC	set	3988
   730  0000                     _TRISCbits	set	3988
   731  0000                     _TRISD	set	3989
   732  0000                     _TRISDbits	set	3989
   733  0000                     _TRISE	set	3990
   734  0000                     _TX1STA	set	4012
   735  0000                     _TX2STA	set	3954
   736  0000                     _TXREG1	set	4013
   737  0000                     _TXREG2	set	3955
   738  0000                     _WPUB	set	3937
   739  0000                     _LATA3	set	31819
   740  0000                     _LATA7	set	31823
   741  0000                     _LATB0	set	31824
   742  0000                     _LATB1	set	31825
   743  0000                     _LATB3	set	31827
   744  0000                     _LATB4	set	31828
   745  0000                     _LATB5	set	31829
   746  0000                     _LATC0	set	31832
   747  0000                     _LATC1	set	31833
   748  0000                     _LATD0	set	31840
   749  0000                     _LATD3	set	31843
   750  0000                     _TRISB0	set	31896
   751  0000                     _TRISB1	set	31897
   752  0000                     _TRISD0	set	31912
   753  0000                     _TRISD2	set	31914
   754  0000                     _TRISD3	set	31915
   755                           
   756                           	psect	cinit
   757  001292                     __pcinit:
   758                           	opt stack 0
   759  001292                     start_initialization:
   760                           	opt stack 0
   761  001292                     __initialization:
   762                           	opt stack 0
   763                           
   764                           ; Clear objects allocated to BANK4 (206 bytes)
   765  001292  EE04  F000         	lfsr	0,__pbssBANK4
   766  001296  0ECE               	movlw	206
   767  001298                     clear_0:
   768  001298  6AEE               	clrf	postinc0,c
   769  00129A  06E8               	decf	wreg,f,c
   770  00129C  E1FD               	bnz	clear_0
   771                           
   772                           ; Clear objects allocated to BANK3 (206 bytes)
   773  00129E  EE03  F000         	lfsr	0,__pbssBANK3
   774  0012A2  0ECE               	movlw	206
   775  0012A4                     clear_1:
   776  0012A4  6AEE               	clrf	postinc0,c
   777  0012A6  06E8               	decf	wreg,f,c
   778  0012A8  E1FD               	bnz	clear_1
   779                           
   780                           ; Clear objects allocated to BANK2 (200 bytes)
   781  0012AA  EE02  F000         	lfsr	0,__pbssBANK2
   782  0012AE  0EC8               	movlw	200
   783  0012B0                     clear_2:
   784  0012B0  6AEE               	clrf	postinc0,c
   785  0012B2  06E8               	decf	wreg,f,c
   786  0012B4  E1FD               	bnz	clear_2
   787                           
   788                           ; Clear objects allocated to BANK1 (256 bytes)
   789  0012B6  EE01  F000         	lfsr	0,__pbssBANK1
   790  0012BA  EE11 F000          	lfsr	1,256
   791  0012BE                     clear_3:
   792  0012BE  6AEE               	clrf	postinc0,c
   793  0012C0  50E5               	movf	postdec1,w,c
   794  0012C2  50E1               	movf	fsr1l,w,c
   795  0012C4  E1FC               	bnz	clear_3
   796  0012C6  50E2               	movf	fsr1h,w,c
   797  0012C8  E1FA               	bnz	clear_3
   798                           
   799                           ; Clear objects allocated to BANK0 (104 bytes)
   800  0012CA  EE00  F060         	lfsr	0,__pbssBANK0
   801  0012CE  0E68               	movlw	104
   802  0012D0                     clear_4:
   803  0012D0  6AEE               	clrf	postinc0,c
   804  0012D2  06E8               	decf	wreg,f,c
   805  0012D4  E1FD               	bnz	clear_4
   806                           
   807                           ; Clear objects allocated to COMRAM (20 bytes)
   808  0012D6  EE00  F026         	lfsr	0,__pbssCOMRAM
   809  0012DA  0E14               	movlw	20
   810  0012DC                     clear_5:
   811  0012DC  6AEE               	clrf	postinc0,c
   812  0012DE  06E8               	decf	wreg,f,c
   813  0012E0  E1FD               	bnz	clear_5
   814                           
   815                           ; Initialize objects allocated to COMRAM (1 bytes)
   816                           ; load TBLPTR registers with __pidataCOMRAM
   817  0012E2  0E48               	movlw	low __pidataCOMRAM
   818  0012E4  6EF6               	movwf	tblptrl,c
   819  0012E6  0E19               	movlw	high __pidataCOMRAM
   820  0012E8  6EF7               	movwf	tblptrh,c
   821  0012EA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   822  0012EC  6EF8               	movwf	tblptru,c
   823  0012EE  0009               	tblrd		*+	;fetch initializer
   824  0012F0  CFF5 F044          	movff	tablat,__pdataCOMRAM
   825  0012F4                     end_of_initialization:
   826                           	opt stack 0
   827  0012F4                     __end_of__initialization:
   828                           	opt stack 0
   829  0012F4  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   830  0012F6  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   831  0012F8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   832  0012FA  6EF8               	movwf	tblptru,c
   833  0012FC  0100               	movlb	0
   834  0012FE  EFEC  F00B         	goto	_main	;jump to C main() function
   835                           tblptru	equ	0xFF8
   836                           tblptrh	equ	0xFF7
   837                           tblptrl	equ	0xFF6
   838                           tablat	equ	0xFF5
   839                           postinc0	equ	0xFEE
   840                           wreg	equ	0xFE8
   841                           postdec1	equ	0xFE5
   842                           fsr1h	equ	0xFE2
   843                           fsr1l	equ	0xFE1
   844                           
   845                           	psect	bssCOMRAM
   846  000026                     __pbssCOMRAM:
   847                           	opt stack 0
   848  000026                     _time:
   849                           	opt stack 0
   850  000026                     	ds	4
   851  00002A                     _Start:
   852                           	opt stack 0
   853  00002A                     	ds	2
   854  00002C                     _group:
   855                           	opt stack 0
   856  00002C                     	ds	2
   857  00002E                     _PowerOn:
   858                           	opt stack 0
   859  00002E                     	ds	1
   860  00002F                     _calc_CS:
   861                           	opt stack 0
   862  00002F                     	ds	1
   863  000030                     _eusart1RxCount:
   864                           	opt stack 0
   865  000030                     	ds	1
   866  000031                     _eusart1RxHead:
   867                           	opt stack 0
   868  000031                     	ds	1
   869  000032                     _eusart1RxTail:
   870                           	opt stack 0
   871  000032                     	ds	1
   872  000033                     _eusart1TxHead:
   873                           	opt stack 0
   874  000033                     	ds	1
   875  000034                     _eusart1TxTail:
   876                           	opt stack 0
   877  000034                     	ds	1
   878  000035                     _i:
   879                           	opt stack 0
   880  000035                     	ds	1
   881  000036                     _returnAddress:
   882                           	opt stack 0
   883  000036                     	ds	1
   884  000037                     _rx_address:
   885                           	opt stack 0
   886  000037                     	ds	1
   887  000038                     _rx_array_inx:
   888                           	opt stack 0
   889  000038                     	ds	1
   890  000039                     _rx_len:
   891                           	opt stack 0
   892  000039                     	ds	1
   893                           tblptru	equ	0xFF8
   894                           tblptrh	equ	0xFF7
   895                           tblptrl	equ	0xFF6
   896                           tablat	equ	0xFF5
   897                           postinc0	equ	0xFEE
   898                           wreg	equ	0xFE8
   899                           postdec1	equ	0xFE5
   900                           fsr1h	equ	0xFE2
   901                           fsr1l	equ	0xFE1
   902                           
   903                           	psect	dataCOMRAM
   904  000044                     __pdataCOMRAM:
   905                           	opt stack 0
   906  000044                     _Transmit_stall:
   907                           	opt stack 0
   908  000044                     	ds	1
   909                           tblptru	equ	0xFF8
   910                           tblptrh	equ	0xFF7
   911                           tblptrl	equ	0xFF6
   912                           tablat	equ	0xFF5
   913                           postinc0	equ	0xFEE
   914                           wreg	equ	0xFE8
   915                           postdec1	equ	0xFE5
   916                           fsr1h	equ	0xFE2
   917                           fsr1l	equ	0xFE1
   918                           
   919                           	psect	bssBANK0
   920  000060                     __pbssBANK0:
   921                           	opt stack 0
   922  000060                     _ddata:
   923                           	opt stack 0
   924  000060                     	ds	11
   925  00006B                     _eusart1RxBuffer:
   926                           	opt stack 0
   927  00006B                     	ds	8
   928  000073                     _eusart1TxBuffer:
   929                           	opt stack 0
   930  000073                     	ds	8
   931  00007B                     _LEDtime:
   932                           	opt stack 0
   933  00007B                     	ds	4
   934  00007F                     _lastLEDTime:
   935                           	opt stack 0
   936  00007F                     	ds	4
   937  000083                     _talkTime:
   938                           	opt stack 0
   939  000083                     	ds	4
   940  000087                     _addressErrorCounter:
   941                           	opt stack 0
   942  000087                     	ds	2
   943  000089                     _alignErrorCounter:
   944                           	opt stack 0
   945  000089                     	ds	2
   946  00008B                     _crcErrorCounter:
   947                           	opt stack 0
   948  00008B                     	ds	2
   949  00008D                     _dataAdressErrorCounter:
   950                           	opt stack 0
   951  00008D                     	ds	2
   952  00008F                     _ChargerData:
   953                           	opt stack 0
   954  00008F                     	ds	40
   955  0000B7                     _crc_buffer:
   956                           	opt stack 0
   957  0000B7                     	ds	17
   958                           tblptru	equ	0xFF8
   959                           tblptrh	equ	0xFF7
   960                           tblptrl	equ	0xFF6
   961                           tablat	equ	0xFF5
   962                           postinc0	equ	0xFEE
   963                           wreg	equ	0xFE8
   964                           postdec1	equ	0xFE5
   965                           fsr1h	equ	0xFE2
   966                           fsr1l	equ	0xFE1
   967                           
   968                           	psect	bssBANK1
   969  000100                     __pbssBANK1:
   970                           	opt stack 0
   971  000100                     _ring_buffer:
   972                           	opt stack 0
   973  000100                     	ds	206
   974  0001CE                     _receiveArray:
   975                           	opt stack 0
   976  0001CE                     	ds	50
   977                           tblptru	equ	0xFF8
   978                           tblptrh	equ	0xFF7
   979                           tblptrl	equ	0xFF6
   980                           tablat	equ	0xFF5
   981                           postinc0	equ	0xFEE
   982                           wreg	equ	0xFE8
   983                           postdec1	equ	0xFE5
   984                           fsr1h	equ	0xFE2
   985                           fsr1l	equ	0xFE1
   986                           
   987                           	psect	bssBANK2
   988  000200                     __pbssBANK2:
   989                           	opt stack 0
   990  000200                     _rx_buffer:
   991                           	opt stack 0
   992  000200                     	ds	200
   993                           tblptru	equ	0xFF8
   994                           tblptrh	equ	0xFF7
   995                           tblptrl	equ	0xFF6
   996                           tablat	equ	0xFF5
   997                           postinc0	equ	0xFEE
   998                           wreg	equ	0xFE8
   999                           postdec1	equ	0xFE5
  1000                           fsr1h	equ	0xFE2
  1001                           fsr1l	equ	0xFE1
  1002                           
  1003                           	psect	bssBANK3
  1004  000300                     __pbssBANK3:
  1005                           	opt stack 0
  1006  000300                     _input_buffer:
  1007                           	opt stack 0
  1008  000300                     	ds	206
  1009                           tblptru	equ	0xFF8
  1010                           tblptrh	equ	0xFF7
  1011                           tblptrl	equ	0xFF6
  1012                           tablat	equ	0xFF5
  1013                           postinc0	equ	0xFEE
  1014                           wreg	equ	0xFE8
  1015                           postdec1	equ	0xFE5
  1016                           fsr1h	equ	0xFE2
  1017                           fsr1l	equ	0xFE1
  1018                           
  1019                           	psect	bssBANK4
  1020  000400                     __pbssBANK4:
  1021                           	opt stack 0
  1022  000400                     _output_buffer:
  1023                           	opt stack 0
  1024  000400                     	ds	206
  1025                           tblptru	equ	0xFF8
  1026                           tblptrh	equ	0xFF7
  1027                           tblptrl	equ	0xFF6
  1028                           tablat	equ	0xFF5
  1029                           postinc0	equ	0xFEE
  1030                           wreg	equ	0xFE8
  1031                           postdec1	equ	0xFE5
  1032                           fsr1h	equ	0xFE2
  1033                           fsr1l	equ	0xFE1
  1034                           
  1035                           	psect	cstackBANK0
  1036  0000C8                     __pcstackBANK0:
  1037                           	opt stack 0
  1038  0000C8                     ??_FastTransfer_buffer_put:
  1039  0000C8                     Send_put@_data:
  1040                           	opt stack 0
  1041  0000C8                     begin@ptr:
  1042                           	opt stack 0
  1043  0000C8                     FastTransfer_buffer_flush@_this:
  1044                           	opt stack 0
  1045  0000C8                     crcBufS_get@wantedTime:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x0
  1049  0000C8                     	ds	2
  1050  0000CA                     begin@maxSize:
  1051                           	opt stack 0
  1052  0000CA                     CRCcheck@SentCRC:
  1053                           	opt stack 0
  1054  0000CA                     ToSend@what:
  1055                           	opt stack 0
  1056  0000CA                     FastTransfer_buffer_flush@clearBuffer:
  1057                           	opt stack 0
  1058                           
  1059                           ; 2 bytes @ 0x2
  1060  0000CA                     	ds	1
  1061  0000CB                     begin@givenAddress:
  1062                           	opt stack 0
  1063  0000CB                     CRCcheck@calculatedCRC:
  1064                           	opt stack 0
  1065                           
  1066                           ; 1 bytes @ 0x3
  1067  0000CB                     	ds	1
  1068  0000CC                     ??_sendData:
  1069  0000CC                     begin@error:
  1070                           	opt stack 0
  1071  0000CC                     ToSend@where:
  1072                           	opt stack 0
  1073  0000CC                     CRCcheck@arrayHolder:
  1074                           	opt stack 0
  1075                           
  1076                           ; 3 bytes @ 0x4
  1077  0000CC                     	ds	1
  1078  0000CD                     sendData@whereToSend:
  1079                           	opt stack 0
  1080  0000CD                     begin@stufftosend:
  1081                           	opt stack 0
  1082                           
  1083                           ; 2 bytes @ 0x5
  1084  0000CD                     	ds	1
  1085  0000CE                     sendData@CS:
  1086                           	opt stack 0
  1087                           
  1088                           ; 1 bytes @ 0x6
  1089  0000CE                     	ds	1
  1090  0000CF                     begin@stufftoreceive:
  1091                           	opt stack 0
  1092  0000CF                     sendData@i:
  1093                           	opt stack 0
  1094  0000CF                     CRCcheck@rt:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x7
  1098  0000CF                     	ds	2
  1099  0000D1                     ??_receiveData:
  1100  0000D1                     begin@stuffavailable:
  1101                           	opt stack 0
  1102                           
  1103                           ; 2 bytes @ 0x9
  1104  0000D1                     	ds	2
  1105  0000D3                     begin@stuffpeek:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0xB
  1109  0000D3                     	ds	4
  1110  0000D7                     receiveData@holder:
  1111                           	opt stack 0
  1112                           
  1113                           ; 3 bytes @ 0xF
  1114  0000D7                     	ds	3
  1115  0000DA                     receiveData@holder_1756:
  1116                           	opt stack 0
  1117                           
  1118                           ; 3 bytes @ 0x12
  1119  0000DA                     	ds	3
  1120  0000DD                     receiveData@crcHolder:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0x15
  1124  0000DD                     	ds	1
  1125  0000DE                     receiveData@crcHolder_1757:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0x16
  1129  0000DE                     	ds	1
  1130  0000DF                     receiveData@u:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0x17
  1134  0000DF                     	ds	2
  1135  0000E1                     receiveData@r:
  1136                           	opt stack 0
  1137                           
  1138                           ; 2 bytes @ 0x19
  1139  0000E1                     	ds	2
  1140                           tblptru	equ	0xFF8
  1141                           tblptrh	equ	0xFF7
  1142                           tblptrl	equ	0xFF6
  1143                           tablat	equ	0xFF5
  1144                           postinc0	equ	0xFEE
  1145                           wreg	equ	0xFE8
  1146                           postdec1	equ	0xFE5
  1147                           fsr1h	equ	0xFE2
  1148                           fsr1l	equ	0xFE1
  1149                           
  1150                           	psect	cstackCOMRAM
  1151  000001                     __pcstackCOMRAM:
  1152                           	opt stack 0
  1153  000001                     ?i2_UART_buff_size:
  1154                           	opt stack 0
  1155  000001                     ?i2_UART_buff_modulo_inc:
  1156                           	opt stack 0
  1157  000001                     i2UART_buff_size@_this:
  1158                           	opt stack 0
  1159  000001                     i2UART_buff_modulo_inc@value:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x0
  1163  000001                     	ds	2
  1164  000003                     i2UART_buff_modulo_inc@modulus:
  1165                           	opt stack 0
  1166                           
  1167                           ; 2 bytes @ 0x2
  1168  000003                     	ds	2
  1169  000005                     i2UART_buff_modulo_inc@my_value:
  1170                           	opt stack 0
  1171                           
  1172                           ; 2 bytes @ 0x4
  1173  000005                     	ds	2
  1174  000007                     i2UART_buff_put@_this:
  1175                           	opt stack 0
  1176  000007                     i2UART_buff_get@_this:
  1177                           	opt stack 0
  1178                           
  1179                           ; 2 bytes @ 0x6
  1180  000007                     	ds	2
  1181  000009                     ??i2_UART_buff_get:
  1182  000009                     i2UART_buff_put@c:
  1183                           	opt stack 0
  1184                           
  1185                           ; 1 bytes @ 0x8
  1186  000009                     	ds	1
  1187  00000A                     ??i2_UART_buff_put:
  1188                           
  1189                           ; 1 bytes @ 0x9
  1190  00000A                     	ds	1
  1191  00000B                     i2UART_buff_get@c:
  1192                           	opt stack 0
  1193                           
  1194                           ; 1 bytes @ 0xA
  1195  00000B                     	ds	1
  1196  00000C                     EUSART2_Receive_ISR@data:
  1197                           	opt stack 0
  1198                           
  1199                           ; 1 bytes @ 0xB
  1200  00000C                     	ds	1
  1201  00000D                     ??_INTERRUPT_InterruptManager:
  1202                           
  1203                           ; 1 bytes @ 0xC
  1204  00000D                     	ds	14
  1205  00001B                     ??_TMR0_Initialize:
  1206  00001B                     ??_updateTimers:
  1207  00001B                     ?_FastTransfer_buffer_modulo_inc:
  1208                           	opt stack 0
  1209  00001B                     ?_UART_buff_modulo_inc:
  1210                           	opt stack 0
  1211  00001B                     ?_time_get:
  1212                           	opt stack 0
  1213  00001B                     ?_UART_buff_size:
  1214                           	opt stack 0
  1215  00001B                     ?___awdiv:
  1216                           	opt stack 0
  1217  00001B                     time_Set@value:
  1218                           	opt stack 0
  1219  00001B                     CRC8@data:
  1220                           	opt stack 0
  1221  00001B                     FastTransfer_buffer_modulo_inc@value:
  1222                           	opt stack 0
  1223  00001B                     crcBufS_put@_this:
  1224                           	opt stack 0
  1225  00001B                     crcBufS_status_put@_this:
  1226                           	opt stack 0
  1227  00001B                     crcBufS_get@_this:
  1228                           	opt stack 0
  1229  00001B                     UART_buff_size@_this:
  1230                           	opt stack 0
  1231  00001B                     UART_buff_modulo_inc@value:
  1232                           	opt stack 0
  1233  00001B                     UART_buff_peek@_this:
  1234                           	opt stack 0
  1235  00001B                     Delay@wait:
  1236                           	opt stack 0
  1237  00001B                     ___awdiv@dividend:
  1238                           	opt stack 0
  1239  00001B                     memset@p1:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x1A
  1243  00001B                     	ds	2
  1244  00001D                     ??_Delay:
  1245  00001D                     ??_UART_buff_peek:
  1246  00001D                     ?_Receive_available:
  1247                           	opt stack 0
  1248  00001D                     time_get@WhatTime:
  1249                           	opt stack 0
  1250  00001D                     time_Set@WhatTime:
  1251                           	opt stack 0
  1252  00001D                     CRC8@len:
  1253                           	opt stack 0
  1254  00001D                     crcBufS_put@address:
  1255                           	opt stack 0
  1256  00001D                     crcBufS_status_put@time:
  1257                           	opt stack 0
  1258  00001D                     crcBufS_get@time:
  1259                           	opt stack 0
  1260  00001D                     FastTransfer_buffer_modulo_inc@modulus:
  1261                           	opt stack 0
  1262  00001D                     UART_buff_modulo_inc@modulus:
  1263                           	opt stack 0
  1264  00001D                     ___awdiv@divisor:
  1265                           	opt stack 0
  1266  00001D                     memset@c:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x1C
  1270  00001D                     	ds	1
  1271  00001E                     CRC8@sum:
  1272                           	opt stack 0
  1273  00001E                     crcBufS_put@oldCRC:
  1274                           	opt stack 0
  1275  00001E                     crcBufS_status_put@status:
  1276                           	opt stack 0
  1277  00001E                     crcBufS_get@space:
  1278                           	opt stack 0
  1279  00001E                     Delay@i:
  1280                           	opt stack 0
  1281                           
  1282                           ; 2 bytes @ 0x1D
  1283  00001E                     	ds	1
  1284  00001F                     ??_crcBufS_get:
  1285  00001F                     ??_crcBufS_status_put:
  1286  00001F                     CRC8@extract:
  1287                           	opt stack 0
  1288  00001F                     crcBufS_put@status:
  1289                           	opt stack 0
  1290  00001F                     ___awdiv@counter:
  1291                           	opt stack 0
  1292  00001F                     FastTransfer_buffer_modulo_inc@my_value:
  1293                           	opt stack 0
  1294  00001F                     UART_buff_modulo_inc@my_value:
  1295                           	opt stack 0
  1296  00001F                     memset@n:
  1297                           	opt stack 0
  1298                           
  1299                           ; 2 bytes @ 0x1E
  1300  00001F                     	ds	1
  1301  000020                     ??_crcBufS_put:
  1302  000020                     CRC8@tempI:
  1303                           	opt stack 0
  1304  000020                     ___awdiv@sign:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x1F
  1308  000020                     	ds	1
  1309  000021                     CRC8@crc:
  1310                           	opt stack 0
  1311  000021                     FastTransfer_buffer_put@_this:
  1312                           	opt stack 0
  1313  000021                     UART_buff_put@_this:
  1314                           	opt stack 0
  1315  000021                     UART_buff_get@_this:
  1316                           	opt stack 0
  1317  000021                     ___awdiv@quotient:
  1318                           	opt stack 0
  1319  000021                     memset@p:
  1320                           	opt stack 0
  1321                           
  1322                           ; 2 bytes @ 0x20
  1323  000021                     	ds	2
  1324  000023                     ??_UART_buff_get:
  1325  000023                     FastTransfer_buffer_put@towhere:
  1326                           	opt stack 0
  1327  000023                     UART_buff_put@c:
  1328                           	opt stack 0
  1329  000023                     crcBufS_status_put@wantedTime:
  1330                           	opt stack 0
  1331  000023                     UART_buff_init@_this:
  1332                           	opt stack 0
  1333                           
  1334                           ; 2 bytes @ 0x22
  1335  000023                     	ds	1
  1336  000024                     ??_UART_buff_put:
  1337  000024                     FastTransfer_buffer_put@towhat:
  1338                           	opt stack 0
  1339                           
  1340                           ; 2 bytes @ 0x23
  1341  000024                     	ds	1
  1342  000025                     UART_buff_get@c:
  1343                           	opt stack 0
  1344                           
  1345                           ; 1 bytes @ 0x24
  1346  000025                     	ds	1
  1347  000026                     tblptru	equ	0xFF8
  1348                           tblptrh	equ	0xFF7
  1349                           tblptrl	equ	0xFF6
  1350                           tablat	equ	0xFF5
  1351                           postinc0	equ	0xFEE
  1352                           wreg	equ	0xFE8
  1353                           postdec1	equ	0xFE5
  1354                           fsr1h	equ	0xFE2
  1355                           fsr1l	equ	0xFE1
  1356                           
  1357                           ; 1 bytes @ 0x25
  1358 ;;
  1359 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1360 ;;
  1361 ;; *************** function _main *****************
  1362 ;; Defined at:
  1363 ;;		line 16 in file "main.c"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;		None
  1366 ;; Auto vars:     Size  Location     Type
  1367 ;;		None
  1368 ;; Return value:  Size  Location     Type
  1369 ;;                  1    wreg      void 
  1370 ;; Registers used:
  1371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1372 ;; Tracked objects:
  1373 ;;		On entry : 0/0
  1374 ;;		On exit  : 0/0
  1375 ;;		Unchanged: 0/0
  1376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1377 ;;      Params:         0       0       0       0       0       0       0
  1378 ;;      Locals:         0       0       0       0       0       0       0
  1379 ;;      Temps:          0       0       0       0       0       0       0
  1380 ;;      Totals:         0       0       0       0       0       0       0
  1381 ;;Total ram usage:        0 bytes
  1382 ;; Hardware stack levels required when called:   11
  1383 ;; This function calls:
  1384 ;;		_SYSTEM_Initialize
  1385 ;;		_SetBMM
  1386 ;;		_ledDebug
  1387 ;;		_updateTimers
  1388 ;; This function is called by:
  1389 ;;		Startup code after reset
  1390 ;; This function uses a non-reentrant model
  1391 ;;
  1392                           
  1393                           	psect	text0
  1394  0017D8                     __ptext0:
  1395                           	opt stack 0
  1396  0017D8                     _main:
  1397                           	opt stack 20
  1398                           
  1399                           ;main.c: 18: SYSTEM_Initialize();
  1400                           
  1401                           ;incstack = 0
  1402  0017D8  EC39  F00C         	call	_SYSTEM_Initialize	;wreg free
  1403                           
  1404                           ;main.c: 37: (INTCONbits.GIE = 1);
  1405  0017DC  8EF2               	bsf	intcon,7,c	;volatile
  1406                           
  1407                           ;main.c: 40: (INTCONbits.PEIE = 1);
  1408  0017DE  8CF2               	bsf	intcon,6,c	;volatile
  1409                           
  1410                           ;main.c: 55: do { LATC1 = 1; } while(0);
  1411  0017E0  828B               	bsf	3979,1,c	;volatile
  1412                           
  1413                           ;main.c: 60: do { ANSA3 = 0; } while(0);
  1414  0017E2  010F               	movlb	15	; () banked
  1415  0017E4  9738               	bcf	56,3,b	;volatile
  1416  0017E6                     l4225:
  1417  0017E6  EC6A  F00A         	call	_SetBMM	;wreg free
  1418  0017EA  0900               	iorlw	0
  1419  0017EC  A4D8               	btfss	status,2,c
  1420  0017EE  D7FB               	goto	l4225
  1421  0017F0                     l4227:
  1422                           
  1423                           ;main.c: 72: updateTimers();
  1424  0017F0  ECB7  F009         	call	_updateTimers	;wreg free
  1425                           
  1426                           ;main.c: 73: ledDebug();
  1427  0017F4  EC2B  F00B         	call	_ledDebug	;wreg free
  1428  0017F8  D7FB               	goto	l4227
  1429  0017FA                     __end_of_main:
  1430                           	opt stack 0
  1431                           tblptru	equ	0xFF8
  1432                           tblptrh	equ	0xFF7
  1433                           tblptrl	equ	0xFF6
  1434                           tablat	equ	0xFF5
  1435                           intcon	equ	0xFF2
  1436                           postinc0	equ	0xFEE
  1437                           wreg	equ	0xFE8
  1438                           postdec1	equ	0xFE5
  1439                           fsr1h	equ	0xFE2
  1440                           fsr1l	equ	0xFE1
  1441                           status	equ	0xFD8
  1442                           
  1443 ;; *************** function _updateTimers *****************
  1444 ;; Defined at:
  1445 ;;		line 148 in file "mcc_generated_files/tmr0.c"
  1446 ;; Parameters:    Size  Location     Type
  1447 ;;		None
  1448 ;; Auto vars:     Size  Location     Type
  1449 ;;		None
  1450 ;; Return value:  Size  Location     Type
  1451 ;;                  1    wreg      void 
  1452 ;; Registers used:
  1453 ;;		wreg, status,2, status,0
  1454 ;; Tracked objects:
  1455 ;;		On entry : 0/0
  1456 ;;		On exit  : 0/0
  1457 ;;		Unchanged: 0/0
  1458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1459 ;;      Params:         0       0       0       0       0       0       0
  1460 ;;      Locals:         0       0       0       0       0       0       0
  1461 ;;      Temps:          8       0       0       0       0       0       0
  1462 ;;      Totals:         8       0       0       0       0       0       0
  1463 ;;Total ram usage:        8 bytes
  1464 ;; Hardware stack levels used:    1
  1465 ;; Hardware stack levels required when called:    4
  1466 ;; This function calls:
  1467 ;;		Nothing
  1468 ;; This function is called by:
  1469 ;;		_main
  1470 ;; This function uses a non-reentrant model
  1471 ;;
  1472                           
  1473                           	psect	text1
  1474  00136E                     __ptext1:
  1475                           	opt stack 0
  1476  00136E                     _updateTimers:
  1477                           	opt stack 26
  1478                           
  1479                           ;tmr0.c: 149: LEDtime += (time - lastLEDTime);
  1480                           
  1481                           ;incstack = 0
  1482  00136E  C07F  F01B         	movff	_lastLEDTime,??_updateTimers
  1483  001372  C080  F01C         	movff	_lastLEDTime+1,??_updateTimers+1
  1484  001376  C081  F01D         	movff	_lastLEDTime+2,??_updateTimers+2
  1485  00137A  C082  F01E         	movff	_lastLEDTime+3,??_updateTimers+3
  1486  00137E  1E1B               	comf	??_updateTimers,f,c
  1487  001380  1E1C               	comf	??_updateTimers+1,f,c
  1488  001382  1E1D               	comf	??_updateTimers+2,f,c
  1489  001384  1E1E               	comf	??_updateTimers+3,f,c
  1490  001386  2A1B               	incf	??_updateTimers,f,c
  1491  001388  0E00               	movlw	0
  1492  00138A  221C               	addwfc	??_updateTimers+1,f,c
  1493  00138C  221D               	addwfc	??_updateTimers+2,f,c
  1494  00138E  221E               	addwfc	??_updateTimers+3,f,c
  1495  001390  5026               	movf	_time,w,c
  1496  001392  241B               	addwf	??_updateTimers,w,c
  1497  001394  6E1F               	movwf	(??_updateTimers+4)& (0+255),c
  1498  001396  5027               	movf	_time+1,w,c
  1499  001398  201C               	addwfc	??_updateTimers+1,w,c
  1500  00139A  6E20               	movwf	(??_updateTimers+5)& (0+255),c
  1501  00139C  5028               	movf	_time+2,w,c
  1502  00139E  201D               	addwfc	??_updateTimers+2,w,c
  1503  0013A0  6E21               	movwf	(??_updateTimers+6)& (0+255),c
  1504  0013A2  5029               	movf	_time+3,w,c
  1505  0013A4  201E               	addwfc	??_updateTimers+3,w,c
  1506  0013A6  6E22               	movwf	(??_updateTimers+7)& (0+255),c
  1507  0013A8  501F               	movf	??_updateTimers+4,w,c
  1508  0013AA  0100               	movlb	0	; () banked
  1509  0013AC  277B               	addwf	_LEDtime& (0+255),f,b
  1510  0013AE  5020               	movf	??_updateTimers+5,w,c
  1511  0013B0  0100               	movlb	0	; () banked
  1512  0013B2  237C               	addwfc	(_LEDtime+1)& (0+255),f,b
  1513  0013B4  5021               	movf	??_updateTimers+6,w,c
  1514  0013B6  0100               	movlb	0	; () banked
  1515  0013B8  237D               	addwfc	(_LEDtime+2)& (0+255),f,b
  1516  0013BA  5022               	movf	??_updateTimers+7,w,c
  1517  0013BC  0100               	movlb	0	; () banked
  1518  0013BE  237E               	addwfc	(_LEDtime+3)& (0+255),f,b
  1519                           
  1520                           ; BSR set to: 0
  1521                           ;tmr0.c: 150: lastLEDTime = time;
  1522  0013C0  C026  F07F         	movff	_time,_lastLEDTime
  1523  0013C4  C027  F080         	movff	_time+1,_lastLEDTime+1
  1524  0013C8  C028  F081         	movff	_time+2,_lastLEDTime+2
  1525  0013CC  C029  F082         	movff	_time+3,_lastLEDTime+3
  1526                           
  1527                           ; BSR set to: 0
  1528  0013D0  0012               	return		;funcret
  1529  0013D2                     __end_of_updateTimers:
  1530                           	opt stack 0
  1531                           tblptru	equ	0xFF8
  1532                           tblptrh	equ	0xFF7
  1533                           tblptrl	equ	0xFF6
  1534                           tablat	equ	0xFF5
  1535                           intcon	equ	0xFF2
  1536                           postinc0	equ	0xFEE
  1537                           wreg	equ	0xFE8
  1538                           postdec1	equ	0xFE5
  1539                           fsr1h	equ	0xFE2
  1540                           fsr1l	equ	0xFE1
  1541                           status	equ	0xFD8
  1542                           
  1543 ;; *************** function _ledDebug *****************
  1544 ;; Defined at:
  1545 ;;		line 147 in file "Functions.c"
  1546 ;; Parameters:    Size  Location     Type
  1547 ;;		None
  1548 ;; Auto vars:     Size  Location     Type
  1549 ;;		None
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  1    wreg      void 
  1552 ;; Registers used:
  1553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1559 ;;      Params:         0       0       0       0       0       0       0
  1560 ;;      Locals:         0       0       0       0       0       0       0
  1561 ;;      Temps:          0       0       0       0       0       0       0
  1562 ;;      Totals:         0       0       0       0       0       0       0
  1563 ;;Total ram usage:        0 bytes
  1564 ;; Hardware stack levels used:    1
  1565 ;; Hardware stack levels required when called:   10
  1566 ;; This function calls:
  1567 ;;		_respondChargerAsECU
  1568 ;;		_time_Set
  1569 ;;		_time_get
  1570 ;;		_updateComms
  1571 ;; This function is called by:
  1572 ;;		_main
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           	psect	text2
  1577  001656                     __ptext2:
  1578                           	opt stack 0
  1579  001656                     _ledDebug:
  1580                           	opt stack 20
  1581                           
  1582                           ;Functions.c: 148: if (time_get(1) > 4) {
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;incstack = 0
  1586  001656  0E01               	movlw	1
  1587  001658  EC7E  F00C         	call	_time_get
  1588  00165C  BE1C               	btfsc	?_time_get+1,7,c
  1589  00165E  0012               	return	
  1590  001660  501C               	movf	?_time_get+1,w,c
  1591  001662  E104               	bnz	u4440
  1592  001664  0E05               	movlw	5
  1593  001666  5C1B               	subwf	?_time_get,w,c
  1594  001668  A0D8               	btfss	status,0,c
  1595  00166A  0012               	return	
  1596  00166C                     u4440:
  1597                           
  1598                           ;Functions.c: 150: updateComms();
  1599  00166C  EC52  F00C         	call	_updateComms	;wreg free
  1600                           
  1601                           ;Functions.c: 151: time_Set(1, 0);
  1602  001670  0E00               	movlw	0
  1603  001672  6E1C               	movwf	time_Set@value+1,c
  1604  001674  0E00               	movlw	0
  1605  001676  6E1B               	movwf	time_Set@value,c
  1606  001678  0E01               	movlw	1
  1607  00167A  ECFD  F00B         	call	_time_Set
  1608                           
  1609                           ;Functions.c: 152: respondChargerAsECU();
  1610  00167E  ECAA  F00A         	call	_respondChargerAsECU	;wreg free
  1611  001682  0012               	return	
  1612  001684                     __end_of_ledDebug:
  1613                           	opt stack 0
  1614                           tblptru	equ	0xFF8
  1615                           tblptrh	equ	0xFF7
  1616                           tblptrl	equ	0xFF6
  1617                           tablat	equ	0xFF5
  1618                           intcon	equ	0xFF2
  1619                           postinc0	equ	0xFEE
  1620                           wreg	equ	0xFE8
  1621                           postdec1	equ	0xFE5
  1622                           fsr1h	equ	0xFE2
  1623                           fsr1l	equ	0xFE1
  1624                           status	equ	0xFD8
  1625                           
  1626 ;; *************** function _updateComms *****************
  1627 ;; Defined at:
  1628 ;;		line 21 in file "Communications.c"
  1629 ;; Parameters:    Size  Location     Type
  1630 ;;		None
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;		None
  1633 ;; Return value:  Size  Location     Type
  1634 ;;                  1    wreg      void 
  1635 ;; Registers used:
  1636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1637 ;; Tracked objects:
  1638 ;;		On entry : 0/0
  1639 ;;		On exit  : 0/0
  1640 ;;		Unchanged: 0/0
  1641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1642 ;;      Params:         0       0       0       0       0       0       0
  1643 ;;      Locals:         0       0       0       0       0       0       0
  1644 ;;      Temps:          0       0       0       0       0       0       0
  1645 ;;      Totals:         0       0       0       0       0       0       0
  1646 ;;Total ram usage:        0 bytes
  1647 ;; Hardware stack levels used:    1
  1648 ;; Hardware stack levels required when called:    9
  1649 ;; This function calls:
  1650 ;;		_receiveData
  1651 ;; This function is called by:
  1652 ;;		_ledDebug
  1653 ;; This function uses a non-reentrant model
  1654 ;;
  1655                           
  1656                           	psect	text3
  1657  0018A4                     __ptext3:
  1658                           	opt stack 0
  1659  0018A4                     _updateComms:
  1660                           	opt stack 20
  1661                           
  1662                           ;Communications.c: 22: if (receiveData()) {
  1663                           
  1664                           ;incstack = 0
  1665  0018A4  EC5E  F000         	call	_receiveData	;wreg free
  1666  0018A8  0900               	iorlw	0
  1667  0018AA  B4D8               	btfsc	status,2,c
  1668  0018AC  0012               	return	
  1669                           
  1670                           ;Communications.c: 23: do { LATA3 = ~LATA3; } while(0);
  1671  0018AE  B689               	btfsc	3977,3,c	;volatile
  1672  0018B0  D002               	goto	u4410
  1673  0018B2  8689               	bsf	3977,3,c	;volatile
  1674  0018B4  0012               	return	
  1675  0018B6                     u4410:
  1676  0018B6  9689               	bcf	3977,3,c	;volatile
  1677  0018B8  0012               	return	
  1678  0018BA                     __end_of_updateComms:
  1679                           	opt stack 0
  1680                           tblptru	equ	0xFF8
  1681                           tblptrh	equ	0xFF7
  1682                           tblptrl	equ	0xFF6
  1683                           tablat	equ	0xFF5
  1684                           intcon	equ	0xFF2
  1685                           postinc0	equ	0xFEE
  1686                           wreg	equ	0xFE8
  1687                           postdec1	equ	0xFE5
  1688                           fsr1h	equ	0xFE2
  1689                           fsr1l	equ	0xFE1
  1690                           status	equ	0xFD8
  1691                           
  1692 ;; *************** function _time_get *****************
  1693 ;; Defined at:
  1694 ;;		line 153 in file "mcc_generated_files/tmr0.c"
  1695 ;; Parameters:    Size  Location     Type
  1696 ;;  WhatTime        1    wreg     unsigned char 
  1697 ;; Auto vars:     Size  Location     Type
  1698 ;;  WhatTime        1   28[COMRAM] unsigned char 
  1699 ;; Return value:  Size  Location     Type
  1700 ;;                  2   26[COMRAM] int 
  1701 ;; Registers used:
  1702 ;;		wreg, status,2, status,0
  1703 ;; Tracked objects:
  1704 ;;		On entry : 0/0
  1705 ;;		On exit  : 0/0
  1706 ;;		Unchanged: 0/0
  1707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1708 ;;      Params:         2       0       0       0       0       0       0
  1709 ;;      Locals:         1       0       0       0       0       0       0
  1710 ;;      Temps:          0       0       0       0       0       0       0
  1711 ;;      Totals:         3       0       0       0       0       0       0
  1712 ;;Total ram usage:        3 bytes
  1713 ;; Hardware stack levels used:    1
  1714 ;; Hardware stack levels required when called:    4
  1715 ;; This function calls:
  1716 ;;		Nothing
  1717 ;; This function is called by:
  1718 ;;		_ledDebug
  1719 ;; This function uses a non-reentrant model
  1720 ;;
  1721                           
  1722                           	psect	text4
  1723  0018FC                     __ptext4:
  1724                           	opt stack 0
  1725  0018FC                     _time_get:
  1726                           	opt stack 25
  1727                           
  1728                           ;incstack = 0
  1729                           ;time_get@WhatTime stored from wreg
  1730  0018FC  6E1D               	movwf	time_get@WhatTime,c
  1731                           
  1732                           ;tmr0.c: 154: if(WhatTime == 1){
  1733  0018FE  041D               	decf	time_get@WhatTime,w,c
  1734  001900  A4D8               	btfss	status,2,c
  1735  001902  0012               	return	
  1736                           
  1737                           ;tmr0.c: 155: return LEDtime;
  1738  001904  C07B  F01B         	movff	_LEDtime,?_time_get
  1739  001908  C07C  F01C         	movff	_LEDtime+1,?_time_get+1
  1740  00190C  0012               	return	
  1741  00190E                     __end_of_time_get:
  1742                           	opt stack 0
  1743                           tblptru	equ	0xFF8
  1744                           tblptrh	equ	0xFF7
  1745                           tblptrl	equ	0xFF6
  1746                           tablat	equ	0xFF5
  1747                           intcon	equ	0xFF2
  1748                           postinc0	equ	0xFEE
  1749                           wreg	equ	0xFE8
  1750                           postdec1	equ	0xFE5
  1751                           fsr1h	equ	0xFE2
  1752                           fsr1l	equ	0xFE1
  1753                           status	equ	0xFD8
  1754                           
  1755 ;; *************** function _time_Set *****************
  1756 ;; Defined at:
  1757 ;;		line 159 in file "mcc_generated_files/tmr0.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;  WhatTime        1    wreg     unsigned char 
  1760 ;;  value           2   26[COMRAM] int 
  1761 ;; Auto vars:     Size  Location     Type
  1762 ;;  WhatTime        1   28[COMRAM] unsigned char 
  1763 ;; Return value:  Size  Location     Type
  1764 ;;                  1    wreg      void 
  1765 ;; Registers used:
  1766 ;;		wreg, status,2, status,0
  1767 ;; Tracked objects:
  1768 ;;		On entry : 0/0
  1769 ;;		On exit  : 0/0
  1770 ;;		Unchanged: 0/0
  1771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1772 ;;      Params:         2       0       0       0       0       0       0
  1773 ;;      Locals:         1       0       0       0       0       0       0
  1774 ;;      Temps:          0       0       0       0       0       0       0
  1775 ;;      Totals:         3       0       0       0       0       0       0
  1776 ;;Total ram usage:        3 bytes
  1777 ;; Hardware stack levels used:    1
  1778 ;; Hardware stack levels required when called:    4
  1779 ;; This function calls:
  1780 ;;		Nothing
  1781 ;; This function is called by:
  1782 ;;		_ledDebug
  1783 ;; This function uses a non-reentrant model
  1784 ;;
  1785                           
  1786                           	psect	text5
  1787  0017FA                     __ptext5:
  1788                           	opt stack 0
  1789  0017FA                     _time_Set:
  1790                           	opt stack 25
  1791                           
  1792                           ;incstack = 0
  1793                           ;time_Set@WhatTime stored from wreg
  1794  0017FA  6E1D               	movwf	time_Set@WhatTime,c
  1795                           
  1796                           ;tmr0.c: 160: if(WhatTime == 1){
  1797  0017FC  041D               	decf	time_Set@WhatTime,w,c
  1798  0017FE  A4D8               	btfss	status,2,c
  1799  001800  0012               	return	
  1800                           
  1801                           ;tmr0.c: 161: LEDtime = value;
  1802  001802  C01B  F07B         	movff	time_Set@value,_LEDtime
  1803  001806  C01C  F07C         	movff	time_Set@value+1,_LEDtime+1
  1804  00180A  0100               	movlb	0	; () banked
  1805  00180C  0E00               	movlw	0
  1806  00180E  BF7C               	btfsc	(_LEDtime+1)& (0+255),7,b
  1807  001810  0EFF               	movlw	-1
  1808  001812  6F7D               	movwf	(_LEDtime+2)& (0+255),b
  1809  001814  6F7E               	movwf	(_LEDtime+3)& (0+255),b
  1810  001816  0012               	return	
  1811  001818                     __end_of_time_Set:
  1812                           	opt stack 0
  1813                           tblptru	equ	0xFF8
  1814                           tblptrh	equ	0xFF7
  1815                           tblptrl	equ	0xFF6
  1816                           tablat	equ	0xFF5
  1817                           intcon	equ	0xFF2
  1818                           postinc0	equ	0xFEE
  1819                           wreg	equ	0xFE8
  1820                           postdec1	equ	0xFE5
  1821                           fsr1h	equ	0xFE2
  1822                           fsr1l	equ	0xFE1
  1823                           status	equ	0xFD8
  1824                           
  1825 ;; *************** function _respondChargerAsECU *****************
  1826 ;; Defined at:
  1827 ;;		line 37 in file "Communications.c"
  1828 ;; Parameters:    Size  Location     Type
  1829 ;;		None
  1830 ;; Auto vars:     Size  Location     Type
  1831 ;;		None
  1832 ;; Return value:  Size  Location     Type
  1833 ;;                  1    wreg      void 
  1834 ;; Registers used:
  1835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1836 ;; Tracked objects:
  1837 ;;		On entry : 0/0
  1838 ;;		On exit  : 0/0
  1839 ;;		Unchanged: 0/0
  1840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1841 ;;      Params:         0       0       0       0       0       0       0
  1842 ;;      Locals:         0       0       0       0       0       0       0
  1843 ;;      Temps:          0       0       0       0       0       0       0
  1844 ;;      Totals:         0       0       0       0       0       0       0
  1845 ;;Total ram usage:        0 bytes
  1846 ;; Hardware stack levels used:    1
  1847 ;; Hardware stack levels required when called:    8
  1848 ;; This function calls:
  1849 ;;		_Delay
  1850 ;;		_ToSend
  1851 ;;		_sendData
  1852 ;; This function is called by:
  1853 ;;		_ledDebug
  1854 ;; This function uses a non-reentrant model
  1855 ;;
  1856                           
  1857                           	psect	text6
  1858  001554                     __ptext6:
  1859                           	opt stack 0
  1860  001554                     _respondChargerAsECU:
  1861                           	opt stack 21
  1862                           
  1863                           ;Communications.c: 38: LATDbits.LATD4 = 1;
  1864                           
  1865                           ;incstack = 0
  1866  001554  888C               	bsf	3980,4,c	;volatile
  1867                           
  1868                           ;Communications.c: 40: ToSend(0, 1);
  1869  001556  0E00               	movlw	0
  1870  001558  0100               	movlb	0	; () banked
  1871  00155A  6FCB               	movwf	(ToSend@what+1)& (0+255),b
  1872  00155C  0E01               	movlw	1
  1873  00155E  6FCA               	movwf	ToSend@what& (0+255),b
  1874  001560  0E00               	movlw	0
  1875  001562  EC0C  F00C         	call	_ToSend
  1876                           
  1877                           ;Communications.c: 41: ToSend(1, 3);
  1878  001566  0E00               	movlw	0
  1879  001568  0100               	movlb	0	; () banked
  1880  00156A  6FCB               	movwf	(ToSend@what+1)& (0+255),b
  1881  00156C  0E03               	movlw	3
  1882  00156E  6FCA               	movwf	ToSend@what& (0+255),b
  1883  001570  0E01               	movlw	1
  1884  001572  EC0C  F00C         	call	_ToSend
  1885                           
  1886                           ;Communications.c: 43: sendData(6);
  1887  001576  0E06               	movlw	6
  1888  001578  EC24  F005         	call	_sendData
  1889                           
  1890                           ;Communications.c: 44: Delay(3);
  1891  00157C  0E00               	movlw	0
  1892  00157E  6E1C               	movwf	Delay@wait+1,c
  1893  001580  0E03               	movlw	3
  1894  001582  6E1B               	movwf	Delay@wait,c
  1895  001584  ECC6  F00A         	call	_Delay	;wreg free
  1896                           
  1897                           ;Communications.c: 45: LATDbits.LATD4 = 0;
  1898  001588  988C               	bcf	3980,4,c	;volatile
  1899  00158A  0012               	return		;funcret
  1900  00158C                     __end_of_respondChargerAsECU:
  1901                           	opt stack 0
  1902                           tblptru	equ	0xFF8
  1903                           tblptrh	equ	0xFF7
  1904                           tblptrl	equ	0xFF6
  1905                           tablat	equ	0xFF5
  1906                           intcon	equ	0xFF2
  1907                           postinc0	equ	0xFEE
  1908                           wreg	equ	0xFE8
  1909                           postdec1	equ	0xFE5
  1910                           fsr1h	equ	0xFE2
  1911                           fsr1l	equ	0xFE1
  1912                           status	equ	0xFD8
  1913                           
  1914 ;; *************** function _SetBMM *****************
  1915 ;; Defined at:
  1916 ;;		line 55 in file "Communications.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;		None
  1919 ;; Auto vars:     Size  Location     Type
  1920 ;;		None
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  1    wreg      unsigned char 
  1923 ;; Registers used:
  1924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1925 ;; Tracked objects:
  1926 ;;		On entry : 0/0
  1927 ;;		On exit  : 0/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1930 ;;      Params:         0       0       0       0       0       0       0
  1931 ;;      Locals:         0       0       0       0       0       0       0
  1932 ;;      Temps:          0       0       0       0       0       0       0
  1933 ;;      Totals:         0       0       0       0       0       0       0
  1934 ;;Total ram usage:        0 bytes
  1935 ;; Hardware stack levels used:    1
  1936 ;; Hardware stack levels required when called:    9
  1937 ;; This function calls:
  1938 ;;		_Delay
  1939 ;;		_ToSend
  1940 ;;		_receiveData
  1941 ;;		_sendData
  1942 ;; This function is called by:
  1943 ;;		_main
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           	psect	text7
  1948  0014D4                     __ptext7:
  1949                           	opt stack 0
  1950  0014D4                     _SetBMM:
  1951                           	opt stack 21
  1952                           
  1953                           ;Communications.c: 56: LATDbits.LATD4 = 1;
  1954                           
  1955                           ;incstack = 0
  1956  0014D4  888C               	bsf	3980,4,c	;volatile
  1957                           
  1958                           ;Communications.c: 58: ToSend(1, 7);
  1959  0014D6  0E00               	movlw	0
  1960  0014D8  0100               	movlb	0	; () banked
  1961  0014DA  6FCB               	movwf	(ToSend@what+1)& (0+255),b
  1962  0014DC  0E07               	movlw	7
  1963  0014DE  6FCA               	movwf	ToSend@what& (0+255),b
  1964  0014E0  0E01               	movlw	1
  1965  0014E2  EC0C  F00C         	call	_ToSend
  1966                           
  1967                           ;Communications.c: 60: sendData(6);
  1968  0014E6  0E06               	movlw	6
  1969  0014E8  EC24  F005         	call	_sendData
  1970                           
  1971                           ;Communications.c: 61: Delay(3);
  1972  0014EC  0E00               	movlw	0
  1973  0014EE  6E1C               	movwf	Delay@wait+1,c
  1974  0014F0  0E03               	movlw	3
  1975  0014F2  6E1B               	movwf	Delay@wait,c
  1976  0014F4  ECC6  F00A         	call	_Delay	;wreg free
  1977                           
  1978                           ;Communications.c: 62: LATDbits.LATD4 = 0;
  1979  0014F8  988C               	bcf	3980,4,c	;volatile
  1980                           
  1981                           ;Communications.c: 63: Delay(1000);
  1982  0014FA  0E03               	movlw	3
  1983  0014FC  6E1C               	movwf	Delay@wait+1,c
  1984  0014FE  0EE8               	movlw	232
  1985  001500  6E1B               	movwf	Delay@wait,c
  1986  001502  ECC6  F00A         	call	_Delay	;wreg free
  1987                           
  1988                           ;Communications.c: 64: if (receiveData()){
  1989  001506  EC5E  F000         	call	_receiveData	;wreg free
  1990  00150A  0900               	iorlw	0
  1991  00150C  B4D8               	btfsc	status,2,c
  1992  00150E  D002               	goto	l4203
  1993                           
  1994                           ;Communications.c: 66: return 0;
  1995  001510  0E00               	movlw	0
  1996                           
  1997                           ;Communications.c: 67: }
  1998  001512  0012               	return	
  1999  001514                     l4203:
  2000                           
  2001                           ;Communications.c: 68: else return 1;
  2002  001514  0E01               	movlw	1
  2003  001516  0012               	return	
  2004  001518                     __end_of_SetBMM:
  2005                           	opt stack 0
  2006                           tblptru	equ	0xFF8
  2007                           tblptrh	equ	0xFF7
  2008                           tblptrl	equ	0xFF6
  2009                           tablat	equ	0xFF5
  2010                           intcon	equ	0xFF2
  2011                           postinc0	equ	0xFEE
  2012                           wreg	equ	0xFE8
  2013                           postdec1	equ	0xFE5
  2014                           fsr1h	equ	0xFE2
  2015                           fsr1l	equ	0xFE1
  2016                           status	equ	0xFD8
  2017                           
  2018 ;; *************** function _sendData *****************
  2019 ;; Defined at:
  2020 ;;		line 108 in file "FastTransfer.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;  whereToSend     1    wreg     unsigned char 
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;  whereToSend     1    5[BANK0 ] unsigned char 
  2025 ;;  i               2    7[BANK0 ] int 
  2026 ;;  CS              1    6[BANK0 ] unsigned char 
  2027 ;; Return value:  Size  Location     Type
  2028 ;;                  1    wreg      void 
  2029 ;; Registers used:
  2030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  2031 ;; Tracked objects:
  2032 ;;		On entry : 0/0
  2033 ;;		On exit  : 0/0
  2034 ;;		Unchanged: 0/0
  2035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2036 ;;      Params:         0       0       0       0       0       0       0
  2037 ;;      Locals:         0       4       0       0       0       0       0
  2038 ;;      Temps:          0       1       0       0       0       0       0
  2039 ;;      Totals:         0       5       0       0       0       0       0
  2040 ;;Total ram usage:        5 bytes
  2041 ;; Hardware stack levels used:    1
  2042 ;; Hardware stack levels required when called:    7
  2043 ;; This function calls:
  2044 ;;		Absolute function
  2045 ;;		_CRC8
  2046 ;;		_FastTransfer_buffer_flush
  2047 ;;		_Send_put
  2048 ;;		_crcBufS_put
  2049 ;; This function is called by:
  2050 ;;		_respondChargerAsECU
  2051 ;;		_SetBMM
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           	psect	text8
  2056  000A48                     __ptext8:
  2057                           	opt stack 0
  2058  000A48                     _sendData:
  2059                           	opt stack 21
  2060                           
  2061                           ;incstack = 0
  2062                           ;sendData@whereToSend stored from wreg
  2063  000A48  0100               	movlb	0	; () banked
  2064  000A4A  6FCD               	movwf	sendData@whereToSend& (0+255),b
  2065                           
  2066                           ;FastTransfer.c: 111: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  2067  000A4C  C0E5  F01B         	movff	_sendStructAddress,CRC8@data
  2068  000A50  C0E6  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  2069  000A54  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
  2070  000A58  EC45  F00A         	call	_CRC8	;wreg free
  2071  000A5C  0100               	movlb	0	; () banked
  2072  000A5E  6FCE               	movwf	sendData@CS& (0+255),b
  2073                           
  2074                           ; BSR set to: 0
  2075                           ;FastTransfer.c: 113: serial_write(0x06);
  2076  000A60  D801               	call	u4328
  2077  000A62  D00B               	goto	l4135
  2078  000A64                     u4328:
  2079  000A64  0005               	push	
  2080  000A66  6EFA               	movwf	pclath,c
  2081  000A68  503E               	movf	_serial_write,w,c
  2082  000A6A  6EFD               	movwf	tosl,c
  2083  000A6C  503F               	movf	_serial_write+1,w,c
  2084  000A6E  6EFE               	movwf	tosh,c
  2085  000A70  50F8               	movf	tblptru,w,c
  2086  000A72  6EFF               	movwf	tosu,c
  2087  000A74  50FA               	movf	pclath,w,c
  2088  000A76  0E06               	movlw	6
  2089  000A78  0012               	return		;indir
  2090  000A7A                     l4135:
  2091                           
  2092                           ;FastTransfer.c: 114: serial_write(0x85);
  2093  000A7A  D801               	call	u4338
  2094  000A7C  D00B               	goto	l4137
  2095  000A7E                     u4338:
  2096  000A7E  0005               	push	
  2097  000A80  6EFA               	movwf	pclath,c
  2098  000A82  503E               	movf	_serial_write,w,c
  2099  000A84  6EFD               	movwf	tosl,c
  2100  000A86  503F               	movf	_serial_write+1,w,c
  2101  000A88  6EFE               	movwf	tosh,c
  2102  000A8A  50F8               	movf	tblptru,w,c
  2103  000A8C  6EFF               	movwf	tosu,c
  2104  000A8E  50FA               	movf	pclath,w,c
  2105  000A90  0E85               	movlw	133
  2106  000A92  0012               	return		;indir
  2107  000A94                     l4137:
  2108                           
  2109                           ;FastTransfer.c: 115: serial_write(whereToSend);
  2110  000A94  D801               	call	u4348
  2111  000A96  D00C               	goto	l4139
  2112  000A98                     u4348:
  2113  000A98  0005               	push	
  2114  000A9A  6EFA               	movwf	pclath,c
  2115  000A9C  503E               	movf	_serial_write,w,c
  2116  000A9E  6EFD               	movwf	tosl,c
  2117  000AA0  503F               	movf	_serial_write+1,w,c
  2118  000AA2  6EFE               	movwf	tosh,c
  2119  000AA4  50F8               	movf	tblptru,w,c
  2120  000AA6  6EFF               	movwf	tosu,c
  2121  000AA8  50FA               	movf	pclath,w,c
  2122  000AAA  0100               	movlb	0	; () banked
  2123  000AAC  51CD               	movf	sendData@whereToSend& (0+255),w,b
  2124  000AAE  0012               	return		;indir
  2125  000AB0                     l4139:
  2126                           
  2127                           ;FastTransfer.c: 116: serial_write(moduleAddress);
  2128  000AB0  D801               	call	u4358
  2129  000AB2  D00B               	goto	l4141
  2130  000AB4                     u4358:
  2131  000AB4  0005               	push	
  2132  000AB6  6EFA               	movwf	pclath,c
  2133  000AB8  503E               	movf	_serial_write,w,c
  2134  000ABA  6EFD               	movwf	tosl,c
  2135  000ABC  503F               	movf	_serial_write+1,w,c
  2136  000ABE  6EFE               	movwf	tosh,c
  2137  000AC0  50F8               	movf	tblptru,w,c
  2138  000AC2  6EFF               	movwf	tosu,c
  2139  000AC4  50FA               	movf	pclath,w,c
  2140  000AC6  5043               	movf	_moduleAddress,w,c
  2141  000AC8  0012               	return		;indir
  2142  000ACA                     l4141:
  2143                           
  2144                           ;FastTransfer.c: 117: serial_write(ring_buffer.count);
  2145  000ACA  D801               	call	u4368
  2146  000ACC  D00C               	goto	l4143
  2147  000ACE                     u4368:
  2148  000ACE  0005               	push	
  2149  000AD0  6EFA               	movwf	pclath,c
  2150  000AD2  503E               	movf	_serial_write,w,c
  2151  000AD4  6EFD               	movwf	tosl,c
  2152  000AD6  503F               	movf	_serial_write+1,w,c
  2153  000AD8  6EFE               	movwf	tosh,c
  2154  000ADA  50F8               	movf	tblptru,w,c
  2155  000ADC  6EFF               	movwf	tosu,c
  2156  000ADE  50FA               	movf	pclath,w,c
  2157  000AE0  0101               	movlb	1	; () banked
  2158  000AE2  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  2159  000AE4  0012               	return		;indir
  2160  000AE6                     l4143:
  2161                           
  2162                           ;FastTransfer.c: 121: int i;
  2163                           ;FastTransfer.c: 122: for (i = 0; i < ring_buffer.count; i++) {
  2164  000AE6  0E00               	movlw	0
  2165  000AE8  0100               	movlb	0	; () banked
  2166  000AEA  6FD0               	movwf	(sendData@i+1)& (0+255),b
  2167  000AEC  0E00               	movlw	0
  2168  000AEE  6FCF               	movwf	sendData@i& (0+255),b
  2169  000AF0  D01A               	goto	l4149
  2170  000AF2                     l4145:
  2171                           
  2172                           ; BSR set to: 0
  2173                           ;FastTransfer.c: 123: serial_write(*(sendStructAddress + i));
  2174  000AF2  D801               	call	u4378
  2175  000AF4  D015               	goto	l4147
  2176  000AF6                     u4378:
  2177  000AF6  0005               	push	
  2178  000AF8  6EFA               	movwf	pclath,c
  2179  000AFA  503E               	movf	_serial_write,w,c
  2180  000AFC  6EFD               	movwf	tosl,c
  2181  000AFE  503F               	movf	_serial_write+1,w,c
  2182  000B00  6EFE               	movwf	tosh,c
  2183  000B02  50F8               	movf	tblptru,w,c
  2184  000B04  6EFF               	movwf	tosu,c
  2185  000B06  50FA               	movf	pclath,w,c
  2186  000B08  0100               	movlb	0	; () banked
  2187  000B0A  51CF               	movf	sendData@i& (0+255),w,b
  2188  000B0C  0100               	movlb	0	; () banked
  2189  000B0E  25E5               	addwf	_sendStructAddress& (0+255),w,b
  2190  000B10  6ED9               	movwf	fsr2l,c
  2191  000B12  0100               	movlb	0	; () banked
  2192  000B14  51D0               	movf	(sendData@i+1)& (0+255),w,b
  2193  000B16  0100               	movlb	0	; () banked
  2194  000B18  21E6               	addwfc	(_sendStructAddress+1)& (0+255),w,b
  2195  000B1A  6EDA               	movwf	fsr2h,c
  2196  000B1C  50DF               	movf	indf2,w,c
  2197  000B1E  0012               	return		;indir
  2198  000B20                     l4147:
  2199  000B20  0100               	movlb	0	; () banked
  2200  000B22  4BCF               	infsnz	sendData@i& (0+255),f,b
  2201  000B24  2BD0               	incf	(sendData@i+1)& (0+255),f,b
  2202  000B26                     l4149:
  2203                           
  2204                           ; BSR set to: 0
  2205  000B26  0101               	movlb	1	; () banked
  2206  000B28  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  2207  000B2A  0100               	movlb	0	; () banked
  2208  000B2C  5DCF               	subwf	sendData@i& (0+255),w,b
  2209  000B2E  0100               	movlb	0	; () banked
  2210  000B30  51D0               	movf	(sendData@i+1)& (0+255),w,b
  2211  000B32  0A80               	xorlw	128
  2212  000B34  0100               	movlb	0	; () banked
  2213  000B36  6FCC               	movwf	??_sendData& (0+255),b
  2214  000B38  0101               	movlb	1	; () banked
  2215  000B3A  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  2216  000B3C  0A80               	xorlw	128
  2217  000B3E  0100               	movlb	0	; () banked
  2218  000B40  59CC               	subwfb	??_sendData& (0+255),w,b
  2219  000B42  A0D8               	btfss	status,0,c
  2220  000B44  D7D6               	goto	l4145
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;FastTransfer.c: 124: }
  2224                           ;FastTransfer.c: 127: serial_write(CS);
  2225                           
  2226                           ; BSR set to: 0
  2227  000B46  D801               	call	u4398
  2228  000B48  D00C               	goto	l4153
  2229  000B4A                     u4398:
  2230  000B4A  0005               	push	
  2231  000B4C  6EFA               	movwf	pclath,c
  2232  000B4E  503E               	movf	_serial_write,w,c
  2233  000B50  6EFD               	movwf	tosl,c
  2234  000B52  503F               	movf	_serial_write+1,w,c
  2235  000B54  6EFE               	movwf	tosh,c
  2236  000B56  50F8               	movf	tblptru,w,c
  2237  000B58  6EFF               	movwf	tosu,c
  2238  000B5A  50FA               	movf	pclath,w,c
  2239  000B5C  0100               	movlb	0	; () banked
  2240  000B5E  51CE               	movf	sendData@CS& (0+255),w,b
  2241  000B60  0012               	return		;indir
  2242  000B62                     l4153:
  2243                           
  2244                           ;FastTransfer.c: 130: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  2245  000B62  0EB7               	movlw	low _crc_buffer
  2246  000B64  6E1B               	movwf	crcBufS_put@_this,c
  2247  000B66  0E00               	movlw	high _crc_buffer
  2248  000B68  6E1C               	movwf	crcBufS_put@_this+1,c
  2249  000B6A  C0CD  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  2250  000B6E  C0CE  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  2251  000B72  0E00               	movlw	0
  2252  000B74  6E1F               	movwf	crcBufS_put@status,c
  2253  000B76  EC5E  F007         	call	_crcBufS_put
  2254                           
  2255                           ;FastTransfer.c: 133: FastTransfer_buffer_flush(&ring_buffer, 1);
  2256  000B7A  0E00               	movlw	low _ring_buffer
  2257  000B7C  0100               	movlb	0	; () banked
  2258  000B7E  6FC8               	movwf	FastTransfer_buffer_flush@_this& (0+255),b
  2259  000B80  0E01               	movlw	high _ring_buffer
  2260  000B82  0100               	movlb	0	; () banked
  2261  000B84  6FC9               	movwf	(FastTransfer_buffer_flush@_this+1)& (0+255),b
  2262  000B86  0E00               	movlw	0
  2263  000B88  0100               	movlb	0	; () banked
  2264  000B8A  6FCB               	movwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),b
  2265  000B8C  0E01               	movlw	1
  2266  000B8E  6FCA               	movwf	FastTransfer_buffer_flush@clearBuffer& (0+255),b
  2267  000B90  EC81  F009         	call	_FastTransfer_buffer_flush	;wreg free
  2268  000B94  0012               	return		;funcret
  2269  000B96                     __end_of_sendData:
  2270                           	opt stack 0
  2271                           tosu	equ	0xFFF
  2272                           tosh	equ	0xFFE
  2273                           tosl	equ	0xFFD
  2274                           pclath	equ	0xFFA
  2275                           tblptru	equ	0xFF8
  2276                           tblptrh	equ	0xFF7
  2277                           tblptrl	equ	0xFF6
  2278                           tablat	equ	0xFF5
  2279                           intcon	equ	0xFF2
  2280                           postinc0	equ	0xFEE
  2281                           wreg	equ	0xFE8
  2282                           postdec1	equ	0xFE5
  2283                           fsr1h	equ	0xFE2
  2284                           fsr1l	equ	0xFE1
  2285                           indf2	equ	0xFDF
  2286                           fsr2h	equ	0xFDA
  2287                           fsr2l	equ	0xFD9
  2288                           status	equ	0xFD8
  2289                           
  2290 ;; *************** function _crcBufS_put *****************
  2291 ;; Defined at:
  2292 ;;		line 376 in file "FastTransfer.c"
  2293 ;; Parameters:    Size  Location     Type
  2294 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  2295 ;;		 -> crc_buffer(17), 
  2296 ;;  address         1   28[COMRAM] unsigned char 
  2297 ;;  oldCRC          1   29[COMRAM] unsigned char 
  2298 ;;  status          1   30[COMRAM] unsigned char 
  2299 ;; Auto vars:     Size  Location     Type
  2300 ;;		None
  2301 ;; Return value:  Size  Location     Type
  2302 ;;                  1    wreg      void 
  2303 ;; Registers used:
  2304 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2305 ;; Tracked objects:
  2306 ;;		On entry : 0/0
  2307 ;;		On exit  : 0/0
  2308 ;;		Unchanged: 0/0
  2309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2310 ;;      Params:         5       0       0       0       0       0       0
  2311 ;;      Locals:         0       0       0       0       0       0       0
  2312 ;;      Temps:          2       0       0       0       0       0       0
  2313 ;;      Totals:         7       0       0       0       0       0       0
  2314 ;;Total ram usage:        7 bytes
  2315 ;; Hardware stack levels used:    1
  2316 ;; Hardware stack levels required when called:    4
  2317 ;; This function calls:
  2318 ;;		Nothing
  2319 ;; This function is called by:
  2320 ;;		_sendData
  2321 ;; This function uses a non-reentrant model
  2322 ;;
  2323                           
  2324                           	psect	text9
  2325  000EBC                     __ptext9:
  2326                           	opt stack 0
  2327  000EBC                     _crcBufS_put:
  2328                           	opt stack 23
  2329                           
  2330                           ;FastTransfer.c: 377: _this->buf[_this->head] = address;
  2331                           
  2332                           ;incstack = 0
  2333  000EBC  EE20 F00F          	lfsr	2,15
  2334  000EC0  501B               	movf	crcBufS_put@_this,w,c
  2335  000EC2  26D9               	addwf	fsr2l,f,c
  2336  000EC4  501C               	movf	crcBufS_put@_this+1,w,c
  2337  000EC6  22DA               	addwfc	fsr2h,f,c
  2338  000EC8  CFDE F020          	movff	postinc2,??_crcBufS_put
  2339  000ECC  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2340  000ED0  5020               	movf	??_crcBufS_put,w,c
  2341  000ED2  241B               	addwf	crcBufS_put@_this,w,c
  2342  000ED4  6ED9               	movwf	fsr2l,c
  2343  000ED6  5021               	movf	??_crcBufS_put+1,w,c
  2344  000ED8  201C               	addwfc	crcBufS_put@_this+1,w,c
  2345  000EDA  6EDA               	movwf	fsr2h,c
  2346  000EDC  C01D  FFDF         	movff	crcBufS_put@address,indf2
  2347                           
  2348                           ;FastTransfer.c: 378: _this->head++;
  2349  000EE0  EE20 F00F          	lfsr	2,15
  2350  000EE4  501B               	movf	crcBufS_put@_this,w,c
  2351  000EE6  26D9               	addwf	fsr2l,f,c
  2352  000EE8  501C               	movf	crcBufS_put@_this+1,w,c
  2353  000EEA  22DA               	addwfc	fsr2h,f,c
  2354  000EEC  2ADE               	incf	postinc2,f,c
  2355  000EEE  0E00               	movlw	0
  2356  000EF0  22DD               	addwfc	postdec2,f,c
  2357                           
  2358                           ;FastTransfer.c: 379: _this->buf[_this->head] = oldCRC;
  2359  000EF2  EE20 F00F          	lfsr	2,15
  2360  000EF6  501B               	movf	crcBufS_put@_this,w,c
  2361  000EF8  26D9               	addwf	fsr2l,f,c
  2362  000EFA  501C               	movf	crcBufS_put@_this+1,w,c
  2363  000EFC  22DA               	addwfc	fsr2h,f,c
  2364  000EFE  CFDE F020          	movff	postinc2,??_crcBufS_put
  2365  000F02  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2366  000F06  5020               	movf	??_crcBufS_put,w,c
  2367  000F08  241B               	addwf	crcBufS_put@_this,w,c
  2368  000F0A  6ED9               	movwf	fsr2l,c
  2369  000F0C  5021               	movf	??_crcBufS_put+1,w,c
  2370  000F0E  201C               	addwfc	crcBufS_put@_this+1,w,c
  2371  000F10  6EDA               	movwf	fsr2h,c
  2372  000F12  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  2373                           
  2374                           ;FastTransfer.c: 380: _this->head++;
  2375  000F16  EE20 F00F          	lfsr	2,15
  2376  000F1A  501B               	movf	crcBufS_put@_this,w,c
  2377  000F1C  26D9               	addwf	fsr2l,f,c
  2378  000F1E  501C               	movf	crcBufS_put@_this+1,w,c
  2379  000F20  22DA               	addwfc	fsr2h,f,c
  2380  000F22  2ADE               	incf	postinc2,f,c
  2381  000F24  0E00               	movlw	0
  2382  000F26  22DD               	addwfc	postdec2,f,c
  2383                           
  2384                           ;FastTransfer.c: 381: _this->buf[_this->head] = status;
  2385  000F28  EE20 F00F          	lfsr	2,15
  2386  000F2C  501B               	movf	crcBufS_put@_this,w,c
  2387  000F2E  26D9               	addwf	fsr2l,f,c
  2388  000F30  501C               	movf	crcBufS_put@_this+1,w,c
  2389  000F32  22DA               	addwfc	fsr2h,f,c
  2390  000F34  CFDE F020          	movff	postinc2,??_crcBufS_put
  2391  000F38  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2392  000F3C  5020               	movf	??_crcBufS_put,w,c
  2393  000F3E  241B               	addwf	crcBufS_put@_this,w,c
  2394  000F40  6ED9               	movwf	fsr2l,c
  2395  000F42  5021               	movf	??_crcBufS_put+1,w,c
  2396  000F44  201C               	addwfc	crcBufS_put@_this+1,w,c
  2397  000F46  6EDA               	movwf	fsr2h,c
  2398  000F48  C01F  FFDF         	movff	crcBufS_put@status,indf2
  2399                           
  2400                           ;FastTransfer.c: 382: _this->head++;
  2401  000F4C  EE20 F00F          	lfsr	2,15
  2402  000F50  501B               	movf	crcBufS_put@_this,w,c
  2403  000F52  26D9               	addwf	fsr2l,f,c
  2404  000F54  501C               	movf	crcBufS_put@_this+1,w,c
  2405  000F56  22DA               	addwfc	fsr2h,f,c
  2406  000F58  2ADE               	incf	postinc2,f,c
  2407  000F5A  0E00               	movlw	0
  2408  000F5C  22DD               	addwfc	postdec2,f,c
  2409                           
  2410                           ;FastTransfer.c: 383: if (_this->head >= (5 * 3)) {
  2411  000F5E  EE20 F00F          	lfsr	2,15
  2412  000F62  501B               	movf	crcBufS_put@_this,w,c
  2413  000F64  26D9               	addwf	fsr2l,f,c
  2414  000F66  501C               	movf	crcBufS_put@_this+1,w,c
  2415  000F68  22DA               	addwfc	fsr2h,f,c
  2416  000F6A  0E01               	movlw	1
  2417  000F6C  BEDB               	btfsc	plusw2,7,c
  2418  000F6E  0012               	return	
  2419  000F70  0E01               	movlw	1
  2420  000F72  50DB               	movf	plusw2,w,c
  2421  000F74  E104               	bnz	u3660
  2422  000F76  0E0F               	movlw	15
  2423  000F78  5CDE               	subwf	postinc2,w,c
  2424  000F7A  A0D8               	btfss	status,0,c
  2425  000F7C  0012               	return	
  2426  000F7E                     u3660:
  2427                           
  2428                           ;FastTransfer.c: 384: _this->head = 0;
  2429  000F7E  EE20 F00F          	lfsr	2,15
  2430  000F82  501B               	movf	crcBufS_put@_this,w,c
  2431  000F84  26D9               	addwf	fsr2l,f,c
  2432  000F86  501C               	movf	crcBufS_put@_this+1,w,c
  2433  000F88  22DA               	addwfc	fsr2h,f,c
  2434  000F8A  0E00               	movlw	0
  2435  000F8C  6EDE               	movwf	postinc2,c
  2436  000F8E  0E00               	movlw	0
  2437  000F90  6EDD               	movwf	postdec2,c
  2438  000F92  0012               	return	
  2439  000F94                     __end_of_crcBufS_put:
  2440                           	opt stack 0
  2441                           tosu	equ	0xFFF
  2442                           tosh	equ	0xFFE
  2443                           tosl	equ	0xFFD
  2444                           pclath	equ	0xFFA
  2445                           tblptru	equ	0xFF8
  2446                           tblptrh	equ	0xFF7
  2447                           tblptrl	equ	0xFF6
  2448                           tablat	equ	0xFF5
  2449                           intcon	equ	0xFF2
  2450                           postinc0	equ	0xFEE
  2451                           wreg	equ	0xFE8
  2452                           postdec1	equ	0xFE5
  2453                           fsr1h	equ	0xFE2
  2454                           fsr1l	equ	0xFE1
  2455                           indf2	equ	0xFDF
  2456                           postinc2	equ	0xFDE
  2457                           postdec2	equ	0xFDD
  2458                           plusw2	equ	0xFDB
  2459                           fsr2h	equ	0xFDA
  2460                           fsr2l	equ	0xFD9
  2461                           status	equ	0xFD8
  2462                           
  2463 ;; *************** function _FastTransfer_buffer_flush *****************
  2464 ;; Defined at:
  2465 ;;		line 316 in file "FastTransfer.c"
  2466 ;; Parameters:    Size  Location     Type
  2467 ;;  _this           2    0[BANK0 ] PTR struct ringBufS
  2468 ;;		 -> ring_buffer(206), 
  2469 ;;  clearBuffer     2    2[BANK0 ] const int 
  2470 ;; Auto vars:     Size  Location     Type
  2471 ;;		None
  2472 ;; Return value:  Size  Location     Type
  2473 ;;                  1    wreg      void 
  2474 ;; Registers used:
  2475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2476 ;; Tracked objects:
  2477 ;;		On entry : 0/0
  2478 ;;		On exit  : 0/0
  2479 ;;		Unchanged: 0/0
  2480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2481 ;;      Params:         0       4       0       0       0       0       0
  2482 ;;      Locals:         0       0       0       0       0       0       0
  2483 ;;      Temps:          0       0       0       0       0       0       0
  2484 ;;      Totals:         0       4       0       0       0       0       0
  2485 ;;Total ram usage:        4 bytes
  2486 ;; Hardware stack levels used:    1
  2487 ;; Hardware stack levels required when called:    5
  2488 ;; This function calls:
  2489 ;;		_memset
  2490 ;; This function is called by:
  2491 ;;		_sendData
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495                           	psect	text10
  2496  001302                     __ptext10:
  2497                           	opt stack 0
  2498  001302                     _FastTransfer_buffer_flush:
  2499                           	opt stack 22
  2500                           
  2501                           ;FastTransfer.c: 317: _this->count = 0;
  2502                           
  2503                           ;incstack = 0
  2504  001302  0100               	movlb	0	; () banked
  2505  001304  EE20 F0CC          	lfsr	2,204
  2506  001308  51C8               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  2507  00130A  26D9               	addwf	fsr2l,f,c
  2508  00130C  51C9               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  2509  00130E  22DA               	addwfc	fsr2h,f,c
  2510  001310  0E00               	movlw	0
  2511  001312  6EDE               	movwf	postinc2,c
  2512  001314  0E00               	movlw	0
  2513  001316  6EDD               	movwf	postdec2,c
  2514                           
  2515                           ;FastTransfer.c: 318: _this->head = 0;
  2516  001318  0100               	movlb	0	; () banked
  2517  00131A  EE20 F0C8          	lfsr	2,200
  2518  00131E  51C8               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  2519  001320  26D9               	addwf	fsr2l,f,c
  2520  001322  51C9               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  2521  001324  22DA               	addwfc	fsr2h,f,c
  2522  001326  0E00               	movlw	0
  2523  001328  6EDE               	movwf	postinc2,c
  2524  00132A  0E00               	movlw	0
  2525  00132C  6EDD               	movwf	postdec2,c
  2526                           
  2527                           ;FastTransfer.c: 319: _this->tail = 0;
  2528  00132E  0100               	movlb	0	; () banked
  2529  001330  EE20 F0CA          	lfsr	2,202
  2530  001334  51C8               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  2531  001336  26D9               	addwf	fsr2l,f,c
  2532  001338  51C9               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  2533  00133A  22DA               	addwfc	fsr2h,f,c
  2534  00133C  0E00               	movlw	0
  2535  00133E  6EDE               	movwf	postinc2,c
  2536  001340  0E00               	movlw	0
  2537  001342  6EDD               	movwf	postdec2,c
  2538                           
  2539                           ; BSR set to: 0
  2540                           ;FastTransfer.c: 320: if (clearBuffer) {
  2541  001344  0100               	movlb	0	; () banked
  2542  001346  51CA               	movf	FastTransfer_buffer_flush@clearBuffer& (0+255),w,b
  2543  001348  0100               	movlb	0	; () banked
  2544  00134A  11CB               	iorwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),w,b
  2545  00134C  B4D8               	btfsc	status,2,c
  2546  00134E  0012               	return	
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;FastTransfer.c: 321: memset(_this->buf, 0, sizeof (_this->buf));
  2550  001350  C0C8  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  2551  001354  C0C9  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  2552  001358  0E00               	movlw	0
  2553  00135A  6E1E               	movwf	memset@c+1,c
  2554  00135C  0E00               	movlw	0
  2555  00135E  6E1D               	movwf	memset@c,c
  2556  001360  0E00               	movlw	0
  2557  001362  6E20               	movwf	memset@n+1,c
  2558  001364  0EC8               	movlw	200
  2559  001366  6E1F               	movwf	memset@n,c
  2560  001368  EC6F  F00B         	call	_memset	;wreg free
  2561  00136C  0012               	return	
  2562  00136E                     __end_of_FastTransfer_buffer_flush:
  2563                           	opt stack 0
  2564                           tosu	equ	0xFFF
  2565                           tosh	equ	0xFFE
  2566                           tosl	equ	0xFFD
  2567                           pclath	equ	0xFFA
  2568                           tblptru	equ	0xFF8
  2569                           tblptrh	equ	0xFF7
  2570                           tblptrl	equ	0xFF6
  2571                           tablat	equ	0xFF5
  2572                           intcon	equ	0xFF2
  2573                           postinc0	equ	0xFEE
  2574                           wreg	equ	0xFE8
  2575                           postdec1	equ	0xFE5
  2576                           fsr1h	equ	0xFE2
  2577                           fsr1l	equ	0xFE1
  2578                           indf2	equ	0xFDF
  2579                           postinc2	equ	0xFDE
  2580                           postdec2	equ	0xFDD
  2581                           plusw2	equ	0xFDB
  2582                           fsr2h	equ	0xFDA
  2583                           fsr2l	equ	0xFD9
  2584                           status	equ	0xFD8
  2585                           
  2586 ;; *************** function _receiveData *****************
  2587 ;; Defined at:
  2588 ;;		line 137 in file "FastTransfer.c"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;		None
  2591 ;; Auto vars:     Size  Location     Type
  2592 ;;  holder          3   18[BANK0 ] unsigned char [3]
  2593 ;;  crcHolder       1   22[BANK0 ] unsigned char 
  2594 ;;  holder          3   15[BANK0 ] unsigned char [3]
  2595 ;;  crcHolder       1   21[BANK0 ] unsigned char 
  2596 ;;  u               2   23[BANK0 ] int 
  2597 ;;  r               2   25[BANK0 ] int 
  2598 ;; Return value:  Size  Location     Type
  2599 ;;                  1    wreg      unsigned char 
  2600 ;; Registers used:
  2601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2602 ;; Tracked objects:
  2603 ;;		On entry : 0/0
  2604 ;;		On exit  : 0/0
  2605 ;;		Unchanged: 0/0
  2606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2607 ;;      Params:         0       0       0       0       0       0       0
  2608 ;;      Locals:         0      12       0       0       0       0       0
  2609 ;;      Temps:          0       6       0       0       0       0       0
  2610 ;;      Totals:         0      18       0       0       0       0       0
  2611 ;;Total ram usage:       18 bytes
  2612 ;; Hardware stack levels used:    1
  2613 ;; Hardware stack levels required when called:    8
  2614 ;; This function calls:
  2615 ;;		Absolute function
  2616 ;;		_CRC8
  2617 ;;		_CRCcheck
  2618 ;;		_Receive_available
  2619 ;;		_Receive_get
  2620 ;;		_Receive_peek
  2621 ;;		_Send_put
  2622 ;; This function is called by:
  2623 ;;		_updateComms
  2624 ;;		_SetBMM
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           	psect	text11
  2629  0000BC                     __ptext11:
  2630                           	opt stack 0
  2631  0000BC                     _receiveData:
  2632                           	opt stack 20
  2633                           
  2634                           ;FastTransfer.c: 140: if (rx_len == 0) {
  2635                           
  2636                           ;incstack = 0
  2637  0000BC  5039               	movf	_rx_len,w,c
  2638  0000BE  A4D8               	btfss	status,2,c
  2639  0000C0  D0AC               	goto	l4001
  2640                           
  2641                           ;FastTransfer.c: 142: if (serial_available() > 4) {
  2642  0000C2  D801               	call	u3848
  2643  0000C4  D00A               	goto	u3849
  2644  0000C6                     u3848:
  2645  0000C6  0005               	push	
  2646  0000C8  6EFA               	movwf	pclath,c
  2647  0000CA  503A               	movf	_serial_available,w,c
  2648  0000CC  6EFD               	movwf	tosl,c
  2649  0000CE  503B               	movf	_serial_available+1,w,c
  2650  0000D0  6EFE               	movwf	tosh,c
  2651  0000D2  50F8               	movf	tblptru,w,c
  2652  0000D4  6EFF               	movwf	tosu,c
  2653  0000D6  50FA               	movf	pclath,w,c
  2654  0000D8  0012               	return		;indir
  2655  0000DA                     u3849:
  2656  0000DA  BE1E               	btfsc	?_Receive_available+1,7,c
  2657  0000DC  D09E               	goto	l4001
  2658  0000DE  501E               	movf	?_Receive_available+1,w,c
  2659  0000E0  E11E               	bnz	l3977
  2660  0000E2  0E05               	movlw	5
  2661  0000E4  5C1D               	subwf	?_Receive_available,w,c
  2662  0000E6  B0D8               	btfsc	status,0,c
  2663  0000E8  D01A               	goto	l3977
  2664  0000EA  D097               	goto	l4001
  2665  0000EC                     l3969:
  2666                           
  2667                           ;FastTransfer.c: 148: alignErrorCounter++;
  2668  0000EC  0100               	movlb	0	; () banked
  2669  0000EE  4B89               	infsnz	_alignErrorCounter& (0+255),f,b
  2670  0000F0  2B8A               	incf	(_alignErrorCounter+1)& (0+255),f,b
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;FastTransfer.c: 149: if (serial_available() < 5)
  2674  0000F2  D801               	call	u3868
  2675  0000F4  D00A               	goto	u3869
  2676  0000F6                     u3868:
  2677  0000F6  0005               	push	
  2678  0000F8  6EFA               	movwf	pclath,c
  2679  0000FA  503A               	movf	_serial_available,w,c
  2680  0000FC  6EFD               	movwf	tosl,c
  2681  0000FE  503B               	movf	_serial_available+1,w,c
  2682  000100  6EFE               	movwf	tosh,c
  2683  000102  50F8               	movf	tblptru,w,c
  2684  000104  6EFF               	movwf	tosu,c
  2685  000106  50FA               	movf	pclath,w,c
  2686  000108  0012               	return		;indir
  2687  00010A                     u3869:
  2688  00010A  BE1E               	btfsc	?_Receive_available+1,7,c
  2689  00010C  D006               	goto	l3973
  2690  00010E  501E               	movf	?_Receive_available+1,w,c
  2691  000110  E106               	bnz	l3977
  2692  000112  0E05               	movlw	5
  2693  000114  5C1D               	subwf	?_Receive_available,w,c
  2694  000116  B0D8               	btfsc	status,0,c
  2695  000118  D002               	goto	l3977
  2696  00011A                     l3973:
  2697                           
  2698                           ;FastTransfer.c: 150: return 0;
  2699  00011A  0E00               	movlw	0
  2700  00011C  0012               	return	
  2701  00011E                     l3977:
  2702  00011E  D801               	call	u3888
  2703  000120  D00A               	goto	u3889
  2704  000122                     u3888:
  2705  000122  0005               	push	
  2706  000124  6EFA               	movwf	pclath,c
  2707  000126  503C               	movf	_serial_read,w,c
  2708  000128  6EFD               	movwf	tosl,c
  2709  00012A  503D               	movf	_serial_read+1,w,c
  2710  00012C  6EFE               	movwf	tosh,c
  2711  00012E  50F8               	movf	tblptru,w,c
  2712  000130  6EFF               	movwf	tosu,c
  2713  000132  50FA               	movf	pclath,w,c
  2714  000134  0012               	return		;indir
  2715  000136                     u3889:
  2716  000136  0A06               	xorlw	6
  2717  000138  A4D8               	btfss	status,2,c
  2718  00013A  D7D8               	goto	l3969
  2719                           
  2720                           ;FastTransfer.c: 151: }
  2721                           ;FastTransfer.c: 152: if (serial_read() == 0x85) {
  2722  00013C  D801               	call	u3908
  2723  00013E  D00A               	goto	u3909
  2724  000140                     u3908:
  2725  000140  0005               	push	
  2726  000142  6EFA               	movwf	pclath,c
  2727  000144  503C               	movf	_serial_read,w,c
  2728  000146  6EFD               	movwf	tosl,c
  2729  000148  503D               	movf	_serial_read+1,w,c
  2730  00014A  6EFE               	movwf	tosh,c
  2731  00014C  50F8               	movf	tblptru,w,c
  2732  00014E  6EFF               	movwf	tosu,c
  2733  000150  50FA               	movf	pclath,w,c
  2734  000152  0012               	return		;indir
  2735  000154                     u3909:
  2736  000154  0A85               	xorlw	133
  2737  000156  A4D8               	btfss	status,2,c
  2738  000158  D060               	goto	l4001
  2739                           
  2740                           ;FastTransfer.c: 153: rx_address = serial_read();
  2741  00015A  D801               	call	u3928
  2742  00015C  D00A               	goto	u3929
  2743  00015E                     u3928:
  2744  00015E  0005               	push	
  2745  000160  6EFA               	movwf	pclath,c
  2746  000162  503C               	movf	_serial_read,w,c
  2747  000164  6EFD               	movwf	tosl,c
  2748  000166  503D               	movf	_serial_read+1,w,c
  2749  000168  6EFE               	movwf	tosh,c
  2750  00016A  50F8               	movf	tblptru,w,c
  2751  00016C  6EFF               	movwf	tosu,c
  2752  00016E  50FA               	movf	pclath,w,c
  2753  000170  0012               	return		;indir
  2754  000172                     u3929:
  2755  000172  6E37               	movwf	_rx_address,c
  2756                           
  2757                           ;FastTransfer.c: 154: returnAddress = serial_read();
  2758  000174  D801               	call	u3938
  2759  000176  D00A               	goto	u3939
  2760  000178                     u3938:
  2761  000178  0005               	push	
  2762  00017A  6EFA               	movwf	pclath,c
  2763  00017C  503C               	movf	_serial_read,w,c
  2764  00017E  6EFD               	movwf	tosl,c
  2765  000180  503D               	movf	_serial_read+1,w,c
  2766  000182  6EFE               	movwf	tosh,c
  2767  000184  50F8               	movf	tblptru,w,c
  2768  000186  6EFF               	movwf	tosu,c
  2769  000188  50FA               	movf	pclath,w,c
  2770  00018A  0012               	return		;indir
  2771  00018C                     u3939:
  2772  00018C  6E36               	movwf	_returnAddress,c
  2773                           
  2774                           ;FastTransfer.c: 155: rx_len = serial_read();
  2775  00018E  D801               	call	u3948
  2776  000190  D00A               	goto	u3949
  2777  000192                     u3948:
  2778  000192  0005               	push	
  2779  000194  6EFA               	movwf	pclath,c
  2780  000196  503C               	movf	_serial_read,w,c
  2781  000198  6EFD               	movwf	tosl,c
  2782  00019A  503D               	movf	_serial_read+1,w,c
  2783  00019C  6EFE               	movwf	tosh,c
  2784  00019E  50F8               	movf	tblptru,w,c
  2785  0001A0  6EFF               	movwf	tosu,c
  2786  0001A2  50FA               	movf	pclath,w,c
  2787  0001A4  0012               	return		;indir
  2788  0001A6                     u3949:
  2789  0001A6  6E39               	movwf	_rx_len,c
  2790                           
  2791                           ;FastTransfer.c: 157: if (rx_address != moduleAddress) {
  2792  0001A8  5043               	movf	_moduleAddress,w,c
  2793  0001AA  1837               	xorwf	_rx_address,w,c
  2794  0001AC  B4D8               	btfsc	status,2,c
  2795  0001AE  D035               	goto	l4001
  2796                           
  2797                           ;FastTransfer.c: 158: addressErrorCounter++;
  2798  0001B0  0100               	movlb	0	; () banked
  2799  0001B2  4B87               	infsnz	_addressErrorCounter& (0+255),f,b
  2800  0001B4  2B88               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;FastTransfer.c: 161: int u;
  2804                           ;FastTransfer.c: 162: for (u = 0; u <= (rx_len + 1); u++) {
  2805  0001B6  0E00               	movlw	0
  2806  0001B8  0100               	movlb	0	; () banked
  2807  0001BA  6FE0               	movwf	(receiveData@u+1)& (0+255),b
  2808  0001BC  0E00               	movlw	0
  2809  0001BE  6FDF               	movwf	receiveData@u& (0+255),b
  2810  0001C0  D00F               	goto	l3993
  2811  0001C2                     l3989:
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;FastTransfer.c: 163: serial_read();
  2815  0001C2  D801               	call	u3968
  2816  0001C4  D00A               	goto	l3991
  2817  0001C6                     u3968:
  2818  0001C6  0005               	push	
  2819  0001C8  6EFA               	movwf	pclath,c
  2820  0001CA  503C               	movf	_serial_read,w,c
  2821  0001CC  6EFD               	movwf	tosl,c
  2822  0001CE  503D               	movf	_serial_read+1,w,c
  2823  0001D0  6EFE               	movwf	tosh,c
  2824  0001D2  50F8               	movf	tblptru,w,c
  2825  0001D4  6EFF               	movwf	tosu,c
  2826  0001D6  50FA               	movf	pclath,w,c
  2827  0001D8  0012               	return		;indir
  2828  0001DA                     l3991:
  2829  0001DA  0100               	movlb	0	; () banked
  2830  0001DC  4BDF               	infsnz	receiveData@u& (0+255),f,b
  2831  0001DE  2BE0               	incf	(receiveData@u+1)& (0+255),f,b
  2832  0001E0                     l3993:
  2833                           
  2834                           ; BSR set to: 0
  2835  0001E0  5039               	movf	_rx_len,w,c
  2836  0001E2  0100               	movlb	0	; () banked
  2837  0001E4  6FD1               	movwf	??_receiveData& (0+255),b
  2838  0001E6  6BD2               	clrf	(??_receiveData+1)& (0+255),b
  2839  0001E8  0E01               	movlw	1
  2840  0001EA  0100               	movlb	0	; () banked
  2841  0001EC  27D1               	addwf	??_receiveData& (0+255),f,b
  2842  0001EE  0E00               	movlw	0
  2843  0001F0  23D2               	addwfc	(??_receiveData+1)& (0+255),f,b
  2844  0001F2  0100               	movlb	0	; () banked
  2845  0001F4  51DF               	movf	receiveData@u& (0+255),w,b
  2846  0001F6  0100               	movlb	0	; () banked
  2847  0001F8  5DD1               	subwf	??_receiveData& (0+255),w,b
  2848  0001FA  0100               	movlb	0	; () banked
  2849  0001FC  51D2               	movf	(??_receiveData+1)& (0+255),w,b
  2850  0001FE  0A80               	xorlw	128
  2851  000200  0100               	movlb	0	; () banked
  2852  000202  6FD3               	movwf	(??_receiveData+2)& (0+255),b
  2853  000204  0100               	movlb	0	; () banked
  2854  000206  51E0               	movf	(receiveData@u+1)& (0+255),w,b
  2855  000208  0A80               	xorlw	128
  2856  00020A  0100               	movlb	0	; () banked
  2857  00020C  59D3               	subwfb	(??_receiveData+2)& (0+255),w,b
  2858  00020E  B0D8               	btfsc	status,0,c
  2859  000210  D7D8               	goto	l3989
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;FastTransfer.c: 164: }
  2863                           ;FastTransfer.c: 165: rx_len = 0;
  2864                           
  2865                           ; BSR set to: 0
  2866  000212  0E00               	movlw	0
  2867  000214  6E39               	movwf	_rx_len,c
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;FastTransfer.c: 166: return 0;
  2871  000216  0E00               	movlw	0
  2872                           
  2873                           ; BSR set to: 0
  2874  000218  0012               	return	
  2875  00021A                     l4001:
  2876                           
  2877                           ;FastTransfer.c: 167: }
  2878                           ;FastTransfer.c: 169: }
  2879                           ;FastTransfer.c: 170: }
  2880                           ;FastTransfer.c: 171: }
  2881                           ;FastTransfer.c: 174: if (rx_len != 0) {
  2882  00021A  5039               	movf	_rx_len,w,c
  2883  00021C  B4D8               	btfsc	status,2,c
  2884  00021E  D2A9               	goto	l4125
  2885                           
  2886                           ;FastTransfer.c: 177: if (rx_array_inx == 0) {
  2887  000220  5038               	movf	_rx_array_inx,w,c
  2888  000222  A4D8               	btfss	status,2,c
  2889  000224  D044               	goto	l4025
  2890  000226                     l4007:
  2891  000226  D801               	call	u4008
  2892  000228  D00A               	goto	u4009
  2893  00022A                     u4008:
  2894  00022A  0005               	push	
  2895  00022C  6EFA               	movwf	pclath,c
  2896  00022E  503A               	movf	_serial_available,w,c
  2897  000230  6EFD               	movwf	tosl,c
  2898  000232  503B               	movf	_serial_available+1,w,c
  2899  000234  6EFE               	movwf	tosh,c
  2900  000236  50F8               	movf	tblptru,w,c
  2901  000238  6EFF               	movwf	tosu,c
  2902  00023A  50FA               	movf	pclath,w,c
  2903  00023C  0012               	return		;indir
  2904  00023E                     u4009:
  2905  00023E  BE1E               	btfsc	?_Receive_available+1,7,c
  2906  000240  D7F2               	goto	l4007
  2907  000242  501E               	movf	?_Receive_available+1,w,c
  2908  000244  E103               	bnz	l4009
  2909  000246  041D               	decf	?_Receive_available,w,c
  2910  000248  A0D8               	btfss	status,0,c
  2911  00024A  D7ED               	goto	l4007
  2912  00024C                     l4009:
  2913                           
  2914                           ;FastTransfer.c: 179: if (255 == serial_peek()) {
  2915  00024C  D801               	call	u4028
  2916  00024E  D00B               	goto	u4029
  2917  000250                     u4028:
  2918  000250  0005               	push	
  2919  000252  0100               	movlb	0	; () banked
  2920  000254  6EFA               	movwf	pclath,c
  2921  000256  51E7               	movf	_serial_peek& (0+255),w,b
  2922  000258  6EFD               	movwf	tosl,c
  2923  00025A  51E8               	movf	(_serial_peek+1)& (0+255),w,b
  2924  00025C  6EFE               	movwf	tosh,c
  2925  00025E  50F8               	movf	tblptru,w,c
  2926  000260  6EFF               	movwf	tosu,c
  2927  000262  50FA               	movf	pclath,w,c
  2928  000264  0012               	return		;indir
  2929  000266                     u4029:
  2930  000266  0AFF               	xorlw	255
  2931  000268  A4D8               	btfss	status,2,c
  2932  00026A  D021               	goto	l4025
  2933                           
  2934                           ;FastTransfer.c: 180: CRCcheck();
  2935  00026C  EC75  F004         	call	_CRCcheck	;wreg free
  2936                           
  2937                           ;FastTransfer.c: 181: rx_len = 0;
  2938  000270  0E00               	movlw	0
  2939  000272  6E39               	movwf	_rx_len,c
  2940                           
  2941                           ;FastTransfer.c: 182: rx_array_inx = 0;
  2942  000274  0E00               	movlw	0
  2943  000276  6E38               	movwf	_rx_array_inx,c
  2944                           
  2945                           ;FastTransfer.c: 183: return 0;
  2946  000278  0E00               	movlw	0
  2947  00027A  0012               	return	
  2948  00027C                     l4021:
  2949                           
  2950                           ;FastTransfer.c: 189: rx_buffer[rx_array_inx++] = serial_read();
  2951  00027C  D801               	call	u4048
  2952  00027E  D00A               	goto	u4049
  2953  000280                     u4048:
  2954  000280  0005               	push	
  2955  000282  6EFA               	movwf	pclath,c
  2956  000284  503C               	movf	_serial_read,w,c
  2957  000286  6EFD               	movwf	tosl,c
  2958  000288  503D               	movf	_serial_read+1,w,c
  2959  00028A  6EFE               	movwf	tosh,c
  2960  00028C  50F8               	movf	tblptru,w,c
  2961  00028E  6EFF               	movwf	tosu,c
  2962  000290  50FA               	movf	pclath,w,c
  2963  000292  0012               	return		;indir
  2964  000294                     u4049:
  2965  000294  0100               	movlb	0	; () banked
  2966  000296  6FD1               	movwf	??_receiveData& (0+255),b
  2967  000298  5038               	movf	_rx_array_inx,w,c
  2968  00029A  0D01               	mullw	1
  2969  00029C  0E00               	movlw	low _rx_buffer
  2970  00029E  24F3               	addwf	prodl,w,c
  2971  0002A0  6ED9               	movwf	fsr2l,c
  2972  0002A2  0E02               	movlw	high _rx_buffer
  2973  0002A4  20F4               	addwfc	prodh,w,c
  2974  0002A6  6EDA               	movwf	fsr2h,c
  2975  0002A8  C0D1  FFDF         	movff	??_receiveData,indf2
  2976                           
  2977                           ; BSR set to: 0
  2978  0002AC  2A38               	incf	_rx_array_inx,f,c
  2979  0002AE                     l4025:
  2980  0002AE  D801               	call	u4058
  2981  0002B0  D00A               	goto	u4059
  2982  0002B2                     u4058:
  2983  0002B2  0005               	push	
  2984  0002B4  6EFA               	movwf	pclath,c
  2985  0002B6  503A               	movf	_serial_available,w,c
  2986  0002B8  6EFD               	movwf	tosl,c
  2987  0002BA  503B               	movf	_serial_available+1,w,c
  2988  0002BC  6EFE               	movwf	tosh,c
  2989  0002BE  50F8               	movf	tblptru,w,c
  2990  0002C0  6EFF               	movwf	tosu,c
  2991  0002C2  50FA               	movf	pclath,w,c
  2992  0002C4  0012               	return		;indir
  2993  0002C6                     u4059:
  2994  0002C6  501D               	movf	?_Receive_available,w,c
  2995  0002C8  101E               	iorwf	?_Receive_available+1,w,c
  2996  0002CA  B4D8               	btfsc	status,2,c
  2997  0002CC  D004               	goto	l4029
  2998  0002CE  5038               	movf	_rx_array_inx,w,c
  2999  0002D0  5C39               	subwf	_rx_len,w,c
  3000  0002D2  B0D8               	btfsc	status,0,c
  3001  0002D4  D7D3               	goto	l4021
  3002  0002D6                     l4029:
  3003                           
  3004                           ;FastTransfer.c: 190: }
  3005                           ;FastTransfer.c: 192: if (rx_len == (rx_array_inx - 1)) {
  3006  0002D6  5039               	movf	_rx_len,w,c
  3007  0002D8  0100               	movlb	0	; () banked
  3008  0002DA  6FD1               	movwf	??_receiveData& (0+255),b
  3009  0002DC  6BD2               	clrf	(??_receiveData+1)& (0+255),b
  3010  0002DE  0EFF               	movlw	255
  3011  0002E0  0100               	movlb	0	; () banked
  3012  0002E2  6FD3               	movwf	(??_receiveData+2)& (0+255),b
  3013  0002E4  0EFF               	movlw	255
  3014  0002E6  0100               	movlb	0	; () banked
  3015  0002E8  6FD4               	movwf	(??_receiveData+3)& (0+255),b
  3016  0002EA  5038               	movf	_rx_array_inx,w,c
  3017  0002EC  0100               	movlb	0	; () banked
  3018  0002EE  6FD5               	movwf	(??_receiveData+4)& (0+255),b
  3019  0002F0  6BD6               	clrf	(??_receiveData+5)& (0+255),b
  3020  0002F2  0100               	movlb	0	; () banked
  3021  0002F4  51D3               	movf	(??_receiveData+2)& (0+255),w,b
  3022  0002F6  0100               	movlb	0	; () banked
  3023  0002F8  27D5               	addwf	(??_receiveData+4)& (0+255),f,b
  3024  0002FA  0100               	movlb	0	; () banked
  3025  0002FC  51D4               	movf	(??_receiveData+3)& (0+255),w,b
  3026  0002FE  0100               	movlb	0	; () banked
  3027  000300  23D6               	addwfc	(??_receiveData+5)& (0+255),f,b
  3028  000302  0100               	movlb	0	; () banked
  3029  000304  51D1               	movf	??_receiveData& (0+255),w,b
  3030  000306  0100               	movlb	0	; () banked
  3031  000308  19D5               	xorwf	(??_receiveData+4)& (0+255),w,b
  3032  00030A  E105               	bnz	u4081
  3033  00030C  0100               	movlb	0	; () banked
  3034  00030E  51D2               	movf	(??_receiveData+1)& (0+255),w,b
  3035  000310  0100               	movlb	0	; () banked
  3036  000312  19D6               	xorwf	(??_receiveData+5)& (0+255),w,b
  3037  000314  A4D8               	btfss	status,2,c
  3038  000316                     u4081:
  3039  000316  D22D               	goto	l4125
  3040                           
  3041                           ; BSR set to: 0
  3042                           ;FastTransfer.c: 195: calc_CS = CRC8(rx_buffer, rx_len);
  3043  000318  0E00               	movlw	low _rx_buffer
  3044  00031A  6E1B               	movwf	CRC8@data,c
  3045  00031C  0E02               	movlw	high _rx_buffer
  3046  00031E  6E1C               	movwf	CRC8@data+1,c
  3047  000320  C039  F01D         	movff	_rx_len,CRC8@len
  3048  000324  EC45  F00A         	call	_CRC8	;wreg free
  3049  000328  6E2F               	movwf	_calc_CS,c
  3050                           
  3051                           ;FastTransfer.c: 199: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  3052  00032A  0EFF               	movlw	255
  3053  00032C  0100               	movlb	0	; () banked
  3054  00032E  6FD1               	movwf	??_receiveData& (0+255),b
  3055  000330  0EFF               	movlw	255
  3056  000332  0100               	movlb	0	; () banked
  3057  000334  6FD2               	movwf	(??_receiveData+1)& (0+255),b
  3058  000336  5038               	movf	_rx_array_inx,w,c
  3059  000338  0100               	movlb	0	; () banked
  3060  00033A  6FD3               	movwf	(??_receiveData+2)& (0+255),b
  3061  00033C  6BD4               	clrf	(??_receiveData+3)& (0+255),b
  3062  00033E  0100               	movlb	0	; () banked
  3063  000340  51D1               	movf	??_receiveData& (0+255),w,b
  3064  000342  0100               	movlb	0	; () banked
  3065  000344  27D3               	addwf	(??_receiveData+2)& (0+255),f,b
  3066  000346  0100               	movlb	0	; () banked
  3067  000348  51D2               	movf	(??_receiveData+1)& (0+255),w,b
  3068  00034A  0100               	movlb	0	; () banked
  3069  00034C  23D4               	addwfc	(??_receiveData+3)& (0+255),f,b
  3070  00034E  0E00               	movlw	low _rx_buffer
  3071  000350  0100               	movlb	0	; () banked
  3072  000352  25D3               	addwf	(??_receiveData+2)& (0+255),w,b
  3073  000354  6ED9               	movwf	fsr2l,c
  3074  000356  0E02               	movlw	high _rx_buffer
  3075  000358  0100               	movlb	0	; () banked
  3076  00035A  21D4               	addwfc	(??_receiveData+3)& (0+255),w,b
  3077  00035C  6EDA               	movwf	fsr2h,c
  3078  00035E  502F               	movf	_calc_CS,w,c
  3079  000360  18DE               	xorwf	postinc2,w,c
  3080  000362  A4D8               	btfss	status,2,c
  3081  000364  D13D               	goto	l4087
  3082                           
  3083                           ; BSR set to: 0
  3084                           ;FastTransfer.c: 202: int r;
  3085                           ;FastTransfer.c: 203: for (r = 0; r < rx_len; r = r + 3) {
  3086  000366  0E00               	movlw	0
  3087  000368  0100               	movlb	0	; () banked
  3088  00036A  6FE2               	movwf	(receiveData@r+1)& (0+255),b
  3089  00036C  0E00               	movlw	0
  3090  00036E  6FE1               	movwf	receiveData@r& (0+255),b
  3091  000370  D05D               	goto	l4047
  3092  000372                     l4037:
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;FastTransfer.c: 204: if (rx_buffer[r] < maxDataAddress) {
  3096  000372  0E00               	movlw	low _rx_buffer
  3097  000374  0100               	movlb	0	; () banked
  3098  000376  25E1               	addwf	receiveData@r& (0+255),w,b
  3099  000378  6ED9               	movwf	fsr2l,c
  3100  00037A  0E02               	movlw	high _rx_buffer
  3101  00037C  0100               	movlb	0	; () banked
  3102  00037E  21E2               	addwfc	(receiveData@r+1)& (0+255),w,b
  3103  000380  6EDA               	movwf	fsr2h,c
  3104  000382  0100               	movlb	0	; () banked
  3105  000384  51EA               	movf	_maxDataAddress& (0+255),w,b
  3106  000386  5CDE               	subwf	postinc2,w,c
  3107  000388  B0D8               	btfsc	status,0,c
  3108  00038A  D043               	goto	l4043
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;FastTransfer.c: 205: group.parts[0] = rx_buffer[r + 1];
  3112  00038C  0E01               	movlw	1
  3113  00038E  0100               	movlb	0	; () banked
  3114  000390  25E1               	addwf	receiveData@r& (0+255),w,b
  3115  000392  0100               	movlb	0	; () banked
  3116  000394  6FD1               	movwf	??_receiveData& (0+255),b
  3117  000396  0E00               	movlw	0
  3118  000398  0100               	movlb	0	; () banked
  3119  00039A  21E2               	addwfc	(receiveData@r+1)& (0+255),w,b
  3120  00039C  0100               	movlb	0	; () banked
  3121  00039E  6FD2               	movwf	(??_receiveData+1)& (0+255),b
  3122  0003A0  0E00               	movlw	low _rx_buffer
  3123  0003A2  0100               	movlb	0	; () banked
  3124  0003A4  25D1               	addwf	??_receiveData& (0+255),w,b
  3125  0003A6  6ED9               	movwf	fsr2l,c
  3126  0003A8  0E02               	movlw	high _rx_buffer
  3127  0003AA  0100               	movlb	0	; () banked
  3128  0003AC  21D2               	addwfc	(??_receiveData+1)& (0+255),w,b
  3129  0003AE  6EDA               	movwf	fsr2h,c
  3130  0003B0  50DF               	movf	indf2,w,c
  3131  0003B2  6E2C               	movwf	_group,c
  3132                           
  3133                           ;FastTransfer.c: 206: group.parts[1] = rx_buffer[r + 2];
  3134  0003B4  0E02               	movlw	2
  3135  0003B6  0100               	movlb	0	; () banked
  3136  0003B8  25E1               	addwf	receiveData@r& (0+255),w,b
  3137  0003BA  0100               	movlb	0	; () banked
  3138  0003BC  6FD1               	movwf	??_receiveData& (0+255),b
  3139  0003BE  0E00               	movlw	0
  3140  0003C0  0100               	movlb	0	; () banked
  3141  0003C2  21E2               	addwfc	(receiveData@r+1)& (0+255),w,b
  3142  0003C4  0100               	movlb	0	; () banked
  3143  0003C6  6FD2               	movwf	(??_receiveData+1)& (0+255),b
  3144  0003C8  0E00               	movlw	low _rx_buffer
  3145  0003CA  0100               	movlb	0	; () banked
  3146  0003CC  25D1               	addwf	??_receiveData& (0+255),w,b
  3147  0003CE  6ED9               	movwf	fsr2l,c
  3148  0003D0  0E02               	movlw	high _rx_buffer
  3149  0003D2  0100               	movlb	0	; () banked
  3150  0003D4  21D2               	addwfc	(??_receiveData+1)& (0+255),w,b
  3151  0003D6  6EDA               	movwf	fsr2h,c
  3152  0003D8  50DF               	movf	indf2,w,c
  3153  0003DA  6E2D               	movwf	_group+1,c
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;FastTransfer.c: 207: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  3157  0003DC  0E00               	movlw	low _rx_buffer
  3158  0003DE  0100               	movlb	0	; () banked
  3159  0003E0  25E1               	addwf	receiveData@r& (0+255),w,b
  3160  0003E2  6ED9               	movwf	fsr2l,c
  3161  0003E4  0E02               	movlw	high _rx_buffer
  3162  0003E6  0100               	movlb	0	; () banked
  3163  0003E8  21E2               	addwfc	(receiveData@r+1)& (0+255),w,b
  3164  0003EA  6EDA               	movwf	fsr2h,c
  3165  0003EC  50DF               	movf	indf2,w,c
  3166  0003EE  0100               	movlb	0	; () banked
  3167  0003F0  6FD1               	movwf	??_receiveData& (0+255),b
  3168  0003F2  0100               	movlb	0	; () banked
  3169  0003F4  51D1               	movf	??_receiveData& (0+255),w,b
  3170  0003F6  0D02               	mullw	2
  3171  0003F8  50F3               	movf	prodl,w,c
  3172  0003FA  0100               	movlb	0	; () banked
  3173  0003FC  25E3               	addwf	_receiveArrayAddress& (0+255),w,b
  3174  0003FE  6ED9               	movwf	fsr2l,c
  3175  000400  50F4               	movf	prodh,w,c
  3176  000402  0100               	movlb	0	; () banked
  3177  000404  21E4               	addwfc	(_receiveArrayAddress+1)& (0+255),w,b
  3178  000406  6EDA               	movwf	fsr2h,c
  3179  000408  C02C  FFDE         	movff	_group,postinc2
  3180  00040C  C02D  FFDD         	movff	_group+1,postdec2
  3181                           
  3182                           ;FastTransfer.c: 208: } else {
  3183  000410  D003               	goto	l4045
  3184  000412                     l4043:
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;FastTransfer.c: 209: dataAdressErrorCounter++;
  3188  000412  0100               	movlb	0	; () banked
  3189  000414  4B8D               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  3190  000416  2B8E               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  3191  000418                     l4045:
  3192                           
  3193                           ; BSR set to: 0
  3194  000418  0E03               	movlw	3
  3195  00041A  0100               	movlb	0	; () banked
  3196  00041C  25E1               	addwf	receiveData@r& (0+255),w,b
  3197  00041E  0100               	movlb	0	; () banked
  3198  000420  6FE1               	movwf	receiveData@r& (0+255),b
  3199  000422  0E00               	movlw	0
  3200  000424  0100               	movlb	0	; () banked
  3201  000426  21E2               	addwfc	(receiveData@r+1)& (0+255),w,b
  3202  000428  0100               	movlb	0	; () banked
  3203  00042A  6FE2               	movwf	(receiveData@r+1)& (0+255),b
  3204  00042C                     l4047:
  3205                           
  3206                           ; BSR set to: 0
  3207  00042C  5039               	movf	_rx_len,w,c
  3208  00042E  0100               	movlb	0	; () banked
  3209  000430  6FD1               	movwf	??_receiveData& (0+255),b
  3210  000432  6BD2               	clrf	(??_receiveData+1)& (0+255),b
  3211  000434  0100               	movlb	0	; () banked
  3212  000436  51D1               	movf	??_receiveData& (0+255),w,b
  3213  000438  0100               	movlb	0	; () banked
  3214  00043A  5DE1               	subwf	receiveData@r& (0+255),w,b
  3215  00043C  0100               	movlb	0	; () banked
  3216  00043E  51E2               	movf	(receiveData@r+1)& (0+255),w,b
  3217  000440  0A80               	xorlw	128
  3218  000442  0100               	movlb	0	; () banked
  3219  000444  6FD3               	movwf	(??_receiveData+2)& (0+255),b
  3220  000446  0100               	movlb	0	; () banked
  3221  000448  51D2               	movf	(??_receiveData+1)& (0+255),w,b
  3222  00044A  0A80               	xorlw	128
  3223  00044C  0100               	movlb	0	; () banked
  3224  00044E  59D3               	subwfb	(??_receiveData+2)& (0+255),w,b
  3225  000450  A0D8               	btfss	status,0,c
  3226  000452  D78F               	goto	l4037
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;FastTransfer.c: 210: }
  3230                           ;FastTransfer.c: 211: }
  3231                           ;FastTransfer.c: 214: if (AKNAKsend) {
  3232                           
  3233                           ; BSR set to: 0
  3234  000454  0100               	movlb	0	; () banked
  3235  000456  51E9               	movf	_AKNAKsend& (0+255),w,b
  3236  000458  B4D8               	btfsc	status,2,c
  3237  00045A  D0BC               	goto	l4077
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;FastTransfer.c: 215: unsigned char holder[3];
  3241                           ;FastTransfer.c: 216: holder[0] = 255;
  3242  00045C  0100               	movlb	0	; () banked
  3243  00045E  69D7               	setf	receiveData@holder& (0+255),b
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;FastTransfer.c: 217: holder[1] = 1;
  3247  000460  0E01               	movlw	1
  3248  000462  0100               	movlb	0	; () banked
  3249  000464  6FD8               	movwf	(receiveData@holder+1)& (0+255),b
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;FastTransfer.c: 218: holder[2] = rx_buffer[rx_array_inx - 1];
  3253  000466  0EFF               	movlw	255
  3254  000468  0100               	movlb	0	; () banked
  3255  00046A  6FD1               	movwf	??_receiveData& (0+255),b
  3256  00046C  0EFF               	movlw	255
  3257  00046E  0100               	movlb	0	; () banked
  3258  000470  6FD2               	movwf	(??_receiveData+1)& (0+255),b
  3259  000472  5038               	movf	_rx_array_inx,w,c
  3260  000474  0100               	movlb	0	; () banked
  3261  000476  6FD3               	movwf	(??_receiveData+2)& (0+255),b
  3262  000478  6BD4               	clrf	(??_receiveData+3)& (0+255),b
  3263  00047A  0100               	movlb	0	; () banked
  3264  00047C  51D1               	movf	??_receiveData& (0+255),w,b
  3265  00047E  0100               	movlb	0	; () banked
  3266  000480  27D3               	addwf	(??_receiveData+2)& (0+255),f,b
  3267  000482  0100               	movlb	0	; () banked
  3268  000484  51D2               	movf	(??_receiveData+1)& (0+255),w,b
  3269  000486  0100               	movlb	0	; () banked
  3270  000488  23D4               	addwfc	(??_receiveData+3)& (0+255),f,b
  3271  00048A  0E00               	movlw	low _rx_buffer
  3272  00048C  0100               	movlb	0	; () banked
  3273  00048E  25D3               	addwf	(??_receiveData+2)& (0+255),w,b
  3274  000490  6ED9               	movwf	fsr2l,c
  3275  000492  0E02               	movlw	high _rx_buffer
  3276  000494  0100               	movlb	0	; () banked
  3277  000496  21D4               	addwfc	(??_receiveData+3)& (0+255),w,b
  3278  000498  6EDA               	movwf	fsr2h,c
  3279  00049A  50DF               	movf	indf2,w,c
  3280  00049C  0100               	movlb	0	; () banked
  3281  00049E  6FD9               	movwf	(receiveData@holder+2)& (0+255),b
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;FastTransfer.c: 219: unsigned char crcHolder = CRC8(holder, 3);
  3285  0004A0  0ED7               	movlw	low receiveData@holder
  3286  0004A2  6E1B               	movwf	CRC8@data,c
  3287  0004A4  0E00               	movlw	high receiveData@holder
  3288  0004A6  6E1C               	movwf	CRC8@data+1,c
  3289  0004A8  0E03               	movlw	3
  3290  0004AA  6E1D               	movwf	CRC8@len,c
  3291  0004AC  EC45  F00A         	call	_CRC8	;wreg free
  3292  0004B0  0100               	movlb	0	; () banked
  3293  0004B2  6FDD               	movwf	receiveData@crcHolder& (0+255),b
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;FastTransfer.c: 220: serial_write(0x06);
  3297  0004B4  D801               	call	u4138
  3298  0004B6  D00B               	goto	l4061
  3299  0004B8                     u4138:
  3300  0004B8  0005               	push	
  3301  0004BA  6EFA               	movwf	pclath,c
  3302  0004BC  503E               	movf	_serial_write,w,c
  3303  0004BE  6EFD               	movwf	tosl,c
  3304  0004C0  503F               	movf	_serial_write+1,w,c
  3305  0004C2  6EFE               	movwf	tosh,c
  3306  0004C4  50F8               	movf	tblptru,w,c
  3307  0004C6  6EFF               	movwf	tosu,c
  3308  0004C8  50FA               	movf	pclath,w,c
  3309  0004CA  0E06               	movlw	6
  3310  0004CC  0012               	return		;indir
  3311  0004CE                     l4061:
  3312                           
  3313                           ;FastTransfer.c: 221: serial_write(0x85);
  3314  0004CE  D801               	call	u4148
  3315  0004D0  D00B               	goto	l4063
  3316  0004D2                     u4148:
  3317  0004D2  0005               	push	
  3318  0004D4  6EFA               	movwf	pclath,c
  3319  0004D6  503E               	movf	_serial_write,w,c
  3320  0004D8  6EFD               	movwf	tosl,c
  3321  0004DA  503F               	movf	_serial_write+1,w,c
  3322  0004DC  6EFE               	movwf	tosh,c
  3323  0004DE  50F8               	movf	tblptru,w,c
  3324  0004E0  6EFF               	movwf	tosu,c
  3325  0004E2  50FA               	movf	pclath,w,c
  3326  0004E4  0E85               	movlw	133
  3327  0004E6  0012               	return		;indir
  3328  0004E8                     l4063:
  3329                           
  3330                           ;FastTransfer.c: 222: serial_write(returnAddress);
  3331  0004E8  D801               	call	u4158
  3332  0004EA  D00B               	goto	l4065
  3333  0004EC                     u4158:
  3334  0004EC  0005               	push	
  3335  0004EE  6EFA               	movwf	pclath,c
  3336  0004F0  503E               	movf	_serial_write,w,c
  3337  0004F2  6EFD               	movwf	tosl,c
  3338  0004F4  503F               	movf	_serial_write+1,w,c
  3339  0004F6  6EFE               	movwf	tosh,c
  3340  0004F8  50F8               	movf	tblptru,w,c
  3341  0004FA  6EFF               	movwf	tosu,c
  3342  0004FC  50FA               	movf	pclath,w,c
  3343  0004FE  5036               	movf	_returnAddress,w,c
  3344  000500  0012               	return		;indir
  3345  000502                     l4065:
  3346                           
  3347                           ;FastTransfer.c: 223: serial_write(moduleAddress);
  3348  000502  D801               	call	u4168
  3349  000504  D00B               	goto	l4067
  3350  000506                     u4168:
  3351  000506  0005               	push	
  3352  000508  6EFA               	movwf	pclath,c
  3353  00050A  503E               	movf	_serial_write,w,c
  3354  00050C  6EFD               	movwf	tosl,c
  3355  00050E  503F               	movf	_serial_write+1,w,c
  3356  000510  6EFE               	movwf	tosh,c
  3357  000512  50F8               	movf	tblptru,w,c
  3358  000514  6EFF               	movwf	tosu,c
  3359  000516  50FA               	movf	pclath,w,c
  3360  000518  5043               	movf	_moduleAddress,w,c
  3361  00051A  0012               	return		;indir
  3362  00051C                     l4067:
  3363                           
  3364                           ;FastTransfer.c: 224: serial_write(3);
  3365  00051C  D801               	call	u4178
  3366  00051E  D00B               	goto	l4069
  3367  000520                     u4178:
  3368  000520  0005               	push	
  3369  000522  6EFA               	movwf	pclath,c
  3370  000524  503E               	movf	_serial_write,w,c
  3371  000526  6EFD               	movwf	tosl,c
  3372  000528  503F               	movf	_serial_write+1,w,c
  3373  00052A  6EFE               	movwf	tosh,c
  3374  00052C  50F8               	movf	tblptru,w,c
  3375  00052E  6EFF               	movwf	tosu,c
  3376  000530  50FA               	movf	pclath,w,c
  3377  000532  0E03               	movlw	3
  3378  000534  0012               	return		;indir
  3379  000536                     l4069:
  3380                           
  3381                           ;FastTransfer.c: 225: serial_write(255);
  3382  000536  D801               	call	u4188
  3383  000538  D00B               	goto	l4071
  3384  00053A                     u4188:
  3385  00053A  0005               	push	
  3386  00053C  6EFA               	movwf	pclath,c
  3387  00053E  503E               	movf	_serial_write,w,c
  3388  000540  6EFD               	movwf	tosl,c
  3389  000542  503F               	movf	_serial_write+1,w,c
  3390  000544  6EFE               	movwf	tosh,c
  3391  000546  50F8               	movf	tblptru,w,c
  3392  000548  6EFF               	movwf	tosu,c
  3393  00054A  50FA               	movf	pclath,w,c
  3394  00054C  0EFF               	movlw	255
  3395  00054E  0012               	return		;indir
  3396  000550                     l4071:
  3397                           
  3398                           ;FastTransfer.c: 226: serial_write(1);
  3399  000550  D801               	call	u4198
  3400  000552  D00B               	goto	l4073
  3401  000554                     u4198:
  3402  000554  0005               	push	
  3403  000556  6EFA               	movwf	pclath,c
  3404  000558  503E               	movf	_serial_write,w,c
  3405  00055A  6EFD               	movwf	tosl,c
  3406  00055C  503F               	movf	_serial_write+1,w,c
  3407  00055E  6EFE               	movwf	tosh,c
  3408  000560  50F8               	movf	tblptru,w,c
  3409  000562  6EFF               	movwf	tosu,c
  3410  000564  50FA               	movf	pclath,w,c
  3411  000566  0E01               	movlw	1
  3412  000568  0012               	return		;indir
  3413  00056A                     l4073:
  3414                           
  3415                           ;FastTransfer.c: 227: serial_write(rx_buffer[rx_array_inx - 1]);
  3416  00056A  D801               	call	u4208
  3417  00056C  D025               	goto	l4075
  3418  00056E                     u4208:
  3419  00056E  0005               	push	
  3420  000570  6EFA               	movwf	pclath,c
  3421  000572  503E               	movf	_serial_write,w,c
  3422  000574  6EFD               	movwf	tosl,c
  3423  000576  503F               	movf	_serial_write+1,w,c
  3424  000578  6EFE               	movwf	tosh,c
  3425  00057A  50F8               	movf	tblptru,w,c
  3426  00057C  6EFF               	movwf	tosu,c
  3427  00057E  50FA               	movf	pclath,w,c
  3428  000580  0EFF               	movlw	255
  3429  000582  0100               	movlb	0	; () banked
  3430  000584  6FD1               	movwf	??_receiveData& (0+255),b
  3431  000586  0EFF               	movlw	255
  3432  000588  0100               	movlb	0	; () banked
  3433  00058A  6FD2               	movwf	(??_receiveData+1)& (0+255),b
  3434  00058C  5038               	movf	_rx_array_inx,w,c
  3435  00058E  0100               	movlb	0	; () banked
  3436  000590  6FD3               	movwf	(??_receiveData+2)& (0+255),b
  3437  000592  6BD4               	clrf	(??_receiveData+3)& (0+255),b
  3438  000594  0100               	movlb	0	; () banked
  3439  000596  51D1               	movf	??_receiveData& (0+255),w,b
  3440  000598  0100               	movlb	0	; () banked
  3441  00059A  27D3               	addwf	(??_receiveData+2)& (0+255),f,b
  3442  00059C  0100               	movlb	0	; () banked
  3443  00059E  51D2               	movf	(??_receiveData+1)& (0+255),w,b
  3444  0005A0  0100               	movlb	0	; () banked
  3445  0005A2  23D4               	addwfc	(??_receiveData+3)& (0+255),f,b
  3446  0005A4  0E00               	movlw	low _rx_buffer
  3447  0005A6  0100               	movlb	0	; () banked
  3448  0005A8  25D3               	addwf	(??_receiveData+2)& (0+255),w,b
  3449  0005AA  6ED9               	movwf	fsr2l,c
  3450  0005AC  0E02               	movlw	high _rx_buffer
  3451  0005AE  0100               	movlb	0	; () banked
  3452  0005B0  21D4               	addwfc	(??_receiveData+3)& (0+255),w,b
  3453  0005B2  6EDA               	movwf	fsr2h,c
  3454  0005B4  50DF               	movf	indf2,w,c
  3455  0005B6  0012               	return		;indir
  3456  0005B8                     l4075:
  3457                           
  3458                           ;FastTransfer.c: 228: serial_write(crcHolder);
  3459  0005B8  D801               	call	u4218
  3460  0005BA  D00C               	goto	l4077
  3461  0005BC                     u4218:
  3462  0005BC  0005               	push	
  3463  0005BE  6EFA               	movwf	pclath,c
  3464  0005C0  503E               	movf	_serial_write,w,c
  3465  0005C2  6EFD               	movwf	tosl,c
  3466  0005C4  503F               	movf	_serial_write+1,w,c
  3467  0005C6  6EFE               	movwf	tosh,c
  3468  0005C8  50F8               	movf	tblptru,w,c
  3469  0005CA  6EFF               	movwf	tosu,c
  3470  0005CC  50FA               	movf	pclath,w,c
  3471  0005CE  0100               	movlb	0	; () banked
  3472  0005D0  51DD               	movf	receiveData@crcHolder& (0+255),w,b
  3473  0005D2  0012               	return		;indir
  3474  0005D4                     l4077:
  3475                           
  3476                           ;FastTransfer.c: 229: }
  3477                           ;FastTransfer.c: 233: rx_len = 0;
  3478  0005D4  0E00               	movlw	0
  3479  0005D6  6E39               	movwf	_rx_len,c
  3480                           
  3481                           ;FastTransfer.c: 234: rx_array_inx = 0;
  3482  0005D8  0E00               	movlw	0
  3483  0005DA  6E38               	movwf	_rx_array_inx,c
  3484                           
  3485                           ;FastTransfer.c: 235: return 1;
  3486  0005DC  0E01               	movlw	1
  3487  0005DE  0012               	return	
  3488  0005E0                     l4087:
  3489                           
  3490                           ;FastTransfer.c: 237: crcErrorCounter++;
  3491  0005E0  0100               	movlb	0	; () banked
  3492  0005E2  4B8B               	infsnz	_crcErrorCounter& (0+255),f,b
  3493  0005E4  2B8C               	incf	(_crcErrorCounter+1)& (0+255),f,b
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;FastTransfer.c: 239: if (AKNAKsend) {
  3497  0005E6  0100               	movlb	0	; () banked
  3498  0005E8  51E9               	movf	_AKNAKsend& (0+255),w,b
  3499  0005EA  B4D8               	btfsc	status,2,c
  3500  0005EC  D0BC               	goto	l4117
  3501                           
  3502                           ; BSR set to: 0
  3503                           ;FastTransfer.c: 240: unsigned char holder[3];
  3504                           ;FastTransfer.c: 241: holder[0] = 255;
  3505  0005EE  0100               	movlb	0	; () banked
  3506  0005F0  69DA               	setf	receiveData@holder_1756& (0+255),b
  3507                           
  3508                           ; BSR set to: 0
  3509                           ;FastTransfer.c: 242: holder[1] = 2;
  3510  0005F2  0E02               	movlw	2
  3511  0005F4  0100               	movlb	0	; () banked
  3512  0005F6  6FDB               	movwf	(receiveData@holder_1756+1)& (0+255),b
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;FastTransfer.c: 243: holder[2] = rx_buffer[rx_array_inx - 1];
  3516  0005F8  0EFF               	movlw	255
  3517  0005FA  0100               	movlb	0	; () banked
  3518  0005FC  6FD1               	movwf	??_receiveData& (0+255),b
  3519  0005FE  0EFF               	movlw	255
  3520  000600  0100               	movlb	0	; () banked
  3521  000602  6FD2               	movwf	(??_receiveData+1)& (0+255),b
  3522  000604  5038               	movf	_rx_array_inx,w,c
  3523  000606  0100               	movlb	0	; () banked
  3524  000608  6FD3               	movwf	(??_receiveData+2)& (0+255),b
  3525  00060A  6BD4               	clrf	(??_receiveData+3)& (0+255),b
  3526  00060C  0100               	movlb	0	; () banked
  3527  00060E  51D1               	movf	??_receiveData& (0+255),w,b
  3528  000610  0100               	movlb	0	; () banked
  3529  000612  27D3               	addwf	(??_receiveData+2)& (0+255),f,b
  3530  000614  0100               	movlb	0	; () banked
  3531  000616  51D2               	movf	(??_receiveData+1)& (0+255),w,b
  3532  000618  0100               	movlb	0	; () banked
  3533  00061A  23D4               	addwfc	(??_receiveData+3)& (0+255),f,b
  3534  00061C  0E00               	movlw	low _rx_buffer
  3535  00061E  0100               	movlb	0	; () banked
  3536  000620  25D3               	addwf	(??_receiveData+2)& (0+255),w,b
  3537  000622  6ED9               	movwf	fsr2l,c
  3538  000624  0E02               	movlw	high _rx_buffer
  3539  000626  0100               	movlb	0	; () banked
  3540  000628  21D4               	addwfc	(??_receiveData+3)& (0+255),w,b
  3541  00062A  6EDA               	movwf	fsr2h,c
  3542  00062C  50DF               	movf	indf2,w,c
  3543  00062E  0100               	movlb	0	; () banked
  3544  000630  6FDC               	movwf	(receiveData@holder_1756+2)& (0+255),b
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;FastTransfer.c: 244: unsigned char crcHolder = CRC8(holder, 3);
  3548  000632  0EDA               	movlw	low receiveData@holder_1756
  3549  000634  6E1B               	movwf	CRC8@data,c
  3550  000636  0E00               	movlw	high receiveData@holder_1756
  3551  000638  6E1C               	movwf	CRC8@data+1,c
  3552  00063A  0E03               	movlw	3
  3553  00063C  6E1D               	movwf	CRC8@len,c
  3554  00063E  EC45  F00A         	call	_CRC8
  3555  000642  0100               	movlb	0	; () banked
  3556  000644  6FDE               	movwf	receiveData@crcHolder_1757& (0+255),b
  3557                           
  3558                           ; BSR set to: 0
  3559                           ;FastTransfer.c: 245: serial_write(0x06);
  3560  000646  D801               	call	u4238
  3561  000648  D00B               	goto	l4101
  3562  00064A                     u4238:
  3563  00064A  0005               	push	
  3564  00064C  6EFA               	movwf	pclath,c
  3565  00064E  503E               	movf	_serial_write,w,c
  3566  000650  6EFD               	movwf	tosl,c
  3567  000652  503F               	movf	_serial_write+1,w,c
  3568  000654  6EFE               	movwf	tosh,c
  3569  000656  50F8               	movf	tblptru,w,c
  3570  000658  6EFF               	movwf	tosu,c
  3571  00065A  50FA               	movf	pclath,w,c
  3572  00065C  0E06               	movlw	6
  3573  00065E  0012               	return		;indir
  3574  000660                     l4101:
  3575                           
  3576                           ;FastTransfer.c: 246: serial_write(0x85);
  3577  000660  D801               	call	u4248
  3578  000662  D00B               	goto	l4103
  3579  000664                     u4248:
  3580  000664  0005               	push	
  3581  000666  6EFA               	movwf	pclath,c
  3582  000668  503E               	movf	_serial_write,w,c
  3583  00066A  6EFD               	movwf	tosl,c
  3584  00066C  503F               	movf	_serial_write+1,w,c
  3585  00066E  6EFE               	movwf	tosh,c
  3586  000670  50F8               	movf	tblptru,w,c
  3587  000672  6EFF               	movwf	tosu,c
  3588  000674  50FA               	movf	pclath,w,c
  3589  000676  0E85               	movlw	133
  3590  000678  0012               	return		;indir
  3591  00067A                     l4103:
  3592                           
  3593                           ;FastTransfer.c: 247: serial_write(returnAddress);
  3594  00067A  D801               	call	u4258
  3595  00067C  D00B               	goto	l4105
  3596  00067E                     u4258:
  3597  00067E  0005               	push	
  3598  000680  6EFA               	movwf	pclath,c
  3599  000682  503E               	movf	_serial_write,w,c
  3600  000684  6EFD               	movwf	tosl,c
  3601  000686  503F               	movf	_serial_write+1,w,c
  3602  000688  6EFE               	movwf	tosh,c
  3603  00068A  50F8               	movf	tblptru,w,c
  3604  00068C  6EFF               	movwf	tosu,c
  3605  00068E  50FA               	movf	pclath,w,c
  3606  000690  5036               	movf	_returnAddress,w,c
  3607  000692  0012               	return		;indir
  3608  000694                     l4105:
  3609                           
  3610                           ;FastTransfer.c: 248: serial_write(moduleAddress);
  3611  000694  D801               	call	u4268
  3612  000696  D00B               	goto	l4107
  3613  000698                     u4268:
  3614  000698  0005               	push	
  3615  00069A  6EFA               	movwf	pclath,c
  3616  00069C  503E               	movf	_serial_write,w,c
  3617  00069E  6EFD               	movwf	tosl,c
  3618  0006A0  503F               	movf	_serial_write+1,w,c
  3619  0006A2  6EFE               	movwf	tosh,c
  3620  0006A4  50F8               	movf	tblptru,w,c
  3621  0006A6  6EFF               	movwf	tosu,c
  3622  0006A8  50FA               	movf	pclath,w,c
  3623  0006AA  5043               	movf	_moduleAddress,w,c
  3624  0006AC  0012               	return		;indir
  3625  0006AE                     l4107:
  3626                           
  3627                           ;FastTransfer.c: 249: serial_write(3);
  3628  0006AE  D801               	call	u4278
  3629  0006B0  D00B               	goto	l4109
  3630  0006B2                     u4278:
  3631  0006B2  0005               	push	
  3632  0006B4  6EFA               	movwf	pclath,c
  3633  0006B6  503E               	movf	_serial_write,w,c
  3634  0006B8  6EFD               	movwf	tosl,c
  3635  0006BA  503F               	movf	_serial_write+1,w,c
  3636  0006BC  6EFE               	movwf	tosh,c
  3637  0006BE  50F8               	movf	tblptru,w,c
  3638  0006C0  6EFF               	movwf	tosu,c
  3639  0006C2  50FA               	movf	pclath,w,c
  3640  0006C4  0E03               	movlw	3
  3641  0006C6  0012               	return		;indir
  3642  0006C8                     l4109:
  3643                           
  3644                           ;FastTransfer.c: 250: serial_write(255);
  3645  0006C8  D801               	call	u4288
  3646  0006CA  D00B               	goto	l4111
  3647  0006CC                     u4288:
  3648  0006CC  0005               	push	
  3649  0006CE  6EFA               	movwf	pclath,c
  3650  0006D0  503E               	movf	_serial_write,w,c
  3651  0006D2  6EFD               	movwf	tosl,c
  3652  0006D4  503F               	movf	_serial_write+1,w,c
  3653  0006D6  6EFE               	movwf	tosh,c
  3654  0006D8  50F8               	movf	tblptru,w,c
  3655  0006DA  6EFF               	movwf	tosu,c
  3656  0006DC  50FA               	movf	pclath,w,c
  3657  0006DE  0EFF               	movlw	255
  3658  0006E0  0012               	return		;indir
  3659  0006E2                     l4111:
  3660                           
  3661                           ;FastTransfer.c: 251: serial_write(2);
  3662  0006E2  D801               	call	u4298
  3663  0006E4  D00B               	goto	l4113
  3664  0006E6                     u4298:
  3665  0006E6  0005               	push	
  3666  0006E8  6EFA               	movwf	pclath,c
  3667  0006EA  503E               	movf	_serial_write,w,c
  3668  0006EC  6EFD               	movwf	tosl,c
  3669  0006EE  503F               	movf	_serial_write+1,w,c
  3670  0006F0  6EFE               	movwf	tosh,c
  3671  0006F2  50F8               	movf	tblptru,w,c
  3672  0006F4  6EFF               	movwf	tosu,c
  3673  0006F6  50FA               	movf	pclath,w,c
  3674  0006F8  0E02               	movlw	2
  3675  0006FA  0012               	return		;indir
  3676  0006FC                     l4113:
  3677                           
  3678                           ;FastTransfer.c: 252: serial_write(rx_buffer[rx_array_inx - 1]);
  3679  0006FC  D801               	call	u4308
  3680  0006FE  D025               	goto	l4115
  3681  000700                     u4308:
  3682  000700  0005               	push	
  3683  000702  6EFA               	movwf	pclath,c
  3684  000704  503E               	movf	_serial_write,w,c
  3685  000706  6EFD               	movwf	tosl,c
  3686  000708  503F               	movf	_serial_write+1,w,c
  3687  00070A  6EFE               	movwf	tosh,c
  3688  00070C  50F8               	movf	tblptru,w,c
  3689  00070E  6EFF               	movwf	tosu,c
  3690  000710  50FA               	movf	pclath,w,c
  3691  000712  0EFF               	movlw	255
  3692  000714  0100               	movlb	0	; () banked
  3693  000716  6FD1               	movwf	??_receiveData& (0+255),b
  3694  000718  0EFF               	movlw	255
  3695  00071A  0100               	movlb	0	; () banked
  3696  00071C  6FD2               	movwf	(??_receiveData+1)& (0+255),b
  3697  00071E  5038               	movf	_rx_array_inx,w,c
  3698  000720  0100               	movlb	0	; () banked
  3699  000722  6FD3               	movwf	(??_receiveData+2)& (0+255),b
  3700  000724  6BD4               	clrf	(??_receiveData+3)& (0+255),b
  3701  000726  0100               	movlb	0	; () banked
  3702  000728  51D1               	movf	??_receiveData& (0+255),w,b
  3703  00072A  0100               	movlb	0	; () banked
  3704  00072C  27D3               	addwf	(??_receiveData+2)& (0+255),f,b
  3705  00072E  0100               	movlb	0	; () banked
  3706  000730  51D2               	movf	(??_receiveData+1)& (0+255),w,b
  3707  000732  0100               	movlb	0	; () banked
  3708  000734  23D4               	addwfc	(??_receiveData+3)& (0+255),f,b
  3709  000736  0E00               	movlw	low _rx_buffer
  3710  000738  0100               	movlb	0	; () banked
  3711  00073A  25D3               	addwf	(??_receiveData+2)& (0+255),w,b
  3712  00073C  6ED9               	movwf	fsr2l,c
  3713  00073E  0E02               	movlw	high _rx_buffer
  3714  000740  0100               	movlb	0	; () banked
  3715  000742  21D4               	addwfc	(??_receiveData+3)& (0+255),w,b
  3716  000744  6EDA               	movwf	fsr2h,c
  3717  000746  50DF               	movf	indf2,w,c
  3718  000748  0012               	return		;indir
  3719  00074A                     l4115:
  3720                           
  3721                           ;FastTransfer.c: 253: serial_write(crcHolder);
  3722  00074A  D801               	call	u4318
  3723  00074C  D00C               	goto	l4117
  3724  00074E                     u4318:
  3725  00074E  0005               	push	
  3726  000750  6EFA               	movwf	pclath,c
  3727  000752  503E               	movf	_serial_write,w,c
  3728  000754  6EFD               	movwf	tosl,c
  3729  000756  503F               	movf	_serial_write+1,w,c
  3730  000758  6EFE               	movwf	tosh,c
  3731  00075A  50F8               	movf	tblptru,w,c
  3732  00075C  6EFF               	movwf	tosu,c
  3733  00075E  50FA               	movf	pclath,w,c
  3734  000760  0100               	movlb	0	; () banked
  3735  000762  51DE               	movf	receiveData@crcHolder_1757& (0+255),w,b
  3736  000764  0012               	return		;indir
  3737  000766                     l4117:
  3738                           
  3739                           ;FastTransfer.c: 254: }
  3740                           ;FastTransfer.c: 257: rx_len = 0;
  3741  000766  0E00               	movlw	0
  3742  000768  6E39               	movwf	_rx_len,c
  3743                           
  3744                           ;FastTransfer.c: 258: rx_array_inx = 0;
  3745  00076A  0E00               	movlw	0
  3746  00076C  6E38               	movwf	_rx_array_inx,c
  3747                           
  3748                           ;FastTransfer.c: 259: return 0;
  3749  00076E  0E00               	movlw	0
  3750  000770  0012               	return	
  3751  000772                     l4125:
  3752                           
  3753                           ;FastTransfer.c: 260: }
  3754                           ;FastTransfer.c: 261: }
  3755                           ;FastTransfer.c: 262: }
  3756                           ;FastTransfer.c: 265: return 0;
  3757  000772  0E00               	movlw	0
  3758  000774  0012               	return	
  3759  000776                     __end_of_receiveData:
  3760                           	opt stack 0
  3761                           tosu	equ	0xFFF
  3762                           tosh	equ	0xFFE
  3763                           tosl	equ	0xFFD
  3764                           pclath	equ	0xFFA
  3765                           tblptru	equ	0xFF8
  3766                           tblptrh	equ	0xFF7
  3767                           tblptrl	equ	0xFF6
  3768                           tablat	equ	0xFF5
  3769                           prodh	equ	0xFF4
  3770                           prodl	equ	0xFF3
  3771                           intcon	equ	0xFF2
  3772                           postinc0	equ	0xFEE
  3773                           wreg	equ	0xFE8
  3774                           postdec1	equ	0xFE5
  3775                           fsr1h	equ	0xFE2
  3776                           fsr1l	equ	0xFE1
  3777                           indf2	equ	0xFDF
  3778                           postinc2	equ	0xFDE
  3779                           postdec2	equ	0xFDD
  3780                           plusw2	equ	0xFDB
  3781                           fsr2h	equ	0xFDA
  3782                           fsr2l	equ	0xFD9
  3783                           status	equ	0xFD8
  3784                           
  3785 ;; *************** function _Send_put *****************
  3786 ;; Defined at:
  3787 ;;		line 132 in file "UART.c"
  3788 ;; Parameters:    Size  Location     Type
  3789 ;;  _data           1    wreg     unsigned char 
  3790 ;; Auto vars:     Size  Location     Type
  3791 ;;  _data           1    0[BANK0 ] unsigned char 
  3792 ;; Return value:  Size  Location     Type
  3793 ;;                  1    wreg      void 
  3794 ;; Registers used:
  3795 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3796 ;; Tracked objects:
  3797 ;;		On entry : 0/0
  3798 ;;		On exit  : 0/0
  3799 ;;		Unchanged: 0/0
  3800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3801 ;;      Params:         0       0       0       0       0       0       0
  3802 ;;      Locals:         0       1       0       0       0       0       0
  3803 ;;      Temps:          0       0       0       0       0       0       0
  3804 ;;      Totals:         0       1       0       0       0       0       0
  3805 ;;Total ram usage:        1 bytes
  3806 ;; Hardware stack levels used:    1
  3807 ;; Hardware stack levels required when called:    6
  3808 ;; This function calls:
  3809 ;;		_UART_buff_get
  3810 ;;		_UART_buff_put
  3811 ;; This function is called by:
  3812 ;;		_CommsStart
  3813 ;;		_receiveData
  3814 ;;		_sendData
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818                           	psect	text12
  3819  001626                     __ptext12:
  3820                           	opt stack 0
  3821  001626                     _Send_put:
  3822                           	opt stack 21
  3823                           
  3824                           ;incstack = 0
  3825                           ;Send_put@_data stored from wreg
  3826  001626  0100               	movlb	0	; () banked
  3827  001628  6FC8               	movwf	Send_put@_data& (0+255),b
  3828                           
  3829                           ;UART.c: 133: UART_buff_put(&output_buffer, _data);
  3830  00162A  0E00               	movlw	low _output_buffer
  3831  00162C  6E21               	movwf	UART_buff_put@_this,c
  3832  00162E  0E04               	movlw	high _output_buffer
  3833  001630  6E22               	movwf	UART_buff_put@_this+1,c
  3834  001632  C0C8  F023         	movff	Send_put@_data,UART_buff_put@c
  3835  001636  ECCB  F005         	call	_UART_buff_put
  3836                           
  3837                           ;UART.c: 134: if (Transmit_stall == 1) {
  3838  00163A  0444               	decf	_Transmit_stall,w,c
  3839  00163C  A4D8               	btfss	status,2,c
  3840  00163E  0012               	return	
  3841                           
  3842                           ;UART.c: 135: Transmit_stall = 0;
  3843  001640  0E00               	movlw	0
  3844  001642  6E44               	movwf	_Transmit_stall,c
  3845                           
  3846                           ;UART.c: 136: TXREG2 = UART_buff_get(&output_buffer);
  3847  001644  0E00               	movlw	low _output_buffer
  3848  001646  6E21               	movwf	UART_buff_get@_this,c
  3849  001648  0E04               	movlw	high _output_buffer
  3850  00164A  6E22               	movwf	UART_buff_get@_this+1,c
  3851  00164C  EC35  F008         	call	_UART_buff_get	;wreg free
  3852  001650  6E73               	movwf	3955,c	;volatile
  3853                           
  3854                           ;UART.c: 137: PIE3bits.TX2IE = 1;
  3855  001652  88A3               	bsf	4003,4,c	;volatile
  3856  001654  0012               	return	
  3857  001656                     __end_of_Send_put:
  3858                           	opt stack 0
  3859                           tosu	equ	0xFFF
  3860                           tosh	equ	0xFFE
  3861                           tosl	equ	0xFFD
  3862                           pclath	equ	0xFFA
  3863                           tblptru	equ	0xFF8
  3864                           tblptrh	equ	0xFF7
  3865                           tblptrl	equ	0xFF6
  3866                           tablat	equ	0xFF5
  3867                           prodh	equ	0xFF4
  3868                           prodl	equ	0xFF3
  3869                           intcon	equ	0xFF2
  3870                           postinc0	equ	0xFEE
  3871                           wreg	equ	0xFE8
  3872                           postdec1	equ	0xFE5
  3873                           fsr1h	equ	0xFE2
  3874                           fsr1l	equ	0xFE1
  3875                           indf2	equ	0xFDF
  3876                           postinc2	equ	0xFDE
  3877                           postdec2	equ	0xFDD
  3878                           plusw2	equ	0xFDB
  3879                           fsr2h	equ	0xFDA
  3880                           fsr2l	equ	0xFD9
  3881                           status	equ	0xFD8
  3882                           
  3883 ;; *************** function _UART_buff_put *****************
  3884 ;; Defined at:
  3885 ;;		line 70 in file "UART.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3888 ;;		 -> output_buffer(206), input_buffer(206), 
  3889 ;;  c               1   34[COMRAM] const unsigned char 
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;		None
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  1    wreg      void 
  3894 ;; Registers used:
  3895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3901 ;;      Params:         3       0       0       0       0       0       0
  3902 ;;      Locals:         0       0       0       0       0       0       0
  3903 ;;      Temps:          2       0       0       0       0       0       0
  3904 ;;      Totals:         5       0       0       0       0       0       0
  3905 ;;Total ram usage:        5 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    5
  3908 ;; This function calls:
  3909 ;;		_UART_buff_modulo_inc
  3910 ;; This function is called by:
  3911 ;;		_Send_put
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           	psect	text13
  3916  000B96                     __ptext13:
  3917                           	opt stack 0
  3918  000B96                     _UART_buff_put:
  3919                           	opt stack 21
  3920                           
  3921                           ;UART.c: 71: if (_this->count < 200) {
  3922                           
  3923                           ;incstack = 0
  3924  000B96  EE20 F0CC          	lfsr	2,204
  3925  000B9A  5021               	movf	UART_buff_put@_this,w,c
  3926  000B9C  26D9               	addwf	fsr2l,f,c
  3927  000B9E  5022               	movf	UART_buff_put@_this+1,w,c
  3928  000BA0  22DA               	addwfc	fsr2h,f,c
  3929  000BA2  0E01               	movlw	1
  3930  000BA4  BEDB               	btfsc	plusw2,7,c
  3931  000BA6  D007               	goto	l3837
  3932  000BA8  0E01               	movlw	1
  3933  000BAA  50DB               	movf	plusw2,w,c
  3934  000BAC  E13A               	bnz	l3843
  3935  000BAE  0EC8               	movlw	200
  3936  000BB0  5CDE               	subwf	postinc2,w,c
  3937  000BB2  B0D8               	btfsc	status,0,c
  3938  000BB4  D036               	goto	l3843
  3939  000BB6                     l3837:
  3940                           
  3941                           ;UART.c: 72: _this->buf[_this->head] = c;
  3942  000BB6  EE20 F0C8          	lfsr	2,200
  3943  000BBA  5021               	movf	UART_buff_put@_this,w,c
  3944  000BBC  26D9               	addwf	fsr2l,f,c
  3945  000BBE  5022               	movf	UART_buff_put@_this+1,w,c
  3946  000BC0  22DA               	addwfc	fsr2h,f,c
  3947  000BC2  CFDE F024          	movff	postinc2,??_UART_buff_put
  3948  000BC6  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3949  000BCA  5024               	movf	??_UART_buff_put,w,c
  3950  000BCC  2421               	addwf	UART_buff_put@_this,w,c
  3951  000BCE  6ED9               	movwf	fsr2l,c
  3952  000BD0  5025               	movf	??_UART_buff_put+1,w,c
  3953  000BD2  2022               	addwfc	UART_buff_put@_this+1,w,c
  3954  000BD4  6EDA               	movwf	fsr2h,c
  3955  000BD6  C023  FFDF         	movff	UART_buff_put@c,indf2
  3956                           
  3957                           ;UART.c: 73: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3958  000BDA  EE20 F0C8          	lfsr	2,200
  3959  000BDE  5021               	movf	UART_buff_put@_this,w,c
  3960  000BE0  26D9               	addwf	fsr2l,f,c
  3961  000BE2  5022               	movf	UART_buff_put@_this+1,w,c
  3962  000BE4  22DA               	addwfc	fsr2h,f,c
  3963  000BE6  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3964  000BEA  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3965  000BEE  0E00               	movlw	0
  3966  000BF0  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3967  000BF2  0EC8               	movlw	200
  3968  000BF4  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3969  000BF6  EC9B  F00B         	call	_UART_buff_modulo_inc	;wreg free
  3970  000BFA  EE20 F0C8          	lfsr	2,200
  3971  000BFE  5021               	movf	UART_buff_put@_this,w,c
  3972  000C00  26D9               	addwf	fsr2l,f,c
  3973  000C02  5022               	movf	UART_buff_put@_this+1,w,c
  3974  000C04  22DA               	addwfc	fsr2h,f,c
  3975  000C06  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3976  000C0A  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3977                           
  3978                           ;UART.c: 74: ++_this->count;
  3979  000C0E  EE20 F0CC          	lfsr	2,204
  3980  000C12  5021               	movf	UART_buff_put@_this,w,c
  3981  000C14  26D9               	addwf	fsr2l,f,c
  3982  000C16  5022               	movf	UART_buff_put@_this+1,w,c
  3983  000C18  22DA               	addwfc	fsr2h,f,c
  3984  000C1A  2ADE               	incf	postinc2,f,c
  3985  000C1C  0E00               	movlw	0
  3986  000C1E  22DD               	addwfc	postdec2,f,c
  3987                           
  3988                           ;UART.c: 75: } else {
  3989  000C20  0012               	return	
  3990  000C22                     l3843:
  3991                           
  3992                           ;UART.c: 76: _this->buf[_this->head] = c;
  3993  000C22  EE20 F0C8          	lfsr	2,200
  3994  000C26  5021               	movf	UART_buff_put@_this,w,c
  3995  000C28  26D9               	addwf	fsr2l,f,c
  3996  000C2A  5022               	movf	UART_buff_put@_this+1,w,c
  3997  000C2C  22DA               	addwfc	fsr2h,f,c
  3998  000C2E  CFDE F024          	movff	postinc2,??_UART_buff_put
  3999  000C32  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  4000  000C36  5024               	movf	??_UART_buff_put,w,c
  4001  000C38  2421               	addwf	UART_buff_put@_this,w,c
  4002  000C3A  6ED9               	movwf	fsr2l,c
  4003  000C3C  5025               	movf	??_UART_buff_put+1,w,c
  4004  000C3E  2022               	addwfc	UART_buff_put@_this+1,w,c
  4005  000C40  6EDA               	movwf	fsr2h,c
  4006  000C42  C023  FFDF         	movff	UART_buff_put@c,indf2
  4007                           
  4008                           ;UART.c: 77: _this->head = UART_buff_modulo_inc(_this->head, 200);
  4009  000C46  EE20 F0C8          	lfsr	2,200
  4010  000C4A  5021               	movf	UART_buff_put@_this,w,c
  4011  000C4C  26D9               	addwf	fsr2l,f,c
  4012  000C4E  5022               	movf	UART_buff_put@_this+1,w,c
  4013  000C50  22DA               	addwfc	fsr2h,f,c
  4014  000C52  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4015  000C56  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4016  000C5A  0E00               	movlw	0
  4017  000C5C  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4018  000C5E  0EC8               	movlw	200
  4019  000C60  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4020  000C62  EC9B  F00B         	call	_UART_buff_modulo_inc	;wreg free
  4021  000C66  EE20 F0C8          	lfsr	2,200
  4022  000C6A  5021               	movf	UART_buff_put@_this,w,c
  4023  000C6C  26D9               	addwf	fsr2l,f,c
  4024  000C6E  5022               	movf	UART_buff_put@_this+1,w,c
  4025  000C70  22DA               	addwfc	fsr2h,f,c
  4026  000C72  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4027  000C76  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4028                           
  4029                           ;UART.c: 78: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4030  000C7A  EE20 F0CA          	lfsr	2,202
  4031  000C7E  5021               	movf	UART_buff_put@_this,w,c
  4032  000C80  26D9               	addwf	fsr2l,f,c
  4033  000C82  5022               	movf	UART_buff_put@_this+1,w,c
  4034  000C84  22DA               	addwfc	fsr2h,f,c
  4035  000C86  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4036  000C8A  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4037  000C8E  0E00               	movlw	0
  4038  000C90  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4039  000C92  0EC8               	movlw	200
  4040  000C94  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4041  000C96  EC9B  F00B         	call	_UART_buff_modulo_inc	;wreg free
  4042  000C9A  EE20 F0CA          	lfsr	2,202
  4043  000C9E  5021               	movf	UART_buff_put@_this,w,c
  4044  000CA0  26D9               	addwf	fsr2l,f,c
  4045  000CA2  5022               	movf	UART_buff_put@_this+1,w,c
  4046  000CA4  22DA               	addwfc	fsr2h,f,c
  4047  000CA6  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4048  000CAA  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4049  000CAE  0012               	return	
  4050  000CB0                     __end_of_UART_buff_put:
  4051                           	opt stack 0
  4052                           tosu	equ	0xFFF
  4053                           tosh	equ	0xFFE
  4054                           tosl	equ	0xFFD
  4055                           pclath	equ	0xFFA
  4056                           tblptru	equ	0xFF8
  4057                           tblptrh	equ	0xFF7
  4058                           tblptrl	equ	0xFF6
  4059                           tablat	equ	0xFF5
  4060                           prodh	equ	0xFF4
  4061                           prodl	equ	0xFF3
  4062                           intcon	equ	0xFF2
  4063                           postinc0	equ	0xFEE
  4064                           wreg	equ	0xFE8
  4065                           postdec1	equ	0xFE5
  4066                           fsr1h	equ	0xFE2
  4067                           fsr1l	equ	0xFE1
  4068                           indf2	equ	0xFDF
  4069                           postinc2	equ	0xFDE
  4070                           postdec2	equ	0xFDD
  4071                           plusw2	equ	0xFDB
  4072                           fsr2h	equ	0xFDA
  4073                           fsr2l	equ	0xFD9
  4074                           status	equ	0xFD8
  4075                           
  4076 ;; *************** function _Receive_peek *****************
  4077 ;; Defined at:
  4078 ;;		line 120 in file "UART.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;		None
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;		None
  4083 ;; Return value:  Size  Location     Type
  4084 ;;                  1    wreg      unsigned char 
  4085 ;; Registers used:
  4086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4087 ;; Tracked objects:
  4088 ;;		On entry : 0/0
  4089 ;;		On exit  : 0/0
  4090 ;;		Unchanged: 0/0
  4091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4092 ;;      Params:         0       0       0       0       0       0       0
  4093 ;;      Locals:         0       0       0       0       0       0       0
  4094 ;;      Temps:          0       0       0       0       0       0       0
  4095 ;;      Totals:         0       0       0       0       0       0       0
  4096 ;;Total ram usage:        0 bytes
  4097 ;; Hardware stack levels used:    1
  4098 ;; Hardware stack levels required when called:    5
  4099 ;; This function calls:
  4100 ;;		_UART_buff_peek
  4101 ;; This function is called by:
  4102 ;;		_CommsStart
  4103 ;;		_receiveData
  4104 ;; This function uses a non-reentrant model
  4105 ;;
  4106                           
  4107                           	psect	text14
  4108  00190E                     __ptext14:
  4109                           	opt stack 0
  4110  00190E                     _Receive_peek:
  4111                           	opt stack 22
  4112                           
  4113                           ;UART.c: 121: return UART_buff_peek(&input_buffer);
  4114                           
  4115                           ;incstack = 0
  4116  00190E  0E00               	movlw	low _input_buffer
  4117  001910  6E1B               	movwf	UART_buff_peek@_this,c
  4118  001912  0E03               	movlw	high _input_buffer
  4119  001914  6E1C               	movwf	UART_buff_peek@_this+1,c
  4120  001916  ECDA  F00B         	call	_UART_buff_peek	;wreg free
  4121  00191A  0012               	return	
  4122  00191C                     __end_of_Receive_peek:
  4123                           	opt stack 0
  4124                           tosu	equ	0xFFF
  4125                           tosh	equ	0xFFE
  4126                           tosl	equ	0xFFD
  4127                           pclath	equ	0xFFA
  4128                           tblptru	equ	0xFF8
  4129                           tblptrh	equ	0xFF7
  4130                           tblptrl	equ	0xFF6
  4131                           tablat	equ	0xFF5
  4132                           prodh	equ	0xFF4
  4133                           prodl	equ	0xFF3
  4134                           intcon	equ	0xFF2
  4135                           postinc0	equ	0xFEE
  4136                           wreg	equ	0xFE8
  4137                           postdec1	equ	0xFE5
  4138                           fsr1h	equ	0xFE2
  4139                           fsr1l	equ	0xFE1
  4140                           indf2	equ	0xFDF
  4141                           postinc2	equ	0xFDE
  4142                           postdec2	equ	0xFDD
  4143                           plusw2	equ	0xFDB
  4144                           fsr2h	equ	0xFDA
  4145                           fsr2l	equ	0xFD9
  4146                           status	equ	0xFD8
  4147                           
  4148 ;; *************** function _UART_buff_peek *****************
  4149 ;; Defined at:
  4150 ;;		line 116 in file "UART.c"
  4151 ;; Parameters:    Size  Location     Type
  4152 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  4153 ;;		 -> input_buffer(206), 
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;		None
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  1    wreg      unsigned char 
  4158 ;; Registers used:
  4159 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4165 ;;      Params:         2       0       0       0       0       0       0
  4166 ;;      Locals:         0       0       0       0       0       0       0
  4167 ;;      Temps:          2       0       0       0       0       0       0
  4168 ;;      Totals:         4       0       0       0       0       0       0
  4169 ;;Total ram usage:        4 bytes
  4170 ;; Hardware stack levels used:    1
  4171 ;; Hardware stack levels required when called:    4
  4172 ;; This function calls:
  4173 ;;		Nothing
  4174 ;; This function is called by:
  4175 ;;		_Receive_peek
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179                           	psect	text15
  4180  0017B4                     __ptext15:
  4181                           	opt stack 0
  4182  0017B4                     _UART_buff_peek:
  4183                           	opt stack 22
  4184                           
  4185                           ;UART.c: 117: return _this->buf[_this->tail];
  4186                           
  4187                           ;incstack = 0
  4188  0017B4  EE20 F0CA          	lfsr	2,202
  4189  0017B8  501B               	movf	UART_buff_peek@_this,w,c
  4190  0017BA  26D9               	addwf	fsr2l,f,c
  4191  0017BC  501C               	movf	UART_buff_peek@_this+1,w,c
  4192  0017BE  22DA               	addwfc	fsr2h,f,c
  4193  0017C0  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  4194  0017C4  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  4195  0017C8  501D               	movf	??_UART_buff_peek,w,c
  4196  0017CA  241B               	addwf	UART_buff_peek@_this,w,c
  4197  0017CC  6ED9               	movwf	fsr2l,c
  4198  0017CE  501E               	movf	??_UART_buff_peek+1,w,c
  4199  0017D0  201C               	addwfc	UART_buff_peek@_this+1,w,c
  4200  0017D2  6EDA               	movwf	fsr2h,c
  4201  0017D4  50DF               	movf	indf2,w,c
  4202  0017D6  0012               	return	
  4203  0017D8                     __end_of_UART_buff_peek:
  4204                           	opt stack 0
  4205                           tosu	equ	0xFFF
  4206                           tosh	equ	0xFFE
  4207                           tosl	equ	0xFFD
  4208                           pclath	equ	0xFFA
  4209                           tblptru	equ	0xFF8
  4210                           tblptrh	equ	0xFF7
  4211                           tblptrl	equ	0xFF6
  4212                           tablat	equ	0xFF5
  4213                           prodh	equ	0xFF4
  4214                           prodl	equ	0xFF3
  4215                           intcon	equ	0xFF2
  4216                           postinc0	equ	0xFEE
  4217                           wreg	equ	0xFE8
  4218                           postdec1	equ	0xFE5
  4219                           fsr1h	equ	0xFE2
  4220                           fsr1l	equ	0xFE1
  4221                           indf2	equ	0xFDF
  4222                           postinc2	equ	0xFDE
  4223                           postdec2	equ	0xFDD
  4224                           plusw2	equ	0xFDB
  4225                           fsr2h	equ	0xFDA
  4226                           fsr2l	equ	0xFD9
  4227                           status	equ	0xFD8
  4228                           
  4229 ;; *************** function _CRCcheck *****************
  4230 ;; Defined at:
  4231 ;;		line 428 in file "FastTransfer.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;		None
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;  rt              2    7[BANK0 ] int 
  4236 ;;  arrayHolder     3    4[BANK0 ] unsigned char [3]
  4237 ;;  calculatedCR    1    3[BANK0 ] unsigned char 
  4238 ;;  SentCRC         1    2[BANK0 ] unsigned char 
  4239 ;; Return value:  Size  Location     Type
  4240 ;;                  1    wreg      void 
  4241 ;; Registers used:
  4242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  4243 ;; Tracked objects:
  4244 ;;		On entry : 0/0
  4245 ;;		On exit  : 0/0
  4246 ;;		Unchanged: 0/0
  4247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4248 ;;      Params:         0       0       0       0       0       0       0
  4249 ;;      Locals:         0       7       0       0       0       0       0
  4250 ;;      Temps:          0       0       0       0       0       0       0
  4251 ;;      Totals:         0       7       0       0       0       0       0
  4252 ;;Total ram usage:        7 bytes
  4253 ;; Hardware stack levels used:    1
  4254 ;; Hardware stack levels required when called:    7
  4255 ;; This function calls:
  4256 ;;		Absolute function
  4257 ;;		_CRC8
  4258 ;;		_Receive_available
  4259 ;;		_Receive_get
  4260 ;;		_crcBufS_get
  4261 ;;		_crcBufS_status_put
  4262 ;; This function is called by:
  4263 ;;		_receiveData
  4264 ;; This function uses a non-reentrant model
  4265 ;;
  4266                           
  4267                           	psect	text16
  4268  0008EA                     __ptext16:
  4269                           	opt stack 0
  4270  0008EA                     _CRCcheck:
  4271                           	opt stack 20
  4272  0008EA                     l3873:
  4273  0008EA  D801               	call	u3688
  4274  0008EC  D00A               	goto	u3689
  4275  0008EE                     u3688:
  4276  0008EE  0005               	push	
  4277  0008F0  6EFA               	movwf	pclath,c
  4278  0008F2  503A               	movf	_serial_available,w,c
  4279  0008F4  6EFD               	movwf	tosl,c
  4280  0008F6  503B               	movf	_serial_available+1,w,c
  4281  0008F8  6EFE               	movwf	tosh,c
  4282  0008FA  50F8               	movf	tblptru,w,c
  4283  0008FC  6EFF               	movwf	tosu,c
  4284  0008FE  50FA               	movf	pclath,w,c
  4285  000900  0012               	return		;indir
  4286  000902                     u3689:
  4287  000902  BE1E               	btfsc	?_Receive_available+1,7,c
  4288  000904  D7F2               	goto	l3873
  4289  000906  501E               	movf	?_Receive_available+1,w,c
  4290  000908  E104               	bnz	l3875
  4291  00090A  0E04               	movlw	4
  4292  00090C  5C1D               	subwf	?_Receive_available,w,c
  4293  00090E  A0D8               	btfss	status,0,c
  4294  000910  D7EC               	goto	l3873
  4295  000912                     l3875:
  4296                           
  4297                           ;FastTransfer.c: 432: unsigned char arrayHolder[3];
  4298                           ;FastTransfer.c: 433: arrayHolder[0] = serial_read();
  4299  000912  D801               	call	u3708
  4300  000914  D00A               	goto	u3709
  4301  000916                     u3708:
  4302  000916  0005               	push	
  4303  000918  6EFA               	movwf	pclath,c
  4304  00091A  503C               	movf	_serial_read,w,c
  4305  00091C  6EFD               	movwf	tosl,c
  4306  00091E  503D               	movf	_serial_read+1,w,c
  4307  000920  6EFE               	movwf	tosh,c
  4308  000922  50F8               	movf	tblptru,w,c
  4309  000924  6EFF               	movwf	tosu,c
  4310  000926  50FA               	movf	pclath,w,c
  4311  000928  0012               	return		;indir
  4312  00092A                     u3709:
  4313  00092A  0100               	movlb	0	; () banked
  4314  00092C  6FCC               	movwf	CRCcheck@arrayHolder& (0+255),b
  4315                           
  4316                           ;FastTransfer.c: 434: arrayHolder[1] = serial_read();
  4317  00092E  D801               	call	u3718
  4318  000930  D00A               	goto	u3719
  4319  000932                     u3718:
  4320  000932  0005               	push	
  4321  000934  6EFA               	movwf	pclath,c
  4322  000936  503C               	movf	_serial_read,w,c
  4323  000938  6EFD               	movwf	tosl,c
  4324  00093A  503D               	movf	_serial_read+1,w,c
  4325  00093C  6EFE               	movwf	tosh,c
  4326  00093E  50F8               	movf	tblptru,w,c
  4327  000940  6EFF               	movwf	tosu,c
  4328  000942  50FA               	movf	pclath,w,c
  4329  000944  0012               	return		;indir
  4330  000946                     u3719:
  4331  000946  0100               	movlb	0	; () banked
  4332  000948  6FCD               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  4333                           
  4334                           ;FastTransfer.c: 435: arrayHolder[2] = serial_read();
  4335  00094A  D801               	call	u3728
  4336  00094C  D00A               	goto	u3729
  4337  00094E                     u3728:
  4338  00094E  0005               	push	
  4339  000950  6EFA               	movwf	pclath,c
  4340  000952  503C               	movf	_serial_read,w,c
  4341  000954  6EFD               	movwf	tosl,c
  4342  000956  503D               	movf	_serial_read+1,w,c
  4343  000958  6EFE               	movwf	tosh,c
  4344  00095A  50F8               	movf	tblptru,w,c
  4345  00095C  6EFF               	movwf	tosu,c
  4346  00095E  50FA               	movf	pclath,w,c
  4347  000960  0012               	return		;indir
  4348  000962                     u3729:
  4349  000962  0100               	movlb	0	; () banked
  4350  000964  6FCE               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  4351                           
  4352                           ;FastTransfer.c: 436: unsigned char SentCRC = serial_read();
  4353  000966  D801               	call	u3738
  4354  000968  D00A               	goto	u3739
  4355  00096A                     u3738:
  4356  00096A  0005               	push	
  4357  00096C  6EFA               	movwf	pclath,c
  4358  00096E  503C               	movf	_serial_read,w,c
  4359  000970  6EFD               	movwf	tosl,c
  4360  000972  503D               	movf	_serial_read+1,w,c
  4361  000974  6EFE               	movwf	tosh,c
  4362  000976  50F8               	movf	tblptru,w,c
  4363  000978  6EFF               	movwf	tosu,c
  4364  00097A  50FA               	movf	pclath,w,c
  4365  00097C  0012               	return		;indir
  4366  00097E                     u3739:
  4367  00097E  0100               	movlb	0	; () banked
  4368  000980  6FCA               	movwf	CRCcheck@SentCRC& (0+255),b
  4369                           
  4370                           ; BSR set to: 0
  4371                           ;FastTransfer.c: 437: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  4372  000982  0ECC               	movlw	low CRCcheck@arrayHolder
  4373  000984  6E1B               	movwf	CRC8@data,c
  4374  000986  0E00               	movlw	high CRCcheck@arrayHolder
  4375  000988  6E1C               	movwf	CRC8@data+1,c
  4376  00098A  0E03               	movlw	3
  4377  00098C  6E1D               	movwf	CRC8@len,c
  4378  00098E  EC45  F00A         	call	_CRC8	;wreg free
  4379  000992  0100               	movlb	0	; () banked
  4380  000994  6FCB               	movwf	CRCcheck@calculatedCRC& (0+255),b
  4381                           
  4382                           ; BSR set to: 0
  4383                           ;FastTransfer.c: 440: if (SentCRC == calculatedCRC) {
  4384  000996  0100               	movlb	0	; () banked
  4385  000998  51CB               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  4386  00099A  0100               	movlb	0	; () banked
  4387  00099C  19CA               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  4388  00099E  A4D8               	btfss	status,2,c
  4389  0009A0  D04E               	goto	l3905
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;FastTransfer.c: 442: int rt;
  4393                           ;FastTransfer.c: 443: for (rt = 0; rt < 5; rt++) {
  4394  0009A2  0E00               	movlw	0
  4395  0009A4  0100               	movlb	0	; () banked
  4396  0009A6  6FD0               	movwf	(CRCcheck@rt+1)& (0+255),b
  4397  0009A8  0E00               	movlw	0
  4398  0009AA  6FCF               	movwf	CRCcheck@rt& (0+255),b
  4399  0009AC                     l3883:
  4400                           
  4401                           ; BSR set to: 0
  4402  0009AC  0100               	movlb	0	; () banked
  4403  0009AE  BFD0               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  4404  0009B0  D008               	goto	l3887
  4405  0009B2  0100               	movlb	0	; () banked
  4406  0009B4  51D0               	movf	(CRCcheck@rt+1)& (0+255),w,b
  4407  0009B6  E147               	bnz	l569
  4408  0009B8  0E05               	movlw	5
  4409  0009BA  0100               	movlb	0	; () banked
  4410  0009BC  5DCF               	subwf	CRCcheck@rt& (0+255),w,b
  4411  0009BE  B0D8               	btfsc	status,0,c
  4412  0009C0  0012               	return	
  4413  0009C2                     l3887:
  4414                           
  4415                           ; BSR set to: 0
  4416                           ;FastTransfer.c: 444: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  4417  0009C2  0EB7               	movlw	low _crc_buffer
  4418  0009C4  6E1B               	movwf	crcBufS_get@_this,c
  4419  0009C6  0E00               	movlw	high _crc_buffer
  4420  0009C8  6E1C               	movwf	crcBufS_get@_this+1,c
  4421  0009CA  C0CF  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  4422  0009CE  0E00               	movlw	0
  4423  0009D0  6E1E               	movwf	crcBufS_get@space,c
  4424  0009D2  ECE5  F006         	call	_crcBufS_get	;wreg free
  4425  0009D6  1836               	xorwf	_returnAddress,w,c
  4426  0009D8  A4D8               	btfss	status,2,c
  4427  0009DA  D02D               	goto	l3901
  4428                           
  4429                           ;FastTransfer.c: 445: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  4430  0009DC  0EB7               	movlw	low _crc_buffer
  4431  0009DE  6E1B               	movwf	crcBufS_get@_this,c
  4432  0009E0  0E00               	movlw	high _crc_buffer
  4433  0009E2  6E1C               	movwf	crcBufS_get@_this+1,c
  4434  0009E4  C0CF  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  4435  0009E8  0E01               	movlw	1
  4436  0009EA  6E1E               	movwf	crcBufS_get@space,c
  4437  0009EC  ECE5  F006         	call	_crcBufS_get	;wreg free
  4438  0009F0  0100               	movlb	0	; () banked
  4439  0009F2  19CE               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  4440  0009F4  A4D8               	btfss	status,2,c
  4441  0009F6  D01F               	goto	l3901
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;FastTransfer.c: 446: if (arrayHolder[1] == 1) {
  4445  0009F8  0100               	movlb	0	; () banked
  4446  0009FA  05CD               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4447  0009FC  A4D8               	btfss	status,2,c
  4448  0009FE  D00B               	goto	l3897
  4449                           
  4450                           ; BSR set to: 0
  4451                           ;FastTransfer.c: 447: crcBufS_status_put(&crc_buffer, rt, 1);
  4452  000A00  0EB7               	movlw	low _crc_buffer
  4453  000A02  6E1B               	movwf	crcBufS_status_put@_this,c
  4454  000A04  0E00               	movlw	high _crc_buffer
  4455  000A06  6E1C               	movwf	crcBufS_status_put@_this+1,c
  4456  000A08  C0CF  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  4457  000A0C  0E01               	movlw	1
  4458  000A0E  6E1E               	movwf	crcBufS_status_put@status,c
  4459  000A10  ECCA  F007         	call	_crcBufS_status_put	;wreg free
  4460                           
  4461                           ;FastTransfer.c: 448: break;
  4462  000A14  0012               	return	
  4463  000A16                     l3897:
  4464  000A16  0E02               	movlw	2
  4465  000A18  0100               	movlb	0	; () banked
  4466  000A1A  19CD               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4467  000A1C  A4D8               	btfss	status,2,c
  4468  000A1E  D00B               	goto	l3901
  4469                           
  4470                           ; BSR set to: 0
  4471                           ;FastTransfer.c: 450: crcBufS_status_put(&crc_buffer, rt, 2);
  4472  000A20  0EB7               	movlw	low _crc_buffer
  4473  000A22  6E1B               	movwf	crcBufS_status_put@_this,c
  4474  000A24  0E00               	movlw	high _crc_buffer
  4475  000A26  6E1C               	movwf	crcBufS_status_put@_this+1,c
  4476  000A28  C0CF  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  4477  000A2C  0E02               	movlw	2
  4478  000A2E  6E1E               	movwf	crcBufS_status_put@status,c
  4479  000A30  ECCA  F007         	call	_crcBufS_status_put	;wreg free
  4480                           
  4481                           ;FastTransfer.c: 451: break;
  4482  000A34  0012               	return	
  4483  000A36                     l3901:
  4484  000A36  0100               	movlb	0	; () banked
  4485  000A38  4BCF               	infsnz	CRCcheck@rt& (0+255),f,b
  4486  000A3A  2BD0               	incf	(CRCcheck@rt+1)& (0+255),f,b
  4487  000A3C  D7B7               	goto	l3883
  4488  000A3E                     l3905:
  4489                           
  4490                           ; BSR set to: 0
  4491                           ;FastTransfer.c: 457: crcErrorCounter++;
  4492  000A3E  0100               	movlb	0	; () banked
  4493  000A40  4B8B               	infsnz	_crcErrorCounter& (0+255),f,b
  4494  000A42  2B8C               	incf	(_crcErrorCounter+1)& (0+255),f,b
  4495  000A44  0012               	return	
  4496  000A46                     l569:
  4497  000A46  0012               	return		;funcret
  4498  000A48                     __end_of_CRCcheck:
  4499                           	opt stack 0
  4500                           tosu	equ	0xFFF
  4501                           tosh	equ	0xFFE
  4502                           tosl	equ	0xFFD
  4503                           pclath	equ	0xFFA
  4504                           tblptru	equ	0xFF8
  4505                           tblptrh	equ	0xFF7
  4506                           tblptrl	equ	0xFF6
  4507                           tablat	equ	0xFF5
  4508                           prodh	equ	0xFF4
  4509                           prodl	equ	0xFF3
  4510                           intcon	equ	0xFF2
  4511                           postinc0	equ	0xFEE
  4512                           wreg	equ	0xFE8
  4513                           postdec1	equ	0xFE5
  4514                           fsr1h	equ	0xFE2
  4515                           fsr1l	equ	0xFE1
  4516                           indf2	equ	0xFDF
  4517                           postinc2	equ	0xFDE
  4518                           postdec2	equ	0xFDD
  4519                           plusw2	equ	0xFDB
  4520                           fsr2h	equ	0xFDA
  4521                           fsr2l	equ	0xFD9
  4522                           status	equ	0xFD8
  4523                           
  4524 ;; *************** function _crcBufS_status_put *****************
  4525 ;; Defined at:
  4526 ;;		line 391 in file "FastTransfer.c"
  4527 ;; Parameters:    Size  Location     Type
  4528 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4529 ;;		 -> crc_buffer(17), 
  4530 ;;  time            1   28[COMRAM] unsigned char 
  4531 ;;  status          1   29[COMRAM] unsigned char 
  4532 ;; Auto vars:     Size  Location     Type
  4533 ;;  wantedTime      2   34[COMRAM] int 
  4534 ;; Return value:  Size  Location     Type
  4535 ;;                  1    wreg      void 
  4536 ;; Registers used:
  4537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4538 ;; Tracked objects:
  4539 ;;		On entry : 0/0
  4540 ;;		On exit  : 0/0
  4541 ;;		Unchanged: 0/0
  4542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4543 ;;      Params:         4       0       0       0       0       0       0
  4544 ;;      Locals:         2       0       0       0       0       0       0
  4545 ;;      Temps:          4       0       0       0       0       0       0
  4546 ;;      Totals:        10       0       0       0       0       0       0
  4547 ;;Total ram usage:       10 bytes
  4548 ;; Hardware stack levels used:    1
  4549 ;; Hardware stack levels required when called:    4
  4550 ;; This function calls:
  4551 ;;		Nothing
  4552 ;; This function is called by:
  4553 ;;		_CRCcheck
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557                           	psect	text17
  4558  000F94                     __ptext17:
  4559                           	opt stack 0
  4560  000F94                     _crcBufS_status_put:
  4561                           	opt stack 22
  4562                           
  4563                           ;FastTransfer.c: 392: if (time >= 5) {
  4564                           
  4565                           ;incstack = 0
  4566  000F94  0E04               	movlw	4
  4567  000F96  641D               	cpfsgt	crcBufS_status_put@time,c
  4568  000F98  D002               	goto	l3825
  4569                           
  4570                           ;FastTransfer.c: 393: time = 5 - 1;
  4571  000F9A  0E04               	movlw	4
  4572  000F9C  6E1D               	movwf	crcBufS_status_put@time,c
  4573  000F9E                     l3825:
  4574                           
  4575                           ;FastTransfer.c: 394: }
  4576                           ;FastTransfer.c: 395: time = time + 1;
  4577  000F9E  281D               	incf	crcBufS_status_put@time,w,c
  4578  000FA0  6E1D               	movwf	crcBufS_status_put@time,c
  4579                           
  4580                           ;FastTransfer.c: 396: int wantedTime = time * 3;
  4581  000FA2  501D               	movf	crcBufS_status_put@time,w,c
  4582  000FA4  0D03               	mullw	3
  4583  000FA6  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  4584  000FAA  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  4585                           
  4586                           ;FastTransfer.c: 397: if (wantedTime > _this->head) {
  4587  000FAE  EE20 F00F          	lfsr	2,15
  4588  000FB2  501B               	movf	crcBufS_status_put@_this,w,c
  4589  000FB4  26D9               	addwf	fsr2l,f,c
  4590  000FB6  501C               	movf	crcBufS_status_put@_this+1,w,c
  4591  000FB8  22DA               	addwfc	fsr2h,f,c
  4592  000FBA  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4593  000FBC  5CDE               	subwf	postinc2,w,c
  4594  000FBE  50DE               	movf	postinc2,w,c
  4595  000FC0  0A80               	xorlw	128
  4596  000FC2  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  4597  000FC4  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4598  000FC6  0A80               	xorlw	128
  4599  000FC8  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  4600  000FCA  B0D8               	btfsc	status,0,c
  4601  000FCC  D02B               	goto	l3833
  4602                           
  4603                           ;FastTransfer.c: 398: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4604  000FCE  EE20 F00F          	lfsr	2,15
  4605  000FD2  501B               	movf	crcBufS_status_put@_this,w,c
  4606  000FD4  26D9               	addwf	fsr2l,f,c
  4607  000FD6  501C               	movf	crcBufS_status_put@_this+1,w,c
  4608  000FD8  22DA               	addwfc	fsr2h,f,c
  4609  000FDA  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4610  000FDE  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4611  000FE2  1E1F               	comf	??_crcBufS_status_put,f,c
  4612  000FE4  1E20               	comf	??_crcBufS_status_put+1,f,c
  4613  000FE6  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4614  000FE8  2A20               	incf	??_crcBufS_status_put+1,f,c
  4615  000FEA  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4616  000FEC  261F               	addwf	??_crcBufS_status_put,f,c
  4617  000FEE  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4618  000FF0  2220               	addwfc	??_crcBufS_status_put+1,f,c
  4619  000FF2  1E1F               	comf	??_crcBufS_status_put,f,c
  4620  000FF4  1E20               	comf	??_crcBufS_status_put+1,f,c
  4621  000FF6  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4622  000FF8  2A20               	incf	??_crcBufS_status_put+1,f,c
  4623  000FFA  0E0F               	movlw	15
  4624  000FFC  241F               	addwf	??_crcBufS_status_put,w,c
  4625  000FFE  6E23               	movwf	crcBufS_status_put@wantedTime,c
  4626  001000  0E00               	movlw	0
  4627  001002  2020               	addwfc	??_crcBufS_status_put+1,w,c
  4628  001004  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  4629                           
  4630                           ;FastTransfer.c: 399: _this->buf[(wantedTime + 2)] = status;
  4631  001006  0E02               	movlw	2
  4632  001008  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4633  00100A  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4634  00100C  0E00               	movlw	0
  4635  00100E  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4636  001010  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4637  001012  501F               	movf	??_crcBufS_status_put,w,c
  4638  001014  241B               	addwf	crcBufS_status_put@_this,w,c
  4639  001016  6ED9               	movwf	fsr2l,c
  4640  001018  5020               	movf	??_crcBufS_status_put+1,w,c
  4641  00101A  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4642  00101C  6EDA               	movwf	fsr2h,c
  4643  00101E  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4644                           
  4645                           ;FastTransfer.c: 400: } else {
  4646  001022  0012               	return	
  4647  001024                     l3833:
  4648                           
  4649                           ;FastTransfer.c: 401: _this->buf[(_this->head - wantedTime) + 2] = status;
  4650  001024  EE20 F00F          	lfsr	2,15
  4651  001028  501B               	movf	crcBufS_status_put@_this,w,c
  4652  00102A  26D9               	addwf	fsr2l,f,c
  4653  00102C  501C               	movf	crcBufS_status_put@_this+1,w,c
  4654  00102E  22DA               	addwfc	fsr2h,f,c
  4655  001030  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4656  001034  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4657  001038  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4658  00103C  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4659  001040  1E21               	comf	??_crcBufS_status_put+2,f,c
  4660  001042  1E22               	comf	??_crcBufS_status_put+3,f,c
  4661  001044  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4662  001046  2A22               	incf	??_crcBufS_status_put+3,f,c
  4663  001048  501F               	movf	??_crcBufS_status_put,w,c
  4664  00104A  2621               	addwf	??_crcBufS_status_put+2,f,c
  4665  00104C  5020               	movf	??_crcBufS_status_put+1,w,c
  4666  00104E  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4667  001050  0E02               	movlw	2
  4668  001052  2621               	addwf	??_crcBufS_status_put+2,f,c
  4669  001054  0E00               	movlw	0
  4670  001056  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4671  001058  5021               	movf	??_crcBufS_status_put+2,w,c
  4672  00105A  241B               	addwf	crcBufS_status_put@_this,w,c
  4673  00105C  6ED9               	movwf	fsr2l,c
  4674  00105E  5022               	movf	??_crcBufS_status_put+3,w,c
  4675  001060  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4676  001062  6EDA               	movwf	fsr2h,c
  4677  001064  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4678  001068  0012               	return	
  4679  00106A                     __end_of_crcBufS_status_put:
  4680                           	opt stack 0
  4681                           tosu	equ	0xFFF
  4682                           tosh	equ	0xFFE
  4683                           tosl	equ	0xFFD
  4684                           pclath	equ	0xFFA
  4685                           tblptru	equ	0xFF8
  4686                           tblptrh	equ	0xFF7
  4687                           tblptrl	equ	0xFF6
  4688                           tablat	equ	0xFF5
  4689                           prodh	equ	0xFF4
  4690                           prodl	equ	0xFF3
  4691                           intcon	equ	0xFF2
  4692                           postinc0	equ	0xFEE
  4693                           wreg	equ	0xFE8
  4694                           postdec1	equ	0xFE5
  4695                           fsr1h	equ	0xFE2
  4696                           fsr1l	equ	0xFE1
  4697                           indf2	equ	0xFDF
  4698                           postinc2	equ	0xFDE
  4699                           postdec2	equ	0xFDD
  4700                           plusw2	equ	0xFDB
  4701                           fsr2h	equ	0xFDA
  4702                           fsr2l	equ	0xFD9
  4703                           status	equ	0xFD8
  4704                           
  4705 ;; *************** function _crcBufS_get *****************
  4706 ;; Defined at:
  4707 ;;		line 408 in file "FastTransfer.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4710 ;;		 -> crc_buffer(17), 
  4711 ;;  time            1   28[COMRAM] unsigned char 
  4712 ;;  space           1   29[COMRAM] unsigned char 
  4713 ;; Auto vars:     Size  Location     Type
  4714 ;;  wantedTime      2    0[BANK0 ] int 
  4715 ;; Return value:  Size  Location     Type
  4716 ;;                  1    wreg      unsigned char 
  4717 ;; Registers used:
  4718 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4719 ;; Tracked objects:
  4720 ;;		On entry : 0/0
  4721 ;;		On exit  : 0/0
  4722 ;;		Unchanged: 0/0
  4723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4724 ;;      Params:         4       0       0       0       0       0       0
  4725 ;;      Locals:         0       2       0       0       0       0       0
  4726 ;;      Temps:          6       0       0       0       0       0       0
  4727 ;;      Totals:        10       2       0       0       0       0       0
  4728 ;;Total ram usage:       12 bytes
  4729 ;; Hardware stack levels used:    1
  4730 ;; Hardware stack levels required when called:    4
  4731 ;; This function calls:
  4732 ;;		Nothing
  4733 ;; This function is called by:
  4734 ;;		_CRCcheck
  4735 ;;		_AKNAK
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           	psect	text18
  4740  000DCA                     __ptext18:
  4741                           	opt stack 0
  4742  000DCA                     _crcBufS_get:
  4743                           	opt stack 22
  4744                           
  4745                           ;FastTransfer.c: 409: if (time >= 5) {
  4746                           
  4747                           ;incstack = 0
  4748  000DCA  0E04               	movlw	4
  4749  000DCC  641D               	cpfsgt	crcBufS_get@time,c
  4750  000DCE  D002               	goto	l3801
  4751                           
  4752                           ;FastTransfer.c: 410: time = 5 - 1;
  4753  000DD0  0E04               	movlw	4
  4754  000DD2  6E1D               	movwf	crcBufS_get@time,c
  4755  000DD4                     l3801:
  4756                           
  4757                           ;FastTransfer.c: 411: }
  4758                           ;FastTransfer.c: 412: if (space >= 3) {
  4759  000DD4  0E02               	movlw	2
  4760  000DD6  641E               	cpfsgt	crcBufS_get@space,c
  4761  000DD8  D002               	goto	l3805
  4762                           
  4763                           ;FastTransfer.c: 413: space = 3 - 1;
  4764  000DDA  0E02               	movlw	2
  4765  000DDC  6E1E               	movwf	crcBufS_get@space,c
  4766  000DDE                     l3805:
  4767                           
  4768                           ;FastTransfer.c: 414: }
  4769                           ;FastTransfer.c: 415: time = time + 1;
  4770  000DDE  281D               	incf	crcBufS_get@time,w,c
  4771  000DE0  6E1D               	movwf	crcBufS_get@time,c
  4772                           
  4773                           ;FastTransfer.c: 416: int wantedTime = time * 3;
  4774  000DE2  501D               	movf	crcBufS_get@time,w,c
  4775  000DE4  0D03               	mullw	3
  4776  000DE6  CFF3 F0C8          	movff	prodl,crcBufS_get@wantedTime
  4777  000DEA  CFF4 F0C9          	movff	prodh,crcBufS_get@wantedTime+1
  4778                           
  4779                           ;FastTransfer.c: 417: if (wantedTime > _this->head) {
  4780  000DEE  EE20 F00F          	lfsr	2,15
  4781  000DF2  501B               	movf	crcBufS_get@_this,w,c
  4782  000DF4  26D9               	addwf	fsr2l,f,c
  4783  000DF6  501C               	movf	crcBufS_get@_this+1,w,c
  4784  000DF8  22DA               	addwfc	fsr2h,f,c
  4785  000DFA  0100               	movlb	0	; () banked
  4786  000DFC  51C8               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4787  000DFE  5CDE               	subwf	postinc2,w,c
  4788  000E00  50DE               	movf	postinc2,w,c
  4789  000E02  0A80               	xorlw	128
  4790  000E04  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4791  000E06  0100               	movlb	0	; () banked
  4792  000E08  51C9               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4793  000E0A  0A80               	xorlw	128
  4794  000E0C  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4795  000E0E  B0D8               	btfsc	status,0,c
  4796  000E10  D030               	goto	l3817
  4797                           
  4798                           ; BSR set to: 0
  4799                           ;FastTransfer.c: 418: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4800  000E12  EE20 F00F          	lfsr	2,15
  4801  000E16  501B               	movf	crcBufS_get@_this,w,c
  4802  000E18  26D9               	addwf	fsr2l,f,c
  4803  000E1A  501C               	movf	crcBufS_get@_this+1,w,c
  4804  000E1C  22DA               	addwfc	fsr2h,f,c
  4805  000E1E  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4806  000E22  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4807  000E26  1E1F               	comf	??_crcBufS_get,f,c
  4808  000E28  1E20               	comf	??_crcBufS_get+1,f,c
  4809  000E2A  4A1F               	infsnz	??_crcBufS_get,f,c
  4810  000E2C  2A20               	incf	??_crcBufS_get+1,f,c
  4811  000E2E  0100               	movlb	0	; () banked
  4812  000E30  51C8               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4813  000E32  261F               	addwf	??_crcBufS_get,f,c
  4814  000E34  0100               	movlb	0	; () banked
  4815  000E36  51C9               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4816  000E38  2220               	addwfc	??_crcBufS_get+1,f,c
  4817  000E3A  1E1F               	comf	??_crcBufS_get,f,c
  4818  000E3C  1E20               	comf	??_crcBufS_get+1,f,c
  4819  000E3E  4A1F               	infsnz	??_crcBufS_get,f,c
  4820  000E40  2A20               	incf	??_crcBufS_get+1,f,c
  4821  000E42  0E0F               	movlw	15
  4822  000E44  241F               	addwf	??_crcBufS_get,w,c
  4823  000E46  0100               	movlb	0	; () banked
  4824  000E48  6FC8               	movwf	crcBufS_get@wantedTime& (0+255),b
  4825  000E4A  0E00               	movlw	0
  4826  000E4C  2020               	addwfc	??_crcBufS_get+1,w,c
  4827  000E4E  0100               	movlb	0	; () banked
  4828  000E50  6FC9               	movwf	(crcBufS_get@wantedTime+1)& (0+255),b
  4829                           
  4830                           ;FastTransfer.c: 419: return (_this->buf[(wantedTime + space)]);
  4831  000E52  501E               	movf	crcBufS_get@space,w,c
  4832  000E54  0100               	movlb	0	; () banked
  4833  000E56  25C8               	addwf	crcBufS_get@wantedTime& (0+255),w,b
  4834  000E58  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4835  000E5A  0E00               	movlw	0
  4836  000E5C  0100               	movlb	0	; () banked
  4837  000E5E  21C9               	addwfc	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4838  000E60  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4839  000E62  501F               	movf	??_crcBufS_get,w,c
  4840  000E64  241B               	addwf	crcBufS_get@_this,w,c
  4841  000E66  6ED9               	movwf	fsr2l,c
  4842  000E68  5020               	movf	??_crcBufS_get+1,w,c
  4843  000E6A  201C               	addwfc	crcBufS_get@_this+1,w,c
  4844  000E6C  6EDA               	movwf	fsr2h,c
  4845  000E6E  50DF               	movf	indf2,w,c
  4846                           
  4847                           ; BSR set to: 0
  4848                           ;FastTransfer.c: 420: } else {
  4849                           
  4850                           ; BSR set to: 0
  4851  000E70  0012               	return	
  4852  000E72                     l3817:
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;FastTransfer.c: 421: return (_this->buf[(_this->head - wantedTime) + space]);
  4856  000E72  EE20 F00F          	lfsr	2,15
  4857  000E76  501B               	movf	crcBufS_get@_this,w,c
  4858  000E78  26D9               	addwf	fsr2l,f,c
  4859  000E7A  501C               	movf	crcBufS_get@_this+1,w,c
  4860  000E7C  22DA               	addwfc	fsr2h,f,c
  4861  000E7E  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4862  000E82  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4863  000E86  C0C8  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4864  000E8A  C0C9  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4865  000E8E  1E21               	comf	??_crcBufS_get+2,f,c
  4866  000E90  1E22               	comf	??_crcBufS_get+3,f,c
  4867  000E92  4A21               	infsnz	??_crcBufS_get+2,f,c
  4868  000E94  2A22               	incf	??_crcBufS_get+3,f,c
  4869  000E96  501E               	movf	crcBufS_get@space,w,c
  4870  000E98  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4871  000E9A  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4872  000E9C  5021               	movf	??_crcBufS_get+2,w,c
  4873  000E9E  2623               	addwf	??_crcBufS_get+4,f,c
  4874  000EA0  5022               	movf	??_crcBufS_get+3,w,c
  4875  000EA2  2224               	addwfc	??_crcBufS_get+5,f,c
  4876  000EA4  501F               	movf	??_crcBufS_get,w,c
  4877  000EA6  2623               	addwf	??_crcBufS_get+4,f,c
  4878  000EA8  5020               	movf	??_crcBufS_get+1,w,c
  4879  000EAA  2224               	addwfc	??_crcBufS_get+5,f,c
  4880  000EAC  5023               	movf	??_crcBufS_get+4,w,c
  4881  000EAE  241B               	addwf	crcBufS_get@_this,w,c
  4882  000EB0  6ED9               	movwf	fsr2l,c
  4883  000EB2  5024               	movf	??_crcBufS_get+5,w,c
  4884  000EB4  201C               	addwfc	crcBufS_get@_this+1,w,c
  4885  000EB6  6EDA               	movwf	fsr2h,c
  4886  000EB8  50DF               	movf	indf2,w,c
  4887                           
  4888                           ; BSR set to: 0
  4889  000EBA  0012               	return	
  4890  000EBC                     __end_of_crcBufS_get:
  4891                           	opt stack 0
  4892                           tosu	equ	0xFFF
  4893                           tosh	equ	0xFFE
  4894                           tosl	equ	0xFFD
  4895                           pclath	equ	0xFFA
  4896                           tblptru	equ	0xFF8
  4897                           tblptrh	equ	0xFF7
  4898                           tblptrl	equ	0xFF6
  4899                           tablat	equ	0xFF5
  4900                           prodh	equ	0xFF4
  4901                           prodl	equ	0xFF3
  4902                           intcon	equ	0xFF2
  4903                           postinc0	equ	0xFEE
  4904                           wreg	equ	0xFE8
  4905                           postdec1	equ	0xFE5
  4906                           fsr1h	equ	0xFE2
  4907                           fsr1l	equ	0xFE1
  4908                           indf2	equ	0xFDF
  4909                           postinc2	equ	0xFDE
  4910                           postdec2	equ	0xFDD
  4911                           plusw2	equ	0xFDB
  4912                           fsr2h	equ	0xFDA
  4913                           fsr2l	equ	0xFD9
  4914                           status	equ	0xFD8
  4915                           
  4916 ;; *************** function _Receive_get *****************
  4917 ;; Defined at:
  4918 ;;		line 128 in file "UART.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;		None
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;		None
  4923 ;; Return value:  Size  Location     Type
  4924 ;;                  1    wreg      unsigned char 
  4925 ;; Registers used:
  4926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4932 ;;      Params:         0       0       0       0       0       0       0
  4933 ;;      Locals:         0       0       0       0       0       0       0
  4934 ;;      Temps:          0       0       0       0       0       0       0
  4935 ;;      Totals:         0       0       0       0       0       0       0
  4936 ;;Total ram usage:        0 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; Hardware stack levels required when called:    6
  4939 ;; This function calls:
  4940 ;;		_UART_buff_get
  4941 ;; This function is called by:
  4942 ;;		_CommsStart
  4943 ;;		_CRCcheck
  4944 ;;		_receiveData
  4945 ;; This function uses a non-reentrant model
  4946 ;;
  4947                           
  4948                           	psect	text19
  4949  00191C                     __ptext19:
  4950                           	opt stack 0
  4951  00191C                     _Receive_get:
  4952                           	opt stack 21
  4953                           
  4954                           ;UART.c: 129: return UART_buff_get(&input_buffer);
  4955                           
  4956                           ; BSR set to: 0
  4957                           ;incstack = 0
  4958  00191C  0E00               	movlw	low _input_buffer
  4959  00191E  6E21               	movwf	UART_buff_get@_this,c
  4960  001920  0E03               	movlw	high _input_buffer
  4961  001922  6E22               	movwf	UART_buff_get@_this+1,c
  4962  001924  EC35  F008         	call	_UART_buff_get	;wreg free
  4963  001928  0012               	return	
  4964  00192A                     __end_of_Receive_get:
  4965                           	opt stack 0
  4966                           tosu	equ	0xFFF
  4967                           tosh	equ	0xFFE
  4968                           tosl	equ	0xFFD
  4969                           pclath	equ	0xFFA
  4970                           tblptru	equ	0xFF8
  4971                           tblptrh	equ	0xFF7
  4972                           tblptrl	equ	0xFF6
  4973                           tablat	equ	0xFF5
  4974                           prodh	equ	0xFF4
  4975                           prodl	equ	0xFF3
  4976                           intcon	equ	0xFF2
  4977                           postinc0	equ	0xFEE
  4978                           wreg	equ	0xFE8
  4979                           postdec1	equ	0xFE5
  4980                           fsr1h	equ	0xFE2
  4981                           fsr1l	equ	0xFE1
  4982                           indf2	equ	0xFDF
  4983                           postinc2	equ	0xFDE
  4984                           postdec2	equ	0xFDD
  4985                           plusw2	equ	0xFDB
  4986                           fsr2h	equ	0xFDA
  4987                           fsr2l	equ	0xFD9
  4988                           status	equ	0xFD8
  4989                           
  4990 ;; *************** function _UART_buff_get *****************
  4991 ;; Defined at:
  4992 ;;		line 83 in file "UART.c"
  4993 ;; Parameters:    Size  Location     Type
  4994 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  4995 ;;		 -> output_buffer(206), input_buffer(206), 
  4996 ;; Auto vars:     Size  Location     Type
  4997 ;;  c               1   36[COMRAM] unsigned char 
  4998 ;; Return value:  Size  Location     Type
  4999 ;;                  1    wreg      unsigned char 
  5000 ;; Registers used:
  5001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5002 ;; Tracked objects:
  5003 ;;		On entry : 0/0
  5004 ;;		On exit  : 0/0
  5005 ;;		Unchanged: 0/0
  5006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5007 ;;      Params:         2       0       0       0       0       0       0
  5008 ;;      Locals:         1       0       0       0       0       0       0
  5009 ;;      Temps:          2       0       0       0       0       0       0
  5010 ;;      Totals:         5       0       0       0       0       0       0
  5011 ;;Total ram usage:        5 bytes
  5012 ;; Hardware stack levels used:    1
  5013 ;; Hardware stack levels required when called:    5
  5014 ;; This function calls:
  5015 ;;		_UART_buff_modulo_inc
  5016 ;; This function is called by:
  5017 ;;		_Receive_get
  5018 ;;		_Send_put
  5019 ;; This function uses a non-reentrant model
  5020 ;;
  5021                           
  5022                           	psect	text20
  5023  00106A                     __ptext20:
  5024                           	opt stack 0
  5025  00106A                     _UART_buff_get:
  5026                           	opt stack 21
  5027                           
  5028                           ;UART.c: 84: unsigned char c;
  5029                           ;UART.c: 85: if (_this->count > 0) {
  5030                           
  5031                           ;incstack = 0
  5032  00106A  EE20 F0CC          	lfsr	2,204
  5033  00106E  5021               	movf	UART_buff_get@_this,w,c
  5034  001070  26D9               	addwf	fsr2l,f,c
  5035  001072  5022               	movf	UART_buff_get@_this+1,w,c
  5036  001074  22DA               	addwfc	fsr2h,f,c
  5037  001076  0E01               	movlw	1
  5038  001078  BEDB               	btfsc	plusw2,7,c
  5039  00107A  D03C               	goto	l3749
  5040  00107C  0E01               	movlw	1
  5041  00107E  50DB               	movf	plusw2,w,c
  5042  001080  E103               	bnz	u3540
  5043  001082  04DE               	decf	postinc2,w,c
  5044  001084  A0D8               	btfss	status,0,c
  5045  001086  D036               	goto	l3749
  5046  001088                     u3540:
  5047                           
  5048                           ;UART.c: 86: c = _this->buf[_this->tail];
  5049  001088  EE20 F0CA          	lfsr	2,202
  5050  00108C  5021               	movf	UART_buff_get@_this,w,c
  5051  00108E  26D9               	addwf	fsr2l,f,c
  5052  001090  5022               	movf	UART_buff_get@_this+1,w,c
  5053  001092  22DA               	addwfc	fsr2h,f,c
  5054  001094  CFDE F023          	movff	postinc2,??_UART_buff_get
  5055  001098  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  5056  00109C  5023               	movf	??_UART_buff_get,w,c
  5057  00109E  2421               	addwf	UART_buff_get@_this,w,c
  5058  0010A0  6ED9               	movwf	fsr2l,c
  5059  0010A2  5024               	movf	??_UART_buff_get+1,w,c
  5060  0010A4  2022               	addwfc	UART_buff_get@_this+1,w,c
  5061  0010A6  6EDA               	movwf	fsr2h,c
  5062  0010A8  50DF               	movf	indf2,w,c
  5063  0010AA  6E25               	movwf	UART_buff_get@c,c
  5064                           
  5065                           ;UART.c: 87: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  5066  0010AC  EE20 F0CA          	lfsr	2,202
  5067  0010B0  5021               	movf	UART_buff_get@_this,w,c
  5068  0010B2  26D9               	addwf	fsr2l,f,c
  5069  0010B4  5022               	movf	UART_buff_get@_this+1,w,c
  5070  0010B6  22DA               	addwfc	fsr2h,f,c
  5071  0010B8  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  5072  0010BC  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  5073  0010C0  0E00               	movlw	0
  5074  0010C2  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  5075  0010C4  0EC8               	movlw	200
  5076  0010C6  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  5077  0010C8  EC9B  F00B         	call	_UART_buff_modulo_inc	;wreg free
  5078  0010CC  EE20 F0CA          	lfsr	2,202
  5079  0010D0  5021               	movf	UART_buff_get@_this,w,c
  5080  0010D2  26D9               	addwf	fsr2l,f,c
  5081  0010D4  5022               	movf	UART_buff_get@_this+1,w,c
  5082  0010D6  22DA               	addwfc	fsr2h,f,c
  5083  0010D8  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  5084  0010DC  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  5085                           
  5086                           ;UART.c: 88: --_this->count;
  5087  0010E0  EE20 F0CC          	lfsr	2,204
  5088  0010E4  5021               	movf	UART_buff_get@_this,w,c
  5089  0010E6  26D9               	addwf	fsr2l,f,c
  5090  0010E8  5022               	movf	UART_buff_get@_this+1,w,c
  5091  0010EA  22DA               	addwfc	fsr2h,f,c
  5092  0010EC  06DE               	decf	postinc2,f,c
  5093  0010EE  0E00               	movlw	0
  5094  0010F0  5ADD               	subwfb	postdec2,f,c
  5095                           
  5096                           ;UART.c: 89: } else {
  5097  0010F2  D002               	goto	l614
  5098  0010F4                     l3749:
  5099                           
  5100                           ;UART.c: 90: c = 0;
  5101  0010F4  0E00               	movlw	0
  5102  0010F6  6E25               	movwf	UART_buff_get@c,c
  5103  0010F8                     l614:
  5104                           
  5105                           ;UART.c: 91: }
  5106                           ;UART.c: 92: return (c);
  5107  0010F8  5025               	movf	UART_buff_get@c,w,c
  5108  0010FA  0012               	return	
  5109  0010FC                     __end_of_UART_buff_get:
  5110                           	opt stack 0
  5111                           tosu	equ	0xFFF
  5112                           tosh	equ	0xFFE
  5113                           tosl	equ	0xFFD
  5114                           pclath	equ	0xFFA
  5115                           tblptru	equ	0xFF8
  5116                           tblptrh	equ	0xFF7
  5117                           tblptrl	equ	0xFF6
  5118                           tablat	equ	0xFF5
  5119                           prodh	equ	0xFF4
  5120                           prodl	equ	0xFF3
  5121                           intcon	equ	0xFF2
  5122                           postinc0	equ	0xFEE
  5123                           wreg	equ	0xFE8
  5124                           postdec1	equ	0xFE5
  5125                           fsr1h	equ	0xFE2
  5126                           fsr1l	equ	0xFE1
  5127                           indf2	equ	0xFDF
  5128                           postinc2	equ	0xFDE
  5129                           postdec2	equ	0xFDD
  5130                           plusw2	equ	0xFDB
  5131                           fsr2h	equ	0xFDA
  5132                           fsr2l	equ	0xFD9
  5133                           status	equ	0xFD8
  5134                           
  5135 ;; *************** function _UART_buff_modulo_inc *****************
  5136 ;; Defined at:
  5137 ;;		line 108 in file "UART.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;  value           2   26[COMRAM] const unsigned int 
  5140 ;;  modulus         2   28[COMRAM] const unsigned int 
  5141 ;; Auto vars:     Size  Location     Type
  5142 ;;  my_value        2   30[COMRAM] unsigned int 
  5143 ;; Return value:  Size  Location     Type
  5144 ;;                  2   26[COMRAM] unsigned int 
  5145 ;; Registers used:
  5146 ;;		wreg, status,2, status,0
  5147 ;; Tracked objects:
  5148 ;;		On entry : 0/0
  5149 ;;		On exit  : 0/0
  5150 ;;		Unchanged: 0/0
  5151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5152 ;;      Params:         4       0       0       0       0       0       0
  5153 ;;      Locals:         2       0       0       0       0       0       0
  5154 ;;      Temps:          0       0       0       0       0       0       0
  5155 ;;      Totals:         6       0       0       0       0       0       0
  5156 ;;Total ram usage:        6 bytes
  5157 ;; Hardware stack levels used:    1
  5158 ;; Hardware stack levels required when called:    4
  5159 ;; This function calls:
  5160 ;;		Nothing
  5161 ;; This function is called by:
  5162 ;;		_UART_buff_put
  5163 ;;		_UART_buff_get
  5164 ;; This function uses a non-reentrant model
  5165 ;;
  5166                           
  5167                           	psect	text21
  5168  001736                     __ptext21:
  5169                           	opt stack 0
  5170  001736                     _UART_buff_modulo_inc:
  5171                           	opt stack 21
  5172                           
  5173                           ;UART.c: 109: unsigned int my_value = value + 1;
  5174                           
  5175                           ;incstack = 0
  5176  001736  0E01               	movlw	1
  5177  001738  241B               	addwf	UART_buff_modulo_inc@value,w,c
  5178  00173A  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  5179  00173C  0E00               	movlw	0
  5180  00173E  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  5181  001740  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  5182                           
  5183                           ;UART.c: 110: if (my_value >= modulus) {
  5184  001742  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  5185  001744  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  5186  001746  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  5187  001748  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  5188  00174A  A0D8               	btfss	status,0,c
  5189  00174C  D004               	goto	l3737
  5190                           
  5191                           ;UART.c: 111: my_value = 0;
  5192  00174E  0E00               	movlw	0
  5193  001750  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  5194  001752  0E00               	movlw	0
  5195  001754  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  5196  001756                     l3737:
  5197                           
  5198                           ;UART.c: 112: }
  5199                           ;UART.c: 113: return (my_value);
  5200  001756  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  5201  00175A  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  5202  00175E  0012               	return	
  5203  001760                     __end_of_UART_buff_modulo_inc:
  5204                           	opt stack 0
  5205                           tosu	equ	0xFFF
  5206                           tosh	equ	0xFFE
  5207                           tosl	equ	0xFFD
  5208                           pclath	equ	0xFFA
  5209                           tblptru	equ	0xFF8
  5210                           tblptrh	equ	0xFF7
  5211                           tblptrl	equ	0xFF6
  5212                           tablat	equ	0xFF5
  5213                           prodh	equ	0xFF4
  5214                           prodl	equ	0xFF3
  5215                           intcon	equ	0xFF2
  5216                           postinc0	equ	0xFEE
  5217                           wreg	equ	0xFE8
  5218                           postdec1	equ	0xFE5
  5219                           fsr1h	equ	0xFE2
  5220                           fsr1l	equ	0xFE1
  5221                           indf2	equ	0xFDF
  5222                           postinc2	equ	0xFDE
  5223                           postdec2	equ	0xFDD
  5224                           plusw2	equ	0xFDB
  5225                           fsr2h	equ	0xFDA
  5226                           fsr2l	equ	0xFD9
  5227                           status	equ	0xFD8
  5228                           
  5229 ;; *************** function _Receive_available *****************
  5230 ;; Defined at:
  5231 ;;		line 124 in file "UART.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;		None
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;		None
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  2   28[COMRAM] int 
  5238 ;; Registers used:
  5239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5245 ;;      Params:         2       0       0       0       0       0       0
  5246 ;;      Locals:         0       0       0       0       0       0       0
  5247 ;;      Temps:          0       0       0       0       0       0       0
  5248 ;;      Totals:         2       0       0       0       0       0       0
  5249 ;;Total ram usage:        2 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; Hardware stack levels required when called:    5
  5252 ;; This function calls:
  5253 ;;		_UART_buff_size
  5254 ;; This function is called by:
  5255 ;;		_CommsStart
  5256 ;;		_CRCcheck
  5257 ;;		_receiveData
  5258 ;; This function uses a non-reentrant model
  5259 ;;
  5260                           
  5261                           	psect	text22
  5262  0018BA                     __ptext22:
  5263                           	opt stack 0
  5264  0018BA                     _Receive_available:
  5265                           	opt stack 22
  5266                           
  5267                           ;UART.c: 125: return UART_buff_size(&input_buffer);
  5268                           
  5269                           ;incstack = 0
  5270  0018BA  0E00               	movlw	low _input_buffer
  5271  0018BC  6E1B               	movwf	UART_buff_size@_this,c
  5272  0018BE  0E03               	movlw	high _input_buffer
  5273  0018C0  6E1C               	movwf	UART_buff_size@_this+1,c
  5274  0018C2  EC68  F00C         	call	_UART_buff_size	;wreg free
  5275  0018C6  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  5276  0018CA  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  5277  0018CE  0012               	return	
  5278  0018D0                     __end_of_Receive_available:
  5279                           	opt stack 0
  5280                           tosu	equ	0xFFF
  5281                           tosh	equ	0xFFE
  5282                           tosl	equ	0xFFD
  5283                           pclath	equ	0xFFA
  5284                           tblptru	equ	0xFF8
  5285                           tblptrh	equ	0xFF7
  5286                           tblptrl	equ	0xFF6
  5287                           tablat	equ	0xFF5
  5288                           prodh	equ	0xFF4
  5289                           prodl	equ	0xFF3
  5290                           intcon	equ	0xFF2
  5291                           postinc0	equ	0xFEE
  5292                           wreg	equ	0xFE8
  5293                           postdec1	equ	0xFE5
  5294                           fsr1h	equ	0xFE2
  5295                           fsr1l	equ	0xFE1
  5296                           indf2	equ	0xFDF
  5297                           postinc2	equ	0xFDE
  5298                           postdec2	equ	0xFDD
  5299                           plusw2	equ	0xFDB
  5300                           fsr2h	equ	0xFDA
  5301                           fsr2l	equ	0xFD9
  5302                           status	equ	0xFD8
  5303                           
  5304 ;; *************** function _UART_buff_size *****************
  5305 ;; Defined at:
  5306 ;;		line 104 in file "UART.c"
  5307 ;; Parameters:    Size  Location     Type
  5308 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  5309 ;;		 -> output_buffer(206), input_buffer(206), 
  5310 ;; Auto vars:     Size  Location     Type
  5311 ;;		None
  5312 ;; Return value:  Size  Location     Type
  5313 ;;                  2   26[COMRAM] int 
  5314 ;; Registers used:
  5315 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5316 ;; Tracked objects:
  5317 ;;		On entry : 0/0
  5318 ;;		On exit  : 0/0
  5319 ;;		Unchanged: 0/0
  5320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5321 ;;      Params:         2       0       0       0       0       0       0
  5322 ;;      Locals:         0       0       0       0       0       0       0
  5323 ;;      Temps:          0       0       0       0       0       0       0
  5324 ;;      Totals:         2       0       0       0       0       0       0
  5325 ;;Total ram usage:        2 bytes
  5326 ;; Hardware stack levels used:    1
  5327 ;; Hardware stack levels required when called:    4
  5328 ;; This function calls:
  5329 ;;		Nothing
  5330 ;; This function is called by:
  5331 ;;		_Receive_available
  5332 ;; This function uses a non-reentrant model
  5333 ;;
  5334                           
  5335                           	psect	text23
  5336  0018D0                     __ptext23:
  5337                           	opt stack 0
  5338  0018D0                     _UART_buff_size:
  5339                           	opt stack 22
  5340                           
  5341                           ;UART.c: 105: return (_this->count);
  5342                           
  5343                           ;incstack = 0
  5344  0018D0  EE20 F0CC          	lfsr	2,204
  5345  0018D4  501B               	movf	UART_buff_size@_this,w,c
  5346  0018D6  26D9               	addwf	fsr2l,f,c
  5347  0018D8  501C               	movf	UART_buff_size@_this+1,w,c
  5348  0018DA  22DA               	addwfc	fsr2h,f,c
  5349  0018DC  CFDE F01B          	movff	postinc2,?_UART_buff_size
  5350  0018E0  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  5351  0018E4  0012               	return	
  5352  0018E6                     __end_of_UART_buff_size:
  5353                           	opt stack 0
  5354                           tosu	equ	0xFFF
  5355                           tosh	equ	0xFFE
  5356                           tosl	equ	0xFFD
  5357                           pclath	equ	0xFFA
  5358                           tblptru	equ	0xFF8
  5359                           tblptrh	equ	0xFF7
  5360                           tblptrl	equ	0xFF6
  5361                           tablat	equ	0xFF5
  5362                           prodh	equ	0xFF4
  5363                           prodl	equ	0xFF3
  5364                           intcon	equ	0xFF2
  5365                           postinc0	equ	0xFEE
  5366                           wreg	equ	0xFE8
  5367                           postdec1	equ	0xFE5
  5368                           fsr1h	equ	0xFE2
  5369                           fsr1l	equ	0xFE1
  5370                           indf2	equ	0xFDF
  5371                           postinc2	equ	0xFDE
  5372                           postdec2	equ	0xFDD
  5373                           plusw2	equ	0xFDB
  5374                           fsr2h	equ	0xFDA
  5375                           fsr2l	equ	0xFD9
  5376                           status	equ	0xFD8
  5377                           
  5378 ;; *************** function _CRC8 *****************
  5379 ;; Defined at:
  5380 ;;		line 89 in file "FastTransfer.c"
  5381 ;; Parameters:    Size  Location     Type
  5382 ;;  data            2   26[COMRAM] PTR const unsigned char 
  5383 ;;		 -> CRCcheck@arrayHolder(3), receiveData@holder_1756(3), receiveData@holder(3), rx_buffer(200), 
  5384 ;;		 -> ring_buffer(206), NULL(0), 
  5385 ;;  len             1   28[COMRAM] unsigned char 
  5386 ;; Auto vars:     Size  Location     Type
  5387 ;;  sum             1   29[COMRAM] unsigned char 
  5388 ;;  tempI           1   31[COMRAM] unsigned char 
  5389 ;;  extract         1   30[COMRAM] unsigned char 
  5390 ;;  crc             1   32[COMRAM] unsigned char 
  5391 ;; Return value:  Size  Location     Type
  5392 ;;                  1    wreg      unsigned char 
  5393 ;; Registers used:
  5394 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5395 ;; Tracked objects:
  5396 ;;		On entry : 0/0
  5397 ;;		On exit  : 0/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5400 ;;      Params:         3       0       0       0       0       0       0
  5401 ;;      Locals:         4       0       0       0       0       0       0
  5402 ;;      Temps:          0       0       0       0       0       0       0
  5403 ;;      Totals:         7       0       0       0       0       0       0
  5404 ;;Total ram usage:        7 bytes
  5405 ;; Hardware stack levels used:    1
  5406 ;; Hardware stack levels required when called:    4
  5407 ;; This function calls:
  5408 ;;		Nothing
  5409 ;; This function is called by:
  5410 ;;		_sendData
  5411 ;;		_receiveData
  5412 ;;		_CRCcheck
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           	psect	text24
  5417  00148A                     __ptext24:
  5418                           	opt stack 0
  5419  00148A                     _CRC8:
  5420                           	opt stack 22
  5421                           
  5422                           ;FastTransfer.c: 90: unsigned char crc = 0x00;
  5423                           
  5424                           ;incstack = 0
  5425  00148A  0E00               	movlw	0
  5426  00148C  6E21               	movwf	CRC8@crc,c
  5427                           
  5428                           ;FastTransfer.c: 91: while (len--) {
  5429  00148E  D01C               	goto	l3775
  5430  001490                     l3759:
  5431                           
  5432                           ;FastTransfer.c: 92: unsigned char extract = *data++;
  5433  001490  C01B  FFD9         	movff	CRC8@data,fsr2l
  5434  001494  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  5435  001498  50DF               	movf	indf2,w,c
  5436  00149A  6E1F               	movwf	CRC8@extract,c
  5437  00149C  4A1B               	infsnz	CRC8@data,f,c
  5438  00149E  2A1C               	incf	CRC8@data+1,f,c
  5439                           
  5440                           ;FastTransfer.c: 93: unsigned char tempI;
  5441                           ;FastTransfer.c: 94: for (tempI = 8; tempI; tempI--) {
  5442  0014A0  0E08               	movlw	8
  5443  0014A2  6E20               	movwf	CRC8@tempI,c
  5444  0014A4  D00E               	goto	l3773
  5445  0014A6                     l3765:
  5446                           
  5447                           ;FastTransfer.c: 95: unsigned char sum = (crc ^ extract) & 0x01;
  5448  0014A6  5021               	movf	CRC8@crc,w,c
  5449  0014A8  181F               	xorwf	CRC8@extract,w,c
  5450  0014AA  0B01               	andlw	1
  5451  0014AC  6E1E               	movwf	CRC8@sum,c
  5452                           
  5453                           ;FastTransfer.c: 96: crc >>= 1;
  5454  0014AE  90D8               	bcf	status,0,c
  5455  0014B0  3221               	rrcf	CRC8@crc,f,c
  5456                           
  5457                           ;FastTransfer.c: 97: if (sum) {
  5458  0014B2  501E               	movf	CRC8@sum,w,c
  5459  0014B4  B4D8               	btfsc	status,2,c
  5460  0014B6  D002               	goto	l455
  5461                           
  5462                           ;FastTransfer.c: 98: crc ^= 0x8C;
  5463  0014B8  0E8C               	movlw	140
  5464  0014BA  1A21               	xorwf	CRC8@crc,f,c
  5465  0014BC                     l455:
  5466                           
  5467                           ;FastTransfer.c: 99: }
  5468                           ;FastTransfer.c: 100: extract >>= 1;
  5469  0014BC  90D8               	bcf	status,0,c
  5470  0014BE  321F               	rrcf	CRC8@extract,f,c
  5471  0014C0  0620               	decf	CRC8@tempI,f,c
  5472  0014C2                     l3773:
  5473  0014C2  5020               	movf	CRC8@tempI,w,c
  5474  0014C4  A4D8               	btfss	status,2,c
  5475  0014C6  D7EF               	goto	l3765
  5476  0014C8                     l3775:
  5477  0014C8  061D               	decf	CRC8@len,f,c
  5478  0014CA  281D               	incf	CRC8@len,w,c
  5479  0014CC  A4D8               	btfss	status,2,c
  5480  0014CE  D7E0               	goto	l3759
  5481                           
  5482                           ;FastTransfer.c: 101: }
  5483                           ;FastTransfer.c: 102: }
  5484                           ;FastTransfer.c: 103: return crc;
  5485  0014D0  5021               	movf	CRC8@crc,w,c
  5486  0014D2  0012               	return	
  5487  0014D4                     __end_of_CRC8:
  5488                           	opt stack 0
  5489                           tosu	equ	0xFFF
  5490                           tosh	equ	0xFFE
  5491                           tosl	equ	0xFFD
  5492                           pclath	equ	0xFFA
  5493                           tblptru	equ	0xFF8
  5494                           tblptrh	equ	0xFF7
  5495                           tblptrl	equ	0xFF6
  5496                           tablat	equ	0xFF5
  5497                           prodh	equ	0xFF4
  5498                           prodl	equ	0xFF3
  5499                           intcon	equ	0xFF2
  5500                           postinc0	equ	0xFEE
  5501                           wreg	equ	0xFE8
  5502                           postdec1	equ	0xFE5
  5503                           fsr1h	equ	0xFE2
  5504                           fsr1l	equ	0xFE1
  5505                           indf2	equ	0xFDF
  5506                           postinc2	equ	0xFDE
  5507                           postdec2	equ	0xFDD
  5508                           plusw2	equ	0xFDB
  5509                           fsr2h	equ	0xFDA
  5510                           fsr2l	equ	0xFD9
  5511                           status	equ	0xFD8
  5512                           
  5513 ;; *************** function _ToSend *****************
  5514 ;; Defined at:
  5515 ;;		line 271 in file "FastTransfer.c"
  5516 ;; Parameters:    Size  Location     Type
  5517 ;;  where           1    wreg     unsigned char 
  5518 ;;  what            2    2[BANK0 ] unsigned int 
  5519 ;; Auto vars:     Size  Location     Type
  5520 ;;  where           1    4[BANK0 ] unsigned char 
  5521 ;; Return value:  Size  Location     Type
  5522 ;;                  1    wreg      void 
  5523 ;; Registers used:
  5524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5525 ;; Tracked objects:
  5526 ;;		On entry : 0/0
  5527 ;;		On exit  : 0/0
  5528 ;;		Unchanged: 0/0
  5529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5530 ;;      Params:         0       2       0       0       0       0       0
  5531 ;;      Locals:         0       1       0       0       0       0       0
  5532 ;;      Temps:          0       0       0       0       0       0       0
  5533 ;;      Totals:         0       3       0       0       0       0       0
  5534 ;;Total ram usage:        3 bytes
  5535 ;; Hardware stack levels used:    1
  5536 ;; Hardware stack levels required when called:    6
  5537 ;; This function calls:
  5538 ;;		_FastTransfer_buffer_put
  5539 ;; This function is called by:
  5540 ;;		_respondChargerAsECU
  5541 ;;		_SetBMM
  5542 ;; This function uses a non-reentrant model
  5543 ;;
  5544                           
  5545                           	psect	text25
  5546  001818                     __ptext25:
  5547                           	opt stack 0
  5548  001818                     _ToSend:
  5549                           	opt stack 22
  5550                           
  5551                           ;incstack = 0
  5552                           ;ToSend@where stored from wreg
  5553  001818  0100               	movlb	0	; () banked
  5554  00181A  6FCC               	movwf	ToSend@where& (0+255),b
  5555                           
  5556                           ;FastTransfer.c: 272: FastTransfer_buffer_put(&ring_buffer, where, what);
  5557  00181C  0E00               	movlw	low _ring_buffer
  5558  00181E  6E21               	movwf	FastTransfer_buffer_put@_this,c
  5559  001820  0E01               	movlw	high _ring_buffer
  5560  001822  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  5561  001824  C0CC  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  5562  001828  C0CA  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  5563  00182C  C0CB  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  5564  001830  ECBB  F003         	call	_FastTransfer_buffer_put	;wreg free
  5565  001834  0012               	return		;funcret
  5566  001836                     __end_of_ToSend:
  5567                           	opt stack 0
  5568                           tosu	equ	0xFFF
  5569                           tosh	equ	0xFFE
  5570                           tosl	equ	0xFFD
  5571                           pclath	equ	0xFFA
  5572                           tblptru	equ	0xFF8
  5573                           tblptrh	equ	0xFF7
  5574                           tblptrl	equ	0xFF6
  5575                           tablat	equ	0xFF5
  5576                           prodh	equ	0xFF4
  5577                           prodl	equ	0xFF3
  5578                           intcon	equ	0xFF2
  5579                           postinc0	equ	0xFEE
  5580                           wreg	equ	0xFE8
  5581                           postdec1	equ	0xFE5
  5582                           fsr1h	equ	0xFE2
  5583                           fsr1l	equ	0xFE1
  5584                           indf2	equ	0xFDF
  5585                           postinc2	equ	0xFDE
  5586                           postdec2	equ	0xFDD
  5587                           plusw2	equ	0xFDB
  5588                           fsr2h	equ	0xFDA
  5589                           fsr2l	equ	0xFD9
  5590                           status	equ	0xFD8
  5591                           
  5592 ;; *************** function _FastTransfer_buffer_put *****************
  5593 ;; Defined at:
  5594 ;;		line 278 in file "FastTransfer.c"
  5595 ;; Parameters:    Size  Location     Type
  5596 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  5597 ;;		 -> ring_buffer(206), 
  5598 ;;  towhere         1   34[COMRAM] unsigned char 
  5599 ;;  towhat          2   35[COMRAM] unsigned int 
  5600 ;; Auto vars:     Size  Location     Type
  5601 ;;		None
  5602 ;; Return value:  Size  Location     Type
  5603 ;;                  1    wreg      void 
  5604 ;; Registers used:
  5605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5606 ;; Tracked objects:
  5607 ;;		On entry : 0/0
  5608 ;;		On exit  : 0/0
  5609 ;;		Unchanged: 0/0
  5610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5611 ;;      Params:         5       0       0       0       0       0       0
  5612 ;;      Locals:         0       0       0       0       0       0       0
  5613 ;;      Temps:          0       2       0       0       0       0       0
  5614 ;;      Totals:         5       2       0       0       0       0       0
  5615 ;;Total ram usage:        7 bytes
  5616 ;; Hardware stack levels used:    1
  5617 ;; Hardware stack levels required when called:    5
  5618 ;; This function calls:
  5619 ;;		_FastTransfer_buffer_modulo_inc
  5620 ;; This function is called by:
  5621 ;;		_ToSend
  5622 ;; This function uses a non-reentrant model
  5623 ;;
  5624                           
  5625                           	psect	text26
  5626  000776                     __ptext26:
  5627                           	opt stack 0
  5628  000776                     _FastTransfer_buffer_put:
  5629                           	opt stack 22
  5630                           
  5631                           ;FastTransfer.c: 280: group.integer = towhat;
  5632                           
  5633                           ;incstack = 0
  5634  000776  C024  F02C         	movff	FastTransfer_buffer_put@towhat,_group
  5635  00077A  C025  F02D         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  5636                           
  5637                           ;FastTransfer.c: 282: if (_this->count < (200 - 3)) {
  5638  00077E  EE20 F0CC          	lfsr	2,204
  5639  000782  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5640  000784  26D9               	addwf	fsr2l,f,c
  5641  000786  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5642  000788  22DA               	addwfc	fsr2h,f,c
  5643  00078A  0E01               	movlw	1
  5644  00078C  BEDB               	btfsc	plusw2,7,c
  5645  00078E  D007               	goto	l3911
  5646  000790  0E01               	movlw	1
  5647  000792  50DB               	movf	plusw2,w,c
  5648  000794  E103               	bnz	u3811
  5649  000796  0EC5               	movlw	197
  5650  000798  5CDE               	subwf	postinc2,w,c
  5651  00079A  B0D8               	btfsc	status,0,c
  5652  00079C                     u3811:
  5653  00079C  0012               	return	
  5654  00079E                     l3911:
  5655                           
  5656                           ;FastTransfer.c: 283: _this->buf[_this->head] = towhere;
  5657  00079E  EE20 F0C8          	lfsr	2,200
  5658  0007A2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5659  0007A4  26D9               	addwf	fsr2l,f,c
  5660  0007A6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5661  0007A8  22DA               	addwfc	fsr2h,f,c
  5662  0007AA  CFDE F0C8          	movff	postinc2,??_FastTransfer_buffer_put
  5663  0007AE  CFDD F0C9          	movff	postdec2,??_FastTransfer_buffer_put+1
  5664  0007B2  0100               	movlb	0	; () banked
  5665  0007B4  51C8               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  5666  0007B6  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5667  0007B8  6ED9               	movwf	fsr2l,c
  5668  0007BA  0100               	movlb	0	; () banked
  5669  0007BC  51C9               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  5670  0007BE  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5671  0007C0  6EDA               	movwf	fsr2h,c
  5672  0007C2  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  5673                           
  5674                           ; BSR set to: 0
  5675                           ;FastTransfer.c: 284: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5676  0007C6  EE20 F0C8          	lfsr	2,200
  5677  0007CA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5678  0007CC  26D9               	addwf	fsr2l,f,c
  5679  0007CE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5680  0007D0  22DA               	addwfc	fsr2h,f,c
  5681  0007D2  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5682  0007D6  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5683  0007DA  0E00               	movlw	0
  5684  0007DC  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5685  0007DE  0EC8               	movlw	200
  5686  0007E0  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5687  0007E2  ECB0  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5688  0007E6  EE20 F0C8          	lfsr	2,200
  5689  0007EA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5690  0007EC  26D9               	addwf	fsr2l,f,c
  5691  0007EE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5692  0007F0  22DA               	addwfc	fsr2h,f,c
  5693  0007F2  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5694  0007F6  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5695                           
  5696                           ;FastTransfer.c: 285: ++_this->count;
  5697  0007FA  EE20 F0CC          	lfsr	2,204
  5698  0007FE  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5699  000800  26D9               	addwf	fsr2l,f,c
  5700  000802  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5701  000804  22DA               	addwfc	fsr2h,f,c
  5702  000806  2ADE               	incf	postinc2,f,c
  5703  000808  0E00               	movlw	0
  5704  00080A  22DD               	addwfc	postdec2,f,c
  5705                           
  5706                           ;FastTransfer.c: 286: _this->buf[_this->head] = group.parts[0];
  5707  00080C  EE20 F0C8          	lfsr	2,200
  5708  000810  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5709  000812  26D9               	addwf	fsr2l,f,c
  5710  000814  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5711  000816  22DA               	addwfc	fsr2h,f,c
  5712  000818  CFDE F0C8          	movff	postinc2,??_FastTransfer_buffer_put
  5713  00081C  CFDD F0C9          	movff	postdec2,??_FastTransfer_buffer_put+1
  5714  000820  0100               	movlb	0	; () banked
  5715  000822  51C8               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  5716  000824  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5717  000826  6ED9               	movwf	fsr2l,c
  5718  000828  0100               	movlb	0	; () banked
  5719  00082A  51C9               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  5720  00082C  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5721  00082E  6EDA               	movwf	fsr2h,c
  5722  000830  C02C  FFDF         	movff	_group,indf2
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;FastTransfer.c: 287: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5726  000834  EE20 F0C8          	lfsr	2,200
  5727  000838  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5728  00083A  26D9               	addwf	fsr2l,f,c
  5729  00083C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5730  00083E  22DA               	addwfc	fsr2h,f,c
  5731  000840  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5732  000844  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5733  000848  0E00               	movlw	0
  5734  00084A  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5735  00084C  0EC8               	movlw	200
  5736  00084E  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5737  000850  ECB0  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5738  000854  EE20 F0C8          	lfsr	2,200
  5739  000858  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5740  00085A  26D9               	addwf	fsr2l,f,c
  5741  00085C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5742  00085E  22DA               	addwfc	fsr2h,f,c
  5743  000860  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5744  000864  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5745                           
  5746                           ;FastTransfer.c: 288: ++_this->count;
  5747  000868  EE20 F0CC          	lfsr	2,204
  5748  00086C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5749  00086E  26D9               	addwf	fsr2l,f,c
  5750  000870  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5751  000872  22DA               	addwfc	fsr2h,f,c
  5752  000874  2ADE               	incf	postinc2,f,c
  5753  000876  0E00               	movlw	0
  5754  000878  22DD               	addwfc	postdec2,f,c
  5755                           
  5756                           ;FastTransfer.c: 289: _this->buf[_this->head] = group.parts[1];
  5757  00087A  EE20 F0C8          	lfsr	2,200
  5758  00087E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5759  000880  26D9               	addwf	fsr2l,f,c
  5760  000882  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5761  000884  22DA               	addwfc	fsr2h,f,c
  5762  000886  CFDE F0C8          	movff	postinc2,??_FastTransfer_buffer_put
  5763  00088A  CFDD F0C9          	movff	postdec2,??_FastTransfer_buffer_put+1
  5764  00088E  0100               	movlb	0	; () banked
  5765  000890  51C8               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  5766  000892  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5767  000894  6ED9               	movwf	fsr2l,c
  5768  000896  0100               	movlb	0	; () banked
  5769  000898  51C9               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  5770  00089A  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5771  00089C  6EDA               	movwf	fsr2h,c
  5772  00089E  C02D  FFDF         	movff	_group+1,indf2
  5773                           
  5774                           ; BSR set to: 0
  5775                           ;FastTransfer.c: 290: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5776  0008A2  EE20 F0C8          	lfsr	2,200
  5777  0008A6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5778  0008A8  26D9               	addwf	fsr2l,f,c
  5779  0008AA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5780  0008AC  22DA               	addwfc	fsr2h,f,c
  5781  0008AE  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5782  0008B2  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5783  0008B6  0E00               	movlw	0
  5784  0008B8  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5785  0008BA  0EC8               	movlw	200
  5786  0008BC  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5787  0008BE  ECB0  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5788  0008C2  EE20 F0C8          	lfsr	2,200
  5789  0008C6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5790  0008C8  26D9               	addwf	fsr2l,f,c
  5791  0008CA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5792  0008CC  22DA               	addwfc	fsr2h,f,c
  5793  0008CE  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5794  0008D2  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5795                           
  5796                           ;FastTransfer.c: 291: ++_this->count;
  5797  0008D6  EE20 F0CC          	lfsr	2,204
  5798  0008DA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5799  0008DC  26D9               	addwf	fsr2l,f,c
  5800  0008DE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5801  0008E0  22DA               	addwfc	fsr2h,f,c
  5802  0008E2  2ADE               	incf	postinc2,f,c
  5803  0008E4  0E00               	movlw	0
  5804  0008E6  22DD               	addwfc	postdec2,f,c
  5805  0008E8  0012               	return	
  5806  0008EA                     __end_of_FastTransfer_buffer_put:
  5807                           	opt stack 0
  5808                           tosu	equ	0xFFF
  5809                           tosh	equ	0xFFE
  5810                           tosl	equ	0xFFD
  5811                           pclath	equ	0xFFA
  5812                           tblptru	equ	0xFF8
  5813                           tblptrh	equ	0xFF7
  5814                           tblptrl	equ	0xFF6
  5815                           tablat	equ	0xFF5
  5816                           prodh	equ	0xFF4
  5817                           prodl	equ	0xFF3
  5818                           intcon	equ	0xFF2
  5819                           postinc0	equ	0xFEE
  5820                           wreg	equ	0xFE8
  5821                           postdec1	equ	0xFE5
  5822                           fsr1h	equ	0xFE2
  5823                           fsr1l	equ	0xFE1
  5824                           indf2	equ	0xFDF
  5825                           postinc2	equ	0xFDE
  5826                           postdec2	equ	0xFDD
  5827                           plusw2	equ	0xFDB
  5828                           fsr2h	equ	0xFDA
  5829                           fsr2l	equ	0xFD9
  5830                           status	equ	0xFD8
  5831                           
  5832 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  5833 ;; Defined at:
  5834 ;;		line 328 in file "FastTransfer.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;  value           2   26[COMRAM] const unsigned int 
  5837 ;;  modulus         2   28[COMRAM] const unsigned int 
  5838 ;; Auto vars:     Size  Location     Type
  5839 ;;  my_value        2   30[COMRAM] unsigned int 
  5840 ;; Return value:  Size  Location     Type
  5841 ;;                  2   26[COMRAM] unsigned int 
  5842 ;; Registers used:
  5843 ;;		wreg, status,2, status,0
  5844 ;; Tracked objects:
  5845 ;;		On entry : 0/0
  5846 ;;		On exit  : 0/0
  5847 ;;		Unchanged: 0/0
  5848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5849 ;;      Params:         4       0       0       0       0       0       0
  5850 ;;      Locals:         2       0       0       0       0       0       0
  5851 ;;      Temps:          0       0       0       0       0       0       0
  5852 ;;      Totals:         6       0       0       0       0       0       0
  5853 ;;Total ram usage:        6 bytes
  5854 ;; Hardware stack levels used:    1
  5855 ;; Hardware stack levels required when called:    4
  5856 ;; This function calls:
  5857 ;;		Nothing
  5858 ;; This function is called by:
  5859 ;;		_FastTransfer_buffer_put
  5860 ;;		_FastTransfer_buffer_get
  5861 ;; This function uses a non-reentrant model
  5862 ;;
  5863                           
  5864                           	psect	text27
  5865  001760                     __ptext27:
  5866                           	opt stack 0
  5867  001760                     _FastTransfer_buffer_modulo_inc:
  5868                           	opt stack 22
  5869                           
  5870                           ;FastTransfer.c: 329: unsigned int my_value = value + 1;
  5871                           
  5872                           ;incstack = 0
  5873  001760  0E01               	movlw	1
  5874  001762  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  5875  001764  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5876  001766  0E00               	movlw	0
  5877  001768  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  5878  00176A  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5879                           
  5880                           ;FastTransfer.c: 330: if (my_value >= modulus) {
  5881  00176C  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  5882  00176E  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  5883  001770  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  5884  001772  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  5885  001774  A0D8               	btfss	status,0,c
  5886  001776  D004               	goto	l3785
  5887                           
  5888                           ;FastTransfer.c: 331: my_value = 0;
  5889  001778  0E00               	movlw	0
  5890  00177A  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5891  00177C  0E00               	movlw	0
  5892  00177E  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5893  001780                     l3785:
  5894                           
  5895                           ;FastTransfer.c: 332: }
  5896                           ;FastTransfer.c: 333: return (my_value);
  5897  001780  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  5898  001784  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  5899  001788  0012               	return	
  5900  00178A                     __end_of_FastTransfer_buffer_modulo_inc:
  5901                           	opt stack 0
  5902                           tosu	equ	0xFFF
  5903                           tosh	equ	0xFFE
  5904                           tosl	equ	0xFFD
  5905                           pclath	equ	0xFFA
  5906                           tblptru	equ	0xFF8
  5907                           tblptrh	equ	0xFF7
  5908                           tblptrl	equ	0xFF6
  5909                           tablat	equ	0xFF5
  5910                           prodh	equ	0xFF4
  5911                           prodl	equ	0xFF3
  5912                           intcon	equ	0xFF2
  5913                           postinc0	equ	0xFEE
  5914                           wreg	equ	0xFE8
  5915                           postdec1	equ	0xFE5
  5916                           fsr1h	equ	0xFE2
  5917                           fsr1l	equ	0xFE1
  5918                           indf2	equ	0xFDF
  5919                           postinc2	equ	0xFDE
  5920                           postdec2	equ	0xFDD
  5921                           plusw2	equ	0xFDB
  5922                           fsr2h	equ	0xFDA
  5923                           fsr2l	equ	0xFD9
  5924                           status	equ	0xFD8
  5925                           
  5926 ;; *************** function _Delay *****************
  5927 ;; Defined at:
  5928 ;;		line 17 in file "Functions.c"
  5929 ;; Parameters:    Size  Location     Type
  5930 ;;  wait            2   26[COMRAM] int 
  5931 ;; Auto vars:     Size  Location     Type
  5932 ;;  i               2   29[COMRAM] int 
  5933 ;; Return value:  Size  Location     Type
  5934 ;;                  1    wreg      void 
  5935 ;; Registers used:
  5936 ;;		wreg, status,2, status,0
  5937 ;; Tracked objects:
  5938 ;;		On entry : 0/0
  5939 ;;		On exit  : 0/0
  5940 ;;		Unchanged: 0/0
  5941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5942 ;;      Params:         2       0       0       0       0       0       0
  5943 ;;      Locals:         2       0       0       0       0       0       0
  5944 ;;      Temps:          1       0       0       0       0       0       0
  5945 ;;      Totals:         5       0       0       0       0       0       0
  5946 ;;Total ram usage:        5 bytes
  5947 ;; Hardware stack levels used:    1
  5948 ;; Hardware stack levels required when called:    4
  5949 ;; This function calls:
  5950 ;;		Nothing
  5951 ;; This function is called by:
  5952 ;;		_respondChargerAsECU
  5953 ;;		_SetBMM
  5954 ;;		_Precharge
  5955 ;;		_Horn
  5956 ;;		_NokiaStart
  5957 ;; This function uses a non-reentrant model
  5958 ;;
  5959                           
  5960                           	psect	text28
  5961  00158C                     __ptext28:
  5962                           	opt stack 0
  5963  00158C                     _Delay:
  5964                           	opt stack 24
  5965                           
  5966                           ;Functions.c: 18: int i = 0;
  5967                           
  5968                           ;incstack = 0
  5969  00158C  0E00               	movlw	0
  5970  00158E  6E1F               	movwf	Delay@i+1,c
  5971  001590  0E00               	movlw	0
  5972  001592  6E1E               	movwf	Delay@i,c
  5973                           
  5974                           ;Functions.c: 19: for (; wait > i; i++) {
  5975  001594  D00A               	goto	l690
  5976  001596                     l3055:
  5977                           
  5978                           ;Functions.c: 20: _delay((unsigned long)((1)*(16000000/4000.0)));
  5979  001596  0E06               	movlw	6
  5980  001598  6E1D               	movwf	??_Delay& (0+255),c
  5981  00159A  0E30               	movlw	48
  5982  00159C                     u4517:
  5983  00159C  2EE8               	decfsz	wreg,f,c
  5984  00159E  D7FE               	goto	u4517
  5985  0015A0  2E1D               	decfsz	??_Delay& (0+255),f,c
  5986  0015A2  D7FC               	goto	u4517
  5987  0015A4  D000               	nop2	
  5988  0015A6  4A1E               	infsnz	Delay@i,f,c
  5989  0015A8  2A1F               	incf	Delay@i+1,f,c
  5990  0015AA                     l690:
  5991  0015AA  501B               	movf	Delay@wait,w,c
  5992  0015AC  5C1E               	subwf	Delay@i,w,c
  5993  0015AE  501F               	movf	Delay@i+1,w,c
  5994  0015B0  0A80               	xorlw	128
  5995  0015B2  6E1D               	movwf	??_Delay& (0+255),c
  5996  0015B4  501C               	movf	Delay@wait+1,w,c
  5997  0015B6  0A80               	xorlw	128
  5998  0015B8  581D               	subwfb	??_Delay& (0+255),w,c
  5999  0015BA  B0D8               	btfsc	status,0,c
  6000  0015BC  0012               	return	
  6001  0015BE  D7EB               	goto	l3055
  6002  0015C0                     __end_of_Delay:
  6003                           	opt stack 0
  6004                           tosu	equ	0xFFF
  6005                           tosh	equ	0xFFE
  6006                           tosl	equ	0xFFD
  6007                           pclath	equ	0xFFA
  6008                           tblptru	equ	0xFF8
  6009                           tblptrh	equ	0xFF7
  6010                           tblptrl	equ	0xFF6
  6011                           tablat	equ	0xFF5
  6012                           prodh	equ	0xFF4
  6013                           prodl	equ	0xFF3
  6014                           intcon	equ	0xFF2
  6015                           postinc0	equ	0xFEE
  6016                           wreg	equ	0xFE8
  6017                           postdec1	equ	0xFE5
  6018                           fsr1h	equ	0xFE2
  6019                           fsr1l	equ	0xFE1
  6020                           indf2	equ	0xFDF
  6021                           postinc2	equ	0xFDE
  6022                           postdec2	equ	0xFDD
  6023                           plusw2	equ	0xFDB
  6024                           fsr2h	equ	0xFDA
  6025                           fsr2l	equ	0xFD9
  6026                           status	equ	0xFD8
  6027                           
  6028 ;; *************** function _SYSTEM_Initialize *****************
  6029 ;; Defined at:
  6030 ;;		line 69 in file "mcc_generated_files/mcc.c"
  6031 ;; Parameters:    Size  Location     Type
  6032 ;;		None
  6033 ;; Auto vars:     Size  Location     Type
  6034 ;;		None
  6035 ;; Return value:  Size  Location     Type
  6036 ;;                  1    wreg      void 
  6037 ;; Registers used:
  6038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6039 ;; Tracked objects:
  6040 ;;		On entry : 0/0
  6041 ;;		On exit  : 0/0
  6042 ;;		Unchanged: 0/0
  6043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6044 ;;      Params:         0       0       0       0       0       0       0
  6045 ;;      Locals:         0       0       0       0       0       0       0
  6046 ;;      Temps:          0       0       0       0       0       0       0
  6047 ;;      Totals:         0       0       0       0       0       0       0
  6048 ;;Total ram usage:        0 bytes
  6049 ;; Hardware stack levels used:    1
  6050 ;; Hardware stack levels required when called:    8
  6051 ;; This function calls:
  6052 ;;		_CommsStart
  6053 ;;		_EUSART2_Initialize
  6054 ;;		_INTERRUPT_Initialize
  6055 ;;		_OSCILLATOR_Initialize
  6056 ;;		_PIN_MANAGER_Initialize
  6057 ;;		_TMR0_Initialize
  6058 ;; This function is called by:
  6059 ;;		_main
  6060 ;; This function uses a non-reentrant model
  6061 ;;
  6062                           
  6063                           	psect	text29
  6064  001872                     __ptext29:
  6065                           	opt stack 0
  6066  001872                     _SYSTEM_Initialize:
  6067                           	opt stack 22
  6068                           
  6069                           ;mcc.c: 70: OSCILLATOR_Initialize();
  6070                           
  6071                           ;incstack = 0
  6072  001872  EC95  F00C         	call	_OSCILLATOR_Initialize	;wreg free
  6073                           
  6074                           ;mcc.c: 71: PIN_MANAGER_Initialize();
  6075  001876  EC09  F009         	call	_PIN_MANAGER_Initialize	;wreg free
  6076                           
  6077                           ;mcc.c: 72: INTERRUPT_Initialize();
  6078  00187A  EC9C  F00C         	call	_INTERRUPT_Initialize	;wreg free
  6079                           
  6080                           ;mcc.c: 73: EUSART2_Initialize();
  6081  00187E  ECE0  F00A         	call	_EUSART2_Initialize	;wreg free
  6082                           
  6083                           ;mcc.c: 74: TMR0_Initialize();
  6084  001882  EC59  F00B         	call	_TMR0_Initialize	;wreg free
  6085                           
  6086                           ;mcc.c: 75: CommsStart();
  6087  001886  EC19  F00A         	call	_CommsStart	;wreg free
  6088  00188A  0012               	return		;funcret
  6089  00188C                     __end_of_SYSTEM_Initialize:
  6090                           	opt stack 0
  6091                           tosu	equ	0xFFF
  6092                           tosh	equ	0xFFE
  6093                           tosl	equ	0xFFD
  6094                           pclath	equ	0xFFA
  6095                           tblptru	equ	0xFF8
  6096                           tblptrh	equ	0xFF7
  6097                           tblptrl	equ	0xFF6
  6098                           tablat	equ	0xFF5
  6099                           prodh	equ	0xFF4
  6100                           prodl	equ	0xFF3
  6101                           intcon	equ	0xFF2
  6102                           postinc0	equ	0xFEE
  6103                           wreg	equ	0xFE8
  6104                           postdec1	equ	0xFE5
  6105                           fsr1h	equ	0xFE2
  6106                           fsr1l	equ	0xFE1
  6107                           indf2	equ	0xFDF
  6108                           postinc2	equ	0xFDE
  6109                           postdec2	equ	0xFDD
  6110                           plusw2	equ	0xFDB
  6111                           fsr2h	equ	0xFDA
  6112                           fsr2l	equ	0xFD9
  6113                           status	equ	0xFD8
  6114                           
  6115 ;; *************** function _TMR0_Initialize *****************
  6116 ;; Defined at:
  6117 ;;		line 69 in file "mcc_generated_files/tmr0.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;		None
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;		None
  6122 ;; Return value:  Size  Location     Type
  6123 ;;                  2  190[None  ] int 
  6124 ;; Registers used:
  6125 ;;		wreg, status,2, status,0, cstack
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6131 ;;      Params:         0       0       0       0       0       0       0
  6132 ;;      Locals:         0       0       0       0       0       0       0
  6133 ;;      Temps:          2       0       0       0       0       0       0
  6134 ;;      Totals:         2       0       0       0       0       0       0
  6135 ;;Total ram usage:        2 bytes
  6136 ;; Hardware stack levels used:    1
  6137 ;; Hardware stack levels required when called:    5
  6138 ;; This function calls:
  6139 ;;		_TMR0_StartTimer
  6140 ;; This function is called by:
  6141 ;;		_SYSTEM_Initialize
  6142 ;; This function uses a non-reentrant model
  6143 ;;
  6144                           
  6145                           	psect	text30
  6146  0016B2                     __ptext30:
  6147                           	opt stack 0
  6148  0016B2                     _TMR0_Initialize:
  6149                           	opt stack 24
  6150                           
  6151                           ;tmr0.c: 74: T0CON = 0x94;
  6152                           
  6153                           ;incstack = 0
  6154  0016B2  0E94               	movlw	148
  6155  0016B4  6ED5               	movwf	4053,c	;volatile
  6156                           
  6157                           ;tmr0.c: 76: TMR0H = 0xCF;
  6158  0016B6  0ECF               	movlw	207
  6159  0016B8  6ED7               	movwf	4055,c	;volatile
  6160                           
  6161                           ;tmr0.c: 78: TMR0L = 0x2C;
  6162  0016BA  0E2C               	movlw	44
  6163  0016BC  6ED6               	movwf	4054,c	;volatile
  6164                           
  6165                           ;tmr0.c: 81: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
  6166  0016BE  50D6               	movf	4054,w,c	;volatile
  6167  0016C0  CFD7 F01B          	movff	4055,??_TMR0_Initialize	;volatile
  6168  0016C4  6A1C               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  6169  0016C6  C01B  F01C         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  6170  0016CA  6A1B               	clrf	??_TMR0_Initialize,c
  6171  0016CC  101B               	iorwf	??_TMR0_Initialize,w,c
  6172  0016CE  6E40               	movwf	_timer0ReloadVal16bit,c
  6173  0016D0  501C               	movf	??_TMR0_Initialize+1,w,c
  6174  0016D2  6E41               	movwf	_timer0ReloadVal16bit+1,c
  6175                           
  6176                           ;tmr0.c: 84: INTCONbits.TMR0IF = 0;
  6177  0016D4  94F2               	bcf	intcon,2,c	;volatile
  6178                           
  6179                           ;tmr0.c: 87: INTCONbits.TMR0IE = 1;
  6180  0016D6  8AF2               	bsf	intcon,5,c	;volatile
  6181                           
  6182                           ;tmr0.c: 90: TMR0_StartTimer();
  6183  0016D8  ECA2  F00C         	call	_TMR0_StartTimer	;wreg free
  6184  0016DC  0012               	return		;funcret
  6185  0016DE                     __end_of_TMR0_Initialize:
  6186                           	opt stack 0
  6187                           tosu	equ	0xFFF
  6188                           tosh	equ	0xFFE
  6189                           tosl	equ	0xFFD
  6190                           pclath	equ	0xFFA
  6191                           tblptru	equ	0xFF8
  6192                           tblptrh	equ	0xFF7
  6193                           tblptrl	equ	0xFF6
  6194                           tablat	equ	0xFF5
  6195                           prodh	equ	0xFF4
  6196                           prodl	equ	0xFF3
  6197                           intcon	equ	0xFF2
  6198                           postinc0	equ	0xFEE
  6199                           wreg	equ	0xFE8
  6200                           postdec1	equ	0xFE5
  6201                           fsr1h	equ	0xFE2
  6202                           fsr1l	equ	0xFE1
  6203                           indf2	equ	0xFDF
  6204                           postinc2	equ	0xFDE
  6205                           postdec2	equ	0xFDD
  6206                           plusw2	equ	0xFDB
  6207                           fsr2h	equ	0xFDA
  6208                           fsr2l	equ	0xFD9
  6209                           status	equ	0xFD8
  6210                           
  6211 ;; *************** function _TMR0_StartTimer *****************
  6212 ;; Defined at:
  6213 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;		None
  6216 ;; Auto vars:     Size  Location     Type
  6217 ;;		None
  6218 ;; Return value:  Size  Location     Type
  6219 ;;                  1    wreg      void 
  6220 ;; Registers used:
  6221 ;;		None
  6222 ;; Tracked objects:
  6223 ;;		On entry : 0/0
  6224 ;;		On exit  : 0/0
  6225 ;;		Unchanged: 0/0
  6226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6227 ;;      Params:         0       0       0       0       0       0       0
  6228 ;;      Locals:         0       0       0       0       0       0       0
  6229 ;;      Temps:          0       0       0       0       0       0       0
  6230 ;;      Totals:         0       0       0       0       0       0       0
  6231 ;;Total ram usage:        0 bytes
  6232 ;; Hardware stack levels used:    1
  6233 ;; Hardware stack levels required when called:    4
  6234 ;; This function calls:
  6235 ;;		Nothing
  6236 ;; This function is called by:
  6237 ;;		_TMR0_Initialize
  6238 ;; This function uses a non-reentrant model
  6239 ;;
  6240                           
  6241                           	psect	text31
  6242  001944                     __ptext31:
  6243                           	opt stack 0
  6244  001944                     _TMR0_StartTimer:
  6245                           	opt stack 24
  6246                           
  6247                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  6248                           
  6249                           ;incstack = 0
  6250  001944  8ED5               	bsf	4053,7,c	;volatile
  6251  001946  0012               	return		;funcret
  6252  001948                     __end_of_TMR0_StartTimer:
  6253                           	opt stack 0
  6254                           tosu	equ	0xFFF
  6255                           tosh	equ	0xFFE
  6256                           tosl	equ	0xFFD
  6257                           pclath	equ	0xFFA
  6258                           tblptru	equ	0xFF8
  6259                           tblptrh	equ	0xFF7
  6260                           tblptrl	equ	0xFF6
  6261                           tablat	equ	0xFF5
  6262                           prodh	equ	0xFF4
  6263                           prodl	equ	0xFF3
  6264                           intcon	equ	0xFF2
  6265                           postinc0	equ	0xFEE
  6266                           wreg	equ	0xFE8
  6267                           postdec1	equ	0xFE5
  6268                           fsr1h	equ	0xFE2
  6269                           fsr1l	equ	0xFE1
  6270                           indf2	equ	0xFDF
  6271                           postinc2	equ	0xFDE
  6272                           postdec2	equ	0xFDD
  6273                           plusw2	equ	0xFDB
  6274                           fsr2h	equ	0xFDA
  6275                           fsr2l	equ	0xFD9
  6276                           status	equ	0xFD8
  6277                           
  6278 ;; *************** function _PIN_MANAGER_Initialize *****************
  6279 ;; Defined at:
  6280 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  6281 ;; Parameters:    Size  Location     Type
  6282 ;;		None
  6283 ;; Auto vars:     Size  Location     Type
  6284 ;;		None
  6285 ;; Return value:  Size  Location     Type
  6286 ;;                  1    wreg      void 
  6287 ;; Registers used:
  6288 ;;		wreg, status,2
  6289 ;; Tracked objects:
  6290 ;;		On entry : 0/0
  6291 ;;		On exit  : 0/0
  6292 ;;		Unchanged: 0/0
  6293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6294 ;;      Params:         0       0       0       0       0       0       0
  6295 ;;      Locals:         0       0       0       0       0       0       0
  6296 ;;      Temps:          0       0       0       0       0       0       0
  6297 ;;      Totals:         0       0       0       0       0       0       0
  6298 ;;Total ram usage:        0 bytes
  6299 ;; Hardware stack levels used:    1
  6300 ;; Hardware stack levels required when called:    4
  6301 ;; This function calls:
  6302 ;;		Nothing
  6303 ;; This function is called by:
  6304 ;;		_SYSTEM_Initialize
  6305 ;; This function uses a non-reentrant model
  6306 ;;
  6307                           
  6308                           	psect	text32
  6309  001212                     __ptext32:
  6310                           	opt stack 0
  6311  001212                     _PIN_MANAGER_Initialize:
  6312                           	opt stack 25
  6313                           
  6314                           ;pin_manager.c: 51: LATB = 0x0;
  6315                           
  6316                           ;incstack = 0
  6317  001212  0E00               	movlw	0
  6318  001214  6E8A               	movwf	3978,c	;volatile
  6319                           
  6320                           ;pin_manager.c: 52: LATA = 0x0;
  6321  001216  0E00               	movlw	0
  6322  001218  6E89               	movwf	3977,c	;volatile
  6323                           
  6324                           ;pin_manager.c: 53: ANSELE = 0x7;
  6325  00121A  0E07               	movlw	7
  6326  00121C  010F               	movlb	15	; () banked
  6327  00121E  6F3C               	movwf	60,b	;volatile
  6328                           
  6329                           ;pin_manager.c: 54: LATE = 0x0;
  6330  001220  0E00               	movlw	0
  6331  001222  6E8D               	movwf	3981,c	;volatile
  6332                           
  6333                           ;pin_manager.c: 55: LATD = 0x0;
  6334  001224  0E00               	movlw	0
  6335  001226  6E8C               	movwf	3980,c	;volatile
  6336                           
  6337                           ;pin_manager.c: 56: LATC = 0x0;
  6338  001228  0E00               	movlw	0
  6339  00122A  6E8B               	movwf	3979,c	;volatile
  6340                           
  6341                           ;pin_manager.c: 57: ANSELA = 0x2F;
  6342  00122C  0E2F               	movlw	47
  6343  00122E  010F               	movlb	15	; () banked
  6344  001230  6F38               	movwf	56,b	;volatile
  6345                           
  6346                           ;pin_manager.c: 58: ANSELB = 0x3F;
  6347  001232  0E3F               	movlw	63
  6348  001234  010F               	movlb	15	; () banked
  6349  001236  6F39               	movwf	57,b	;volatile
  6350                           
  6351                           ;pin_manager.c: 59: ANSELC = 0xEC;
  6352  001238  0EEC               	movlw	236
  6353  00123A  010F               	movlb	15	; () banked
  6354  00123C  6F3A               	movwf	58,b	;volatile
  6355                           
  6356                           ;pin_manager.c: 60: ANSELD = 0x3F;
  6357  00123E  0E3F               	movlw	63
  6358  001240  010F               	movlb	15	; () banked
  6359  001242  6F3B               	movwf	59,b	;volatile
  6360                           
  6361                           ;pin_manager.c: 61: WPUB = 0xFC;
  6362  001244  0EFC               	movlw	252
  6363  001246  6E61               	movwf	3937,c	;volatile
  6364                           
  6365                           ;pin_manager.c: 62: TRISD = 0xF2;
  6366  001248  0EF2               	movlw	242
  6367  00124A  6E95               	movwf	3989,c	;volatile
  6368                           
  6369                           ;pin_manager.c: 63: TRISE = 0x7;
  6370  00124C  0E07               	movlw	7
  6371  00124E  6E96               	movwf	3990,c	;volatile
  6372                           
  6373                           ;pin_manager.c: 64: TRISB = 0xC4;
  6374  001250  0EC4               	movlw	196
  6375  001252  6E93               	movwf	3987,c	;volatile
  6376                           
  6377                           ;pin_manager.c: 65: TRISC = 0xD4;
  6378  001254  0ED4               	movlw	212
  6379  001256  6E94               	movwf	3988,c	;volatile
  6380                           
  6381                           ;pin_manager.c: 66: TRISA = 0x37;
  6382  001258  0E37               	movlw	55
  6383  00125A  6E92               	movwf	3986,c	;volatile
  6384                           
  6385                           ; BSR set to: 15
  6386                           ;pin_manager.c: 68: INTCON2bits.nRBPU = 0x0;
  6387  00125C  9EF1               	bcf	intcon2,7,c	;volatile
  6388                           
  6389                           ; BSR set to: 15
  6390                           
  6391                           ; BSR set to: 15
  6392                           
  6393                           ;pin_manager.c: 70: do { ANSB0 = 0; } while(0);
  6394  00125E  010F               	movlb	15	; () banked
  6395  001260  9139               	bcf	57,0,b	;volatile
  6396                           
  6397                           ; BSR set to: 15
  6398                           
  6399                           ; BSR set to: 15
  6400                           
  6401                           ;pin_manager.c: 71: do { ANSB1 = 0; } while(0);
  6402                           
  6403                           ; BSR set to: 15
  6404  001262  010F               	movlb	15	; () banked
  6405  001264  9339               	bcf	57,1,b	;volatile
  6406                           
  6407                           ; BSR set to: 15
  6408                           
  6409                           ; BSR set to: 15
  6410                           
  6411                           ;pin_manager.c: 73: do { TRISB0 = 0; } while(0);
  6412                           
  6413                           ; BSR set to: 15
  6414  001266  9093               	bcf	3987,0,c	;volatile
  6415                           
  6416                           ; BSR set to: 15
  6417                           
  6418                           ; BSR set to: 15
  6419                           
  6420                           ;pin_manager.c: 74: do { TRISB1 = 0; } while(0);
  6421                           
  6422                           ; BSR set to: 15
  6423  001268  9293               	bcf	3987,1,c	;volatile
  6424                           
  6425                           ; BSR set to: 15
  6426                           ;pin_manager.c: 78: INTCONbits.RBIE = 0;
  6427                           
  6428                           ; BSR set to: 15
  6429  00126A  96F2               	bcf	intcon,3,c	;volatile
  6430                           
  6431                           ;pin_manager.c: 80: ANSELC = 0;
  6432  00126C  0E00               	movlw	0
  6433  00126E  010F               	movlb	15	; () banked
  6434  001270  6F3A               	movwf	58,b	;volatile
  6435                           
  6436                           ;pin_manager.c: 81: ANSELA = 0;
  6437  001272  0E00               	movlw	0
  6438  001274  010F               	movlb	15	; () banked
  6439  001276  6F38               	movwf	56,b	;volatile
  6440                           
  6441                           ; BSR set to: 15
  6442                           ;pin_manager.c: 82: TRISCbits.TRISC0=0;
  6443  001278  9094               	bcf	3988,0,c	;volatile
  6444                           
  6445                           ; BSR set to: 15
  6446                           ;pin_manager.c: 83: TRISCbits.TRISC1=0;
  6447  00127A  9294               	bcf	3988,1,c	;volatile
  6448                           
  6449                           ; BSR set to: 15
  6450                           ;pin_manager.c: 84: TRISCbits.TRISC2=0;
  6451  00127C  9494               	bcf	3988,2,c	;volatile
  6452                           
  6453                           ; BSR set to: 15
  6454                           ;pin_manager.c: 85: TRISAbits.TRISA6=0;
  6455  00127E  9C92               	bcf	3986,6,c	;volatile
  6456                           
  6457                           ; BSR set to: 15
  6458                           ;pin_manager.c: 86: TRISAbits.TRISA7=0;
  6459  001280  9E92               	bcf	3986,7,c	;volatile
  6460                           
  6461                           ; BSR set to: 15
  6462                           ;pin_manager.c: 87: TRISBbits.TRISB3=0;
  6463  001282  9693               	bcf	3987,3,c	;volatile
  6464                           
  6465                           ; BSR set to: 15
  6466                           ;pin_manager.c: 88: TRISBbits.TRISB4=0;
  6467  001284  9893               	bcf	3987,4,c	;volatile
  6468                           
  6469                           ; BSR set to: 15
  6470                           ;pin_manager.c: 89: TRISBbits.TRISB5=0;
  6471  001286  9A93               	bcf	3987,5,c	;volatile
  6472                           
  6473                           ; BSR set to: 15
  6474                           ;pin_manager.c: 90: TRISDbits.TRISD4 = 0;
  6475  001288  9895               	bcf	3989,4,c	;volatile
  6476                           
  6477                           ; BSR set to: 15
  6478                           ;pin_manager.c: 92: LATBbits.LATB3=0;
  6479  00128A  968A               	bcf	3978,3,c	;volatile
  6480                           
  6481                           ; BSR set to: 15
  6482                           ;pin_manager.c: 93: LATBbits.LATB5=0;
  6483  00128C  9A8A               	bcf	3978,5,c	;volatile
  6484                           
  6485                           ; BSR set to: 15
  6486                           ;pin_manager.c: 94: LATBbits.LATB4=0;
  6487  00128E  988A               	bcf	3978,4,c	;volatile
  6488                           
  6489                           ; BSR set to: 15
  6490  001290  0012               	return		;funcret
  6491  001292                     __end_of_PIN_MANAGER_Initialize:
  6492                           	opt stack 0
  6493                           tosu	equ	0xFFF
  6494                           tosh	equ	0xFFE
  6495                           tosl	equ	0xFFD
  6496                           pclath	equ	0xFFA
  6497                           tblptru	equ	0xFF8
  6498                           tblptrh	equ	0xFF7
  6499                           tblptrl	equ	0xFF6
  6500                           tablat	equ	0xFF5
  6501                           prodh	equ	0xFF4
  6502                           prodl	equ	0xFF3
  6503                           intcon	equ	0xFF2
  6504                           intcon2	equ	0xFF1
  6505                           postinc0	equ	0xFEE
  6506                           wreg	equ	0xFE8
  6507                           postdec1	equ	0xFE5
  6508                           fsr1h	equ	0xFE2
  6509                           fsr1l	equ	0xFE1
  6510                           indf2	equ	0xFDF
  6511                           postinc2	equ	0xFDE
  6512                           postdec2	equ	0xFDD
  6513                           plusw2	equ	0xFDB
  6514                           fsr2h	equ	0xFDA
  6515                           fsr2l	equ	0xFD9
  6516                           status	equ	0xFD8
  6517                           
  6518 ;; *************** function _OSCILLATOR_Initialize *****************
  6519 ;; Defined at:
  6520 ;;		line 78 in file "mcc_generated_files/mcc.c"
  6521 ;; Parameters:    Size  Location     Type
  6522 ;;		None
  6523 ;; Auto vars:     Size  Location     Type
  6524 ;;		None
  6525 ;; Return value:  Size  Location     Type
  6526 ;;                  1    wreg      void 
  6527 ;; Registers used:
  6528 ;;		wreg, status,2
  6529 ;; Tracked objects:
  6530 ;;		On entry : 0/0
  6531 ;;		On exit  : 0/0
  6532 ;;		Unchanged: 0/0
  6533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6534 ;;      Params:         0       0       0       0       0       0       0
  6535 ;;      Locals:         0       0       0       0       0       0       0
  6536 ;;      Temps:          0       0       0       0       0       0       0
  6537 ;;      Totals:         0       0       0       0       0       0       0
  6538 ;;Total ram usage:        0 bytes
  6539 ;; Hardware stack levels used:    1
  6540 ;; Hardware stack levels required when called:    4
  6541 ;; This function calls:
  6542 ;;		Nothing
  6543 ;; This function is called by:
  6544 ;;		_SYSTEM_Initialize
  6545 ;; This function uses a non-reentrant model
  6546 ;;
  6547                           
  6548                           	psect	text33
  6549  00192A                     __ptext33:
  6550                           	opt stack 0
  6551  00192A                     _OSCILLATOR_Initialize:
  6552                           	opt stack 25
  6553                           
  6554                           ;mcc.c: 80: OSCCON = 0x70;
  6555                           
  6556                           ; BSR set to: 15
  6557                           ;incstack = 0
  6558  00192A  0E70               	movlw	112
  6559  00192C  6ED3               	movwf	4051,c	;volatile
  6560                           
  6561                           ;mcc.c: 82: OSCCON2 = 0x04;
  6562  00192E  0E04               	movlw	4
  6563  001930  6ED2               	movwf	4050,c	;volatile
  6564                           
  6565                           ;mcc.c: 84: OSCTUNE = 0x00;
  6566  001932  0E00               	movlw	0
  6567  001934  6E9B               	movwf	3995,c	;volatile
  6568  001936  0012               	return		;funcret
  6569  001938                     __end_of_OSCILLATOR_Initialize:
  6570                           	opt stack 0
  6571                           tosu	equ	0xFFF
  6572                           tosh	equ	0xFFE
  6573                           tosl	equ	0xFFD
  6574                           pclath	equ	0xFFA
  6575                           tblptru	equ	0xFF8
  6576                           tblptrh	equ	0xFF7
  6577                           tblptrl	equ	0xFF6
  6578                           tablat	equ	0xFF5
  6579                           prodh	equ	0xFF4
  6580                           prodl	equ	0xFF3
  6581                           intcon	equ	0xFF2
  6582                           intcon2	equ	0xFF1
  6583                           postinc0	equ	0xFEE
  6584                           wreg	equ	0xFE8
  6585                           postdec1	equ	0xFE5
  6586                           fsr1h	equ	0xFE2
  6587                           fsr1l	equ	0xFE1
  6588                           indf2	equ	0xFDF
  6589                           postinc2	equ	0xFDE
  6590                           postdec2	equ	0xFDD
  6591                           plusw2	equ	0xFDB
  6592                           fsr2h	equ	0xFDA
  6593                           fsr2l	equ	0xFD9
  6594                           status	equ	0xFD8
  6595                           
  6596 ;; *************** function _INTERRUPT_Initialize *****************
  6597 ;; Defined at:
  6598 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;		None
  6601 ;; Auto vars:     Size  Location     Type
  6602 ;;		None
  6603 ;; Return value:  Size  Location     Type
  6604 ;;                  1    wreg      void 
  6605 ;; Registers used:
  6606 ;;		None
  6607 ;; Tracked objects:
  6608 ;;		On entry : 0/0
  6609 ;;		On exit  : 0/0
  6610 ;;		Unchanged: 0/0
  6611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6612 ;;      Params:         0       0       0       0       0       0       0
  6613 ;;      Locals:         0       0       0       0       0       0       0
  6614 ;;      Temps:          0       0       0       0       0       0       0
  6615 ;;      Totals:         0       0       0       0       0       0       0
  6616 ;;Total ram usage:        0 bytes
  6617 ;; Hardware stack levels used:    1
  6618 ;; Hardware stack levels required when called:    4
  6619 ;; This function calls:
  6620 ;;		Nothing
  6621 ;; This function is called by:
  6622 ;;		_SYSTEM_Initialize
  6623 ;; This function uses a non-reentrant model
  6624 ;;
  6625                           
  6626                           	psect	text34
  6627  001938                     __ptext34:
  6628                           	opt stack 0
  6629  001938                     _INTERRUPT_Initialize:
  6630                           	opt stack 25
  6631                           
  6632                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  6633                           
  6634                           ;incstack = 0
  6635  001938  9ED0               	bcf	4048,7,c	;volatile
  6636                           
  6637                           ;interrupt_manager.c: 59: IPR3bits.RC2IP = 0;
  6638  00193A  9AA5               	bcf	4005,5,c	;volatile
  6639                           
  6640                           ;interrupt_manager.c: 61: IPR3bits.TX2IP = 0;
  6641  00193C  98A5               	bcf	4005,4,c	;volatile
  6642                           
  6643                           ;interrupt_manager.c: 63: IPR1bits.RC1IP = 0;
  6644  00193E  9A9F               	bcf	3999,5,c	;volatile
  6645                           
  6646                           ;interrupt_manager.c: 65: IPR1bits.TX1IP = 0;
  6647  001940  989F               	bcf	3999,4,c	;volatile
  6648  001942  0012               	return		;funcret
  6649  001944                     __end_of_INTERRUPT_Initialize:
  6650                           	opt stack 0
  6651                           tosu	equ	0xFFF
  6652                           tosh	equ	0xFFE
  6653                           tosl	equ	0xFFD
  6654                           pclath	equ	0xFFA
  6655                           tblptru	equ	0xFF8
  6656                           tblptrh	equ	0xFF7
  6657                           tblptrl	equ	0xFF6
  6658                           tablat	equ	0xFF5
  6659                           prodh	equ	0xFF4
  6660                           prodl	equ	0xFF3
  6661                           intcon	equ	0xFF2
  6662                           intcon2	equ	0xFF1
  6663                           postinc0	equ	0xFEE
  6664                           wreg	equ	0xFE8
  6665                           postdec1	equ	0xFE5
  6666                           fsr1h	equ	0xFE2
  6667                           fsr1l	equ	0xFE1
  6668                           indf2	equ	0xFDF
  6669                           postinc2	equ	0xFDE
  6670                           postdec2	equ	0xFDD
  6671                           plusw2	equ	0xFDB
  6672                           fsr2h	equ	0xFDA
  6673                           fsr2l	equ	0xFD9
  6674                           status	equ	0xFD8
  6675                           
  6676 ;; *************** function _EUSART2_Initialize *****************
  6677 ;; Defined at:
  6678 ;;		line 76 in file "mcc_generated_files/eusart2.c"
  6679 ;; Parameters:    Size  Location     Type
  6680 ;;		None
  6681 ;; Auto vars:     Size  Location     Type
  6682 ;;		None
  6683 ;; Return value:  Size  Location     Type
  6684 ;;                  1    wreg      void 
  6685 ;; Registers used:
  6686 ;;		wreg, status,2
  6687 ;; Tracked objects:
  6688 ;;		On entry : 0/0
  6689 ;;		On exit  : 0/0
  6690 ;;		Unchanged: 0/0
  6691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6692 ;;      Params:         0       0       0       0       0       0       0
  6693 ;;      Locals:         0       0       0       0       0       0       0
  6694 ;;      Temps:          0       0       0       0       0       0       0
  6695 ;;      Totals:         0       0       0       0       0       0       0
  6696 ;;Total ram usage:        0 bytes
  6697 ;; Hardware stack levels used:    1
  6698 ;; Hardware stack levels required when called:    4
  6699 ;; This function calls:
  6700 ;;		Nothing
  6701 ;; This function is called by:
  6702 ;;		_SYSTEM_Initialize
  6703 ;; This function uses a non-reentrant model
  6704 ;;
  6705                           
  6706                           	psect	text35
  6707  0015C0                     __ptext35:
  6708                           	opt stack 0
  6709  0015C0                     _EUSART2_Initialize:
  6710                           	opt stack 25
  6711                           
  6712                           ;eusart2.c: 78: PIE1bits.RC1IE = 0;
  6713                           
  6714                           ;incstack = 0
  6715  0015C0  9A9D               	bcf	3997,5,c	;volatile
  6716                           
  6717                           ;eusart2.c: 79: PIE1bits.TX1IE = 0;
  6718  0015C2  989D               	bcf	3997,4,c	;volatile
  6719                           
  6720                           ;eusart2.c: 84: BAUD1CON = 0x48;
  6721  0015C4  0E48               	movlw	72
  6722  0015C6  6EB8               	movwf	4024,c	;volatile
  6723                           
  6724                           ;eusart2.c: 87: RC1STA = 0x90;
  6725  0015C8  0E90               	movlw	144
  6726  0015CA  6EAB               	movwf	4011,c	;volatile
  6727                           
  6728                           ;eusart2.c: 90: TX1STA = 0x26;
  6729  0015CC  0E26               	movlw	38
  6730  0015CE  6EAC               	movwf	4012,c	;volatile
  6731                           
  6732                           ;eusart2.c: 93: SPBRG1 = 0x33;
  6733  0015D0  0E33               	movlw	51
  6734  0015D2  6EAF               	movwf	4015,c	;volatile
  6735                           
  6736                           ;eusart2.c: 96: SPBRGH1 = 0x00;
  6737  0015D4  0E00               	movlw	0
  6738  0015D6  6EB0               	movwf	4016,c	;volatile
  6739                           
  6740                           ;eusart2.c: 100: eusart1TxHead = 0;
  6741  0015D8  0E00               	movlw	0
  6742  0015DA  6E33               	movwf	_eusart1TxHead,c
  6743                           
  6744                           ;eusart2.c: 101: eusart1TxTail = 0;
  6745  0015DC  0E00               	movlw	0
  6746  0015DE  6E34               	movwf	_eusart1TxTail,c
  6747                           
  6748                           ;eusart2.c: 102: eusart1TxBufferRemaining = sizeof (eusart1TxBuffer);
  6749  0015E0  0E08               	movlw	8
  6750  0015E2  6E42               	movwf	_eusart1TxBufferRemaining,c	;volatile
  6751                           
  6752                           ;eusart2.c: 104: eusart1RxHead = 0;
  6753  0015E4  0E00               	movlw	0
  6754  0015E6  6E31               	movwf	_eusart1RxHead,c
  6755                           
  6756                           ;eusart2.c: 105: eusart1RxTail = 0;
  6757  0015E8  0E00               	movlw	0
  6758  0015EA  6E32               	movwf	_eusart1RxTail,c
  6759                           
  6760                           ;eusart2.c: 106: eusart1RxCount = 0;
  6761  0015EC  0E00               	movlw	0
  6762  0015EE  6E30               	movwf	_eusart1RxCount,c	;volatile
  6763                           
  6764                           ;eusart2.c: 109: PIE1bits.RC1IE = 1;
  6765  0015F0  8A9D               	bsf	3997,5,c	;volatile
  6766  0015F2  0012               	return		;funcret
  6767  0015F4                     __end_of_EUSART2_Initialize:
  6768                           	opt stack 0
  6769                           tosu	equ	0xFFF
  6770                           tosh	equ	0xFFE
  6771                           tosl	equ	0xFFD
  6772                           pclath	equ	0xFFA
  6773                           tblptru	equ	0xFF8
  6774                           tblptrh	equ	0xFF7
  6775                           tblptrl	equ	0xFF6
  6776                           tablat	equ	0xFF5
  6777                           prodh	equ	0xFF4
  6778                           prodl	equ	0xFF3
  6779                           intcon	equ	0xFF2
  6780                           intcon2	equ	0xFF1
  6781                           postinc0	equ	0xFEE
  6782                           wreg	equ	0xFE8
  6783                           postdec1	equ	0xFE5
  6784                           fsr1h	equ	0xFE2
  6785                           fsr1l	equ	0xFE1
  6786                           indf2	equ	0xFDF
  6787                           postinc2	equ	0xFDE
  6788                           postdec2	equ	0xFDD
  6789                           plusw2	equ	0xFDB
  6790                           fsr2h	equ	0xFDA
  6791                           fsr2l	equ	0xFD9
  6792                           status	equ	0xFD8
  6793                           
  6794 ;; *************** function _CommsStart *****************
  6795 ;; Defined at:
  6796 ;;		line 16 in file "Communications.c"
  6797 ;; Parameters:    Size  Location     Type
  6798 ;;		None
  6799 ;; Auto vars:     Size  Location     Type
  6800 ;;		None
  6801 ;; Return value:  Size  Location     Type
  6802 ;;                  1    wreg      void 
  6803 ;; Registers used:
  6804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6805 ;; Tracked objects:
  6806 ;;		On entry : 0/0
  6807 ;;		On exit  : 0/0
  6808 ;;		Unchanged: 0/0
  6809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6810 ;;      Params:         0       0       0       0       0       0       0
  6811 ;;      Locals:         0       0       0       0       0       0       0
  6812 ;;      Temps:          0       0       0       0       0       0       0
  6813 ;;      Totals:         0       0       0       0       0       0       0
  6814 ;;Total ram usage:        0 bytes
  6815 ;; Hardware stack levels used:    1
  6816 ;; Hardware stack levels required when called:    7
  6817 ;; This function calls:
  6818 ;;		_EUSART1_Initialize
  6819 ;;		_begin
  6820 ;; This function is called by:
  6821 ;;		_SYSTEM_Initialize
  6822 ;; This function uses a non-reentrant model
  6823 ;;
  6824                           
  6825                           	psect	text36
  6826  001432                     __ptext36:
  6827                           	opt stack 0
  6828  001432                     _CommsStart:
  6829                           	opt stack 22
  6830                           
  6831                           ;Communications.c: 17: begin(receiveArray, sizeof (receiveArray), 1, 0, Send_put, Receiv
      +                          e_get, Receive_available, Receive_peek);
  6832                           
  6833                           ;incstack = 0
  6834  001432  0ECE               	movlw	low _receiveArray
  6835  001434  0100               	movlb	0	; () banked
  6836  001436  6FC8               	movwf	begin@ptr& (0+255),b
  6837  001438  0E01               	movlw	high _receiveArray
  6838  00143A  0100               	movlb	0	; () banked
  6839  00143C  6FC9               	movwf	(begin@ptr+1)& (0+255),b
  6840  00143E  0E32               	movlw	50
  6841  001440  0100               	movlb	0	; () banked
  6842  001442  6FCA               	movwf	begin@maxSize& (0+255),b
  6843  001444  0E01               	movlw	1
  6844  001446  0100               	movlb	0	; () banked
  6845  001448  6FCB               	movwf	begin@givenAddress& (0+255),b
  6846  00144A  0E00               	movlw	0
  6847  00144C  0100               	movlb	0	; () banked
  6848  00144E  6FCC               	movwf	begin@error& (0+255),b
  6849  001450  0E26               	movlw	low _Send_put
  6850  001452  0100               	movlb	0	; () banked
  6851  001454  6FCD               	movwf	begin@stufftosend& (0+255),b
  6852  001456  0E16               	movlw	high _Send_put
  6853  001458  0100               	movlb	0	; () banked
  6854  00145A  6FCE               	movwf	(begin@stufftosend+1)& (0+255),b
  6855  00145C  0E1C               	movlw	low _Receive_get
  6856  00145E  0100               	movlb	0	; () banked
  6857  001460  6FCF               	movwf	begin@stufftoreceive& (0+255),b
  6858  001462  0E19               	movlw	high _Receive_get
  6859  001464  0100               	movlb	0	; () banked
  6860  001466  6FD0               	movwf	(begin@stufftoreceive+1)& (0+255),b
  6861  001468  0EBA               	movlw	low _Receive_available
  6862  00146A  0100               	movlb	0	; () banked
  6863  00146C  6FD1               	movwf	begin@stuffavailable& (0+255),b
  6864  00146E  0E18               	movlw	high _Receive_available
  6865  001470  0100               	movlb	0	; () banked
  6866  001472  6FD2               	movwf	(begin@stuffavailable+1)& (0+255),b
  6867  001474  0E0E               	movlw	low _Receive_peek
  6868  001476  0100               	movlb	0	; () banked
  6869  001478  6FD3               	movwf	begin@stuffpeek& (0+255),b
  6870  00147A  0E19               	movlw	high _Receive_peek
  6871  00147C  0100               	movlb	0	; () banked
  6872  00147E  6FD4               	movwf	(begin@stuffpeek+1)& (0+255),b
  6873  001480  ECE9  F009         	call	_begin	;wreg free
  6874                           
  6875                           ;Communications.c: 18: EUSART1_Initialize();
  6876  001484  EC8C  F00A         	call	_EUSART1_Initialize	;wreg free
  6877  001488  0012               	return		;funcret
  6878  00148A                     __end_of_CommsStart:
  6879                           	opt stack 0
  6880                           tosu	equ	0xFFF
  6881                           tosh	equ	0xFFE
  6882                           tosl	equ	0xFFD
  6883                           pclath	equ	0xFFA
  6884                           tblptru	equ	0xFF8
  6885                           tblptrh	equ	0xFF7
  6886                           tblptrl	equ	0xFF6
  6887                           tablat	equ	0xFF5
  6888                           prodh	equ	0xFF4
  6889                           prodl	equ	0xFF3
  6890                           intcon	equ	0xFF2
  6891                           intcon2	equ	0xFF1
  6892                           postinc0	equ	0xFEE
  6893                           wreg	equ	0xFE8
  6894                           postdec1	equ	0xFE5
  6895                           fsr1h	equ	0xFE2
  6896                           fsr1l	equ	0xFE1
  6897                           indf2	equ	0xFDF
  6898                           postinc2	equ	0xFDE
  6899                           postdec2	equ	0xFDD
  6900                           plusw2	equ	0xFDB
  6901                           fsr2h	equ	0xFDA
  6902                           fsr2l	equ	0xFD9
  6903                           status	equ	0xFD8
  6904                           
  6905 ;; *************** function _begin *****************
  6906 ;; Defined at:
  6907 ;;		line 73 in file "FastTransfer.c"
  6908 ;; Parameters:    Size  Location     Type
  6909 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  6910 ;;		 -> receiveArray(50), 
  6911 ;;  maxSize         1    2[BANK0 ] unsigned char 
  6912 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  6913 ;;  error           1    4[BANK0 ] unsigned char 
  6914 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  6915 ;;		 -> Send_put(1), 
  6916 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  6917 ;;		 -> Receive_get(1), 
  6918 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  6919 ;;		 -> Receive_available(2), 
  6920 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  6921 ;;		 -> Receive_peek(1), 
  6922 ;; Auto vars:     Size  Location     Type
  6923 ;;		None
  6924 ;; Return value:  Size  Location     Type
  6925 ;;                  1    wreg      void 
  6926 ;; Registers used:
  6927 ;;		wreg, status,2, status,0, cstack
  6928 ;; Tracked objects:
  6929 ;;		On entry : 0/0
  6930 ;;		On exit  : 0/0
  6931 ;;		Unchanged: 0/0
  6932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6933 ;;      Params:         0      13       0       0       0       0       0
  6934 ;;      Locals:         0       0       0       0       0       0       0
  6935 ;;      Temps:          0       0       0       0       0       0       0
  6936 ;;      Totals:         0      13       0       0       0       0       0
  6937 ;;Total ram usage:       13 bytes
  6938 ;; Hardware stack levels used:    1
  6939 ;; Hardware stack levels required when called:    5
  6940 ;; This function calls:
  6941 ;;		___awdiv
  6942 ;; This function is called by:
  6943 ;;		_CommsStart
  6944 ;; This function uses a non-reentrant model
  6945 ;;
  6946                           
  6947                           	psect	text37
  6948  0013D2                     __ptext37:
  6949                           	opt stack 0
  6950  0013D2                     _begin:
  6951                           	opt stack 23
  6952                           
  6953                           ;FastTransfer.c: 74: receiveArrayAddress = ptr;
  6954                           
  6955                           ;incstack = 0
  6956  0013D2  C0C8  F0E3         	movff	begin@ptr,_receiveArrayAddress
  6957  0013D6  C0C9  F0E4         	movff	begin@ptr+1,_receiveArrayAddress+1
  6958                           
  6959                           ;FastTransfer.c: 75: moduleAddress = givenAddress;
  6960  0013DA  C0CB  F043         	movff	begin@givenAddress,_moduleAddress
  6961                           
  6962                           ;FastTransfer.c: 76: serial_write = stufftosend;
  6963  0013DE  C0CD  F03E         	movff	begin@stufftosend,_serial_write
  6964  0013E2  C0CE  F03F         	movff	begin@stufftosend+1,_serial_write+1
  6965                           
  6966                           ;FastTransfer.c: 77: serial_available = stuffavailable;
  6967  0013E6  C0D1  F03A         	movff	begin@stuffavailable,_serial_available
  6968  0013EA  C0D2  F03B         	movff	begin@stuffavailable+1,_serial_available+1
  6969                           
  6970                           ;FastTransfer.c: 78: serial_peek = stuffpeek;
  6971  0013EE  C0D3  F0E7         	movff	begin@stuffpeek,_serial_peek
  6972  0013F2  C0D4  F0E8         	movff	begin@stuffpeek+1,_serial_peek+1
  6973                           
  6974                           ;FastTransfer.c: 79: serial_read = stufftoreceive;
  6975  0013F6  C0CF  F03C         	movff	begin@stufftoreceive,_serial_read
  6976  0013FA  C0D0  F03D         	movff	begin@stufftoreceive+1,_serial_read+1
  6977                           
  6978                           ;FastTransfer.c: 80: maxDataAddress = maxSize / 2;
  6979  0013FE  C0CA  F01B         	movff	begin@maxSize,___awdiv@dividend
  6980  001402  6A1C               	clrf	___awdiv@dividend+1,c
  6981  001404  0E00               	movlw	0
  6982  001406  6E1E               	movwf	___awdiv@divisor+1,c
  6983  001408  0E02               	movlw	2
  6984  00140A  6E1D               	movwf	___awdiv@divisor,c
  6985  00140C  ECC7  F008         	call	___awdiv	;wreg free
  6986  001410  501B               	movf	?___awdiv,w,c
  6987  001412  0100               	movlb	0	; () banked
  6988  001414  6FEA               	movwf	_maxDataAddress& (0+255),b
  6989                           
  6990                           ; BSR set to: 0
  6991                           ;FastTransfer.c: 81: sendStructAddress = (unsigned char*) & ring_buffer;
  6992  001416  0E00               	movlw	low _ring_buffer
  6993  001418  0100               	movlb	0	; () banked
  6994  00141A  6FE5               	movwf	_sendStructAddress& (0+255),b
  6995  00141C  0E01               	movlw	high _ring_buffer
  6996  00141E  0100               	movlb	0	; () banked
  6997  001420  6FE6               	movwf	(_sendStructAddress+1)& (0+255),b
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;FastTransfer.c: 82: AKNAKsend = error;
  7001  001422  C0CC  F0E9         	movff	begin@error,_AKNAKsend
  7002                           
  7003                           ; BSR set to: 0
  7004                           ;FastTransfer.c: 83: alignErrorCounter = 0;
  7005  001426  0E00               	movlw	0
  7006  001428  0100               	movlb	0	; () banked
  7007  00142A  6F8A               	movwf	(_alignErrorCounter+1)& (0+255),b
  7008  00142C  0E00               	movlw	0
  7009  00142E  6F89               	movwf	_alignErrorCounter& (0+255),b
  7010                           
  7011                           ; BSR set to: 0
  7012  001430  0012               	return		;funcret
  7013  001432                     __end_of_begin:
  7014                           	opt stack 0
  7015                           tosu	equ	0xFFF
  7016                           tosh	equ	0xFFE
  7017                           tosl	equ	0xFFD
  7018                           pclath	equ	0xFFA
  7019                           tblptru	equ	0xFF8
  7020                           tblptrh	equ	0xFF7
  7021                           tblptrl	equ	0xFF6
  7022                           tablat	equ	0xFF5
  7023                           prodh	equ	0xFF4
  7024                           prodl	equ	0xFF3
  7025                           intcon	equ	0xFF2
  7026                           intcon2	equ	0xFF1
  7027                           postinc0	equ	0xFEE
  7028                           wreg	equ	0xFE8
  7029                           postdec1	equ	0xFE5
  7030                           fsr1h	equ	0xFE2
  7031                           fsr1l	equ	0xFE1
  7032                           indf2	equ	0xFDF
  7033                           postinc2	equ	0xFDE
  7034                           postdec2	equ	0xFDD
  7035                           plusw2	equ	0xFDB
  7036                           fsr2h	equ	0xFDA
  7037                           fsr2l	equ	0xFD9
  7038                           status	equ	0xFD8
  7039                           
  7040 ;; *************** function ___awdiv *****************
  7041 ;; Defined at:
  7042 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  7043 ;; Parameters:    Size  Location     Type
  7044 ;;  dividend        2   26[COMRAM] int 
  7045 ;;  divisor         2   28[COMRAM] int 
  7046 ;; Auto vars:     Size  Location     Type
  7047 ;;  quotient        2   32[COMRAM] int 
  7048 ;;  sign            1   31[COMRAM] unsigned char 
  7049 ;;  counter         1   30[COMRAM] unsigned char 
  7050 ;; Return value:  Size  Location     Type
  7051 ;;                  2   26[COMRAM] int 
  7052 ;; Registers used:
  7053 ;;		wreg, status,2, status,0
  7054 ;; Tracked objects:
  7055 ;;		On entry : 0/0
  7056 ;;		On exit  : 0/0
  7057 ;;		Unchanged: 0/0
  7058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7059 ;;      Params:         4       0       0       0       0       0       0
  7060 ;;      Locals:         4       0       0       0       0       0       0
  7061 ;;      Temps:          0       0       0       0       0       0       0
  7062 ;;      Totals:         8       0       0       0       0       0       0
  7063 ;;Total ram usage:        8 bytes
  7064 ;; Hardware stack levels used:    1
  7065 ;; Hardware stack levels required when called:    4
  7066 ;; This function calls:
  7067 ;;		Nothing
  7068 ;; This function is called by:
  7069 ;;		_begin
  7070 ;; This function uses a non-reentrant model
  7071 ;;
  7072                           
  7073                           	psect	text38
  7074  00118E                     __ptext38:
  7075                           	opt stack 0
  7076  00118E                     ___awdiv:
  7077                           	opt stack 23
  7078                           
  7079                           ; BSR set to: 0
  7080                           ;incstack = 0
  7081  00118E  0E00               	movlw	0
  7082  001190  6E20               	movwf	___awdiv@sign,c
  7083  001192  AE1E               	btfss	___awdiv@divisor+1,7,c
  7084  001194  D006               	goto	l2783
  7085  001196  6C1D               	negf	___awdiv@divisor,c
  7086  001198  1E1E               	comf	___awdiv@divisor+1,f,c
  7087  00119A  B0D8               	btfsc	status,0,c
  7088  00119C  2A1E               	incf	___awdiv@divisor+1,f,c
  7089  00119E  0E01               	movlw	1
  7090  0011A0  6E20               	movwf	___awdiv@sign,c
  7091  0011A2                     l2783:
  7092  0011A2  AE1C               	btfss	___awdiv@dividend+1,7,c
  7093  0011A4  D006               	goto	l2789
  7094  0011A6  6C1B               	negf	___awdiv@dividend,c
  7095  0011A8  1E1C               	comf	___awdiv@dividend+1,f,c
  7096  0011AA  B0D8               	btfsc	status,0,c
  7097  0011AC  2A1C               	incf	___awdiv@dividend+1,f,c
  7098  0011AE  0E01               	movlw	1
  7099  0011B0  1A20               	xorwf	___awdiv@sign,f,c
  7100  0011B2                     l2789:
  7101  0011B2  0E00               	movlw	0
  7102  0011B4  6E22               	movwf	___awdiv@quotient+1,c
  7103  0011B6  0E00               	movlw	0
  7104  0011B8  6E21               	movwf	___awdiv@quotient,c
  7105  0011BA  501D               	movf	___awdiv@divisor,w,c
  7106  0011BC  101E               	iorwf	___awdiv@divisor+1,w,c
  7107  0011BE  B4D8               	btfsc	status,2,c
  7108  0011C0  D01C               	goto	l2811
  7109  0011C2  0E01               	movlw	1
  7110  0011C4  6E1F               	movwf	___awdiv@counter,c
  7111  0011C6  D004               	goto	l2797
  7112  0011C8                     l2795:
  7113  0011C8  90D8               	bcf	status,0,c
  7114  0011CA  361D               	rlcf	___awdiv@divisor,f,c
  7115  0011CC  361E               	rlcf	___awdiv@divisor+1,f,c
  7116  0011CE  2A1F               	incf	___awdiv@counter,f,c
  7117  0011D0                     l2797:
  7118  0011D0  AE1E               	btfss	___awdiv@divisor+1,7,c
  7119  0011D2  D7FA               	goto	l2795
  7120  0011D4                     l2799:
  7121  0011D4  90D8               	bcf	status,0,c
  7122  0011D6  3621               	rlcf	___awdiv@quotient,f,c
  7123  0011D8  3622               	rlcf	___awdiv@quotient+1,f,c
  7124  0011DA  501D               	movf	___awdiv@divisor,w,c
  7125  0011DC  5C1B               	subwf	___awdiv@dividend,w,c
  7126  0011DE  501E               	movf	___awdiv@divisor+1,w,c
  7127  0011E0  581C               	subwfb	___awdiv@dividend+1,w,c
  7128  0011E2  A0D8               	btfss	status,0,c
  7129  0011E4  D005               	goto	l2807
  7130  0011E6  501D               	movf	___awdiv@divisor,w,c
  7131  0011E8  5E1B               	subwf	___awdiv@dividend,f,c
  7132  0011EA  501E               	movf	___awdiv@divisor+1,w,c
  7133  0011EC  5A1C               	subwfb	___awdiv@dividend+1,f,c
  7134  0011EE  8021               	bsf	___awdiv@quotient,0,c
  7135  0011F0                     l2807:
  7136  0011F0  90D8               	bcf	status,0,c
  7137  0011F2  321E               	rrcf	___awdiv@divisor+1,f,c
  7138  0011F4  321D               	rrcf	___awdiv@divisor,f,c
  7139  0011F6  2E1F               	decfsz	___awdiv@counter,f,c
  7140  0011F8  D7ED               	goto	l2799
  7141  0011FA                     l2811:
  7142  0011FA  5020               	movf	___awdiv@sign,w,c
  7143  0011FC  B4D8               	btfsc	status,2,c
  7144  0011FE  D004               	goto	l2815
  7145  001200  6C21               	negf	___awdiv@quotient,c
  7146  001202  1E22               	comf	___awdiv@quotient+1,f,c
  7147  001204  B0D8               	btfsc	status,0,c
  7148  001206  2A22               	incf	___awdiv@quotient+1,f,c
  7149  001208                     l2815:
  7150  001208  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  7151  00120C  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  7152  001210  0012               	return	
  7153  001212                     __end_of___awdiv:
  7154                           	opt stack 0
  7155                           tosu	equ	0xFFF
  7156                           tosh	equ	0xFFE
  7157                           tosl	equ	0xFFD
  7158                           pclath	equ	0xFFA
  7159                           tblptru	equ	0xFF8
  7160                           tblptrh	equ	0xFF7
  7161                           tblptrl	equ	0xFF6
  7162                           tablat	equ	0xFF5
  7163                           prodh	equ	0xFF4
  7164                           prodl	equ	0xFF3
  7165                           intcon	equ	0xFF2
  7166                           intcon2	equ	0xFF1
  7167                           postinc0	equ	0xFEE
  7168                           wreg	equ	0xFE8
  7169                           postdec1	equ	0xFE5
  7170                           fsr1h	equ	0xFE2
  7171                           fsr1l	equ	0xFE1
  7172                           indf2	equ	0xFDF
  7173                           postinc2	equ	0xFDE
  7174                           postdec2	equ	0xFDD
  7175                           plusw2	equ	0xFDB
  7176                           fsr2h	equ	0xFDA
  7177                           fsr2l	equ	0xFD9
  7178                           status	equ	0xFD8
  7179                           
  7180 ;; *************** function _EUSART1_Initialize *****************
  7181 ;; Defined at:
  7182 ;;		line 23 in file "UART.c"
  7183 ;; Parameters:    Size  Location     Type
  7184 ;;		None
  7185 ;; Auto vars:     Size  Location     Type
  7186 ;;		None
  7187 ;; Return value:  Size  Location     Type
  7188 ;;                  1    wreg      void 
  7189 ;; Registers used:
  7190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7191 ;; Tracked objects:
  7192 ;;		On entry : 0/0
  7193 ;;		On exit  : 0/0
  7194 ;;		Unchanged: 0/0
  7195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7196 ;;      Params:         0       0       0       0       0       0       0
  7197 ;;      Locals:         0       0       0       0       0       0       0
  7198 ;;      Temps:          0       0       0       0       0       0       0
  7199 ;;      Totals:         0       0       0       0       0       0       0
  7200 ;;Total ram usage:        0 bytes
  7201 ;; Hardware stack levels used:    1
  7202 ;; Hardware stack levels required when called:    6
  7203 ;; This function calls:
  7204 ;;		_UART_buff_init
  7205 ;; This function is called by:
  7206 ;;		_CommsStart
  7207 ;; This function uses a non-reentrant model
  7208 ;;
  7209                           
  7210                           	psect	text39
  7211  001518                     __ptext39:
  7212                           	opt stack 0
  7213  001518                     _EUSART1_Initialize:
  7214                           	opt stack 22
  7215                           
  7216                           ;UART.c: 25: PIE3bits.RC2IE = 0;
  7217                           
  7218                           ;incstack = 0
  7219  001518  9AA3               	bcf	4003,5,c	;volatile
  7220                           
  7221                           ;UART.c: 26: PIE3bits.TX2IE = 0;
  7222  00151A  98A3               	bcf	4003,4,c	;volatile
  7223                           
  7224                           ;UART.c: 31: BAUD2CON = 0x48;
  7225  00151C  0E48               	movlw	72
  7226  00151E  6E70               	movwf	3952,c	;volatile
  7227                           
  7228                           ;UART.c: 34: RC2STA = 0x98;
  7229  001520  0E98               	movlw	152
  7230  001522  6E71               	movwf	3953,c	;volatile
  7231                           
  7232                           ;UART.c: 37: TX2STA = 0x26;
  7233  001524  0E26               	movlw	38
  7234  001526  6E72               	movwf	3954,c	;volatile
  7235                           
  7236                           ;UART.c: 40: SPBRG2 = (((16000000/38400)/4)-1);
  7237  001528  0E67               	movlw	103
  7238  00152A  6E75               	movwf	3957,c	;volatile
  7239                           
  7240                           ;UART.c: 43: SPBRGH2 = 0x00;
  7241  00152C  0E00               	movlw	0
  7242  00152E  6E76               	movwf	3958,c	;volatile
  7243                           
  7244                           ;UART.c: 46: TXREG2 = 0x00;
  7245  001530  0E00               	movlw	0
  7246  001532  6E73               	movwf	3955,c	;volatile
  7247                           
  7248                           ;UART.c: 49: RCREG2 = 0x00;
  7249  001534  0E00               	movlw	0
  7250  001536  6E74               	movwf	3956,c	;volatile
  7251                           
  7252                           ;UART.c: 51: UART_buff_init(&input_buffer);
  7253  001538  0E00               	movlw	low _input_buffer
  7254  00153A  6E23               	movwf	UART_buff_init@_this,c
  7255  00153C  0E03               	movlw	high _input_buffer
  7256  00153E  6E24               	movwf	UART_buff_init@_this+1,c
  7257  001540  EC1B  F00C         	call	_UART_buff_init	;wreg free
  7258                           
  7259                           ;UART.c: 52: UART_buff_init(&output_buffer);
  7260  001544  0E00               	movlw	low _output_buffer
  7261  001546  6E23               	movwf	UART_buff_init@_this,c
  7262  001548  0E04               	movlw	high _output_buffer
  7263  00154A  6E24               	movwf	UART_buff_init@_this+1,c
  7264  00154C  EC1B  F00C         	call	_UART_buff_init	;wreg free
  7265                           
  7266                           ;UART.c: 54: PIE3bits.RC2IE = 1;
  7267  001550  8AA3               	bsf	4003,5,c	;volatile
  7268  001552  0012               	return		;funcret
  7269  001554                     __end_of_EUSART1_Initialize:
  7270                           	opt stack 0
  7271                           tosu	equ	0xFFF
  7272                           tosh	equ	0xFFE
  7273                           tosl	equ	0xFFD
  7274                           pclath	equ	0xFFA
  7275                           tblptru	equ	0xFF8
  7276                           tblptrh	equ	0xFF7
  7277                           tblptrl	equ	0xFF6
  7278                           tablat	equ	0xFF5
  7279                           prodh	equ	0xFF4
  7280                           prodl	equ	0xFF3
  7281                           intcon	equ	0xFF2
  7282                           intcon2	equ	0xFF1
  7283                           postinc0	equ	0xFEE
  7284                           wreg	equ	0xFE8
  7285                           postdec1	equ	0xFE5
  7286                           fsr1h	equ	0xFE2
  7287                           fsr1l	equ	0xFE1
  7288                           indf2	equ	0xFDF
  7289                           postinc2	equ	0xFDE
  7290                           postdec2	equ	0xFDD
  7291                           plusw2	equ	0xFDB
  7292                           fsr2h	equ	0xFDA
  7293                           fsr2l	equ	0xFD9
  7294                           status	equ	0xFD8
  7295                           
  7296 ;; *************** function _UART_buff_init *****************
  7297 ;; Defined at:
  7298 ;;		line 58 in file "UART.c"
  7299 ;; Parameters:    Size  Location     Type
  7300 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  7301 ;;		 -> output_buffer(206), input_buffer(206), 
  7302 ;; Auto vars:     Size  Location     Type
  7303 ;;		None
  7304 ;; Return value:  Size  Location     Type
  7305 ;;                  1    wreg      void 
  7306 ;; Registers used:
  7307 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7308 ;; Tracked objects:
  7309 ;;		On entry : 0/0
  7310 ;;		On exit  : 0/0
  7311 ;;		Unchanged: 0/0
  7312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7313 ;;      Params:         2       0       0       0       0       0       0
  7314 ;;      Locals:         0       0       0       0       0       0       0
  7315 ;;      Temps:          0       0       0       0       0       0       0
  7316 ;;      Totals:         2       0       0       0       0       0       0
  7317 ;;Total ram usage:        2 bytes
  7318 ;; Hardware stack levels used:    1
  7319 ;; Hardware stack levels required when called:    5
  7320 ;; This function calls:
  7321 ;;		_memset
  7322 ;; This function is called by:
  7323 ;;		_EUSART1_Initialize
  7324 ;; This function uses a non-reentrant model
  7325 ;;
  7326                           
  7327                           	psect	text40
  7328  001836                     __ptext40:
  7329                           	opt stack 0
  7330  001836                     _UART_buff_init:
  7331                           	opt stack 22
  7332                           
  7333                           ;UART.c: 67: memset(_this, 0, sizeof (*_this));
  7334                           
  7335                           ;incstack = 0
  7336  001836  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  7337  00183A  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  7338  00183E  0E00               	movlw	0
  7339  001840  6E1E               	movwf	memset@c+1,c
  7340  001842  0E00               	movlw	0
  7341  001844  6E1D               	movwf	memset@c,c
  7342  001846  0E00               	movlw	0
  7343  001848  6E20               	movwf	memset@n+1,c
  7344  00184A  0ECE               	movlw	206
  7345  00184C  6E1F               	movwf	memset@n,c
  7346  00184E  EC6F  F00B         	call	_memset	;wreg free
  7347  001852  0012               	return		;funcret
  7348  001854                     __end_of_UART_buff_init:
  7349                           	opt stack 0
  7350                           tosu	equ	0xFFF
  7351                           tosh	equ	0xFFE
  7352                           tosl	equ	0xFFD
  7353                           pclath	equ	0xFFA
  7354                           tblptru	equ	0xFF8
  7355                           tblptrh	equ	0xFF7
  7356                           tblptrl	equ	0xFF6
  7357                           tablat	equ	0xFF5
  7358                           prodh	equ	0xFF4
  7359                           prodl	equ	0xFF3
  7360                           intcon	equ	0xFF2
  7361                           intcon2	equ	0xFF1
  7362                           postinc0	equ	0xFEE
  7363                           wreg	equ	0xFE8
  7364                           postdec1	equ	0xFE5
  7365                           fsr1h	equ	0xFE2
  7366                           fsr1l	equ	0xFE1
  7367                           indf2	equ	0xFDF
  7368                           postinc2	equ	0xFDE
  7369                           postdec2	equ	0xFDD
  7370                           plusw2	equ	0xFDB
  7371                           fsr2h	equ	0xFDA
  7372                           fsr2l	equ	0xFD9
  7373                           status	equ	0xFD8
  7374                           
  7375 ;; *************** function _memset *****************
  7376 ;; Defined at:
  7377 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  7378 ;; Parameters:    Size  Location     Type
  7379 ;;  p1              2   26[COMRAM] PTR void 
  7380 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  7381 ;;  c               2   28[COMRAM] int 
  7382 ;;  n               2   30[COMRAM] unsigned int 
  7383 ;; Auto vars:     Size  Location     Type
  7384 ;;  p               2   32[COMRAM] PTR unsigned char 
  7385 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  7386 ;; Return value:  Size  Location     Type
  7387 ;;                  2   26[COMRAM] PTR void 
  7388 ;; Registers used:
  7389 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7390 ;; Tracked objects:
  7391 ;;		On entry : 0/0
  7392 ;;		On exit  : 0/0
  7393 ;;		Unchanged: 0/0
  7394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7395 ;;      Params:         6       0       0       0       0       0       0
  7396 ;;      Locals:         2       0       0       0       0       0       0
  7397 ;;      Temps:          0       0       0       0       0       0       0
  7398 ;;      Totals:         8       0       0       0       0       0       0
  7399 ;;Total ram usage:        8 bytes
  7400 ;; Hardware stack levels used:    1
  7401 ;; Hardware stack levels required when called:    4
  7402 ;; This function calls:
  7403 ;;		Nothing
  7404 ;; This function is called by:
  7405 ;;		_FastTransfer_buffer_flush
  7406 ;;		_UART_buff_init
  7407 ;;		_UART_buff_flush
  7408 ;; This function uses a non-reentrant model
  7409 ;;
  7410                           
  7411                           	psect	text41
  7412  0016DE                     __ptext41:
  7413                           	opt stack 0
  7414  0016DE                     _memset:
  7415                           	opt stack 22
  7416                           
  7417                           ;incstack = 0
  7418  0016DE  C01B  F021         	movff	memset@p1,memset@p
  7419  0016E2  C01C  F022         	movff	memset@p1+1,memset@p+1
  7420  0016E6  D008               	goto	l3795
  7421  0016E8                     l3791:
  7422  0016E8  C021  FFD9         	movff	memset@p,fsr2l
  7423  0016EC  C022  FFDA         	movff	memset@p+1,fsr2h
  7424  0016F0  C01D  FFDF         	movff	memset@c,indf2
  7425  0016F4  4A21               	infsnz	memset@p,f,c
  7426  0016F6  2A22               	incf	memset@p+1,f,c
  7427  0016F8                     l3795:
  7428  0016F8  061F               	decf	memset@n,f,c
  7429  0016FA  A0D8               	btfss	status,0,c
  7430  0016FC  0620               	decf	memset@n+1,f,c
  7431  0016FE  281F               	incf	memset@n,w,c
  7432  001700  E1F3               	bnz	l3791
  7433  001702  2820               	incf	memset@n+1,w,c
  7434  001704  B4D8               	btfsc	status,2,c
  7435  001706  0012               	return	
  7436  001708  D7EF               	goto	l3791
  7437  00170A                     __end_of_memset:
  7438                           	opt stack 0
  7439                           tosu	equ	0xFFF
  7440                           tosh	equ	0xFFE
  7441                           tosl	equ	0xFFD
  7442                           pclath	equ	0xFFA
  7443                           tblptru	equ	0xFF8
  7444                           tblptrh	equ	0xFF7
  7445                           tblptrl	equ	0xFF6
  7446                           tablat	equ	0xFF5
  7447                           prodh	equ	0xFF4
  7448                           prodl	equ	0xFF3
  7449                           intcon	equ	0xFF2
  7450                           intcon2	equ	0xFF1
  7451                           postinc0	equ	0xFEE
  7452                           wreg	equ	0xFE8
  7453                           postdec1	equ	0xFE5
  7454                           fsr1h	equ	0xFE2
  7455                           fsr1l	equ	0xFE1
  7456                           indf2	equ	0xFDF
  7457                           postinc2	equ	0xFDE
  7458                           postdec2	equ	0xFDD
  7459                           plusw2	equ	0xFDB
  7460                           fsr2h	equ	0xFDA
  7461                           fsr2l	equ	0xFD9
  7462                           status	equ	0xFD8
  7463                           
  7464 ;; *************** function _INTERRUPT_InterruptManager *****************
  7465 ;; Defined at:
  7466 ;;		line 68 in file "mcc_generated_files/interrupt_manager.c"
  7467 ;; Parameters:    Size  Location     Type
  7468 ;;		None
  7469 ;; Auto vars:     Size  Location     Type
  7470 ;;		None
  7471 ;; Return value:  Size  Location     Type
  7472 ;;                  1    wreg      void 
  7473 ;; Registers used:
  7474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7475 ;; Tracked objects:
  7476 ;;		On entry : 0/0
  7477 ;;		On exit  : 0/0
  7478 ;;		Unchanged: 0/0
  7479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7480 ;;      Params:         0       0       0       0       0       0       0
  7481 ;;      Locals:         0       0       0       0       0       0       0
  7482 ;;      Temps:         14       0       0       0       0       0       0
  7483 ;;      Totals:        14       0       0       0       0       0       0
  7484 ;;Total ram usage:       14 bytes
  7485 ;; Hardware stack levels used:    1
  7486 ;; Hardware stack levels required when called:    3
  7487 ;; This function calls:
  7488 ;;		_EUSART1_Receive_ISR
  7489 ;;		_EUSART1_Transmit_ISR
  7490 ;;		_EUSART2_Receive_ISR
  7491 ;;		_EUSART2_Transmit_ISR
  7492 ;;		_TMR0_ISR
  7493 ;; This function is called by:
  7494 ;;		Interrupt level 2
  7495 ;; This function uses a non-reentrant model
  7496 ;;
  7497                           
  7498                           	psect	intcode
  7499  000008                     __pintcode:
  7500                           	opt stack 0
  7501  000008                     _INTERRUPT_InterruptManager:
  7502                           	opt stack 20
  7503                           
  7504                           ;incstack = 0
  7505  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7506  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  7507  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  7508  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  7509  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  7510  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  7511  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  7512  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  7513  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  7514  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  7515  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  7516  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  7517  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  7518  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  7519  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  7520                           
  7521                           ;interrupt_manager.c: 70: if (PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1) {
  7522  000042  BAA3               	btfsc	4003,5,c	;volatile
  7523  000044  AAA4               	btfss	4004,5,c	;volatile
  7524  000046  D003               	goto	i2l170
  7525                           
  7526                           ;interrupt_manager.c: 71: EUSART2_Receive_ISR();
  7527  000048  EC2A  F00C         	call	_EUSART2_Receive_ISR	;wreg free
  7528                           
  7529                           ;interrupt_manager.c: 72: } else if (PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1) {
  7530  00004C  D017               	goto	i2l180
  7531  00004E                     i2l170:
  7532  00004E  B8A3               	btfsc	4003,4,c	;volatile
  7533  000050  A8A4               	btfss	4004,4,c	;volatile
  7534  000052  D003               	goto	i2l172
  7535                           
  7536                           ;interrupt_manager.c: 73: EUSART2_Transmit_ISR();
  7537  000054  ECFA  F00A         	call	_EUSART2_Transmit_ISR	;wreg free
  7538                           
  7539                           ;interrupt_manager.c: 74: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
  7540  000058  D011               	goto	i2l180
  7541  00005A                     i2l172:
  7542  00005A  BA9D               	btfsc	3997,5,c	;volatile
  7543  00005C  AA9E               	btfss	3998,5,c	;volatile
  7544  00005E  D003               	goto	i2l174
  7545                           
  7546                           ;interrupt_manager.c: 75: EUSART1_Receive_ISR();
  7547  000060  EC85  F00B         	call	_EUSART1_Receive_ISR	;wreg free
  7548                           
  7549                           ;interrupt_manager.c: 76: } else if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
  7550  000064  D00B               	goto	i2l180
  7551  000066                     i2l174:
  7552  000066  B89D               	btfsc	3997,4,c	;volatile
  7553  000068  A89E               	btfss	3998,4,c	;volatile
  7554  00006A  D003               	goto	i2l176
  7555                           
  7556                           ;interrupt_manager.c: 77: EUSART1_Transmit_ISR();
  7557  00006C  EC42  F00B         	call	_EUSART1_Transmit_ISR	;wreg free
  7558                           
  7559                           ;interrupt_manager.c: 78: } else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
  7560  000070  D005               	goto	i2l180
  7561  000072                     i2l176:
  7562  000072  BAF2               	btfsc	intcon,5,c	;volatile
  7563  000074  A4F2               	btfss	intcon,2,c	;volatile
  7564  000076  D002               	goto	i2l180
  7565                           
  7566                           ;interrupt_manager.c: 79: TMR0_ISR();
  7567  000078  EC46  F00C         	call	_TMR0_ISR	;wreg free
  7568  00007C                     i2l180:
  7569  00007C  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  7570  000080  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  7571  000084  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  7572  000088  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  7573  00008C  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  7574  000090  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  7575  000094  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  7576  000098  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  7577  00009C  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  7578  0000A0  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  7579  0000A4  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  7580  0000A8  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  7581  0000AC  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  7582  0000B0  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  7583  0000B4  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7584  0000B6  0011               	retfie		f
  7585  0000B8                     __end_of_INTERRUPT_InterruptManager:
  7586                           	opt stack 0
  7587                           tosu	equ	0xFFF
  7588                           tosh	equ	0xFFE
  7589                           tosl	equ	0xFFD
  7590                           pclatu	equ	0xFFB
  7591                           pclath	equ	0xFFA
  7592                           tblptru	equ	0xFF8
  7593                           tblptrh	equ	0xFF7
  7594                           tblptrl	equ	0xFF6
  7595                           tablat	equ	0xFF5
  7596                           prodh	equ	0xFF4
  7597                           prodl	equ	0xFF3
  7598                           intcon	equ	0xFF2
  7599                           intcon2	equ	0xFF1
  7600                           postinc0	equ	0xFEE
  7601                           fsr0h	equ	0xFEA
  7602                           fsr0l	equ	0xFE9
  7603                           wreg	equ	0xFE8
  7604                           postdec1	equ	0xFE5
  7605                           fsr1h	equ	0xFE2
  7606                           fsr1l	equ	0xFE1
  7607                           indf2	equ	0xFDF
  7608                           postinc2	equ	0xFDE
  7609                           postdec2	equ	0xFDD
  7610                           plusw2	equ	0xFDB
  7611                           fsr2h	equ	0xFDA
  7612                           fsr2l	equ	0xFD9
  7613                           status	equ	0xFD8
  7614                           
  7615 ;; *************** function _TMR0_ISR *****************
  7616 ;; Defined at:
  7617 ;;		line 134 in file "mcc_generated_files/tmr0.c"
  7618 ;; Parameters:    Size  Location     Type
  7619 ;;		None
  7620 ;; Auto vars:     Size  Location     Type
  7621 ;;		None
  7622 ;; Return value:  Size  Location     Type
  7623 ;;                  2  164[None  ] int 
  7624 ;; Registers used:
  7625 ;;		wreg, status,2, status,0
  7626 ;; Tracked objects:
  7627 ;;		On entry : 0/0
  7628 ;;		On exit  : 0/0
  7629 ;;		Unchanged: 0/0
  7630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7631 ;;      Params:         0       0       0       0       0       0       0
  7632 ;;      Locals:         0       0       0       0       0       0       0
  7633 ;;      Temps:          0       0       0       0       0       0       0
  7634 ;;      Totals:         0       0       0       0       0       0       0
  7635 ;;Total ram usage:        0 bytes
  7636 ;; Hardware stack levels used:    1
  7637 ;; This function calls:
  7638 ;;		Nothing
  7639 ;; This function is called by:
  7640 ;;		_INTERRUPT_InterruptManager
  7641 ;; This function uses a non-reentrant model
  7642 ;;
  7643                           
  7644                           	psect	text43
  7645  00188C                     __ptext43:
  7646                           	opt stack 0
  7647  00188C                     _TMR0_ISR:
  7648                           	opt stack 22
  7649                           
  7650                           ;tmr0.c: 138: TMR0H = timer0ReloadVal16bit >> 8;
  7651                           
  7652                           ;incstack = 0
  7653  00188C  5041               	movf	_timer0ReloadVal16bit+1,w,c
  7654  00188E  6ED7               	movwf	4055,c	;volatile
  7655                           
  7656                           ;tmr0.c: 139: TMR0L = (uint8_t) timer0ReloadVal16bit;
  7657  001890  C040  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
  7658                           
  7659                           ;tmr0.c: 141: time++;
  7660  001894  0E01               	movlw	1
  7661  001896  2626               	addwf	_time,f,c
  7662  001898  0E00               	movlw	0
  7663  00189A  2227               	addwfc	_time+1,f,c
  7664  00189C  2228               	addwfc	_time+2,f,c
  7665  00189E  2229               	addwfc	_time+3,f,c
  7666                           
  7667                           ;tmr0.c: 144: INTCONbits.TMR0IF = 0;
  7668  0018A0  94F2               	bcf	intcon,2,c	;volatile
  7669  0018A2  0012               	return		;funcret
  7670  0018A4                     __end_of_TMR0_ISR:
  7671                           	opt stack 0
  7672                           tosu	equ	0xFFF
  7673                           tosh	equ	0xFFE
  7674                           tosl	equ	0xFFD
  7675                           pclatu	equ	0xFFB
  7676                           pclath	equ	0xFFA
  7677                           tblptru	equ	0xFF8
  7678                           tblptrh	equ	0xFF7
  7679                           tblptrl	equ	0xFF6
  7680                           tablat	equ	0xFF5
  7681                           prodh	equ	0xFF4
  7682                           prodl	equ	0xFF3
  7683                           intcon	equ	0xFF2
  7684                           intcon2	equ	0xFF1
  7685                           postinc0	equ	0xFEE
  7686                           fsr0h	equ	0xFEA
  7687                           fsr0l	equ	0xFE9
  7688                           wreg	equ	0xFE8
  7689                           postdec1	equ	0xFE5
  7690                           fsr1h	equ	0xFE2
  7691                           fsr1l	equ	0xFE1
  7692                           indf2	equ	0xFDF
  7693                           postinc2	equ	0xFDE
  7694                           postdec2	equ	0xFDD
  7695                           plusw2	equ	0xFDB
  7696                           fsr2h	equ	0xFDA
  7697                           fsr2l	equ	0xFD9
  7698                           status	equ	0xFD8
  7699                           
  7700 ;; *************** function _EUSART2_Transmit_ISR *****************
  7701 ;; Defined at:
  7702 ;;		line 152 in file "UART.c"
  7703 ;; Parameters:    Size  Location     Type
  7704 ;;		None
  7705 ;; Auto vars:     Size  Location     Type
  7706 ;;		None
  7707 ;; Return value:  Size  Location     Type
  7708 ;;                  1    wreg      void 
  7709 ;; Registers used:
  7710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7711 ;; Tracked objects:
  7712 ;;		On entry : 0/0
  7713 ;;		On exit  : 0/0
  7714 ;;		Unchanged: 0/0
  7715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7716 ;;      Params:         0       0       0       0       0       0       0
  7717 ;;      Locals:         0       0       0       0       0       0       0
  7718 ;;      Temps:          0       0       0       0       0       0       0
  7719 ;;      Totals:         0       0       0       0       0       0       0
  7720 ;;Total ram usage:        0 bytes
  7721 ;; Hardware stack levels used:    1
  7722 ;; Hardware stack levels required when called:    2
  7723 ;; This function calls:
  7724 ;;		i2_UART_buff_get
  7725 ;;		i2_UART_buff_size
  7726 ;; This function is called by:
  7727 ;;		_INTERRUPT_InterruptManager
  7728 ;; This function uses a non-reentrant model
  7729 ;;
  7730                           
  7731                           	psect	text44
  7732  0015F4                     __ptext44:
  7733                           	opt stack 0
  7734  0015F4                     _EUSART2_Transmit_ISR:
  7735                           	opt stack 20
  7736                           
  7737                           ;UART.c: 154: if (UART_buff_size(&output_buffer) > 0) {
  7738                           
  7739                           ;incstack = 0
  7740  0015F4  0E00               	movlw	low _output_buffer
  7741  0015F6  6E01               	movwf	i2UART_buff_size@_this,c
  7742  0015F8  0E04               	movlw	high _output_buffer
  7743  0015FA  6E02               	movwf	i2UART_buff_size@_this+1,c
  7744  0015FC  EC73  F00C         	call	i2_UART_buff_size	;wreg free
  7745  001600  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  7746  001602  D00D               	goto	i2l3251
  7747  001604  5002               	movf	?i2_UART_buff_size+1,w,c
  7748  001606  E103               	bnz	i2u276_40
  7749  001608  0401               	decf	?i2_UART_buff_size,w,c
  7750  00160A  A0D8               	btfss	status,0,c
  7751  00160C  D008               	goto	i2l3251
  7752  00160E                     i2u276_40:
  7753                           
  7754                           ;UART.c: 155: TXREG2 = UART_buff_get(&output_buffer);
  7755  00160E  0E00               	movlw	low _output_buffer
  7756  001610  6E07               	movwf	i2UART_buff_get@_this,c
  7757  001612  0E04               	movlw	high _output_buffer
  7758  001614  6E08               	movwf	i2UART_buff_get@_this+1,c
  7759  001616  EC7E  F008         	call	i2_UART_buff_get	;wreg free
  7760  00161A  6E73               	movwf	3955,c	;volatile
  7761                           
  7762                           ;UART.c: 156: } else {
  7763  00161C  0012               	return	
  7764  00161E                     i2l3251:
  7765                           
  7766                           ;UART.c: 157: Transmit_stall = 1;
  7767  00161E  0E01               	movlw	1
  7768  001620  6E44               	movwf	_Transmit_stall,c
  7769                           
  7770                           ;UART.c: 158: PIE3bits.TX2IE = 0;
  7771  001622  98A3               	bcf	4003,4,c	;volatile
  7772  001624  0012               	return	
  7773  001626                     __end_of_EUSART2_Transmit_ISR:
  7774                           	opt stack 0
  7775                           tosu	equ	0xFFF
  7776                           tosh	equ	0xFFE
  7777                           tosl	equ	0xFFD
  7778                           pclatu	equ	0xFFB
  7779                           pclath	equ	0xFFA
  7780                           tblptru	equ	0xFF8
  7781                           tblptrh	equ	0xFF7
  7782                           tblptrl	equ	0xFF6
  7783                           tablat	equ	0xFF5
  7784                           prodh	equ	0xFF4
  7785                           prodl	equ	0xFF3
  7786                           intcon	equ	0xFF2
  7787                           intcon2	equ	0xFF1
  7788                           postinc0	equ	0xFEE
  7789                           fsr0h	equ	0xFEA
  7790                           fsr0l	equ	0xFE9
  7791                           wreg	equ	0xFE8
  7792                           postdec1	equ	0xFE5
  7793                           fsr1h	equ	0xFE2
  7794                           fsr1l	equ	0xFE1
  7795                           indf2	equ	0xFDF
  7796                           postinc2	equ	0xFDE
  7797                           postdec2	equ	0xFDD
  7798                           plusw2	equ	0xFDB
  7799                           fsr2h	equ	0xFDA
  7800                           fsr2l	equ	0xFD9
  7801                           status	equ	0xFD8
  7802                           
  7803 ;; *************** function i2_UART_buff_size *****************
  7804 ;; Defined at:
  7805 ;;		line 104 in file "UART.c"
  7806 ;; Parameters:    Size  Location     Type
  7807 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  7808 ;;		 -> output_buffer(206), input_buffer(206), 
  7809 ;; Auto vars:     Size  Location     Type
  7810 ;;		None
  7811 ;; Return value:  Size  Location     Type
  7812 ;;                  2    0[COMRAM] int 
  7813 ;; Registers used:
  7814 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7815 ;; Tracked objects:
  7816 ;;		On entry : 0/0
  7817 ;;		On exit  : 0/0
  7818 ;;		Unchanged: 0/0
  7819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7820 ;;      Params:         2       0       0       0       0       0       0
  7821 ;;      Locals:         0       0       0       0       0       0       0
  7822 ;;      Temps:          0       0       0       0       0       0       0
  7823 ;;      Totals:         2       0       0       0       0       0       0
  7824 ;;Total ram usage:        2 bytes
  7825 ;; Hardware stack levels used:    1
  7826 ;; This function calls:
  7827 ;;		Nothing
  7828 ;; This function is called by:
  7829 ;;		_EUSART2_Transmit_ISR
  7830 ;; This function uses a non-reentrant model
  7831 ;;
  7832                           
  7833                           	psect	text45
  7834  0018E6                     __ptext45:
  7835                           	opt stack 0
  7836  0018E6                     i2_UART_buff_size:
  7837                           	opt stack 21
  7838                           
  7839                           ;UART.c: 105: return (_this->count);
  7840                           
  7841                           ;incstack = 0
  7842  0018E6  EE20 F0CC          	lfsr	2,204
  7843  0018EA  5001               	movf	i2UART_buff_size@_this,w,c
  7844  0018EC  26D9               	addwf	fsr2l,f,c
  7845  0018EE  5002               	movf	i2UART_buff_size@_this+1,w,c
  7846  0018F0  22DA               	addwfc	fsr2h,f,c
  7847  0018F2  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  7848  0018F6  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  7849  0018FA  0012               	return	
  7850  0018FC                     __end_ofi2_UART_buff_size:
  7851                           	opt stack 0
  7852                           tosu	equ	0xFFF
  7853                           tosh	equ	0xFFE
  7854                           tosl	equ	0xFFD
  7855                           pclatu	equ	0xFFB
  7856                           pclath	equ	0xFFA
  7857                           tblptru	equ	0xFF8
  7858                           tblptrh	equ	0xFF7
  7859                           tblptrl	equ	0xFF6
  7860                           tablat	equ	0xFF5
  7861                           prodh	equ	0xFF4
  7862                           prodl	equ	0xFF3
  7863                           intcon	equ	0xFF2
  7864                           intcon2	equ	0xFF1
  7865                           postinc0	equ	0xFEE
  7866                           fsr0h	equ	0xFEA
  7867                           fsr0l	equ	0xFE9
  7868                           wreg	equ	0xFE8
  7869                           postdec1	equ	0xFE5
  7870                           fsr1h	equ	0xFE2
  7871                           fsr1l	equ	0xFE1
  7872                           indf2	equ	0xFDF
  7873                           postinc2	equ	0xFDE
  7874                           postdec2	equ	0xFDD
  7875                           plusw2	equ	0xFDB
  7876                           fsr2h	equ	0xFDA
  7877                           fsr2l	equ	0xFD9
  7878                           status	equ	0xFD8
  7879                           
  7880 ;; *************** function i2_UART_buff_get *****************
  7881 ;; Defined at:
  7882 ;;		line 83 in file "UART.c"
  7883 ;; Parameters:    Size  Location     Type
  7884 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  7885 ;;		 -> output_buffer(206), input_buffer(206), 
  7886 ;; Auto vars:     Size  Location     Type
  7887 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  7888 ;; Return value:  Size  Location     Type
  7889 ;;                  1    wreg      unsigned char 
  7890 ;; Registers used:
  7891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7892 ;; Tracked objects:
  7893 ;;		On entry : 0/0
  7894 ;;		On exit  : 0/0
  7895 ;;		Unchanged: 0/0
  7896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7897 ;;      Params:         2       0       0       0       0       0       0
  7898 ;;      Locals:         1       0       0       0       0       0       0
  7899 ;;      Temps:          2       0       0       0       0       0       0
  7900 ;;      Totals:         5       0       0       0       0       0       0
  7901 ;;Total ram usage:        5 bytes
  7902 ;; Hardware stack levels used:    1
  7903 ;; Hardware stack levels required when called:    1
  7904 ;; This function calls:
  7905 ;;		i2_UART_buff_modulo_inc
  7906 ;; This function is called by:
  7907 ;;		_EUSART2_Transmit_ISR
  7908 ;; This function uses a non-reentrant model
  7909 ;;
  7910                           
  7911                           	psect	text46
  7912  0010FC                     __ptext46:
  7913                           	opt stack 0
  7914  0010FC                     i2_UART_buff_get:
  7915                           	opt stack 20
  7916                           
  7917                           ;UART.c: 84: unsigned char c;
  7918                           ;UART.c: 85: if (_this->count > 0) {
  7919                           
  7920                           ;incstack = 0
  7921  0010FC  EE20 F0CC          	lfsr	2,204
  7922  001100  5007               	movf	i2UART_buff_get@_this,w,c
  7923  001102  26D9               	addwf	fsr2l,f,c
  7924  001104  5008               	movf	i2UART_buff_get@_this+1,w,c
  7925  001106  22DA               	addwfc	fsr2h,f,c
  7926  001108  0E01               	movlw	1
  7927  00110A  BEDB               	btfsc	plusw2,7,c
  7928  00110C  D03C               	goto	i2l3187
  7929  00110E  0E01               	movlw	1
  7930  001110  50DB               	movf	plusw2,w,c
  7931  001112  E103               	bnz	i2u268_40
  7932  001114  04DE               	decf	postinc2,w,c
  7933  001116  A0D8               	btfss	status,0,c
  7934  001118  D036               	goto	i2l3187
  7935  00111A                     i2u268_40:
  7936                           
  7937                           ;UART.c: 86: c = _this->buf[_this->tail];
  7938  00111A  EE20 F0CA          	lfsr	2,202
  7939  00111E  5007               	movf	i2UART_buff_get@_this,w,c
  7940  001120  26D9               	addwf	fsr2l,f,c
  7941  001122  5008               	movf	i2UART_buff_get@_this+1,w,c
  7942  001124  22DA               	addwfc	fsr2h,f,c
  7943  001126  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  7944  00112A  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  7945  00112E  5009               	movf	??i2_UART_buff_get,w,c
  7946  001130  2407               	addwf	i2UART_buff_get@_this,w,c
  7947  001132  6ED9               	movwf	fsr2l,c
  7948  001134  500A               	movf	??i2_UART_buff_get+1,w,c
  7949  001136  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  7950  001138  6EDA               	movwf	fsr2h,c
  7951  00113A  50DF               	movf	indf2,w,c
  7952  00113C  6E0B               	movwf	i2UART_buff_get@c,c
  7953                           
  7954                           ;UART.c: 87: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7955  00113E  EE20 F0CA          	lfsr	2,202
  7956  001142  5007               	movf	i2UART_buff_get@_this,w,c
  7957  001144  26D9               	addwf	fsr2l,f,c
  7958  001146  5008               	movf	i2UART_buff_get@_this+1,w,c
  7959  001148  22DA               	addwfc	fsr2h,f,c
  7960  00114A  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  7961  00114E  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  7962  001152  0E00               	movlw	0
  7963  001154  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  7964  001156  0EC8               	movlw	200
  7965  001158  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  7966  00115A  ECC5  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  7967  00115E  EE20 F0CA          	lfsr	2,202
  7968  001162  5007               	movf	i2UART_buff_get@_this,w,c
  7969  001164  26D9               	addwf	fsr2l,f,c
  7970  001166  5008               	movf	i2UART_buff_get@_this+1,w,c
  7971  001168  22DA               	addwfc	fsr2h,f,c
  7972  00116A  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  7973  00116E  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  7974                           
  7975                           ;UART.c: 88: --_this->count;
  7976  001172  EE20 F0CC          	lfsr	2,204
  7977  001176  5007               	movf	i2UART_buff_get@_this,w,c
  7978  001178  26D9               	addwf	fsr2l,f,c
  7979  00117A  5008               	movf	i2UART_buff_get@_this+1,w,c
  7980  00117C  22DA               	addwfc	fsr2h,f,c
  7981  00117E  06DE               	decf	postinc2,f,c
  7982  001180  0E00               	movlw	0
  7983  001182  5ADD               	subwfb	postdec2,f,c
  7984                           
  7985                           ;UART.c: 89: } else {
  7986  001184  D002               	goto	i2l614
  7987  001186                     i2l3187:
  7988                           
  7989                           ;UART.c: 90: c = 0;
  7990  001186  0E00               	movlw	0
  7991  001188  6E0B               	movwf	i2UART_buff_get@c,c
  7992  00118A                     i2l614:
  7993                           
  7994                           ;UART.c: 91: }
  7995                           ;UART.c: 92: return (c);
  7996  00118A  500B               	movf	i2UART_buff_get@c,w,c
  7997  00118C  0012               	return	
  7998  00118E                     __end_ofi2_UART_buff_get:
  7999                           	opt stack 0
  8000                           tosu	equ	0xFFF
  8001                           tosh	equ	0xFFE
  8002                           tosl	equ	0xFFD
  8003                           pclatu	equ	0xFFB
  8004                           pclath	equ	0xFFA
  8005                           tblptru	equ	0xFF8
  8006                           tblptrh	equ	0xFF7
  8007                           tblptrl	equ	0xFF6
  8008                           tablat	equ	0xFF5
  8009                           prodh	equ	0xFF4
  8010                           prodl	equ	0xFF3
  8011                           intcon	equ	0xFF2
  8012                           intcon2	equ	0xFF1
  8013                           postinc0	equ	0xFEE
  8014                           fsr0h	equ	0xFEA
  8015                           fsr0l	equ	0xFE9
  8016                           wreg	equ	0xFE8
  8017                           postdec1	equ	0xFE5
  8018                           fsr1h	equ	0xFE2
  8019                           fsr1l	equ	0xFE1
  8020                           indf2	equ	0xFDF
  8021                           postinc2	equ	0xFDE
  8022                           postdec2	equ	0xFDD
  8023                           plusw2	equ	0xFDB
  8024                           fsr2h	equ	0xFDA
  8025                           fsr2l	equ	0xFD9
  8026                           status	equ	0xFD8
  8027                           
  8028 ;; *************** function _EUSART2_Receive_ISR *****************
  8029 ;; Defined at:
  8030 ;;		line 141 in file "UART.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;		None
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;  data            1   11[COMRAM] unsigned char 
  8035 ;; Return value:  Size  Location     Type
  8036 ;;                  1    wreg      void 
  8037 ;; Registers used:
  8038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8039 ;; Tracked objects:
  8040 ;;		On entry : 0/0
  8041 ;;		On exit  : 0/0
  8042 ;;		Unchanged: 0/0
  8043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8044 ;;      Params:         0       0       0       0       0       0       0
  8045 ;;      Locals:         1       0       0       0       0       0       0
  8046 ;;      Temps:          0       0       0       0       0       0       0
  8047 ;;      Totals:         1       0       0       0       0       0       0
  8048 ;;Total ram usage:        1 bytes
  8049 ;; Hardware stack levels used:    1
  8050 ;; Hardware stack levels required when called:    2
  8051 ;; This function calls:
  8052 ;;		i2_UART_buff_put
  8053 ;; This function is called by:
  8054 ;;		_INTERRUPT_InterruptManager
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           	psect	text47
  8059  001854                     __ptext47:
  8060                           	opt stack 0
  8061  001854                     _EUSART2_Receive_ISR:
  8062                           	opt stack 20
  8063                           
  8064                           ;UART.c: 142: if (1 == RC2STAbits.OERR) {
  8065                           
  8066                           ;incstack = 0
  8067  001854  A271               	btfss	3953,1,c	;volatile
  8068  001856  D002               	goto	i2l645
  8069                           
  8070                           ;UART.c: 145: RC2STAbits.CREN = 0;
  8071  001858  9871               	bcf	3953,4,c	;volatile
  8072                           
  8073                           ;UART.c: 146: RC2STAbits.CREN = 1;
  8074  00185A  8871               	bsf	3953,4,c	;volatile
  8075  00185C                     i2l645:
  8076                           
  8077                           ;UART.c: 147: }
  8078                           ;UART.c: 148: unsigned char data = RCREG2;
  8079  00185C  CF74 F00C          	movff	3956,EUSART2_Receive_ISR@data	;volatile
  8080                           
  8081                           ;UART.c: 149: UART_buff_put(&input_buffer, data);
  8082  001860  0E00               	movlw	low _input_buffer
  8083  001862  6E07               	movwf	i2UART_buff_put@_this,c
  8084  001864  0E03               	movlw	high _input_buffer
  8085  001866  6E08               	movwf	i2UART_buff_put@_this+1,c
  8086  001868  C00C  F009         	movff	EUSART2_Receive_ISR@data,i2UART_buff_put@c
  8087  00186C  EC58  F006         	call	i2_UART_buff_put	;wreg free
  8088  001870  0012               	return		;funcret
  8089  001872                     __end_of_EUSART2_Receive_ISR:
  8090                           	opt stack 0
  8091                           tosu	equ	0xFFF
  8092                           tosh	equ	0xFFE
  8093                           tosl	equ	0xFFD
  8094                           pclatu	equ	0xFFB
  8095                           pclath	equ	0xFFA
  8096                           tblptru	equ	0xFF8
  8097                           tblptrh	equ	0xFF7
  8098                           tblptrl	equ	0xFF6
  8099                           tablat	equ	0xFF5
  8100                           prodh	equ	0xFF4
  8101                           prodl	equ	0xFF3
  8102                           intcon	equ	0xFF2
  8103                           intcon2	equ	0xFF1
  8104                           postinc0	equ	0xFEE
  8105                           fsr0h	equ	0xFEA
  8106                           fsr0l	equ	0xFE9
  8107                           wreg	equ	0xFE8
  8108                           postdec1	equ	0xFE5
  8109                           fsr1h	equ	0xFE2
  8110                           fsr1l	equ	0xFE1
  8111                           indf2	equ	0xFDF
  8112                           postinc2	equ	0xFDE
  8113                           postdec2	equ	0xFDD
  8114                           plusw2	equ	0xFDB
  8115                           fsr2h	equ	0xFDA
  8116                           fsr2l	equ	0xFD9
  8117                           status	equ	0xFD8
  8118                           
  8119 ;; *************** function i2_UART_buff_put *****************
  8120 ;; Defined at:
  8121 ;;		line 70 in file "UART.c"
  8122 ;; Parameters:    Size  Location     Type
  8123 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  8124 ;;		 -> output_buffer(206), input_buffer(206), 
  8125 ;;  c               1    8[COMRAM] const unsigned char 
  8126 ;; Auto vars:     Size  Location     Type
  8127 ;;		None
  8128 ;; Return value:  Size  Location     Type
  8129 ;;                  1    wreg      void 
  8130 ;; Registers used:
  8131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8132 ;; Tracked objects:
  8133 ;;		On entry : 0/0
  8134 ;;		On exit  : 0/0
  8135 ;;		Unchanged: 0/0
  8136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8137 ;;      Params:         3       0       0       0       0       0       0
  8138 ;;      Locals:         0       0       0       0       0       0       0
  8139 ;;      Temps:          2       0       0       0       0       0       0
  8140 ;;      Totals:         5       0       0       0       0       0       0
  8141 ;;Total ram usage:        5 bytes
  8142 ;; Hardware stack levels used:    1
  8143 ;; Hardware stack levels required when called:    1
  8144 ;; This function calls:
  8145 ;;		i2_UART_buff_modulo_inc
  8146 ;; This function is called by:
  8147 ;;		_EUSART2_Receive_ISR
  8148 ;; This function uses a non-reentrant model
  8149 ;;
  8150                           
  8151                           	psect	text48
  8152  000CB0                     __ptext48:
  8153                           	opt stack 0
  8154  000CB0                     i2_UART_buff_put:
  8155                           	opt stack 20
  8156                           
  8157                           ;UART.c: 71: if (_this->count < 200) {
  8158                           
  8159                           ;incstack = 0
  8160  000CB0  EE20 F0CC          	lfsr	2,204
  8161  000CB4  5007               	movf	i2UART_buff_put@_this,w,c
  8162  000CB6  26D9               	addwf	fsr2l,f,c
  8163  000CB8  5008               	movf	i2UART_buff_put@_this+1,w,c
  8164  000CBA  22DA               	addwfc	fsr2h,f,c
  8165  000CBC  0E01               	movlw	1
  8166  000CBE  BEDB               	btfsc	plusw2,7,c
  8167  000CC0  D007               	goto	i2l3167
  8168  000CC2  0E01               	movlw	1
  8169  000CC4  50DB               	movf	plusw2,w,c
  8170  000CC6  E13A               	bnz	i2l3173
  8171  000CC8  0EC8               	movlw	200
  8172  000CCA  5CDE               	subwf	postinc2,w,c
  8173  000CCC  B0D8               	btfsc	status,0,c
  8174  000CCE  D036               	goto	i2l3173
  8175  000CD0                     i2l3167:
  8176                           
  8177                           ;UART.c: 72: _this->buf[_this->head] = c;
  8178  000CD0  EE20 F0C8          	lfsr	2,200
  8179  000CD4  5007               	movf	i2UART_buff_put@_this,w,c
  8180  000CD6  26D9               	addwf	fsr2l,f,c
  8181  000CD8  5008               	movf	i2UART_buff_put@_this+1,w,c
  8182  000CDA  22DA               	addwfc	fsr2h,f,c
  8183  000CDC  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8184  000CE0  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8185  000CE4  500A               	movf	??i2_UART_buff_put,w,c
  8186  000CE6  2407               	addwf	i2UART_buff_put@_this,w,c
  8187  000CE8  6ED9               	movwf	fsr2l,c
  8188  000CEA  500B               	movf	??i2_UART_buff_put+1,w,c
  8189  000CEC  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8190  000CEE  6EDA               	movwf	fsr2h,c
  8191  000CF0  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8192                           
  8193                           ;UART.c: 73: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8194  000CF4  EE20 F0C8          	lfsr	2,200
  8195  000CF8  5007               	movf	i2UART_buff_put@_this,w,c
  8196  000CFA  26D9               	addwf	fsr2l,f,c
  8197  000CFC  5008               	movf	i2UART_buff_put@_this+1,w,c
  8198  000CFE  22DA               	addwfc	fsr2h,f,c
  8199  000D00  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8200  000D04  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8201  000D08  0E00               	movlw	0
  8202  000D0A  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8203  000D0C  0EC8               	movlw	200
  8204  000D0E  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8205  000D10  ECC5  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  8206  000D14  EE20 F0C8          	lfsr	2,200
  8207  000D18  5007               	movf	i2UART_buff_put@_this,w,c
  8208  000D1A  26D9               	addwf	fsr2l,f,c
  8209  000D1C  5008               	movf	i2UART_buff_put@_this+1,w,c
  8210  000D1E  22DA               	addwfc	fsr2h,f,c
  8211  000D20  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8212  000D24  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8213                           
  8214                           ;UART.c: 74: ++_this->count;
  8215  000D28  EE20 F0CC          	lfsr	2,204
  8216  000D2C  5007               	movf	i2UART_buff_put@_this,w,c
  8217  000D2E  26D9               	addwf	fsr2l,f,c
  8218  000D30  5008               	movf	i2UART_buff_put@_this+1,w,c
  8219  000D32  22DA               	addwfc	fsr2h,f,c
  8220  000D34  2ADE               	incf	postinc2,f,c
  8221  000D36  0E00               	movlw	0
  8222  000D38  22DD               	addwfc	postdec2,f,c
  8223                           
  8224                           ;UART.c: 75: } else {
  8225  000D3A  0012               	return	
  8226  000D3C                     i2l3173:
  8227                           
  8228                           ;UART.c: 76: _this->buf[_this->head] = c;
  8229  000D3C  EE20 F0C8          	lfsr	2,200
  8230  000D40  5007               	movf	i2UART_buff_put@_this,w,c
  8231  000D42  26D9               	addwf	fsr2l,f,c
  8232  000D44  5008               	movf	i2UART_buff_put@_this+1,w,c
  8233  000D46  22DA               	addwfc	fsr2h,f,c
  8234  000D48  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8235  000D4C  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8236  000D50  500A               	movf	??i2_UART_buff_put,w,c
  8237  000D52  2407               	addwf	i2UART_buff_put@_this,w,c
  8238  000D54  6ED9               	movwf	fsr2l,c
  8239  000D56  500B               	movf	??i2_UART_buff_put+1,w,c
  8240  000D58  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8241  000D5A  6EDA               	movwf	fsr2h,c
  8242  000D5C  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8243                           
  8244                           ;UART.c: 77: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8245  000D60  EE20 F0C8          	lfsr	2,200
  8246  000D64  5007               	movf	i2UART_buff_put@_this,w,c
  8247  000D66  26D9               	addwf	fsr2l,f,c
  8248  000D68  5008               	movf	i2UART_buff_put@_this+1,w,c
  8249  000D6A  22DA               	addwfc	fsr2h,f,c
  8250  000D6C  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8251  000D70  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8252  000D74  0E00               	movlw	0
  8253  000D76  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8254  000D78  0EC8               	movlw	200
  8255  000D7A  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8256  000D7C  ECC5  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  8257  000D80  EE20 F0C8          	lfsr	2,200
  8258  000D84  5007               	movf	i2UART_buff_put@_this,w,c
  8259  000D86  26D9               	addwf	fsr2l,f,c
  8260  000D88  5008               	movf	i2UART_buff_put@_this+1,w,c
  8261  000D8A  22DA               	addwfc	fsr2h,f,c
  8262  000D8C  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8263  000D90  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8264                           
  8265                           ;UART.c: 78: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  8266  000D94  EE20 F0CA          	lfsr	2,202
  8267  000D98  5007               	movf	i2UART_buff_put@_this,w,c
  8268  000D9A  26D9               	addwf	fsr2l,f,c
  8269  000D9C  5008               	movf	i2UART_buff_put@_this+1,w,c
  8270  000D9E  22DA               	addwfc	fsr2h,f,c
  8271  000DA0  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8272  000DA4  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8273  000DA8  0E00               	movlw	0
  8274  000DAA  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8275  000DAC  0EC8               	movlw	200
  8276  000DAE  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8277  000DB0  ECC5  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  8278  000DB4  EE20 F0CA          	lfsr	2,202
  8279  000DB8  5007               	movf	i2UART_buff_put@_this,w,c
  8280  000DBA  26D9               	addwf	fsr2l,f,c
  8281  000DBC  5008               	movf	i2UART_buff_put@_this+1,w,c
  8282  000DBE  22DA               	addwfc	fsr2h,f,c
  8283  000DC0  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8284  000DC4  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8285  000DC8  0012               	return	
  8286  000DCA                     __end_ofi2_UART_buff_put:
  8287                           	opt stack 0
  8288                           tosu	equ	0xFFF
  8289                           tosh	equ	0xFFE
  8290                           tosl	equ	0xFFD
  8291                           pclatu	equ	0xFFB
  8292                           pclath	equ	0xFFA
  8293                           tblptru	equ	0xFF8
  8294                           tblptrh	equ	0xFF7
  8295                           tblptrl	equ	0xFF6
  8296                           tablat	equ	0xFF5
  8297                           prodh	equ	0xFF4
  8298                           prodl	equ	0xFF3
  8299                           intcon	equ	0xFF2
  8300                           intcon2	equ	0xFF1
  8301                           postinc0	equ	0xFEE
  8302                           fsr0h	equ	0xFEA
  8303                           fsr0l	equ	0xFE9
  8304                           wreg	equ	0xFE8
  8305                           postdec1	equ	0xFE5
  8306                           fsr1h	equ	0xFE2
  8307                           fsr1l	equ	0xFE1
  8308                           indf2	equ	0xFDF
  8309                           postinc2	equ	0xFDE
  8310                           postdec2	equ	0xFDD
  8311                           plusw2	equ	0xFDB
  8312                           fsr2h	equ	0xFDA
  8313                           fsr2l	equ	0xFD9
  8314                           status	equ	0xFD8
  8315                           
  8316 ;; *************** function i2_UART_buff_modulo_inc *****************
  8317 ;; Defined at:
  8318 ;;		line 108 in file "UART.c"
  8319 ;; Parameters:    Size  Location     Type
  8320 ;;  value           2    0[COMRAM] const unsigned int 
  8321 ;;  modulus         2    2[COMRAM] const unsigned int 
  8322 ;; Auto vars:     Size  Location     Type
  8323 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  8324 ;; Return value:  Size  Location     Type
  8325 ;;                  2    0[COMRAM] unsigned int 
  8326 ;; Registers used:
  8327 ;;		wreg, status,2, status,0
  8328 ;; Tracked objects:
  8329 ;;		On entry : 0/0
  8330 ;;		On exit  : 0/0
  8331 ;;		Unchanged: 0/0
  8332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8333 ;;      Params:         4       0       0       0       0       0       0
  8334 ;;      Locals:         2       0       0       0       0       0       0
  8335 ;;      Temps:          0       0       0       0       0       0       0
  8336 ;;      Totals:         6       0       0       0       0       0       0
  8337 ;;Total ram usage:        6 bytes
  8338 ;; Hardware stack levels used:    1
  8339 ;; This function calls:
  8340 ;;		Nothing
  8341 ;; This function is called by:
  8342 ;;		i2_UART_buff_put
  8343 ;;		i2_UART_buff_get
  8344 ;; This function uses a non-reentrant model
  8345 ;;
  8346                           
  8347                           	psect	text49
  8348  00178A                     __ptext49:
  8349                           	opt stack 0
  8350  00178A                     i2_UART_buff_modulo_inc:
  8351                           	opt stack 20
  8352                           
  8353                           ;UART.c: 109: unsigned int my_value = value + 1;
  8354                           
  8355                           ;incstack = 0
  8356  00178A  0E01               	movlw	1
  8357  00178C  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  8358  00178E  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  8359  001790  0E00               	movlw	0
  8360  001792  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  8361  001794  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  8362                           
  8363                           ;UART.c: 110: if (my_value >= modulus) {
  8364  001796  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  8365  001798  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  8366  00179A  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  8367  00179C  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  8368  00179E  A0D8               	btfss	status,0,c
  8369  0017A0  D004               	goto	i2l3063
  8370                           
  8371                           ;UART.c: 111: my_value = 0;
  8372  0017A2  0E00               	movlw	0
  8373  0017A4  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  8374  0017A6  0E00               	movlw	0
  8375  0017A8  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  8376  0017AA                     i2l3063:
  8377                           
  8378                           ;UART.c: 112: }
  8379                           ;UART.c: 113: return (my_value);
  8380  0017AA  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  8381  0017AE  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  8382  0017B2  0012               	return	
  8383  0017B4                     __end_ofi2_UART_buff_modulo_inc:
  8384                           	opt stack 0
  8385                           tosu	equ	0xFFF
  8386                           tosh	equ	0xFFE
  8387                           tosl	equ	0xFFD
  8388                           pclatu	equ	0xFFB
  8389                           pclath	equ	0xFFA
  8390                           tblptru	equ	0xFF8
  8391                           tblptrh	equ	0xFF7
  8392                           tblptrl	equ	0xFF6
  8393                           tablat	equ	0xFF5
  8394                           prodh	equ	0xFF4
  8395                           prodl	equ	0xFF3
  8396                           intcon	equ	0xFF2
  8397                           intcon2	equ	0xFF1
  8398                           postinc0	equ	0xFEE
  8399                           fsr0h	equ	0xFEA
  8400                           fsr0l	equ	0xFE9
  8401                           wreg	equ	0xFE8
  8402                           postdec1	equ	0xFE5
  8403                           fsr1h	equ	0xFE2
  8404                           fsr1l	equ	0xFE1
  8405                           indf2	equ	0xFDF
  8406                           postinc2	equ	0xFDE
  8407                           postdec2	equ	0xFDD
  8408                           plusw2	equ	0xFDB
  8409                           fsr2h	equ	0xFDA
  8410                           fsr2l	equ	0xFD9
  8411                           status	equ	0xFD8
  8412                           
  8413 ;; *************** function _EUSART1_Transmit_ISR *****************
  8414 ;; Defined at:
  8415 ;;		line 155 in file "mcc_generated_files/eusart2.c"
  8416 ;; Parameters:    Size  Location     Type
  8417 ;;		None
  8418 ;; Auto vars:     Size  Location     Type
  8419 ;;		None
  8420 ;; Return value:  Size  Location     Type
  8421 ;;                  1    wreg      void 
  8422 ;; Registers used:
  8423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8424 ;; Tracked objects:
  8425 ;;		On entry : 0/0
  8426 ;;		On exit  : 0/0
  8427 ;;		Unchanged: 0/0
  8428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8429 ;;      Params:         0       0       0       0       0       0       0
  8430 ;;      Locals:         0       0       0       0       0       0       0
  8431 ;;      Temps:          0       0       0       0       0       0       0
  8432 ;;      Totals:         0       0       0       0       0       0       0
  8433 ;;Total ram usage:        0 bytes
  8434 ;; Hardware stack levels used:    1
  8435 ;; This function calls:
  8436 ;;		Nothing
  8437 ;; This function is called by:
  8438 ;;		_INTERRUPT_InterruptManager
  8439 ;; This function uses a non-reentrant model
  8440 ;;
  8441                           
  8442                           	psect	text50
  8443  001684                     __ptext50:
  8444                           	opt stack 0
  8445  001684                     _EUSART1_Transmit_ISR:
  8446                           	opt stack 22
  8447                           
  8448                           ;eusart2.c: 158: if (sizeof (eusart1TxBuffer) > eusart1TxBufferRemaining) {
  8449                           
  8450                           ;incstack = 0
  8451  001684  0E08               	movlw	8
  8452  001686  6042               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
  8453  001688  D012               	goto	i2l62
  8454                           
  8455                           ;eusart2.c: 159: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  8456  00168A  5034               	movf	_eusart1TxTail,w,c
  8457  00168C  0D01               	mullw	1
  8458  00168E  0E73               	movlw	low _eusart1TxBuffer
  8459  001690  24F3               	addwf	prodl,w,c
  8460  001692  6ED9               	movwf	fsr2l,c
  8461  001694  0E00               	movlw	high _eusart1TxBuffer
  8462  001696  20F4               	addwfc	prodh,w,c
  8463  001698  6EDA               	movwf	fsr2h,c
  8464  00169A  50DF               	movf	indf2,w,c
  8465  00169C  6EAD               	movwf	4013,c	;volatile
  8466  00169E  2A34               	incf	_eusart1TxTail,f,c
  8467                           
  8468                           ;eusart2.c: 160: if (sizeof (eusart1TxBuffer) <= eusart1TxTail) {
  8469  0016A0  0E07               	movlw	7
  8470  0016A2  6434               	cpfsgt	_eusart1TxTail,c
  8471  0016A4  D002               	goto	i2l3225
  8472                           
  8473                           ;eusart2.c: 161: eusart1TxTail = 0;
  8474  0016A6  0E00               	movlw	0
  8475  0016A8  6E34               	movwf	_eusart1TxTail,c
  8476  0016AA                     i2l3225:
  8477                           
  8478                           ;eusart2.c: 162: }
  8479                           ;eusart2.c: 163: eusart1TxBufferRemaining++;
  8480  0016AA  2A42               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  8481                           
  8482                           ;eusart2.c: 164: } else {
  8483  0016AC  0012               	return	
  8484  0016AE                     i2l62:
  8485                           
  8486                           ;eusart2.c: 165: PIE1bits.TX1IE = 0;
  8487  0016AE  989D               	bcf	3997,4,c	;volatile
  8488  0016B0  0012               	return	
  8489  0016B2                     __end_of_EUSART1_Transmit_ISR:
  8490                           	opt stack 0
  8491                           tosu	equ	0xFFF
  8492                           tosh	equ	0xFFE
  8493                           tosl	equ	0xFFD
  8494                           pclatu	equ	0xFFB
  8495                           pclath	equ	0xFFA
  8496                           tblptru	equ	0xFF8
  8497                           tblptrh	equ	0xFF7
  8498                           tblptrl	equ	0xFF6
  8499                           tablat	equ	0xFF5
  8500                           prodh	equ	0xFF4
  8501                           prodl	equ	0xFF3
  8502                           intcon	equ	0xFF2
  8503                           intcon2	equ	0xFF1
  8504                           postinc0	equ	0xFEE
  8505                           fsr0h	equ	0xFEA
  8506                           fsr0l	equ	0xFE9
  8507                           wreg	equ	0xFE8
  8508                           postdec1	equ	0xFE5
  8509                           fsr1h	equ	0xFE2
  8510                           fsr1l	equ	0xFE1
  8511                           indf2	equ	0xFDF
  8512                           postinc2	equ	0xFDE
  8513                           postdec2	equ	0xFDD
  8514                           plusw2	equ	0xFDB
  8515                           fsr2h	equ	0xFDA
  8516                           fsr2l	equ	0xFD9
  8517                           status	equ	0xFD8
  8518                           
  8519 ;; *************** function _EUSART1_Receive_ISR *****************
  8520 ;; Defined at:
  8521 ;;		line 169 in file "mcc_generated_files/eusart2.c"
  8522 ;; Parameters:    Size  Location     Type
  8523 ;;		None
  8524 ;; Auto vars:     Size  Location     Type
  8525 ;;		None
  8526 ;; Return value:  Size  Location     Type
  8527 ;;                  1    wreg      void 
  8528 ;; Registers used:
  8529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8530 ;; Tracked objects:
  8531 ;;		On entry : 0/0
  8532 ;;		On exit  : 0/0
  8533 ;;		Unchanged: 0/0
  8534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8535 ;;      Params:         0       0       0       0       0       0       0
  8536 ;;      Locals:         0       0       0       0       0       0       0
  8537 ;;      Temps:          0       0       0       0       0       0       0
  8538 ;;      Totals:         0       0       0       0       0       0       0
  8539 ;;Total ram usage:        0 bytes
  8540 ;; Hardware stack levels used:    1
  8541 ;; This function calls:
  8542 ;;		Nothing
  8543 ;; This function is called by:
  8544 ;;		_INTERRUPT_InterruptManager
  8545 ;; This function uses a non-reentrant model
  8546 ;;
  8547                           
  8548                           	psect	text51
  8549  00170A                     __ptext51:
  8550                           	opt stack 0
  8551  00170A                     _EUSART1_Receive_ISR:
  8552                           	opt stack 22
  8553                           
  8554                           ;eusart2.c: 170: if (1 == RC1STAbits.OERR) {
  8555                           
  8556                           ;incstack = 0
  8557  00170A  A2AB               	btfss	4011,1,c	;volatile
  8558  00170C  D002               	goto	i2l3231
  8559                           
  8560                           ;eusart2.c: 173: RC1STAbits.CREN = 0;
  8561  00170E  98AB               	bcf	4011,4,c	;volatile
  8562                           
  8563                           ;eusart2.c: 174: RC1STAbits.CREN = 1;
  8564  001710  88AB               	bsf	4011,4,c	;volatile
  8565  001712                     i2l3231:
  8566                           
  8567                           ;eusart2.c: 175: }
  8568                           ;eusart2.c: 178: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
  8569  001712  5031               	movf	_eusart1RxHead,w,c
  8570  001714  0D01               	mullw	1
  8571  001716  0E6B               	movlw	low _eusart1RxBuffer
  8572  001718  24F3               	addwf	prodl,w,c
  8573  00171A  6ED9               	movwf	fsr2l,c
  8574  00171C  0E00               	movlw	high _eusart1RxBuffer
  8575  00171E  20F4               	addwfc	prodh,w,c
  8576  001720  6EDA               	movwf	fsr2h,c
  8577  001722  CFAE FFDF          	movff	4014,indf2	;volatile
  8578  001726  2A31               	incf	_eusart1RxHead,f,c
  8579                           
  8580                           ;eusart2.c: 179: if (sizeof (eusart1RxBuffer) <= eusart1RxHead) {
  8581  001728  0E07               	movlw	7
  8582  00172A  6431               	cpfsgt	_eusart1RxHead,c
  8583  00172C  D002               	goto	i2l3239
  8584                           
  8585                           ;eusart2.c: 180: eusart1RxHead = 0;
  8586  00172E  0E00               	movlw	0
  8587  001730  6E31               	movwf	_eusart1RxHead,c
  8588  001732                     i2l3239:
  8589                           
  8590                           ;eusart2.c: 181: }
  8591                           ;eusart2.c: 182: eusart1RxCount++;
  8592  001732  2A30               	incf	_eusart1RxCount,f,c	;volatile
  8593  001734  0012               	return		;funcret
  8594  001736                     __end_of_EUSART1_Receive_ISR:
  8595                           	opt stack 0
  8596                           tosu	equ	0xFFF
  8597                           tosh	equ	0xFFE
  8598                           tosl	equ	0xFFD
  8599                           pclatu	equ	0xFFB
  8600                           pclath	equ	0xFFA
  8601                           tblptru	equ	0xFF8
  8602                           tblptrh	equ	0xFF7
  8603                           tblptrl	equ	0xFF6
  8604                           tablat	equ	0xFF5
  8605                           prodh	equ	0xFF4
  8606                           prodl	equ	0xFF3
  8607                           intcon	equ	0xFF2
  8608                           intcon2	equ	0xFF1
  8609                           postinc0	equ	0xFEE
  8610                           fsr0h	equ	0xFEA
  8611                           fsr0l	equ	0xFE9
  8612                           wreg	equ	0xFE8
  8613                           postdec1	equ	0xFE5
  8614                           fsr1h	equ	0xFE2
  8615                           fsr1l	equ	0xFE1
  8616                           indf2	equ	0xFDF
  8617                           postinc2	equ	0xFDE
  8618                           postdec2	equ	0xFDD
  8619                           plusw2	equ	0xFDB
  8620                           fsr2h	equ	0xFDA
  8621                           fsr2l	equ	0xFD9
  8622                           status	equ	0xFD8
  8623                           tosu	equ	0xFFF
  8624                           tosh	equ	0xFFE
  8625                           tosl	equ	0xFFD
  8626                           pclatu	equ	0xFFB
  8627                           pclath	equ	0xFFA
  8628                           tblptru	equ	0xFF8
  8629                           tblptrh	equ	0xFF7
  8630                           tblptrl	equ	0xFF6
  8631                           tablat	equ	0xFF5
  8632                           prodh	equ	0xFF4
  8633                           prodl	equ	0xFF3
  8634                           intcon	equ	0xFF2
  8635                           intcon2	equ	0xFF1
  8636                           postinc0	equ	0xFEE
  8637                           fsr0h	equ	0xFEA
  8638                           fsr0l	equ	0xFE9
  8639                           wreg	equ	0xFE8
  8640                           postdec1	equ	0xFE5
  8641                           fsr1h	equ	0xFE2
  8642                           fsr1l	equ	0xFE1
  8643                           indf2	equ	0xFDF
  8644                           postinc2	equ	0xFDE
  8645                           postdec2	equ	0xFDD
  8646                           plusw2	equ	0xFDB
  8647                           fsr2h	equ	0xFDA
  8648                           fsr2l	equ	0xFD9
  8649                           status	equ	0xFD8
  8650                           
  8651                           	psect	text52
  8652  000000                     __ptext52:
  8653                           	opt stack 0
  8654                           tosu	equ	0xFFF
  8655                           tosh	equ	0xFFE
  8656                           tosl	equ	0xFFD
  8657                           pclatu	equ	0xFFB
  8658                           pclath	equ	0xFFA
  8659                           tblptru	equ	0xFF8
  8660                           tblptrh	equ	0xFF7
  8661                           tblptrl	equ	0xFF6
  8662                           tablat	equ	0xFF5
  8663                           prodh	equ	0xFF4
  8664                           prodl	equ	0xFF3
  8665                           intcon	equ	0xFF2
  8666                           intcon2	equ	0xFF1
  8667                           postinc0	equ	0xFEE
  8668                           fsr0h	equ	0xFEA
  8669                           fsr0l	equ	0xFE9
  8670                           wreg	equ	0xFE8
  8671                           postdec1	equ	0xFE5
  8672                           fsr1h	equ	0xFE2
  8673                           fsr1l	equ	0xFE1
  8674                           indf2	equ	0xFDF
  8675                           postinc2	equ	0xFDE
  8676                           postdec2	equ	0xFDD
  8677                           plusw2	equ	0xFDB
  8678                           fsr2h	equ	0xFDA
  8679                           fsr2l	equ	0xFD9
  8680                           status	equ	0xFD8
  8681                           
  8682                           	psect	rparam
  8683  0000                     tosu	equ	0xFFF
  8684                           tosh	equ	0xFFE
  8685                           tosl	equ	0xFFD
  8686                           pclatu	equ	0xFFB
  8687                           pclath	equ	0xFFA
  8688                           tblptru	equ	0xFF8
  8689                           tblptrh	equ	0xFF7
  8690                           tblptrl	equ	0xFF6
  8691                           tablat	equ	0xFF5
  8692                           prodh	equ	0xFF4
  8693                           prodl	equ	0xFF3
  8694                           intcon	equ	0xFF2
  8695                           intcon2	equ	0xFF1
  8696                           postinc0	equ	0xFEE
  8697                           fsr0h	equ	0xFEA
  8698                           fsr0l	equ	0xFE9
  8699                           wreg	equ	0xFE8
  8700                           postdec1	equ	0xFE5
  8701                           fsr1h	equ	0xFE2
  8702                           fsr1l	equ	0xFE1
  8703                           indf2	equ	0xFDF
  8704                           postinc2	equ	0xFDE
  8705                           postdec2	equ	0xFDD
  8706                           plusw2	equ	0xFDB
  8707                           fsr2h	equ	0xFDA
  8708                           fsr2l	equ	0xFD9
  8709                           status	equ	0xFD8
  8710                           
  8711                           	psect	temp
  8712  000045                     btemp:
  8713                           	opt stack 0
  8714  000045                     	ds	1
  8715  0000                     int$flags	set	btemp
  8716                           tosu	equ	0xFFF
  8717                           tosh	equ	0xFFE
  8718                           tosl	equ	0xFFD
  8719                           pclatu	equ	0xFFB
  8720                           pclath	equ	0xFFA
  8721                           tblptru	equ	0xFF8
  8722                           tblptrh	equ	0xFF7
  8723                           tblptrl	equ	0xFF6
  8724                           tablat	equ	0xFF5
  8725                           prodh	equ	0xFF4
  8726                           prodl	equ	0xFF3
  8727                           intcon	equ	0xFF2
  8728                           intcon2	equ	0xFF1
  8729                           postinc0	equ	0xFEE
  8730                           fsr0h	equ	0xFEA
  8731                           fsr0l	equ	0xFE9
  8732                           wreg	equ	0xFE8
  8733                           postdec1	equ	0xFE5
  8734                           fsr1h	equ	0xFE2
  8735                           fsr1l	equ	0xFE1
  8736                           indf2	equ	0xFDF
  8737                           postinc2	equ	0xFDE
  8738                           postdec2	equ	0xFDD
  8739                           plusw2	equ	0xFDB
  8740                           fsr2h	equ	0xFDA
  8741                           fsr2l	equ	0xFD9
  8742                           status	equ	0xFD8


Data Sizes:
    Strings     46
    Constant    490
    Data        1
    BSS         992
    Persistent  18
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      68
    BANK0           160     27     139
    BANK1           256      0     256
    BANK2           256      0     200
    BANK3           256      0     206
    BANK4           256      0     206
    BANK5           256      0       0

Pointer List with Targets:

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 10
		 -> SetCharger@str(COMRAM[10]), NULL(NULL[0]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 10
		 -> SetCharger@str(COMRAM[10]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    S2201__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S2201__prbuf$ptr	PTR unsigned char  size(2) Largest target is 10
		 -> SetCharger@str(COMRAM[10]), NULL(NULL[0]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 10
		 -> SetCharger@str(COMRAM[10]), NULL(NULL[0]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> ChargerData(BANK0[40]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK3[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1756(BANK0[3]), receiveData@holder(BANK0[3]), rx_buffer(BANK2[200]), 
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 50
		 -> receiveArray(BANK1[50]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 50
		 -> receiveArray(BANK1[50]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _FastTransfer_buffer_flush->_memset
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART2_Receive_ISR
    _EUSART2_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART2_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondChargerAsECU->_sendData
    _SetBMM->_receiveData
    _sendData->_FastTransfer_buffer_flush
    _receiveData->_CRCcheck
    _CRCcheck->_crcBufS_get
    _ToSend->_FastTransfer_buffer_put
    _CommsStart->_begin

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   40047
                  _SYSTEM_Initialize
                             _SetBMM
                           _ledDebug
                       _updateTimers
 ---------------------------------------------------------------------------------
 (1) _updateTimers                                         8     8      0       0
                                             26 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (1) _ledDebug                                             0     0      0   18935
                _respondChargerAsECU
                           _time_Set
                           _time_get
                        _updateComms
 ---------------------------------------------------------------------------------
 (2) _updateComms                                          0     0      0   10715
                        _receiveData
 ---------------------------------------------------------------------------------
 (2) _time_get                                             3     1      2      22
                                             26 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _time_Set                                             3     1      2     108
                                             26 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _respondChargerAsECU                                  0     0      0    8090
                              _Delay
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (1) _SetBMM                                               0     0      0   18805
                              _Delay
                             _ToSend
                        _receiveData
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    5704
                                              4 BANK0      5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                              0 BANK0      4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _receiveData                                         18    18      0   10715
                                              9 BANK0     18    18      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                              0 BANK0      1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (5) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _CRCcheck                                             7     7      0    5114
                                              2 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (5) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (5) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    10     6      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (5) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (5) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1828
                                              2 BANK0      3     1      2
            _FastTransfer_buffer_put
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     558
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2307
                         _CommsStart
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0       0
                                             26 COMRAM     2     2      0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CommsStart                                           0     0      0    2307
                 _EUSART1_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (3) _begin                                               13     0     13    1292
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     428
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (4) _UART_buff_init                                       2     0      2    1015
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                _EUSART2_Receive_ISR
               _EUSART2_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART2_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_size                                    2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_get                                     5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _EUSART2_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_put                                     5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (11) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _CommsStart
       _EUSART1_Initialize
         _UART_buff_init
           _memset
       _begin
         ___awdiv
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _SetBMM
     _Delay
     _ToSend
       _FastTransfer_buffer_put
         _FastTransfer_buffer_modulo_inc
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _sendData
       Absolute function(Fake) *
       _CRC8 *
       _FastTransfer_buffer_flush *
         _memset
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
       _crcBufS_put *
   _ledDebug
     _respondChargerAsECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
       _sendData
         Absolute function(Fake) *
         _CRC8 *
         _FastTransfer_buffer_flush *
           _memset
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _crcBufS_put *
     _time_Set
     _time_get
     _updateComms
       _receiveData
         Absolute function(Fake) *
         _CRC8 *
         _CRCcheck *
           Absolute function(Fake) *
           _CRC8 *
           _Receive_available *
             _UART_buff_size
           _Receive_get *
             _UART_buff_get
               _UART_buff_modulo_inc
           _crcBufS_get *
           _crcBufS_status_put *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _Receive_peek *
           _UART_buff_peek
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
   _updateTimers

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _EUSART2_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART2_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C8       8       78.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0     100       6      100.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1B      8B       4       86.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     433       9        0.0%
DATA                 0      0     433      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Sep 12 05:01:45 2016

      __end_of_FastTransfer_buffer_flush 136E                   i2_UART_buff_modulo_inc 178A  
               _eusart1TxBufferRemaining 0042                                        _i 0035  
                           _rx_array_inx 0038                             ___awdiv@sign 0020  
                EUSART2_Receive_ISR@data 000C                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                                      l614 10F8  
                                    l455 14BC                                      l569 0A46  
                                    l690 15AA                             __CFG_CPB$OFF 000000  
                           __CFG_CPD$OFF 000000     FastTransfer_buffer_flush@clearBuffer 00CA  
                       time_get@WhatTime 001D                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
          i2UART_buff_modulo_inc@modulus 0003                             __CFG_LVP$OFF 000000  
                                   l4001 021A                                     l4101 0660  
                                   l4021 027C                                     l3055 1596  
                                   l4111 06E2                                     l4103 067A  
                                   l4007 0226                                     l4113 06FC  
                                   l4105 0694                                     l4009 024C  
                                   l4025 02AE                                     l4115 074A  
                                   l4107 06AE                                     l4043 0412  
                                   l4203 1514                                     l4109 06C8  
                                   l4117 0766                                     l4061 04CE  
                                   l4045 0418                                     l4037 0372  
                                   l4029 02D6                                     l4125 0772  
                                   l4141 0ACA                                     l4071 0550  
                                   l4063 04E8                                     l4047 042C  
                                   l4143 0AE6                                     l4135 0A7A  
                                   l4073 056A                                     l4065 0502  
                                   l4153 0B62                                     l4145 0AF2  
                                   l4137 0A94                                     l4225 17E6  
                                   l2811 11FA                                     l4075 05B8  
                                   l4067 051C                                     l4147 0B20  
                                   l4139 0AB0                                     l4227 17F0  
                                   l4069 0536                                     l4077 05D4  
                                   l4149 0B26                                     l2815 1208  
                                   l2807 11F0                                     l4087 05E0  
                                   l3801 0DD4                                     l3805 0DDE  
                                   l3901 0A36                                     l2783 11A2  
                                   l3911 079E                                     l3737 1756  
                                   l3817 0E72                                     l3833 1024  
                                   l3825 0F9E                                     l3905 0A3E  
                                   l2795 11C8                                     l3843 0C22  
                                   l2797 11D0                                     l2789 11B2  
                                   l3765 14A6                                     l3773 14C2  
                                   l3749 10F4                                     l3837 0BB6  
                                   l3791 16E8                                     l2799 11D4  
                                   l3759 1490                                     l3775 14C8  
                                   l3785 1780                                     l3873 08EA  
                   receiveData@crcHolder 00DD                                     l3795 16F8  
                                   l3883 09AC                                     l3875 0912  
                                   l3973 011A                                     l3887 09C2  
                                   l3991 01DA                                     l3897 0A16  
                                   l3993 01E0                                     l3969 00EC  
                                   l3977 011E                                     l3989 01C2  
                                   STR_1 7FF9                                     STR_2 7FFC  
                                   STR_3 7FF3                                     STR_7 7FDD  
                                   _CRC8 148A                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATC 000F8B  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   u4008 022A                                     u4009 023E  
                                   u4028 0250                                     u4029 0266  
                                   u4208 056E                                     u4048 0280  
                                   u4081 0316                                     u4049 0294  
                                   u4218 05BC                                     u4138 04B8  
                                   u4058 02B2                                     u4410 18B6  
                                   u4059 02C6                                     u3540 1088  
                                   u4308 0700                                     u4148 04D2  
                                   u4318 074E                                     u4238 064A  
                                   u4158 04EC                                     u4248 0664  
                                   u4168 0506                                     u4328 0A64  
                                   u4440 166C                                     u4258 067E  
                                   u4178 0520                                     u4338 0A7E  
                                   u3811 079C                                     u3708 0916  
                                   u4268 0698                                     u4188 053A  
                                   u3660 0F7E                                     u4348 0A98  
                                   u4517 159C                                     u3709 092A  
                                   u3718 0932                                     u4278 06B2  
                                   u4198 0554                                     u4358 0AB4  
                                   u3719 0946                                     u3728 094E  
                                   u4288 06CC                                     u4368 0ACE  
                                   u3729 0962                                     u3738 096A  
                                   u4298 06E6                                     u4378 0AF6  
                                   u3739 097E                                     u3908 0140  
                                   u3909 0154                                     u4398 0B4A  
                                   u3688 08EE                                     u3928 015E  
                                   u3848 00C6                                     u3689 0902  
                                   u3929 0172                                     u3849 00DA  
                                   u3938 0178                                     u3939 018C  
                                   u3948 0192                                     u3868 00F6  
                                   u3949 01A6                                     u3869 010A  
                                   i2l62 16AE                                     u3968 01C6  
                                   u3888 0122                                     u3889 0136  
                                   _WPUB 000F61                    ??_EUSART2_Receive_ISR 000C  
                                   _main 17D8                    ??_respondChargerAsECU 0026  
                        _TMR0_StartTimer 1944                                     _time 0026  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     btemp 0045  
                          __CFG_BORV$190 000000                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 08EA                                     start 00B8  
                          __CFG_IESO$OFF 000000             __end_of_EUSART2_Transmit_ISR 1626  
                           ___param_bank 000010           i2UART_buff_modulo_inc@my_value 0005  
                                  ?_CRC8 001B                  __end_of_TMR0_Initialize 16DE  
                       __end_of_CRCcheck 0A48           __size_of_OSCILLATOR_Initialize 000E  
          __end_of_OSCILLATOR_Initialize 1938                       crcBufS_put@address 001D  
                                  ?_main 0001                          __end_of___awdiv 1212  
                                  STR_17 7FD1                                    STR_18 7FEC  
                                  STR_19 7FE5                                    _ANSB0 0079C8  
                                  _ANSB1 0079C9                                    _ANSA3 0079C3  
                                  _T0CON 000FD5                          ___awdiv@divisor 001D  
                                  _LATB0 007C50                                    _LATB1 007C51  
                                  _LATA3 007C4B                                    _LATC0 007C58  
                                  _LATC1 007C59                                    _LATB3 007C53  
                                  _LATD0 007C60                                    _LATB4 007C54  
                                  _LATB5 007C55                                    _LATA7 007C4F  
                                  _LATD3 007C63                           __CFG_DEBUG$OFF 000000  
                                  i2l170 004E                                    i2l172 005A  
                                  i2l180 007C                                    i2l174 0066  
                                  i2l176 0072                                    i2l614 118A  
                                  i2l645 185C                          ___awdiv@counter 001F  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96                                    _Delay 158C  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                              _ChargerData 008F  
                          __CFG_WRT3$OFF 000000                     _EUSART1_Transmit_ISR 1684  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                         __end_of_TMR0_ISR 18A4  
                                  _Start 002A                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                             _CommsStart 1432                                    _begin 13D2  
                                  _ddata 0060                           __CFG_EBTRB$OFF 000000  
                        __end_of_dpowers 7FD1                                    _group 002C  
                     __CFG_MCLRE$EXTMCLR 000000                                    _putch 000000  
                                  pclath 000FFA                                    tablat 000FF5  
                          ??_Receive_get 0026                     __size_of_crcBufS_get 00F2  
                                  plusw2 000FDB                           begin@stuffpeek 00D3  
                   __size_of_crcBufS_put 00D8                                    status 000FD8  
                         __CFG_HFOFST$ON 000000                             ?_receiveData 0001  
                         __CFG_PBADEN$ON 000000                             __end_of_CRC8 14D4  
                        CRCcheck@SentCRC 00CA                          __initialization 1292  
             __end_of_EUSART1_Initialize 1554                             __end_of_main 17FA  
                             ToSend@what 00CA                                   ??_CRC8 001E  
            ?_INTERRUPT_InterruptManager 0001                                   ??_main 0026  
                          __activetblptr 000002                         __end_of_Send_put 1656  
              __size_ofi2_UART_buff_size 0016                                   ?_Delay 001B  
                  ?_EUSART1_Transmit_ISR 0001            FastTransfer_buffer_put@towhat 0024  
                          ?_Receive_peek 0001                                   ?_begin 00C8  
                __end_of_TMR0_StartTimer 1948               __end_of_EUSART2_Initialize 15F4  
                       ___awdiv@dividend 001B                                   _ANSELA 000F38  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                                   _ANSELE 000F3C  
                        i2_UART_buff_get 10FC                                   _RC1STA 000FAB  
                                 _RC2STA 000F71                          i2_UART_buff_put 0CB0  
                                 Delay@i 001E                                   i2l3231 1712  
                                 i2l3063 17AA                                   i2l3225 16AA  
                                 i2l3251 161E                                   i2l3173 0D3C  
                         __CFG_WDTEN$OFF 000000                                   i2l3239 1732  
                                 i2l3167 0CD0                                   i2l3187 1186  
            UART_buff_modulo_inc@modulus 001D                                   _RCREG1 000FAE  
                                 _RCREG2 000F74                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                                   _SPBRG2 000F75  
                                 _TX1STA 000FAC                                   _TX2STA 000F72  
                                 _TRISB0 007C98                                   _TRISB1 007C99  
                                 _TRISD0 007CA8                                   _TRISD2 007CAA  
                                 _TRISD3 007CAB                                   _TXREG1 000FAD  
                                 _TXREG2 000F73                         __end_of_ledDebug 1684  
                                 _SetBMM 14D4                           __CFG_XINST$OFF 000000  
                                 _ToSend 1818                      __end_of_Receive_get 192A  
                       crcBufS_get@_this 001B              ??_FastTransfer_buffer_flush 0023  
                          _output_buffer 0400                         crcBufS_get@space 001E  
                              ??___awdiv 001F                                CRC8@tempI 0020  
                         __CFG_STVREN$ON 000000                         ?_TMR0_Initialize 0001  
                                 _memset 16DE                                   clear_0 1298  
                                 clear_1 12A4                                   clear_2 12B0  
                                 clear_3 12BE                                   clear_4 12D0  
                                 clear_5 12DC                         ___awdiv@quotient 0021  
                                 _rx_len 0039                         __end_of_sendData 0B96  
                           __pdataCOMRAM 0044                         __end_of_time_Set 1818  
                       __end_of_time_get 190E                            Send_put@_data 00C8  
                           __mediumconst 7DE6                           ??_Receive_peek 001F  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8         __size_of_FastTransfer_buffer_put 0174  
                   _EUSART2_Transmit_ISR 15F4                              ?_CommsStart 0001  
           __end_of_UART_buff_modulo_inc 1760                          _eusart1RxBuffer 006B  
          __size_of_INTERRUPT_Initialize 000C                          _eusart1TxBuffer 0073  
                      _SYSTEM_Initialize 1872                               __accesstop 0060  
                __end_of__initialization 12F4                                ?_CRCcheck 0001  
                     ?_SYSTEM_Initialize 0001                            ___rparam_used 000001  
                ?i2_UART_buff_modulo_inc 0001                             ?_updateComms 0001  
                          __end_of_Delay 15C0                           __pcstackCOMRAM 0001  
                     _crcBufS_status_put 0F94                      ??_SYSTEM_Initialize 0025  
                       crcBufS_put@_this 001B                            __end_of_begin 1432  
                              ?_TMR0_ISR 0001   __end_of_FastTransfer_buffer_modulo_inc 178A  
__size_of_FastTransfer_buffer_modulo_inc 002A           _FastTransfer_buffer_modulo_inc 1760  
           FastTransfer_buffer_put@_this 0021                              ToSend@where 00CC  
                     UART_buff_get@_this 0021                      ?_crcBufS_status_put 001B  
                  __end_of_UART_buff_get 10FC                   ??_EUSART1_Transmit_ISR 0001  
                  __end_of_UART_buff_put 0CB0                                  ??_Delay 001D  
                __end_ofi2_UART_buff_get 118E                  __end_ofi2_UART_buff_put 0DCA  
                  ?_EUSART2_Transmit_ISR 0001              __end_of_EUSART1_Receive_ISR 1736  
              _FastTransfer_buffer_flush 1302                                  CRC8@crc 0021  
                                CRC8@len 001D                                  CRC8@sum 001E  
                                ??_begin 0023                         ?_TMR0_StartTimer 0001  
              __end_of_SYSTEM_Initialize 188C                   receiveData@holder_1756 00DA  
                          _eusart1RxHead 0031                      _addressErrorCounter 0087  
                          _eusart1TxHead 0033                            _eusart1RxTail 0032  
                             __pbssBANK0 0060                               __pbssBANK1 0100  
                             __pbssBANK2 0200                               __pbssBANK3 0300  
                             __pbssBANK4 0400                       __end_of_FONTLOOKUP 7FC7  
                          _eusart1TxTail 0034                          __CFG_PLLCFG$OFF 000000  
                            _Receive_get 191C                               ??_CRCcheck 0026  
                   ??_crcBufS_status_put 001F           __end_ofi2_UART_buff_modulo_inc 17B4  
                             __pnvCOMRAM 003A                        begin@givenAddress 00CB  
                __size_of_UART_buff_init 001E                  __size_of_UART_buff_peek 0024  
                __size_of_UART_buff_size 0016                                  ?_SetBMM 0001  
                              ?_Send_put 0001                     __size_of_receiveData 06BA  
                                ?_ToSend 00CA                       __CFG_CCP2MX$PORTC1 000000  
                             ??_TMR0_ISR 0001                      __size_of_CommsStart 0058  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 001B  
                                ?_memset 001B                               _crc_buffer 00B7  
                       time_Set@WhatTime 001D                       UART_buff_put@_this 0021  
                       i2_UART_buff_size 18E6              i2UART_buff_modulo_inc@value 0001  
                                _LEDtime 007B                                  _OSCCON2 000FD2  
            __end_of_EUSART2_Receive_ISR 1872                        _Receive_available 18BA  
           UART_buff_modulo_inc@my_value 001F                        __CFG_PRICLKEN$OFF 000000  
                                _OSCTUNE 000F9B                                ?_ledDebug 0001  
                                _SPBRGH1 000FB0                                  _SPBRGH2 000F76  
                                _SSP1ADD 000FC8                      sendData@whereToSend 00CD  
                    _receiveArrayAddress 00E3                                  _SSP1BUF 000FC9  
            __end_of_respondChargerAsECU 158C                       ?_Receive_available 001D  
                             begin@error 00CC                      ??_Receive_available 001F  
                              ?_sendData 0001                        _alignErrorCounter 0089  
                        __CFG_PWRTEN$OFF 000000                               ??_Send_put 0026  
                                __Hparam 0000                                  __Lparam 0000  
                        __size_of_SetBMM 0044                                ?_time_Set 001B  
                        __size_of_ToSend 001E                     __end_of_Receive_peek 191C  
                              ?_time_get 001B                                  _PowerOn 002E  
                              _AKNAKsend 00E9                                  ___awdiv 118E  
                   _UART_buff_modulo_inc 1736                                  _calc_CS 002F  
                                __pcinit 1292                          __size_of_memset 002C  
                                __ramtop 0600                         i2UART_buff_get@c 000B  
                                __ptext0 17D8                                  __ptext1 136E  
                                __ptext2 1656                                  __ptext3 18A4  
                                __ptext4 18FC                                  __ptext5 17FA  
                                __ptext6 1554                                  __ptext7 14D4  
                                __ptext8 0A48                                  __ptext9 0EBC  
                              _T0CONbits 000FD5                         i2UART_buff_put@c 0009  
                                _dpowers 7FC7                    _OSCILLATOR_Initialize 192A  
                 ??_EUSART2_Transmit_ISR 000C                __end_of_Receive_available 18D0  
                _FastTransfer_buffer_put 0776                    CRCcheck@calculatedCRC 00CB  
                     _EUSART1_Initialize 1518                         ?i2_UART_buff_get 0007  
               ??_PIN_MANAGER_Initialize 001B                         ?i2_UART_buff_put 0007  
           crcBufS_status_put@wantedTime 0023                               ??_ledDebug 0026  
                          ??_crcBufS_get 001F                            ??_crcBufS_put 0020  
             __size_of_SYSTEM_Initialize 001A                     end_of_initialization 12F4  
                              Delay@wait 001B                      ?_EUSART1_Initialize 0001  
                                memset@c 001D                                  memset@n 001F  
                                memset@p 0021                            __Lmediumconst 7DE6  
                             ??_sendData 00CC                       _EUSART2_Initialize 15C0  
                             ??_time_Set 001D                               ??_time_get 001D  
                  ?_UART_buff_modulo_inc 001B                     __size_of_updateComms 0016  
                                postdec1 000FE5                                  postdec2 000FDD  
                                postinc0 000FEE                                  postinc2 000FDE  
                       begin@stufftosend 00CD                      CRCcheck@arrayHolder 00CC  
                   ??_EUSART1_Initialize 0025                      ?_EUSART2_Initialize 0001  
                 _dataAdressErrorCounter 008D                               _rx_address 0037  
                              _TRISAbits 000F92                                _TRISBbits 000F93  
                              _TRISCbits 000F94                                _TRISDbits 000F95  
                           ??_CommsStart 0025                             begin@maxSize 00CA  
                   ??_EUSART2_Initialize 001B       __size_of_FastTransfer_buffer_flush 006C  
                  i2UART_buff_size@_this 0001                           _UART_buff_init 1836  
                         _UART_buff_peek 17B4                           _UART_buff_size 18D0  
                    __end_of_crcBufS_get 0EBC                      __end_of_crcBufS_put 0F94  
                      __size_of_CRCcheck 015E                            ?_updateTimers 0001  
                          _moduleAddress 0043                     _timer0ReloadVal16bit 0040  
                         __end_of_SetBMM 1518                               CRCcheck@rt 00CF  
                         __end_of_ToSend 1836             __end_of_INTERRUPT_Initialize 1944  
                     __end_of_CommsStart 148A                          _crcErrorCounter 008B  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 1948  
                      __size_of_TMR0_ISR 0018                ??_FastTransfer_buffer_put 00C8  
                 ?_OSCILLATOR_Initialize 0001                           __end_of_memset 170A  
                      crcBufS_put@status 001F                             receiveData@r 00E1  
             __size_of_Receive_available 0016                             receiveData@u 00DF  
                    start_initialization 1292                 __size_of_TMR0_Initialize 002C  
        __size_of_PIN_MANAGER_Initialize 0080                    crcBufS_get@wantedTime 00C8  
                 __end_of_UART_buff_init 1854                   __end_of_UART_buff_peek 17D8  
                         UART_buff_get@c 0025                   __end_of_UART_buff_size 18E6  
                           ?_Receive_get 0001                           UART_buff_put@c 0023  
                  __size_of_Receive_peek 000E                           ??_updateTimers 001B  
               __end_ofi2_UART_buff_size 18FC                                 ??_SetBMM 0026  
                               ??_ToSend 0026                   ??_UART_buff_modulo_inc 001F  
                               CRC8@data 001B                          crcBufS_get@time 001D  
                      __size_of_Send_put 0030                                 ??_memset 0021  
                         _eusart1RxCount 0030                              __pbssCOMRAM 0026  
          __size_of_EUSART1_Transmit_ISR 002E                            __pcstackBANK0 00C8  
                           _Receive_peek 190E                      UART_buff_init@_this 0023  
                            _crcBufS_get 0DCA                      UART_buff_peek@_this 001B  
                            _crcBufS_put 0EBC                        __size_of_ledDebug 002E  
                        ?_UART_buff_init 0023                          ?_UART_buff_peek 001B  
                        ?_UART_buff_size 001B             __size_of_EUSART1_Receive_ISR 002C  
                          ??_receiveData 00D1              __size_of_crcBufS_status_put 00D6  
                             sendData@CS 00CE                                __pnvBANK0 00E3  
               __size_of_TMR0_StartTimer 0004                   __size_of_UART_buff_get 0092  
                 __size_of_UART_buff_put 011A                   _PIN_MANAGER_Initialize 1212  
                      __size_of_sendData 014E                                __pintcode 0008  
                          __pmediumconst 7DE6                                 ?___awdiv 001B  
                      __size_of_time_Set 001E                        __size_of_time_get 0012  
           ??_INTERRUPT_InterruptManager 000D                     i2UART_buff_get@_this 0007  
                               _BAUD1CON 000FB8                                 _BAUD2CON 000F70  
                         __size_of_Delay 0034                           __size_of_begin 0060  
                   _INTERRUPT_Initialize 1938                             _receiveArray 01CE  
                      ??_TMR0_Initialize 001B             __size_of_EUSART2_Receive_ISR 001E  
                               _CRCcheck 08EA                                 _LATBbits 000F8A  
                               _LATDbits 000F8C                      UART_buff_size@_this 001B  
           __size_of_respondChargerAsECU 0038                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D                                 _IPR3bits 000FA5  
                               _PIE3bits 000FA3      __size_of_INTERRUPT_InterruptManager 00B0  
                               _PIR1bits 000F9E                                 i2u268_40 111A  
                               i2u276_40 160E                                 _PIR3bits 000FA4  
                    begin@stuffavailable 00D1                                 _RCONbits 000FD0  
                       __CFG_WDTPS$32768 000000                      __end_of_receiveData 0776  
                               _SSP1CON1 000FC6                                 _TMR0_ISR 188C  
                               _SSP1STAT 000FC7           FastTransfer_buffer_flush@_this 00C8  
                           _input_buffer 0300                                _rx_buffer 0200  
                            _lastLEDTime 007F                     i2UART_buff_put@_this 0007  
                          _UART_buff_get 106A                            _UART_buff_put 0B96  
                   __end_of_updateTimers 13D2            __size_of_EUSART2_Transmit_ISR 0032  
               ??i2_UART_buff_modulo_inc 0005                              _INTCON2bits 000FF1  
                  ?_INTERRUPT_Initialize 0001                        _sendStructAddress 00E5  
               __size_ofi2_UART_buff_get 0092                 __size_ofi2_UART_buff_put 011A  
                          ??_updateComms 0026                     __size_of_Receive_get 000E  
                               __Hrparam 0000                                 _Send_put 1626  
                               __Lrparam 0000                       __CFG_BOREN$SBORDIS 000000  
                          time_Set@value 001B                        __CFG_P2BMX$PORTD2 000000  
                ??_OSCILLATOR_Initialize 001B                        ??_TMR0_StartTimer 001B  
                       __size_of___awdiv 0084              __size_of_EUSART1_Initialize 003C  
                    begin@stufftoreceive 00CF                           ?_UART_buff_get 0021  
                         ?_UART_buff_put 0021                              CRC8@extract 001F  
                              sendData@i 00CF                                 _ledDebug 1656  
               crcBufS_status_put@status 001E                                 __ptext10 1302  
                               __ptext11 00BC                                 __ptext20 106A  
                               __ptext12 1626                                 __ptext21 1736  
                               __ptext13 0B96                                 __ptext30 16B2  
                               __ptext22 18BA                                 __ptext14 190E  
                               __ptext31 1944                                 __ptext23 18D0  
                               __ptext15 17B4                                 __ptext40 1836  
                               __ptext32 1212                                 __ptext24 148A  
                               __ptext16 08EA                                 __ptext41 16DE  
                               __ptext33 192A                                 __ptext25 1818  
                               __ptext17 0F94                                 __ptext50 1684  
                               __ptext34 1938                                 __ptext26 0776  
                               __ptext18 0DCA                                 __ptext51 170A  
                               __ptext43 188C                                 __ptext35 15C0  
                               __ptext27 1760                                 __ptext19 191C  
                               __ptext52 0000                                 __ptext44 15F4  
                               __ptext36 1432                                 __ptext28 158C  
                               __ptext45 18E6                                 __ptext37 13D2  
                               __ptext29 1872                                 __ptext46 10FC  
                               __ptext38 118E                                 __ptext47 1854  
                               __ptext39 1518                                 __ptext48 0CB0  
                               __ptext49 178A                             _SSP1CON1bits 000FC6  
                          __size_of_CRC8 004A                                 begin@ptr 00C8  
            __size_of_EUSART2_Initialize 0034                            _returnAddress 0036  
                          __size_of_main 0022                              _receiveData 00BC  
                         _Transmit_stall 0044                                 _sendData 0A48  
                               _talkTime 0083                        ?i2_UART_buff_size 0001  
                             _RC1STAbits 000FAB                                 _time_Set 17FA  
                             _RC2STAbits 000F71                                 _time_get 18FC  
                             _FONTLOOKUP 7DE7                       ??i2_UART_buff_size 0003  
                               int$flags 0045                             _serial_write 003E  
                    __end_of_updateComms 18BA       __end_of_INTERRUPT_InterruptManager 00B8  
             _INTERRUPT_InterruptManager 0008                             _SSP1STATbits 000FC7  
                    _EUSART1_Receive_ISR 170A                        receiveData@holder 00D7  
                             _INTCONbits 000FF2                UART_buff_modulo_inc@value 001B  
                       ??_UART_buff_init 0025                         ??_UART_buff_peek 001D  
                       ??_UART_buff_size 001D                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 003A  
        __size_ofi2_UART_buff_modulo_inc 002A                             ?_crcBufS_get 001B  
                           ?_crcBufS_put 001B                                 intlevel2 0000  
                crcBufS_status_put@_this 001B                     ?_EUSART1_Receive_ISR 0001  
 FastTransfer_buffer_modulo_inc@my_value 001F           FastTransfer_buffer_put@towhere 0023  
                ?_PIN_MANAGER_Initialize 0001             __end_of_EUSART1_Transmit_ISR 16B2  
                            _ring_buffer 0100               ?_FastTransfer_buffer_flush 00C8  
                      ??i2_UART_buff_get 0009                              _serial_peek 00E7  
                            _serial_read 003C                        ??i2_UART_buff_put 000A  
               ?_FastTransfer_buffer_put 0021            __size_of_UART_buff_modulo_inc 002A  
                        ??_UART_buff_get 0023                    __size_of_updateTimers 0064  
                        ??_UART_buff_put 0024                      _EUSART2_Receive_ISR 1854  
  FastTransfer_buffer_modulo_inc@modulus 001D                      _respondChargerAsECU 1554  
                 crcBufS_status_put@time 001D                          _TMR0_Initialize 16B2  
              receiveData@crcHolder_1757 00DE                        __CFG_T3CMX$PORTC0 000000  
                         _maxDataAddress 00EA               __end_of_crcBufS_status_put 106A  
                  ??_EUSART1_Receive_ISR 0001           __end_of_PIN_MANAGER_Initialize 1292  
       ??_FastTransfer_buffer_modulo_inc 001F          ?_FastTransfer_buffer_modulo_inc 001B  
                   ?_EUSART2_Receive_ISR 0001                        __CFG_FOSC$INTIO67 000000  
                   ?_respondChargerAsECU 0001                              _updateComms 18A4  
                           _updateTimers 136E  
