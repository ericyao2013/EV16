

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Apr 01 01:21:06 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    95                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    96                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    97  0000                     
    98                           ; Version 1.40
    99                           ; Generated 01/12/2016 GMT
   100                           ; 
   101                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   102                           ; All rights reserved.
   103                           ; 
   104                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   105                           ; 
   106                           ; Redistribution and use in source and binary forms, with or without modification, are
   107                           ; permitted provided that the following conditions are met:
   108                           ; 
   109                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   110                           ;        conditions and the following disclaimer.
   111                           ; 
   112                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   113                           ;        of conditions and the following disclaimer in the documentation and/or other
   114                           ;        materials provided with the distribution.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC18F45K22 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132  0000                     
   133                           	psect	idataBANK0
   134  003F1E                     __pidataBANK0:
   135                           	opt stack 0
   136                           
   137                           ;initializer for _Over_Voltage_Value
   138  003F1E  09C4               	dw	2500
   139                           
   140                           ;initializer for _Under_Voltage_Value
   141  003F20  07CF               	dw	1999
   142                           
   143                           ;initializer for _CarOn
   144  003F22  01                 	db	1
   145                           
   146                           ;initializer for _CurrentDir
   147  003F23  01                 	db	1
   148                           
   149                           	psect	idataBANK2
   150  003EC2                     __pidataBANK2:
   151                           	opt stack 0
   152                           
   153                           ;initializer for _retrn
   154  003EC2  000F               	dw	15
   155  003EC4  0094               	dw	148
   156  003EC6  00C3               	dw	195
   157  003EC8  0093               	dw	147
   158  003ECA  0062               	dw	98
   159  003ECC  0090               	dw	144
   160  003ECE  0089               	dw	137
   161  003ED0  00C8               	dw	200
   162                           
   163                           	psect	mediumconst
   164  007AF2                     __pmediumconst:
   165                           	opt stack 0
   166  007AF2  00                 	db	0
   167  007AF3                     LT6804@crc15Table:
   168                           	opt stack 0
   169  007AF3  0000               	dw	0
   170  007AF5  C599               	dw	50585
   171  007AF7  CEAB               	dw	52907
   172  007AF9  0B32               	dw	2866
   173  007AFB  D8CF               	dw	55503
   174  007AFD  1D56               	dw	7510
   175  007AFF  1664               	dw	5732
   176  007B01  D3FD               	dw	54269
   177  007B03  F407               	dw	62471
   178  007B05  319E               	dw	12702
   179  007B07  3AAC               	dw	15020
   180  007B09  FF35               	dw	65333
   181  007B0B  2CC8               	dw	11464
   182  007B0D  E951               	dw	59729
   183  007B0F  E263               	dw	57955
   184  007B11  27FA               	dw	10234
   185  007B13  AD97               	dw	44439
   186  007B15  680E               	dw	26638
   187  007B17  633C               	dw	25404
   188  007B19  A6A5               	dw	42661
   189  007B1B  7558               	dw	30040
   190  007B1D  B0C1               	dw	45249
   191  007B1F  BBF3               	dw	48115
   192  007B21  7E6A               	dw	32362
   193  007B23  5990               	dw	22928
   194  007B25  9C09               	dw	39945
   195  007B27  973B               	dw	38715
   196  007B29  52A2               	dw	21154
   197  007B2B  815F               	dw	33119
   198  007B2D  44C6               	dw	17606
   199  007B2F  4FF4               	dw	20468
   200  007B31  8A6D               	dw	35437
   201  007B33  5B2E               	dw	23342
   202  007B35  9EB7               	dw	40631
   203  007B37  9585               	dw	38277
   204  007B39  501C               	dw	20508
   205  007B3B  83E1               	dw	33761
   206  007B3D  4678               	dw	18040
   207  007B3F  4D4A               	dw	19786
   208  007B41  88D3               	dw	35027
   209  007B43  AF29               	dw	44841
   210  007B45  6AB0               	dw	27312
   211  007B47  6182               	dw	24962
   212  007B49  A41B               	dw	42011
   213  007B4B  77E6               	dw	30694
   214  007B4D  B27F               	dw	45695
   215  007B4F  B94D               	dw	47437
   216  007B51  7CD4               	dw	31956
   217  007B53  F6B9               	dw	63161
   218  007B55  3320               	dw	13088
   219  007B57  3812               	dw	14354
   220  007B59  FD8B               	dw	64907
   221  007B5B  2E76               	dw	11894
   222  007B5D  EBEF               	dw	60399
   223  007B5F  E0DD               	dw	57565
   224  007B61  2544               	dw	9540
   225  007B63  02BE               	dw	702
   226  007B65  C727               	dw	50983
   227  007B67  CC15               	dw	52245
   228  007B69  098C               	dw	2444
   229  007B6B  DA71               	dw	55921
   230  007B6D  1FE8               	dw	8168
   231  007B6F  14DA               	dw	5338
   232  007B71  D143               	dw	53571
   233  007B73  F3C5               	dw	62405
   234  007B75  365C               	dw	13916
   235  007B77  3D6E               	dw	15726
   236  007B79  F8F7               	dw	63735
   237  007B7B  2B0A               	dw	11018
   238  007B7D  EE93               	dw	61075
   239  007B7F  E5A1               	dw	58785
   240  007B81  2038               	dw	8248
   241  007B83  07C2               	dw	1986
   242  007B85  C25B               	dw	49755
   243  007B87  C969               	dw	51561
   244  007B89  0CF0               	dw	3312
   245  007B8B  DF0D               	dw	57101
   246  007B8D  1A94               	dw	6804
   247  007B8F  11A6               	dw	4518
   248  007B91  D43F               	dw	54335
   249  007B93  5E52               	dw	24146
   250  007B95  9BCB               	dw	39883
   251  007B97  90F9               	dw	37113
   252  007B99  5560               	dw	21856
   253  007B9B  869D               	dw	34461
   254  007B9D  4304               	dw	17156
   255  007B9F  4836               	dw	18486
   256  007BA1  8DAF               	dw	36271
   257  007BA3  AA55               	dw	43605
   258  007BA5  6FCC               	dw	28620
   259  007BA7  64FE               	dw	25854
   260  007BA9  A167               	dw	41319
   261  007BAB  729A               	dw	29338
   262  007BAD  B703               	dw	46851
   263  007BAF  BC31               	dw	48177
   264  007BB1  79A8               	dw	31144
   265  007BB3  A8EB               	dw	43243
   266  007BB5  6D72               	dw	28018
   267  007BB7  6640               	dw	26176
   268  007BB9  A3D9               	dw	41945
   269  007BBB  7024               	dw	28708
   270  007BBD  B5BD               	dw	46525
   271  007BBF  BE8F               	dw	48783
   272  007BC1  7B16               	dw	31510
   273  007BC3  5CEC               	dw	23788
   274  007BC5  9975               	dw	39285
   275  007BC7  9247               	dw	37447
   276  007BC9  57DE               	dw	22494
   277  007BCB  8423               	dw	33827
   278  007BCD  41BA               	dw	16826
   279  007BCF  4A88               	dw	19080
   280  007BD1  8F11               	dw	36625
   281  007BD3  057C               	dw	1404
   282  007BD5  C0E5               	dw	49381
   283  007BD7  CBD7               	dw	52183
   284  007BD9  0E4E               	dw	3662
   285  007BDB  DDB3               	dw	56755
   286  007BDD  182A               	dw	6186
   287  007BDF  1318               	dw	4888
   288  007BE1  D681               	dw	54913
   289  007BE3  F17B               	dw	61819
   290  007BE5  34E2               	dw	13538
   291  007BE7  3FD0               	dw	16336
   292  007BE9  FA49               	dw	64073
   293  007BEB  29B4               	dw	10676
   294  007BED  EC2D               	dw	60461
   295  007BEF  E71F               	dw	59167
   296  007BF1  2286               	dw	8838
   297  007BF3  A213               	dw	41491
   298  007BF5  678A               	dw	26506
   299  007BF7  6CB8               	dw	27832
   300  007BF9  A921               	dw	43297
   301  007BFB  7ADC               	dw	31452
   302  007BFD  BF45               	dw	48965
   303  007BFF  B477               	dw	46199
   304  007C01  71EE               	dw	29166
   305  007C03  5614               	dw	22036
   306  007C05  938D               	dw	37773
   307  007C07  98BF               	dw	39103
   308  007C09  5D26               	dw	23846
   309  007C0B  8EDB               	dw	36571
   310  007C0D  4B42               	dw	19266
   311  007C0F  4070               	dw	16496
   312  007C11  85E9               	dw	34281
   313  007C13  0F84               	dw	3972
   314  007C15  CA1D               	dw	51741
   315  007C17  C12F               	dw	49455
   316  007C19  04B6               	dw	1206
   317  007C1B  D74B               	dw	55115
   318  007C1D  12D2               	dw	4818
   319  007C1F  19E0               	dw	6624
   320  007C21  DC79               	dw	56441
   321  007C23  FB83               	dw	64387
   322  007C25  3E1A               	dw	15898
   323  007C27  3528               	dw	13608
   324  007C29  F0B1               	dw	61617
   325  007C2B  234C               	dw	9036
   326  007C2D  E6D5               	dw	59093
   327  007C2F  EDE7               	dw	60903
   328  007C31  287E               	dw	10366
   329  007C33  F93D               	dw	63805
   330  007C35  3CA4               	dw	15524
   331  007C37  3796               	dw	14230
   332  007C39  F20F               	dw	61967
   333  007C3B  21F2               	dw	8690
   334  007C3D  E46B               	dw	58475
   335  007C3F  EF59               	dw	61273
   336  007C41  2AC0               	dw	10944
   337  007C43  0D3A               	dw	3386
   338  007C45  C8A3               	dw	51363
   339  007C47  C391               	dw	50065
   340  007C49  0608               	dw	1544
   341  007C4B  D5F5               	dw	54773
   342  007C4D  106C               	dw	4204
   343  007C4F  1B5E               	dw	7006
   344  007C51  DEC7               	dw	57031
   345  007C53  54AA               	dw	21674
   346  007C55  9133               	dw	37171
   347  007C57  9A01               	dw	39425
   348  007C59  5F98               	dw	24472
   349  007C5B  8C65               	dw	35941
   350  007C5D  49FC               	dw	18940
   351  007C5F  42CE               	dw	17102
   352  007C61  8757               	dw	34647
   353  007C63  A0AD               	dw	41133
   354  007C65  6534               	dw	25908
   355  007C67  6E06               	dw	28166
   356  007C69  AB9F               	dw	43935
   357  007C6B  7862               	dw	30818
   358  007C6D  BDFB               	dw	48635
   359  007C6F  B6C9               	dw	46793
   360  007C71  7350               	dw	29520
   361  007C73  51D6               	dw	20950
   362  007C75  944F               	dw	37967
   363  007C77  9F7D               	dw	40829
   364  007C79  5AE4               	dw	23268
   365  007C7B  8919               	dw	35097
   366  007C7D  4C80               	dw	19584
   367  007C7F  47B2               	dw	18354
   368  007C81  822B               	dw	33323
   369  007C83  A5D1               	dw	42449
   370  007C85  6048               	dw	24648
   371  007C87  6B7A               	dw	27514
   372  007C89  AEE3               	dw	44771
   373  007C8B  7D1E               	dw	32030
   374  007C8D  B887               	dw	47239
   375  007C8F  B3B5               	dw	46005
   376  007C91  762C               	dw	30252
   377  007C93  FC41               	dw	64577
   378  007C95  39D8               	dw	14808
   379  007C97  32EA               	dw	13034
   380  007C99  F773               	dw	63347
   381  007C9B  248E               	dw	9358
   382  007C9D  E117               	dw	57623
   383  007C9F  EA25               	dw	59941
   384  007CA1  2FBC               	dw	12220
   385  007CA3  0846               	dw	2118
   386  007CA5  CDDF               	dw	52703
   387  007CA7  C6ED               	dw	50925
   388  007CA9  0374               	dw	884
   389  007CAB  D089               	dw	53385
   390  007CAD  1510               	dw	5392
   391  007CAF  1E22               	dw	7714
   392  007CB1  DBBB               	dw	56251
   393  007CB3  0AF8               	dw	2808
   394  007CB5  CF61               	dw	53089
   395  007CB7  C453               	dw	50259
   396  007CB9  01CA               	dw	458
   397  007CBB  D237               	dw	53815
   398  007CBD  17AE               	dw	6062
   399  007CBF  1C9C               	dw	7324
   400  007CC1  D905               	dw	55557
   401  007CC3  FEFF               	dw	65279
   402  007CC5  3B66               	dw	15206
   403  007CC7  3054               	dw	12372
   404  007CC9  F5CD               	dw	62925
   405  007CCB  2630               	dw	9776
   406  007CCD  E3A9               	dw	58281
   407  007CCF  E89B               	dw	59547
   408  007CD1  2D02               	dw	11522
   409  007CD3  A76F               	dw	42863
   410  007CD5  62F6               	dw	25334
   411  007CD7  69C4               	dw	27076
   412  007CD9  AC5D               	dw	44125
   413  007CDB  7FA0               	dw	32672
   414  007CDD  BA39               	dw	47673
   415  007CDF  B10B               	dw	45323
   416  007CE1  7492               	dw	29842
   417  007CE3  5368               	dw	21352
   418  007CE5  96F1               	dw	38641
   419  007CE7  9DC3               	dw	40387
   420  007CE9  585A               	dw	22618
   421  007CEB  8BA7               	dw	35751
   422  007CED  4E3E               	dw	20030
   423  007CEF  450C               	dw	17676
   424  007CF1  8095               	dw	32917
   425  007CF3                     __end_ofLT6804@crc15Table:
   426                           	opt stack 0
   427  007CF3  0000               	dw	0
   428  007CF5  C599               	dw	50585
   429  007CF7  CEAB               	dw	52907
   430  007CF9  0B32               	dw	2866
   431  007CFB  D8CF               	dw	55503
   432  007CFD  1D56               	dw	7510
   433  007CFF  1664               	dw	5732
   434  007D01  D3FD               	dw	54269
   435  007D03  F407               	dw	62471
   436  007D05  319E               	dw	12702
   437  007D07  3AAC               	dw	15020
   438  007D09  FF35               	dw	65333
   439  007D0B  2CC8               	dw	11464
   440  007D0D  E951               	dw	59729
   441  007D0F  E263               	dw	57955
   442  007D11  27FA               	dw	10234
   443  007D13  AD97               	dw	44439
   444  007D15  680E               	dw	26638
   445  007D17  633C               	dw	25404
   446  007D19  A6A5               	dw	42661
   447  007D1B  7558               	dw	30040
   448  007D1D  B0C1               	dw	45249
   449  007D1F  BBF3               	dw	48115
   450  007D21  7E6A               	dw	32362
   451  007D23  5990               	dw	22928
   452  007D25  9C09               	dw	39945
   453  007D27  973B               	dw	38715
   454  007D29  52A2               	dw	21154
   455  007D2B  815F               	dw	33119
   456  007D2D  44C6               	dw	17606
   457  007D2F  4FF4               	dw	20468
   458  007D31  8A6D               	dw	35437
   459  007D33  5B2E               	dw	23342
   460  007D35  9EB7               	dw	40631
   461  007D37  9585               	dw	38277
   462  007D39  501C               	dw	20508
   463  007D3B  83E1               	dw	33761
   464  007D3D  4678               	dw	18040
   465  007D3F  4D4A               	dw	19786
   466  007D41  88D3               	dw	35027
   467  007D43  AF29               	dw	44841
   468  007D45  6AB0               	dw	27312
   469  007D47  6182               	dw	24962
   470  007D49  A41B               	dw	42011
   471  007D4B  77E6               	dw	30694
   472  007D4D  B27F               	dw	45695
   473  007D4F  B94D               	dw	47437
   474  007D51  7CD4               	dw	31956
   475  007D53  F6B9               	dw	63161
   476  007D55  3320               	dw	13088
   477  007D57  3812               	dw	14354
   478  007D59  FD8B               	dw	64907
   479  007D5B  2E76               	dw	11894
   480  007D5D  EBEF               	dw	60399
   481  007D5F  E0DD               	dw	57565
   482  007D61  2544               	dw	9540
   483  007D63  02BE               	dw	702
   484  007D65  C727               	dw	50983
   485  007D67  CC15               	dw	52245
   486  007D69  098C               	dw	2444
   487  007D6B  DA71               	dw	55921
   488  007D6D  1FE8               	dw	8168
   489  007D6F  14DA               	dw	5338
   490  007D71  D143               	dw	53571
   491  007D73  F3C5               	dw	62405
   492  007D75  365C               	dw	13916
   493  007D77  3D6E               	dw	15726
   494  007D79  F8F7               	dw	63735
   495  007D7B  2B0A               	dw	11018
   496  007D7D  EE93               	dw	61075
   497  007D7F  E5A1               	dw	58785
   498  007D81  2038               	dw	8248
   499  007D83  07C2               	dw	1986
   500  007D85  C25B               	dw	49755
   501  007D87  C969               	dw	51561
   502  007D89  0CF0               	dw	3312
   503  007D8B  DF0D               	dw	57101
   504  007D8D  1A94               	dw	6804
   505  007D8F  11A6               	dw	4518
   506  007D91  D43F               	dw	54335
   507  007D93  5E52               	dw	24146
   508  007D95  9BCB               	dw	39883
   509  007D97  90F9               	dw	37113
   510  007D99  5560               	dw	21856
   511  007D9B  869D               	dw	34461
   512  007D9D  4304               	dw	17156
   513  007D9F  4836               	dw	18486
   514  007DA1  8DAF               	dw	36271
   515  007DA3  AA55               	dw	43605
   516  007DA5  6FCC               	dw	28620
   517  007DA7  64FE               	dw	25854
   518  007DA9  A167               	dw	41319
   519  007DAB  729A               	dw	29338
   520  007DAD  B703               	dw	46851
   521  007DAF  BC31               	dw	48177
   522  007DB1  79A8               	dw	31144
   523  007DB3  A8EB               	dw	43243
   524  007DB5  6D72               	dw	28018
   525  007DB7  6640               	dw	26176
   526  007DB9  A3D9               	dw	41945
   527  007DBB  7024               	dw	28708
   528  007DBD  B5BD               	dw	46525
   529  007DBF  BE8F               	dw	48783
   530  007DC1  7B16               	dw	31510
   531  007DC3  5CEC               	dw	23788
   532  007DC5  9975               	dw	39285
   533  007DC7  9247               	dw	37447
   534  007DC9  57DE               	dw	22494
   535  007DCB  8423               	dw	33827
   536  007DCD  41BA               	dw	16826
   537  007DCF  4A88               	dw	19080
   538  007DD1  8F11               	dw	36625
   539  007DD3  057C               	dw	1404
   540  007DD5  C0E5               	dw	49381
   541  007DD7  CBD7               	dw	52183
   542  007DD9  0E4E               	dw	3662
   543  007DDB  DDB3               	dw	56755
   544  007DDD  182A               	dw	6186
   545  007DDF  1318               	dw	4888
   546  007DE1  D681               	dw	54913
   547  007DE3  F17B               	dw	61819
   548  007DE5  34E2               	dw	13538
   549  007DE7  3FD0               	dw	16336
   550  007DE9  FA49               	dw	64073
   551  007DEB  29B4               	dw	10676
   552  007DED  EC2D               	dw	60461
   553  007DEF  E71F               	dw	59167
   554  007DF1  2286               	dw	8838
   555  007DF3  A213               	dw	41491
   556  007DF5  678A               	dw	26506
   557  007DF7  6CB8               	dw	27832
   558  007DF9  A921               	dw	43297
   559  007DFB  7ADC               	dw	31452
   560  007DFD  BF45               	dw	48965
   561  007DFF  B477               	dw	46199
   562  007E01  71EE               	dw	29166
   563  007E03  5614               	dw	22036
   564  007E05  938D               	dw	37773
   565  007E07  98BF               	dw	39103
   566  007E09  5D26               	dw	23846
   567  007E0B  8EDB               	dw	36571
   568  007E0D  4B42               	dw	19266
   569  007E0F  4070               	dw	16496
   570  007E11  85E9               	dw	34281
   571  007E13  0F84               	dw	3972
   572  007E15  CA1D               	dw	51741
   573  007E17  C12F               	dw	49455
   574  007E19  04B6               	dw	1206
   575  007E1B  D74B               	dw	55115
   576  007E1D  12D2               	dw	4818
   577  007E1F  19E0               	dw	6624
   578  007E21  DC79               	dw	56441
   579  007E23  FB83               	dw	64387
   580  007E25  3E1A               	dw	15898
   581  007E27  3528               	dw	13608
   582  007E29  F0B1               	dw	61617
   583  007E2B  234C               	dw	9036
   584  007E2D  E6D5               	dw	59093
   585  007E2F  EDE7               	dw	60903
   586  007E31  287E               	dw	10366
   587  007E33  F93D               	dw	63805
   588  007E35  3CA4               	dw	15524
   589  007E37  3796               	dw	14230
   590  007E39  F20F               	dw	61967
   591  007E3B  21F2               	dw	8690
   592  007E3D  E46B               	dw	58475
   593  007E3F  EF59               	dw	61273
   594  007E41  2AC0               	dw	10944
   595  007E43  0D3A               	dw	3386
   596  007E45  C8A3               	dw	51363
   597  007E47  C391               	dw	50065
   598  007E49  0608               	dw	1544
   599  007E4B  D5F5               	dw	54773
   600  007E4D  106C               	dw	4204
   601  007E4F  1B5E               	dw	7006
   602  007E51  DEC7               	dw	57031
   603  007E53  54AA               	dw	21674
   604  007E55  9133               	dw	37171
   605  007E57  9A01               	dw	39425
   606  007E59  5F98               	dw	24472
   607  007E5B  8C65               	dw	35941
   608  007E5D  49FC               	dw	18940
   609  007E5F  42CE               	dw	17102
   610  007E61  8757               	dw	34647
   611  007E63  A0AD               	dw	41133
   612  007E65  6534               	dw	25908
   613  007E67  6E06               	dw	28166
   614  007E69  AB9F               	dw	43935
   615  007E6B  7862               	dw	30818
   616  007E6D  BDFB               	dw	48635
   617  007E6F  B6C9               	dw	46793
   618  007E71  7350               	dw	29520
   619  007E73  51D6               	dw	20950
   620  007E75  944F               	dw	37967
   621  007E77  9F7D               	dw	40829
   622  007E79  5AE4               	dw	23268
   623  007E7B  8919               	dw	35097
   624  007E7D  4C80               	dw	19584
   625  007E7F  47B2               	dw	18354
   626  007E81  822B               	dw	33323
   627  007E83  A5D1               	dw	42449
   628  007E85  6048               	dw	24648
   629  007E87  6B7A               	dw	27514
   630  007E89  AEE3               	dw	44771
   631  007E8B  7D1E               	dw	32030
   632  007E8D  B887               	dw	47239
   633  007E8F  B3B5               	dw	46005
   634  007E91  762C               	dw	30252
   635  007E93  FC41               	dw	64577
   636  007E95  39D8               	dw	14808
   637  007E97  32EA               	dw	13034
   638  007E99  F773               	dw	63347
   639  007E9B  248E               	dw	9358
   640  007E9D  E117               	dw	57623
   641  007E9F  EA25               	dw	59941
   642  007EA1  2FBC               	dw	12220
   643  007EA3  0846               	dw	2118
   644  007EA5  CDDF               	dw	52703
   645  007EA7  C6ED               	dw	50925
   646  007EA9  0374               	dw	884
   647  007EAB  D089               	dw	53385
   648  007EAD  1510               	dw	5392
   649  007EAF  1E22               	dw	7714
   650  007EB1  DBBB               	dw	56251
   651  007EB3  0AF8               	dw	2808
   652  007EB5  CF61               	dw	53089
   653  007EB7  C453               	dw	50259
   654  007EB9  01CA               	dw	458
   655  007EBB  D237               	dw	53815
   656  007EBD  17AE               	dw	6062
   657  007EBF  1C9C               	dw	7324
   658  007EC1  D905               	dw	55557
   659  007EC3  FEFF               	dw	65279
   660  007EC5  3B66               	dw	15206
   661  007EC7  3054               	dw	12372
   662  007EC9  F5CD               	dw	62925
   663  007ECB  2630               	dw	9776
   664  007ECD  E3A9               	dw	58281
   665  007ECF  E89B               	dw	59547
   666  007ED1  2D02               	dw	11522
   667  007ED3  A76F               	dw	42863
   668  007ED5  62F6               	dw	25334
   669  007ED7  69C4               	dw	27076
   670  007ED9  AC5D               	dw	44125
   671  007EDB  7FA0               	dw	32672
   672  007EDD  BA39               	dw	47673
   673  007EDF  B10B               	dw	45323
   674  007EE1  7492               	dw	29842
   675  007EE3  5368               	dw	21352
   676  007EE5  96F1               	dw	38641
   677  007EE7  9DC3               	dw	40387
   678  007EE9  585A               	dw	22618
   679  007EEB  8BA7               	dw	35751
   680  007EED  4E3E               	dw	20030
   681  007EEF  450C               	dw	17676
   682  007EF1  8095               	dw	32917
   683  007EF3                     __end_of_crc15Table:
   684                           	opt stack 0
   685  007EF3                     _dpowers:
   686                           	opt stack 0
   687  007EF3  0001               	dw	1
   688  007EF5  0000               	dw	0
   689  007EF7  000A               	dw	10
   690  007EF9  0000               	dw	0
   691  007EFB  0064               	dw	100
   692  007EFD  0000               	dw	0
   693  007EFF  03E8               	dw	1000
   694  007F01  0000               	dw	0
   695  007F03  2710               	dw	10000
   696  007F05  0000               	dw	0
   697  007F07  86A0               	dw	34464
   698  007F09  0001               	dw	1
   699  007F0B  4240               	dw	16960
   700  007F0D  000F               	dw	15
   701  007F0F  9680               	dw	38528
   702  007F11  0098               	dw	152
   703  007F13  E100               	dw	57600
   704  007F15  05F5               	dw	1525
   705  007F17  CA00               	dw	51712
   706  007F19  3B9A               	dw	15258
   707  007F1B                     __end_of_dpowers:
   708                           	opt stack 0
   709  007F1B                     __npowers_:
   710                           	opt stack 0
   711  007F1B  00                 	db	0
   712  007F1C  80                 	db	128
   713  007F1D  3F                 	db	63
   714  007F1E  CD                 	db	205
   715  007F1F  CC                 	db	204
   716  007F20  3D                 	db	61
   717  007F21  D7                 	db	215
   718  007F22  23                 	db	35
   719  007F23  3C                 	db	60
   720  007F24  12                 	db	18
   721  007F25  83                 	db	131
   722  007F26  3A                 	db	58
   723  007F27  B7                 	db	183
   724  007F28  D1                 	db	209
   725  007F29  38                 	db	56
   726  007F2A  C6                 	db	198
   727  007F2B  27                 	db	39
   728  007F2C  37                 	db	55
   729  007F2D  38                 	db	56
   730  007F2E  86                 	db	134
   731  007F2F  35                 	db	53
   732  007F30  C0                 	db	192
   733  007F31  D6                 	db	214
   734  007F32  33                 	db	51
   735  007F33  CC                 	db	204
   736  007F34  2B                 	db	43
   737  007F35  32                 	db	50
   738  007F36  70                 	db	112
   739  007F37  89                 	db	137
   740  007F38  30                 	db	48
   741  007F39  E7                 	db	231
   742  007F3A  DB                 	db	219
   743  007F3B  2E                 	db	46
   744  007F3C  E5                 	db	229
   745  007F3D  3C                 	db	60
   746  007F3E  1E                 	db	30
   747  007F3F  42                 	db	66
   748  007F40  A2                 	db	162
   749  007F41  0D                 	db	13
   750  007F42                     __end_of__npowers_:
   751                           	opt stack 0
   752  007F42                     __powers_:
   753                           	opt stack 0
   754  007F42  00                 	db	0
   755  007F43  80                 	db	128
   756  007F44  3F                 	db	63
   757  007F45  00                 	db	0
   758  007F46  20                 	db	32
   759  007F47  41                 	db	65
   760  007F48  00                 	db	0
   761  007F49  C8                 	db	200
   762  007F4A  42                 	db	66
   763  007F4B  00                 	db	0
   764  007F4C  7A                 	db	122
   765  007F4D  44                 	db	68
   766  007F4E  40                 	db	64
   767  007F4F  1C                 	db	28
   768  007F50  46                 	db	70
   769  007F51  50                 	db	80
   770  007F52  C3                 	db	195
   771  007F53  47                 	db	71
   772  007F54  24                 	db	36
   773  007F55  74                 	db	116
   774  007F56  49                 	db	73
   775  007F57  97                 	db	151
   776  007F58  18                 	db	24
   777  007F59  4B                 	db	75
   778  007F5A  BC                 	db	188
   779  007F5B  BE                 	db	190
   780  007F5C  4C                 	db	76
   781  007F5D  6B                 	db	107
   782  007F5E  6E                 	db	110
   783  007F5F  4E                 	db	78
   784  007F60  03                 	db	3
   785  007F61  15                 	db	21
   786  007F62  50                 	db	80
   787  007F63  79                 	db	121
   788  007F64  AD                 	db	173
   789  007F65  60                 	db	96
   790  007F66  F3                 	db	243
   791  007F67  49                 	db	73
   792  007F68  71                 	db	113
   793  007F69                     __end_of__powers_:
   794                           	opt stack 0
   795  007F69                     exp@coeff:
   796                           	opt stack 0
   797  007F69  00                 	db	0
   798  007F6A  80                 	db	128
   799  007F6B  3F                 	db	63
   800  007F6C  72                 	db	114
   801  007F6D  31                 	db	49
   802  007F6E  3F                 	db	63
   803  007F6F  FE                 	db	254
   804  007F70  75                 	db	117
   805  007F71  3E                 	db	62
   806  007F72  58                 	db	88
   807  007F73  63                 	db	99
   808  007F74  3D                 	db	61
   809  007F75  95                 	db	149
   810  007F76  1D                 	db	29
   811  007F77  3C                 	db	60
   812  007F78  C5                 	db	197
   813  007F79  AE                 	db	174
   814  007F7A  3A                 	db	58
   815  007F7B  79                 	db	121
   816  007F7C  21                 	db	33
   817  007F7D  39                 	db	57
   818  007F7E  94                 	db	148
   819  007F7F  80                 	db	128
   820  007F80  37                 	db	55
   821  007F81  93                 	db	147
   822  007F82  A7                 	db	167
   823  007F83  35                 	db	53
   824  007F84  56                 	db	86
   825  007F85  15                 	db	21
   826  007F86  34                 	db	52
   827  007F87                     __end_ofexp@coeff:
   828                           	opt stack 0
   829  007F87                     log@coeff:
   830                           	opt stack 0
   831  007F87  00                 	db	0
   832  007F88  00                 	db	0
   833  007F89  00                 	db	0
   834  007F8A  00                 	db	0
   835  007F8B  80                 	db	128
   836  007F8C  3F                 	db	63
   837  007F8D  F0                 	db	240
   838  007F8E  FF                 	db	255
   839  007F8F  BE                 	db	190
   840  007F90  E2                 	db	226
   841  007F91  A9                 	db	169
   842  007F92  3E                 	db	62
   843  007F93  83                 	db	131
   844  007F94  76                 	db	118
   845  007F95  BE                 	db	190
   846  007F96  AE                 	db	174
   847  007F97  2B                 	db	43
   848  007F98  3E                 	db	62
   849  007F99  3C                 	db	60
   850  007F9A  C3                 	db	195
   851  007F9B  BD                 	db	189
   852  007F9C  D2                 	db	210
   853  007F9D  13                 	db	19
   854  007F9E  3D                 	db	61
   855  007F9F  78                 	db	120
   856  007FA0  D3                 	db	211
   857  007FA1  BB                 	db	187
   858  007FA2                     __end_oflog@coeff:
   859                           	opt stack 0
   860  007FA2                     STR_3:
   861  007FA2  20                 	db	32
   862  007FA3  43                 	db	67	;'C'
   863  007FA4  65                 	db	101	;'e'
   864  007FA5  6C                 	db	108	;'l'
   865  007FA6  6C                 	db	108	;'l'
   866  007FA7  20                 	db	32
   867  007FA8  25                 	db	37
   868  007FA9  64                 	db	100	;'d'
   869  007FAA  20                 	db	32
   870  007FAB  56                 	db	86	;'V'
   871  007FAC  6F                 	db	111	;'o'
   872  007FAD  6C                 	db	108	;'l'
   873  007FAE  74                 	db	116	;'t'
   874  007FAF  61                 	db	97	;'a'
   875  007FB0  67                 	db	103	;'g'
   876  007FB1  65                 	db	101	;'e'
   877  007FB2  3A                 	db	58	;':'
   878  007FB3  20                 	db	32
   879  007FB4  25                 	db	37
   880  007FB5  31                 	db	49	;'1'
   881  007FB6  2E                 	db	46
   882  007FB7  32                 	db	50	;'2'
   883  007FB8  66                 	db	102	;'f'
   884  007FB9  20                 	db	32
   885  007FBA  0A                 	db	10
   886  007FBB  00                 	db	0
   887  007FBC                     STR_1:
   888  007FBC  54                 	db	84	;'T'
   889  007FBD  65                 	db	101	;'e'
   890  007FBE  6D                 	db	109	;'m'
   891  007FBF  70                 	db	112	;'p'
   892  007FC0  20                 	db	32
   893  007FC1  53                 	db	83	;'S'
   894  007FC2  65                 	db	101	;'e'
   895  007FC3  6E                 	db	110	;'n'
   896  007FC4  73                 	db	115	;'s'
   897  007FC5  65                 	db	101	;'e'
   898  007FC6  20                 	db	32
   899  007FC7  25                 	db	37
   900  007FC8  62                 	db	98	;'b'
   901  007FC9  20                 	db	32
   902  007FCA  69                 	db	105	;'i'
   903  007FCB  73                 	db	115	;'s'
   904  007FCC  20                 	db	32
   905  007FCD  74                 	db	116	;'t'
   906  007FCE  6F                 	db	111	;'o'
   907  007FCF  6F                 	db	111	;'o'
   908  007FD0  20                 	db	32
   909  007FD1  68                 	db	104	;'h'
   910  007FD2  6F                 	db	111	;'o'
   911  007FD3  74                 	db	116	;'t'
   912  007FD4  00                 	db	0
   913  007FD5                     STR_4:
   914  007FD5  20                 	db	32
   915  007FD6  43                 	db	67	;'C'
   916  007FD7  65                 	db	101	;'e'
   917  007FD8  6C                 	db	108	;'l'
   918  007FD9  6C                 	db	108	;'l'
   919  007FDA  20                 	db	32
   920  007FDB  25                 	db	37
   921  007FDC  64                 	db	100	;'d'
   922  007FDD  20                 	db	32
   923  007FDE  74                 	db	116	;'t'
   924  007FDF  65                 	db	101	;'e'
   925  007FE0  6D                 	db	109	;'m'
   926  007FE1  70                 	db	112	;'p'
   927  007FE2  3A                 	db	58	;':'
   928  007FE3  20                 	db	32
   929  007FE4  25                 	db	37
   930  007FE5  31                 	db	49	;'1'
   931  007FE6  2E                 	db	46
   932  007FE7  32                 	db	50	;'2'
   933  007FE8  66                 	db	102	;'f'
   934  007FE9  20                 	db	32
   935  007FEA  0A                 	db	10
   936  007FEB  00                 	db	0
   937  007FEC                     STR_5:
   938  007FEC  4F                 	db	79	;'O'
   939  007FED  76                 	db	118	;'v'
   940  007FEE  65                 	db	101	;'e'
   941  007FEF  72                 	db	114	;'r'
   942  007FF0  20                 	db	32
   943  007FF1  43                 	db	67	;'C'
   944  007FF2  75                 	db	117	;'u'
   945  007FF3  72                 	db	114	;'r'
   946  007FF4  72                 	db	114	;'r'
   947  007FF5  65                 	db	101	;'e'
   948  007FF6  6E                 	db	110	;'n'
   949  007FF7  74                 	db	116	;'t'
   950  007FF8  0A                 	db	10
   951  007FF9  00                 	db	0
   952  007FFA                     STR_2:
   953  007FFA  42                 	db	66	;'B'
   954  007FFB  4F                 	db	79	;'O'
   955  007FFC  4F                 	db	79	;'O'
   956  007FFD  54                 	db	84	;'T'
   957  007FFE  00                 	db	0
   958                           
   959                           ; #config settings
   960  007FFF  00                 	db	0	; dummy byte at the end
   961  0000                     
   962                           	psect	nvCOMRAM
   963  00004F                     __pnvCOMRAM:
   964                           	opt stack 0
   965  00004F                     _timer0ReloadVal16bit:
   966                           	opt stack 0
   967  00004F                     	ds	2
   968                           
   969                           	psect	nvBANK0
   970  0000F4                     __pnvBANK0:
   971                           	opt stack 0
   972  0000F4                     _eusart1TxBufferRemaining:
   973                           	opt stack 0
   974  0000F4                     	ds	1
   975  0000                     _ANSELA	set	3896
   976  0000                     _ANSELB	set	3897
   977  0000                     _ANSELC	set	3898
   978  0000                     _ANSELD	set	3899
   979  0000                     _ANSELE	set	3900
   980  0000                     _ADCON0	set	4034
   981  0000                     _ADCON0bits	set	4034
   982  0000                     _ADCON1	set	4033
   983  0000                     _ADCON2	set	4032
   984  0000                     _ADRESH	set	4036
   985  0000                     _ADRESL	set	4035
   986  0000                     _BAUDCON1	set	4024
   987  0000                     _INTCON2bits	set	4081
   988  0000                     _INTCONbits	set	4082
   989  0000                     _IPR1bits	set	3999
   990  0000                     _LATA	set	3977
   991  0000                     _LATAbits	set	3977
   992  0000                     _LATB	set	3978
   993  0000                     _LATC	set	3979
   994  0000                     _LATCbits	set	3979
   995  0000                     _LATD	set	3980
   996  0000                     _LATE	set	3981
   997  0000                     _OSCCON	set	4051
   998  0000                     _OSCCON2	set	4050
   999  0000                     _OSCTUNE	set	3995
  1000  0000                     _PIE1bits	set	3997
  1001  0000                     _PIR1bits	set	3998
  1002  0000                     _RCONbits	set	4048
  1003  0000                     _RCREG1	set	4014
  1004  0000                     _RCSTA1	set	4011
  1005  0000                     _RCSTA1bits	set	4011
  1006  0000                     _SLRCON	set	3936
  1007  0000                     _SPBRG1	set	4015
  1008  0000                     _SPBRGH1	set	4016
  1009  0000                     _SSP2ADD	set	3950
  1010  0000                     _SSP2BUF	set	3951
  1011  0000                     _SSP2CON1	set	3948
  1012  0000                     _SSP2CON1bits	set	3948
  1013  0000                     _SSP2STAT	set	3949
  1014  0000                     _SSP2STATbits	set	3949
  1015  0000                     _T0CON	set	4053
  1016  0000                     _T0CONbits	set	4053
  1017  0000                     _TMR0H	set	4055
  1018  0000                     _TMR0L	set	4054
  1019  0000                     _TRISA	set	3986
  1020  0000                     _TRISB	set	3987
  1021  0000                     _TRISC	set	3988
  1022  0000                     _TRISD	set	3989
  1023  0000                     _TRISDbits	set	3989
  1024  0000                     _TRISE	set	3990
  1025  0000                     _TXREG1	set	4013
  1026  0000                     _TXSTA1	set	4012
  1027  0000                     _WPUB	set	3937
  1028  0000                     _LATD3	set	31843
  1029  0000                     _LATD6	set	31846
  1030  0000                     _TRISD3	set	31915
  1031                           
  1032                           	psect	cinit
  1033  0036DE                     __pcinit:
  1034                           	opt stack 0
  1035  0036DE                     start_initialization:
  1036                           	opt stack 0
  1037  0036DE                     __initialization:
  1038                           	opt stack 0
  1039                           
  1040                           ; Initialize objects allocated to BANK2 (16 bytes)
  1041                           ; load TBLPTR registers with __pidataBANK2
  1042  0036DE  0EC2               	movlw	low __pidataBANK2
  1043  0036E0  6EF6               	movwf	tblptrl,c
  1044  0036E2  0E3E               	movlw	high __pidataBANK2
  1045  0036E4  6EF7               	movwf	tblptrh,c
  1046  0036E6  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1047  0036E8  6EF8               	movwf	tblptru,c
  1048  0036EA  EE02  F0D8         	lfsr	0,__pdataBANK2
  1049  0036EE  EE10 F010          	lfsr	1,16
  1050  0036F2                     copy_data0:
  1051  0036F2  0009               	tblrd		*+
  1052  0036F4  CFF5 FFEE          	movff	tablat,postinc0
  1053  0036F8  50E5               	movf	postdec1,w,c
  1054  0036FA  50E1               	movf	fsr1l,w,c
  1055  0036FC  E1FA               	bnz	copy_data0
  1056                           
  1057                           ; Initialize objects allocated to BANK0 (6 bytes)
  1058                           ; load TBLPTR registers with __pidataBANK0
  1059  0036FE  0E1E               	movlw	low __pidataBANK0
  1060  003700  6EF6               	movwf	tblptrl,c
  1061  003702  0E3F               	movlw	high __pidataBANK0
  1062  003704  6EF7               	movwf	tblptrh,c
  1063  003706  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1064  003708  6EF8               	movwf	tblptru,c
  1065  00370A  EE00  F0EE         	lfsr	0,__pdataBANK0
  1066  00370E  EE10 F006          	lfsr	1,6
  1067  003712                     copy_data1:
  1068  003712  0009               	tblrd		*+
  1069  003714  CFF5 FFEE          	movff	tablat,postinc0
  1070  003718  50E5               	movf	postdec1,w,c
  1071  00371A  50E1               	movf	fsr1l,w,c
  1072  00371C  E1FA               	bnz	copy_data1
  1073                           
  1074                           ; Clear objects allocated to BANK2 (216 bytes)
  1075  00371E  EE02  F000         	lfsr	0,__pbssBANK2
  1076  003722  0ED8               	movlw	216
  1077  003724                     clear_0:
  1078  003724  6AEE               	clrf	postinc0,c
  1079  003726  06E8               	decf	wreg,f,c
  1080  003728  E1FD               	bnz	clear_0
  1081                           
  1082                           ; Clear objects allocated to BANK1 (50 bytes)
  1083  00372A  EE01  F0CE         	lfsr	0,__pbssBANK1
  1084  00372E  0E32               	movlw	50
  1085  003730                     clear_1:
  1086  003730  6AEE               	clrf	postinc0,c
  1087  003732  06E8               	decf	wreg,f,c
  1088  003734  E1FD               	bnz	clear_1
  1089                           
  1090                           ; Clear objects allocated to BANK0 (53 bytes)
  1091  003736  EE00  F0B9         	lfsr	0,__pbssBANK0
  1092  00373A  0E35               	movlw	53
  1093  00373C                     clear_2:
  1094  00373C  6AEE               	clrf	postinc0,c
  1095  00373E  06E8               	decf	wreg,f,c
  1096  003740  E1FD               	bnz	clear_2
  1097                           
  1098                           ; Clear objects allocated to COMRAM (12 bytes)
  1099  003742  EE00  F043         	lfsr	0,__pbssCOMRAM
  1100  003746  0E0C               	movlw	12
  1101  003748                     clear_3:
  1102  003748  6AEE               	clrf	postinc0,c
  1103  00374A  06E8               	decf	wreg,f,c
  1104  00374C  E1FD               	bnz	clear_3
  1105  00374E                     end_of_initialization:
  1106                           	opt stack 0
  1107  00374E                     __end_of__initialization:
  1108                           	opt stack 0
  1109  00374E  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1110  003750  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1111  003752  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1112  003754  6EF8               	movwf	tblptru,c
  1113  003756  0100               	movlb	0
  1114  003758  EFA2  F01D         	goto	_main	;jump to C main() function
  1115                           tblptru	equ	0xFF8
  1116                           tblptrh	equ	0xFF7
  1117                           tblptrl	equ	0xFF6
  1118                           tablat	equ	0xFF5
  1119                           postinc0	equ	0xFEE
  1120                           wreg	equ	0xFE8
  1121                           postdec1	equ	0xFE5
  1122                           fsr1l	equ	0xFE1
  1123                           
  1124                           	psect	bssCOMRAM
  1125  000043                     __pbssCOMRAM:
  1126                           	opt stack 0
  1127  000043                     _current_byte:
  1128                           	opt stack 0
  1129  000043                     	ds	2
  1130  000045                     _i:
  1131                           	opt stack 0
  1132  000045                     	ds	2
  1133  000047                     _CFGR0:
  1134                           	opt stack 0
  1135  000047                     	ds	1
  1136  000048                     _CFGR4:
  1137                           	opt stack 0
  1138  000048                     	ds	1
  1139  000049                     _CFGR5:
  1140                           	opt stack 0
  1141  000049                     	ds	1
  1142  00004A                     _eusart1RxHead:
  1143                           	opt stack 0
  1144  00004A                     	ds	1
  1145  00004B                     _eusart1TxHead:
  1146                           	opt stack 0
  1147  00004B                     	ds	1
  1148  00004C                     _eusart1TxTail:
  1149                           	opt stack 0
  1150  00004C                     	ds	1
  1151  00004D                     _current_ic:
  1152                           	opt stack 0
  1153  00004D                     	ds	2
  1154                           tblptru	equ	0xFF8
  1155                           tblptrh	equ	0xFF7
  1156                           tblptrl	equ	0xFF6
  1157                           tablat	equ	0xFF5
  1158                           postinc0	equ	0xFEE
  1159                           wreg	equ	0xFE8
  1160                           postdec1	equ	0xFE5
  1161                           fsr1l	equ	0xFE1
  1162                           
  1163                           	psect	bssBANK0
  1164  0000B9                     __pbssBANK0:
  1165                           	opt stack 0
  1166  0000B9                     _Current:
  1167                           	opt stack 0
  1168  0000B9                     	ds	12
  1169  0000C5                     _CC1:
  1170                           	opt stack 0
  1171  0000C5                     	ds	3
  1172  0000C8                     _CC2:
  1173                           	opt stack 0
  1174  0000C8                     	ds	3
  1175  0000CB                     _CC3:
  1176                           	opt stack 0
  1177  0000CB                     	ds	3
  1178  0000CE                     _Volt1:
  1179                           	opt stack 0
  1180  0000CE                     	ds	3
  1181  0000D1                     _fault:
  1182                           	opt stack 0
  1183  0000D1                     	ds	3
  1184  0000D4                     _Read_Status_INC:
  1185                           	opt stack 0
  1186  0000D4                     	ds	2
  1187  0000D6                     _errno:
  1188                           	opt stack 0
  1189  0000D6                     	ds	2
  1190  0000D8                     _faultvalue:
  1191                           	opt stack 0
  1192  0000D8                     	ds	2
  1193  0000DA                     _j:
  1194                           	opt stack 0
  1195  0000DA                     	ds	2
  1196  0000DC                     _k:
  1197                           	opt stack 0
  1198  0000DC                     	ds	2
  1199  0000DE                     _eusart1RxCount:
  1200                           	opt stack 0
  1201  0000DE                     	ds	1
  1202  0000DF                     _eusart1RxTail:
  1203                           	opt stack 0
  1204  0000DF                     	ds	1
  1205  0000E0                     _fault_flag:
  1206                           	opt stack 0
  1207  0000E0                     	ds	1
  1208  0000E1                     _infault:
  1209                           	opt stack 0
  1210  0000E1                     	ds	1
  1211  0000E2                     _ADAX:
  1212                           	opt stack 0
  1213  0000E2                     	ds	4
  1214  0000E6                     _ADCV:
  1215                           	opt stack 0
  1216  0000E6                     	ds	4
  1217  0000EA                     _ADSTAT:
  1218                           	opt stack 0
  1219  0000EA                     	ds	4
  1220                           tblptru	equ	0xFF8
  1221                           tblptrh	equ	0xFF7
  1222                           tblptrl	equ	0xFF6
  1223                           tablat	equ	0xFF5
  1224                           postinc0	equ	0xFEE
  1225                           wreg	equ	0xFE8
  1226                           postdec1	equ	0xFE5
  1227                           fsr1l	equ	0xFE1
  1228                           
  1229                           	psect	dataBANK0
  1230  0000EE                     __pdataBANK0:
  1231                           	opt stack 0
  1232  0000EE                     _Over_Voltage_Value:
  1233                           	opt stack 0
  1234  0000EE                     	ds	2
  1235  0000F0                     _Under_Voltage_Value:
  1236                           	opt stack 0
  1237  0000F0                     	ds	2
  1238  0000F2                     _CarOn:
  1239                           	opt stack 0
  1240  0000F2                     	ds	1
  1241  0000F3                     _CurrentDir:
  1242                           	opt stack 0
  1243  0000F3                     	ds	1
  1244                           tblptru	equ	0xFF8
  1245                           tblptrh	equ	0xFF7
  1246                           tblptrl	equ	0xFF6
  1247                           tablat	equ	0xFF5
  1248                           postinc0	equ	0xFEE
  1249                           wreg	equ	0xFE8
  1250                           postdec1	equ	0xFE5
  1251                           fsr1l	equ	0xFE1
  1252                           
  1253                           	psect	bssBANK1
  1254  0001CE                     __pbssBANK1:
  1255                           	opt stack 0
  1256  0001CE                     _eusart1RxBuffer:
  1257                           	opt stack 0
  1258  0001CE                     	ds	8
  1259  0001D6                     _eusart1TxBuffer:
  1260                           	opt stack 0
  1261  0001D6                     	ds	8
  1262  0001DE                     _Volt2:
  1263                           	opt stack 0
  1264  0001DE                     	ds	3
  1265  0001E1                     _CFGR1:
  1266                           	opt stack 0
  1267  0001E1                     	ds	1
  1268  0001E2                     _CFGR2:
  1269                           	opt stack 0
  1270  0001E2                     	ds	1
  1271  0001E3                     _CFGR3:
  1272                           	opt stack 0
  1273  0001E3                     	ds	1
  1274  0001E4                     _Temp_Adc:
  1275                           	opt stack 0
  1276  0001E4                     	ds	16
  1277  0001F4                     _LTC6804_DATA_ConfigBank:
  1278                           	opt stack 0
  1279  0001F4                     	ds	12
  1280                           tblptru	equ	0xFF8
  1281                           tblptrh	equ	0xFF7
  1282                           tblptrl	equ	0xFF6
  1283                           tablat	equ	0xFF5
  1284                           postinc0	equ	0xFEE
  1285                           wreg	equ	0xFE8
  1286                           postdec1	equ	0xFE5
  1287                           fsr1l	equ	0xFE1
  1288                           
  1289                           	psect	bssBANK2
  1290  000200                     __pbssBANK2:
  1291                           	opt stack 0
  1292  000200                     _PrevTemp_DegF:
  1293                           	opt stack 0
  1294  000200                     	ds	24
  1295  000218                     _Temp_DegF:
  1296                           	opt stack 0
  1297  000218                     	ds	24
  1298  000230                     _Voltage_data:
  1299                           	opt stack 0
  1300  000230                     	ds	24
  1301  000248                     _CVolt:
  1302                           	opt stack 0
  1303  000248                     	ds	18
  1304  00025A                     _CurrentOffset:
  1305                           	opt stack 0
  1306  00025A                     	ds	18
  1307  00026C                     _Aux_codes_Bank:
  1308                           	opt stack 0
  1309  00026C                     	ds	12
  1310  000278                     _Aux_data:
  1311                           	opt stack 0
  1312  000278                     	ds	12
  1313  000284                     _Stat_codes_Bank:
  1314                           	opt stack 0
  1315  000284                     	ds	12
  1316  000290                     _aux_codes_Bank1:
  1317                           	opt stack 0
  1318  000290                     	ds	12
  1319  00029C                     _aux_codes_Bank2:
  1320                           	opt stack 0
  1321  00029C                     	ds	12
  1322  0002A8                     _TmpTemp_DegF:
  1323                           	opt stack 0
  1324  0002A8                     	ds	24
  1325  0002C0                     _cell_codes_Bank:
  1326                           	opt stack 0
  1327  0002C0                     	ds	24
  1328                           tblptru	equ	0xFF8
  1329                           tblptrh	equ	0xFF7
  1330                           tblptrl	equ	0xFF6
  1331                           tablat	equ	0xFF5
  1332                           postinc0	equ	0xFEE
  1333                           wreg	equ	0xFE8
  1334                           postdec1	equ	0xFE5
  1335                           fsr1l	equ	0xFE1
  1336                           
  1337                           	psect	dataBANK2
  1338  0002D8                     __pdataBANK2:
  1339                           	opt stack 0
  1340  0002D8                     _retrn:
  1341                           	opt stack 0
  1342  0002D8                     	ds	16
  1343                           tblptru	equ	0xFF8
  1344                           tblptrh	equ	0xFF7
  1345                           tblptrl	equ	0xFF6
  1346                           tablat	equ	0xFF5
  1347                           postinc0	equ	0xFEE
  1348                           wreg	equ	0xFE8
  1349                           postdec1	equ	0xFE5
  1350                           fsr1l	equ	0xFE1
  1351                           
  1352                           	psect	cstackBANK1
  1353  000100                     __pcstackBANK1:
  1354                           	opt stack 0
  1355  000100                     _printf$2740:
  1356                           	opt stack 0
  1357  000100                     LTC6804_wrcfg@cmd:
  1358                           	opt stack 0
  1359                           
  1360                           ; 200 bytes @ 0x0
  1361  000100                     	ds	3
  1362  000103                     _printf$1949:
  1363                           	opt stack 0
  1364                           
  1365                           ; 2 bytes @ 0x3
  1366  000103                     	ds	2
  1367  000105                     printf@ap:
  1368                           	opt stack 0
  1369                           
  1370                           ; 2 bytes @ 0x5
  1371  000105                     	ds	2
  1372  000107                     printf@width:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x7
  1376  000107                     	ds	2
  1377  000109                     printf@tmpval:
  1378                           	opt stack 0
  1379                           
  1380                           ; 4 bytes @ 0x9
  1381  000109                     	ds	4
  1382  00010D                     printf@val:
  1383                           	opt stack 0
  1384                           
  1385                           ; 4 bytes @ 0xD
  1386  00010D                     	ds	4
  1387  000111                     printf@flag:
  1388                           	opt stack 0
  1389                           
  1390                           ; 2 bytes @ 0x11
  1391  000111                     	ds	2
  1392  000113                     printf@exp:
  1393                           	opt stack 0
  1394                           
  1395                           ; 2 bytes @ 0x13
  1396  000113                     	ds	2
  1397  000115                     printf@fval:
  1398                           	opt stack 0
  1399                           
  1400                           ; 3 bytes @ 0x15
  1401  000115                     	ds	3
  1402  000118                     printf@prec:
  1403                           	opt stack 0
  1404                           
  1405                           ; 2 bytes @ 0x18
  1406  000118                     	ds	2
  1407  00011A                     printf@c:
  1408                           	opt stack 0
  1409                           
  1410                           ; 1 bytes @ 0x1A
  1411  00011A                     	ds	174
  1412  0001C8                     LTC6804_wrcfg@BYTES_IN_REG:
  1413                           	opt stack 0
  1414                           
  1415                           ; 2 bytes @ 0xC8
  1416  0001C8                     	ds	2
  1417  0001CA                     LTC6804_wrcfg@temp_pec:
  1418                           	opt stack 0
  1419                           
  1420                           ; 2 bytes @ 0xCA
  1421  0001CA                     	ds	2
  1422  0001CC                     LTC6804_wrcfg@cmd_index:
  1423                           	opt stack 0
  1424                           
  1425                           ; 2 bytes @ 0xCC
  1426  0001CC                     	ds	2
  1427                           tblptru	equ	0xFF8
  1428                           tblptrh	equ	0xFF7
  1429                           tblptrl	equ	0xFF6
  1430                           tablat	equ	0xFF5
  1431                           postinc0	equ	0xFEE
  1432                           wreg	equ	0xFE8
  1433                           postdec1	equ	0xFE5
  1434                           fsr1l	equ	0xFE1
  1435                           
  1436                           	psect	cstackBANK0
  1437  000060                     __pcstackBANK0:
  1438                           	opt stack 0
  1439  000060                     ?_LTC6804_rdcv:
  1440                           	opt stack 0
  1441  000060                     ?_fround:
  1442                           	opt stack 0
  1443  000060                     ?_scale:
  1444                           	opt stack 0
  1445  000060                     LTC6804_rdcv@reg:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x0
  1449  000060                     	ds	2
  1450  000062                     LTC6804_rdcv@total_ic:
  1451                           	opt stack 0
  1452                           
  1453                           ; 2 bytes @ 0x2
  1454  000062                     	ds	1
  1455  000063                     _fround$2738:
  1456                           	opt stack 0
  1457  000063                     _scale$2739:
  1458                           	opt stack 0
  1459                           
  1460                           ; 3 bytes @ 0x3
  1461  000063                     	ds	1
  1462  000064                     LTC6804_rdcv@cell_codes:
  1463                           	opt stack 0
  1464                           
  1465                           ; 2 bytes @ 0x4
  1466  000064                     	ds	2
  1467  000066                     ??_LTC6804_rdcv:
  1468  000066                     scale@scl:
  1469                           	opt stack 0
  1470  000066                     _fround$2737:
  1471                           	opt stack 0
  1472                           
  1473                           ; 3 bytes @ 0x6
  1474  000066                     	ds	3
  1475  000069                     fround@prec:
  1476                           	opt stack 0
  1477                           
  1478                           ; 1 bytes @ 0x9
  1479  000069                     	ds	1
  1480  00006A                     ?___ftadd:
  1481                           	opt stack 0
  1482  00006A                     ___ftadd@f1:
  1483                           	opt stack 0
  1484                           
  1485                           ; 3 bytes @ 0xA
  1486  00006A                     	ds	2
  1487  00006C                     LTC6804_rdcv@hi:
  1488                           	opt stack 0
  1489                           
  1490                           ; 2 bytes @ 0xC
  1491  00006C                     	ds	1
  1492  00006D                     ___ftadd@f2:
  1493                           	opt stack 0
  1494                           
  1495                           ; 3 bytes @ 0xD
  1496  00006D                     	ds	1
  1497  00006E                     LTC6804_rdcv@cell_data:
  1498                           	opt stack 0
  1499                           
  1500                           ; 20 bytes @ 0xE
  1501  00006E                     	ds	2
  1502  000070                     ??___ftadd:
  1503                           
  1504                           ; 1 bytes @ 0x10
  1505  000070                     	ds	3
  1506  000073                     ___ftadd@sign:
  1507                           	opt stack 0
  1508                           
  1509                           ; 1 bytes @ 0x13
  1510  000073                     	ds	1
  1511  000074                     ___ftadd@exp2:
  1512                           	opt stack 0
  1513                           
  1514                           ; 1 bytes @ 0x14
  1515  000074                     	ds	1
  1516  000075                     ___ftadd@exp1:
  1517                           	opt stack 0
  1518                           
  1519                           ; 1 bytes @ 0x15
  1520  000075                     	ds	1
  1521  000076                     ?___ftsub:
  1522                           	opt stack 0
  1523  000076                     ?_eval_poly:
  1524                           	opt stack 0
  1525  000076                     ?___fttol:
  1526                           	opt stack 0
  1527  000076                     ___ftsub@f1:
  1528                           	opt stack 0
  1529  000076                     ___fttol@f1:
  1530                           	opt stack 0
  1531  000076                     eval_poly@x:
  1532                           	opt stack 0
  1533                           
  1534                           ; 3 bytes @ 0x16
  1535  000076                     	ds	3
  1536  000079                     eval_poly@d:
  1537                           	opt stack 0
  1538  000079                     ___ftsub@f2:
  1539                           	opt stack 0
  1540                           
  1541                           ; 3 bytes @ 0x19
  1542  000079                     	ds	1
  1543  00007A                     ??___fttol:
  1544                           
  1545                           ; 1 bytes @ 0x1A
  1546  00007A                     	ds	1
  1547  00007B                     eval_poly@n:
  1548                           	opt stack 0
  1549                           
  1550                           ; 2 bytes @ 0x1B
  1551  00007B                     	ds	2
  1552  00007D                     eval_poly@res:
  1553                           	opt stack 0
  1554                           
  1555                           ; 3 bytes @ 0x1D
  1556  00007D                     	ds	2
  1557  00007F                     ___fttol@sign1:
  1558                           	opt stack 0
  1559                           
  1560                           ; 1 bytes @ 0x1F
  1561  00007F                     	ds	1
  1562  000080                     ?_log:
  1563                           	opt stack 0
  1564  000080                     log@x:
  1565                           	opt stack 0
  1566  000080                     ___fttol@lval:
  1567                           	opt stack 0
  1568                           
  1569                           ; 4 bytes @ 0x20
  1570  000080                     	ds	2
  1571  000082                     _LTC6804_rdcv$2734:
  1572                           	opt stack 0
  1573                           
  1574                           ; 2 bytes @ 0x22
  1575  000082                     	ds	1
  1576  000083                     log@exponent:
  1577                           	opt stack 0
  1578                           
  1579                           ; 2 bytes @ 0x23
  1580  000083                     	ds	1
  1581  000084                     ___fttol@exp1:
  1582                           	opt stack 0
  1583  000084                     LTC6804_rdcv@pec_error:
  1584                           	opt stack 0
  1585                           
  1586                           ; 2 bytes @ 0x24
  1587  000084                     	ds	1
  1588  000085                     ?_ReadVoltToCurrent:
  1589                           	opt stack 0
  1590  000085                     _Temp_Convert$2726:
  1591                           	opt stack 0
  1592                           
  1593                           ; 3 bytes @ 0x25
  1594  000085                     	ds	1
  1595  000086                     LTC6804_rdcv@NUM_RX_BYT:
  1596                           	opt stack 0
  1597                           
  1598                           ; 2 bytes @ 0x26
  1599  000086                     	ds	2
  1600  000088                     LTC6804_rdcv@BYT_IN_REG:
  1601                           	opt stack 0
  1602  000088                     _Temp_Convert$2727:
  1603                           	opt stack 0
  1604  000088                     _ReadVoltToCurrent$2733:
  1605                           	opt stack 0
  1606                           
  1607                           ; 3 bytes @ 0x28
  1608  000088                     	ds	2
  1609  00008A                     LTC6804_rdcv@parsed_cell:
  1610                           	opt stack 0
  1611                           
  1612                           ; 2 bytes @ 0x2A
  1613  00008A                     	ds	1
  1614  00008B                     Temp_Convert@x:
  1615                           	opt stack 0
  1616  00008B                     ReadVoltToCurrent@CurrentTotal:
  1617                           	opt stack 0
  1618                           
  1619                           ; 3 bytes @ 0x2B
  1620  00008B                     	ds	1
  1621  00008C                     LTC6804_rdcv@received_pec:
  1622                           	opt stack 0
  1623                           
  1624                           ; 2 bytes @ 0x2C
  1625  00008C                     	ds	1
  1626  00008D                     Temp_Convert@steinhart:
  1627                           	opt stack 0
  1628                           
  1629                           ; 3 bytes @ 0x2D
  1630  00008D                     	ds	1
  1631  00008E                     ?_ReadCurrent:
  1632                           	opt stack 0
  1633  00008E                     LTC6804_rdcv@data_pec:
  1634                           	opt stack 0
  1635                           
  1636                           ; 2 bytes @ 0x2E
  1637  00008E                     	ds	2
  1638  000090                     LTC6804_rdcv@cell_reg:
  1639                           	opt stack 0
  1640                           
  1641                           ; 2 bytes @ 0x30
  1642  000090                     	ds	1
  1643  000091                     ReadCurrent@Return:
  1644                           	opt stack 0
  1645                           
  1646                           ; 3 bytes @ 0x31
  1647  000091                     	ds	1
  1648  000092                     LTC6804_rdcv@CELL_IN_REG:
  1649                           	opt stack 0
  1650                           
  1651                           ; 2 bytes @ 0x32
  1652  000092                     	ds	2
  1653  000094                     ReadCurrent@i:
  1654                           	opt stack 0
  1655  000094                     LTC6804_rdcv@current_cell:
  1656                           	opt stack 0
  1657                           
  1658                           ; 2 bytes @ 0x34
  1659  000094                     	ds	2
  1660  000096                     LTC6804_rdcv@data_counter:
  1661                           	opt stack 0
  1662  000096                     ___ftge@ff1:
  1663                           	opt stack 0
  1664                           
  1665                           ; 3 bytes @ 0x36
  1666  000096                     	ds	2
  1667  000098                     ?_Read_Battery:
  1668                           	opt stack 0
  1669  000098                     Read_Battery@BatteryPlacement:
  1670                           	opt stack 0
  1671                           
  1672                           ; 2 bytes @ 0x38
  1673  000098                     	ds	1
  1674  000099                     ___ftge@ff2:
  1675                           	opt stack 0
  1676                           
  1677                           ; 3 bytes @ 0x39
  1678  000099                     	ds	1
  1679  00009A                     Read_Battery@cell_codes:
  1680                           	opt stack 0
  1681                           
  1682                           ; 2 bytes @ 0x3A
  1683  00009A                     	ds	2
  1684  00009C                     ??_Read_Battery:
  1685  00009C                     ??___ftge:
  1686                           
  1687                           ; 1 bytes @ 0x3C
  1688  00009C                     	ds	2
  1689  00009E                     Read_Battery@Read_Status:
  1690                           	opt stack 0
  1691                           
  1692                           ; 2 bytes @ 0x3E
  1693  00009E                     	ds	1
  1694  00009F                     ?_printf:
  1695                           	opt stack 0
  1696  00009F                     printf@f:
  1697                           	opt stack 0
  1698                           
  1699                           ; 2 bytes @ 0x3F
  1700  00009F                     	ds	7
  1701  0000A6                     ??_printf:
  1702                           
  1703                           ; 1 bytes @ 0x46
  1704  0000A6                     	ds	6
  1705  0000AC                     Temp_Fault@fault:
  1706                           	opt stack 0
  1707                           
  1708                           ; 1 bytes @ 0x4C
  1709  0000AC                     	ds	1
  1710  0000AD                     Temp_Fault@i:
  1711                           	opt stack 0
  1712                           
  1713                           ; 2 bytes @ 0x4D
  1714  0000AD                     	ds	2
  1715  0000AF                     _Run_Mode$2728:
  1716                           	opt stack 0
  1717                           
  1718                           ; 3 bytes @ 0x4F
  1719  0000AF                     	ds	3
  1720  0000B2                     Run_Mode@k:
  1721                           	opt stack 0
  1722                           
  1723                           ; 2 bytes @ 0x52
  1724  0000B2                     	ds	2
  1725  0000B4                     
  1726                           ; 2 bytes @ 0x54
  1727  0000B4                     	ds	2
  1728  0000B6                     
  1729                           ; 3 bytes @ 0x56
  1730  0000B6                     	ds	3
  1731                           tblptru	equ	0xFF8
  1732                           tblptrh	equ	0xFF7
  1733                           tblptrl	equ	0xFF6
  1734                           tablat	equ	0xFF5
  1735                           postinc0	equ	0xFEE
  1736                           wreg	equ	0xFE8
  1737                           postdec1	equ	0xFE5
  1738                           fsr1l	equ	0xFE1
  1739                           
  1740                           	psect	cstackCOMRAM
  1741  000001                     __pcstackCOMRAM:
  1742                           	opt stack 0
  1743  000001                     ??_INTERRUPT_InterruptManager:
  1744  000001                     
  1745                           ; 2 bytes @ 0x0
  1746  000001                     	ds	14
  1747  00000F                     ??_isdigit:
  1748  00000F                     ??_TMR0_Initialize:
  1749  00000F                     ?_ADC_GetConversion:
  1750                           	opt stack 0
  1751  00000F                     ?___awmod:
  1752                           	opt stack 0
  1753  00000F                     ?___ftpack:
  1754                           	opt stack 0
  1755  00000F                     ?_frexp:
  1756                           	opt stack 0
  1757  00000F                     ?___ftneg:
  1758                           	opt stack 0
  1759  00000F                     ?__tdiv_to_l_:
  1760                           	opt stack 0
  1761  00000F                     ?__div_to_l_:
  1762                           	opt stack 0
  1763  00000F                     ?___lldiv:
  1764                           	opt stack 0
  1765  00000F                     SPI2_Exchange8bit@stuff:
  1766                           	opt stack 0
  1767  00000F                     EUSART1_Write@txData:
  1768                           	opt stack 0
  1769  00000F                     Delay@wait:
  1770                           	opt stack 0
  1771  00000F                     DelayMicro@wait:
  1772                           	opt stack 0
  1773  00000F                     set_adc@MD:
  1774                           	opt stack 0
  1775  00000F                     ___awmod@dividend:
  1776                           	opt stack 0
  1777  00000F                     __div_to_l_@f1:
  1778                           	opt stack 0
  1779  00000F                     ___ftpack@arg:
  1780                           	opt stack 0
  1781  00000F                     __tdiv_to_l_@f1:
  1782                           	opt stack 0
  1783  00000F                     ___ftneg@f1:
  1784                           	opt stack 0
  1785  00000F                     frexp@value:
  1786                           	opt stack 0
  1787  00000F                     ___lldiv@dividend:
  1788                           	opt stack 0
  1789                           
  1790                           ; 4 bytes @ 0xE
  1791  00000F                     	ds	1
  1792  000010                     SPI2_Exchange8bit@data:
  1793                           	opt stack 0
  1794  000010                     putch@txData:
  1795                           	opt stack 0
  1796  000010                     _isdigit$2175:
  1797                           	opt stack 0
  1798                           
  1799                           ; 1 bytes @ 0xF
  1800  000010                     	ds	1
  1801  000011                     ??_ADC_GetConversion:
  1802  000011                     ??_Delay:
  1803  000011                     ??_DelayMicro:
  1804  000011                     isdigit@c:
  1805                           	opt stack 0
  1806  000011                     set_adc@DCP:
  1807                           	opt stack 0
  1808  000011                     spi_write_array@len:
  1809                           	opt stack 0
  1810  000011                     spi_write_read@tx_Data:
  1811                           	opt stack 0
  1812  000011                     ___awmod@divisor:
  1813                           	opt stack 0
  1814                           
  1815                           ; 2 bytes @ 0x10
  1816  000011                     	ds	1
  1817  000012                     ___ftpack@exp:
  1818                           	opt stack 0
  1819  000012                     Delay@x:
  1820                           	opt stack 0
  1821  000012                     DelayMicro@x:
  1822                           	opt stack 0
  1823  000012                     frexp@eptr:
  1824                           	opt stack 0
  1825  000012                     __div_to_l_@f2:
  1826                           	opt stack 0
  1827  000012                     __tdiv_to_l_@f2:
  1828                           	opt stack 0
  1829                           
  1830                           ; 3 bytes @ 0x11
  1831  000012                     	ds	1
  1832  000013                     ADC_GetConversion@channel:
  1833                           	opt stack 0
  1834  000013                     ___awmod@counter:
  1835                           	opt stack 0
  1836  000013                     ___ftpack@sign:
  1837                           	opt stack 0
  1838  000013                     set_adc@CH:
  1839                           	opt stack 0
  1840  000013                     spi_write_array@data:
  1841                           	opt stack 0
  1842  000013                     spi_write_read@tx_len:
  1843                           	opt stack 0
  1844  000013                     ___lldiv@divisor:
  1845                           	opt stack 0
  1846                           
  1847                           ; 4 bytes @ 0x12
  1848  000013                     	ds	1
  1849  000014                     ??___ftpack:
  1850  000014                     ??_frexp:
  1851  000014                     ___awmod@sign:
  1852                           	opt stack 0
  1853                           
  1854                           ; 1 bytes @ 0x13
  1855  000014                     	ds	1
  1856  000015                     ??_spi_write_array:
  1857  000015                     ??__tdiv_to_l_:
  1858  000015                     ?___awdiv:
  1859                           	opt stack 0
  1860  000015                     set_adc@CHG:
  1861                           	opt stack 0
  1862  000015                     spi_write_read@rx_data:
  1863                           	opt stack 0
  1864  000015                     ___awdiv@dividend:
  1865                           	opt stack 0
  1866  000015                     __div_to_l_@quot:
  1867                           	opt stack 0
  1868                           
  1869                           ; 4 bytes @ 0x14
  1870  000015                     	ds	2
  1871  000017                     ??_set_adc:
  1872  000017                     ?___awtoft:
  1873                           	opt stack 0
  1874  000017                     ?___lltoft:
  1875                           	opt stack 0
  1876  000017                     ?___lwtoft:
  1877                           	opt stack 0
  1878  000017                     spi_write_read@rx_len:
  1879                           	opt stack 0
  1880  000017                     ___awdiv@divisor:
  1881                           	opt stack 0
  1882  000017                     ___awtoft@c:
  1883                           	opt stack 0
  1884  000017                     ___lwtoft@c:
  1885                           	opt stack 0
  1886  000017                     ___lldiv@quotient:
  1887                           	opt stack 0
  1888  000017                     ___lltoft@c:
  1889                           	opt stack 0
  1890                           
  1891                           ; 4 bytes @ 0x16
  1892  000017                     	ds	1
  1893  000018                     __tdiv_to_l_@quot:
  1894                           	opt stack 0
  1895                           
  1896                           ; 4 bytes @ 0x17
  1897  000018                     	ds	1
  1898  000019                     ??_spi_write_read:
  1899  000019                     ___awdiv@counter:
  1900                           	opt stack 0
  1901  000019                     __div_to_l_@cntr:
  1902                           	opt stack 0
  1903  000019                     set_adc@md_bits:
  1904                           	opt stack 0
  1905                           
  1906                           ; 2 bytes @ 0x18
  1907  000019                     	ds	1
  1908  00001A                     ___awdiv@sign:
  1909                           	opt stack 0
  1910  00001A                     ___awtoft@sign:
  1911                           	opt stack 0
  1912  00001A                     __div_to_l_@exp1:
  1913                           	opt stack 0
  1914                           
  1915                           ; 1 bytes @ 0x19
  1916  00001A                     	ds	1
  1917  00001B                     ??___lltoft:
  1918  00001B                     ___lldiv@counter:
  1919                           	opt stack 0
  1920  00001B                     spi_write_read@i:
  1921                           	opt stack 0
  1922  00001B                     ___awdiv@quotient:
  1923                           	opt stack 0
  1924                           
  1925                           ; 2 bytes @ 0x1A
  1926  00001B                     	ds	1
  1927  00001C                     ?___llmod:
  1928                           	opt stack 0
  1929  00001C                     __tdiv_to_l_@cntr:
  1930                           	opt stack 0
  1931  00001C                     ___llmod@dividend:
  1932                           	opt stack 0
  1933                           
  1934                           ; 4 bytes @ 0x1B
  1935  00001C                     	ds	1
  1936  00001D                     ?___wmul:
  1937                           	opt stack 0
  1938  00001D                     __tdiv_to_l_@exp1:
  1939                           	opt stack 0
  1940  00001D                     ___wmul@multiplier:
  1941                           	opt stack 0
  1942                           
  1943                           ; 2 bytes @ 0x1C
  1944  00001D                     	ds	2
  1945  00001F                     ___lltoft@exp:
  1946                           	opt stack 0
  1947  00001F                     ___wmul@multiplicand:
  1948                           	opt stack 0
  1949                           
  1950                           ; 2 bytes @ 0x1E
  1951  00001F                     	ds	1
  1952  000020                     ___llmod@divisor:
  1953                           	opt stack 0
  1954                           
  1955                           ; 4 bytes @ 0x1F
  1956  000020                     	ds	1
  1957  000021                     ___wmul@product:
  1958                           	opt stack 0
  1959                           
  1960                           ; 2 bytes @ 0x20
  1961  000021                     	ds	2
  1962  000023                     ?_pec15_calc:
  1963                           	opt stack 0
  1964  000023                     ?___ftdiv:
  1965                           	opt stack 0
  1966  000023                     ?_Tempeture_Get:
  1967                           	opt stack 0
  1968  000023                     Tempeture_Get@channelnum:
  1969                           	opt stack 0
  1970  000023                     SetTempEnable@ic:
  1971                           	opt stack 0
  1972  000023                     Set_ADC_Mode@ic:
  1973                           	opt stack 0
  1974  000023                     Set_DCC_Mode_OFF@ic:
  1975                           	opt stack 0
  1976  000023                     Set_DCTO_Mode_OFF@ic:
  1977                           	opt stack 0
  1978  000023                     Set_REFON_Pin@ic:
  1979                           	opt stack 0
  1980  000023                     pec15_calc@len:
  1981                           	opt stack 0
  1982  000023                     ___ftdiv@f1:
  1983                           	opt stack 0
  1984                           
  1985                           ; 3 bytes @ 0x22
  1986  000023                     	ds	1
  1987  000024                     ___llmod@counter:
  1988                           	opt stack 0
  1989                           
  1990                           ; 1 bytes @ 0x23
  1991  000024                     	ds	1
  1992  000025                     ??_Set_DCC_Mode_OFF:
  1993  000025                     ??_Set_DCTO_Mode_OFF:
  1994  000025                     SetTempEnable@value:
  1995                           	opt stack 0
  1996  000025                     Set_ADC_Mode@ADCOPT_Mode:
  1997                           	opt stack 0
  1998  000025                     Set_REFON_Pin@REFON_Mode:
  1999                           	opt stack 0
  2000  000025                     pec15_calc@data:
  2001                           	opt stack 0
  2002                           
  2003                           ; 2 bytes @ 0x24
  2004  000025                     	ds	1
  2005  000026                     ??_Set_REFON_Pin:
  2006  000026                     ??_Set_ADC_Mode:
  2007  000026                     ??_SetTempEnable:
  2008  000026                     ___ftdiv@f2:
  2009                           	opt stack 0
  2010                           
  2011                           ; 3 bytes @ 0x25
  2012  000026                     	ds	1
  2013  000027                     ??_pec15_calc:
  2014  000027                     Set_DCC_Mode_OFF@fault_value:
  2015                           	opt stack 0
  2016  000027                     Set_DCTO_Mode_OFF@fault_value:
  2017                           	opt stack 0
  2018                           
  2019                           ; 2 bytes @ 0x26
  2020  000027                     	ds	1
  2021  000028                     SetTempEnable@fault_value:
  2022                           	opt stack 0
  2023  000028                     Set_ADC_Mode@fault_value:
  2024                           	opt stack 0
  2025  000028                     Set_REFON_Pin@fault_value:
  2026                           	opt stack 0
  2027                           
  2028                           ; 2 bytes @ 0x27
  2029  000028                     	ds	1
  2030  000029                     ??___ftdiv:
  2031                           
  2032                           ; 1 bytes @ 0x28
  2033  000029                     	ds	3
  2034  00002C                     ___ftdiv@cntr:
  2035                           	opt stack 0
  2036  00002C                     pec15_calc@addr:
  2037                           	opt stack 0
  2038                           
  2039                           ; 2 bytes @ 0x2B
  2040  00002C                     	ds	1
  2041  00002D                     ___ftdiv@f3:
  2042                           	opt stack 0
  2043                           
  2044                           ; 3 bytes @ 0x2C
  2045  00002D                     	ds	1
  2046  00002E                     pec15_calc@remainder:
  2047                           	opt stack 0
  2048                           
  2049                           ; 2 bytes @ 0x2D
  2050  00002E                     	ds	2
  2051  000030                     ??_LTC6804_adcv:
  2052  000030                     ___ftdiv@exp:
  2053                           	opt stack 0
  2054  000030                     LTC6804_rdcv_reg@reg:
  2055                           	opt stack 0
  2056  000030                     LTC6804_wrcfg@total_ic:
  2057                           	opt stack 0
  2058                           
  2059                           ; 2 bytes @ 0x2F
  2060  000030                     	ds	1
  2061  000031                     ___ftdiv@sign:
  2062                           	opt stack 0
  2063                           
  2064                           ; 1 bytes @ 0x30
  2065  000031                     	ds	1
  2066  000032                     ?___ftmul:
  2067                           	opt stack 0
  2068  000032                     LTC6804_rdcv_reg@total_ic:
  2069                           	opt stack 0
  2070  000032                     LTC6804_wrcfg@config:
  2071                           	opt stack 0
  2072  000032                     ___ftmul@f1:
  2073                           	opt stack 0
  2074  000032                     LTC6804_adcv@cmd:
  2075                           	opt stack 0
  2076                           
  2077                           ; 8 bytes @ 0x31
  2078  000032                     	ds	2
  2079  000034                     ??_LTC6804_wrcfg:
  2080  000034                     LTC6804_rdcv_reg@data:
  2081                           	opt stack 0
  2082                           
  2083                           ; 2 bytes @ 0x33
  2084  000034                     	ds	1
  2085  000035                     ___ftmul@f2:
  2086                           	opt stack 0
  2087                           
  2088                           ; 3 bytes @ 0x34
  2089  000035                     	ds	1
  2090  000036                     ??_LTC6804_rdcv_reg:
  2091  000036                     Initalize_LT6804b@IC:
  2092                           	opt stack 0
  2093                           
  2094                           ; 2 bytes @ 0x35
  2095  000036                     	ds	2
  2096  000038                     ??___ftmul:
  2097  000038                     LTC6804_rdcv_reg@temp_pec:
  2098                           	opt stack 0
  2099                           
  2100                           ; 2 bytes @ 0x37
  2101  000038                     	ds	2
  2102  00003A                     LTC6804_adcv@temp_pec:
  2103                           	opt stack 0
  2104  00003A                     LTC6804_rdcv_reg@cmd:
  2105                           	opt stack 0
  2106                           
  2107                           ; 8 bytes @ 0x39
  2108  00003A                     	ds	1
  2109  00003B                     ___ftmul@exp:
  2110                           	opt stack 0
  2111                           
  2112                           ; 1 bytes @ 0x3A
  2113  00003B                     	ds	1
  2114  00003C                     ___ftmul@f3_as_product:
  2115                           	opt stack 0
  2116                           
  2117                           ; 3 bytes @ 0x3B
  2118  00003C                     	ds	3
  2119  00003F                     ___ftmul@cntr:
  2120                           	opt stack 0
  2121                           
  2122                           ; 1 bytes @ 0x3E
  2123  00003F                     	ds	1
  2124  000040                     ___ftmul@sign:
  2125                           	opt stack 0
  2126                           
  2127                           ; 1 bytes @ 0x3F
  2128  000040                     	ds	1
  2129  000041                     ??_eval_poly:
  2130  000041                     Temp_Filter@x:
  2131                           	opt stack 0
  2132                           
  2133                           ; 2 bytes @ 0x40
  2134  000041                     	ds	2
  2135  000043                     tblptru	equ	0xFF8
  2136                           tblptrh	equ	0xFF7
  2137                           tblptrl	equ	0xFF6
  2138                           tablat	equ	0xFF5
  2139                           postinc0	equ	0xFEE
  2140                           wreg	equ	0xFE8
  2141                           postdec1	equ	0xFE5
  2142                           fsr1l	equ	0xFE1
  2143                           
  2144                           ; 1 bytes @ 0x42
  2145 ;;
  2146 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2147 ;;
  2148 ;; *************** function _main *****************
  2149 ;; Defined at:
  2150 ;;		line 33 in file "Main.c"
  2151 ;; Parameters:    Size  Location     Type
  2152 ;;  argc            2   84[BANK0 ] int 
  2153 ;;  argv            3   86[BANK0 ] PTR PTR unsigned char 
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;		None
  2156 ;; Return value:  Size  Location     Type
  2157 ;;                  2   84[BANK0 ] int 
  2158 ;; Registers used:
  2159 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2160 ;; Tracked objects:
  2161 ;;		On entry : 0/0
  2162 ;;		On exit  : 0/0
  2163 ;;		Unchanged: 0/0
  2164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2165 ;;      Params:         0       5       0       0       0       0       0
  2166 ;;      Locals:         0       0       0       0       0       0       0
  2167 ;;      Temps:          0       0       0       0       0       0       0
  2168 ;;      Totals:         0       5       0       0       0       0       0
  2169 ;;Total ram usage:        5 bytes
  2170 ;; Hardware stack levels required when called:   10
  2171 ;; This function calls:
  2172 ;;		_Delay
  2173 ;;		_Run_Mode
  2174 ;;		_SYSTEM_Initialize
  2175 ;;		_Start_BMS
  2176 ;;		_printf
  2177 ;; This function is called by:
  2178 ;;		Startup code after reset
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text0
  2183  003B44                     __ptext0:
  2184                           	opt stack 0
  2185  003B44                     _main:
  2186                           	opt stack 21
  2187                           
  2188                           ;Main.c: 35: SYSTEM_Initialize();
  2189                           
  2190                           ;incstack = 0
  2191  003B44  ECEE  F01E         	call	_SYSTEM_Initialize	;wreg free
  2192                           
  2193                           ;Main.c: 36: do { LATD6 = 1; } while(0);
  2194  003B48  8C8C               	bsf	3980,6,c	;volatile
  2195                           
  2196                           ;Main.c: 37: Delay(120);
  2197  003B4A  0E00               	movlw	0
  2198  003B4C  6E10               	movwf	Delay@wait+1,c
  2199  003B4E  0E78               	movlw	120
  2200  003B50  6E0F               	movwf	Delay@wait,c
  2201  003B52  EC38  F01E         	call	_Delay	;wreg free
  2202                           
  2203                           ;Main.c: 38: do { LATD6 = 0; } while(0);
  2204  003B56  9C8C               	bcf	3980,6,c	;volatile
  2205                           
  2206                           ;Main.c: 56: (INTCONbits.GIE = 1);
  2207  003B58  8EF2               	bsf	intcon,7,c	;volatile
  2208                           
  2209                           ;Main.c: 59: (INTCONbits.PEIE = 1);
  2210  003B5A  8CF2               	bsf	intcon,6,c	;volatile
  2211                           
  2212                           ;Main.c: 68: LATCbits.LATC5 =1;
  2213  003B5C  8A8B               	bsf	3979,5,c	;volatile
  2214                           
  2215                           ;Main.c: 69: printf("BOOT");
  2216  003B5E  0EFA               	movlw	low STR_2
  2217  003B60  0100               	movlb	0	; () banked
  2218  003B62  6F9F               	movwf	printf@f& (0+255),b
  2219  003B64  0E7F               	movlw	high STR_2
  2220  003B66  0100               	movlb	0	; () banked
  2221  003B68  6FA0               	movwf	(printf@f+1)& (0+255),b
  2222  003B6A  EC58  F000         	call	_printf	;wreg free
  2223                           
  2224                           ;Main.c: 70: Start_BMS();
  2225  003B6E  EC92  F01F         	call	_Start_BMS	;wreg free
  2226  003B72                     l8621:
  2227                           
  2228                           ;Main.c: 73: {
  2229                           ;Main.c: 74: Run_Mode();
  2230  003B72  EC1E  F012         	call	_Run_Mode	;wreg free
  2231                           
  2232                           ;Main.c: 75: Delay(500);
  2233  003B76  0E01               	movlw	1
  2234  003B78  6E10               	movwf	Delay@wait+1,c
  2235  003B7A  0EF4               	movlw	244
  2236  003B7C  6E0F               	movwf	Delay@wait,c
  2237  003B7E  EC38  F01E         	call	_Delay	;wreg free
  2238  003B82  D7F7               	goto	l8621
  2239  003B84                     __end_of_main:
  2240                           	opt stack 0
  2241                           tblptru	equ	0xFF8
  2242                           tblptrh	equ	0xFF7
  2243                           tblptrl	equ	0xFF6
  2244                           tablat	equ	0xFF5
  2245                           intcon	equ	0xFF2
  2246                           postinc0	equ	0xFEE
  2247                           wreg	equ	0xFE8
  2248                           postdec1	equ	0xFE5
  2249                           fsr1l	equ	0xFE1
  2250                           
  2251 ;; *************** function _Start_BMS *****************
  2252 ;; Defined at:
  2253 ;;		line 32 in file "BatteryManagment.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;		None
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;		None
  2258 ;; Return value:  Size  Location     Type
  2259 ;;                  1    wreg      void 
  2260 ;; Registers used:
  2261 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : 0/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2267 ;;      Params:         0       0       0       0       0       0       0
  2268 ;;      Locals:         0       0       0       0       0       0       0
  2269 ;;      Temps:          0       0       0       0       0       0       0
  2270 ;;      Totals:         0       0       0       0       0       0       0
  2271 ;;Total ram usage:        0 bytes
  2272 ;; Hardware stack levels used:    1
  2273 ;; Hardware stack levels required when called:    8
  2274 ;; This function calls:
  2275 ;;		_Initalize_LT6804b
  2276 ;; This function is called by:
  2277 ;;		_main
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281                           	psect	text1
  2282  003F24                     __ptext1:
  2283                           	opt stack 0
  2284  003F24                     _Start_BMS:
  2285                           	opt stack 22
  2286                           
  2287                           ;BatteryManagment.c: 35: Initalize_LT6804b();
  2288                           
  2289                           ;incstack = 0
  2290  003F24  EC27  F01A         	call	_Initalize_LT6804b	;wreg free
  2291  003F28  0012               	return		;funcret
  2292  003F2A                     __end_of_Start_BMS:
  2293                           	opt stack 0
  2294                           tblptru	equ	0xFF8
  2295                           tblptrh	equ	0xFF7
  2296                           tblptrl	equ	0xFF6
  2297                           tablat	equ	0xFF5
  2298                           intcon	equ	0xFF2
  2299                           postinc0	equ	0xFEE
  2300                           wreg	equ	0xFE8
  2301                           postdec1	equ	0xFE5
  2302                           fsr1l	equ	0xFE1
  2303                           
  2304 ;; *************** function _Initalize_LT6804b *****************
  2305 ;; Defined at:
  2306 ;;		line 63 in file "BatteryManagment.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;		None
  2309 ;; Auto vars:     Size  Location     Type
  2310 ;;  IC              2   53[COMRAM] int 
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  1    wreg      void 
  2313 ;; Registers used:
  2314 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2320 ;;      Params:         0       0       0       0       0       0       0
  2321 ;;      Locals:         2       0       0       0       0       0       0
  2322 ;;      Temps:          0       0       0       0       0       0       0
  2323 ;;      Totals:         2       0       0       0       0       0       0
  2324 ;;Total ram usage:        2 bytes
  2325 ;; Hardware stack levels used:    1
  2326 ;; Hardware stack levels required when called:    7
  2327 ;; This function calls:
  2328 ;;		_SetTempEnable
  2329 ;;		_Set_ADC_Mode
  2330 ;;		_Set_DCC_Mode_OFF
  2331 ;;		_Set_DCTO_Mode_OFF
  2332 ;;		_Set_REFON_Pin
  2333 ;;		_UpdateLT6804
  2334 ;; This function is called by:
  2335 ;;		_Start_BMS
  2336 ;; This function uses a non-reentrant model
  2337 ;;
  2338                           
  2339                           	psect	text2
  2340  00344E                     __ptext2:
  2341                           	opt stack 0
  2342  00344E                     _Initalize_LT6804b:
  2343                           	opt stack 22
  2344                           
  2345                           ;BatteryManagment.c: 64: int IC = 0;
  2346                           
  2347                           ;incstack = 0
  2348  00344E  0E00               	movlw	0
  2349  003450  6E37               	movwf	Initalize_LT6804b@IC+1,c
  2350  003452  0E00               	movlw	0
  2351  003454  6E36               	movwf	Initalize_LT6804b@IC,c
  2352                           
  2353                           ;BatteryManagment.c: 66: CFGR0=0xFE;
  2354  003456  0EFE               	movlw	254
  2355  003458  6E47               	movwf	_CFGR0,c
  2356                           
  2357                           ;BatteryManagment.c: 67: CFGR1=0;
  2358  00345A  0E00               	movlw	0
  2359  00345C  0101               	movlb	1	; () banked
  2360  00345E  6FE1               	movwf	_CFGR1& (0+255),b
  2361                           
  2362                           ;BatteryManagment.c: 68: CFGR2=0;
  2363  003460  0E00               	movlw	0
  2364  003462  0101               	movlb	1	; () banked
  2365  003464  6FE2               	movwf	_CFGR2& (0+255),b
  2366                           
  2367                           ;BatteryManagment.c: 69: CFGR3=0;
  2368  003466  0E00               	movlw	0
  2369  003468  0101               	movlb	1	; () banked
  2370  00346A  6FE3               	movwf	_CFGR3& (0+255),b
  2371                           
  2372                           ;BatteryManagment.c: 70: CFGR4=0;
  2373  00346C  0E00               	movlw	0
  2374  00346E  6E48               	movwf	_CFGR4,c
  2375                           
  2376                           ;BatteryManagment.c: 71: CFGR5=0;
  2377  003470  0E00               	movlw	0
  2378  003472  6E49               	movwf	_CFGR5,c
  2379                           
  2380                           ;BatteryManagment.c: 74: while (IC < 1) {
  2381  003474  D026               	goto	l8429
  2382  003476                     l8425:
  2383                           
  2384                           ;BatteryManagment.c: 75: Set_REFON_Pin(IC, 1);
  2385  003476  C036  F023         	movff	Initalize_LT6804b@IC,Set_REFON_Pin@ic
  2386  00347A  C037  F024         	movff	Initalize_LT6804b@IC+1,Set_REFON_Pin@ic+1
  2387  00347E  0E01               	movlw	1
  2388  003480  6E25               	movwf	Set_REFON_Pin@REFON_Mode,c
  2389  003482  EC10  F01D         	call	_Set_REFON_Pin	;wreg free
  2390                           
  2391                           ;BatteryManagment.c: 76: Set_ADC_Mode(IC, 0);
  2392  003486  C036  F023         	movff	Initalize_LT6804b@IC,Set_ADC_Mode@ic
  2393  00348A  C037  F024         	movff	Initalize_LT6804b@IC+1,Set_ADC_Mode@ic+1
  2394  00348E  0E00               	movlw	0
  2395  003490  6E25               	movwf	Set_ADC_Mode@ADCOPT_Mode,c
  2396  003492  EC35  F01D         	call	_Set_ADC_Mode	;wreg free
  2397                           
  2398                           ;BatteryManagment.c: 77: Set_DCC_Mode_OFF(IC);
  2399  003496  C036  F023         	movff	Initalize_LT6804b@IC,Set_DCC_Mode_OFF@ic
  2400  00349A  C037  F024         	movff	Initalize_LT6804b@IC+1,Set_DCC_Mode_OFF@ic+1
  2401  00349E  EC2F  F01B         	call	_Set_DCC_Mode_OFF	;wreg free
  2402                           
  2403                           ;BatteryManagment.c: 78: Set_DCTO_Mode_OFF(IC);
  2404  0034A2  C036  F023         	movff	Initalize_LT6804b@IC,Set_DCTO_Mode_OFF@ic
  2405  0034A6  C037  F024         	movff	Initalize_LT6804b@IC+1,Set_DCTO_Mode_OFF@ic+1
  2406  0034AA  EC7F  F01D         	call	_Set_DCTO_Mode_OFF	;wreg free
  2407                           
  2408                           ;BatteryManagment.c: 79: SetTempEnable(IC, 0);
  2409  0034AE  C036  F023         	movff	Initalize_LT6804b@IC,SetTempEnable@ic
  2410  0034B2  C037  F024         	movff	Initalize_LT6804b@IC+1,SetTempEnable@ic+1
  2411  0034B6  0E00               	movlw	0
  2412  0034B8  6E25               	movwf	SetTempEnable@value,c
  2413  0034BA  EC5A  F01D         	call	_SetTempEnable	;wreg free
  2414                           
  2415                           ;BatteryManagment.c: 81: IC++;
  2416  0034BE  4A36               	infsnz	Initalize_LT6804b@IC,f,c
  2417  0034C0  2A37               	incf	Initalize_LT6804b@IC+1,f,c
  2418  0034C2                     l8429:
  2419  0034C2  BE37               	btfsc	Initalize_LT6804b@IC+1,7,c
  2420  0034C4  D7D8               	goto	l8425
  2421  0034C6  5037               	movf	Initalize_LT6804b@IC+1,w,c
  2422  0034C8  E103               	bnz	l8431
  2423  0034CA  0436               	decf	Initalize_LT6804b@IC,w,c
  2424  0034CC  A0D8               	btfss	status,0,c
  2425  0034CE  D7D3               	goto	l8425
  2426  0034D0                     l8431:
  2427                           
  2428                           ;BatteryManagment.c: 82: };
  2429                           ;BatteryManagment.c: 85: UpdateLT6804();
  2430  0034D0  EC4D  F01F         	call	_UpdateLT6804	;wreg free
  2431  0034D4  0012               	return		;funcret
  2432  0034D6                     __end_of_Initalize_LT6804b:
  2433                           	opt stack 0
  2434                           tblptru	equ	0xFF8
  2435                           tblptrh	equ	0xFF7
  2436                           tblptrl	equ	0xFF6
  2437                           tablat	equ	0xFF5
  2438                           intcon	equ	0xFF2
  2439                           postinc0	equ	0xFEE
  2440                           wreg	equ	0xFE8
  2441                           postdec1	equ	0xFE5
  2442                           fsr1l	equ	0xFE1
  2443                           status	equ	0xFD8
  2444                           
  2445 ;; *************** function _UpdateLT6804 *****************
  2446 ;; Defined at:
  2447 ;;		line 722 in file "BatteryManagment.c"
  2448 ;; Parameters:    Size  Location     Type
  2449 ;;		None
  2450 ;; Auto vars:     Size  Location     Type
  2451 ;;		None
  2452 ;; Return value:  Size  Location     Type
  2453 ;;                  1    wreg      void 
  2454 ;; Registers used:
  2455 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2456 ;; Tracked objects:
  2457 ;;		On entry : 0/0
  2458 ;;		On exit  : 0/0
  2459 ;;		Unchanged: 0/0
  2460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2461 ;;      Params:         0       0       0       0       0       0       0
  2462 ;;      Locals:         0       0       0       0       0       0       0
  2463 ;;      Temps:          0       0       0       0       0       0       0
  2464 ;;      Totals:         0       0       0       0       0       0       0
  2465 ;;Total ram usage:        0 bytes
  2466 ;; Hardware stack levels used:    1
  2467 ;; Hardware stack levels required when called:    6
  2468 ;; This function calls:
  2469 ;;		_LTC6804_wrcfg
  2470 ;; This function is called by:
  2471 ;;		_Initalize_LT6804b
  2472 ;;		_RunBypass_Set
  2473 ;; This function uses a non-reentrant model
  2474 ;;
  2475                           
  2476                           	psect	text3
  2477  003E9A                     __ptext3:
  2478                           	opt stack 0
  2479  003E9A                     _UpdateLT6804:
  2480                           	opt stack 22
  2481                           
  2482                           ;BatteryManagment.c: 724: LTC6804_wrcfg(1, LTC6804_DATA_ConfigBank);
  2483                           
  2484                           ;incstack = 0
  2485  003E9A  0E00               	movlw	0
  2486  003E9C  6E31               	movwf	LTC6804_wrcfg@total_ic+1,c
  2487  003E9E  0E01               	movlw	1
  2488  003EA0  6E30               	movwf	LTC6804_wrcfg@total_ic,c
  2489  003EA2  0EF4               	movlw	low _LTC6804_DATA_ConfigBank
  2490  003EA4  6E32               	movwf	LTC6804_wrcfg@config,c
  2491  003EA6  0E01               	movlw	high _LTC6804_DATA_ConfigBank
  2492  003EA8  6E33               	movwf	LTC6804_wrcfg@config+1,c
  2493  003EAA  EC88  F00C         	call	_LTC6804_wrcfg	;wreg free
  2494  003EAE  0012               	return		;funcret
  2495  003EB0                     __end_of_UpdateLT6804:
  2496                           	opt stack 0
  2497                           tblptru	equ	0xFF8
  2498                           tblptrh	equ	0xFF7
  2499                           tblptrl	equ	0xFF6
  2500                           tablat	equ	0xFF5
  2501                           intcon	equ	0xFF2
  2502                           postinc0	equ	0xFEE
  2503                           wreg	equ	0xFE8
  2504                           postdec1	equ	0xFE5
  2505                           fsr1l	equ	0xFE1
  2506                           status	equ	0xFD8
  2507                           
  2508 ;; *************** function _LTC6804_wrcfg *****************
  2509 ;; Defined at:
  2510 ;;		line 1000 in file "LT6804.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;  total_ic        2   47[COMRAM] int 
  2513 ;;  config          2   49[COMRAM] PTR int [6]
  2514 ;;		 -> LTC6804_DATA_ConfigBank(12), 
  2515 ;; Auto vars:     Size  Location     Type
  2516 ;;  cmd           200    0[BANK1 ] int [100]
  2517 ;;  cmd_index       2  204[BANK1 ] int 
  2518 ;;  temp_pec        2  202[BANK1 ] int 
  2519 ;;  BYTES_IN_REG    2  200[BANK1 ] const int 
  2520 ;; Return value:  Size  Location     Type
  2521 ;;                  1    wreg      void 
  2522 ;; Registers used:
  2523 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2524 ;; Tracked objects:
  2525 ;;		On entry : 0/0
  2526 ;;		On exit  : 0/0
  2527 ;;		Unchanged: 0/0
  2528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2529 ;;      Params:         4       0       0       0       0       0       0
  2530 ;;      Locals:         0       0     206       0       0       0       0
  2531 ;;      Temps:          2       0       0       0       0       0       0
  2532 ;;      Totals:         6       0     206       0       0       0       0
  2533 ;;Total ram usage:      212 bytes
  2534 ;; Hardware stack levels used:    1
  2535 ;; Hardware stack levels required when called:    5
  2536 ;; This function calls:
  2537 ;;		___wmul
  2538 ;;		_pec15_calc
  2539 ;;		_spi_write_array
  2540 ;;		_wakeup_idle
  2541 ;; This function is called by:
  2542 ;;		_UpdateLT6804
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546                           	psect	text4
  2547  001910                     __ptext4:
  2548                           	opt stack 0
  2549  001910                     _LTC6804_wrcfg:
  2550                           	opt stack 22
  2551                           
  2552                           ;LT6804.c: 1002: const int BYTES_IN_REG = 6;
  2553                           
  2554                           ;incstack = 0
  2555  001910  0E00               	movlw	0
  2556  001912  0101               	movlb	1	; () banked
  2557  001914  6FC9               	movwf	(LTC6804_wrcfg@BYTES_IN_REG+1)& (0+255),b
  2558  001916  0E06               	movlw	6
  2559  001918  6FC8               	movwf	LTC6804_wrcfg@BYTES_IN_REG& (0+255),b
  2560                           
  2561                           ;LT6804.c: 1003: int cmd[100];
  2562                           ;LT6804.c: 1004: int temp_pec;
  2563                           ;LT6804.c: 1005: int cmd_index;
  2564                           ;LT6804.c: 1008: cmd[0] = 0x00;
  2565  00191A  0E00               	movlw	0
  2566  00191C  0101               	movlb	1	; () banked
  2567  00191E  6F01               	movwf	(LTC6804_wrcfg@cmd+1)& (0+255),b
  2568  001920  0E00               	movlw	0
  2569  001922  6F00               	movwf	LTC6804_wrcfg@cmd& (0+255),b
  2570                           
  2571                           ;LT6804.c: 1009: cmd[1] = 0x01;
  2572  001924  0E00               	movlw	0
  2573  001926  0101               	movlb	1	; () banked
  2574  001928  6F03               	movwf	(LTC6804_wrcfg@cmd+3)& (0+255),b
  2575  00192A  0E01               	movlw	1
  2576  00192C  6F02               	movwf	(LTC6804_wrcfg@cmd+2)& (0+255),b
  2577                           
  2578                           ;LT6804.c: 1010: cmd[2] = 0x3d;
  2579  00192E  0E00               	movlw	0
  2580  001930  0101               	movlb	1	; () banked
  2581  001932  6F05               	movwf	(LTC6804_wrcfg@cmd+5)& (0+255),b
  2582  001934  0E3D               	movlw	61
  2583  001936  6F04               	movwf	(LTC6804_wrcfg@cmd+4)& (0+255),b
  2584                           
  2585                           ;LT6804.c: 1011: cmd[3] = 0x6e;
  2586  001938  0E00               	movlw	0
  2587  00193A  0101               	movlb	1	; () banked
  2588  00193C  6F07               	movwf	(LTC6804_wrcfg@cmd+7)& (0+255),b
  2589  00193E  0E6E               	movlw	110
  2590  001940  6F06               	movwf	(LTC6804_wrcfg@cmd+6)& (0+255),b
  2591                           
  2592                           ;LT6804.c: 1014: cmd_index = 4;
  2593  001942  0E00               	movlw	0
  2594  001944  0101               	movlb	1	; () banked
  2595  001946  6FCD               	movwf	(LTC6804_wrcfg@cmd_index+1)& (0+255),b
  2596  001948  0E04               	movlw	4
  2597  00194A  6FCC               	movwf	LTC6804_wrcfg@cmd_index& (0+255),b
  2598                           
  2599                           ; BSR set to: 1
  2600                           ;LT6804.c: 1015: for (current_ic = total_ic; current_ic > 0; current_ic--)
  2601  00194C  C030  F04D         	movff	LTC6804_wrcfg@total_ic,_current_ic
  2602  001950  C031  F04E         	movff	LTC6804_wrcfg@total_ic+1,_current_ic+1
  2603  001954  D09B               	goto	l7519
  2604  001956                     l7495:
  2605                           
  2606                           ; BSR set to: 1
  2607                           ;LT6804.c: 1016: {
  2608                           ;LT6804.c: 1017: for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
  2609  001956  0E00               	movlw	0
  2610  001958  6E44               	movwf	_current_byte+1,c
  2611  00195A  0E00               	movlw	0
  2612  00195C  6E43               	movwf	_current_byte,c
  2613  00195E                     l7497:
  2614                           
  2615                           ; BSR set to: 1
  2616  00195E  0101               	movlb	1	; () banked
  2617  001960  51C8               	movf	LTC6804_wrcfg@BYTES_IN_REG& (0+255),w,b
  2618  001962  5C43               	subwf	_current_byte,w,c
  2619  001964  5044               	movf	_current_byte+1,w,c
  2620  001966  0A80               	xorlw	128
  2621  001968  6E34               	movwf	??_LTC6804_wrcfg& (0+255),c
  2622  00196A  0101               	movlb	1	; () banked
  2623  00196C  51C9               	movf	(LTC6804_wrcfg@BYTES_IN_REG+1)& (0+255),w,b
  2624  00196E  0A80               	xorlw	128
  2625  001970  5834               	subwfb	??_LTC6804_wrcfg& (0+255),w,c
  2626  001972  B0D8               	btfsc	status,0,c
  2627  001974  D039               	goto	l7509
  2628                           
  2629                           ; BSR set to: 1
  2630                           ;LT6804.c: 1018: {
  2631                           ;LT6804.c: 1020: cmd[cmd_index] = config[current_ic-1][current_byte];
  2632                           
  2633                           ; BSR set to: 1
  2634                           
  2635                           ; BSR set to: 1
  2636  001976  0EFF               	movlw	255
  2637  001978  244D               	addwf	_current_ic,w,c
  2638  00197A  6E1D               	movwf	___wmul@multiplier,c
  2639  00197C  0EFF               	movlw	255
  2640  00197E  204E               	addwfc	_current_ic+1,w,c
  2641  001980  6E1E               	movwf	___wmul@multiplier+1,c
  2642  001982  0E00               	movlw	0
  2643  001984  6E20               	movwf	___wmul@multiplicand+1,c
  2644  001986  0E0C               	movlw	12
  2645  001988  6E1F               	movwf	___wmul@multiplicand,c
  2646  00198A  ECDB  F01E         	call	___wmul	;wreg free
  2647  00198E  C032  F034         	movff	LTC6804_wrcfg@config,??_LTC6804_wrcfg
  2648  001992  C033  F035         	movff	LTC6804_wrcfg@config+1,??_LTC6804_wrcfg+1
  2649  001996  501D               	movf	?___wmul,w,c
  2650  001998  2634               	addwf	??_LTC6804_wrcfg,f,c
  2651  00199A  501E               	movf	?___wmul+1,w,c
  2652  00199C  2235               	addwfc	??_LTC6804_wrcfg+1,f,c
  2653  00199E  90D8               	bcf	status,0,c
  2654  0019A0  3443               	rlcf	_current_byte,w,c
  2655  0019A2  6ED9               	movwf	fsr2l,c
  2656  0019A4  3444               	rlcf	_current_byte+1,w,c
  2657  0019A6  6EDA               	movwf	fsr2h,c
  2658  0019A8  5034               	movf	??_LTC6804_wrcfg,w,c
  2659  0019AA  26D9               	addwf	fsr2l,f,c
  2660  0019AC  5035               	movf	??_LTC6804_wrcfg+1,w,c
  2661  0019AE  22DA               	addwfc	fsr2h,f,c
  2662  0019B0  90D8               	bcf	status,0,c
  2663  0019B2  0101               	movlb	1	; () banked
  2664  0019B4  35CC               	rlcf	LTC6804_wrcfg@cmd_index& (0+255),w,b
  2665  0019B6  6EE1               	movwf	fsr1l,c
  2666  0019B8  0101               	movlb	1	; () banked
  2667  0019BA  35CD               	rlcf	(LTC6804_wrcfg@cmd_index+1)& (0+255),w,b
  2668  0019BC  6EE2               	movwf	fsr1h,c
  2669  0019BE  0E00               	movlw	low LTC6804_wrcfg@cmd
  2670  0019C0  26E1               	addwf	fsr1l,f,c
  2671  0019C2  0E01               	movlw	high LTC6804_wrcfg@cmd
  2672  0019C4  22E2               	addwfc	fsr1h,f,c
  2673  0019C6  CFDE FFE6          	movff	postinc2,postinc1
  2674  0019CA  CFDD FFE5          	movff	postdec2,postdec1
  2675                           
  2676                           ; BSR set to: 1
  2677                           ;LT6804.c: 1021: cmd_index = cmd_index + 1;
  2678  0019CE  0E01               	movlw	1
  2679  0019D0  0101               	movlb	1	; () banked
  2680  0019D2  25CC               	addwf	LTC6804_wrcfg@cmd_index& (0+255),w,b
  2681  0019D4  0101               	movlb	1	; () banked
  2682  0019D6  6FCC               	movwf	LTC6804_wrcfg@cmd_index& (0+255),b
  2683  0019D8  0E00               	movlw	0
  2684  0019DA  0101               	movlb	1	; () banked
  2685  0019DC  21CD               	addwfc	(LTC6804_wrcfg@cmd_index+1)& (0+255),w,b
  2686  0019DE  0101               	movlb	1	; () banked
  2687  0019E0  6FCD               	movwf	(LTC6804_wrcfg@cmd_index+1)& (0+255),b
  2688                           
  2689                           ; BSR set to: 1
  2690  0019E2  4A43               	infsnz	_current_byte,f,c
  2691  0019E4  2A44               	incf	_current_byte+1,f,c
  2692  0019E6  D7BB               	goto	l7497
  2693  0019E8                     l7509:
  2694                           
  2695                           ; BSR set to: 1
  2696                           ;LT6804.c: 1022: }
  2697                           ;LT6804.c: 1024: temp_pec = (int)pec15_calc(BYTES_IN_REG, &config[current_ic-1][0]);
  2698  0019E8  C1C8  F023         	movff	LTC6804_wrcfg@BYTES_IN_REG,pec15_calc@len
  2699  0019EC  C1C9  F024         	movff	LTC6804_wrcfg@BYTES_IN_REG+1,pec15_calc@len+1
  2700  0019F0  0EFF               	movlw	255
  2701  0019F2  244D               	addwf	_current_ic,w,c
  2702  0019F4  6E1D               	movwf	___wmul@multiplier,c
  2703  0019F6  0EFF               	movlw	255
  2704  0019F8  204E               	addwfc	_current_ic+1,w,c
  2705  0019FA  6E1E               	movwf	___wmul@multiplier+1,c
  2706  0019FC  0E00               	movlw	0
  2707  0019FE  6E20               	movwf	___wmul@multiplicand+1,c
  2708  001A00  0E0C               	movlw	12
  2709  001A02  6E1F               	movwf	___wmul@multiplicand,c
  2710  001A04  ECDB  F01E         	call	___wmul	;wreg free
  2711  001A08  501D               	movf	?___wmul,w,c
  2712  001A0A  2432               	addwf	LTC6804_wrcfg@config,w,c
  2713  001A0C  6E25               	movwf	pec15_calc@data,c
  2714  001A0E  501E               	movf	?___wmul+1,w,c
  2715  001A10  2033               	addwfc	LTC6804_wrcfg@config+1,w,c
  2716  001A12  6E26               	movwf	pec15_calc@data+1,c
  2717  001A14  EC42  F019         	call	_pec15_calc	;wreg free
  2718  001A18  C023  F1CA         	movff	?_pec15_calc,LTC6804_wrcfg@temp_pec
  2719  001A1C  C024  F1CB         	movff	?_pec15_calc+1,LTC6804_wrcfg@temp_pec+1
  2720                           
  2721                           ;LT6804.c: 1025: cmd[cmd_index] = (int)(temp_pec >> 8);
  2722  001A20  C1CB  F034         	movff	LTC6804_wrcfg@temp_pec+1,??_LTC6804_wrcfg
  2723  001A24  6A35               	clrf	(??_LTC6804_wrcfg+1)& (0+255),c
  2724  001A26  BE34               	btfsc	??_LTC6804_wrcfg& (0+255),7,c
  2725  001A28  6835               	setf	(??_LTC6804_wrcfg+1)& (0+255),c
  2726  001A2A  90D8               	bcf	status,0,c
  2727  001A2C  0101               	movlb	1	; () banked
  2728  001A2E  35CC               	rlcf	LTC6804_wrcfg@cmd_index& (0+255),w,b
  2729  001A30  6ED9               	movwf	fsr2l,c
  2730  001A32  0101               	movlb	1	; () banked
  2731  001A34  35CD               	rlcf	(LTC6804_wrcfg@cmd_index+1)& (0+255),w,b
  2732  001A36  6EDA               	movwf	fsr2h,c
  2733  001A38  0E00               	movlw	low LTC6804_wrcfg@cmd
  2734  001A3A  26D9               	addwf	fsr2l,f,c
  2735  001A3C  0E01               	movlw	high LTC6804_wrcfg@cmd
  2736  001A3E  22DA               	addwfc	fsr2h,f,c
  2737  001A40  C034  FFDE         	movff	??_LTC6804_wrcfg,postinc2
  2738  001A44  C035  FFDD         	movff	??_LTC6804_wrcfg+1,postdec2
  2739                           
  2740                           ; BSR set to: 1
  2741                           ;LT6804.c: 1026: cmd[cmd_index + 1] = (int)temp_pec;
  2742  001A48  C1CC  F034         	movff	LTC6804_wrcfg@cmd_index,??_LTC6804_wrcfg
  2743  001A4C  C1CD  F035         	movff	LTC6804_wrcfg@cmd_index+1,??_LTC6804_wrcfg+1
  2744  001A50  90D8               	bcf	status,0,c
  2745  001A52  3634               	rlcf	??_LTC6804_wrcfg,f,c
  2746  001A54  3635               	rlcf	??_LTC6804_wrcfg+1,f,c
  2747  001A56  0E02               	movlw	2
  2748  001A58  2634               	addwf	??_LTC6804_wrcfg,f,c
  2749  001A5A  0E00               	movlw	0
  2750  001A5C  2235               	addwfc	??_LTC6804_wrcfg+1,f,c
  2751  001A5E  0E00               	movlw	low LTC6804_wrcfg@cmd
  2752  001A60  2434               	addwf	??_LTC6804_wrcfg,w,c
  2753  001A62  6ED9               	movwf	fsr2l,c
  2754  001A64  0E01               	movlw	high LTC6804_wrcfg@cmd
  2755  001A66  2035               	addwfc	??_LTC6804_wrcfg+1,w,c
  2756  001A68  6EDA               	movwf	fsr2h,c
  2757  001A6A  C1CA  FFDE         	movff	LTC6804_wrcfg@temp_pec,postinc2
  2758  001A6E  C1CB  FFDD         	movff	LTC6804_wrcfg@temp_pec+1,postdec2
  2759                           
  2760                           ; BSR set to: 1
  2761                           ;LT6804.c: 1027: cmd_index = cmd_index + 2;
  2762  001A72  0E02               	movlw	2
  2763  001A74  0101               	movlb	1	; () banked
  2764  001A76  25CC               	addwf	LTC6804_wrcfg@cmd_index& (0+255),w,b
  2765  001A78  0101               	movlb	1	; () banked
  2766  001A7A  6FCC               	movwf	LTC6804_wrcfg@cmd_index& (0+255),b
  2767  001A7C  0E00               	movlw	0
  2768  001A7E  0101               	movlb	1	; () banked
  2769  001A80  21CD               	addwfc	(LTC6804_wrcfg@cmd_index+1)& (0+255),w,b
  2770  001A82  0101               	movlb	1	; () banked
  2771  001A84  6FCD               	movwf	(LTC6804_wrcfg@cmd_index+1)& (0+255),b
  2772                           
  2773                           ; BSR set to: 1
  2774  001A86  064D               	decf	_current_ic,f,c
  2775  001A88  A0D8               	btfss	status,0,c
  2776  001A8A  064E               	decf	_current_ic+1,f,c
  2777  001A8C                     l7519:
  2778                           
  2779                           ; BSR set to: 1
  2780  001A8C  BE4E               	btfsc	_current_ic+1,7,c
  2781  001A8E  D005               	goto	l7521
  2782  001A90  504E               	movf	_current_ic+1,w,c
  2783  001A92  E102               	bnz	u7521
  2784  001A94  044D               	decf	_current_ic,w,c
  2785  001A96  B0D8               	btfsc	status,0,c
  2786  001A98                     u7521:
  2787  001A98  D75E               	goto	l7495
  2788  001A9A                     l7521:
  2789                           
  2790                           ; BSR set to: 1
  2791                           ;LT6804.c: 1028: }
  2792                           ;LT6804.c: 1031: wakeup_idle ();
  2793  001A9A  EC58  F01F         	call	_wakeup_idle	;wreg free
  2794                           
  2795                           ;LT6804.c: 1033: for(current_ic = 0; current_ic<total_ic; current_ic++)
  2796  001A9E  0E00               	movlw	0
  2797  001AA0  6E4E               	movwf	_current_ic+1,c
  2798  001AA2  0E00               	movlw	0
  2799  001AA4  6E4D               	movwf	_current_ic,c
  2800  001AA6  D05E               	goto	l7543
  2801  001AA8                     l7525:
  2802                           
  2803                           ;LT6804.c: 1034: {
  2804                           ;LT6804.c: 1035: cmd[0] = 0x80 + (current_ic<<3);
  2805  001AA8  C04D  F034         	movff	_current_ic,??_LTC6804_wrcfg
  2806  001AAC  C04E  F035         	movff	_current_ic+1,??_LTC6804_wrcfg+1
  2807  001AB0  90D8               	bcf	status,0,c
  2808  001AB2  3634               	rlcf	??_LTC6804_wrcfg,f,c
  2809  001AB4  3635               	rlcf	??_LTC6804_wrcfg+1,f,c
  2810  001AB6  90D8               	bcf	status,0,c
  2811  001AB8  3634               	rlcf	??_LTC6804_wrcfg,f,c
  2812  001ABA  3635               	rlcf	??_LTC6804_wrcfg+1,f,c
  2813  001ABC  90D8               	bcf	status,0,c
  2814  001ABE  3634               	rlcf	??_LTC6804_wrcfg,f,c
  2815  001AC0  3635               	rlcf	??_LTC6804_wrcfg+1,f,c
  2816  001AC2  0E80               	movlw	128
  2817  001AC4  2434               	addwf	??_LTC6804_wrcfg,w,c
  2818  001AC6  0101               	movlb	1	; () banked
  2819  001AC8  6F00               	movwf	LTC6804_wrcfg@cmd& (0+255),b
  2820  001ACA  0E00               	movlw	0
  2821  001ACC  2035               	addwfc	??_LTC6804_wrcfg+1,w,c
  2822  001ACE  0101               	movlb	1	; () banked
  2823  001AD0  6F01               	movwf	(LTC6804_wrcfg@cmd+1)& (0+255),b
  2824                           
  2825                           ; BSR set to: 1
  2826                           ;LT6804.c: 1036: temp_pec = pec15_calc(2, cmd);
  2827  001AD2  0E00               	movlw	0
  2828  001AD4  6E24               	movwf	pec15_calc@len+1,c
  2829  001AD6  0E02               	movlw	2
  2830  001AD8  6E23               	movwf	pec15_calc@len,c
  2831  001ADA  0E00               	movlw	low LTC6804_wrcfg@cmd
  2832  001ADC  6E25               	movwf	pec15_calc@data,c
  2833  001ADE  0E01               	movlw	high LTC6804_wrcfg@cmd
  2834  001AE0  6E26               	movwf	pec15_calc@data+1,c
  2835  001AE2  EC42  F019         	call	_pec15_calc	;wreg free
  2836  001AE6  C023  F1CA         	movff	?_pec15_calc,LTC6804_wrcfg@temp_pec
  2837  001AEA  C024  F1CB         	movff	?_pec15_calc+1,LTC6804_wrcfg@temp_pec+1
  2838                           
  2839                           ;LT6804.c: 1037: cmd[2] = (int)(temp_pec >> 8);
  2840  001AEE  C1CB  F034         	movff	LTC6804_wrcfg@temp_pec+1,??_LTC6804_wrcfg
  2841  001AF2  6A35               	clrf	(??_LTC6804_wrcfg+1)& (0+255),c
  2842  001AF4  BE34               	btfsc	??_LTC6804_wrcfg& (0+255),7,c
  2843  001AF6  6835               	setf	(??_LTC6804_wrcfg+1)& (0+255),c
  2844  001AF8  C034  F104         	movff	??_LTC6804_wrcfg,LTC6804_wrcfg@cmd+4
  2845  001AFC  C035  F105         	movff	??_LTC6804_wrcfg+1,LTC6804_wrcfg@cmd+5
  2846                           
  2847                           ;LT6804.c: 1038: cmd[3] = (int)(temp_pec);
  2848  001B00  C1CA  F106         	movff	LTC6804_wrcfg@temp_pec,LTC6804_wrcfg@cmd+6
  2849  001B04  C1CB  F107         	movff	LTC6804_wrcfg@temp_pec+1,LTC6804_wrcfg@cmd+7
  2850                           
  2851                           ;LT6804.c: 1039: LATD3 = 0;
  2852  001B08  968C               	bcf	3980,3,c	;volatile
  2853                           
  2854                           ;LT6804.c: 1040: spi_write_array(4,cmd);
  2855  001B0A  0E00               	movlw	0
  2856  001B0C  6E12               	movwf	spi_write_array@len+1,c
  2857  001B0E  0E04               	movlw	4
  2858  001B10  6E11               	movwf	spi_write_array@len,c
  2859  001B12  0E00               	movlw	low LTC6804_wrcfg@cmd
  2860  001B14  6E13               	movwf	spi_write_array@data,c
  2861  001B16  0E01               	movlw	high LTC6804_wrcfg@cmd
  2862  001B18  6E14               	movwf	spi_write_array@data+1,c
  2863  001B1A  ECE1  F01D         	call	_spi_write_array	;wreg free
  2864                           
  2865                           ;LT6804.c: 1041: spi_write_array(8,&cmd[4+(8*current_ic)]);
  2866  001B1E  0E00               	movlw	0
  2867  001B20  6E12               	movwf	spi_write_array@len+1,c
  2868  001B22  0E08               	movlw	8
  2869  001B24  6E11               	movwf	spi_write_array@len,c
  2870  001B26  C04D  F034         	movff	_current_ic,??_LTC6804_wrcfg
  2871  001B2A  C04E  F035         	movff	_current_ic+1,??_LTC6804_wrcfg+1
  2872  001B2E  90D8               	bcf	status,0,c
  2873  001B30  3634               	rlcf	??_LTC6804_wrcfg,f,c
  2874  001B32  3635               	rlcf	??_LTC6804_wrcfg+1,f,c
  2875  001B34  90D8               	bcf	status,0,c
  2876  001B36  3634               	rlcf	??_LTC6804_wrcfg,f,c
  2877  001B38  3635               	rlcf	??_LTC6804_wrcfg+1,f,c
  2878  001B3A  90D8               	bcf	status,0,c
  2879  001B3C  3634               	rlcf	??_LTC6804_wrcfg,f,c
  2880  001B3E  3635               	rlcf	??_LTC6804_wrcfg+1,f,c
  2881  001B40  90D8               	bcf	status,0,c
  2882  001B42  3634               	rlcf	??_LTC6804_wrcfg,f,c
  2883  001B44  3635               	rlcf	??_LTC6804_wrcfg+1,f,c
  2884  001B46  0E08               	movlw	8
  2885  001B48  2634               	addwf	??_LTC6804_wrcfg,f,c
  2886  001B4A  0E00               	movlw	0
  2887  001B4C  2235               	addwfc	??_LTC6804_wrcfg+1,f,c
  2888  001B4E  0E00               	movlw	low LTC6804_wrcfg@cmd
  2889  001B50  2434               	addwf	??_LTC6804_wrcfg,w,c
  2890  001B52  6E13               	movwf	spi_write_array@data,c
  2891  001B54  0E01               	movlw	high LTC6804_wrcfg@cmd
  2892  001B56  2035               	addwfc	??_LTC6804_wrcfg+1,w,c
  2893  001B58  6E14               	movwf	spi_write_array@data+1,c
  2894  001B5A  ECE1  F01D         	call	_spi_write_array	;wreg free
  2895                           
  2896                           ;LT6804.c: 1042: LATD3 = 1;
  2897  001B5E  868C               	bsf	3980,3,c	;volatile
  2898  001B60  4A4D               	infsnz	_current_ic,f,c
  2899  001B62  2A4E               	incf	_current_ic+1,f,c
  2900  001B64                     l7543:
  2901  001B64  5030               	movf	LTC6804_wrcfg@total_ic,w,c
  2902  001B66  5C4D               	subwf	_current_ic,w,c
  2903  001B68  504E               	movf	_current_ic+1,w,c
  2904  001B6A  0A80               	xorlw	128
  2905  001B6C  6E34               	movwf	??_LTC6804_wrcfg& (0+255),c
  2906  001B6E  5031               	movf	LTC6804_wrcfg@total_ic+1,w,c
  2907  001B70  0A80               	xorlw	128
  2908  001B72  5834               	subwfb	??_LTC6804_wrcfg& (0+255),w,c
  2909  001B74  B0D8               	btfsc	status,0,c
  2910  001B76  0012               	return	
  2911  001B78  D797               	goto	l7525
  2912  001B7A                     __end_of_LTC6804_wrcfg:
  2913                           	opt stack 0
  2914                           tblptru	equ	0xFF8
  2915                           tblptrh	equ	0xFF7
  2916                           tblptrl	equ	0xFF6
  2917                           tablat	equ	0xFF5
  2918                           intcon	equ	0xFF2
  2919                           postinc0	equ	0xFEE
  2920                           wreg	equ	0xFE8
  2921                           postinc1	equ	0xFE6
  2922                           postdec1	equ	0xFE5
  2923                           fsr1h	equ	0xFE2
  2924                           fsr1l	equ	0xFE1
  2925                           postinc2	equ	0xFDE
  2926                           postdec2	equ	0xFDD
  2927                           fsr2h	equ	0xFDA
  2928                           fsr2l	equ	0xFD9
  2929                           status	equ	0xFD8
  2930                           
  2931 ;; *************** function _Set_REFON_Pin *****************
  2932 ;; Defined at:
  2933 ;;		line 710 in file "BatteryManagment.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;  ic              2   34[COMRAM] int 
  2936 ;;  REFON_Mode      1   36[COMRAM] unsigned char 
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;  fault_value     2   39[COMRAM] int 
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  2   34[COMRAM] int 
  2941 ;; Registers used:
  2942 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2948 ;;      Params:         3       0       0       0       0       0       0
  2949 ;;      Locals:         2       0       0       0       0       0       0
  2950 ;;      Temps:          2       0       0       0       0       0       0
  2951 ;;      Totals:         7       0       0       0       0       0       0
  2952 ;;Total ram usage:        7 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; Hardware stack levels required when called:    4
  2955 ;; This function calls:
  2956 ;;		___wmul
  2957 ;; This function is called by:
  2958 ;;		_Initalize_LT6804b
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           	psect	text5
  2963  003A20                     __ptext5:
  2964                           	opt stack 0
  2965  003A20                     _Set_REFON_Pin:
  2966                           	opt stack 24
  2967                           
  2968                           ;BatteryManagment.c: 711: int fault_value = 0;
  2969                           
  2970                           ;incstack = 0
  2971  003A20  0E00               	movlw	0
  2972  003A22  6E29               	movwf	Set_REFON_Pin@fault_value+1,c
  2973  003A24  0E00               	movlw	0
  2974  003A26  6E28               	movwf	Set_REFON_Pin@fault_value,c
  2975                           
  2976                           ;BatteryManagment.c: 712: if (REFON_Mode) {
  2977  003A28  5025               	movf	Set_REFON_Pin@REFON_Mode,w,c
  2978  003A2A  B4D8               	btfsc	status,2,c
  2979  003A2C  D003               	goto	l8223
  2980                           
  2981                           ;BatteryManagment.c: 713: CFGR0 = CFGR0 | 0x4;
  2982  003A2E  5047               	movf	_CFGR0,w,c
  2983  003A30  0904               	iorlw	4
  2984  003A32  D002               	goto	L1
  2985  003A34                     l8223:
  2986                           
  2987                           ;BatteryManagment.c: 715: CFGR0 = CFGR0 & ~0x4;
  2988  003A34  5047               	movf	_CFGR0,w,c
  2989  003A36  0BFB               	andlw	251
  2990  003A38                     L1:
  2991  003A38  6E47               	movwf	_CFGR0,c
  2992                           
  2993                           ;BatteryManagment.c: 716: }
  2994                           ;BatteryManagment.c: 718: LTC6804_DATA_ConfigBank[ic][0] = CFGR0;
  2995  003A3A  5047               	movf	_CFGR0,w,c
  2996  003A3C  6E26               	movwf	??_Set_REFON_Pin& (0+255),c
  2997  003A3E  6A27               	clrf	(??_Set_REFON_Pin+1)& (0+255),c
  2998  003A40  C023  F01D         	movff	Set_REFON_Pin@ic,___wmul@multiplier
  2999  003A44  C024  F01E         	movff	Set_REFON_Pin@ic+1,___wmul@multiplier+1
  3000  003A48  0E00               	movlw	0
  3001  003A4A  6E20               	movwf	___wmul@multiplicand+1,c
  3002  003A4C  0E0C               	movlw	12
  3003  003A4E  6E1F               	movwf	___wmul@multiplicand,c
  3004  003A50  ECDB  F01E         	call	___wmul	;wreg free
  3005  003A54  0EF4               	movlw	low _LTC6804_DATA_ConfigBank
  3006  003A56  241D               	addwf	?___wmul,w,c
  3007  003A58  6ED9               	movwf	fsr2l,c
  3008  003A5A  0E01               	movlw	high _LTC6804_DATA_ConfigBank
  3009  003A5C  201E               	addwfc	?___wmul+1,w,c
  3010  003A5E  6EDA               	movwf	fsr2h,c
  3011  003A60  C026  FFDE         	movff	??_Set_REFON_Pin,postinc2
  3012  003A64  C027  FFDD         	movff	??_Set_REFON_Pin+1,postdec2
  3013  003A68  0012               	return	
  3014  003A6A                     __end_of_Set_REFON_Pin:
  3015                           	opt stack 0
  3016                           tblptru	equ	0xFF8
  3017                           tblptrh	equ	0xFF7
  3018                           tblptrl	equ	0xFF6
  3019                           tablat	equ	0xFF5
  3020                           intcon	equ	0xFF2
  3021                           postinc0	equ	0xFEE
  3022                           wreg	equ	0xFE8
  3023                           postinc1	equ	0xFE6
  3024                           postdec1	equ	0xFE5
  3025                           fsr1h	equ	0xFE2
  3026                           fsr1l	equ	0xFE1
  3027                           postinc2	equ	0xFDE
  3028                           postdec2	equ	0xFDD
  3029                           fsr2h	equ	0xFDA
  3030                           fsr2l	equ	0xFD9
  3031                           status	equ	0xFD8
  3032                           
  3033 ;; *************** function _Set_DCTO_Mode_OFF *****************
  3034 ;; Defined at:
  3035 ;;		line 701 in file "BatteryManagment.c"
  3036 ;; Parameters:    Size  Location     Type
  3037 ;;  ic              2   34[COMRAM] int 
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;  fault_value     2   38[COMRAM] int 
  3040 ;; Return value:  Size  Location     Type
  3041 ;;                  2   34[COMRAM] int 
  3042 ;; Registers used:
  3043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 0/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3049 ;;      Params:         2       0       0       0       0       0       0
  3050 ;;      Locals:         2       0       0       0       0       0       0
  3051 ;;      Temps:          2       0       0       0       0       0       0
  3052 ;;      Totals:         6       0       0       0       0       0       0
  3053 ;;Total ram usage:        6 bytes
  3054 ;; Hardware stack levels used:    1
  3055 ;; Hardware stack levels required when called:    4
  3056 ;; This function calls:
  3057 ;;		___wmul
  3058 ;; This function is called by:
  3059 ;;		_Initalize_LT6804b
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           	psect	text6
  3064  003AFE                     __ptext6:
  3065                           	opt stack 0
  3066  003AFE                     _Set_DCTO_Mode_OFF:
  3067                           	opt stack 24
  3068                           
  3069                           ;BatteryManagment.c: 702: int fault_value = 0;
  3070                           
  3071                           ;incstack = 0
  3072  003AFE  0E00               	movlw	0
  3073  003B00  6E28               	movwf	Set_DCTO_Mode_OFF@fault_value+1,c
  3074  003B02  0E00               	movlw	0
  3075  003B04  6E27               	movwf	Set_DCTO_Mode_OFF@fault_value,c
  3076                           
  3077                           ;BatteryManagment.c: 703: CFGR5 = CFGR5 &~(0xF0);
  3078  003B06  5049               	movf	_CFGR5,w,c
  3079  003B08  0B0F               	andlw	15
  3080  003B0A  6E49               	movwf	_CFGR5,c
  3081                           
  3082                           ;BatteryManagment.c: 704: LTC6804_DATA_ConfigBank[ic][5] = CFGR5;
  3083  003B0C  5049               	movf	_CFGR5,w,c
  3084  003B0E  6E25               	movwf	??_Set_DCTO_Mode_OFF& (0+255),c
  3085  003B10  6A26               	clrf	(??_Set_DCTO_Mode_OFF+1)& (0+255),c
  3086  003B12  C023  F01D         	movff	Set_DCTO_Mode_OFF@ic,___wmul@multiplier
  3087  003B16  C024  F01E         	movff	Set_DCTO_Mode_OFF@ic+1,___wmul@multiplier+1
  3088  003B1A  0E00               	movlw	0
  3089  003B1C  6E20               	movwf	___wmul@multiplicand+1,c
  3090  003B1E  0E0C               	movlw	12
  3091  003B20  6E1F               	movwf	___wmul@multiplicand,c
  3092  003B22  ECDB  F01E         	call	___wmul	;wreg free
  3093  003B26  0E0A               	movlw	10
  3094  003B28  261D               	addwf	?___wmul,f,c
  3095  003B2A  0E00               	movlw	0
  3096  003B2C  221E               	addwfc	?___wmul+1,f,c
  3097  003B2E  0EF4               	movlw	low _LTC6804_DATA_ConfigBank
  3098  003B30  241D               	addwf	?___wmul,w,c
  3099  003B32  6ED9               	movwf	fsr2l,c
  3100  003B34  0E01               	movlw	high _LTC6804_DATA_ConfigBank
  3101  003B36  201E               	addwfc	?___wmul+1,w,c
  3102  003B38  6EDA               	movwf	fsr2h,c
  3103  003B3A  C025  FFDE         	movff	??_Set_DCTO_Mode_OFF,postinc2
  3104  003B3E  C026  FFDD         	movff	??_Set_DCTO_Mode_OFF+1,postdec2
  3105  003B42  0012               	return	
  3106  003B44                     __end_of_Set_DCTO_Mode_OFF:
  3107                           	opt stack 0
  3108                           tblptru	equ	0xFF8
  3109                           tblptrh	equ	0xFF7
  3110                           tblptrl	equ	0xFF6
  3111                           tablat	equ	0xFF5
  3112                           intcon	equ	0xFF2
  3113                           postinc0	equ	0xFEE
  3114                           wreg	equ	0xFE8
  3115                           postinc1	equ	0xFE6
  3116                           postdec1	equ	0xFE5
  3117                           fsr1h	equ	0xFE2
  3118                           fsr1l	equ	0xFE1
  3119                           postinc2	equ	0xFDE
  3120                           postdec2	equ	0xFDD
  3121                           fsr2h	equ	0xFDA
  3122                           fsr2l	equ	0xFD9
  3123                           status	equ	0xFD8
  3124                           
  3125 ;; *************** function _Set_DCC_Mode_OFF *****************
  3126 ;; Defined at:
  3127 ;;		line 691 in file "BatteryManagment.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;  ic              2   34[COMRAM] int 
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;  fault_value     2   38[COMRAM] int 
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  1    wreg      void 
  3134 ;; Registers used:
  3135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3141 ;;      Params:         2       0       0       0       0       0       0
  3142 ;;      Locals:         2       0       0       0       0       0       0
  3143 ;;      Temps:          2       0       0       0       0       0       0
  3144 ;;      Totals:         6       0       0       0       0       0       0
  3145 ;;Total ram usage:        6 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:    4
  3148 ;; This function calls:
  3149 ;;		___wmul
  3150 ;; This function is called by:
  3151 ;;		_Initalize_LT6804b
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           	psect	text7
  3156  00365E                     __ptext7:
  3157                           	opt stack 0
  3158  00365E                     _Set_DCC_Mode_OFF:
  3159                           	opt stack 24
  3160                           
  3161                           ;BatteryManagment.c: 692: int fault_value = 0;
  3162                           
  3163                           ;incstack = 0
  3164  00365E  0E00               	movlw	0
  3165  003660  6E28               	movwf	Set_DCC_Mode_OFF@fault_value+1,c
  3166  003662  0E00               	movlw	0
  3167  003664  6E27               	movwf	Set_DCC_Mode_OFF@fault_value,c
  3168                           
  3169                           ;BatteryManagment.c: 693: CFGR4 = 0;
  3170  003666  0E00               	movlw	0
  3171  003668  6E48               	movwf	_CFGR4,c
  3172                           
  3173                           ;BatteryManagment.c: 694: CFGR5 = CFGR5 &~(0xF);
  3174  00366A  5049               	movf	_CFGR5,w,c
  3175  00366C  0BF0               	andlw	240
  3176  00366E  6E49               	movwf	_CFGR5,c
  3177                           
  3178                           ;BatteryManagment.c: 695: LTC6804_DATA_ConfigBank[ic][4] = CFGR4;
  3179  003670  5048               	movf	_CFGR4,w,c
  3180  003672  6E25               	movwf	??_Set_DCC_Mode_OFF& (0+255),c
  3181  003674  6A26               	clrf	(??_Set_DCC_Mode_OFF+1)& (0+255),c
  3182  003676  C023  F01D         	movff	Set_DCC_Mode_OFF@ic,___wmul@multiplier
  3183  00367A  C024  F01E         	movff	Set_DCC_Mode_OFF@ic+1,___wmul@multiplier+1
  3184  00367E  0E00               	movlw	0
  3185  003680  6E20               	movwf	___wmul@multiplicand+1,c
  3186  003682  0E0C               	movlw	12
  3187  003684  6E1F               	movwf	___wmul@multiplicand,c
  3188  003686  ECDB  F01E         	call	___wmul	;wreg free
  3189  00368A  0E08               	movlw	8
  3190  00368C  261D               	addwf	?___wmul,f,c
  3191  00368E  0E00               	movlw	0
  3192  003690  221E               	addwfc	?___wmul+1,f,c
  3193  003692  0EF4               	movlw	low _LTC6804_DATA_ConfigBank
  3194  003694  241D               	addwf	?___wmul,w,c
  3195  003696  6ED9               	movwf	fsr2l,c
  3196  003698  0E01               	movlw	high _LTC6804_DATA_ConfigBank
  3197  00369A  201E               	addwfc	?___wmul+1,w,c
  3198  00369C  6EDA               	movwf	fsr2h,c
  3199  00369E  C025  FFDE         	movff	??_Set_DCC_Mode_OFF,postinc2
  3200  0036A2  C026  FFDD         	movff	??_Set_DCC_Mode_OFF+1,postdec2
  3201                           
  3202                           ;BatteryManagment.c: 696: LTC6804_DATA_ConfigBank[ic][5] = CFGR5;
  3203  0036A6  5049               	movf	_CFGR5,w,c
  3204  0036A8  6E25               	movwf	??_Set_DCC_Mode_OFF& (0+255),c
  3205  0036AA  6A26               	clrf	(??_Set_DCC_Mode_OFF+1)& (0+255),c
  3206  0036AC  C023  F01D         	movff	Set_DCC_Mode_OFF@ic,___wmul@multiplier
  3207  0036B0  C024  F01E         	movff	Set_DCC_Mode_OFF@ic+1,___wmul@multiplier+1
  3208  0036B4  0E00               	movlw	0
  3209  0036B6  6E20               	movwf	___wmul@multiplicand+1,c
  3210  0036B8  0E0C               	movlw	12
  3211  0036BA  6E1F               	movwf	___wmul@multiplicand,c
  3212  0036BC  ECDB  F01E         	call	___wmul	;wreg free
  3213  0036C0  0E0A               	movlw	10
  3214  0036C2  261D               	addwf	?___wmul,f,c
  3215  0036C4  0E00               	movlw	0
  3216  0036C6  221E               	addwfc	?___wmul+1,f,c
  3217  0036C8  0EF4               	movlw	low _LTC6804_DATA_ConfigBank
  3218  0036CA  241D               	addwf	?___wmul,w,c
  3219  0036CC  6ED9               	movwf	fsr2l,c
  3220  0036CE  0E01               	movlw	high _LTC6804_DATA_ConfigBank
  3221  0036D0  201E               	addwfc	?___wmul+1,w,c
  3222  0036D2  6EDA               	movwf	fsr2h,c
  3223  0036D4  C025  FFDE         	movff	??_Set_DCC_Mode_OFF,postinc2
  3224  0036D8  C026  FFDD         	movff	??_Set_DCC_Mode_OFF+1,postdec2
  3225  0036DC  0012               	return		;funcret
  3226  0036DE                     __end_of_Set_DCC_Mode_OFF:
  3227                           	opt stack 0
  3228                           tblptru	equ	0xFF8
  3229                           tblptrh	equ	0xFF7
  3230                           tblptrl	equ	0xFF6
  3231                           tablat	equ	0xFF5
  3232                           intcon	equ	0xFF2
  3233                           postinc0	equ	0xFEE
  3234                           wreg	equ	0xFE8
  3235                           postinc1	equ	0xFE6
  3236                           postdec1	equ	0xFE5
  3237                           fsr1h	equ	0xFE2
  3238                           fsr1l	equ	0xFE1
  3239                           postinc2	equ	0xFDE
  3240                           postdec2	equ	0xFDD
  3241                           fsr2h	equ	0xFDA
  3242                           fsr2l	equ	0xFD9
  3243                           status	equ	0xFD8
  3244                           
  3245 ;; *************** function _Set_ADC_Mode *****************
  3246 ;; Defined at:
  3247 ;;		line 678 in file "BatteryManagment.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;  ic              2   34[COMRAM] int 
  3250 ;;  ADCOPT_Mode     1   36[COMRAM] unsigned char 
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;  fault_value     2   39[COMRAM] int 
  3253 ;; Return value:  Size  Location     Type
  3254 ;;                  2   34[COMRAM] int 
  3255 ;; Registers used:
  3256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3262 ;;      Params:         3       0       0       0       0       0       0
  3263 ;;      Locals:         2       0       0       0       0       0       0
  3264 ;;      Temps:          2       0       0       0       0       0       0
  3265 ;;      Totals:         7       0       0       0       0       0       0
  3266 ;;Total ram usage:        7 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; Hardware stack levels required when called:    4
  3269 ;; This function calls:
  3270 ;;		___wmul
  3271 ;; This function is called by:
  3272 ;;		_Initalize_LT6804b
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           	psect	text8
  3277  003A6A                     __ptext8:
  3278                           	opt stack 0
  3279  003A6A                     _Set_ADC_Mode:
  3280                           	opt stack 24
  3281                           
  3282                           ;BatteryManagment.c: 679: int fault_value = 0;
  3283                           
  3284                           ;incstack = 0
  3285  003A6A  0E00               	movlw	0
  3286  003A6C  6E29               	movwf	Set_ADC_Mode@fault_value+1,c
  3287  003A6E  0E00               	movlw	0
  3288  003A70  6E28               	movwf	Set_ADC_Mode@fault_value,c
  3289                           
  3290                           ;BatteryManagment.c: 680: if (ADCOPT_Mode) {
  3291  003A72  5025               	movf	Set_ADC_Mode@ADCOPT_Mode,w,c
  3292  003A74  B4D8               	btfsc	status,2,c
  3293  003A76  D003               	goto	l8233
  3294                           
  3295                           ;BatteryManagment.c: 681: CFGR0 = CFGR0 | 0x01;
  3296  003A78  5047               	movf	_CFGR0,w,c
  3297  003A7A  0901               	iorlw	1
  3298  003A7C  D002               	goto	L2
  3299  003A7E                     l8233:
  3300                           
  3301                           ;BatteryManagment.c: 683: CFGR0 = CFGR0 & ~0x01;
  3302  003A7E  5047               	movf	_CFGR0,w,c
  3303  003A80  0BFE               	andlw	254
  3304  003A82                     L2:
  3305  003A82  6E47               	movwf	_CFGR0,c
  3306                           
  3307                           ;BatteryManagment.c: 684: }
  3308                           ;BatteryManagment.c: 686: LTC6804_DATA_ConfigBank[ic][0] = CFGR0;
  3309  003A84  5047               	movf	_CFGR0,w,c
  3310  003A86  6E26               	movwf	??_Set_ADC_Mode& (0+255),c
  3311  003A88  6A27               	clrf	(??_Set_ADC_Mode+1)& (0+255),c
  3312  003A8A  C023  F01D         	movff	Set_ADC_Mode@ic,___wmul@multiplier
  3313  003A8E  C024  F01E         	movff	Set_ADC_Mode@ic+1,___wmul@multiplier+1
  3314  003A92  0E00               	movlw	0
  3315  003A94  6E20               	movwf	___wmul@multiplicand+1,c
  3316  003A96  0E0C               	movlw	12
  3317  003A98  6E1F               	movwf	___wmul@multiplicand,c
  3318  003A9A  ECDB  F01E         	call	___wmul	;wreg free
  3319  003A9E  0EF4               	movlw	low _LTC6804_DATA_ConfigBank
  3320  003AA0  241D               	addwf	?___wmul,w,c
  3321  003AA2  6ED9               	movwf	fsr2l,c
  3322  003AA4  0E01               	movlw	high _LTC6804_DATA_ConfigBank
  3323  003AA6  201E               	addwfc	?___wmul+1,w,c
  3324  003AA8  6EDA               	movwf	fsr2h,c
  3325  003AAA  C026  FFDE         	movff	??_Set_ADC_Mode,postinc2
  3326  003AAE  C027  FFDD         	movff	??_Set_ADC_Mode+1,postdec2
  3327  003AB2  0012               	return	
  3328  003AB4                     __end_of_Set_ADC_Mode:
  3329                           	opt stack 0
  3330                           tblptru	equ	0xFF8
  3331                           tblptrh	equ	0xFF7
  3332                           tblptrl	equ	0xFF6
  3333                           tablat	equ	0xFF5
  3334                           intcon	equ	0xFF2
  3335                           postinc0	equ	0xFEE
  3336                           wreg	equ	0xFE8
  3337                           postinc1	equ	0xFE6
  3338                           postdec1	equ	0xFE5
  3339                           fsr1h	equ	0xFE2
  3340                           fsr1l	equ	0xFE1
  3341                           postinc2	equ	0xFDE
  3342                           postdec2	equ	0xFDD
  3343                           fsr2h	equ	0xFDA
  3344                           fsr2l	equ	0xFD9
  3345                           status	equ	0xFD8
  3346                           
  3347 ;; *************** function _SetTempEnable *****************
  3348 ;; Defined at:
  3349 ;;		line 618 in file "BatteryManagment.c"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;  ic              2   34[COMRAM] int 
  3352 ;;  value           1   36[COMRAM] unsigned char 
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;  fault_value     2   39[COMRAM] int 
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  2   34[COMRAM] int 
  3357 ;; Registers used:
  3358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3364 ;;      Params:         3       0       0       0       0       0       0
  3365 ;;      Locals:         2       0       0       0       0       0       0
  3366 ;;      Temps:          2       0       0       0       0       0       0
  3367 ;;      Totals:         7       0       0       0       0       0       0
  3368 ;;Total ram usage:        7 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    4
  3371 ;; This function calls:
  3372 ;;		___wmul
  3373 ;; This function is called by:
  3374 ;;		_Initalize_LT6804b
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           	psect	text9
  3379  003AB4                     __ptext9:
  3380                           	opt stack 0
  3381  003AB4                     _SetTempEnable:
  3382                           	opt stack 24
  3383                           
  3384                           ;BatteryManagment.c: 619: int fault_value = 0;
  3385                           
  3386                           ;incstack = 0
  3387  003AB4  0E00               	movlw	0
  3388  003AB6  6E29               	movwf	SetTempEnable@fault_value+1,c
  3389  003AB8  0E00               	movlw	0
  3390  003ABA  6E28               	movwf	SetTempEnable@fault_value,c
  3391                           
  3392                           ;BatteryManagment.c: 620: if (value) {
  3393  003ABC  5025               	movf	SetTempEnable@value,w,c
  3394  003ABE  B4D8               	btfsc	status,2,c
  3395  003AC0  D003               	goto	l8259
  3396                           
  3397                           ;BatteryManagment.c: 621: CFGR0 = CFGR0 | (1 << 7);
  3398  003AC2  5047               	movf	_CFGR0,w,c
  3399  003AC4  0980               	iorlw	128
  3400  003AC6  D002               	goto	L3
  3401  003AC8                     l8259:
  3402                           
  3403                           ;BatteryManagment.c: 623: CFGR0 = CFGR0 & ~(1 << 7);
  3404  003AC8  5047               	movf	_CFGR0,w,c
  3405  003ACA  0B7F               	andlw	127
  3406  003ACC                     L3:
  3407  003ACC  6E47               	movwf	_CFGR0,c
  3408                           
  3409                           ;BatteryManagment.c: 624: }
  3410                           ;BatteryManagment.c: 626: LTC6804_DATA_ConfigBank[ic][0] = CFGR0;
  3411  003ACE  5047               	movf	_CFGR0,w,c
  3412  003AD0  6E26               	movwf	??_SetTempEnable& (0+255),c
  3413  003AD2  6A27               	clrf	(??_SetTempEnable+1)& (0+255),c
  3414  003AD4  C023  F01D         	movff	SetTempEnable@ic,___wmul@multiplier
  3415  003AD8  C024  F01E         	movff	SetTempEnable@ic+1,___wmul@multiplier+1
  3416  003ADC  0E00               	movlw	0
  3417  003ADE  6E20               	movwf	___wmul@multiplicand+1,c
  3418  003AE0  0E0C               	movlw	12
  3419  003AE2  6E1F               	movwf	___wmul@multiplicand,c
  3420  003AE4  ECDB  F01E         	call	___wmul	;wreg free
  3421  003AE8  0EF4               	movlw	low _LTC6804_DATA_ConfigBank
  3422  003AEA  241D               	addwf	?___wmul,w,c
  3423  003AEC  6ED9               	movwf	fsr2l,c
  3424  003AEE  0E01               	movlw	high _LTC6804_DATA_ConfigBank
  3425  003AF0  201E               	addwfc	?___wmul+1,w,c
  3426  003AF2  6EDA               	movwf	fsr2h,c
  3427  003AF4  C026  FFDE         	movff	??_SetTempEnable,postinc2
  3428  003AF8  C027  FFDD         	movff	??_SetTempEnable+1,postdec2
  3429  003AFC  0012               	return	
  3430  003AFE                     __end_of_SetTempEnable:
  3431                           	opt stack 0
  3432                           tblptru	equ	0xFF8
  3433                           tblptrh	equ	0xFF7
  3434                           tblptrl	equ	0xFF6
  3435                           tablat	equ	0xFF5
  3436                           intcon	equ	0xFF2
  3437                           postinc0	equ	0xFEE
  3438                           wreg	equ	0xFE8
  3439                           postinc1	equ	0xFE6
  3440                           postdec1	equ	0xFE5
  3441                           fsr1h	equ	0xFE2
  3442                           fsr1l	equ	0xFE1
  3443                           postinc2	equ	0xFDE
  3444                           postdec2	equ	0xFDD
  3445                           fsr2h	equ	0xFDA
  3446                           fsr2l	equ	0xFD9
  3447                           status	equ	0xFD8
  3448                           
  3449 ;; *************** function _SYSTEM_Initialize *****************
  3450 ;; Defined at:
  3451 ;;		line 112 in file "mcc_generated_files/mcc.c"
  3452 ;; Parameters:    Size  Location     Type
  3453 ;;		None
  3454 ;; Auto vars:     Size  Location     Type
  3455 ;;		None
  3456 ;; Return value:  Size  Location     Type
  3457 ;;                  1    wreg      void 
  3458 ;; Registers used:
  3459 ;;		wreg, status,2, status,0, cstack
  3460 ;; Tracked objects:
  3461 ;;		On entry : 0/0
  3462 ;;		On exit  : 0/0
  3463 ;;		Unchanged: 0/0
  3464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3465 ;;      Params:         0       0       0       0       0       0       0
  3466 ;;      Locals:         0       0       0       0       0       0       0
  3467 ;;      Temps:          0       0       0       0       0       0       0
  3468 ;;      Totals:         0       0       0       0       0       0       0
  3469 ;;Total ram usage:        0 bytes
  3470 ;; Hardware stack levels used:    1
  3471 ;; Hardware stack levels required when called:    5
  3472 ;; This function calls:
  3473 ;;		_ADC_Initialize
  3474 ;;		_EUSART1_Initialize
  3475 ;;		_INTERRUPT_Initialize
  3476 ;;		_OSCILLATOR_Initialize
  3477 ;;		_PIN_MANAGER_Initialize
  3478 ;;		_SPI2_Initialize
  3479 ;;		_TMR0_Initialize
  3480 ;; This function is called by:
  3481 ;;		_main
  3482 ;; This function uses a non-reentrant model
  3483 ;;
  3484                           
  3485                           	psect	text10
  3486  003DDC                     __ptext10:
  3487                           	opt stack 0
  3488  003DDC                     _SYSTEM_Initialize:
  3489                           	opt stack 25
  3490                           
  3491                           ;mcc.c: 115: INTERRUPT_Initialize();
  3492                           
  3493                           ;incstack = 0
  3494  003DDC  EC7F  F01F         	call	_INTERRUPT_Initialize	;wreg free
  3495                           
  3496                           ;mcc.c: 116: PIN_MANAGER_Initialize();
  3497  003DE0  ECAE  F01B         	call	_PIN_MANAGER_Initialize	;wreg free
  3498                           
  3499                           ;mcc.c: 117: OSCILLATOR_Initialize();
  3500  003DE4  EC78  F01F         	call	_OSCILLATOR_Initialize	;wreg free
  3501                           
  3502                           ;mcc.c: 118: SPI2_Initialize();
  3503  003DE8  EC71  F01F         	call	_SPI2_Initialize	;wreg free
  3504                           
  3505                           ;mcc.c: 119: ADC_Initialize();
  3506  003DEC  EC41  F01F         	call	_ADC_Initialize	;wreg free
  3507                           
  3508                           ;mcc.c: 120: TMR0_Initialize();
  3509  003DF0  ECB1  F01E         	call	_TMR0_Initialize	;wreg free
  3510                           
  3511                           ;mcc.c: 121: EUSART1_Initialize();
  3512  003DF4  ECFF  F01D         	call	_EUSART1_Initialize	;wreg free
  3513                           
  3514                           ;mcc.c: 123: TRISDbits.RD4 = 0;
  3515  003DF8  9895               	bcf	3989,4,c	;volatile
  3516                           
  3517                           ;mcc.c: 124: TRISDbits.RD1 = 1;
  3518  003DFA  8295               	bsf	3989,1,c	;volatile
  3519                           
  3520                           ;mcc.c: 125: TRISDbits.RD0 = 0;
  3521  003DFC  9095               	bcf	3989,0,c	;volatile
  3522  003DFE  0012               	return		;funcret
  3523  003E00                     __end_of_SYSTEM_Initialize:
  3524                           	opt stack 0
  3525                           tblptru	equ	0xFF8
  3526                           tblptrh	equ	0xFF7
  3527                           tblptrl	equ	0xFF6
  3528                           tablat	equ	0xFF5
  3529                           intcon	equ	0xFF2
  3530                           postinc0	equ	0xFEE
  3531                           wreg	equ	0xFE8
  3532                           postinc1	equ	0xFE6
  3533                           postdec1	equ	0xFE5
  3534                           fsr1h	equ	0xFE2
  3535                           fsr1l	equ	0xFE1
  3536                           postinc2	equ	0xFDE
  3537                           postdec2	equ	0xFDD
  3538                           fsr2h	equ	0xFDA
  3539                           fsr2l	equ	0xFD9
  3540                           status	equ	0xFD8
  3541                           
  3542 ;; *************** function _TMR0_Initialize *****************
  3543 ;; Defined at:
  3544 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;		None
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;		None
  3549 ;; Return value:  Size  Location     Type
  3550 ;;                  1    wreg      void 
  3551 ;; Registers used:
  3552 ;;		wreg, status,2, status,0, cstack
  3553 ;; Tracked objects:
  3554 ;;		On entry : 0/0
  3555 ;;		On exit  : 0/0
  3556 ;;		Unchanged: 0/0
  3557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3558 ;;      Params:         0       0       0       0       0       0       0
  3559 ;;      Locals:         0       0       0       0       0       0       0
  3560 ;;      Temps:          2       0       0       0       0       0       0
  3561 ;;      Totals:         2       0       0       0       0       0       0
  3562 ;;Total ram usage:        2 bytes
  3563 ;; Hardware stack levels used:    1
  3564 ;; Hardware stack levels required when called:    4
  3565 ;; This function calls:
  3566 ;;		_TMR0_StartTimer
  3567 ;; This function is called by:
  3568 ;;		_SYSTEM_Initialize
  3569 ;; This function uses a non-reentrant model
  3570 ;;
  3571                           
  3572                           	psect	text11
  3573  003D62                     __ptext11:
  3574                           	opt stack 0
  3575  003D62                     _TMR0_Initialize:
  3576                           	opt stack 25
  3577                           
  3578                           ;tmr0.c: 69: T0CON = 0x9F;
  3579                           
  3580                           ;incstack = 0
  3581  003D62  0E9F               	movlw	159
  3582  003D64  6ED5               	movwf	4053,c	;volatile
  3583                           
  3584                           ;tmr0.c: 72: TMR0H = 0x63;
  3585  003D66  0E63               	movlw	99
  3586  003D68  6ED7               	movwf	4055,c	;volatile
  3587                           
  3588                           ;tmr0.c: 75: TMR0L = 0xBF;
  3589  003D6A  0EBF               	movlw	191
  3590  003D6C  6ED6               	movwf	4054,c	;volatile
  3591                           
  3592                           ;tmr0.c: 78: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
  3593  003D6E  50D6               	movf	4054,w,c	;volatile
  3594  003D70  CFD7 F00F          	movff	4055,??_TMR0_Initialize	;volatile
  3595  003D74  6A10               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  3596  003D76  C00F  F010         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  3597  003D7A  6A0F               	clrf	??_TMR0_Initialize,c
  3598  003D7C  100F               	iorwf	??_TMR0_Initialize,w,c
  3599  003D7E  6E4F               	movwf	_timer0ReloadVal16bit,c	;volatile
  3600  003D80  5010               	movf	??_TMR0_Initialize+1,w,c
  3601  003D82  6E50               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  3602                           
  3603                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  3604  003D84  94F2               	bcf	intcon,2,c	;volatile
  3605                           
  3606                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  3607  003D86  8AF2               	bsf	intcon,5,c	;volatile
  3608                           
  3609                           ;tmr0.c: 87: TMR0_StartTimer();
  3610  003D88  EC95  F01F         	call	_TMR0_StartTimer	;wreg free
  3611  003D8C  0012               	return		;funcret
  3612  003D8E                     __end_of_TMR0_Initialize:
  3613                           	opt stack 0
  3614                           tblptru	equ	0xFF8
  3615                           tblptrh	equ	0xFF7
  3616                           tblptrl	equ	0xFF6
  3617                           tablat	equ	0xFF5
  3618                           intcon	equ	0xFF2
  3619                           postinc0	equ	0xFEE
  3620                           wreg	equ	0xFE8
  3621                           postinc1	equ	0xFE6
  3622                           postdec1	equ	0xFE5
  3623                           fsr1h	equ	0xFE2
  3624                           fsr1l	equ	0xFE1
  3625                           postinc2	equ	0xFDE
  3626                           postdec2	equ	0xFDD
  3627                           fsr2h	equ	0xFDA
  3628                           fsr2l	equ	0xFD9
  3629                           status	equ	0xFD8
  3630                           
  3631 ;; *************** function _TMR0_StartTimer *****************
  3632 ;; Defined at:
  3633 ;;		line 90 in file "mcc_generated_files/tmr0.c"
  3634 ;; Parameters:    Size  Location     Type
  3635 ;;		None
  3636 ;; Auto vars:     Size  Location     Type
  3637 ;;		None
  3638 ;; Return value:  Size  Location     Type
  3639 ;;                  1    wreg      void 
  3640 ;; Registers used:
  3641 ;;		None
  3642 ;; Tracked objects:
  3643 ;;		On entry : 0/0
  3644 ;;		On exit  : 0/0
  3645 ;;		Unchanged: 0/0
  3646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3647 ;;      Params:         0       0       0       0       0       0       0
  3648 ;;      Locals:         0       0       0       0       0       0       0
  3649 ;;      Temps:          0       0       0       0       0       0       0
  3650 ;;      Totals:         0       0       0       0       0       0       0
  3651 ;;Total ram usage:        0 bytes
  3652 ;; Hardware stack levels used:    1
  3653 ;; Hardware stack levels required when called:    3
  3654 ;; This function calls:
  3655 ;;		Nothing
  3656 ;; This function is called by:
  3657 ;;		_TMR0_Initialize
  3658 ;; This function uses a non-reentrant model
  3659 ;;
  3660                           
  3661                           	psect	text12
  3662  003F2A                     __ptext12:
  3663                           	opt stack 0
  3664  003F2A                     _TMR0_StartTimer:
  3665                           	opt stack 25
  3666                           
  3667                           ;tmr0.c: 93: T0CONbits.TMR0ON = 1;
  3668                           
  3669                           ;incstack = 0
  3670  003F2A  8ED5               	bsf	4053,7,c	;volatile
  3671  003F2C  0012               	return		;funcret
  3672  003F2E                     __end_of_TMR0_StartTimer:
  3673                           	opt stack 0
  3674                           tblptru	equ	0xFF8
  3675                           tblptrh	equ	0xFF7
  3676                           tblptrl	equ	0xFF6
  3677                           tablat	equ	0xFF5
  3678                           intcon	equ	0xFF2
  3679                           postinc0	equ	0xFEE
  3680                           wreg	equ	0xFE8
  3681                           postinc1	equ	0xFE6
  3682                           postdec1	equ	0xFE5
  3683                           fsr1h	equ	0xFE2
  3684                           fsr1l	equ	0xFE1
  3685                           postinc2	equ	0xFDE
  3686                           postdec2	equ	0xFDD
  3687                           fsr2h	equ	0xFDA
  3688                           fsr2l	equ	0xFD9
  3689                           status	equ	0xFD8
  3690                           
  3691 ;; *************** function _SPI2_Initialize *****************
  3692 ;; Defined at:
  3693 ;;		line 64 in file "mcc_generated_files/spi2.c"
  3694 ;; Parameters:    Size  Location     Type
  3695 ;;		None
  3696 ;; Auto vars:     Size  Location     Type
  3697 ;;		None
  3698 ;; Return value:  Size  Location     Type
  3699 ;;                  1    wreg      void 
  3700 ;; Registers used:
  3701 ;;		wreg, status,2
  3702 ;; Tracked objects:
  3703 ;;		On entry : 0/0
  3704 ;;		On exit  : 0/0
  3705 ;;		Unchanged: 0/0
  3706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3707 ;;      Params:         0       0       0       0       0       0       0
  3708 ;;      Locals:         0       0       0       0       0       0       0
  3709 ;;      Temps:          0       0       0       0       0       0       0
  3710 ;;      Totals:         0       0       0       0       0       0       0
  3711 ;;Total ram usage:        0 bytes
  3712 ;; Hardware stack levels used:    1
  3713 ;; Hardware stack levels required when called:    3
  3714 ;; This function calls:
  3715 ;;		Nothing
  3716 ;; This function is called by:
  3717 ;;		_SYSTEM_Initialize
  3718 ;;		_LTC6804_initialize
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           	psect	text13
  3723  003EE2                     __ptext13:
  3724                           	opt stack 0
  3725  003EE2                     _SPI2_Initialize:
  3726                           	opt stack 26
  3727                           
  3728                           ;spi2.c: 69: SSP2STAT = 0b01000000;
  3729                           
  3730                           ;incstack = 0
  3731  003EE2  0E40               	movlw	64
  3732  003EE4  6E6D               	movwf	3949,c	;volatile
  3733                           
  3734                           ;spi2.c: 72: SSP2CON1 = 0x22;
  3735  003EE6  0E22               	movlw	34
  3736  003EE8  6E6C               	movwf	3948,c	;volatile
  3737                           
  3738                           ;spi2.c: 75: SSP2ADD = 0x00;
  3739  003EEA  0E00               	movlw	0
  3740  003EEC  6E6E               	movwf	3950,c	;volatile
  3741  003EEE  0012               	return		;funcret
  3742  003EF0                     __end_of_SPI2_Initialize:
  3743                           	opt stack 0
  3744                           tblptru	equ	0xFF8
  3745                           tblptrh	equ	0xFF7
  3746                           tblptrl	equ	0xFF6
  3747                           tablat	equ	0xFF5
  3748                           intcon	equ	0xFF2
  3749                           postinc0	equ	0xFEE
  3750                           wreg	equ	0xFE8
  3751                           postinc1	equ	0xFE6
  3752                           postdec1	equ	0xFE5
  3753                           fsr1h	equ	0xFE2
  3754                           fsr1l	equ	0xFE1
  3755                           postinc2	equ	0xFDE
  3756                           postdec2	equ	0xFDD
  3757                           fsr2h	equ	0xFDA
  3758                           fsr2l	equ	0xFD9
  3759                           status	equ	0xFD8
  3760                           
  3761 ;; *************** function _PIN_MANAGER_Initialize *****************
  3762 ;; Defined at:
  3763 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  3764 ;; Parameters:    Size  Location     Type
  3765 ;;		None
  3766 ;; Auto vars:     Size  Location     Type
  3767 ;;		None
  3768 ;; Return value:  Size  Location     Type
  3769 ;;                  1    wreg      void 
  3770 ;; Registers used:
  3771 ;;		wreg, status,2
  3772 ;; Tracked objects:
  3773 ;;		On entry : 0/0
  3774 ;;		On exit  : 0/0
  3775 ;;		Unchanged: 0/0
  3776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3777 ;;      Params:         0       0       0       0       0       0       0
  3778 ;;      Locals:         0       0       0       0       0       0       0
  3779 ;;      Temps:          0       0       0       0       0       0       0
  3780 ;;      Totals:         0       0       0       0       0       0       0
  3781 ;;Total ram usage:        0 bytes
  3782 ;; Hardware stack levels used:    1
  3783 ;; Hardware stack levels required when called:    3
  3784 ;; This function calls:
  3785 ;;		Nothing
  3786 ;; This function is called by:
  3787 ;;		_SYSTEM_Initialize
  3788 ;; This function uses a non-reentrant model
  3789 ;;
  3790                           
  3791                           	psect	text14
  3792  00375C                     __ptext14:
  3793                           	opt stack 0
  3794  00375C                     _PIN_MANAGER_Initialize:
  3795                           	opt stack 26
  3796                           
  3797                           ;pin_manager.c: 51: LATB = 0x0;
  3798                           
  3799                           ;incstack = 0
  3800  00375C  0E00               	movlw	0
  3801  00375E  6E8A               	movwf	3978,c	;volatile
  3802                           
  3803                           ;pin_manager.c: 52: LATA = 0x0;
  3804  003760  0E00               	movlw	0
  3805  003762  6E89               	movwf	3977,c	;volatile
  3806                           
  3807                           ;pin_manager.c: 53: ANSELE = 0x7;
  3808  003764  0E07               	movlw	7
  3809  003766  010F               	movlb	15	; () banked
  3810  003768  6F3C               	movwf	60,b	;volatile
  3811                           
  3812                           ;pin_manager.c: 54: LATE = 0x0;
  3813  00376A  0E00               	movlw	0
  3814  00376C  6E8D               	movwf	3981,c	;volatile
  3815                           
  3816                           ;pin_manager.c: 55: LATD = 0x0;
  3817  00376E  0E00               	movlw	0
  3818  003770  6E8C               	movwf	3980,c	;volatile
  3819                           
  3820                           ;pin_manager.c: 56: LATC = 0x0;
  3821  003772  0E00               	movlw	0
  3822  003774  6E8B               	movwf	3979,c	;volatile
  3823                           
  3824                           ;pin_manager.c: 57: ANSELA = 0x2E;
  3825  003776  0E2E               	movlw	46
  3826  003778  010F               	movlb	15	; () banked
  3827  00377A  6F38               	movwf	56,b	;volatile
  3828                           
  3829                           ;pin_manager.c: 58: ANSELB = 0x3F;
  3830  00377C  0E3F               	movlw	63
  3831  00377E  010F               	movlb	15	; () banked
  3832  003780  6F39               	movwf	57,b	;volatile
  3833                           
  3834                           ;pin_manager.c: 59: ANSELC = 0x3C;
  3835  003782  0E3C               	movlw	60
  3836  003784  010F               	movlb	15	; () banked
  3837  003786  6F3A               	movwf	58,b	;volatile
  3838                           
  3839                           ;pin_manager.c: 60: ANSELD = 0xF7;
  3840  003788  0EF7               	movlw	247
  3841  00378A  010F               	movlb	15	; () banked
  3842  00378C  6F3B               	movwf	59,b	;volatile
  3843                           
  3844                           ;pin_manager.c: 61: WPUB = 0xE7;
  3845  00378E  0EE7               	movlw	231
  3846  003790  6E61               	movwf	3937,c	;volatile
  3847                           
  3848                           ;pin_manager.c: 62: TRISD = 0x37;
  3849  003792  0E37               	movlw	55
  3850  003794  6E95               	movwf	3989,c	;volatile
  3851                           
  3852                           ;pin_manager.c: 63: TRISE = 0x7;
  3853  003796  0E07               	movlw	7
  3854  003798  6E96               	movwf	3990,c	;volatile
  3855                           
  3856                           ; BSR set to: 15
  3857                           ;pin_manager.c: 64: TRISB = 0xFF;
  3858  00379A  6893               	setf	3987,c	;volatile
  3859                           
  3860                           ;pin_manager.c: 65: TRISC = 0x9F;
  3861  00379C  0E9F               	movlw	159
  3862  00379E  6E94               	movwf	3988,c	;volatile
  3863                           
  3864                           ;pin_manager.c: 66: TRISA = 0xFE;
  3865  0037A0  0EFE               	movlw	254
  3866  0037A2  6E92               	movwf	3986,c	;volatile
  3867                           
  3868                           ; BSR set to: 15
  3869                           ;pin_manager.c: 67: TRISD3=0;
  3870  0037A4  9695               	bcf	3989,3,c	;volatile
  3871                           
  3872                           ; BSR set to: 15
  3873                           
  3874                           ; BSR set to: 15
  3875                           
  3876                           ;pin_manager.c: 68: do { LATD3 = 1; } while(0);
  3877  0037A6  868C               	bsf	3980,3,c	;volatile
  3878                           
  3879                           ; BSR set to: 15
  3880                           ;pin_manager.c: 69: INTCON2bits.nRBPU = 0x1;
  3881                           
  3882                           ; BSR set to: 15
  3883  0037A8  8EF1               	bsf	intcon2,7,c	;volatile
  3884                           
  3885                           ; BSR set to: 15
  3886                           ;pin_manager.c: 70: TRISDbits.TRISD1 = 1;
  3887  0037AA  8295               	bsf	3989,1,c	;volatile
  3888                           
  3889                           ;pin_manager.c: 71: ANSELD = 0;
  3890  0037AC  0E00               	movlw	0
  3891  0037AE  010F               	movlb	15	; () banked
  3892  0037B0  6F3B               	movwf	59,b	;volatile
  3893                           
  3894                           ;pin_manager.c: 73: ANSELE = 0;
  3895  0037B2  0E00               	movlw	0
  3896  0037B4  010F               	movlb	15	; () banked
  3897  0037B6  6F3C               	movwf	60,b	;volatile
  3898                           
  3899                           ;pin_manager.c: 74: ANSELC = 0;
  3900  0037B8  0E00               	movlw	0
  3901  0037BA  010F               	movlb	15	; () banked
  3902  0037BC  6F3A               	movwf	58,b	;volatile
  3903                           
  3904                           ;pin_manager.c: 75: ANSELB = 0;
  3905  0037BE  0E00               	movlw	0
  3906  0037C0  010F               	movlb	15	; () banked
  3907  0037C2  6F39               	movwf	57,b	;volatile
  3908                           
  3909                           ;pin_manager.c: 76: SLRCON =0;
  3910  0037C4  0E00               	movlw	0
  3911  0037C6  6E60               	movwf	3936,c	;volatile
  3912                           
  3913                           ; BSR set to: 15
  3914                           ;pin_manager.c: 80: INTCONbits.RBIE = 0;
  3915  0037C8  96F2               	bcf	intcon,3,c	;volatile
  3916                           
  3917                           ; BSR set to: 15
  3918  0037CA  0012               	return		;funcret
  3919  0037CC                     __end_of_PIN_MANAGER_Initialize:
  3920                           	opt stack 0
  3921                           tblptru	equ	0xFF8
  3922                           tblptrh	equ	0xFF7
  3923                           tblptrl	equ	0xFF6
  3924                           tablat	equ	0xFF5
  3925                           intcon	equ	0xFF2
  3926                           intcon2	equ	0xFF1
  3927                           postinc0	equ	0xFEE
  3928                           wreg	equ	0xFE8
  3929                           postinc1	equ	0xFE6
  3930                           postdec1	equ	0xFE5
  3931                           fsr1h	equ	0xFE2
  3932                           fsr1l	equ	0xFE1
  3933                           postinc2	equ	0xFDE
  3934                           postdec2	equ	0xFDD
  3935                           fsr2h	equ	0xFDA
  3936                           fsr2l	equ	0xFD9
  3937                           status	equ	0xFD8
  3938                           
  3939 ;; *************** function _OSCILLATOR_Initialize *****************
  3940 ;; Defined at:
  3941 ;;		line 129 in file "mcc_generated_files/mcc.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;		None
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;		None
  3946 ;; Return value:  Size  Location     Type
  3947 ;;                  1    wreg      void 
  3948 ;; Registers used:
  3949 ;;		wreg, status,2
  3950 ;; Tracked objects:
  3951 ;;		On entry : 0/0
  3952 ;;		On exit  : 0/0
  3953 ;;		Unchanged: 0/0
  3954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3955 ;;      Params:         0       0       0       0       0       0       0
  3956 ;;      Locals:         0       0       0       0       0       0       0
  3957 ;;      Temps:          0       0       0       0       0       0       0
  3958 ;;      Totals:         0       0       0       0       0       0       0
  3959 ;;Total ram usage:        0 bytes
  3960 ;; Hardware stack levels used:    1
  3961 ;; Hardware stack levels required when called:    3
  3962 ;; This function calls:
  3963 ;;		Nothing
  3964 ;; This function is called by:
  3965 ;;		_SYSTEM_Initialize
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text15
  3970  003EF0                     __ptext15:
  3971                           	opt stack 0
  3972  003EF0                     _OSCILLATOR_Initialize:
  3973                           	opt stack 26
  3974                           
  3975                           ;mcc.c: 132: OSCCON = 0x70;
  3976                           
  3977                           ; BSR set to: 15
  3978                           ;incstack = 0
  3979  003EF0  0E70               	movlw	112
  3980  003EF2  6ED3               	movwf	4051,c	;volatile
  3981                           
  3982                           ;mcc.c: 134: OSCCON2 = 0x04;
  3983  003EF4  0E04               	movlw	4
  3984  003EF6  6ED2               	movwf	4050,c	;volatile
  3985                           
  3986                           ;mcc.c: 136: OSCTUNE = 0x00;
  3987  003EF8  0E00               	movlw	0
  3988  003EFA  6E9B               	movwf	3995,c	;volatile
  3989  003EFC  0012               	return		;funcret
  3990  003EFE                     __end_of_OSCILLATOR_Initialize:
  3991                           	opt stack 0
  3992                           tblptru	equ	0xFF8
  3993                           tblptrh	equ	0xFF7
  3994                           tblptrl	equ	0xFF6
  3995                           tablat	equ	0xFF5
  3996                           intcon	equ	0xFF2
  3997                           intcon2	equ	0xFF1
  3998                           postinc0	equ	0xFEE
  3999                           wreg	equ	0xFE8
  4000                           postinc1	equ	0xFE6
  4001                           postdec1	equ	0xFE5
  4002                           fsr1h	equ	0xFE2
  4003                           fsr1l	equ	0xFE1
  4004                           postinc2	equ	0xFDE
  4005                           postdec2	equ	0xFDD
  4006                           fsr2h	equ	0xFDA
  4007                           fsr2l	equ	0xFD9
  4008                           status	equ	0xFD8
  4009                           
  4010 ;; *************** function _INTERRUPT_Initialize *****************
  4011 ;; Defined at:
  4012 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  4013 ;; Parameters:    Size  Location     Type
  4014 ;;		None
  4015 ;; Auto vars:     Size  Location     Type
  4016 ;;		None
  4017 ;; Return value:  Size  Location     Type
  4018 ;;                  1    wreg      void 
  4019 ;; Registers used:
  4020 ;;		None
  4021 ;; Tracked objects:
  4022 ;;		On entry : 0/0
  4023 ;;		On exit  : 0/0
  4024 ;;		Unchanged: 0/0
  4025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4026 ;;      Params:         0       0       0       0       0       0       0
  4027 ;;      Locals:         0       0       0       0       0       0       0
  4028 ;;      Temps:          0       0       0       0       0       0       0
  4029 ;;      Totals:         0       0       0       0       0       0       0
  4030 ;;Total ram usage:        0 bytes
  4031 ;; Hardware stack levels used:    1
  4032 ;; Hardware stack levels required when called:    3
  4033 ;; This function calls:
  4034 ;;		Nothing
  4035 ;; This function is called by:
  4036 ;;		_SYSTEM_Initialize
  4037 ;; This function uses a non-reentrant model
  4038 ;;
  4039                           
  4040                           	psect	text16
  4041  003EFE                     __ptext16:
  4042                           	opt stack 0
  4043  003EFE                     _INTERRUPT_Initialize:
  4044                           	opt stack 26
  4045                           
  4046                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  4047                           
  4048                           ;incstack = 0
  4049  003EFE  9ED0               	bcf	4048,7,c	;volatile
  4050                           
  4051                           ;interrupt_manager.c: 60: IPR1bits.ADIP = 0;
  4052  003F00  9C9F               	bcf	3999,6,c	;volatile
  4053                           
  4054                           ;interrupt_manager.c: 62: INTCON2bits.TMR0IP = 0;
  4055  003F02  94F1               	bcf	intcon2,2,c	;volatile
  4056                           
  4057                           ;interrupt_manager.c: 64: IPR1bits.TX1IP = 0;
  4058  003F04  989F               	bcf	3999,4,c	;volatile
  4059                           
  4060                           ;interrupt_manager.c: 66: IPR1bits.RC1IP = 0;
  4061  003F06  9A9F               	bcf	3999,5,c	;volatile
  4062  003F08  0012               	return		;funcret
  4063  003F0A                     __end_of_INTERRUPT_Initialize:
  4064                           	opt stack 0
  4065                           tblptru	equ	0xFF8
  4066                           tblptrh	equ	0xFF7
  4067                           tblptrl	equ	0xFF6
  4068                           tablat	equ	0xFF5
  4069                           intcon	equ	0xFF2
  4070                           intcon2	equ	0xFF1
  4071                           postinc0	equ	0xFEE
  4072                           wreg	equ	0xFE8
  4073                           postinc1	equ	0xFE6
  4074                           postdec1	equ	0xFE5
  4075                           fsr1h	equ	0xFE2
  4076                           fsr1l	equ	0xFE1
  4077                           postinc2	equ	0xFDE
  4078                           postdec2	equ	0xFDD
  4079                           fsr2h	equ	0xFDA
  4080                           fsr2l	equ	0xFD9
  4081                           status	equ	0xFD8
  4082                           
  4083 ;; *************** function _EUSART1_Initialize *****************
  4084 ;; Defined at:
  4085 ;;		line 76 in file "mcc_generated_files/eusart1.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;		None
  4088 ;; Auto vars:     Size  Location     Type
  4089 ;;		None
  4090 ;; Return value:  Size  Location     Type
  4091 ;;                  1    wreg      void 
  4092 ;; Registers used:
  4093 ;;		wreg, status,2
  4094 ;; Tracked objects:
  4095 ;;		On entry : 0/0
  4096 ;;		On exit  : 0/0
  4097 ;;		Unchanged: 0/0
  4098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4099 ;;      Params:         0       0       0       0       0       0       0
  4100 ;;      Locals:         0       0       0       0       0       0       0
  4101 ;;      Temps:          0       0       0       0       0       0       0
  4102 ;;      Totals:         0       0       0       0       0       0       0
  4103 ;;Total ram usage:        0 bytes
  4104 ;; Hardware stack levels used:    1
  4105 ;; Hardware stack levels required when called:    3
  4106 ;; This function calls:
  4107 ;;		Nothing
  4108 ;; This function is called by:
  4109 ;;		_SYSTEM_Initialize
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113                           	psect	text17
  4114  003BFE                     __ptext17:
  4115                           	opt stack 0
  4116  003BFE                     _EUSART1_Initialize:
  4117                           	opt stack 26
  4118                           
  4119                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
  4120                           
  4121                           ;incstack = 0
  4122  003BFE  9A9D               	bcf	3997,5,c	;volatile
  4123                           
  4124                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
  4125  003C00  989D               	bcf	3997,4,c	;volatile
  4126                           
  4127                           ;eusart1.c: 85: BAUDCON1 = 0x08;
  4128  003C02  0E08               	movlw	8
  4129  003C04  6EB8               	movwf	4024,c	;volatile
  4130                           
  4131                           ;eusart1.c: 88: RCSTA1 = 0x90;
  4132  003C06  0E90               	movlw	144
  4133  003C08  6EAB               	movwf	4011,c	;volatile
  4134                           
  4135                           ;eusart1.c: 91: TXSTA1 = 0x24;
  4136  003C0A  0E24               	movlw	36
  4137  003C0C  6EAC               	movwf	4012,c	;volatile
  4138                           
  4139                           ;eusart1.c: 94: SPBRG1 = 0x67;
  4140  003C0E  0E67               	movlw	103
  4141  003C10  6EAF               	movwf	4015,c	;volatile
  4142                           
  4143                           ;eusart1.c: 97: SPBRGH1 = 0x00;
  4144  003C12  0E00               	movlw	0
  4145  003C14  6EB0               	movwf	4016,c	;volatile
  4146                           
  4147                           ;eusart1.c: 101: eusart1TxHead = 0;
  4148  003C16  0E00               	movlw	0
  4149  003C18  6E4B               	movwf	_eusart1TxHead,c
  4150                           
  4151                           ;eusart1.c: 102: eusart1TxTail = 0;
  4152  003C1A  0E00               	movlw	0
  4153  003C1C  6E4C               	movwf	_eusart1TxTail,c
  4154                           
  4155                           ;eusart1.c: 103: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  4156  003C1E  0E08               	movlw	8
  4157  003C20  0100               	movlb	0	; () banked
  4158  003C22  6FF4               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  4159                           
  4160                           ;eusart1.c: 105: eusart1RxHead = 0;
  4161  003C24  0E00               	movlw	0
  4162  003C26  6E4A               	movwf	_eusart1RxHead,c
  4163                           
  4164                           ;eusart1.c: 106: eusart1RxTail = 0;
  4165  003C28  0E00               	movlw	0
  4166  003C2A  0100               	movlb	0	; () banked
  4167  003C2C  6FDF               	movwf	_eusart1RxTail& (0+255),b
  4168                           
  4169                           ;eusart1.c: 107: eusart1RxCount = 0;
  4170  003C2E  0E00               	movlw	0
  4171  003C30  0100               	movlb	0	; () banked
  4172  003C32  6FDE               	movwf	_eusart1RxCount& (0+255),b	;volatile
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;eusart1.c: 110: PIE1bits.RC1IE = 1;
  4176  003C34  8A9D               	bsf	3997,5,c	;volatile
  4177                           
  4178                           ; BSR set to: 0
  4179  003C36  0012               	return		;funcret
  4180  003C38                     __end_of_EUSART1_Initialize:
  4181                           	opt stack 0
  4182                           tblptru	equ	0xFF8
  4183                           tblptrh	equ	0xFF7
  4184                           tblptrl	equ	0xFF6
  4185                           tablat	equ	0xFF5
  4186                           intcon	equ	0xFF2
  4187                           intcon2	equ	0xFF1
  4188                           postinc0	equ	0xFEE
  4189                           wreg	equ	0xFE8
  4190                           postinc1	equ	0xFE6
  4191                           postdec1	equ	0xFE5
  4192                           fsr1h	equ	0xFE2
  4193                           fsr1l	equ	0xFE1
  4194                           postinc2	equ	0xFDE
  4195                           postdec2	equ	0xFDD
  4196                           fsr2h	equ	0xFDA
  4197                           fsr2l	equ	0xFD9
  4198                           status	equ	0xFD8
  4199                           
  4200 ;; *************** function _ADC_Initialize *****************
  4201 ;; Defined at:
  4202 ;;		line 59 in file "mcc_generated_files/adc.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;		None
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;		None
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  1    wreg      void 
  4209 ;; Registers used:
  4210 ;;		wreg, status,2
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4216 ;;      Params:         0       0       0       0       0       0       0
  4217 ;;      Locals:         0       0       0       0       0       0       0
  4218 ;;      Temps:          0       0       0       0       0       0       0
  4219 ;;      Totals:         0       0       0       0       0       0       0
  4220 ;;Total ram usage:        0 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    3
  4223 ;; This function calls:
  4224 ;;		Nothing
  4225 ;; This function is called by:
  4226 ;;		_SYSTEM_Initialize
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           	psect	text18
  4231  003E82                     __ptext18:
  4232                           	opt stack 0
  4233  003E82                     _ADC_Initialize:
  4234                           	opt stack 26
  4235                           
  4236                           ;adc.c: 64: ADCON0 = 0x01;
  4237                           
  4238                           ; BSR set to: 0
  4239                           ;incstack = 0
  4240  003E82  0E01               	movlw	1
  4241  003E84  6EC2               	movwf	4034,c	;volatile
  4242                           
  4243                           ;adc.c: 67: ADCON1 = 0x00;
  4244  003E86  0E00               	movlw	0
  4245  003E88  6EC1               	movwf	4033,c	;volatile
  4246                           
  4247                           ;adc.c: 70: ADCON2 = 0x02;
  4248  003E8A  0E02               	movlw	2
  4249  003E8C  6EC0               	movwf	4032,c	;volatile
  4250                           
  4251                           ;adc.c: 73: ADRESL = 0x00;
  4252  003E8E  0E00               	movlw	0
  4253  003E90  6EC3               	movwf	4035,c	;volatile
  4254                           
  4255                           ;adc.c: 76: ADRESH = 0x00;
  4256  003E92  0E00               	movlw	0
  4257  003E94  6EC4               	movwf	4036,c	;volatile
  4258                           
  4259                           ;adc.c: 79: PIE1bits.ADIE = 1;
  4260  003E96  8C9D               	bsf	3997,6,c	;volatile
  4261  003E98  0012               	return		;funcret
  4262  003E9A                     __end_of_ADC_Initialize:
  4263                           	opt stack 0
  4264                           tblptru	equ	0xFF8
  4265                           tblptrh	equ	0xFF7
  4266                           tblptrl	equ	0xFF6
  4267                           tablat	equ	0xFF5
  4268                           intcon	equ	0xFF2
  4269                           intcon2	equ	0xFF1
  4270                           postinc0	equ	0xFEE
  4271                           wreg	equ	0xFE8
  4272                           postinc1	equ	0xFE6
  4273                           postdec1	equ	0xFE5
  4274                           fsr1h	equ	0xFE2
  4275                           fsr1l	equ	0xFE1
  4276                           postinc2	equ	0xFDE
  4277                           postdec2	equ	0xFDD
  4278                           fsr2h	equ	0xFDA
  4279                           fsr2l	equ	0xFD9
  4280                           status	equ	0xFD8
  4281                           
  4282 ;; *************** function _Run_Mode *****************
  4283 ;; Defined at:
  4284 ;;		line 44 in file "BatteryManagment.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;		None
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;  k               2   82[BANK0 ] int 
  4289 ;; Return value:  Size  Location     Type
  4290 ;;                  2  385[None  ] int 
  4291 ;; Registers used:
  4292 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4293 ;; Tracked objects:
  4294 ;;		On entry : 0/0
  4295 ;;		On exit  : 0/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4298 ;;      Params:         0       0       0       0       0       0       0
  4299 ;;      Locals:         0       5       0       0       0       0       0
  4300 ;;      Temps:          0       0       0       0       0       0       0
  4301 ;;      Totals:         0       5       0       0       0       0       0
  4302 ;;Total ram usage:        5 bytes
  4303 ;; Hardware stack levels used:    1
  4304 ;; Hardware stack levels required when called:    9
  4305 ;; This function calls:
  4306 ;;		_ReadCurrent
  4307 ;;		_Read_Battery
  4308 ;;		_TempRun
  4309 ;;		_Temp_Fault
  4310 ;;		_Tempeture_Get
  4311 ;;		___awtoft
  4312 ;;		___ftge
  4313 ;;		___ftmul
  4314 ;;		_printf
  4315 ;; This function is called by:
  4316 ;;		_main
  4317 ;; This function uses a non-reentrant model
  4318 ;;
  4319                           
  4320                           	psect	text19
  4321  00243C                     __ptext19:
  4322                           	opt stack 0
  4323  00243C                     _Run_Mode:
  4324                           	opt stack 21
  4325                           
  4326                           ;BatteryManagment.c: 45: Read_Battery(0,cell_codes_Bank);
  4327                           
  4328                           ;incstack = 0
  4329  00243C  0E00               	movlw	0
  4330  00243E  0100               	movlb	0	; () banked
  4331  002440  6F99               	movwf	(Read_Battery@BatteryPlacement+1)& (0+255),b
  4332  002442  0E00               	movlw	0
  4333  002444  6F98               	movwf	Read_Battery@BatteryPlacement& (0+255),b
  4334  002446  0EC0               	movlw	low _cell_codes_Bank
  4335  002448  0100               	movlb	0	; () banked
  4336  00244A  6F9A               	movwf	Read_Battery@cell_codes& (0+255),b
  4337  00244C  0E02               	movlw	high _cell_codes_Bank
  4338  00244E  0100               	movlb	0	; () banked
  4339  002450  6F9B               	movwf	(Read_Battery@cell_codes+1)& (0+255),b
  4340  002452  ECBA  F00A         	call	_Read_Battery	;wreg free
  4341                           
  4342                           ;BatteryManagment.c: 46: int k = 0;
  4343  002456  0E00               	movlw	0
  4344  002458  0100               	movlb	0	; () banked
  4345  00245A  6FB3               	movwf	(Run_Mode@k+1)& (0+255),b
  4346  00245C  0E00               	movlw	0
  4347  00245E  6FB2               	movwf	Run_Mode@k& (0+255),b
  4348  002460                     l8535:
  4349                           
  4350                           ; BSR set to: 0
  4351  002460  0100               	movlb	0	; () banked
  4352  002462  BFB3               	btfsc	(Run_Mode@k+1)& (0+255),7,b
  4353  002464  D008               	goto	l8539
  4354  002466  0100               	movlb	0	; () banked
  4355  002468  51B3               	movf	(Run_Mode@k+1)& (0+255),w,b
  4356  00246A  E140               	bnz	l8547
  4357  00246C  0E0C               	movlw	12
  4358  00246E  0100               	movlb	0	; () banked
  4359  002470  5DB2               	subwf	Run_Mode@k& (0+255),w,b
  4360  002472  B0D8               	btfsc	status,0,c
  4361  002474  D03B               	goto	l8547
  4362  002476                     l8539:
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;BatteryManagment.c: 48: printf(" Cell %d Voltage: %1.2f \n",k, cell_codes_Bank[0][k]*0.
      +                          00001);
  4366  002476  90D8               	bcf	status,0,c
  4367  002478  0100               	movlb	0	; () banked
  4368  00247A  35B2               	rlcf	Run_Mode@k& (0+255),w,b
  4369  00247C  6ED9               	movwf	fsr2l,c
  4370  00247E  0100               	movlb	0	; () banked
  4371  002480  35B3               	rlcf	(Run_Mode@k+1)& (0+255),w,b
  4372  002482  6EDA               	movwf	fsr2h,c
  4373  002484  0EC0               	movlw	low _cell_codes_Bank
  4374  002486  26D9               	addwf	fsr2l,f,c
  4375  002488  0E02               	movlw	high _cell_codes_Bank
  4376  00248A  22DA               	addwfc	fsr2h,f,c
  4377  00248C  CFDE F017          	movff	postinc2,___awtoft@c
  4378  002490  CFDD F018          	movff	postdec2,___awtoft@c+1
  4379  002494  EC1C  F01E         	call	___awtoft	;wreg free
  4380  002498  C017  F032         	movff	?___awtoft,___ftmul@f1
  4381  00249C  C018  F033         	movff	?___awtoft+1,___ftmul@f1+1
  4382  0024A0  C019  F034         	movff	?___awtoft+2,___ftmul@f1+2
  4383  0024A4  0EC6               	movlw	198
  4384  0024A6  6E35               	movwf	___ftmul@f2,c
  4385  0024A8  0E27               	movlw	39
  4386  0024AA  6E36               	movwf	___ftmul@f2+1,c
  4387  0024AC  0E37               	movlw	55
  4388  0024AE  6E37               	movwf	___ftmul@f2+2,c
  4389  0024B0  EC5B  F016         	call	___ftmul	;wreg free
  4390  0024B4  C032  F0AF         	movff	?___ftmul,_Run_Mode$2728
  4391  0024B8  C033  F0B0         	movff	?___ftmul+1,_Run_Mode$2728+1
  4392  0024BC  C034  F0B1         	movff	?___ftmul+2,_Run_Mode$2728+2
  4393                           
  4394                           ;BatteryManagment.c: 48: printf(" Cell %d Voltage: %1.2f \n",k, cell_codes_Bank[0][k]*0.
      +                          00001);
  4395  0024C0  0EA2               	movlw	low STR_3
  4396  0024C2  0100               	movlb	0	; () banked
  4397  0024C4  6F9F               	movwf	printf@f& (0+255),b
  4398  0024C6  0E7F               	movlw	high STR_3
  4399  0024C8  0100               	movlb	0	; () banked
  4400  0024CA  6FA0               	movwf	(printf@f+1)& (0+255),b
  4401  0024CC  C0B2  F0A1         	movff	Run_Mode@k,?_printf+2
  4402  0024D0  C0B3  F0A2         	movff	Run_Mode@k+1,?_printf+3
  4403  0024D4  C0AF  F0A3         	movff	_Run_Mode$2728,?_printf+4
  4404  0024D8  C0B0  F0A4         	movff	_Run_Mode$2728+1,?_printf+5
  4405  0024DC  C0B1  F0A5         	movff	_Run_Mode$2728+2,?_printf+6
  4406  0024E0  EC58  F000         	call	_printf	;wreg free
  4407  0024E4  0100               	movlb	0	; () banked
  4408  0024E6  4BB2               	infsnz	Run_Mode@k& (0+255),f,b
  4409  0024E8  2BB3               	incf	(Run_Mode@k+1)& (0+255),f,b
  4410  0024EA  D7BA               	goto	l8535
  4411  0024EC                     l8547:
  4412                           
  4413                           ; BSR set to: 0
  4414                           ;BatteryManagment.c: 49: }
  4415                           ;BatteryManagment.c: 52: TempRun();
  4416  0024EC  EC8A  F01F         	call	_TempRun	;wreg free
  4417  0024F0                     l8549:
  4418  0024F0  0100               	movlb	0	; () banked
  4419  0024F2  BFB3               	btfsc	(Run_Mode@k+1)& (0+255),7,b
  4420  0024F4  D008               	goto	l8553
  4421  0024F6  0100               	movlb	0	; () banked
  4422  0024F8  51B3               	movf	(Run_Mode@k+1)& (0+255),w,b
  4423  0024FA  E121               	bnz	l8559
  4424  0024FC  0E06               	movlw	6
  4425  0024FE  0100               	movlb	0	; () banked
  4426  002500  5DB2               	subwf	Run_Mode@k& (0+255),w,b
  4427  002502  B0D8               	btfsc	status,0,c
  4428  002504  D01C               	goto	l8559
  4429  002506                     l8553:
  4430                           
  4431                           ; BSR set to: 0
  4432                           ;BatteryManagment.c: 54: printf(" Cell %d temp: %1.2f \n",k, Tempeture_Get(k));
  4433  002506  0ED5               	movlw	low STR_4
  4434  002508  0100               	movlb	0	; () banked
  4435  00250A  6F9F               	movwf	printf@f& (0+255),b
  4436  00250C  0E7F               	movlw	high STR_4
  4437  00250E  0100               	movlb	0	; () banked
  4438  002510  6FA0               	movwf	(printf@f+1)& (0+255),b
  4439  002512  C0B2  F0A1         	movff	Run_Mode@k,?_printf+2
  4440  002516  C0B3  F0A2         	movff	Run_Mode@k+1,?_printf+3
  4441  00251A  C0B2  F023         	movff	Run_Mode@k,Tempeture_Get@channelnum
  4442  00251E  C0B3  F024         	movff	Run_Mode@k+1,Tempeture_Get@channelnum+1
  4443  002522  EC83  F01E         	call	_Tempeture_Get	;wreg free
  4444  002526  C023  F0A3         	movff	?_Tempeture_Get,?_printf+4
  4445  00252A  C024  F0A4         	movff	?_Tempeture_Get+1,?_printf+5
  4446  00252E  C025  F0A5         	movff	?_Tempeture_Get+2,?_printf+6
  4447  002532  EC58  F000         	call	_printf	;wreg free
  4448  002536  0100               	movlb	0	; () banked
  4449  002538  4BB2               	infsnz	Run_Mode@k& (0+255),f,b
  4450  00253A  2BB3               	incf	(Run_Mode@k+1)& (0+255),f,b
  4451  00253C  D7D9               	goto	l8549
  4452  00253E                     l8559:
  4453                           
  4454                           ; BSR set to: 0
  4455                           ;BatteryManagment.c: 55: }
  4456                           ;BatteryManagment.c: 56: Temp_Fault();
  4457  00253E  EC94  F019         	call	_Temp_Fault	;wreg free
  4458                           
  4459                           ;BatteryManagment.c: 58: if(ReadCurrent() > 20.0){
  4460  002542  0E00               	movlw	0
  4461  002544  0100               	movlb	0	; () banked
  4462  002546  6F96               	movwf	___ftge@ff1& (0+255),b
  4463  002548  0EA0               	movlw	160
  4464  00254A  0100               	movlb	0	; () banked
  4465  00254C  6F97               	movwf	(___ftge@ff1+1)& (0+255),b
  4466  00254E  0E41               	movlw	65
  4467  002550  0100               	movlb	0	; () banked
  4468  002552  6F98               	movwf	(___ftge@ff1+2)& (0+255),b
  4469  002554  EC22  F018         	call	_ReadCurrent	;wreg free
  4470  002558  C08E  F099         	movff	?_ReadCurrent,___ftge@ff2
  4471  00255C  C08F  F09A         	movff	?_ReadCurrent+1,___ftge@ff2+1
  4472  002560  C090  F09B         	movff	?_ReadCurrent+2,___ftge@ff2+2
  4473  002564  EC87  F018         	call	___ftge	;wreg free
  4474  002568  0100               	movlb	0	; () banked
  4475  00256A  B0D8               	btfsc	status,0,c
  4476  00256C  0012               	return	
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;BatteryManagment.c: 59: printf("Over Current\n");
  4480  00256E  0EEC               	movlw	low STR_5
  4481  002570  0100               	movlb	0	; () banked
  4482  002572  6F9F               	movwf	printf@f& (0+255),b
  4483  002574  0E7F               	movlw	high STR_5
  4484  002576  0100               	movlb	0	; () banked
  4485  002578  6FA0               	movwf	(printf@f+1)& (0+255),b
  4486  00257A  EC58  F000         	call	_printf	;wreg free
  4487  00257E  0012               	return	
  4488  002580                     __end_of_Run_Mode:
  4489                           	opt stack 0
  4490                           tblptru	equ	0xFF8
  4491                           tblptrh	equ	0xFF7
  4492                           tblptrl	equ	0xFF6
  4493                           tablat	equ	0xFF5
  4494                           intcon	equ	0xFF2
  4495                           intcon2	equ	0xFF1
  4496                           postinc0	equ	0xFEE
  4497                           wreg	equ	0xFE8
  4498                           postinc1	equ	0xFE6
  4499                           postdec1	equ	0xFE5
  4500                           fsr1h	equ	0xFE2
  4501                           fsr1l	equ	0xFE1
  4502                           postinc2	equ	0xFDE
  4503                           postdec2	equ	0xFDD
  4504                           fsr2h	equ	0xFDA
  4505                           fsr2l	equ	0xFD9
  4506                           status	equ	0xFD8
  4507                           
  4508 ;; *************** function _Tempeture_Get *****************
  4509 ;; Defined at:
  4510 ;;		line 77 in file "Tempeture.c"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;  channelnum      2   34[COMRAM] int 
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;		None
  4515 ;; Return value:  Size  Location     Type
  4516 ;;                  3   34[COMRAM] float 
  4517 ;; Registers used:
  4518 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/0
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4524 ;;      Params:         3       0       0       0       0       0       0
  4525 ;;      Locals:         0       0       0       0       0       0       0
  4526 ;;      Temps:          0       0       0       0       0       0       0
  4527 ;;      Totals:         3       0       0       0       0       0       0
  4528 ;;Total ram usage:        3 bytes
  4529 ;; Hardware stack levels used:    1
  4530 ;; Hardware stack levels required when called:    4
  4531 ;; This function calls:
  4532 ;;		___wmul
  4533 ;; This function is called by:
  4534 ;;		_Run_Mode
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           	psect	text20
  4539  003D06                     __ptext20:
  4540                           	opt stack 0
  4541  003D06                     _Tempeture_Get:
  4542                           	opt stack 25
  4543                           
  4544                           ;Tempeture.c: 79: return Temp_DegF[channelnum];
  4545                           
  4546                           ;incstack = 0
  4547  003D06  C023  F01D         	movff	Tempeture_Get@channelnum,___wmul@multiplier
  4548  003D0A  C024  F01E         	movff	Tempeture_Get@channelnum+1,___wmul@multiplier+1
  4549  003D0E  0E00               	movlw	0
  4550  003D10  6E20               	movwf	___wmul@multiplicand+1,c
  4551  003D12  0E03               	movlw	3
  4552  003D14  6E1F               	movwf	___wmul@multiplicand,c
  4553  003D16  ECDB  F01E         	call	___wmul	;wreg free
  4554  003D1A  0E18               	movlw	low _Temp_DegF
  4555  003D1C  241D               	addwf	?___wmul,w,c
  4556  003D1E  6ED9               	movwf	fsr2l,c
  4557  003D20  0E02               	movlw	high _Temp_DegF
  4558  003D22  201E               	addwfc	?___wmul+1,w,c
  4559  003D24  6EDA               	movwf	fsr2h,c
  4560  003D26  CFDE F023          	movff	postinc2,?_Tempeture_Get
  4561  003D2A  CFDE F024          	movff	postinc2,?_Tempeture_Get+1
  4562  003D2E  CFDD F025          	movff	postdec2,?_Tempeture_Get+2
  4563  003D32  0012               	return	
  4564  003D34                     __end_of_Tempeture_Get:
  4565                           	opt stack 0
  4566                           tblptru	equ	0xFF8
  4567                           tblptrh	equ	0xFF7
  4568                           tblptrl	equ	0xFF6
  4569                           tablat	equ	0xFF5
  4570                           intcon	equ	0xFF2
  4571                           intcon2	equ	0xFF1
  4572                           postinc0	equ	0xFEE
  4573                           wreg	equ	0xFE8
  4574                           postinc1	equ	0xFE6
  4575                           postdec1	equ	0xFE5
  4576                           fsr1h	equ	0xFE2
  4577                           fsr1l	equ	0xFE1
  4578                           postinc2	equ	0xFDE
  4579                           postdec2	equ	0xFDD
  4580                           fsr2h	equ	0xFDA
  4581                           fsr2l	equ	0xFD9
  4582                           status	equ	0xFD8
  4583                           
  4584 ;; *************** function _Temp_Fault *****************
  4585 ;; Defined at:
  4586 ;;		line 21 in file "Tempeture.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;		None
  4589 ;; Auto vars:     Size  Location     Type
  4590 ;;  i               2   77[BANK0 ] int 
  4591 ;;  fault           1   76[BANK0 ] unsigned char 
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  1    wreg      unsigned char 
  4594 ;; Registers used:
  4595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4596 ;; Tracked objects:
  4597 ;;		On entry : 0/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4601 ;;      Params:         0       0       0       0       0       0       0
  4602 ;;      Locals:         0       3       0       0       0       0       0
  4603 ;;      Temps:          0       0       0       0       0       0       0
  4604 ;;      Totals:         0       3       0       0       0       0       0
  4605 ;;Total ram usage:        3 bytes
  4606 ;; Hardware stack levels used:    1
  4607 ;; Hardware stack levels required when called:    7
  4608 ;; This function calls:
  4609 ;;		___ftge
  4610 ;;		___wmul
  4611 ;;		_printf
  4612 ;; This function is called by:
  4613 ;;		_Run_Mode
  4614 ;; This function uses a non-reentrant model
  4615 ;;
  4616                           
  4617                           	psect	text21
  4618  003328                     __ptext21:
  4619                           	opt stack 0
  4620  003328                     _Temp_Fault:
  4621                           	opt stack 22
  4622                           
  4623                           ;Tempeture.c: 24: char fault = 0;
  4624                           
  4625                           ;incstack = 0
  4626  003328  0E00               	movlw	0
  4627  00332A  0100               	movlb	0	; () banked
  4628  00332C  6FAC               	movwf	Temp_Fault@fault& (0+255),b
  4629                           
  4630                           ;Tempeture.c: 25: for(int i = 0;i<6;i++)
  4631  00332E  0E00               	movlw	0
  4632  003330  0100               	movlb	0	; () banked
  4633  003332  6FAE               	movwf	(Temp_Fault@i+1)& (0+255),b
  4634  003334  0E00               	movlw	0
  4635  003336  6FAD               	movwf	Temp_Fault@i& (0+255),b
  4636  003338                     l8405:
  4637                           
  4638                           ; BSR set to: 0
  4639  003338  0100               	movlb	0	; () banked
  4640  00333A  BFAE               	btfsc	(Temp_Fault@i+1)& (0+255),7,b
  4641  00333C  D008               	goto	l8409
  4642  00333E  0100               	movlb	0	; () banked
  4643  003340  51AE               	movf	(Temp_Fault@i+1)& (0+255),w,b
  4644  003342  E13C               	bnz	l353
  4645  003344  0E06               	movlw	6
  4646  003346  0100               	movlb	0	; () banked
  4647  003348  5DAD               	subwf	Temp_Fault@i& (0+255),w,b
  4648  00334A  B0D8               	btfsc	status,0,c
  4649  00334C  0012               	return	
  4650  00334E                     l8409:
  4651                           
  4652                           ; BSR set to: 0
  4653                           ;Tempeture.c: 26: {
  4654                           ;Tempeture.c: 27: if (60.5 > Temp_DegF[i])
  4655  00334E  C0AD  F01D         	movff	Temp_Fault@i,___wmul@multiplier
  4656  003352  C0AE  F01E         	movff	Temp_Fault@i+1,___wmul@multiplier+1
  4657  003356  0E00               	movlw	0
  4658  003358  6E20               	movwf	___wmul@multiplicand+1,c
  4659  00335A  0E03               	movlw	3
  4660  00335C  6E1F               	movwf	___wmul@multiplicand,c
  4661  00335E  ECDB  F01E         	call	___wmul	;wreg free
  4662  003362  0E18               	movlw	low _Temp_DegF
  4663  003364  241D               	addwf	?___wmul,w,c
  4664  003366  6ED9               	movwf	fsr2l,c
  4665  003368  0E02               	movlw	high _Temp_DegF
  4666  00336A  201E               	addwfc	?___wmul+1,w,c
  4667  00336C  6EDA               	movwf	fsr2h,c
  4668  00336E  CFDE F096          	movff	postinc2,___ftge@ff1
  4669  003372  CFDE F097          	movff	postinc2,___ftge@ff1+1
  4670  003376  CFDD F098          	movff	postdec2,___ftge@ff1+2
  4671  00337A  0E00               	movlw	0
  4672  00337C  0100               	movlb	0	; () banked
  4673  00337E  6F99               	movwf	___ftge@ff2& (0+255),b
  4674  003380  0E72               	movlw	114
  4675  003382  0100               	movlb	0	; () banked
  4676  003384  6F9A               	movwf	(___ftge@ff2+1)& (0+255),b
  4677  003386  0E42               	movlw	66
  4678  003388  0100               	movlb	0	; () banked
  4679  00338A  6F9B               	movwf	(___ftge@ff2+2)& (0+255),b
  4680  00338C  EC87  F018         	call	___ftge	;wreg free
  4681  003390  0100               	movlb	0	; () banked
  4682  003392  B0D8               	btfsc	status,0,c
  4683  003394  D00F               	goto	l8415
  4684                           
  4685                           ; BSR set to: 0
  4686                           ;Tempeture.c: 28: {
  4687                           ;Tempeture.c: 29: printf("Temp Sense %b is too hot",i);
  4688  003396  0EBC               	movlw	low STR_1
  4689  003398  0100               	movlb	0	; () banked
  4690  00339A  6F9F               	movwf	printf@f& (0+255),b
  4691  00339C  0E7F               	movlw	high STR_1
  4692  00339E  0100               	movlb	0	; () banked
  4693  0033A0  6FA0               	movwf	(printf@f+1)& (0+255),b
  4694  0033A2  C0AD  F0A1         	movff	Temp_Fault@i,?_printf+2
  4695  0033A6  C0AE  F0A2         	movff	Temp_Fault@i+1,?_printf+3
  4696  0033AA  EC58  F000         	call	_printf	;wreg free
  4697                           
  4698                           ;Tempeture.c: 30: fault = 1;
  4699  0033AE  0E01               	movlw	1
  4700  0033B0  0100               	movlb	0	; () banked
  4701  0033B2  6FAC               	movwf	Temp_Fault@fault& (0+255),b
  4702  0033B4                     l8415:
  4703                           
  4704                           ; BSR set to: 0
  4705  0033B4  0100               	movlb	0	; () banked
  4706  0033B6  4BAD               	infsnz	Temp_Fault@i& (0+255),f,b
  4707  0033B8  2BAE               	incf	(Temp_Fault@i+1)& (0+255),f,b
  4708  0033BA  D7BE               	goto	l8405
  4709  0033BC                     l353:
  4710                           
  4711                           ; BSR set to: 0
  4712  0033BC  0012               	return		;funcret
  4713  0033BE                     __end_of_Temp_Fault:
  4714                           	opt stack 0
  4715                           tblptru	equ	0xFF8
  4716                           tblptrh	equ	0xFF7
  4717                           tblptrl	equ	0xFF6
  4718                           tablat	equ	0xFF5
  4719                           intcon	equ	0xFF2
  4720                           intcon2	equ	0xFF1
  4721                           postinc0	equ	0xFEE
  4722                           wreg	equ	0xFE8
  4723                           postinc1	equ	0xFE6
  4724                           postdec1	equ	0xFE5
  4725                           fsr1h	equ	0xFE2
  4726                           fsr1l	equ	0xFE1
  4727                           postinc2	equ	0xFDE
  4728                           postdec2	equ	0xFDD
  4729                           fsr2h	equ	0xFDA
  4730                           fsr2l	equ	0xFD9
  4731                           status	equ	0xFD8
  4732                           
  4733 ;; *************** function _printf *****************
  4734 ;; Defined at:
  4735 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;  f               2   63[BANK0 ] PTR const unsigned char 
  4738 ;;		 -> STR_5(14), STR_4(23), STR_3(26), STR_2(5), 
  4739 ;;		 -> STR_1(25), 
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;  val             4   13[BANK1 ] unsigned long 
  4742 ;;  tmpval          4    9[BANK1 ] struct .
  4743 ;;  fval            3   21[BANK1 ] struct .
  4744 ;;  cp              3    0        PTR const unsigned char 
  4745 ;;  prec            2   24[BANK1 ] int 
  4746 ;;  exp             2   19[BANK1 ] int 
  4747 ;;  flag            2   17[BANK1 ] unsigned short 
  4748 ;;  width           2    7[BANK1 ] int 
  4749 ;;  ap              2    5[BANK1 ] PTR void [1]
  4750 ;;		 -> ?_printf(2), 
  4751 ;;  len             2    0        unsigned int 
  4752 ;;  c               1   26[BANK1 ] char 
  4753 ;;  d               1    0        unsigned char 
  4754 ;; Return value:  Size  Location     Type
  4755 ;;                  2   63[BANK0 ] int 
  4756 ;; Registers used:
  4757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4758 ;; Tracked objects:
  4759 ;;		On entry : 0/0
  4760 ;;		On exit  : 0/0
  4761 ;;		Unchanged: 0/0
  4762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4763 ;;      Params:         0       7       0       0       0       0       0
  4764 ;;      Locals:         0       0      27       0       0       0       0
  4765 ;;      Temps:          0       6       0       0       0       0       0
  4766 ;;      Totals:         0      13      27       0       0       0       0
  4767 ;;Total ram usage:       40 bytes
  4768 ;; Hardware stack levels used:    1
  4769 ;; Hardware stack levels required when called:    6
  4770 ;; This function calls:
  4771 ;;		___awdiv
  4772 ;;		___ftadd
  4773 ;;		___ftge
  4774 ;;		___ftmul
  4775 ;;		___ftneg
  4776 ;;		___ftsub
  4777 ;;		___fttol
  4778 ;;		___lldiv
  4779 ;;		___llmod
  4780 ;;		___lltoft
  4781 ;;		___wmul
  4782 ;;		__div_to_l_
  4783 ;;		__tdiv_to_l_
  4784 ;;		_fround
  4785 ;;		_isdigit
  4786 ;;		_putch
  4787 ;;		_scale
  4788 ;; This function is called by:
  4789 ;;		_Temp_Fault
  4790 ;;		_main
  4791 ;;		_Run_Mode
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           	psect	text22
  4796  0000B0                     __ptext22:
  4797                           	opt stack 0
  4798  0000B0                     _printf:
  4799                           	opt stack 24
  4800                           
  4801                           ;doprnt.c: 466: va_list ap;
  4802                           ;doprnt.c: 499: signed char c;
  4803                           ;doprnt.c: 501: int width;
  4804                           ;doprnt.c: 504: int prec;
  4805                           ;doprnt.c: 508: unsigned short flag;
  4806                           ;doprnt.c: 515: char d;
  4807                           ;doprnt.c: 516: double fval;
  4808                           ;doprnt.c: 517: int exp;
  4809                           ;doprnt.c: 523: union {
  4810                           ;doprnt.c: 524: unsigned long vd;
  4811                           ;doprnt.c: 525: double integ;
  4812                           ;doprnt.c: 526: } tmpval;
  4813                           ;doprnt.c: 528: unsigned long val;
  4814                           ;doprnt.c: 529: unsigned len;
  4815                           ;doprnt.c: 530: const char * cp;
  4816                           ;doprnt.c: 533: *ap = __va_start();
  4817                           
  4818                           ; BSR set to: 0
  4819                           ;incstack = 0
  4820  0000B0  0EA1               	movlw	low (?_printf+2)
  4821  0000B2  0101               	movlb	1	; () banked
  4822  0000B4  6F05               	movwf	printf@ap& (0+255),b
  4823  0000B6  0E00               	movlw	high (?_printf+2)
  4824  0000B8  0101               	movlb	1	; () banked
  4825  0000BA  6F06               	movwf	(printf@ap+1)& (0+255),b
  4826                           
  4827                           ;doprnt.c: 536: while(c = *f++) {
  4828  0000BC  EFF4  F005         	goto	l8217
  4829  0000C0                     l7937:
  4830                           
  4831                           ; BSR set to: 1
  4832                           ;doprnt.c: 538: if(c != '%')
  4833  0000C0  0E25               	movlw	37
  4834  0000C2  0101               	movlb	1	; () banked
  4835  0000C4  191A               	xorwf	printf@c& (0+255),w,b
  4836  0000C6  B4D8               	btfsc	status,2,c
  4837  0000C8  D006               	goto	l7941
  4838                           
  4839                           ; BSR set to: 1
  4840                           ;doprnt.c: 540: {
  4841                           ;doprnt.c: 541: (putch(c) );
  4842  0000CA  0101               	movlb	1	; () banked
  4843  0000CC  511A               	movf	printf@c& (0+255),w,b
  4844  0000CE  EC85  F01F         	call	_putch
  4845                           
  4846                           ;doprnt.c: 542: continue;
  4847  0000D2  EFF4  F005         	goto	l8217
  4848  0000D6                     l7941:
  4849                           
  4850                           ;doprnt.c: 543: }
  4851                           ;doprnt.c: 546: width = 0;
  4852  0000D6  0E00               	movlw	0
  4853  0000D8  0101               	movlb	1	; () banked
  4854  0000DA  6F08               	movwf	(printf@width+1)& (0+255),b
  4855  0000DC  0E00               	movlw	0
  4856  0000DE  6F07               	movwf	printf@width& (0+255),b
  4857                           
  4858                           ;doprnt.c: 548: flag = 0;
  4859  0000E0  0E00               	movlw	0
  4860  0000E2  0101               	movlb	1	; () banked
  4861  0000E4  6F12               	movwf	(printf@flag+1)& (0+255),b
  4862  0000E6  0E00               	movlw	0
  4863  0000E8  6F11               	movwf	printf@flag& (0+255),b
  4864                           
  4865                           ; BSR set to: 1
  4866                           ;doprnt.c: 551: switch(*f) {
  4867                           
  4868                           ;doprnt.c: 550: for(;;) {
  4869  0000EA  D005               	goto	l7947
  4870  0000EC                     l7943:
  4871                           
  4872                           ;doprnt.c: 561: flag |= 0x01;
  4873  0000EC  0101               	movlb	1	; () banked
  4874  0000EE  8111               	bsf	printf@flag& (0+255),0,b
  4875                           
  4876                           ;doprnt.c: 562: f++;
  4877  0000F0  0100               	movlb	0	; () banked
  4878  0000F2  4B9F               	infsnz	printf@f& (0+255),f,b
  4879  0000F4  2BA0               	incf	(printf@f+1)& (0+255),f,b
  4880  0000F6                     l7947:
  4881  0000F6  C09F  FFF6         	movff	printf@f,tblptrl
  4882  0000FA  C0A0  FFF7         	movff	printf@f+1,tblptrh
  4883  0000FE                     	if	0	;tblptru may be non-zero
  4884  0000FE                     	endif
  4885  0000FE                     	if	0	;tblptru may be non-zero
  4886  0000FE                     	endif
  4887  0000FE  0008               	tblrd		*
  4888  000100  50F5               	movf	tablat,w,c
  4889                           
  4890                           ; Switch size 1, requested type "space"
  4891                           ; Number of cases is 1, Range of values is 32 to 32
  4892                           ; switch strategies available:
  4893                           ; Name         Instructions Cycles
  4894                           ; simple_byte            4     3 (average)
  4895                           ;	Chosen strategy is simple_byte
  4896  000102  0A20               	xorlw	32	; case 32
  4897  000104  B4D8               	btfsc	status,2,c
  4898  000106  D7F2               	goto	l7943
  4899                           
  4900                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4901                           
  4902                           ;doprnt.c: 586: }
  4903                           
  4904                           ;doprnt.c: 585: break;
  4905  000108  C09F  FFF6         	movff	printf@f,tblptrl
  4906  00010C  C0A0  FFF7         	movff	printf@f+1,tblptrh
  4907  000110                     	if	0	;tblptru may be non-zero
  4908  000110                     	endif
  4909  000110                     	if	0	;tblptru may be non-zero
  4910  000110                     	endif
  4911  000110  0008               	tblrd		*
  4912  000112  50F5               	movf	tablat,w,c
  4913  000114  EC24  F01F         	call	_isdigit
  4914  000118  A0D8               	btfss	status,0,c
  4915  00011A  D03F               	goto	l7961
  4916                           
  4917                           ;doprnt.c: 598: width = 0;
  4918  00011C  0E00               	movlw	0
  4919  00011E  0101               	movlb	1	; () banked
  4920  000120  6F08               	movwf	(printf@width+1)& (0+255),b
  4921  000122  0E00               	movlw	0
  4922  000124  6F07               	movwf	printf@width& (0+255),b
  4923  000126                     l7953:
  4924                           
  4925                           ;doprnt.c: 600: width *= 10;
  4926  000126  C107  F01D         	movff	printf@width,___wmul@multiplier
  4927  00012A  C108  F01E         	movff	printf@width+1,___wmul@multiplier+1
  4928  00012E  0E00               	movlw	0
  4929  000130  6E20               	movwf	___wmul@multiplicand+1,c
  4930  000132  0E0A               	movlw	10
  4931  000134  6E1F               	movwf	___wmul@multiplicand,c
  4932  000136  ECDB  F01E         	call	___wmul	;wreg free
  4933  00013A  C01D  F107         	movff	?___wmul,printf@width
  4934  00013E  C01E  F108         	movff	?___wmul+1,printf@width+1
  4935                           
  4936                           ;doprnt.c: 601: width += *f++ - '0';
  4937  000142  0ED0               	movlw	208
  4938  000144  0100               	movlb	0	; () banked
  4939  000146  6FA6               	movwf	??_printf& (0+255),b
  4940  000148  0EFF               	movlw	255
  4941  00014A  0100               	movlb	0	; () banked
  4942  00014C  6FA7               	movwf	(??_printf+1)& (0+255),b
  4943  00014E  C09F  FFF6         	movff	printf@f,tblptrl
  4944  000152  C0A0  FFF7         	movff	printf@f+1,tblptrh
  4945  000156                     	if	0	;tblptru may be non-zero
  4946  000156                     	endif
  4947  000156                     	if	0	;tblptru may be non-zero
  4948  000156                     	endif
  4949  000156  0008               	tblrd		*
  4950  000158  50F5               	movf	tablat,w,c
  4951  00015A  0100               	movlb	0	; () banked
  4952  00015C  6FA8               	movwf	(??_printf+2)& (0+255),b
  4953  00015E  6BA9               	clrf	(??_printf+3)& (0+255),b
  4954  000160  0100               	movlb	0	; () banked
  4955  000162  51A6               	movf	??_printf& (0+255),w,b
  4956  000164  0100               	movlb	0	; () banked
  4957  000166  27A8               	addwf	(??_printf+2)& (0+255),f,b
  4958  000168  0100               	movlb	0	; () banked
  4959  00016A  51A7               	movf	(??_printf+1)& (0+255),w,b
  4960  00016C  0100               	movlb	0	; () banked
  4961  00016E  23A9               	addwfc	(??_printf+3)& (0+255),f,b
  4962  000170  0100               	movlb	0	; () banked
  4963  000172  51A8               	movf	(??_printf+2)& (0+255),w,b
  4964  000174  0101               	movlb	1	; () banked
  4965  000176  2707               	addwf	printf@width& (0+255),f,b
  4966  000178  0100               	movlb	0	; () banked
  4967  00017A  51A9               	movf	(??_printf+3)& (0+255),w,b
  4968  00017C  0101               	movlb	1	; () banked
  4969  00017E  2308               	addwfc	(printf@width+1)& (0+255),f,b
  4970                           
  4971                           ; BSR set to: 1
  4972  000180  0100               	movlb	0	; () banked
  4973  000182  4B9F               	infsnz	printf@f& (0+255),f,b
  4974  000184  2BA0               	incf	(printf@f+1)& (0+255),f,b
  4975                           
  4976                           ; BSR set to: 0
  4977                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4978  000186  C09F  FFF6         	movff	printf@f,tblptrl
  4979  00018A  C0A0  FFF7         	movff	printf@f+1,tblptrh
  4980  00018E                     	if	0	;tblptru may be non-zero
  4981  00018E                     	endif
  4982  00018E                     	if	0	;tblptru may be non-zero
  4983  00018E                     	endif
  4984  00018E  0008               	tblrd		*
  4985  000190  50F5               	movf	tablat,w,c
  4986  000192  EC24  F01F         	call	_isdigit
  4987  000196  B0D8               	btfsc	status,0,c
  4988  000198  D7C6               	goto	l7953
  4989  00019A                     l7961:
  4990                           
  4991                           ;doprnt.c: 608: }
  4992                           ;doprnt.c: 611: if(*f == '.') {
  4993  00019A  C09F  FFF6         	movff	printf@f,tblptrl
  4994  00019E  C0A0  FFF7         	movff	printf@f+1,tblptrh
  4995  0001A2                     	if	0	;tblptru may be non-zero
  4996  0001A2                     	endif
  4997  0001A2                     	if	0	;tblptru may be non-zero
  4998  0001A2                     	endif
  4999  0001A2  0008               	tblrd		*
  5000  0001A4  50F5               	movf	tablat,w,c
  5001  0001A6  0A2E               	xorlw	46
  5002  0001A8  A4D8               	btfss	status,2,c
  5003  0001AA  D034               	goto	l7973
  5004                           
  5005                           ;doprnt.c: 612: flag |= 0x4000;
  5006  0001AC  0101               	movlb	1	; () banked
  5007  0001AE  8D12               	bsf	(printf@flag+1)& (0+255),6,b
  5008                           
  5009                           ;doprnt.c: 613: f++;
  5010  0001B0  0100               	movlb	0	; () banked
  5011  0001B2  4B9F               	infsnz	printf@f& (0+255),f,b
  5012  0001B4  2BA0               	incf	(printf@f+1)& (0+255),f,b
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;doprnt.c: 620: {
  5016                           ;doprnt.c: 621: prec = 0;
  5017  0001B6  0E00               	movlw	0
  5018  0001B8  0101               	movlb	1	; () banked
  5019  0001BA  6F19               	movwf	(printf@prec+1)& (0+255),b
  5020  0001BC  0E00               	movlw	0
  5021  0001BE  6F18               	movwf	printf@prec& (0+255),b
  5022                           
  5023                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5024  0001C0  D01E               	goto	l7971
  5025  0001C2                     l7967:
  5026                           
  5027                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5028  0001C2  C118  F01D         	movff	printf@prec,___wmul@multiplier
  5029  0001C6  C119  F01E         	movff	printf@prec+1,___wmul@multiplier+1
  5030  0001CA  0E00               	movlw	0
  5031  0001CC  6E20               	movwf	___wmul@multiplicand+1,c
  5032  0001CE  0E0A               	movlw	10
  5033  0001D0  6E1F               	movwf	___wmul@multiplicand,c
  5034  0001D2  ECDB  F01E         	call	___wmul	;wreg free
  5035  0001D6  C09F  FFF6         	movff	printf@f,tblptrl
  5036  0001DA  C0A0  FFF7         	movff	printf@f+1,tblptrh
  5037  0001DE                     	if	0	;tblptru may be non-zero
  5038  0001DE                     	endif
  5039  0001DE                     	if	0	;tblptru may be non-zero
  5040  0001DE                     	endif
  5041  0001DE  0008               	tblrd		*
  5042  0001E0  50F5               	movf	tablat,w,c
  5043  0001E2  261D               	addwf	?___wmul,f,c
  5044  0001E4  0E00               	movlw	0
  5045  0001E6  221E               	addwfc	?___wmul+1,f,c
  5046  0001E8  0ED0               	movlw	208
  5047  0001EA  241D               	addwf	?___wmul,w,c
  5048  0001EC  0101               	movlb	1	; () banked
  5049  0001EE  6F18               	movwf	printf@prec& (0+255),b
  5050  0001F0  0EFF               	movlw	255
  5051  0001F2  201E               	addwfc	?___wmul+1,w,c
  5052  0001F4  0101               	movlb	1	; () banked
  5053  0001F6  6F19               	movwf	(printf@prec+1)& (0+255),b
  5054                           
  5055                           ; BSR set to: 1
  5056  0001F8  0100               	movlb	0	; () banked
  5057  0001FA  4B9F               	infsnz	printf@f& (0+255),f,b
  5058  0001FC  2BA0               	incf	(printf@f+1)& (0+255),f,b
  5059  0001FE                     l7971:
  5060  0001FE  C09F  FFF6         	movff	printf@f,tblptrl
  5061  000202  C0A0  FFF7         	movff	printf@f+1,tblptrh
  5062  000206                     	if	0	;tblptru may be non-zero
  5063  000206                     	endif
  5064  000206                     	if	0	;tblptru may be non-zero
  5065  000206                     	endif
  5066  000206  0008               	tblrd		*
  5067  000208  50F5               	movf	tablat,w,c
  5068  00020A  EC24  F01F         	call	_isdigit
  5069  00020E  A0D8               	btfss	status,0,c
  5070  000210  D00C               	goto	l7981
  5071  000212  D7D7               	goto	l7967
  5072  000214                     l7973:
  5073                           
  5074                           ;doprnt.c: 626: prec = 0;
  5075  000214  0E00               	movlw	0
  5076  000216  0101               	movlb	1	; () banked
  5077  000218  6F19               	movwf	(printf@prec+1)& (0+255),b
  5078  00021A  0E00               	movlw	0
  5079  00021C  6F18               	movwf	printf@prec& (0+255),b
  5080                           
  5081                           ; BSR set to: 1
  5082                           ;doprnt.c: 628: flag |= 0x1000;
  5083  00021E  0101               	movlb	1	; () banked
  5084  000220  8912               	bsf	(printf@flag+1)& (0+255),4,b
  5085                           
  5086                           ; BSR set to: 1
  5087                           ;doprnt.c: 630: }
  5088                           ;doprnt.c: 635: switch(c = *f++) {
  5089  000222  D003               	goto	l7981
  5090  000224                     l7977:
  5091                           
  5092                           ; BSR set to: 1
  5093                           ;doprnt.c: 663: flag |= 0x400;
  5094  000224  0101               	movlb	1	; () banked
  5095  000226  8512               	bsf	(printf@flag+1)& (0+255),2,b
  5096                           
  5097                           ; BSR set to: 1
  5098                           ;doprnt.c: 698: case 'i':
  5099                           ;doprnt.c: 699: break;
  5100                           
  5101                           ; BSR set to: 1
  5102                           
  5103                           ;doprnt.c: 697: case 'd':
  5104                           
  5105                           ;doprnt.c: 664: break;
  5106  000228  D019               	goto	l7983
  5107  00022A                     l7981:
  5108  00022A  C09F  FFF6         	movff	printf@f,tblptrl
  5109  00022E  C0A0  FFF7         	movff	printf@f+1,tblptrh
  5110  000232  0100               	movlb	0	; () banked
  5111  000234  4B9F               	infsnz	printf@f& (0+255),f,b
  5112  000236  2BA0               	incf	(printf@f+1)& (0+255),f,b
  5113  000238                     	if	0	;tblptru may be non-zero
  5114  000238                     	endif
  5115  000238                     	if	0	;tblptru may be non-zero
  5116  000238                     	endif
  5117  000238  0008               	tblrd		*
  5118  00023A  CFF5 F11A          	movff	tablat,printf@c
  5119  00023E  0101               	movlb	1	; () banked
  5120  000240  511A               	movf	printf@c& (0+255),w,b
  5121                           
  5122                           ; Switch size 1, requested type "space"
  5123                           ; Number of cases is 4, Range of values is 0 to 105
  5124                           ; switch strategies available:
  5125                           ; Name         Instructions Cycles
  5126                           ; simple_byte           13     7 (average)
  5127                           ;	Chosen strategy is simple_byte
  5128  000242  0A00               	xorlw	0	; case 0
  5129  000244  B4D8               	btfsc	status,2,c
  5130  000246  0012               	return	
  5131  000248  0A64               	xorlw	100	; case 100
  5132  00024A  B4D8               	btfsc	status,2,c
  5133  00024C  D007               	goto	l7983
  5134  00024E  0A02               	xorlw	2	; case 102
  5135  000250  B4D8               	btfsc	status,2,c
  5136  000252  D7E8               	goto	l7977
  5137  000254  0A0F               	xorlw	15	; case 105
  5138  000256  A4D8               	btfss	status,2,c
  5139  000258  EFF4  F005         	goto	l8217
  5140  00025C                     l7983:
  5141                           
  5142                           ; BSR set to: 1
  5143                           ;doprnt.c: 825: if(flag & (0x700)) {
  5144  00025C  0E07               	movlw	7
  5145  00025E  0101               	movlb	1	; () banked
  5146  000260  1512               	andwf	(printf@flag+1)& (0+255),w,b
  5147  000262  B4D8               	btfsc	status,2,c
  5148  000264  D362               	goto	l8141
  5149                           
  5150                           ; BSR set to: 1
  5151                           ;doprnt.c: 827: if(flag & 0x1000)
  5152  000266  0101               	movlb	1	; () banked
  5153  000268  A912               	btfss	(printf@flag+1)& (0+255),4,b
  5154  00026A  D005               	goto	l7989
  5155                           
  5156                           ; BSR set to: 1
  5157                           ;doprnt.c: 829: prec = 6;
  5158  00026C  0E00               	movlw	0
  5159  00026E  0101               	movlb	1	; () banked
  5160  000270  6F19               	movwf	(printf@prec+1)& (0+255),b
  5161  000272  0E06               	movlw	6
  5162  000274  6F18               	movwf	printf@prec& (0+255),b
  5163  000276                     l7989:
  5164                           
  5165                           ; BSR set to: 1
  5166                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5167  000276  C105  FFD9         	movff	printf@ap,fsr2l
  5168  00027A  C106  FFDA         	movff	printf@ap+1,fsr2h
  5169  00027E  CFDE F115          	movff	postinc2,printf@fval
  5170  000282  CFDE F116          	movff	postinc2,printf@fval+1
  5171  000286  CFDD F117          	movff	postdec2,printf@fval+2
  5172                           
  5173                           ; BSR set to: 1
  5174  00028A  0E03               	movlw	3
  5175  00028C  0101               	movlb	1	; () banked
  5176  00028E  2705               	addwf	printf@ap& (0+255),f,b
  5177  000290  0E00               	movlw	0
  5178  000292  2306               	addwfc	(printf@ap+1)& (0+255),f,b
  5179                           
  5180                           ; BSR set to: 1
  5181                           ;doprnt.c: 831: if(fval < 0.0) {
  5182  000294  0101               	movlb	1	; () banked
  5183  000296  AF17               	btfss	(printf@fval+2)& (0+255),7,b
  5184  000298  D011               	goto	l7999
  5185                           
  5186                           ; BSR set to: 1
  5187                           ;doprnt.c: 832: fval = -fval;
  5188  00029A  C115  F00F         	movff	printf@fval,___ftneg@f1
  5189  00029E  C116  F010         	movff	printf@fval+1,___ftneg@f1+1
  5190  0002A2  C117  F011         	movff	printf@fval+2,___ftneg@f1+2
  5191  0002A6  EC00  F01F         	call	___ftneg	;wreg free
  5192  0002AA  C00F  F115         	movff	?___ftneg,printf@fval
  5193  0002AE  C010  F116         	movff	?___ftneg+1,printf@fval+1
  5194  0002B2  C011  F117         	movff	?___ftneg+2,printf@fval+2
  5195                           
  5196                           ;doprnt.c: 833: flag |= 0x03;
  5197  0002B6  0E03               	movlw	3
  5198  0002B8  0101               	movlb	1	; () banked
  5199  0002BA  1311               	iorwf	printf@flag& (0+255),f,b
  5200  0002BC                     l7999:
  5201                           
  5202                           ; BSR set to: 1
  5203                           ;doprnt.c: 834: }
  5204                           ;doprnt.c: 835: exp = 0;
  5205  0002BC  0E00               	movlw	0
  5206  0002BE  0101               	movlb	1	; () banked
  5207  0002C0  6F14               	movwf	(printf@exp+1)& (0+255),b
  5208  0002C2  0E00               	movlw	0
  5209  0002C4  6F13               	movwf	printf@exp& (0+255),b
  5210                           
  5211                           ; BSR set to: 1
  5212                           ;doprnt.c: 836: if( fval!=0) {
  5213  0002C6  0101               	movlb	1	; () banked
  5214  0002C8  5115               	movf	printf@fval& (0+255),w,b
  5215  0002CA  0101               	movlb	1	; () banked
  5216  0002CC  1116               	iorwf	(printf@fval+1)& (0+255),w,b
  5217  0002CE  0101               	movlb	1	; () banked
  5218  0002D0  1117               	iorwf	(printf@fval+2)& (0+255),w,b
  5219  0002D2  B4D8               	btfsc	status,2,c
  5220  0002D4  D099               	goto	l8027
  5221                           
  5222                           ; BSR set to: 1
  5223                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5224  0002D6  0E82               	movlw	130
  5225  0002D8  0100               	movlb	0	; () banked
  5226  0002DA  6FA6               	movwf	??_printf& (0+255),b
  5227  0002DC  0EFF               	movlw	255
  5228  0002DE  0100               	movlb	0	; () banked
  5229  0002E0  6FA7               	movwf	(??_printf+1)& (0+255),b
  5230  0002E2  C115  F0A8         	movff	printf@fval,??_printf+2
  5231  0002E6  C116  F0A9         	movff	printf@fval+1,??_printf+3
  5232  0002EA  C117  F0AA         	movff	printf@fval+2,??_printf+4
  5233  0002EE  C118  F0AB         	movff	printf@fval+3,??_printf+5
  5234  0002F2  0E10               	movlw	16
  5235  0002F4  D006               	goto	u8150
  5236  0002F6                     u8155:
  5237  0002F6  0100               	movlb	0	; () banked
  5238  0002F8  90D8               	bcf	status,0,c
  5239  0002FA  33AB               	rrcf	(??_printf+5)& (0+255),f,b
  5240  0002FC  33AA               	rrcf	(??_printf+4)& (0+255),f,b
  5241  0002FE  33A9               	rrcf	(??_printf+3)& (0+255),f,b
  5242  000300  33A8               	rrcf	(??_printf+2)& (0+255),f,b
  5243  000302                     u8150:
  5244  000302  2EE8               	decfsz	wreg,f,c
  5245  000304  D7F8               	goto	u8155
  5246  000306  0100               	movlb	0	; () banked
  5247  000308  51A8               	movf	(??_printf+2)& (0+255),w,b
  5248  00030A  0100               	movlb	0	; () banked
  5249  00030C  25A6               	addwf	??_printf& (0+255),w,b
  5250  00030E  0101               	movlb	1	; () banked
  5251  000310  6F13               	movwf	printf@exp& (0+255),b
  5252  000312  0E00               	movlw	0
  5253  000314  0100               	movlb	0	; () banked
  5254  000316  21A7               	addwfc	(??_printf+1)& (0+255),w,b
  5255  000318  0101               	movlb	1	; () banked
  5256  00031A  6F14               	movwf	(printf@exp+1)& (0+255),b
  5257                           
  5258                           ; BSR set to: 1
  5259                           ;doprnt.c: 838: exp--;
  5260  00031C  0101               	movlb	1	; () banked
  5261  00031E  0713               	decf	printf@exp& (0+255),f,b
  5262  000320  A0D8               	btfss	status,0,c
  5263  000322  0714               	decf	(printf@exp+1)& (0+255),f,b
  5264                           
  5265                           ; BSR set to: 1
  5266                           ;doprnt.c: 839: exp *= 3;
  5267  000324  C113  F01D         	movff	printf@exp,___wmul@multiplier
  5268  000328  C114  F01E         	movff	printf@exp+1,___wmul@multiplier+1
  5269  00032C  0E00               	movlw	0
  5270  00032E  6E20               	movwf	___wmul@multiplicand+1,c
  5271  000330  0E03               	movlw	3
  5272  000332  6E1F               	movwf	___wmul@multiplicand,c
  5273  000334  ECDB  F01E         	call	___wmul	;wreg free
  5274  000338  C01D  F113         	movff	?___wmul,printf@exp
  5275  00033C  C01E  F114         	movff	?___wmul+1,printf@exp+1
  5276                           
  5277                           ;doprnt.c: 840: exp /= 10;
  5278  000340  C113  F015         	movff	printf@exp,___awdiv@dividend
  5279  000344  C114  F016         	movff	printf@exp+1,___awdiv@dividend+1
  5280  000348  0E00               	movlw	0
  5281  00034A  6E18               	movwf	___awdiv@divisor+1,c
  5282  00034C  0E0A               	movlw	10
  5283  00034E  6E17               	movwf	___awdiv@divisor,c
  5284  000350  EC6B  F01A         	call	___awdiv	;wreg free
  5285  000354  C015  F113         	movff	?___awdiv,printf@exp
  5286  000358  C016  F114         	movff	?___awdiv+1,printf@exp+1
  5287                           
  5288                           ;doprnt.c: 841: if(exp < 0)
  5289  00035C  0101               	movlb	1	; () banked
  5290  00035E  AF14               	btfss	(printf@exp+1)& (0+255),7,b
  5291  000360  D004               	goto	l8015
  5292                           
  5293                           ; BSR set to: 1
  5294                           ;doprnt.c: 842: exp--;
  5295  000362  0101               	movlb	1	; () banked
  5296  000364  0713               	decf	printf@exp& (0+255),f,b
  5297  000366  A0D8               	btfss	status,0,c
  5298  000368  0714               	decf	(printf@exp+1)& (0+255),f,b
  5299  00036A                     l8015:
  5300                           
  5301                           ; BSR set to: 1
  5302                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5303  00036A  0101               	movlb	1	; () banked
  5304  00036C  5113               	movf	printf@exp& (0+255),w,b
  5305  00036E  0800               	sublw	0
  5306  000370  ECAF  F008         	call	_scale
  5307  000374  C060  F109         	movff	?_scale,printf@tmpval
  5308  000378  C061  F10A         	movff	?_scale+1,printf@tmpval+1
  5309  00037C  C062  F10B         	movff	?_scale+2,printf@tmpval+2
  5310                           
  5311                           ;doprnt.c: 847: tmpval.integ *= fval;
  5312  000380  C109  F032         	movff	printf@tmpval,___ftmul@f1
  5313  000384  C10A  F033         	movff	printf@tmpval+1,___ftmul@f1+1
  5314  000388  C10B  F034         	movff	printf@tmpval+2,___ftmul@f1+2
  5315  00038C  C115  F035         	movff	printf@fval,___ftmul@f2
  5316  000390  C116  F036         	movff	printf@fval+1,___ftmul@f2+1
  5317  000394  C117  F037         	movff	printf@fval+2,___ftmul@f2+2
  5318  000398  EC5B  F016         	call	___ftmul	;wreg free
  5319  00039C  C032  F109         	movff	?___ftmul,printf@tmpval
  5320  0003A0  C033  F10A         	movff	?___ftmul+1,printf@tmpval+1
  5321  0003A4  C034  F10B         	movff	?___ftmul+2,printf@tmpval+2
  5322                           
  5323                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5324  0003A8  C109  F096         	movff	printf@tmpval,___ftge@ff1
  5325  0003AC  C10A  F097         	movff	printf@tmpval+1,___ftge@ff1+1
  5326  0003B0  C10B  F098         	movff	printf@tmpval+2,___ftge@ff1+2
  5327  0003B4  0E00               	movlw	0
  5328  0003B6  0100               	movlb	0	; () banked
  5329  0003B8  6F99               	movwf	___ftge@ff2& (0+255),b
  5330  0003BA  0E80               	movlw	128
  5331  0003BC  0100               	movlb	0	; () banked
  5332  0003BE  6F9A               	movwf	(___ftge@ff2+1)& (0+255),b
  5333  0003C0  0E3F               	movlw	63
  5334  0003C2  0100               	movlb	0	; () banked
  5335  0003C4  6F9B               	movwf	(___ftge@ff2+2)& (0+255),b
  5336  0003C6  EC87  F018         	call	___ftge	;wreg free
  5337  0003CA  0100               	movlb	0	; () banked
  5338  0003CC  B0D8               	btfsc	status,0,c
  5339  0003CE  D005               	goto	l8023
  5340                           
  5341                           ; BSR set to: 0
  5342                           ;doprnt.c: 849: exp--;
  5343  0003D0  0101               	movlb	1	; () banked
  5344  0003D2  0713               	decf	printf@exp& (0+255),f,b
  5345  0003D4  A0D8               	btfss	status,0,c
  5346  0003D6  0714               	decf	(printf@exp+1)& (0+255),f,b
  5347  0003D8  D017               	goto	l8027
  5348  0003DA                     l8023:
  5349                           
  5350                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5351  0003DA  C109  F096         	movff	printf@tmpval,___ftge@ff1
  5352  0003DE  C10A  F097         	movff	printf@tmpval+1,___ftge@ff1+1
  5353  0003E2  C10B  F098         	movff	printf@tmpval+2,___ftge@ff1+2
  5354  0003E6  0E00               	movlw	0
  5355  0003E8  0100               	movlb	0	; () banked
  5356  0003EA  6F99               	movwf	___ftge@ff2& (0+255),b
  5357  0003EC  0E20               	movlw	32
  5358  0003EE  0100               	movlb	0	; () banked
  5359  0003F0  6F9A               	movwf	(___ftge@ff2+1)& (0+255),b
  5360  0003F2  0E41               	movlw	65
  5361  0003F4  0100               	movlb	0	; () banked
  5362  0003F6  6F9B               	movwf	(___ftge@ff2+2)& (0+255),b
  5363  0003F8  EC87  F018         	call	___ftge	;wreg free
  5364  0003FC  0100               	movlb	0	; () banked
  5365  0003FE  A0D8               	btfss	status,0,c
  5366  000400  D003               	goto	l8027
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;doprnt.c: 851: exp++;
  5370  000402  0101               	movlb	1	; () banked
  5371  000404  4B13               	infsnz	printf@exp& (0+255),f,b
  5372  000406  2B14               	incf	(printf@exp+1)& (0+255),f,b
  5373  000408                     l8027:
  5374                           
  5375                           ;doprnt.c: 852: }
  5376                           ;doprnt.c: 1112: if(prec <= 12)
  5377  000408  0101               	movlb	1	; () banked
  5378  00040A  BF19               	btfsc	(printf@prec+1)& (0+255),7,b
  5379  00040C  D008               	goto	l8029
  5380  00040E  0101               	movlb	1	; () banked
  5381  000410  5119               	movf	(printf@prec+1)& (0+255),w,b
  5382  000412  E11D               	bnz	l8031
  5383  000414  0E0D               	movlw	13
  5384  000416  0101               	movlb	1	; () banked
  5385  000418  5D18               	subwf	printf@prec& (0+255),w,b
  5386  00041A  B0D8               	btfsc	status,0,c
  5387  00041C  D018               	goto	l8031
  5388  00041E                     l8029:
  5389                           
  5390                           ; BSR set to: 1
  5391                           ;doprnt.c: 1113: fval += fround(prec);
  5392  00041E  C115  F06A         	movff	printf@fval,___ftadd@f1
  5393  000422  C116  F06B         	movff	printf@fval+1,___ftadd@f1+1
  5394  000426  C117  F06C         	movff	printf@fval+2,___ftadd@f1+2
  5395  00042A  0101               	movlb	1	; () banked
  5396  00042C  5118               	movf	printf@prec& (0+255),w,b
  5397  00042E  ECF1  F00E         	call	_fround
  5398  000432  C060  F06D         	movff	?_fround,___ftadd@f2
  5399  000436  C061  F06E         	movff	?_fround+1,___ftadd@f2+1
  5400  00043A  C062  F06F         	movff	?_fround+2,___ftadd@f2+2
  5401  00043E  ECBD  F00D         	call	___ftadd	;wreg free
  5402  000442  C06A  F115         	movff	?___ftadd,printf@fval
  5403  000446  C06B  F116         	movff	?___ftadd+1,printf@fval+1
  5404  00044A  C06C  F117         	movff	?___ftadd+2,printf@fval+2
  5405  00044E                     l8031:
  5406                           
  5407                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5408  00044E  0101               	movlb	1	; () banked
  5409  000450  BF14               	btfsc	(printf@exp+1)& (0+255),7,b
  5410  000452  D008               	goto	l8033
  5411  000454  0101               	movlb	1	; () banked
  5412  000456  5114               	movf	(printf@exp+1)& (0+255),w,b
  5413  000458  E12A               	bnz	l8039
  5414  00045A  0E0A               	movlw	10
  5415  00045C  0101               	movlb	1	; () banked
  5416  00045E  5D13               	subwf	printf@exp& (0+255),w,b
  5417  000460  B0D8               	btfsc	status,0,c
  5418  000462  D025               	goto	l8039
  5419  000464                     l8033:
  5420                           
  5421                           ; BSR set to: 1
  5422  000464  0101               	movlb	1	; () banked
  5423  000466  5115               	movf	printf@fval& (0+255),w,b
  5424  000468  0101               	movlb	1	; () banked
  5425  00046A  1116               	iorwf	(printf@fval+1)& (0+255),w,b
  5426  00046C  0101               	movlb	1	; () banked
  5427  00046E  1117               	iorwf	(printf@fval+2)& (0+255),w,b
  5428  000470  B4D8               	btfsc	status,2,c
  5429  000472  D063               	goto	l8053
  5430                           
  5431                           ; BSR set to: 1
  5432  000474  C115  F076         	movff	printf@fval,___fttol@f1
  5433  000478  C116  F077         	movff	printf@fval+1,___fttol@f1+1
  5434  00047C  C117  F078         	movff	printf@fval+2,___fttol@f1+2
  5435  000480  ECC0  F012         	call	___fttol	;wreg free
  5436  000484  0100               	movlb	0	; () banked
  5437  000486  5176               	movf	?___fttol& (0+255),w,b
  5438  000488  0100               	movlb	0	; () banked
  5439  00048A  1177               	iorwf	(?___fttol+1)& (0+255),w,b
  5440  00048C  0100               	movlb	0	; () banked
  5441  00048E  1178               	iorwf	(?___fttol+2)& (0+255),w,b
  5442  000490  0100               	movlb	0	; () banked
  5443  000492  1179               	iorwf	(?___fttol+3)& (0+255),w,b
  5444  000494  A4D8               	btfss	status,2,c
  5445  000496  D051               	goto	l8053
  5446                           
  5447                           ; BSR set to: 0
  5448  000498  0101               	movlb	1	; () banked
  5449  00049A  BF14               	btfsc	(printf@exp+1)& (0+255),7,b
  5450  00049C  D04E               	goto	l8053
  5451  00049E  0101               	movlb	1	; () banked
  5452  0004A0  5114               	movf	(printf@exp+1)& (0+255),w,b
  5453  0004A2  E105               	bnz	l8039
  5454  0004A4  0E02               	movlw	2
  5455  0004A6  0101               	movlb	1	; () banked
  5456  0004A8  5D13               	subwf	printf@exp& (0+255),w,b
  5457  0004AA  A0D8               	btfss	status,0,c
  5458  0004AC  D046               	goto	l8053
  5459  0004AE                     l8039:
  5460                           
  5461                           ; BSR set to: 1
  5462                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5463  0004AE  C109  F096         	movff	printf@tmpval,___ftge@ff1
  5464  0004B2  C10A  F097         	movff	printf@tmpval+1,___ftge@ff1+1
  5465  0004B6  C10B  F098         	movff	printf@tmpval+2,___ftge@ff1+2
  5466  0004BA  0E70               	movlw	112
  5467  0004BC  0100               	movlb	0	; () banked
  5468  0004BE  6F99               	movwf	___ftge@ff2& (0+255),b
  5469  0004C0  0E89               	movlw	137
  5470  0004C2  0100               	movlb	0	; () banked
  5471  0004C4  6F9A               	movwf	(___ftge@ff2+1)& (0+255),b
  5472  0004C6  0E40               	movlw	64
  5473  0004C8  0100               	movlb	0	; () banked
  5474  0004CA  6F9B               	movwf	(___ftge@ff2+2)& (0+255),b
  5475  0004CC  EC87  F018         	call	___ftge	;wreg free
  5476  0004D0  0100               	movlb	0	; () banked
  5477  0004D2  B0D8               	btfsc	status,0,c
  5478  0004D4  D003               	goto	l8043
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5482  0004D6  0101               	movlb	1	; () banked
  5483  0004D8  0EF7               	movlw	247
  5484  0004DA  D002               	goto	L4
  5485  0004DC                     l8043:
  5486                           
  5487                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5488  0004DC  0101               	movlb	1	; () banked
  5489  0004DE  0EF8               	movlw	248
  5490  0004E0                     L4:
  5491  0004E0  2713               	addwf	printf@exp& (0+255),f,b
  5492  0004E2  0EFF               	movlw	255
  5493  0004E4  2314               	addwfc	(printf@exp+1)& (0+255),f,b
  5494                           
  5495                           ; BSR set to: 1
  5496                           ;doprnt.c: 1124: }
  5497                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5498                           
  5499                           ; BSR set to: 1
  5500  0004E6  0101               	movlb	1	; () banked
  5501  0004E8  5113               	movf	printf@exp& (0+255),w,b
  5502  0004EA  ECAF  F008         	call	_scale
  5503  0004EE  C060  F109         	movff	?_scale,printf@tmpval
  5504  0004F2  C061  F10A         	movff	?_scale+1,printf@tmpval+1
  5505  0004F6  C062  F10B         	movff	?_scale+2,printf@tmpval+2
  5506                           
  5507                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5508  0004FA  C115  F00F         	movff	printf@fval,__tdiv_to_l_@f1
  5509  0004FE  C116  F010         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  5510  000502  C117  F011         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  5511  000506  C109  F012         	movff	printf@tmpval,__tdiv_to_l_@f2
  5512  00050A  C10A  F013         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  5513  00050E  C10B  F014         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  5514  000512  EC9E  F014         	call	__tdiv_to_l_	;wreg free
  5515  000516  C00F  F10D         	movff	?__tdiv_to_l_,printf@val
  5516  00051A  C010  F10E         	movff	?__tdiv_to_l_+1,printf@val+1
  5517  00051E  C011  F10F         	movff	?__tdiv_to_l_+2,printf@val+2
  5518  000522  C012  F110         	movff	?__tdiv_to_l_+3,printf@val+3
  5519                           
  5520                           ;doprnt.c: 1129: fval = 0.0;
  5521  000526  0E00               	movlw	0
  5522  000528  0101               	movlb	1	; () banked
  5523  00052A  6F15               	movwf	printf@fval& (0+255),b
  5524  00052C  0E00               	movlw	0
  5525  00052E  0101               	movlb	1	; () banked
  5526  000530  6F16               	movwf	(printf@fval+1)& (0+255),b
  5527  000532  0E00               	movlw	0
  5528  000534  0101               	movlb	1	; () banked
  5529  000536  6F17               	movwf	(printf@fval+2)& (0+255),b
  5530                           
  5531                           ;doprnt.c: 1130: } else {
  5532  000538  D033               	goto	l8057
  5533  00053A                     l8053:
  5534                           
  5535                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5536  00053A  C115  F076         	movff	printf@fval,___fttol@f1
  5537  00053E  C116  F077         	movff	printf@fval+1,___fttol@f1+1
  5538  000542  C117  F078         	movff	printf@fval+2,___fttol@f1+2
  5539  000546  ECC0  F012         	call	___fttol	;wreg free
  5540  00054A  C076  F10D         	movff	?___fttol,printf@val
  5541  00054E  C077  F10E         	movff	?___fttol+1,printf@val+1
  5542  000552  C078  F10F         	movff	?___fttol+2,printf@val+2
  5543  000556  C079  F110         	movff	?___fttol+3,printf@val+3
  5544                           
  5545                           ;doprnt.c: 1132: fval -= (double)val;
  5546  00055A  C115  F076         	movff	printf@fval,___ftsub@f1
  5547  00055E  C116  F077         	movff	printf@fval+1,___ftsub@f1+1
  5548  000562  C117  F078         	movff	printf@fval+2,___ftsub@f1+2
  5549  000566  C10D  F017         	movff	printf@val,___lltoft@c
  5550  00056A  C10E  F018         	movff	printf@val+1,___lltoft@c+1
  5551  00056E  C10F  F019         	movff	printf@val+2,___lltoft@c+2
  5552  000572  C110  F01A         	movff	printf@val+3,___lltoft@c+3
  5553  000576  ECBC  F01C         	call	___lltoft	;wreg free
  5554  00057A  C017  F079         	movff	?___lltoft,___ftsub@f2
  5555  00057E  C018  F07A         	movff	?___lltoft+1,___ftsub@f2+1
  5556  000582  C019  F07B         	movff	?___lltoft+2,___ftsub@f2+2
  5557  000586  ECEA  F01C         	call	___ftsub	;wreg free
  5558  00058A  C076  F115         	movff	?___ftsub,printf@fval
  5559  00058E  C077  F116         	movff	?___ftsub+1,printf@fval+1
  5560  000592  C078  F117         	movff	?___ftsub+2,printf@fval+2
  5561                           
  5562                           ;doprnt.c: 1133: exp = 0;
  5563  000596  0E00               	movlw	0
  5564  000598  0101               	movlb	1	; () banked
  5565  00059A  6F14               	movwf	(printf@exp+1)& (0+255),b
  5566  00059C  0E00               	movlw	0
  5567  00059E  6F13               	movwf	printf@exp& (0+255),b
  5568  0005A0                     l8057:
  5569                           
  5570                           ; BSR set to: 1
  5571                           ;doprnt.c: 1134: }
  5572                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5573  0005A0  0E01               	movlw	1
  5574  0005A2  0101               	movlb	1	; () banked
  5575  0005A4  6F1A               	movwf	printf@c& (0+255),b
  5576  0005A6                     l8059:
  5577                           
  5578                           ; BSR set to: 1
  5579  0005A6  0E0A               	movlw	10
  5580  0005A8  0101               	movlb	1	; () banked
  5581  0005AA  191A               	xorwf	printf@c& (0+255),w,b
  5582  0005AC  B4D8               	btfsc	status,2,c
  5583  0005AE  D01E               	goto	l8071
  5584                           
  5585                           ; BSR set to: 1
  5586                           ;doprnt.c: 1137: if(val < dpowers[c])
  5587                           
  5588                           ; BSR set to: 1
  5589                           
  5590                           ; BSR set to: 1
  5591  0005B0  0101               	movlb	1	; () banked
  5592  0005B2  511A               	movf	printf@c& (0+255),w,b
  5593  0005B4  0D04               	mullw	4
  5594  0005B6  0EF3               	movlw	low _dpowers
  5595  0005B8  24F3               	addwf	prodl,w,c
  5596  0005BA  6EF6               	movwf	tblptrl,c
  5597  0005BC  0E7E               	movlw	high _dpowers
  5598  0005BE  20F4               	addwfc	prodh,w,c
  5599  0005C0  6EF7               	movwf	tblptrh,c
  5600  0005C2                     	if	0	;There are less than 3 active tblptr bytes
  5601  0005C2                     	endif
  5602  0005C2  0009               	tblrd		*+
  5603  0005C4  50F5               	movf	tablat,w,c
  5604  0005C6  0101               	movlb	1	; () banked
  5605  0005C8  5D0D               	subwf	printf@val& (0+255),w,b
  5606  0005CA  0009               	tblrd		*+
  5607  0005CC  50F5               	movf	tablat,w,c
  5608  0005CE  0101               	movlb	1	; () banked
  5609  0005D0  590E               	subwfb	(printf@val+1)& (0+255),w,b
  5610  0005D2  0009               	tblrd		*+
  5611  0005D4  50F5               	movf	tablat,w,c
  5612  0005D6  0101               	movlb	1	; () banked
  5613  0005D8  590F               	subwfb	(printf@val+2)& (0+255),w,b
  5614  0005DA  0009               	tblrd		*+
  5615  0005DC  50F5               	movf	tablat,w,c
  5616  0005DE  0101               	movlb	1	; () banked
  5617  0005E0  5910               	subwfb	(printf@val+3)& (0+255),w,b
  5618  0005E2  A0D8               	btfss	status,0,c
  5619  0005E4  D003               	goto	l8071
  5620                           
  5621                           ; BSR set to: 1
  5622                           
  5623                           ; BSR set to: 1
  5624                           
  5625                           ; BSR set to: 1
  5626                           ;doprnt.c: 1138: break;
  5627  0005E6  0101               	movlb	1	; () banked
  5628  0005E8  2B1A               	incf	printf@c& (0+255),f,b
  5629  0005EA  D7DD               	goto	l8059
  5630  0005EC                     l8071:
  5631                           
  5632                           ; BSR set to: 1
  5633                           ;doprnt.c: 1142: width -= prec + c + exp;
  5634  0005EC  C11A  F0A6         	movff	printf@c,??_printf
  5635  0005F0  0100               	movlb	0	; () banked
  5636  0005F2  6BA7               	clrf	(??_printf+1)& (0+255),b
  5637  0005F4  BFA6               	btfsc	??_printf& (0+255),7,b
  5638  0005F6  07A7               	decf	(??_printf+1)& (0+255),f,b
  5639  0005F8  0101               	movlb	1	; () banked
  5640  0005FA  5118               	movf	printf@prec& (0+255),w,b
  5641  0005FC  0100               	movlb	0	; () banked
  5642  0005FE  27A6               	addwf	??_printf& (0+255),f,b
  5643  000600  0101               	movlb	1	; () banked
  5644  000602  5119               	movf	(printf@prec+1)& (0+255),w,b
  5645  000604  0100               	movlb	0	; () banked
  5646  000606  23A7               	addwfc	(??_printf+1)& (0+255),f,b
  5647  000608  0101               	movlb	1	; () banked
  5648  00060A  5113               	movf	printf@exp& (0+255),w,b
  5649  00060C  0100               	movlb	0	; () banked
  5650  00060E  27A6               	addwf	??_printf& (0+255),f,b
  5651  000610  0101               	movlb	1	; () banked
  5652  000612  5114               	movf	(printf@exp+1)& (0+255),w,b
  5653  000614  0100               	movlb	0	; () banked
  5654  000616  23A7               	addwfc	(??_printf+1)& (0+255),f,b
  5655  000618  0100               	movlb	0	; () banked
  5656  00061A  51A6               	movf	??_printf& (0+255),w,b
  5657  00061C  0101               	movlb	1	; () banked
  5658  00061E  5F07               	subwf	printf@width& (0+255),f,b
  5659  000620  0100               	movlb	0	; () banked
  5660  000622  51A7               	movf	(??_printf+1)& (0+255),w,b
  5661  000624  0101               	movlb	1	; () banked
  5662  000626  5B08               	subwfb	(printf@width+1)& (0+255),f,b
  5663                           
  5664                           ;doprnt.c: 1143: if(
  5665                           ;doprnt.c: 1147: prec)
  5666  000628  0101               	movlb	1	; () banked
  5667  00062A  5118               	movf	printf@prec& (0+255),w,b
  5668  00062C  0101               	movlb	1	; () banked
  5669  00062E  1119               	iorwf	(printf@prec+1)& (0+255),w,b
  5670  000630  B4D8               	btfsc	status,2,c
  5671  000632  D004               	goto	l8075
  5672                           
  5673                           ; BSR set to: 1
  5674                           ;doprnt.c: 1148: width--;
  5675  000634  0101               	movlb	1	; () banked
  5676  000636  0707               	decf	printf@width& (0+255),f,b
  5677  000638  A0D8               	btfss	status,0,c
  5678  00063A  0708               	decf	(printf@width+1)& (0+255),f,b
  5679  00063C                     l8075:
  5680                           
  5681                           ; BSR set to: 1
  5682                           ;doprnt.c: 1149: if(flag & 0x03)
  5683  00063C  0E03               	movlw	3
  5684  00063E  0101               	movlb	1	; () banked
  5685  000640  1511               	andwf	printf@flag& (0+255),w,b
  5686  000642  0100               	movlb	0	; () banked
  5687  000644  6FA6               	movwf	??_printf& (0+255),b
  5688  000646  0E00               	movlw	0
  5689  000648  0101               	movlb	1	; () banked
  5690  00064A  1512               	andwf	(printf@flag+1)& (0+255),w,b
  5691  00064C  0100               	movlb	0	; () banked
  5692  00064E  6FA7               	movwf	(??_printf+1)& (0+255),b
  5693  000650  0100               	movlb	0	; () banked
  5694  000652  51A6               	movf	??_printf& (0+255),w,b
  5695  000654  0100               	movlb	0	; () banked
  5696  000656  11A7               	iorwf	(??_printf+1)& (0+255),w,b
  5697  000658  B4D8               	btfsc	status,2,c
  5698  00065A  D008               	goto	l8083
  5699  00065C  D003               	goto	l8081
  5700  00065E                     l8079:
  5701                           
  5702                           ; BSR set to: 1
  5703                           ;doprnt.c: 1181: (putch(' ') );
  5704  00065E  0E20               	movlw	32
  5705  000660  EC85  F01F         	call	_putch
  5706  000664                     l8081:
  5707                           
  5708                           ;doprnt.c: 1182: width--;
  5709  000664  0101               	movlb	1	; () banked
  5710  000666  0707               	decf	printf@width& (0+255),f,b
  5711  000668  A0D8               	btfss	status,0,c
  5712  00066A  0708               	decf	(printf@width+1)& (0+255),f,b
  5713  00066C                     l8083:
  5714  00066C  0101               	movlb	1	; () banked
  5715  00066E  BF08               	btfsc	(printf@width+1)& (0+255),7,b
  5716  000670  D007               	goto	l8085
  5717  000672  0101               	movlb	1	; () banked
  5718  000674  5108               	movf	(printf@width+1)& (0+255),w,b
  5719  000676  E1F3               	bnz	l8079
  5720  000678  0101               	movlb	1	; () banked
  5721  00067A  0507               	decf	printf@width& (0+255),w,b
  5722  00067C  B0D8               	btfsc	status,0,c
  5723  00067E  D7EF               	goto	l8079
  5724  000680                     l8085:
  5725                           
  5726                           ; BSR set to: 1
  5727                           ;doprnt.c: 1183: }
  5728                           ;doprnt.c: 1188: if(flag & 0x03)
  5729  000680  0E03               	movlw	3
  5730  000682  0101               	movlb	1	; () banked
  5731  000684  1511               	andwf	printf@flag& (0+255),w,b
  5732  000686  0100               	movlb	0	; () banked
  5733  000688  6FA6               	movwf	??_printf& (0+255),b
  5734  00068A  0E00               	movlw	0
  5735  00068C  0101               	movlb	1	; () banked
  5736  00068E  1512               	andwf	(printf@flag+1)& (0+255),w,b
  5737  000690  0100               	movlb	0	; () banked
  5738  000692  6FA7               	movwf	(??_printf+1)& (0+255),b
  5739  000694  0100               	movlb	0	; () banked
  5740  000696  51A6               	movf	??_printf& (0+255),w,b
  5741  000698  0100               	movlb	0	; () banked
  5742  00069A  11A7               	iorwf	(??_printf+1)& (0+255),w,b
  5743  00069C  B4D8               	btfsc	status,2,c
  5744  00069E  D012               	goto	l1089
  5745                           
  5746                           ; BSR set to: 0
  5747                           ;doprnt.c: 1190: (putch(flag & 0x01 ? '-' : '+') );
  5748  0006A0  0101               	movlb	1	; () banked
  5749  0006A2  B111               	btfsc	printf@flag& (0+255),0,b
  5750  0006A4  D005               	goto	l8091
  5751                           
  5752                           ; BSR set to: 1
  5753  0006A6  0E00               	movlw	0
  5754  0006A8  0101               	movlb	1	; () banked
  5755  0006AA  6F04               	movwf	(_printf$1949+1)& (0+255),b
  5756  0006AC  0E2B               	movlw	43
  5757  0006AE  D004               	goto	L5
  5758  0006B0                     l8091:
  5759                           
  5760                           ; BSR set to: 1
  5761  0006B0  0E00               	movlw	0
  5762  0006B2  0101               	movlb	1	; () banked
  5763  0006B4  6F04               	movwf	(_printf$1949+1)& (0+255),b
  5764  0006B6  0E2D               	movlw	45
  5765  0006B8                     L5:
  5766  0006B8  6F03               	movwf	_printf$1949& (0+255),b
  5767                           
  5768                           ; BSR set to: 1
  5769                           
  5770                           ; BSR set to: 1
  5771  0006BA  0101               	movlb	1	; () banked
  5772  0006BC  5103               	movf	_printf$1949& (0+255),w,b
  5773  0006BE  EC85  F01F         	call	_putch
  5774  0006C2  D04D               	goto	l8103
  5775  0006C4                     l1089:
  5776                           
  5777                           ; BSR set to: 0
  5778                           ;doprnt.c: 1192: else if(flag & 0x01)
  5779  0006C4  0101               	movlb	1	; () banked
  5780  0006C6  A111               	btfss	printf@flag& (0+255),0,b
  5781  0006C8  D04A               	goto	l8103
  5782                           
  5783                           ; BSR set to: 1
  5784                           ;doprnt.c: 1193: (putch(' ') );
  5785  0006CA  0E20               	movlw	32
  5786  0006CC  EC85  F01F         	call	_putch
  5787                           
  5788                           ;doprnt.c: 1195: }
  5789                           ;doprnt.c: 1196: while(c--) {
  5790  0006D0  D046               	goto	l8103
  5791  0006D2                     l8097:
  5792                           
  5793                           ;doprnt.c: 1200: {
  5794                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5795  0006D2  C10D  F00F         	movff	printf@val,___lldiv@dividend
  5796  0006D6  C10E  F010         	movff	printf@val+1,___lldiv@dividend+1
  5797  0006DA  C10F  F011         	movff	printf@val+2,___lldiv@dividend+2
  5798  0006DE  C110  F012         	movff	printf@val+3,___lldiv@dividend+3
  5799  0006E2  0101               	movlb	1	; () banked
  5800  0006E4  511A               	movf	printf@c& (0+255),w,b
  5801  0006E6  0D04               	mullw	4
  5802  0006E8  0EF3               	movlw	low _dpowers
  5803  0006EA  24F3               	addwf	prodl,w,c
  5804  0006EC  6EF6               	movwf	tblptrl,c
  5805  0006EE  0E7E               	movlw	high _dpowers
  5806  0006F0  20F4               	addwfc	prodh,w,c
  5807  0006F2  6EF7               	movwf	tblptrh,c
  5808  0006F4                     	if	0	;There are less than 3 active tblptr bytes
  5809  0006F4                     	endif
  5810  0006F4  0009               	tblrd		*+
  5811  0006F6  CFF5 F013          	movff	tablat,___lldiv@divisor
  5812  0006FA  0009               	tblrd		*+
  5813  0006FC  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  5814  000700  0009               	tblrd		*+
  5815  000702  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  5816  000706  000A               	tblrd		*-
  5817  000708  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  5818  00070C  ECAD  F01A         	call	___lldiv	;wreg free
  5819  000710  C00F  F109         	movff	?___lldiv,printf@tmpval
  5820  000714  C010  F10A         	movff	?___lldiv+1,printf@tmpval+1
  5821  000718  C011  F10B         	movff	?___lldiv+2,printf@tmpval+2
  5822  00071C  C012  F10C         	movff	?___lldiv+3,printf@tmpval+3
  5823                           
  5824                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5825  000720  C109  F01C         	movff	printf@tmpval,___llmod@dividend
  5826  000724  C10A  F01D         	movff	printf@tmpval+1,___llmod@dividend+1
  5827  000728  C10B  F01E         	movff	printf@tmpval+2,___llmod@dividend+2
  5828  00072C  C10C  F01F         	movff	printf@tmpval+3,___llmod@dividend+3
  5829  000730  0E0A               	movlw	10
  5830  000732  6E20               	movwf	___llmod@divisor,c
  5831  000734  0E00               	movlw	0
  5832  000736  6E21               	movwf	___llmod@divisor+1,c
  5833  000738  0E00               	movlw	0
  5834  00073A  6E22               	movwf	___llmod@divisor+2,c
  5835  00073C  0E00               	movlw	0
  5836  00073E  6E23               	movwf	___llmod@divisor+3,c
  5837  000740  EC89  F01C         	call	___llmod	;wreg free
  5838  000744  C01C  F109         	movff	?___llmod,printf@tmpval
  5839  000748  C01D  F10A         	movff	?___llmod+1,printf@tmpval+1
  5840  00074C  C01E  F10B         	movff	?___llmod+2,printf@tmpval+2
  5841  000750  C01F  F10C         	movff	?___llmod+3,printf@tmpval+3
  5842                           
  5843                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  5844  000754  0101               	movlb	1	; () banked
  5845  000756  5109               	movf	printf@tmpval& (0+255),w,b
  5846  000758  0F30               	addlw	48
  5847  00075A  EC85  F01F         	call	_putch
  5848  00075E                     l8103:
  5849  00075E  0101               	movlb	1	; () banked
  5850  000760  071A               	decf	printf@c& (0+255),f,b
  5851  000762  0101               	movlb	1	; () banked
  5852  000764  291A               	incf	printf@c& (0+255),w,b
  5853  000766  B4D8               	btfsc	status,2,c
  5854  000768  D008               	goto	l8109
  5855  00076A  D7B3               	goto	l8097
  5856  00076C                     l8105:
  5857                           
  5858                           ; BSR set to: 1
  5859                           ;doprnt.c: 1208: (putch('0') );
  5860  00076C  0E30               	movlw	48
  5861  00076E  EC85  F01F         	call	_putch
  5862                           
  5863                           ;doprnt.c: 1209: exp--;
  5864  000772  0101               	movlb	1	; () banked
  5865  000774  0713               	decf	printf@exp& (0+255),f,b
  5866  000776  A0D8               	btfss	status,0,c
  5867  000778  0714               	decf	(printf@exp+1)& (0+255),f,b
  5868  00077A                     l8109:
  5869                           
  5870                           ; BSR set to: 1
  5871  00077A  0101               	movlb	1	; () banked
  5872  00077C  BF14               	btfsc	(printf@exp+1)& (0+255),7,b
  5873  00077E  D007               	goto	l8111
  5874  000780  0101               	movlb	1	; () banked
  5875  000782  5114               	movf	(printf@exp+1)& (0+255),w,b
  5876  000784  E1F3               	bnz	l8105
  5877  000786  0101               	movlb	1	; () banked
  5878  000788  0513               	decf	printf@exp& (0+255),w,b
  5879  00078A  B0D8               	btfsc	status,0,c
  5880  00078C  D7EF               	goto	l8105
  5881  00078E                     l8111:
  5882                           
  5883                           ; BSR set to: 1
  5884                           ;doprnt.c: 1210: }
  5885                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5886  00078E  0101               	movlb	1	; () banked
  5887  000790  BF19               	btfsc	(printf@prec+1)& (0+255),7,b
  5888  000792  D00C               	goto	l1102
  5889  000794  0101               	movlb	1	; () banked
  5890  000796  5119               	movf	(printf@prec+1)& (0+255),w,b
  5891  000798  E105               	bnz	u8360
  5892  00079A  0E09               	movlw	9
  5893  00079C  0101               	movlb	1	; () banked
  5894  00079E  5D18               	subwf	printf@prec& (0+255),w,b
  5895  0007A0  A0D8               	btfss	status,0,c
  5896  0007A2  D004               	goto	l1102
  5897  0007A4                     u8360:
  5898                           
  5899                           ; BSR set to: 1
  5900                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5901  0007A4  0E08               	movlw	8
  5902  0007A6  0101               	movlb	1	; () banked
  5903  0007A8  6F1A               	movwf	printf@c& (0+255),b
  5904  0007AA  D002               	goto	l8115
  5905  0007AC                     l1102:
  5906                           
  5907                           ; BSR set to: 1
  5908                           ;doprnt.c: 1213: else
  5909                           ;doprnt.c: 1214: c = prec;
  5910  0007AC  C118  F11A         	movff	printf@prec,printf@c
  5911  0007B0                     l8115:
  5912                           
  5913                           ; BSR set to: 1
  5914                           ;doprnt.c: 1215: prec -= c;
  5915  0007B0  0101               	movlb	1	; () banked
  5916  0007B2  511A               	movf	printf@c& (0+255),w,b
  5917  0007B4  0101               	movlb	1	; () banked
  5918  0007B6  5F18               	subwf	printf@prec& (0+255),f,b
  5919  0007B8  0E00               	movlw	0
  5920  0007BA  0101               	movlb	1	; () banked
  5921  0007BC  BF1A               	btfsc	printf@c& (0+255),7,b
  5922  0007BE  0EFF               	movlw	255
  5923  0007C0  0101               	movlb	1	; () banked
  5924  0007C2  5B19               	subwfb	(printf@prec+1)& (0+255),f,b
  5925                           
  5926                           ; BSR set to: 1
  5927                           ;doprnt.c: 1219: if(c)
  5928  0007C4  0101               	movlb	1	; () banked
  5929  0007C6  511A               	movf	printf@c& (0+255),w,b
  5930  0007C8  0101               	movlb	1	; () banked
  5931  0007CA  B4D8               	btfsc	status,2,c
  5932  0007CC  D003               	goto	l8121
  5933                           
  5934                           ; BSR set to: 1
  5935                           ;doprnt.c: 1221: (putch('.') );
  5936  0007CE  0E2E               	movlw	46
  5937  0007D0  EC85  F01F         	call	_putch
  5938  0007D4                     l8121:
  5939                           
  5940                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5941  0007D4  0101               	movlb	1	; () banked
  5942  0007D6  511A               	movf	printf@c& (0+255),w,b
  5943  0007D8  ECAF  F008         	call	_scale
  5944  0007DC  C060  F100         	movff	?_scale,_printf$2740
  5945  0007E0  C061  F101         	movff	?_scale+1,_printf$2740+1
  5946  0007E4  C062  F102         	movff	?_scale+2,_printf$2740+2
  5947                           
  5948                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5949  0007E8  C115  F035         	movff	printf@fval,___ftmul@f2
  5950  0007EC  C116  F036         	movff	printf@fval+1,___ftmul@f2+1
  5951  0007F0  C117  F037         	movff	printf@fval+2,___ftmul@f2+2
  5952  0007F4  C100  F032         	movff	_printf$2740,___ftmul@f1
  5953  0007F8  C101  F033         	movff	_printf$2740+1,___ftmul@f1+1
  5954  0007FC  C102  F034         	movff	_printf$2740+2,___ftmul@f1+2
  5955  000800  EC5B  F016         	call	___ftmul	;wreg free
  5956  000804  C032  F076         	movff	?___ftmul,___fttol@f1
  5957  000808  C033  F077         	movff	?___ftmul+1,___fttol@f1+1
  5958  00080C  C034  F078         	movff	?___ftmul+2,___fttol@f1+2
  5959  000810  ECC0  F012         	call	___fttol	;wreg free
  5960  000814  C076  F10D         	movff	?___fttol,printf@val
  5961  000818  C077  F10E         	movff	?___fttol+1,printf@val+1
  5962  00081C  C078  F10F         	movff	?___fttol+2,printf@val+2
  5963  000820  C079  F110         	movff	?___fttol+3,printf@val+3
  5964                           
  5965                           ;doprnt.c: 1228: while(c--) {
  5966  000824  D06D               	goto	l8133
  5967  000826                     l8125:
  5968                           
  5969                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5970  000826  C10D  F00F         	movff	printf@val,___lldiv@dividend
  5971  00082A  C10E  F010         	movff	printf@val+1,___lldiv@dividend+1
  5972  00082E  C10F  F011         	movff	printf@val+2,___lldiv@dividend+2
  5973  000832  C110  F012         	movff	printf@val+3,___lldiv@dividend+3
  5974  000836  0101               	movlb	1	; () banked
  5975  000838  511A               	movf	printf@c& (0+255),w,b
  5976  00083A  0D04               	mullw	4
  5977  00083C  0EF3               	movlw	low _dpowers
  5978  00083E  24F3               	addwf	prodl,w,c
  5979  000840  6EF6               	movwf	tblptrl,c
  5980  000842  0E7E               	movlw	high _dpowers
  5981  000844  20F4               	addwfc	prodh,w,c
  5982  000846  6EF7               	movwf	tblptrh,c
  5983  000848                     	if	0	;There are less than 3 active tblptr bytes
  5984  000848                     	endif
  5985  000848  0009               	tblrd		*+
  5986  00084A  CFF5 F013          	movff	tablat,___lldiv@divisor
  5987  00084E  0009               	tblrd		*+
  5988  000850  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  5989  000854  0009               	tblrd		*+
  5990  000856  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  5991  00085A  000A               	tblrd		*-
  5992  00085C  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  5993  000860  ECAD  F01A         	call	___lldiv	;wreg free
  5994  000864  C00F  F109         	movff	?___lldiv,printf@tmpval
  5995  000868  C010  F10A         	movff	?___lldiv+1,printf@tmpval+1
  5996  00086C  C011  F10B         	movff	?___lldiv+2,printf@tmpval+2
  5997  000870  C012  F10C         	movff	?___lldiv+3,printf@tmpval+3
  5998                           
  5999                           ;doprnt.c: 1230: tmpval.vd %= 10;
  6000  000874  C109  F01C         	movff	printf@tmpval,___llmod@dividend
  6001  000878  C10A  F01D         	movff	printf@tmpval+1,___llmod@dividend+1
  6002  00087C  C10B  F01E         	movff	printf@tmpval+2,___llmod@dividend+2
  6003  000880  C10C  F01F         	movff	printf@tmpval+3,___llmod@dividend+3
  6004  000884  0E0A               	movlw	10
  6005  000886  6E20               	movwf	___llmod@divisor,c
  6006  000888  0E00               	movlw	0
  6007  00088A  6E21               	movwf	___llmod@divisor+1,c
  6008  00088C  0E00               	movlw	0
  6009  00088E  6E22               	movwf	___llmod@divisor+2,c
  6010  000890  0E00               	movlw	0
  6011  000892  6E23               	movwf	___llmod@divisor+3,c
  6012  000894  EC89  F01C         	call	___llmod	;wreg free
  6013  000898  C01C  F109         	movff	?___llmod,printf@tmpval
  6014  00089C  C01D  F10A         	movff	?___llmod+1,printf@tmpval+1
  6015  0008A0  C01E  F10B         	movff	?___llmod+2,printf@tmpval+2
  6016  0008A4  C01F  F10C         	movff	?___llmod+3,printf@tmpval+3
  6017                           
  6018                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  6019  0008A8  0101               	movlb	1	; () banked
  6020  0008AA  5109               	movf	printf@tmpval& (0+255),w,b
  6021  0008AC  0F30               	addlw	48
  6022  0008AE  EC85  F01F         	call	_putch
  6023                           
  6024                           ;doprnt.c: 1232: val %= dpowers[c];
  6025  0008B2  C10D  F01C         	movff	printf@val,___llmod@dividend
  6026  0008B6  C10E  F01D         	movff	printf@val+1,___llmod@dividend+1
  6027  0008BA  C10F  F01E         	movff	printf@val+2,___llmod@dividend+2
  6028  0008BE  C110  F01F         	movff	printf@val+3,___llmod@dividend+3
  6029  0008C2  0101               	movlb	1	; () banked
  6030  0008C4  511A               	movf	printf@c& (0+255),w,b
  6031  0008C6  0D04               	mullw	4
  6032  0008C8  0EF3               	movlw	low _dpowers
  6033  0008CA  24F3               	addwf	prodl,w,c
  6034  0008CC  6EF6               	movwf	tblptrl,c
  6035  0008CE  0E7E               	movlw	high _dpowers
  6036  0008D0  20F4               	addwfc	prodh,w,c
  6037  0008D2  6EF7               	movwf	tblptrh,c
  6038  0008D4                     	if	0	;There are less than 3 active tblptr bytes
  6039  0008D4                     	endif
  6040  0008D4  0009               	tblrd		*+
  6041  0008D6  CFF5 F020          	movff	tablat,___llmod@divisor
  6042  0008DA  0009               	tblrd		*+
  6043  0008DC  CFF5 F021          	movff	tablat,___llmod@divisor+1
  6044  0008E0  0009               	tblrd		*+
  6045  0008E2  CFF5 F022          	movff	tablat,___llmod@divisor+2
  6046  0008E6  000A               	tblrd		*-
  6047  0008E8  CFF5 F023          	movff	tablat,___llmod@divisor+3
  6048  0008EC  EC89  F01C         	call	___llmod	;wreg free
  6049  0008F0  C01C  F10D         	movff	?___llmod,printf@val
  6050  0008F4  C01D  F10E         	movff	?___llmod+1,printf@val+1
  6051  0008F8  C01E  F10F         	movff	?___llmod+2,printf@val+2
  6052  0008FC  C01F  F110         	movff	?___llmod+3,printf@val+3
  6053  000900                     l8133:
  6054  000900  0101               	movlb	1	; () banked
  6055  000902  071A               	decf	printf@c& (0+255),f,b
  6056  000904  0101               	movlb	1	; () banked
  6057  000906  291A               	incf	printf@c& (0+255),w,b
  6058  000908  B4D8               	btfsc	status,2,c
  6059  00090A  D008               	goto	l8139
  6060  00090C  D78C               	goto	l8125
  6061  00090E                     l8135:
  6062                           
  6063                           ; BSR set to: 1
  6064                           ;doprnt.c: 1236: (putch('0') );
  6065  00090E  0E30               	movlw	48
  6066  000910  EC85  F01F         	call	_putch
  6067                           
  6068                           ;doprnt.c: 1237: prec--;
  6069  000914  0101               	movlb	1	; () banked
  6070  000916  0718               	decf	printf@prec& (0+255),f,b
  6071  000918  A0D8               	btfss	status,0,c
  6072  00091A  0719               	decf	(printf@prec+1)& (0+255),f,b
  6073  00091C                     l8139:
  6074                           
  6075                           ; BSR set to: 1
  6076  00091C  0101               	movlb	1	; () banked
  6077  00091E  5118               	movf	printf@prec& (0+255),w,b
  6078  000920  0101               	movlb	1	; () banked
  6079  000922  1119               	iorwf	(printf@prec+1)& (0+255),w,b
  6080  000924  B4D8               	btfsc	status,2,c
  6081  000926  D160               	goto	l8217
  6082  000928  D7F2               	goto	l8135
  6083  00092A                     l8141:
  6084                           
  6085                           ; BSR set to: 1
  6086                           ;doprnt.c: 1246: }
  6087                           ;doprnt.c: 1253: {
  6088                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6089  00092A  C105  FFD9         	movff	printf@ap,fsr2l
  6090  00092E  C106  FFDA         	movff	printf@ap+1,fsr2h
  6091  000932  CFDE F10D          	movff	postinc2,printf@val
  6092  000936  CFDD F10E          	movff	postdec2,printf@val+1
  6093  00093A  0101               	movlb	1	; () banked
  6094  00093C  0E00               	movlw	0
  6095  00093E  BF0E               	btfsc	(printf@val+1)& (0+255),7,b
  6096  000940  0EFF               	movlw	-1
  6097  000942  6F0F               	movwf	(printf@val+2)& (0+255),b
  6098  000944  6F10               	movwf	(printf@val+3)& (0+255),b
  6099                           
  6100                           ; BSR set to: 1
  6101  000946  0E02               	movlw	2
  6102  000948  0101               	movlb	1	; () banked
  6103  00094A  2705               	addwf	printf@ap& (0+255),f,b
  6104  00094C  0E00               	movlw	0
  6105  00094E  2306               	addwfc	(printf@ap+1)& (0+255),f,b
  6106                           
  6107                           ; BSR set to: 1
  6108                           ;doprnt.c: 1261: if((long)val < 0) {
  6109  000950  0101               	movlb	1	; () banked
  6110  000952  AF10               	btfss	(printf@val+3)& (0+255),7,b
  6111  000954  D00C               	goto	l8151
  6112                           
  6113                           ; BSR set to: 1
  6114                           ;doprnt.c: 1262: flag |= 0x03;
  6115  000956  0E03               	movlw	3
  6116  000958  0101               	movlb	1	; () banked
  6117  00095A  1311               	iorwf	printf@flag& (0+255),f,b
  6118                           
  6119                           ; BSR set to: 1
  6120                           ;doprnt.c: 1263: val = -val;
  6121  00095C  0101               	movlb	1	; () banked
  6122  00095E  1F10               	comf	(printf@val+3)& (0+255),f,b
  6123  000960  1F0F               	comf	(printf@val+2)& (0+255),f,b
  6124  000962  1F0E               	comf	(printf@val+1)& (0+255),f,b
  6125  000964  6D0D               	negf	printf@val& (0+255),b
  6126  000966  0E00               	movlw	0
  6127  000968  230E               	addwfc	(printf@val+1)& (0+255),f,b
  6128  00096A  230F               	addwfc	(printf@val+2)& (0+255),f,b
  6129  00096C  2310               	addwfc	(printf@val+3)& (0+255),f,b
  6130  00096E                     l8151:
  6131                           
  6132                           ; BSR set to: 1
  6133                           ;doprnt.c: 1264: }
  6134                           ;doprnt.c: 1266: }
  6135                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  6136  00096E  0101               	movlb	1	; () banked
  6137  000970  5118               	movf	printf@prec& (0+255),w,b
  6138  000972  0101               	movlb	1	; () banked
  6139  000974  1119               	iorwf	(printf@prec+1)& (0+255),w,b
  6140  000976  A4D8               	btfss	status,2,c
  6141  000978  D00D               	goto	l8157
  6142                           
  6143                           ; BSR set to: 1
  6144  00097A  0101               	movlb	1	; () banked
  6145  00097C  510D               	movf	printf@val& (0+255),w,b
  6146  00097E  0101               	movlb	1	; () banked
  6147  000980  110E               	iorwf	(printf@val+1)& (0+255),w,b
  6148  000982  0101               	movlb	1	; () banked
  6149  000984  110F               	iorwf	(printf@val+2)& (0+255),w,b
  6150  000986  0101               	movlb	1	; () banked
  6151  000988  1110               	iorwf	(printf@val+3)& (0+255),w,b
  6152  00098A  A4D8               	btfss	status,2,c
  6153  00098C  D003               	goto	l8157
  6154                           
  6155                           ; BSR set to: 1
  6156                           ;doprnt.c: 1291: prec++;
  6157  00098E  0101               	movlb	1	; () banked
  6158  000990  4B18               	infsnz	printf@prec& (0+255),f,b
  6159  000992  2B19               	incf	(printf@prec+1)& (0+255),f,b
  6160  000994                     l8157:
  6161                           
  6162                           ; BSR set to: 1
  6163                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6164  000994  0E01               	movlw	1
  6165  000996  0101               	movlb	1	; () banked
  6166  000998  6F1A               	movwf	printf@c& (0+255),b
  6167  00099A                     l8159:
  6168                           
  6169                           ; BSR set to: 1
  6170  00099A  0E0A               	movlw	10
  6171  00099C  0101               	movlb	1	; () banked
  6172  00099E  191A               	xorwf	printf@c& (0+255),w,b
  6173  0009A0  B4D8               	btfsc	status,2,c
  6174  0009A2  D01E               	goto	l8171
  6175                           
  6176                           ; BSR set to: 1
  6177                           ;doprnt.c: 1306: if(val < dpowers[c])
  6178                           
  6179                           ; BSR set to: 1
  6180                           
  6181                           ; BSR set to: 1
  6182  0009A4  0101               	movlb	1	; () banked
  6183  0009A6  511A               	movf	printf@c& (0+255),w,b
  6184  0009A8  0D04               	mullw	4
  6185  0009AA  0EF3               	movlw	low _dpowers
  6186  0009AC  24F3               	addwf	prodl,w,c
  6187  0009AE  6EF6               	movwf	tblptrl,c
  6188  0009B0  0E7E               	movlw	high _dpowers
  6189  0009B2  20F4               	addwfc	prodh,w,c
  6190  0009B4  6EF7               	movwf	tblptrh,c
  6191  0009B6                     	if	0	;There are less than 3 active tblptr bytes
  6192  0009B6                     	endif
  6193  0009B6  0009               	tblrd		*+
  6194  0009B8  50F5               	movf	tablat,w,c
  6195  0009BA  0101               	movlb	1	; () banked
  6196  0009BC  5D0D               	subwf	printf@val& (0+255),w,b
  6197  0009BE  0009               	tblrd		*+
  6198  0009C0  50F5               	movf	tablat,w,c
  6199  0009C2  0101               	movlb	1	; () banked
  6200  0009C4  590E               	subwfb	(printf@val+1)& (0+255),w,b
  6201  0009C6  0009               	tblrd		*+
  6202  0009C8  50F5               	movf	tablat,w,c
  6203  0009CA  0101               	movlb	1	; () banked
  6204  0009CC  590F               	subwfb	(printf@val+2)& (0+255),w,b
  6205  0009CE  0009               	tblrd		*+
  6206  0009D0  50F5               	movf	tablat,w,c
  6207  0009D2  0101               	movlb	1	; () banked
  6208  0009D4  5910               	subwfb	(printf@val+3)& (0+255),w,b
  6209  0009D6  A0D8               	btfss	status,0,c
  6210  0009D8  D003               	goto	l8171
  6211                           
  6212                           ; BSR set to: 1
  6213                           
  6214                           ; BSR set to: 1
  6215                           
  6216                           ; BSR set to: 1
  6217                           ;doprnt.c: 1307: break;
  6218  0009DA  0101               	movlb	1	; () banked
  6219  0009DC  2B1A               	incf	printf@c& (0+255),f,b
  6220  0009DE  D7DD               	goto	l8159
  6221  0009E0                     l8171:
  6222                           
  6223                           ; BSR set to: 1
  6224                           ;doprnt.c: 1339: if(c < prec)
  6225  0009E0  0E80               	movlw	128
  6226  0009E2  0101               	movlb	1	; () banked
  6227  0009E4  BF1A               	btfsc	printf@c& (0+255),7,b
  6228  0009E6  0E7F               	movlw	127
  6229  0009E8  0100               	movlb	0	; () banked
  6230  0009EA  6FA6               	movwf	??_printf& (0+255),b
  6231  0009EC  0101               	movlb	1	; () banked
  6232  0009EE  5118               	movf	printf@prec& (0+255),w,b
  6233  0009F0  0101               	movlb	1	; () banked
  6234  0009F2  5D1A               	subwf	printf@c& (0+255),w,b
  6235  0009F4  0101               	movlb	1	; () banked
  6236  0009F6  5119               	movf	(printf@prec+1)& (0+255),w,b
  6237  0009F8  0A80               	xorlw	128
  6238  0009FA  0100               	movlb	0	; () banked
  6239  0009FC  59A6               	subwfb	??_printf& (0+255),w,b
  6240  0009FE  B0D8               	btfsc	status,0,c
  6241  000A00  D003               	goto	l8175
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;doprnt.c: 1340: c = prec;
  6245  000A02  C118  F11A         	movff	printf@prec,printf@c
  6246  000A06  D018               	goto	l8179
  6247  000A08                     l8175:
  6248                           
  6249                           ; BSR set to: 0
  6250                           ;doprnt.c: 1341: else if(prec < c)
  6251  000A08  0101               	movlb	1	; () banked
  6252  000A0A  5119               	movf	(printf@prec+1)& (0+255),w,b
  6253  000A0C  0A80               	xorlw	128
  6254  000A0E  0100               	movlb	0	; () banked
  6255  000A10  6FA6               	movwf	??_printf& (0+255),b
  6256  000A12  0101               	movlb	1	; () banked
  6257  000A14  511A               	movf	printf@c& (0+255),w,b
  6258  000A16  0101               	movlb	1	; () banked
  6259  000A18  5D18               	subwf	printf@prec& (0+255),w,b
  6260  000A1A  0E80               	movlw	128
  6261  000A1C  0101               	movlb	1	; () banked
  6262  000A1E  BF1A               	btfsc	printf@c& (0+255),7,b
  6263  000A20  0E7F               	movlw	127
  6264  000A22  0100               	movlb	0	; () banked
  6265  000A24  59A6               	subwfb	??_printf& (0+255),w,b
  6266  000A26  B0D8               	btfsc	status,0,c
  6267  000A28  D007               	goto	l8179
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;doprnt.c: 1342: prec = c;
  6271  000A2A  0101               	movlb	1	; () banked
  6272  000A2C  511A               	movf	printf@c& (0+255),w,b
  6273  000A2E  0101               	movlb	1	; () banked
  6274  000A30  6F18               	movwf	printf@prec& (0+255),b
  6275  000A32  6B19               	clrf	(printf@prec+1)& (0+255),b
  6276  000A34  BF18               	btfsc	printf@prec& (0+255),7,b
  6277  000A36  0719               	decf	(printf@prec+1)& (0+255),f,b
  6278  000A38                     l8179:
  6279                           
  6280                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6281  000A38  0101               	movlb	1	; () banked
  6282  000A3A  5107               	movf	printf@width& (0+255),w,b
  6283  000A3C  0101               	movlb	1	; () banked
  6284  000A3E  1108               	iorwf	(printf@width+1)& (0+255),w,b
  6285  000A40  B4D8               	btfsc	status,2,c
  6286  000A42  D014               	goto	l8185
  6287                           
  6288                           ; BSR set to: 1
  6289  000A44  0E03               	movlw	3
  6290  000A46  0101               	movlb	1	; () banked
  6291  000A48  1511               	andwf	printf@flag& (0+255),w,b
  6292  000A4A  0100               	movlb	0	; () banked
  6293  000A4C  6FA6               	movwf	??_printf& (0+255),b
  6294  000A4E  0E00               	movlw	0
  6295  000A50  0101               	movlb	1	; () banked
  6296  000A52  1512               	andwf	(printf@flag+1)& (0+255),w,b
  6297  000A54  0100               	movlb	0	; () banked
  6298  000A56  6FA7               	movwf	(??_printf+1)& (0+255),b
  6299  000A58  0100               	movlb	0	; () banked
  6300  000A5A  51A6               	movf	??_printf& (0+255),w,b
  6301  000A5C  0100               	movlb	0	; () banked
  6302  000A5E  11A7               	iorwf	(??_printf+1)& (0+255),w,b
  6303  000A60  B4D8               	btfsc	status,2,c
  6304  000A62  D004               	goto	l8185
  6305                           
  6306                           ; BSR set to: 0
  6307                           ;doprnt.c: 1346: width--;
  6308  000A64  0101               	movlb	1	; () banked
  6309  000A66  0707               	decf	printf@width& (0+255),f,b
  6310  000A68  A0D8               	btfss	status,0,c
  6311  000A6A  0708               	decf	(printf@width+1)& (0+255),f,b
  6312  000A6C                     l8185:
  6313                           
  6314                           ;doprnt.c: 1348: if(flag & 0x4000) {
  6315  000A6C  0101               	movlb	1	; () banked
  6316  000A6E  AD12               	btfss	(printf@flag+1)& (0+255),6,b
  6317  000A70  D01E               	goto	l8193
  6318                           
  6319                           ; BSR set to: 1
  6320                           ;doprnt.c: 1349: if(width > prec)
  6321  000A72  0101               	movlb	1	; () banked
  6322  000A74  5107               	movf	printf@width& (0+255),w,b
  6323  000A76  0101               	movlb	1	; () banked
  6324  000A78  5D18               	subwf	printf@prec& (0+255),w,b
  6325  000A7A  0101               	movlb	1	; () banked
  6326  000A7C  5119               	movf	(printf@prec+1)& (0+255),w,b
  6327  000A7E  0A80               	xorlw	128
  6328  000A80  0100               	movlb	0	; () banked
  6329  000A82  6FA6               	movwf	??_printf& (0+255),b
  6330  000A84  0101               	movlb	1	; () banked
  6331  000A86  5108               	movf	(printf@width+1)& (0+255),w,b
  6332  000A88  0A80               	xorlw	128
  6333  000A8A  0100               	movlb	0	; () banked
  6334  000A8C  59A6               	subwfb	??_printf& (0+255),w,b
  6335  000A8E  B0D8               	btfsc	status,0,c
  6336  000A90  D009               	goto	l8191
  6337                           
  6338                           ; BSR set to: 0
  6339                           ;doprnt.c: 1350: width -= prec;
  6340  000A92  0101               	movlb	1	; () banked
  6341  000A94  5118               	movf	printf@prec& (0+255),w,b
  6342  000A96  0101               	movlb	1	; () banked
  6343  000A98  5F07               	subwf	printf@width& (0+255),f,b
  6344  000A9A  0101               	movlb	1	; () banked
  6345  000A9C  5119               	movf	(printf@prec+1)& (0+255),w,b
  6346  000A9E  0101               	movlb	1	; () banked
  6347  000AA0  5B08               	subwfb	(printf@width+1)& (0+255),f,b
  6348  000AA2  D005               	goto	l8193
  6349  000AA4                     l8191:
  6350                           
  6351                           ;doprnt.c: 1351: else
  6352                           ;doprnt.c: 1352: width = 0;
  6353  000AA4  0E00               	movlw	0
  6354  000AA6  0101               	movlb	1	; () banked
  6355  000AA8  6F08               	movwf	(printf@width+1)& (0+255),b
  6356  000AAA  0E00               	movlw	0
  6357  000AAC  6F07               	movwf	printf@width& (0+255),b
  6358  000AAE                     l8193:
  6359                           
  6360                           ; BSR set to: 1
  6361                           ;doprnt.c: 1353: }
  6362                           ;doprnt.c: 1381: if(width > c)
  6363  000AAE  0E80               	movlw	128
  6364  000AB0  0101               	movlb	1	; () banked
  6365  000AB2  BF1A               	btfsc	printf@c& (0+255),7,b
  6366  000AB4  0E7F               	movlw	127
  6367  000AB6  0100               	movlb	0	; () banked
  6368  000AB8  6FA6               	movwf	??_printf& (0+255),b
  6369  000ABA  0101               	movlb	1	; () banked
  6370  000ABC  5107               	movf	printf@width& (0+255),w,b
  6371  000ABE  0101               	movlb	1	; () banked
  6372  000AC0  5D1A               	subwf	printf@c& (0+255),w,b
  6373  000AC2  0101               	movlb	1	; () banked
  6374  000AC4  5108               	movf	(printf@width+1)& (0+255),w,b
  6375  000AC6  0A80               	xorlw	128
  6376  000AC8  0100               	movlb	0	; () banked
  6377  000ACA  59A6               	subwfb	??_printf& (0+255),w,b
  6378  000ACC  B0D8               	btfsc	status,0,c
  6379  000ACE  D00B               	goto	l8197
  6380                           
  6381                           ; BSR set to: 0
  6382                           ;doprnt.c: 1382: width -= c;
  6383  000AD0  0101               	movlb	1	; () banked
  6384  000AD2  511A               	movf	printf@c& (0+255),w,b
  6385  000AD4  0101               	movlb	1	; () banked
  6386  000AD6  5F07               	subwf	printf@width& (0+255),f,b
  6387  000AD8  0E00               	movlw	0
  6388  000ADA  0101               	movlb	1	; () banked
  6389  000ADC  BF1A               	btfsc	printf@c& (0+255),7,b
  6390  000ADE  0EFF               	movlw	255
  6391  000AE0  0101               	movlb	1	; () banked
  6392  000AE2  5B08               	subwfb	(printf@width+1)& (0+255),f,b
  6393  000AE4  D005               	goto	l8199
  6394  000AE6                     l8197:
  6395                           
  6396                           ;doprnt.c: 1383: else
  6397                           ;doprnt.c: 1384: width = 0;
  6398  000AE6  0E00               	movlw	0
  6399  000AE8  0101               	movlb	1	; () banked
  6400  000AEA  6F08               	movwf	(printf@width+1)& (0+255),b
  6401  000AEC  0E00               	movlw	0
  6402  000AEE  6F07               	movwf	printf@width& (0+255),b
  6403  000AF0                     l8199:
  6404                           
  6405                           ; BSR set to: 1
  6406                           ;doprnt.c: 1422: {
  6407                           ;doprnt.c: 1424: if(width
  6408                           ;doprnt.c: 1428: )
  6409  000AF0  0101               	movlb	1	; () banked
  6410  000AF2  5107               	movf	printf@width& (0+255),w,b
  6411  000AF4  0101               	movlb	1	; () banked
  6412  000AF6  1108               	iorwf	(printf@width+1)& (0+255),w,b
  6413  000AF8  B4D8               	btfsc	status,2,c
  6414  000AFA  D00D               	goto	l8205
  6415  000AFC                     l8201:
  6416                           
  6417                           ; BSR set to: 1
  6418                           ;doprnt.c: 1430: (putch(' ') );
  6419  000AFC  0E20               	movlw	32
  6420  000AFE  EC85  F01F         	call	_putch
  6421                           
  6422                           ;doprnt.c: 1431: while(--width);
  6423  000B02  0101               	movlb	1	; () banked
  6424  000B04  0707               	decf	printf@width& (0+255),f,b
  6425  000B06  A0D8               	btfss	status,0,c
  6426  000B08  0708               	decf	(printf@width+1)& (0+255),f,b
  6427  000B0A  0101               	movlb	1	; () banked
  6428  000B0C  5107               	movf	printf@width& (0+255),w,b
  6429  000B0E  0101               	movlb	1	; () banked
  6430  000B10  1108               	iorwf	(printf@width+1)& (0+255),w,b
  6431  000B12  A4D8               	btfss	status,2,c
  6432  000B14  D7F3               	goto	l8201
  6433  000B16                     l8205:
  6434                           
  6435                           ; BSR set to: 1
  6436                           ;doprnt.c: 1438: if(flag & 0x03)
  6437  000B16  0E03               	movlw	3
  6438  000B18  0101               	movlb	1	; () banked
  6439  000B1A  1511               	andwf	printf@flag& (0+255),w,b
  6440  000B1C  0100               	movlb	0	; () banked
  6441  000B1E  6FA6               	movwf	??_printf& (0+255),b
  6442  000B20  0E00               	movlw	0
  6443  000B22  0101               	movlb	1	; () banked
  6444  000B24  1512               	andwf	(printf@flag+1)& (0+255),w,b
  6445  000B26  0100               	movlb	0	; () banked
  6446  000B28  6FA7               	movwf	(??_printf+1)& (0+255),b
  6447  000B2A  0100               	movlb	0	; () banked
  6448  000B2C  51A6               	movf	??_printf& (0+255),w,b
  6449  000B2E  0100               	movlb	0	; () banked
  6450  000B30  11A7               	iorwf	(??_printf+1)& (0+255),w,b
  6451  000B32  B4D8               	btfsc	status,2,c
  6452  000B34  D004               	goto	l1128
  6453                           
  6454                           ; BSR set to: 0
  6455                           ;doprnt.c: 1439: (putch('-') );
  6456  000B36  0E2D               	movlw	45
  6457  000B38  EC85  F01F         	call	_putch
  6458  000B3C  D04A               	goto	l8215
  6459  000B3E                     l1128:
  6460                           
  6461                           ; BSR set to: 0
  6462                           ;doprnt.c: 1443: else if(flag & 0x01)
  6463  000B3E  0101               	movlb	1	; () banked
  6464  000B40  A111               	btfss	printf@flag& (0+255),0,b
  6465  000B42  D047               	goto	l8215
  6466                           
  6467                           ; BSR set to: 1
  6468                           ;doprnt.c: 1444: (putch(' ') );
  6469  000B44  0E20               	movlw	32
  6470  000B46  EC85  F01F         	call	_putch
  6471                           
  6472                           ;doprnt.c: 1469: }
  6473                           ;doprnt.c: 1474: while(prec--) {
  6474  000B4A  D043               	goto	l8215
  6475  000B4C                     l8211:
  6476                           
  6477                           ;doprnt.c: 1478: {
  6478                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6479  000B4C  C118  F0A6         	movff	printf@prec,??_printf
  6480  000B50  C119  F0A7         	movff	printf@prec+1,??_printf+1
  6481  000B54  0100               	movlb	0	; () banked
  6482  000B56  90D8               	bcf	status,0,c
  6483  000B58  37A6               	rlcf	??_printf& (0+255),f,b
  6484  000B5A  37A7               	rlcf	(??_printf+1)& (0+255),f,b
  6485  000B5C  0100               	movlb	0	; () banked
  6486  000B5E  90D8               	bcf	status,0,c
  6487  000B60  37A6               	rlcf	??_printf& (0+255),f,b
  6488  000B62  37A7               	rlcf	(??_printf+1)& (0+255),f,b
  6489  000B64  0EF3               	movlw	low _dpowers
  6490  000B66  0100               	movlb	0	; () banked
  6491  000B68  25A6               	addwf	??_printf& (0+255),w,b
  6492  000B6A  6EF6               	movwf	tblptrl,c
  6493  000B6C  0E7E               	movlw	high _dpowers
  6494  000B6E  21A7               	addwfc	(??_printf+1)& (0+255),w,b
  6495  000B70  6EF7               	movwf	tblptrh,c
  6496  000B72                     	if	0	;There are less than 3 active tblptr bytes
  6497  000B72                     	endif
  6498  000B72  0009               	tblrd		*+
  6499  000B74  CFF5 F013          	movff	tablat,___lldiv@divisor
  6500  000B78  0009               	tblrd		*+
  6501  000B7A  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  6502  000B7E  0009               	tblrd		*+
  6503  000B80  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  6504  000B84  000A               	tblrd		*-
  6505  000B86  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  6506  000B8A  C10D  F00F         	movff	printf@val,___lldiv@dividend
  6507  000B8E  C10E  F010         	movff	printf@val+1,___lldiv@dividend+1
  6508  000B92  C10F  F011         	movff	printf@val+2,___lldiv@dividend+2
  6509  000B96  C110  F012         	movff	printf@val+3,___lldiv@dividend+3
  6510  000B9A  ECAD  F01A         	call	___lldiv	;wreg free
  6511  000B9E  C00F  F01C         	movff	?___lldiv,___llmod@dividend
  6512  000BA2  C010  F01D         	movff	?___lldiv+1,___llmod@dividend+1
  6513  000BA6  C011  F01E         	movff	?___lldiv+2,___llmod@dividend+2
  6514  000BAA  C012  F01F         	movff	?___lldiv+3,___llmod@dividend+3
  6515  000BAE  0E0A               	movlw	10
  6516  000BB0  6E20               	movwf	___llmod@divisor,c
  6517  000BB2  0E00               	movlw	0
  6518  000BB4  6E21               	movwf	___llmod@divisor+1,c
  6519  000BB6  0E00               	movlw	0
  6520  000BB8  6E22               	movwf	___llmod@divisor+2,c
  6521  000BBA  0E00               	movlw	0
  6522  000BBC  6E23               	movwf	___llmod@divisor+3,c
  6523  000BBE  EC89  F01C         	call	___llmod	;wreg free
  6524  000BC2  501C               	movf	?___llmod,w,c
  6525  000BC4  0F30               	addlw	48
  6526  000BC6  0101               	movlb	1	; () banked
  6527  000BC8  6F1A               	movwf	printf@c& (0+255),b
  6528                           
  6529                           ; BSR set to: 1
  6530                           ;doprnt.c: 1523: }
  6531                           ;doprnt.c: 1524: (putch(c) );
  6532  000BCA  0101               	movlb	1	; () banked
  6533  000BCC  511A               	movf	printf@c& (0+255),w,b
  6534  000BCE  EC85  F01F         	call	_putch
  6535  000BD2                     l8215:
  6536  000BD2  0101               	movlb	1	; () banked
  6537  000BD4  0718               	decf	printf@prec& (0+255),f,b
  6538  000BD6  A0D8               	btfss	status,0,c
  6539  000BD8  0719               	decf	(printf@prec+1)& (0+255),f,b
  6540  000BDA  0101               	movlb	1	; () banked
  6541  000BDC  2918               	incf	printf@prec& (0+255),w,b
  6542  000BDE  E1B6               	bnz	l8211
  6543  000BE0  0101               	movlb	1	; () banked
  6544  000BE2  2919               	incf	(printf@prec+1)& (0+255),w,b
  6545  000BE4  A4D8               	btfss	status,2,c
  6546  000BE6  D7B2               	goto	l8211
  6547  000BE8                     l8217:
  6548  000BE8  C09F  FFF6         	movff	printf@f,tblptrl
  6549  000BEC  C0A0  FFF7         	movff	printf@f+1,tblptrh
  6550  000BF0  0100               	movlb	0	; () banked
  6551  000BF2  4B9F               	infsnz	printf@f& (0+255),f,b
  6552  000BF4  2BA0               	incf	(printf@f+1)& (0+255),f,b
  6553  000BF6                     	if	0	;tblptru may be non-zero
  6554  000BF6                     	endif
  6555  000BF6                     	if	0	;tblptru may be non-zero
  6556  000BF6                     	endif
  6557  000BF6  0008               	tblrd		*
  6558  000BF8  CFF5 F11A          	movff	tablat,printf@c
  6559  000BFC  0101               	movlb	1	; () banked
  6560  000BFE  511A               	movf	printf@c& (0+255),w,b
  6561  000C00  B4D8               	btfsc	status,2,c
  6562  000C02  0012               	return	
  6563  000C04  EF60  F000         	goto	l7937
  6564  000C08                     __end_of_printf:
  6565                           	opt stack 0
  6566                           tblptru	equ	0xFF8
  6567                           tblptrh	equ	0xFF7
  6568                           tblptrl	equ	0xFF6
  6569                           tablat	equ	0xFF5
  6570                           prodh	equ	0xFF4
  6571                           prodl	equ	0xFF3
  6572                           intcon	equ	0xFF2
  6573                           intcon2	equ	0xFF1
  6574                           postinc0	equ	0xFEE
  6575                           wreg	equ	0xFE8
  6576                           postinc1	equ	0xFE6
  6577                           postdec1	equ	0xFE5
  6578                           fsr1h	equ	0xFE2
  6579                           fsr1l	equ	0xFE1
  6580                           postinc2	equ	0xFDE
  6581                           postdec2	equ	0xFDD
  6582                           fsr2h	equ	0xFDA
  6583                           fsr2l	equ	0xFD9
  6584                           status	equ	0xFD8
  6585                           
  6586 ;; *************** function _scale *****************
  6587 ;; Defined at:
  6588 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6589 ;; Parameters:    Size  Location     Type
  6590 ;;  scl             1    wreg     char 
  6591 ;; Auto vars:     Size  Location     Type
  6592 ;;  scl             1    6[BANK0 ] char 
  6593 ;; Return value:  Size  Location     Type
  6594 ;;                  3    0[BANK0 ] char 
  6595 ;; Registers used:
  6596 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6597 ;; Tracked objects:
  6598 ;;		On entry : 0/0
  6599 ;;		On exit  : 0/0
  6600 ;;		Unchanged: 0/0
  6601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6602 ;;      Params:         0       3       0       0       0       0       0
  6603 ;;      Locals:         0       4       0       0       0       0       0
  6604 ;;      Temps:          0       0       0       0       0       0       0
  6605 ;;      Totals:         0       7       0       0       0       0       0
  6606 ;;Total ram usage:        7 bytes
  6607 ;; Hardware stack levels used:    1
  6608 ;; Hardware stack levels required when called:    5
  6609 ;; This function calls:
  6610 ;;		___awdiv
  6611 ;;		___awmod
  6612 ;;		___ftmul
  6613 ;;		___wmul
  6614 ;; This function is called by:
  6615 ;;		_printf
  6616 ;; This function uses a non-reentrant model
  6617 ;;
  6618                           
  6619                           	psect	text23
  6620  00115E                     __ptext23:
  6621                           	opt stack 0
  6622  00115E                     _scale:
  6623                           	opt stack 24
  6624                           
  6625                           ; BSR set to: 1
  6626                           ;incstack = 0
  6627                           ;scale@scl stored from wreg
  6628  00115E  0100               	movlb	0	; () banked
  6629  001160  6F66               	movwf	scale@scl& (0+255),b
  6630                           
  6631                           ;doprnt.c: 428: if(scl < 0) {
  6632  001162  0100               	movlb	0	; () banked
  6633  001164  AF66               	btfss	scale@scl& (0+255),7,b
  6634  001166  D104               	goto	l7587
  6635                           
  6636                           ; BSR set to: 0
  6637                           ;doprnt.c: 429: scl = -scl;
  6638  001168  0100               	movlb	0	; () banked
  6639  00116A  6D66               	negf	scale@scl& (0+255),b
  6640                           
  6641                           ;doprnt.c: 430: if(scl>=110)
  6642  00116C  0100               	movlb	0	; () banked
  6643  00116E  5166               	movf	scale@scl& (0+255),w,b
  6644  001170  0A80               	xorlw	128
  6645  001172  0F12               	addlw	-238
  6646  001174  A0D8               	btfss	status,0,c
  6647  001176  D094               	goto	l7577
  6648                           
  6649                           ; BSR set to: 0
  6650                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6651  001178  0E00               	movlw	0
  6652  00117A  6E20               	movwf	___wmul@multiplicand+1,c
  6653  00117C  0E03               	movlw	3
  6654  00117E  6E1F               	movwf	___wmul@multiplicand,c
  6655  001180  0E00               	movlw	0
  6656  001182  6E18               	movwf	___awdiv@divisor+1,c
  6657  001184  0E0A               	movlw	10
  6658  001186  6E17               	movwf	___awdiv@divisor,c
  6659  001188  0E00               	movlw	0
  6660  00118A  6E12               	movwf	___awmod@divisor+1,c
  6661  00118C  0E64               	movlw	100
  6662  00118E  6E11               	movwf	___awmod@divisor,c
  6663  001190  0100               	movlb	0	; () banked
  6664  001192  5166               	movf	scale@scl& (0+255),w,b
  6665  001194  6E0F               	movwf	___awmod@dividend,c
  6666  001196  6A10               	clrf	___awmod@dividend+1,c
  6667  001198  BE0F               	btfsc	___awmod@dividend,7,c
  6668  00119A  0610               	decf	___awmod@dividend+1,f,c
  6669  00119C  ECE6  F01B         	call	___awmod	;wreg free
  6670  0011A0  C00F  F015         	movff	?___awmod,___awdiv@dividend
  6671  0011A4  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  6672  0011A8  EC6B  F01A         	call	___awdiv	;wreg free
  6673  0011AC  0E09               	movlw	9
  6674  0011AE  2415               	addwf	?___awdiv,w,c
  6675  0011B0  6E1D               	movwf	___wmul@multiplier,c
  6676  0011B2  0E00               	movlw	0
  6677  0011B4  2016               	addwfc	?___awdiv+1,w,c
  6678  0011B6  6E1E               	movwf	___wmul@multiplier+1,c
  6679  0011B8  ECDB  F01E         	call	___wmul	;wreg free
  6680  0011BC  0E1B               	movlw	low __npowers_
  6681  0011BE  241D               	addwf	?___wmul,w,c
  6682  0011C0  6EF6               	movwf	tblptrl,c
  6683  0011C2  0E7F               	movlw	high __npowers_
  6684  0011C4  201E               	addwfc	?___wmul+1,w,c
  6685  0011C6  6EF7               	movwf	tblptrh,c
  6686  0011C8                     	if	0	;There are less than 3 active tblptr bytes
  6687  0011C8                     	endif
  6688  0011C8  0009               	tblrd		*+
  6689  0011CA  CFF5 F035          	movff	tablat,___ftmul@f2
  6690  0011CE  0009               	tblrd		*+
  6691  0011D0  CFF5 F036          	movff	tablat,___ftmul@f2+1
  6692  0011D4  000A               	tblrd		*-
  6693  0011D6  CFF5 F037          	movff	tablat,___ftmul@f2+2
  6694  0011DA  0E00               	movlw	0
  6695  0011DC  6E18               	movwf	___awdiv@divisor+1,c
  6696  0011DE  0E64               	movlw	100
  6697  0011E0  6E17               	movwf	___awdiv@divisor,c
  6698  0011E2  0100               	movlb	0	; () banked
  6699  0011E4  5166               	movf	scale@scl& (0+255),w,b
  6700  0011E6  6E15               	movwf	___awdiv@dividend,c
  6701  0011E8  6A16               	clrf	___awdiv@dividend+1,c
  6702  0011EA  BE15               	btfsc	___awdiv@dividend,7,c
  6703  0011EC  0616               	decf	___awdiv@dividend+1,f,c
  6704  0011EE  EC6B  F01A         	call	___awdiv	;wreg free
  6705  0011F2  0E12               	movlw	18
  6706  0011F4  2415               	addwf	?___awdiv,w,c
  6707  0011F6  6E1D               	movwf	___wmul@multiplier,c
  6708  0011F8  0E00               	movlw	0
  6709  0011FA  2016               	addwfc	?___awdiv+1,w,c
  6710  0011FC  6E1E               	movwf	___wmul@multiplier+1,c
  6711  0011FE  0E00               	movlw	0
  6712  001200  6E20               	movwf	___wmul@multiplicand+1,c
  6713  001202  0E03               	movlw	3
  6714  001204  6E1F               	movwf	___wmul@multiplicand,c
  6715  001206  ECDB  F01E         	call	___wmul	;wreg free
  6716  00120A  0E1B               	movlw	low __npowers_
  6717  00120C  241D               	addwf	?___wmul,w,c
  6718  00120E  6EF6               	movwf	tblptrl,c
  6719  001210  0E7F               	movlw	high __npowers_
  6720  001212  201E               	addwfc	?___wmul+1,w,c
  6721  001214  6EF7               	movwf	tblptrh,c
  6722  001216                     	if	0	;There are less than 3 active tblptr bytes
  6723  001216                     	endif
  6724  001216  0009               	tblrd		*+
  6725  001218  CFF5 F032          	movff	tablat,___ftmul@f1
  6726  00121C  0009               	tblrd		*+
  6727  00121E  CFF5 F033          	movff	tablat,___ftmul@f1+1
  6728  001222  000A               	tblrd		*-
  6729  001224  CFF5 F034          	movff	tablat,___ftmul@f1+2
  6730  001228  EC5B  F016         	call	___ftmul	;wreg free
  6731  00122C  C032  F063         	movff	?___ftmul,_scale$2739
  6732  001230  C033  F064         	movff	?___ftmul+1,_scale$2739+1
  6733  001234  C034  F065         	movff	?___ftmul+2,_scale$2739+2
  6734                           
  6735                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6736  001238  C063  F032         	movff	_scale$2739,___ftmul@f1
  6737  00123C  C064  F033         	movff	_scale$2739+1,___ftmul@f1+1
  6738  001240  C065  F034         	movff	_scale$2739+2,___ftmul@f1+2
  6739  001244  0E00               	movlw	0
  6740  001246  6E20               	movwf	___wmul@multiplicand+1,c
  6741  001248  0E03               	movlw	3
  6742  00124A  6E1F               	movwf	___wmul@multiplicand,c
  6743  00124C  0E00               	movlw	0
  6744  00124E  6E12               	movwf	___awmod@divisor+1,c
  6745  001250  0E0A               	movlw	10
  6746  001252  6E11               	movwf	___awmod@divisor,c
  6747  001254  0100               	movlb	0	; () banked
  6748  001256  5166               	movf	scale@scl& (0+255),w,b
  6749  001258  6E0F               	movwf	___awmod@dividend,c
  6750  00125A  6A10               	clrf	___awmod@dividend+1,c
  6751  00125C  BE0F               	btfsc	___awmod@dividend,7,c
  6752  00125E  0610               	decf	___awmod@dividend+1,f,c
  6753  001260  ECE6  F01B         	call	___awmod	;wreg free
  6754  001264  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  6755  001268  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  6756  00126C  ECDB  F01E         	call	___wmul	;wreg free
  6757  001270  0E1B               	movlw	low __npowers_
  6758  001272  241D               	addwf	?___wmul,w,c
  6759  001274  6EF6               	movwf	tblptrl,c
  6760  001276  0E7F               	movlw	high __npowers_
  6761  001278  201E               	addwfc	?___wmul+1,w,c
  6762  00127A  6EF7               	movwf	tblptrh,c
  6763  00127C                     	if	0	;There are less than 3 active tblptr bytes
  6764  00127C                     	endif
  6765  00127C  0009               	tblrd		*+
  6766  00127E  CFF5 F035          	movff	tablat,___ftmul@f2
  6767  001282  0009               	tblrd		*+
  6768  001284  CFF5 F036          	movff	tablat,___ftmul@f2+1
  6769  001288  000A               	tblrd		*-
  6770  00128A  CFF5 F037          	movff	tablat,___ftmul@f2+2
  6771  00128E  EC5B  F016         	call	___ftmul	;wreg free
  6772  001292  C032  F060         	movff	?___ftmul,?_scale
  6773  001296  C033  F061         	movff	?___ftmul+1,?_scale+1
  6774  00129A  C034  F062         	movff	?___ftmul+2,?_scale+2
  6775  00129E  0012               	return	
  6776  0012A0                     l7577:
  6777                           
  6778                           ;doprnt.c: 432: else if(scl > 10)
  6779  0012A0  0100               	movlb	0	; () banked
  6780  0012A2  5166               	movf	scale@scl& (0+255),w,b
  6781  0012A4  0A80               	xorlw	128
  6782  0012A6  0F75               	addlw	-139
  6783  0012A8  A0D8               	btfss	status,0,c
  6784  0012AA  D04F               	goto	l7583
  6785                           
  6786                           ; BSR set to: 0
  6787                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6788  0012AC  0E00               	movlw	0
  6789  0012AE  6E18               	movwf	___awdiv@divisor+1,c
  6790  0012B0  0E0A               	movlw	10
  6791  0012B2  6E17               	movwf	___awdiv@divisor,c
  6792  0012B4  0100               	movlb	0	; () banked
  6793  0012B6  5166               	movf	scale@scl& (0+255),w,b
  6794  0012B8  6E15               	movwf	___awdiv@dividend,c
  6795  0012BA  6A16               	clrf	___awdiv@dividend+1,c
  6796  0012BC  BE15               	btfsc	___awdiv@dividend,7,c
  6797  0012BE  0616               	decf	___awdiv@dividend+1,f,c
  6798  0012C0  EC6B  F01A         	call	___awdiv	;wreg free
  6799  0012C4  0E09               	movlw	9
  6800  0012C6  2415               	addwf	?___awdiv,w,c
  6801  0012C8  6E1D               	movwf	___wmul@multiplier,c
  6802  0012CA  0E00               	movlw	0
  6803  0012CC  2016               	addwfc	?___awdiv+1,w,c
  6804  0012CE  6E1E               	movwf	___wmul@multiplier+1,c
  6805  0012D0  0E00               	movlw	0
  6806  0012D2  6E20               	movwf	___wmul@multiplicand+1,c
  6807  0012D4  0E03               	movlw	3
  6808  0012D6  6E1F               	movwf	___wmul@multiplicand,c
  6809  0012D8  ECDB  F01E         	call	___wmul	;wreg free
  6810  0012DC  0E1B               	movlw	low __npowers_
  6811  0012DE  241D               	addwf	?___wmul,w,c
  6812  0012E0  6EF6               	movwf	tblptrl,c
  6813  0012E2  0E7F               	movlw	high __npowers_
  6814  0012E4  201E               	addwfc	?___wmul+1,w,c
  6815  0012E6  6EF7               	movwf	tblptrh,c
  6816  0012E8                     	if	0	;There are less than 3 active tblptr bytes
  6817  0012E8                     	endif
  6818  0012E8  0009               	tblrd		*+
  6819  0012EA  CFF5 F032          	movff	tablat,___ftmul@f1
  6820  0012EE  0009               	tblrd		*+
  6821  0012F0  CFF5 F033          	movff	tablat,___ftmul@f1+1
  6822  0012F4  000A               	tblrd		*-
  6823  0012F6  CFF5 F034          	movff	tablat,___ftmul@f1+2
  6824  0012FA  0E00               	movlw	0
  6825  0012FC  6E20               	movwf	___wmul@multiplicand+1,c
  6826  0012FE  0E03               	movlw	3
  6827  001300  6E1F               	movwf	___wmul@multiplicand,c
  6828  001302  0E00               	movlw	0
  6829  001304  6E12               	movwf	___awmod@divisor+1,c
  6830  001306  0E0A               	movlw	10
  6831  001308  6E11               	movwf	___awmod@divisor,c
  6832  00130A  0100               	movlb	0	; () banked
  6833  00130C  5166               	movf	scale@scl& (0+255),w,b
  6834  00130E  6E0F               	movwf	___awmod@dividend,c
  6835  001310  6A10               	clrf	___awmod@dividend+1,c
  6836  001312  BE0F               	btfsc	___awmod@dividend,7,c
  6837  001314  0610               	decf	___awmod@dividend+1,f,c
  6838  001316  ECE6  F01B         	call	___awmod	;wreg free
  6839  00131A  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  6840  00131E  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  6841  001322  ECDB  F01E         	call	___wmul	;wreg free
  6842  001326  0E1B               	movlw	low __npowers_
  6843  001328  241D               	addwf	?___wmul,w,c
  6844  00132A  6EF6               	movwf	tblptrl,c
  6845  00132C  0E7F               	movlw	high __npowers_
  6846  00132E  201E               	addwfc	?___wmul+1,w,c
  6847  001330  6EF7               	movwf	tblptrh,c
  6848  001332                     	if	0	;There are less than 3 active tblptr bytes
  6849  001332                     	endif
  6850  001332  0009               	tblrd		*+
  6851  001334  CFF5 F035          	movff	tablat,___ftmul@f2
  6852  001338  0009               	tblrd		*+
  6853  00133A  CFF5 F036          	movff	tablat,___ftmul@f2+1
  6854  00133E  000A               	tblrd		*-
  6855  001340  CFF5 F037          	movff	tablat,___ftmul@f2+2
  6856  001344  EC5B  F016         	call	___ftmul	;wreg free
  6857  001348  D7A4               	goto	L6
  6858  00134A                     l7583:
  6859                           
  6860                           ;doprnt.c: 434: return _npowers_[scl];
  6861  00134A  0100               	movlb	0	; () banked
  6862  00134C  5166               	movf	scale@scl& (0+255),w,b
  6863  00134E  0D03               	mullw	3
  6864  001350  0E1B               	movlw	low __npowers_
  6865  001352  24F3               	addwf	prodl,w,c
  6866  001354  6EF6               	movwf	tblptrl,c
  6867  001356  0E7F               	movlw	high __npowers_
  6868  001358  20F4               	addwfc	prodh,w,c
  6869  00135A  6EF7               	movwf	tblptrh,c
  6870  00135C                     	if	0	;There are less than 3 active tblptr bytes
  6871  00135C                     	endif
  6872  00135C  0009               	tblrd		*+
  6873  00135E  CFF5 F060          	movff	tablat,?_scale
  6874  001362  0009               	tblrd		*+
  6875  001364  CFF5 F061          	movff	tablat,?_scale+1
  6876  001368  000A               	tblrd		*-
  6877  00136A  CFF5 F062          	movff	tablat,?_scale+2
  6878                           
  6879                           ; BSR set to: 0
  6880  00136E  0012               	return	
  6881  001370                     l7587:
  6882                           
  6883                           ; BSR set to: 0
  6884                           ;doprnt.c: 435: }
  6885                           ;doprnt.c: 436: if(scl>=110)
  6886  001370  0100               	movlb	0	; () banked
  6887  001372  5166               	movf	scale@scl& (0+255),w,b
  6888  001374  0A80               	xorlw	128
  6889  001376  0F12               	addlw	-238
  6890  001378  A0D8               	btfss	status,0,c
  6891  00137A  D094               	goto	l7595
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6895  00137C  0E00               	movlw	0
  6896  00137E  6E20               	movwf	___wmul@multiplicand+1,c
  6897  001380  0E03               	movlw	3
  6898  001382  6E1F               	movwf	___wmul@multiplicand,c
  6899  001384  0E00               	movlw	0
  6900  001386  6E18               	movwf	___awdiv@divisor+1,c
  6901  001388  0E0A               	movlw	10
  6902  00138A  6E17               	movwf	___awdiv@divisor,c
  6903  00138C  0E00               	movlw	0
  6904  00138E  6E12               	movwf	___awmod@divisor+1,c
  6905  001390  0E64               	movlw	100
  6906  001392  6E11               	movwf	___awmod@divisor,c
  6907  001394  0100               	movlb	0	; () banked
  6908  001396  5166               	movf	scale@scl& (0+255),w,b
  6909  001398  6E0F               	movwf	___awmod@dividend,c
  6910  00139A  6A10               	clrf	___awmod@dividend+1,c
  6911  00139C  BE0F               	btfsc	___awmod@dividend,7,c
  6912  00139E  0610               	decf	___awmod@dividend+1,f,c
  6913  0013A0  ECE6  F01B         	call	___awmod	;wreg free
  6914  0013A4  C00F  F015         	movff	?___awmod,___awdiv@dividend
  6915  0013A8  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  6916  0013AC  EC6B  F01A         	call	___awdiv	;wreg free
  6917  0013B0  0E09               	movlw	9
  6918  0013B2  2415               	addwf	?___awdiv,w,c
  6919  0013B4  6E1D               	movwf	___wmul@multiplier,c
  6920  0013B6  0E00               	movlw	0
  6921  0013B8  2016               	addwfc	?___awdiv+1,w,c
  6922  0013BA  6E1E               	movwf	___wmul@multiplier+1,c
  6923  0013BC  ECDB  F01E         	call	___wmul	;wreg free
  6924  0013C0  0E42               	movlw	low __powers_
  6925  0013C2  241D               	addwf	?___wmul,w,c
  6926  0013C4  6EF6               	movwf	tblptrl,c
  6927  0013C6  0E7F               	movlw	high __powers_
  6928  0013C8  201E               	addwfc	?___wmul+1,w,c
  6929  0013CA  6EF7               	movwf	tblptrh,c
  6930  0013CC                     	if	0	;There are less than 3 active tblptr bytes
  6931  0013CC                     	endif
  6932  0013CC  0009               	tblrd		*+
  6933  0013CE  CFF5 F035          	movff	tablat,___ftmul@f2
  6934  0013D2  0009               	tblrd		*+
  6935  0013D4  CFF5 F036          	movff	tablat,___ftmul@f2+1
  6936  0013D8  000A               	tblrd		*-
  6937  0013DA  CFF5 F037          	movff	tablat,___ftmul@f2+2
  6938  0013DE  0E00               	movlw	0
  6939  0013E0  6E18               	movwf	___awdiv@divisor+1,c
  6940  0013E2  0E64               	movlw	100
  6941  0013E4  6E17               	movwf	___awdiv@divisor,c
  6942  0013E6  0100               	movlb	0	; () banked
  6943  0013E8  5166               	movf	scale@scl& (0+255),w,b
  6944  0013EA  6E15               	movwf	___awdiv@dividend,c
  6945  0013EC  6A16               	clrf	___awdiv@dividend+1,c
  6946  0013EE  BE15               	btfsc	___awdiv@dividend,7,c
  6947  0013F0  0616               	decf	___awdiv@dividend+1,f,c
  6948  0013F2  EC6B  F01A         	call	___awdiv	;wreg free
  6949  0013F6  0E12               	movlw	18
  6950  0013F8  2415               	addwf	?___awdiv,w,c
  6951  0013FA  6E1D               	movwf	___wmul@multiplier,c
  6952  0013FC  0E00               	movlw	0
  6953  0013FE  2016               	addwfc	?___awdiv+1,w,c
  6954  001400  6E1E               	movwf	___wmul@multiplier+1,c
  6955  001402  0E00               	movlw	0
  6956  001404  6E20               	movwf	___wmul@multiplicand+1,c
  6957  001406  0E03               	movlw	3
  6958  001408  6E1F               	movwf	___wmul@multiplicand,c
  6959  00140A  ECDB  F01E         	call	___wmul	;wreg free
  6960  00140E  0E42               	movlw	low __powers_
  6961  001410  241D               	addwf	?___wmul,w,c
  6962  001412  6EF6               	movwf	tblptrl,c
  6963  001414  0E7F               	movlw	high __powers_
  6964  001416  201E               	addwfc	?___wmul+1,w,c
  6965  001418  6EF7               	movwf	tblptrh,c
  6966  00141A                     	if	0	;There are less than 3 active tblptr bytes
  6967  00141A                     	endif
  6968  00141A  0009               	tblrd		*+
  6969  00141C  CFF5 F032          	movff	tablat,___ftmul@f1
  6970  001420  0009               	tblrd		*+
  6971  001422  CFF5 F033          	movff	tablat,___ftmul@f1+1
  6972  001426  000A               	tblrd		*-
  6973  001428  CFF5 F034          	movff	tablat,___ftmul@f1+2
  6974  00142C  EC5B  F016         	call	___ftmul	;wreg free
  6975  001430  C032  F063         	movff	?___ftmul,_scale$2739
  6976  001434  C033  F064         	movff	?___ftmul+1,_scale$2739+1
  6977  001438  C034  F065         	movff	?___ftmul+2,_scale$2739+2
  6978                           
  6979                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6980  00143C  C063  F032         	movff	_scale$2739,___ftmul@f1
  6981  001440  C064  F033         	movff	_scale$2739+1,___ftmul@f1+1
  6982  001444  C065  F034         	movff	_scale$2739+2,___ftmul@f1+2
  6983  001448  0E00               	movlw	0
  6984  00144A  6E20               	movwf	___wmul@multiplicand+1,c
  6985  00144C  0E03               	movlw	3
  6986  00144E  6E1F               	movwf	___wmul@multiplicand,c
  6987  001450  0E00               	movlw	0
  6988  001452  6E12               	movwf	___awmod@divisor+1,c
  6989  001454  0E0A               	movlw	10
  6990  001456  6E11               	movwf	___awmod@divisor,c
  6991  001458  0100               	movlb	0	; () banked
  6992  00145A  5166               	movf	scale@scl& (0+255),w,b
  6993  00145C  6E0F               	movwf	___awmod@dividend,c
  6994  00145E  6A10               	clrf	___awmod@dividend+1,c
  6995  001460  BE0F               	btfsc	___awmod@dividend,7,c
  6996  001462  0610               	decf	___awmod@dividend+1,f,c
  6997  001464  ECE6  F01B         	call	___awmod	;wreg free
  6998  001468  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  6999  00146C  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  7000  001470  ECDB  F01E         	call	___wmul	;wreg free
  7001  001474  0E42               	movlw	low __powers_
  7002  001476  241D               	addwf	?___wmul,w,c
  7003  001478  6EF6               	movwf	tblptrl,c
  7004  00147A  0E7F               	movlw	high __powers_
  7005  00147C  201E               	addwfc	?___wmul+1,w,c
  7006  00147E  6EF7               	movwf	tblptrh,c
  7007  001480                     	if	0	;There are less than 3 active tblptr bytes
  7008  001480                     	endif
  7009  001480  0009               	tblrd		*+
  7010  001482  CFF5 F035          	movff	tablat,___ftmul@f2
  7011  001486  0009               	tblrd		*+
  7012  001488  CFF5 F036          	movff	tablat,___ftmul@f2+1
  7013  00148C  000A               	tblrd		*-
  7014  00148E  CFF5 F037          	movff	tablat,___ftmul@f2+2
  7015  001492  EC5B  F016         	call	___ftmul	;wreg free
  7016  001496  C032  F060         	movff	?___ftmul,?_scale
  7017  00149A  C033  F061         	movff	?___ftmul+1,?_scale+1
  7018  00149E  C034  F062         	movff	?___ftmul+2,?_scale+2
  7019  0014A2  0012               	return	
  7020  0014A4                     l7595:
  7021                           
  7022                           ;doprnt.c: 438: else if(scl > 10)
  7023  0014A4  0100               	movlb	0	; () banked
  7024  0014A6  5166               	movf	scale@scl& (0+255),w,b
  7025  0014A8  0A80               	xorlw	128
  7026  0014AA  0F75               	addlw	-139
  7027  0014AC  A0D8               	btfss	status,0,c
  7028  0014AE  D04F               	goto	l7601
  7029                           
  7030                           ; BSR set to: 0
  7031                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7032  0014B0  0E00               	movlw	0
  7033  0014B2  6E18               	movwf	___awdiv@divisor+1,c
  7034  0014B4  0E0A               	movlw	10
  7035  0014B6  6E17               	movwf	___awdiv@divisor,c
  7036  0014B8  0100               	movlb	0	; () banked
  7037  0014BA  5166               	movf	scale@scl& (0+255),w,b
  7038  0014BC  6E15               	movwf	___awdiv@dividend,c
  7039  0014BE  6A16               	clrf	___awdiv@dividend+1,c
  7040  0014C0  BE15               	btfsc	___awdiv@dividend,7,c
  7041  0014C2  0616               	decf	___awdiv@dividend+1,f,c
  7042  0014C4  EC6B  F01A         	call	___awdiv	;wreg free
  7043  0014C8  0E09               	movlw	9
  7044  0014CA  2415               	addwf	?___awdiv,w,c
  7045  0014CC  6E1D               	movwf	___wmul@multiplier,c
  7046  0014CE  0E00               	movlw	0
  7047  0014D0  2016               	addwfc	?___awdiv+1,w,c
  7048  0014D2  6E1E               	movwf	___wmul@multiplier+1,c
  7049  0014D4  0E00               	movlw	0
  7050  0014D6  6E20               	movwf	___wmul@multiplicand+1,c
  7051  0014D8  0E03               	movlw	3
  7052  0014DA  6E1F               	movwf	___wmul@multiplicand,c
  7053  0014DC  ECDB  F01E         	call	___wmul	;wreg free
  7054  0014E0  0E42               	movlw	low __powers_
  7055  0014E2  241D               	addwf	?___wmul,w,c
  7056  0014E4  6EF6               	movwf	tblptrl,c
  7057  0014E6  0E7F               	movlw	high __powers_
  7058  0014E8  201E               	addwfc	?___wmul+1,w,c
  7059  0014EA  6EF7               	movwf	tblptrh,c
  7060  0014EC                     	if	0	;There are less than 3 active tblptr bytes
  7061  0014EC                     	endif
  7062  0014EC  0009               	tblrd		*+
  7063  0014EE  CFF5 F032          	movff	tablat,___ftmul@f1
  7064  0014F2  0009               	tblrd		*+
  7065  0014F4  CFF5 F033          	movff	tablat,___ftmul@f1+1
  7066  0014F8  000A               	tblrd		*-
  7067  0014FA  CFF5 F034          	movff	tablat,___ftmul@f1+2
  7068  0014FE  0E00               	movlw	0
  7069  001500  6E20               	movwf	___wmul@multiplicand+1,c
  7070  001502  0E03               	movlw	3
  7071  001504  6E1F               	movwf	___wmul@multiplicand,c
  7072  001506  0E00               	movlw	0
  7073  001508  6E12               	movwf	___awmod@divisor+1,c
  7074  00150A  0E0A               	movlw	10
  7075  00150C  6E11               	movwf	___awmod@divisor,c
  7076  00150E  0100               	movlb	0	; () banked
  7077  001510  5166               	movf	scale@scl& (0+255),w,b
  7078  001512  6E0F               	movwf	___awmod@dividend,c
  7079  001514  6A10               	clrf	___awmod@dividend+1,c
  7080  001516  BE0F               	btfsc	___awmod@dividend,7,c
  7081  001518  0610               	decf	___awmod@dividend+1,f,c
  7082  00151A  ECE6  F01B         	call	___awmod	;wreg free
  7083  00151E  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  7084  001522  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  7085  001526  ECDB  F01E         	call	___wmul	;wreg free
  7086  00152A  0E42               	movlw	low __powers_
  7087  00152C  241D               	addwf	?___wmul,w,c
  7088  00152E  6EF6               	movwf	tblptrl,c
  7089  001530  0E7F               	movlw	high __powers_
  7090  001532  201E               	addwfc	?___wmul+1,w,c
  7091  001534  6EF7               	movwf	tblptrh,c
  7092  001536                     	if	0	;There are less than 3 active tblptr bytes
  7093  001536                     	endif
  7094  001536  0009               	tblrd		*+
  7095  001538  CFF5 F035          	movff	tablat,___ftmul@f2
  7096  00153C  0009               	tblrd		*+
  7097  00153E  CFF5 F036          	movff	tablat,___ftmul@f2+1
  7098  001542  000A               	tblrd		*-
  7099  001544  CFF5 F037          	movff	tablat,___ftmul@f2+2
  7100  001548  EC5B  F016         	call	___ftmul	;wreg free
  7101  00154C  D7A4               	goto	L7
  7102  00154E                     l7601:
  7103                           
  7104                           ;doprnt.c: 440: return _powers_[scl];
  7105  00154E  0100               	movlb	0	; () banked
  7106  001550  5166               	movf	scale@scl& (0+255),w,b
  7107  001552  0D03               	mullw	3
  7108  001554  0E42               	movlw	low __powers_
  7109  001556  24F3               	addwf	prodl,w,c
  7110  001558  6EF6               	movwf	tblptrl,c
  7111  00155A  0E7F               	movlw	high __powers_
  7112  00155C  20F4               	addwfc	prodh,w,c
  7113  00155E  6EF7               	movwf	tblptrh,c
  7114  001560                     	if	0	;There are less than 3 active tblptr bytes
  7115  001560                     	endif
  7116  001560  0009               	tblrd		*+
  7117  001562  CFF5 F060          	movff	tablat,?_scale
  7118  001566  0009               	tblrd		*+
  7119  001568  CFF5 F061          	movff	tablat,?_scale+1
  7120  00156C  000A               	tblrd		*-
  7121  00156E  CFF5 F062          	movff	tablat,?_scale+2
  7122  001572  0012               	return	
  7123  001574                     __end_of_scale:
  7124                           	opt stack 0
  7125                           tblptru	equ	0xFF8
  7126                           tblptrh	equ	0xFF7
  7127                           tblptrl	equ	0xFF6
  7128                           tablat	equ	0xFF5
  7129                           prodh	equ	0xFF4
  7130                           prodl	equ	0xFF3
  7131                           intcon	equ	0xFF2
  7132                           intcon2	equ	0xFF1
  7133                           postinc0	equ	0xFEE
  7134                           wreg	equ	0xFE8
  7135                           postinc1	equ	0xFE6
  7136                           postdec1	equ	0xFE5
  7137                           fsr1h	equ	0xFE2
  7138                           fsr1l	equ	0xFE1
  7139                           postinc2	equ	0xFDE
  7140                           postdec2	equ	0xFDD
  7141                           fsr2h	equ	0xFDA
  7142                           fsr2l	equ	0xFD9
  7143                           status	equ	0xFD8
  7144                           
  7145 ;; *************** function _putch *****************
  7146 ;; Defined at:
  7147 ;;		line 162 in file "mcc_generated_files/eusart1.c"
  7148 ;; Parameters:    Size  Location     Type
  7149 ;;  txData          1    wreg     unsigned char 
  7150 ;; Auto vars:     Size  Location     Type
  7151 ;;  txData          1   15[COMRAM] unsigned char 
  7152 ;; Return value:  Size  Location     Type
  7153 ;;                  1    wreg      void 
  7154 ;; Registers used:
  7155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7156 ;; Tracked objects:
  7157 ;;		On entry : 0/0
  7158 ;;		On exit  : 0/0
  7159 ;;		Unchanged: 0/0
  7160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7161 ;;      Params:         0       0       0       0       0       0       0
  7162 ;;      Locals:         1       0       0       0       0       0       0
  7163 ;;      Temps:          0       0       0       0       0       0       0
  7164 ;;      Totals:         1       0       0       0       0       0       0
  7165 ;;Total ram usage:        1 bytes
  7166 ;; Hardware stack levels used:    1
  7167 ;; Hardware stack levels required when called:    4
  7168 ;; This function calls:
  7169 ;;		_EUSART1_Write
  7170 ;; This function is called by:
  7171 ;;		_printf
  7172 ;; This function uses a non-reentrant model
  7173 ;;
  7174                           
  7175                           	psect	text24
  7176  003F0A                     __ptext24:
  7177                           	opt stack 0
  7178  003F0A                     _putch:
  7179                           	opt stack 25
  7180                           
  7181                           ;incstack = 0
  7182                           ;putch@txData stored from wreg
  7183  003F0A  6E10               	movwf	putch@txData,c
  7184                           
  7185                           ;eusart1.c: 164: EUSART1_Write(txData);
  7186  003F0C  5010               	movf	putch@txData,w,c
  7187  003F0E  ECC2  F01D         	call	_EUSART1_Write
  7188  003F12  0012               	return		;funcret
  7189  003F14                     __end_of_putch:
  7190                           	opt stack 0
  7191                           tblptru	equ	0xFF8
  7192                           tblptrh	equ	0xFF7
  7193                           tblptrl	equ	0xFF6
  7194                           tablat	equ	0xFF5
  7195                           prodh	equ	0xFF4
  7196                           prodl	equ	0xFF3
  7197                           intcon	equ	0xFF2
  7198                           intcon2	equ	0xFF1
  7199                           postinc0	equ	0xFEE
  7200                           wreg	equ	0xFE8
  7201                           postinc1	equ	0xFE6
  7202                           postdec1	equ	0xFE5
  7203                           fsr1h	equ	0xFE2
  7204                           fsr1l	equ	0xFE1
  7205                           postinc2	equ	0xFDE
  7206                           postdec2	equ	0xFDD
  7207                           fsr2h	equ	0xFDA
  7208                           fsr2l	equ	0xFD9
  7209                           status	equ	0xFD8
  7210                           
  7211 ;; *************** function _EUSART1_Write *****************
  7212 ;; Defined at:
  7213 ;;		line 134 in file "mcc_generated_files/eusart1.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;  txData          1    wreg     unsigned char 
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;  txData          1   14[COMRAM] unsigned char 
  7218 ;; Return value:  Size  Location     Type
  7219 ;;                  1    wreg      void 
  7220 ;; Registers used:
  7221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7222 ;; Tracked objects:
  7223 ;;		On entry : 0/0
  7224 ;;		On exit  : 0/0
  7225 ;;		Unchanged: 0/0
  7226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7227 ;;      Params:         0       0       0       0       0       0       0
  7228 ;;      Locals:         1       0       0       0       0       0       0
  7229 ;;      Temps:          0       0       0       0       0       0       0
  7230 ;;      Totals:         1       0       0       0       0       0       0
  7231 ;;Total ram usage:        1 bytes
  7232 ;; Hardware stack levels used:    1
  7233 ;; Hardware stack levels required when called:    3
  7234 ;; This function calls:
  7235 ;;		Nothing
  7236 ;; This function is called by:
  7237 ;;		_putch
  7238 ;; This function uses a non-reentrant model
  7239 ;;
  7240                           
  7241                           	psect	text25
  7242  003B84                     __ptext25:
  7243                           	opt stack 0
  7244  003B84                     _EUSART1_Write:
  7245                           	opt stack 25
  7246                           
  7247                           ;incstack = 0
  7248                           ;EUSART1_Write@txData stored from wreg
  7249  003B84  6E0F               	movwf	EUSART1_Write@txData,c
  7250  003B86                     l7341:
  7251  003B86  0100               	movlb	0	; () banked
  7252  003B88  51F4               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
  7253  003B8A  B4D8               	btfsc	status,2,c
  7254  003B8C  D7FC               	goto	l7341
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;eusart1.c: 138: }
  7258                           ;eusart1.c: 140: if(0 == PIE1bits.TX1IE)
  7259  003B8E  B89D               	btfsc	3997,4,c	;volatile
  7260  003B90  D003               	goto	l288
  7261                           
  7262                           ; BSR set to: 0
  7263                           ;eusart1.c: 141: {
  7264                           ;eusart1.c: 142: TXREG1 = txData;
  7265  003B92  C00F  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  7266                           
  7267                           ;eusart1.c: 143: }
  7268  003B96  D013               	goto	l7355
  7269  003B98                     l288:
  7270                           
  7271                           ; BSR set to: 0
  7272                           ;eusart1.c: 144: else
  7273                           ;eusart1.c: 145: {
  7274                           ;eusart1.c: 146: PIE1bits.TX1IE = 0;
  7275  003B98  989D               	bcf	3997,4,c	;volatile
  7276                           
  7277                           ; BSR set to: 0
  7278                           ;eusart1.c: 147: eusart1TxBuffer[eusart1TxHead++] = txData;
  7279  003B9A  504B               	movf	_eusart1TxHead,w,c
  7280  003B9C  0D01               	mullw	1
  7281  003B9E  0ED6               	movlw	low _eusart1TxBuffer
  7282  003BA0  24F3               	addwf	prodl,w,c
  7283  003BA2  6ED9               	movwf	fsr2l,c
  7284  003BA4  0E01               	movlw	high _eusart1TxBuffer
  7285  003BA6  20F4               	addwfc	prodh,w,c
  7286  003BA8  6EDA               	movwf	fsr2h,c
  7287  003BAA  C00F  FFDF         	movff	EUSART1_Write@txData,indf2
  7288                           
  7289                           ; BSR set to: 0
  7290  003BAE  2A4B               	incf	_eusart1TxHead,f,c
  7291                           
  7292                           ; BSR set to: 0
  7293                           ;eusart1.c: 148: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  7294  003BB0  0E07               	movlw	7
  7295  003BB2  644B               	cpfsgt	_eusart1TxHead,c
  7296  003BB4  D002               	goto	l7353
  7297                           
  7298                           ; BSR set to: 0
  7299                           ;eusart1.c: 149: {
  7300                           ;eusart1.c: 150: eusart1TxHead = 0;
  7301  003BB6  0E00               	movlw	0
  7302  003BB8  6E4B               	movwf	_eusart1TxHead,c
  7303  003BBA                     l7353:
  7304                           
  7305                           ; BSR set to: 0
  7306                           ;eusart1.c: 151: }
  7307                           ;eusart1.c: 152: eusart1TxBufferRemaining--;
  7308  003BBA  0100               	movlb	0	; () banked
  7309  003BBC  07F4               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  7310  003BBE                     l7355:
  7311                           
  7312                           ; BSR set to: 0
  7313                           ;eusart1.c: 153: }
  7314                           ;eusart1.c: 154: PIE1bits.TX1IE = 1;
  7315  003BBE  889D               	bsf	3997,4,c	;volatile
  7316                           
  7317                           ; BSR set to: 0
  7318  003BC0  0012               	return		;funcret
  7319  003BC2                     __end_of_EUSART1_Write:
  7320                           	opt stack 0
  7321                           tblptru	equ	0xFF8
  7322                           tblptrh	equ	0xFF7
  7323                           tblptrl	equ	0xFF6
  7324                           tablat	equ	0xFF5
  7325                           prodh	equ	0xFF4
  7326                           prodl	equ	0xFF3
  7327                           intcon	equ	0xFF2
  7328                           intcon2	equ	0xFF1
  7329                           postinc0	equ	0xFEE
  7330                           wreg	equ	0xFE8
  7331                           postinc1	equ	0xFE6
  7332                           postdec1	equ	0xFE5
  7333                           fsr1h	equ	0xFE2
  7334                           fsr1l	equ	0xFE1
  7335                           indf2	equ	0xFDF
  7336                           postinc2	equ	0xFDE
  7337                           postdec2	equ	0xFDD
  7338                           fsr2h	equ	0xFDA
  7339                           fsr2l	equ	0xFD9
  7340                           status	equ	0xFD8
  7341                           
  7342 ;; *************** function _isdigit *****************
  7343 ;; Defined at:
  7344 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7345 ;; Parameters:    Size  Location     Type
  7346 ;;  c               1    wreg     unsigned char 
  7347 ;; Auto vars:     Size  Location     Type
  7348 ;;  c               1   16[COMRAM] unsigned char 
  7349 ;; Return value:  Size  Location     Type
  7350 ;;		None               void
  7351 ;; Registers used:
  7352 ;;		wreg, status,2, status,0
  7353 ;; Tracked objects:
  7354 ;;		On entry : 0/0
  7355 ;;		On exit  : 0/0
  7356 ;;		Unchanged: 0/0
  7357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7358 ;;      Params:         0       0       0       0       0       0       0
  7359 ;;      Locals:         2       0       0       0       0       0       0
  7360 ;;      Temps:          1       0       0       0       0       0       0
  7361 ;;      Totals:         3       0       0       0       0       0       0
  7362 ;;Total ram usage:        3 bytes
  7363 ;; Hardware stack levels used:    1
  7364 ;; Hardware stack levels required when called:    3
  7365 ;; This function calls:
  7366 ;;		Nothing
  7367 ;; This function is called by:
  7368 ;;		_printf
  7369 ;; This function uses a non-reentrant model
  7370 ;;
  7371                           
  7372                           	psect	text26
  7373  003E48                     __ptext26:
  7374                           	opt stack 0
  7375  003E48                     _isdigit:
  7376                           	opt stack 26
  7377                           
  7378                           ; BSR set to: 0
  7379                           ;incstack = 0
  7380                           ;isdigit@c stored from wreg
  7381  003E48  6E11               	movwf	isdigit@c,c
  7382  003E4A  0E00               	movlw	0
  7383  003E4C  6E10               	movwf	_isdigit$2175,c
  7384  003E4E  0E3A               	movlw	58
  7385  003E50  6011               	cpfslt	isdigit@c,c
  7386  003E52  D005               	goto	l7613
  7387  003E54  0E2F               	movlw	47
  7388  003E56  6411               	cpfsgt	isdigit@c,c
  7389  003E58  D002               	goto	l7613
  7390  003E5A  0E01               	movlw	1
  7391  003E5C  6E10               	movwf	_isdigit$2175,c
  7392  003E5E                     l7613:
  7393  003E5E  C010  F00F         	movff	_isdigit$2175,??_isdigit
  7394  003E62  300F               	rrcf	??_isdigit,w,c
  7395  003E64  0012               	return	
  7396  003E66                     __end_of_isdigit:
  7397                           	opt stack 0
  7398                           tblptru	equ	0xFF8
  7399                           tblptrh	equ	0xFF7
  7400                           tblptrl	equ	0xFF6
  7401                           tablat	equ	0xFF5
  7402                           prodh	equ	0xFF4
  7403                           prodl	equ	0xFF3
  7404                           intcon	equ	0xFF2
  7405                           intcon2	equ	0xFF1
  7406                           postinc0	equ	0xFEE
  7407                           wreg	equ	0xFE8
  7408                           postinc1	equ	0xFE6
  7409                           postdec1	equ	0xFE5
  7410                           fsr1h	equ	0xFE2
  7411                           fsr1l	equ	0xFE1
  7412                           indf2	equ	0xFDF
  7413                           postinc2	equ	0xFDE
  7414                           postdec2	equ	0xFDD
  7415                           fsr2h	equ	0xFDA
  7416                           fsr2l	equ	0xFD9
  7417                           status	equ	0xFD8
  7418                           
  7419 ;; *************** function _fround *****************
  7420 ;; Defined at:
  7421 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;  prec            1    wreg     unsigned char 
  7424 ;; Auto vars:     Size  Location     Type
  7425 ;;  prec            1    9[BANK0 ] unsigned char 
  7426 ;; Return value:  Size  Location     Type
  7427 ;;                  3    0[BANK0 ] unsigned char 
  7428 ;; Registers used:
  7429 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7430 ;; Tracked objects:
  7431 ;;		On entry : 0/0
  7432 ;;		On exit  : 0/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7435 ;;      Params:         0       3       0       0       0       0       0
  7436 ;;      Locals:         0       7       0       0       0       0       0
  7437 ;;      Temps:          0       0       0       0       0       0       0
  7438 ;;      Totals:         0      10       0       0       0       0       0
  7439 ;;Total ram usage:       10 bytes
  7440 ;; Hardware stack levels used:    1
  7441 ;; Hardware stack levels required when called:    5
  7442 ;; This function calls:
  7443 ;;		___awdiv
  7444 ;;		___awmod
  7445 ;;		___ftmul
  7446 ;;		___wmul
  7447 ;; This function is called by:
  7448 ;;		_printf
  7449 ;; This function uses a non-reentrant model
  7450 ;;
  7451                           
  7452                           	psect	text27
  7453  001DE2                     __ptext27:
  7454                           	opt stack 0
  7455  001DE2                     _fround:
  7456                           	opt stack 24
  7457                           
  7458                           ;incstack = 0
  7459                           ;fround@prec stored from wreg
  7460  001DE2  0100               	movlb	0	; () banked
  7461  001DE4  6F69               	movwf	fround@prec& (0+255),b
  7462                           
  7463                           ;doprnt.c: 413: if(prec>=110)
  7464  001DE6  0E6D               	movlw	109
  7465  001DE8  0100               	movlb	0	; () banked
  7466  001DEA  6569               	cpfsgt	fround@prec& (0+255),b
  7467  001DEC  D09F               	goto	l7555
  7468                           
  7469                           ; BSR set to: 0
  7470                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7471  001DEE  0E00               	movlw	0
  7472  001DF0  6E20               	movwf	___wmul@multiplicand+1,c
  7473  001DF2  0E03               	movlw	3
  7474  001DF4  6E1F               	movwf	___wmul@multiplicand,c
  7475  001DF6  0E00               	movlw	0
  7476  001DF8  6E18               	movwf	___awdiv@divisor+1,c
  7477  001DFA  0E0A               	movlw	10
  7478  001DFC  6E17               	movwf	___awdiv@divisor,c
  7479  001DFE  0E00               	movlw	0
  7480  001E00  6E12               	movwf	___awmod@divisor+1,c
  7481  001E02  0E64               	movlw	100
  7482  001E04  6E11               	movwf	___awmod@divisor,c
  7483  001E06  C069  F00F         	movff	fround@prec,___awmod@dividend
  7484  001E0A  6A10               	clrf	___awmod@dividend+1,c
  7485  001E0C  ECE6  F01B         	call	___awmod	;wreg free
  7486  001E10  C00F  F015         	movff	?___awmod,___awdiv@dividend
  7487  001E14  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  7488  001E18  EC6B  F01A         	call	___awdiv	;wreg free
  7489  001E1C  0E09               	movlw	9
  7490  001E1E  2415               	addwf	?___awdiv,w,c
  7491  001E20  6E1D               	movwf	___wmul@multiplier,c
  7492  001E22  0E00               	movlw	0
  7493  001E24  2016               	addwfc	?___awdiv+1,w,c
  7494  001E26  6E1E               	movwf	___wmul@multiplier+1,c
  7495  001E28  ECDB  F01E         	call	___wmul	;wreg free
  7496  001E2C  0E1B               	movlw	low __npowers_
  7497  001E2E  241D               	addwf	?___wmul,w,c
  7498  001E30  6EF6               	movwf	tblptrl,c
  7499  001E32  0E7F               	movlw	high __npowers_
  7500  001E34  201E               	addwfc	?___wmul+1,w,c
  7501  001E36  6EF7               	movwf	tblptrh,c
  7502  001E38                     	if	0	;There are less than 3 active tblptr bytes
  7503  001E38                     	endif
  7504  001E38  0009               	tblrd		*+
  7505  001E3A  CFF5 F035          	movff	tablat,___ftmul@f2
  7506  001E3E  0009               	tblrd		*+
  7507  001E40  CFF5 F036          	movff	tablat,___ftmul@f2+1
  7508  001E44  000A               	tblrd		*-
  7509  001E46  CFF5 F037          	movff	tablat,___ftmul@f2+2
  7510  001E4A  0E00               	movlw	0
  7511  001E4C  6E18               	movwf	___awdiv@divisor+1,c
  7512  001E4E  0E64               	movlw	100
  7513  001E50  6E17               	movwf	___awdiv@divisor,c
  7514  001E52  C069  F015         	movff	fround@prec,___awdiv@dividend
  7515  001E56  6A16               	clrf	___awdiv@dividend+1,c
  7516  001E58  EC6B  F01A         	call	___awdiv	;wreg free
  7517  001E5C  0E12               	movlw	18
  7518  001E5E  2415               	addwf	?___awdiv,w,c
  7519  001E60  6E1D               	movwf	___wmul@multiplier,c
  7520  001E62  0E00               	movlw	0
  7521  001E64  2016               	addwfc	?___awdiv+1,w,c
  7522  001E66  6E1E               	movwf	___wmul@multiplier+1,c
  7523  001E68  0E00               	movlw	0
  7524  001E6A  6E20               	movwf	___wmul@multiplicand+1,c
  7525  001E6C  0E03               	movlw	3
  7526  001E6E  6E1F               	movwf	___wmul@multiplicand,c
  7527  001E70  ECDB  F01E         	call	___wmul	;wreg free
  7528  001E74  0E1B               	movlw	low __npowers_
  7529  001E76  241D               	addwf	?___wmul,w,c
  7530  001E78  6EF6               	movwf	tblptrl,c
  7531  001E7A  0E7F               	movlw	high __npowers_
  7532  001E7C  201E               	addwfc	?___wmul+1,w,c
  7533  001E7E  6EF7               	movwf	tblptrh,c
  7534  001E80                     	if	0	;There are less than 3 active tblptr bytes
  7535  001E80                     	endif
  7536  001E80  0009               	tblrd		*+
  7537  001E82  CFF5 F032          	movff	tablat,___ftmul@f1
  7538  001E86  0009               	tblrd		*+
  7539  001E88  CFF5 F033          	movff	tablat,___ftmul@f1+1
  7540  001E8C  000A               	tblrd		*-
  7541  001E8E  CFF5 F034          	movff	tablat,___ftmul@f1+2
  7542  001E92  EC5B  F016         	call	___ftmul	;wreg free
  7543  001E96  C032  F066         	movff	?___ftmul,_fround$2737
  7544  001E9A  C033  F067         	movff	?___ftmul+1,_fround$2737+1
  7545  001E9E  C034  F068         	movff	?___ftmul+2,_fround$2737+2
  7546                           
  7547                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7548  001EA2  0E00               	movlw	0
  7549  001EA4  6E20               	movwf	___wmul@multiplicand+1,c
  7550  001EA6  0E03               	movlw	3
  7551  001EA8  6E1F               	movwf	___wmul@multiplicand,c
  7552  001EAA  0E00               	movlw	0
  7553  001EAC  6E12               	movwf	___awmod@divisor+1,c
  7554  001EAE  0E0A               	movlw	10
  7555  001EB0  6E11               	movwf	___awmod@divisor,c
  7556  001EB2  C069  F00F         	movff	fround@prec,___awmod@dividend
  7557  001EB6  6A10               	clrf	___awmod@dividend+1,c
  7558  001EB8  ECE6  F01B         	call	___awmod	;wreg free
  7559  001EBC  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  7560  001EC0  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  7561  001EC4  ECDB  F01E         	call	___wmul	;wreg free
  7562  001EC8  0E1B               	movlw	low __npowers_
  7563  001ECA  241D               	addwf	?___wmul,w,c
  7564  001ECC  6EF6               	movwf	tblptrl,c
  7565  001ECE  0E7F               	movlw	high __npowers_
  7566  001ED0  201E               	addwfc	?___wmul+1,w,c
  7567  001ED2  6EF7               	movwf	tblptrh,c
  7568  001ED4                     	if	0	;There are less than 3 active tblptr bytes
  7569  001ED4                     	endif
  7570  001ED4  0009               	tblrd		*+
  7571  001ED6  CFF5 F035          	movff	tablat,___ftmul@f2
  7572  001EDA  0009               	tblrd		*+
  7573  001EDC  CFF5 F036          	movff	tablat,___ftmul@f2+1
  7574  001EE0  000A               	tblrd		*-
  7575  001EE2  CFF5 F037          	movff	tablat,___ftmul@f2+2
  7576  001EE6  C066  F032         	movff	_fround$2737,___ftmul@f1
  7577  001EEA  C067  F033         	movff	_fround$2737+1,___ftmul@f1+1
  7578  001EEE  C068  F034         	movff	_fround$2737+2,___ftmul@f1+2
  7579  001EF2  EC5B  F016         	call	___ftmul	;wreg free
  7580  001EF6  C032  F063         	movff	?___ftmul,_fround$2738
  7581  001EFA  C033  F064         	movff	?___ftmul+1,_fround$2738+1
  7582  001EFE  C034  F065         	movff	?___ftmul+2,_fround$2738+2
  7583                           
  7584                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7585  001F02  C063  F032         	movff	_fround$2738,___ftmul@f1
  7586  001F06  C064  F033         	movff	_fround$2738+1,___ftmul@f1+1
  7587  001F0A  C065  F034         	movff	_fround$2738+2,___ftmul@f1+2
  7588  001F0E  0E00               	movlw	0
  7589  001F10  6E35               	movwf	___ftmul@f2,c
  7590  001F12  0E00               	movlw	0
  7591  001F14  6E36               	movwf	___ftmul@f2+1,c
  7592  001F16  0E3F               	movlw	63
  7593  001F18  6E37               	movwf	___ftmul@f2+2,c
  7594  001F1A  EC5B  F016         	call	___ftmul	;wreg free
  7595  001F1E  C032  F060         	movff	?___ftmul,?_fround
  7596  001F22  C033  F061         	movff	?___ftmul+1,?_fround+1
  7597  001F26  C034  F062         	movff	?___ftmul+2,?_fround+2
  7598  001F2A  0012               	return	
  7599  001F2C                     l7555:
  7600                           
  7601                           ;doprnt.c: 415: else if(prec > 10)
  7602  001F2C  0E0A               	movlw	10
  7603  001F2E  0100               	movlb	0	; () banked
  7604  001F30  6569               	cpfsgt	fround@prec& (0+255),b
  7605  001F32  D05D               	goto	l7563
  7606                           
  7607                           ; BSR set to: 0
  7608                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7609  001F34  0E00               	movlw	0
  7610  001F36  6E20               	movwf	___wmul@multiplicand+1,c
  7611  001F38  0E03               	movlw	3
  7612  001F3A  6E1F               	movwf	___wmul@multiplicand,c
  7613  001F3C  0E00               	movlw	0
  7614  001F3E  6E12               	movwf	___awmod@divisor+1,c
  7615  001F40  0E0A               	movlw	10
  7616  001F42  6E11               	movwf	___awmod@divisor,c
  7617  001F44  C069  F00F         	movff	fround@prec,___awmod@dividend
  7618  001F48  6A10               	clrf	___awmod@dividend+1,c
  7619  001F4A  ECE6  F01B         	call	___awmod	;wreg free
  7620  001F4E  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  7621  001F52  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  7622  001F56  ECDB  F01E         	call	___wmul	;wreg free
  7623  001F5A  0E1B               	movlw	low __npowers_
  7624  001F5C  241D               	addwf	?___wmul,w,c
  7625  001F5E  6EF6               	movwf	tblptrl,c
  7626  001F60  0E7F               	movlw	high __npowers_
  7627  001F62  201E               	addwfc	?___wmul+1,w,c
  7628  001F64  6EF7               	movwf	tblptrh,c
  7629  001F66                     	if	0	;There are less than 3 active tblptr bytes
  7630  001F66                     	endif
  7631  001F66  0009               	tblrd		*+
  7632  001F68  CFF5 F035          	movff	tablat,___ftmul@f2
  7633  001F6C  0009               	tblrd		*+
  7634  001F6E  CFF5 F036          	movff	tablat,___ftmul@f2+1
  7635  001F72  000A               	tblrd		*-
  7636  001F74  CFF5 F037          	movff	tablat,___ftmul@f2+2
  7637  001F78  0E00               	movlw	0
  7638  001F7A  6E18               	movwf	___awdiv@divisor+1,c
  7639  001F7C  0E0A               	movlw	10
  7640  001F7E  6E17               	movwf	___awdiv@divisor,c
  7641  001F80  C069  F015         	movff	fround@prec,___awdiv@dividend
  7642  001F84  6A16               	clrf	___awdiv@dividend+1,c
  7643  001F86  EC6B  F01A         	call	___awdiv	;wreg free
  7644  001F8A  0E09               	movlw	9
  7645  001F8C  2415               	addwf	?___awdiv,w,c
  7646  001F8E  6E1D               	movwf	___wmul@multiplier,c
  7647  001F90  0E00               	movlw	0
  7648  001F92  2016               	addwfc	?___awdiv+1,w,c
  7649  001F94  6E1E               	movwf	___wmul@multiplier+1,c
  7650  001F96  0E00               	movlw	0
  7651  001F98  6E20               	movwf	___wmul@multiplicand+1,c
  7652  001F9A  0E03               	movlw	3
  7653  001F9C  6E1F               	movwf	___wmul@multiplicand,c
  7654  001F9E  ECDB  F01E         	call	___wmul	;wreg free
  7655  001FA2  0E1B               	movlw	low __npowers_
  7656  001FA4  241D               	addwf	?___wmul,w,c
  7657  001FA6  6EF6               	movwf	tblptrl,c
  7658  001FA8  0E7F               	movlw	high __npowers_
  7659  001FAA  201E               	addwfc	?___wmul+1,w,c
  7660  001FAC  6EF7               	movwf	tblptrh,c
  7661  001FAE                     	if	0	;There are less than 3 active tblptr bytes
  7662  001FAE                     	endif
  7663  001FAE  0009               	tblrd		*+
  7664  001FB0  CFF5 F032          	movff	tablat,___ftmul@f1
  7665  001FB4  0009               	tblrd		*+
  7666  001FB6  CFF5 F033          	movff	tablat,___ftmul@f1+1
  7667  001FBA  000A               	tblrd		*-
  7668  001FBC  CFF5 F034          	movff	tablat,___ftmul@f1+2
  7669  001FC0  EC5B  F016         	call	___ftmul	;wreg free
  7670  001FC4  C032  F066         	movff	?___ftmul,_fround$2737
  7671  001FC8  C033  F067         	movff	?___ftmul+1,_fround$2737+1
  7672  001FCC  C034  F068         	movff	?___ftmul+2,_fround$2737+2
  7673                           
  7674                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7675  001FD0  C066  F032         	movff	_fround$2737,___ftmul@f1
  7676  001FD4  C067  F033         	movff	_fround$2737+1,___ftmul@f1+1
  7677  001FD8  C068  F034         	movff	_fround$2737+2,___ftmul@f1+2
  7678  001FDC  0E00               	movlw	0
  7679  001FDE  6E35               	movwf	___ftmul@f2,c
  7680  001FE0  0E00               	movlw	0
  7681  001FE2  6E36               	movwf	___ftmul@f2+1,c
  7682  001FE4  0E3F               	movlw	63
  7683  001FE6  6E37               	movwf	___ftmul@f2+2,c
  7684  001FE8  EC5B  F016         	call	___ftmul	;wreg free
  7685  001FEC  D798               	goto	L8
  7686  001FEE                     l7563:
  7687                           
  7688                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7689  001FEE  0100               	movlb	0	; () banked
  7690  001FF0  5169               	movf	fround@prec& (0+255),w,b
  7691  001FF2  0D03               	mullw	3
  7692  001FF4  0E1B               	movlw	low __npowers_
  7693  001FF6  24F3               	addwf	prodl,w,c
  7694  001FF8  6EF6               	movwf	tblptrl,c
  7695  001FFA  0E7F               	movlw	high __npowers_
  7696  001FFC  20F4               	addwfc	prodh,w,c
  7697  001FFE  6EF7               	movwf	tblptrh,c
  7698  002000                     	if	0	;There are less than 3 active tblptr bytes
  7699  002000                     	endif
  7700  002000  0009               	tblrd		*+
  7701  002002  CFF5 F032          	movff	tablat,___ftmul@f1
  7702  002006  0009               	tblrd		*+
  7703  002008  CFF5 F033          	movff	tablat,___ftmul@f1+1
  7704  00200C  000A               	tblrd		*-
  7705  00200E  CFF5 F034          	movff	tablat,___ftmul@f1+2
  7706  002012  0E00               	movlw	0
  7707  002014  6E35               	movwf	___ftmul@f2,c
  7708  002016  0E00               	movlw	0
  7709  002018  6E36               	movwf	___ftmul@f2+1,c
  7710  00201A  0E3F               	movlw	63
  7711  00201C  6E37               	movwf	___ftmul@f2+2,c
  7712  00201E  EC5B  F016         	call	___ftmul	;wreg free
  7713  002022  C032  F060         	movff	?___ftmul,?_fround
  7714  002026  C033  F061         	movff	?___ftmul+1,?_fround+1
  7715  00202A  C034  F062         	movff	?___ftmul+2,?_fround+2
  7716  00202E  0012               	return	
  7717  002030                     __end_of_fround:
  7718                           	opt stack 0
  7719                           tblptru	equ	0xFF8
  7720                           tblptrh	equ	0xFF7
  7721                           tblptrl	equ	0xFF6
  7722                           tablat	equ	0xFF5
  7723                           prodh	equ	0xFF4
  7724                           prodl	equ	0xFF3
  7725                           intcon	equ	0xFF2
  7726                           intcon2	equ	0xFF1
  7727                           postinc0	equ	0xFEE
  7728                           wreg	equ	0xFE8
  7729                           postinc1	equ	0xFE6
  7730                           postdec1	equ	0xFE5
  7731                           fsr1h	equ	0xFE2
  7732                           fsr1l	equ	0xFE1
  7733                           indf2	equ	0xFDF
  7734                           postinc2	equ	0xFDE
  7735                           postdec2	equ	0xFDD
  7736                           fsr2h	equ	0xFDA
  7737                           fsr2l	equ	0xFD9
  7738                           status	equ	0xFD8
  7739                           
  7740 ;; *************** function ___awmod *****************
  7741 ;; Defined at:
  7742 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7743 ;; Parameters:    Size  Location     Type
  7744 ;;  dividend        2   14[COMRAM] int 
  7745 ;;  divisor         2   16[COMRAM] int 
  7746 ;; Auto vars:     Size  Location     Type
  7747 ;;  sign            1   19[COMRAM] unsigned char 
  7748 ;;  counter         1   18[COMRAM] unsigned char 
  7749 ;; Return value:  Size  Location     Type
  7750 ;;                  2   14[COMRAM] int 
  7751 ;; Registers used:
  7752 ;;		wreg, status,2, status,0
  7753 ;; Tracked objects:
  7754 ;;		On entry : 0/0
  7755 ;;		On exit  : 0/0
  7756 ;;		Unchanged: 0/0
  7757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7758 ;;      Params:         4       0       0       0       0       0       0
  7759 ;;      Locals:         2       0       0       0       0       0       0
  7760 ;;      Temps:          0       0       0       0       0       0       0
  7761 ;;      Totals:         6       0       0       0       0       0       0
  7762 ;;Total ram usage:        6 bytes
  7763 ;; Hardware stack levels used:    1
  7764 ;; Hardware stack levels required when called:    3
  7765 ;; This function calls:
  7766 ;;		Nothing
  7767 ;; This function is called by:
  7768 ;;		_fround
  7769 ;;		_scale
  7770 ;; This function uses a non-reentrant model
  7771 ;;
  7772                           
  7773                           	psect	text28
  7774  0037CC                     __ptext28:
  7775                           	opt stack 0
  7776  0037CC                     ___awmod:
  7777                           	opt stack 25
  7778                           
  7779                           ;incstack = 0
  7780  0037CC  0E00               	movlw	0
  7781  0037CE  6E14               	movwf	___awmod@sign,c
  7782  0037D0  AE10               	btfss	___awmod@dividend+1,7,c
  7783  0037D2  D006               	goto	l7409
  7784  0037D4  6C0F               	negf	___awmod@dividend,c
  7785  0037D6  1E10               	comf	___awmod@dividend+1,f,c
  7786  0037D8  B0D8               	btfsc	status,0,c
  7787  0037DA  2A10               	incf	___awmod@dividend+1,f,c
  7788  0037DC  0E01               	movlw	1
  7789  0037DE  6E14               	movwf	___awmod@sign,c
  7790  0037E0                     l7409:
  7791  0037E0  AE12               	btfss	___awmod@divisor+1,7,c
  7792  0037E2  D004               	goto	l7413
  7793  0037E4  6C11               	negf	___awmod@divisor,c
  7794  0037E6  1E12               	comf	___awmod@divisor+1,f,c
  7795  0037E8  B0D8               	btfsc	status,0,c
  7796  0037EA  2A12               	incf	___awmod@divisor+1,f,c
  7797  0037EC                     l7413:
  7798  0037EC  5011               	movf	___awmod@divisor,w,c
  7799  0037EE  1012               	iorwf	___awmod@divisor+1,w,c
  7800  0037F0  B4D8               	btfsc	status,2,c
  7801  0037F2  D018               	goto	l7429
  7802  0037F4  0E01               	movlw	1
  7803  0037F6  6E13               	movwf	___awmod@counter,c
  7804  0037F8  D004               	goto	l7419
  7805  0037FA                     l7417:
  7806  0037FA  90D8               	bcf	status,0,c
  7807  0037FC  3611               	rlcf	___awmod@divisor,f,c
  7808  0037FE  3612               	rlcf	___awmod@divisor+1,f,c
  7809  003800  2A13               	incf	___awmod@counter,f,c
  7810  003802                     l7419:
  7811  003802  AE12               	btfss	___awmod@divisor+1,7,c
  7812  003804  D7FA               	goto	l7417
  7813  003806                     l7421:
  7814  003806  5011               	movf	___awmod@divisor,w,c
  7815  003808  5C0F               	subwf	___awmod@dividend,w,c
  7816  00380A  5012               	movf	___awmod@divisor+1,w,c
  7817  00380C  5810               	subwfb	___awmod@dividend+1,w,c
  7818  00380E  A0D8               	btfss	status,0,c
  7819  003810  D004               	goto	l7425
  7820  003812  5011               	movf	___awmod@divisor,w,c
  7821  003814  5E0F               	subwf	___awmod@dividend,f,c
  7822  003816  5012               	movf	___awmod@divisor+1,w,c
  7823  003818  5A10               	subwfb	___awmod@dividend+1,f,c
  7824  00381A                     l7425:
  7825  00381A  90D8               	bcf	status,0,c
  7826  00381C  3212               	rrcf	___awmod@divisor+1,f,c
  7827  00381E  3211               	rrcf	___awmod@divisor,f,c
  7828  003820  2E13               	decfsz	___awmod@counter,f,c
  7829  003822  D7F1               	goto	l7421
  7830  003824                     l7429:
  7831  003824  5014               	movf	___awmod@sign,w,c
  7832  003826  B4D8               	btfsc	status,2,c
  7833  003828  D004               	goto	l7433
  7834  00382A  6C0F               	negf	___awmod@dividend,c
  7835  00382C  1E10               	comf	___awmod@dividend+1,f,c
  7836  00382E  B0D8               	btfsc	status,0,c
  7837  003830  2A10               	incf	___awmod@dividend+1,f,c
  7838  003832                     l7433:
  7839  003832  C00F  F00F         	movff	___awmod@dividend,?___awmod
  7840  003836  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  7841  00383A  0012               	return	
  7842  00383C                     __end_of___awmod:
  7843                           	opt stack 0
  7844                           tblptru	equ	0xFF8
  7845                           tblptrh	equ	0xFF7
  7846                           tblptrl	equ	0xFF6
  7847                           tablat	equ	0xFF5
  7848                           prodh	equ	0xFF4
  7849                           prodl	equ	0xFF3
  7850                           intcon	equ	0xFF2
  7851                           intcon2	equ	0xFF1
  7852                           postinc0	equ	0xFEE
  7853                           wreg	equ	0xFE8
  7854                           postinc1	equ	0xFE6
  7855                           postdec1	equ	0xFE5
  7856                           fsr1h	equ	0xFE2
  7857                           fsr1l	equ	0xFE1
  7858                           indf2	equ	0xFDF
  7859                           postinc2	equ	0xFDE
  7860                           postdec2	equ	0xFDD
  7861                           fsr2h	equ	0xFDA
  7862                           fsr2l	equ	0xFD9
  7863                           status	equ	0xFD8
  7864                           
  7865 ;; *************** function ___awdiv *****************
  7866 ;; Defined at:
  7867 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7868 ;; Parameters:    Size  Location     Type
  7869 ;;  dividend        2   20[COMRAM] int 
  7870 ;;  divisor         2   22[COMRAM] int 
  7871 ;; Auto vars:     Size  Location     Type
  7872 ;;  quotient        2   26[COMRAM] int 
  7873 ;;  sign            1   25[COMRAM] unsigned char 
  7874 ;;  counter         1   24[COMRAM] unsigned char 
  7875 ;; Return value:  Size  Location     Type
  7876 ;;                  2   20[COMRAM] int 
  7877 ;; Registers used:
  7878 ;;		wreg, status,2, status,0
  7879 ;; Tracked objects:
  7880 ;;		On entry : 0/0
  7881 ;;		On exit  : 0/0
  7882 ;;		Unchanged: 0/0
  7883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7884 ;;      Params:         4       0       0       0       0       0       0
  7885 ;;      Locals:         4       0       0       0       0       0       0
  7886 ;;      Temps:          0       0       0       0       0       0       0
  7887 ;;      Totals:         8       0       0       0       0       0       0
  7888 ;;Total ram usage:        8 bytes
  7889 ;; Hardware stack levels used:    1
  7890 ;; Hardware stack levels required when called:    3
  7891 ;; This function calls:
  7892 ;;		Nothing
  7893 ;; This function is called by:
  7894 ;;		_fround
  7895 ;;		_scale
  7896 ;;		_printf
  7897 ;; This function uses a non-reentrant model
  7898 ;;
  7899                           
  7900                           	psect	text29
  7901  0034D6                     __ptext29:
  7902                           	opt stack 0
  7903  0034D6                     ___awdiv:
  7904                           	opt stack 25
  7905                           
  7906                           ;incstack = 0
  7907  0034D6  0E00               	movlw	0
  7908  0034D8  6E1A               	movwf	___awdiv@sign,c
  7909  0034DA  AE18               	btfss	___awdiv@divisor+1,7,c
  7910  0034DC  D006               	goto	l7365
  7911  0034DE  6C17               	negf	___awdiv@divisor,c
  7912  0034E0  1E18               	comf	___awdiv@divisor+1,f,c
  7913  0034E2  B0D8               	btfsc	status,0,c
  7914  0034E4  2A18               	incf	___awdiv@divisor+1,f,c
  7915  0034E6  0E01               	movlw	1
  7916  0034E8  6E1A               	movwf	___awdiv@sign,c
  7917  0034EA                     l7365:
  7918  0034EA  AE16               	btfss	___awdiv@dividend+1,7,c
  7919  0034EC  D006               	goto	l7371
  7920  0034EE  6C15               	negf	___awdiv@dividend,c
  7921  0034F0  1E16               	comf	___awdiv@dividend+1,f,c
  7922  0034F2  B0D8               	btfsc	status,0,c
  7923  0034F4  2A16               	incf	___awdiv@dividend+1,f,c
  7924  0034F6  0E01               	movlw	1
  7925  0034F8  1A1A               	xorwf	___awdiv@sign,f,c
  7926  0034FA                     l7371:
  7927  0034FA  0E00               	movlw	0
  7928  0034FC  6E1C               	movwf	___awdiv@quotient+1,c
  7929  0034FE  0E00               	movlw	0
  7930  003500  6E1B               	movwf	___awdiv@quotient,c
  7931  003502  5017               	movf	___awdiv@divisor,w,c
  7932  003504  1018               	iorwf	___awdiv@divisor+1,w,c
  7933  003506  B4D8               	btfsc	status,2,c
  7934  003508  D01C               	goto	l7393
  7935  00350A  0E01               	movlw	1
  7936  00350C  6E19               	movwf	___awdiv@counter,c
  7937  00350E  D004               	goto	l7379
  7938  003510                     l7377:
  7939  003510  90D8               	bcf	status,0,c
  7940  003512  3617               	rlcf	___awdiv@divisor,f,c
  7941  003514  3618               	rlcf	___awdiv@divisor+1,f,c
  7942  003516  2A19               	incf	___awdiv@counter,f,c
  7943  003518                     l7379:
  7944  003518  AE18               	btfss	___awdiv@divisor+1,7,c
  7945  00351A  D7FA               	goto	l7377
  7946  00351C                     l7381:
  7947  00351C  90D8               	bcf	status,0,c
  7948  00351E  361B               	rlcf	___awdiv@quotient,f,c
  7949  003520  361C               	rlcf	___awdiv@quotient+1,f,c
  7950  003522  5017               	movf	___awdiv@divisor,w,c
  7951  003524  5C15               	subwf	___awdiv@dividend,w,c
  7952  003526  5018               	movf	___awdiv@divisor+1,w,c
  7953  003528  5816               	subwfb	___awdiv@dividend+1,w,c
  7954  00352A  A0D8               	btfss	status,0,c
  7955  00352C  D005               	goto	l7389
  7956  00352E  5017               	movf	___awdiv@divisor,w,c
  7957  003530  5E15               	subwf	___awdiv@dividend,f,c
  7958  003532  5018               	movf	___awdiv@divisor+1,w,c
  7959  003534  5A16               	subwfb	___awdiv@dividend+1,f,c
  7960  003536  801B               	bsf	___awdiv@quotient,0,c
  7961  003538                     l7389:
  7962  003538  90D8               	bcf	status,0,c
  7963  00353A  3218               	rrcf	___awdiv@divisor+1,f,c
  7964  00353C  3217               	rrcf	___awdiv@divisor,f,c
  7965  00353E  2E19               	decfsz	___awdiv@counter,f,c
  7966  003540  D7ED               	goto	l7381
  7967  003542                     l7393:
  7968  003542  501A               	movf	___awdiv@sign,w,c
  7969  003544  B4D8               	btfsc	status,2,c
  7970  003546  D004               	goto	l7397
  7971  003548  6C1B               	negf	___awdiv@quotient,c
  7972  00354A  1E1C               	comf	___awdiv@quotient+1,f,c
  7973  00354C  B0D8               	btfsc	status,0,c
  7974  00354E  2A1C               	incf	___awdiv@quotient+1,f,c
  7975  003550                     l7397:
  7976  003550  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  7977  003554  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  7978  003558  0012               	return	
  7979  00355A                     __end_of___awdiv:
  7980                           	opt stack 0
  7981                           tblptru	equ	0xFF8
  7982                           tblptrh	equ	0xFF7
  7983                           tblptrl	equ	0xFF6
  7984                           tablat	equ	0xFF5
  7985                           prodh	equ	0xFF4
  7986                           prodl	equ	0xFF3
  7987                           intcon	equ	0xFF2
  7988                           intcon2	equ	0xFF1
  7989                           postinc0	equ	0xFEE
  7990                           wreg	equ	0xFE8
  7991                           postinc1	equ	0xFE6
  7992                           postdec1	equ	0xFE5
  7993                           fsr1h	equ	0xFE2
  7994                           fsr1l	equ	0xFE1
  7995                           indf2	equ	0xFDF
  7996                           postinc2	equ	0xFDE
  7997                           postdec2	equ	0xFDD
  7998                           fsr2h	equ	0xFDA
  7999                           fsr2l	equ	0xFD9
  8000                           status	equ	0xFD8
  8001                           
  8002 ;; *************** function __tdiv_to_l_ *****************
  8003 ;; Defined at:
  8004 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;  f1              3   14[COMRAM] float 
  8007 ;;  f2              3   17[COMRAM] float 
  8008 ;; Auto vars:     Size  Location     Type
  8009 ;;  quot            4   23[COMRAM] unsigned long 
  8010 ;;  exp1            1   28[COMRAM] unsigned char 
  8011 ;;  cntr            1   27[COMRAM] unsigned char 
  8012 ;; Return value:  Size  Location     Type
  8013 ;;                  4   14[COMRAM] unsigned long 
  8014 ;; Registers used:
  8015 ;;		wreg, status,2, status,0
  8016 ;; Tracked objects:
  8017 ;;		On entry : 0/0
  8018 ;;		On exit  : 0/0
  8019 ;;		Unchanged: 0/0
  8020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8021 ;;      Params:         6       0       0       0       0       0       0
  8022 ;;      Locals:         6       0       0       0       0       0       0
  8023 ;;      Temps:          3       0       0       0       0       0       0
  8024 ;;      Totals:        15       0       0       0       0       0       0
  8025 ;;Total ram usage:       15 bytes
  8026 ;; Hardware stack levels used:    1
  8027 ;; Hardware stack levels required when called:    3
  8028 ;; This function calls:
  8029 ;;		Nothing
  8030 ;; This function is called by:
  8031 ;;		_printf
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035                           	psect	text30
  8036  00293C                     __ptext30:
  8037                           	opt stack 0
  8038  00293C                     __tdiv_to_l_:
  8039                           	opt stack 26
  8040                           
  8041                           ;incstack = 0
  8042  00293C  C011  F015         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8043  002940  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8044  002942  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8045  002944  3410               	rlcf	__tdiv_to_l_@f1+1,w,c
  8046  002946  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8047  002948  E301               	bnc	u7631
  8048  00294A  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8049  00294C                     u7631:
  8050  00294C  5015               	movf	??__tdiv_to_l_,w,c
  8051  00294E  6E1D               	movwf	__tdiv_to_l_@exp1,c
  8052  002950  501D               	movf	__tdiv_to_l_@exp1,w,c
  8053  002952  A4D8               	btfss	status,2,c
  8054  002954  D009               	goto	l7623
  8055  002956  0E00               	movlw	0
  8056  002958  6E0F               	movwf	?__tdiv_to_l_,c
  8057  00295A  0E00               	movlw	0
  8058  00295C  6E10               	movwf	?__tdiv_to_l_+1,c
  8059  00295E  0E00               	movlw	0
  8060  002960  6E11               	movwf	?__tdiv_to_l_+2,c
  8061  002962  0E00               	movlw	0
  8062  002964  6E12               	movwf	?__tdiv_to_l_+3,c
  8063  002966  0012               	return	
  8064  002968                     l7623:
  8065  002968  C014  F015         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8066  00296C  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8067  00296E  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8068  002970  3413               	rlcf	__tdiv_to_l_@f2+1,w,c
  8069  002972  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8070  002974  E301               	bnc	u7651
  8071  002976  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8072  002978                     u7651:
  8073  002978  5015               	movf	??__tdiv_to_l_,w,c
  8074  00297A  6E1C               	movwf	__tdiv_to_l_@cntr,c
  8075  00297C  501C               	movf	__tdiv_to_l_@cntr,w,c
  8076  00297E  A4D8               	btfss	status,2,c
  8077  002980  D009               	goto	l7629
  8078  002982  0E00               	movlw	0
  8079  002984  6E0F               	movwf	?__tdiv_to_l_,c
  8080  002986  0E00               	movlw	0
  8081  002988  6E10               	movwf	?__tdiv_to_l_+1,c
  8082  00298A  0E00               	movlw	0
  8083  00298C  6E11               	movwf	?__tdiv_to_l_+2,c
  8084  00298E  0E00               	movlw	0
  8085  002990  6E12               	movwf	?__tdiv_to_l_+3,c
  8086  002992  0012               	return	
  8087  002994                     l7629:
  8088  002994  8E10               	bsf	__tdiv_to_l_@f1+1,7,c
  8089  002996  0EFF               	movlw	255
  8090  002998  160F               	andwf	__tdiv_to_l_@f1,f,c
  8091  00299A  0EFF               	movlw	255
  8092  00299C  1610               	andwf	__tdiv_to_l_@f1+1,f,c
  8093  00299E  0E00               	movlw	0
  8094  0029A0  1611               	andwf	__tdiv_to_l_@f1+2,f,c
  8095  0029A2  8E13               	bsf	__tdiv_to_l_@f2+1,7,c
  8096  0029A4  0EFF               	movlw	255
  8097  0029A6  1612               	andwf	__tdiv_to_l_@f2,f,c
  8098  0029A8  0EFF               	movlw	255
  8099  0029AA  1613               	andwf	__tdiv_to_l_@f2+1,f,c
  8100  0029AC  0E00               	movlw	0
  8101  0029AE  1614               	andwf	__tdiv_to_l_@f2+2,f,c
  8102  0029B0  0E00               	movlw	0
  8103  0029B2  6E18               	movwf	__tdiv_to_l_@quot,c
  8104  0029B4  0E00               	movlw	0
  8105  0029B6  6E19               	movwf	__tdiv_to_l_@quot+1,c
  8106  0029B8  0E00               	movlw	0
  8107  0029BA  6E1A               	movwf	__tdiv_to_l_@quot+2,c
  8108  0029BC  0E00               	movlw	0
  8109  0029BE  6E1B               	movwf	__tdiv_to_l_@quot+3,c
  8110  0029C0  0E7F               	movlw	127
  8111  0029C2  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
  8112  0029C4  501C               	movf	__tdiv_to_l_@cntr,w,c
  8113  0029C6  0F98               	addlw	152
  8114  0029C8  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
  8115  0029CA  0E18               	movlw	24
  8116  0029CC  6E1C               	movwf	__tdiv_to_l_@cntr,c
  8117  0029CE                     l1442:
  8118  0029CE  90D8               	bcf	status,0,c
  8119  0029D0  3618               	rlcf	__tdiv_to_l_@quot,f,c
  8120  0029D2  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
  8121  0029D4  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
  8122  0029D6  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
  8123  0029D8  5012               	movf	__tdiv_to_l_@f2,w,c
  8124  0029DA  5C0F               	subwf	__tdiv_to_l_@f1,w,c
  8125  0029DC  5013               	movf	__tdiv_to_l_@f2+1,w,c
  8126  0029DE  5810               	subwfb	__tdiv_to_l_@f1+1,w,c
  8127  0029E0  5014               	movf	__tdiv_to_l_@f2+2,w,c
  8128  0029E2  5811               	subwfb	__tdiv_to_l_@f1+2,w,c
  8129  0029E4  A0D8               	btfss	status,0,c
  8130  0029E6  D007               	goto	l1443
  8131  0029E8  5012               	movf	__tdiv_to_l_@f2,w,c
  8132  0029EA  5E0F               	subwf	__tdiv_to_l_@f1,f,c
  8133  0029EC  5013               	movf	__tdiv_to_l_@f2+1,w,c
  8134  0029EE  5A10               	subwfb	__tdiv_to_l_@f1+1,f,c
  8135  0029F0  5014               	movf	__tdiv_to_l_@f2+2,w,c
  8136  0029F2  5A11               	subwfb	__tdiv_to_l_@f1+2,f,c
  8137  0029F4  8018               	bsf	__tdiv_to_l_@quot,0,c
  8138  0029F6                     l1443:
  8139  0029F6  90D8               	bcf	status,0,c
  8140  0029F8  360F               	rlcf	__tdiv_to_l_@f1,f,c
  8141  0029FA  3610               	rlcf	__tdiv_to_l_@f1+1,f,c
  8142  0029FC  3611               	rlcf	__tdiv_to_l_@f1+2,f,c
  8143  0029FE  2E1C               	decfsz	__tdiv_to_l_@cntr,f,c
  8144  002A00  D7E6               	goto	l1442
  8145  002A02  AE1D               	btfss	__tdiv_to_l_@exp1,7,c
  8146  002A04  D016               	goto	l7663
  8147  002A06  501D               	movf	__tdiv_to_l_@exp1,w,c
  8148  002A08  0A80               	xorlw	128
  8149  002A0A  0F97               	addlw	151
  8150  002A0C  B0D8               	btfsc	status,0,c
  8151  002A0E  D009               	goto	l7659
  8152  002A10  0E00               	movlw	0
  8153  002A12  6E0F               	movwf	?__tdiv_to_l_,c
  8154  002A14  0E00               	movlw	0
  8155  002A16  6E10               	movwf	?__tdiv_to_l_+1,c
  8156  002A18  0E00               	movlw	0
  8157  002A1A  6E11               	movwf	?__tdiv_to_l_+2,c
  8158  002A1C  0E00               	movlw	0
  8159  002A1E  6E12               	movwf	?__tdiv_to_l_+3,c
  8160  002A20  0012               	return	
  8161  002A22                     l7659:
  8162  002A22  90D8               	bcf	status,0,c
  8163  002A24  321B               	rrcf	__tdiv_to_l_@quot+3,f,c
  8164  002A26  321A               	rrcf	__tdiv_to_l_@quot+2,f,c
  8165  002A28  3219               	rrcf	__tdiv_to_l_@quot+1,f,c
  8166  002A2A  3218               	rrcf	__tdiv_to_l_@quot,f,c
  8167  002A2C  3E1D               	incfsz	__tdiv_to_l_@exp1,f,c
  8168  002A2E  D7F9               	goto	l7659
  8169  002A30  D015               	goto	l1449
  8170  002A32                     l7663:
  8171  002A32  0E17               	movlw	23
  8172  002A34  641D               	cpfsgt	__tdiv_to_l_@exp1,c
  8173  002A36  D00F               	goto	l7671
  8174  002A38  0E00               	movlw	0
  8175  002A3A  6E0F               	movwf	?__tdiv_to_l_,c
  8176  002A3C  0E00               	movlw	0
  8177  002A3E  6E10               	movwf	?__tdiv_to_l_+1,c
  8178  002A40  0E00               	movlw	0
  8179  002A42  6E11               	movwf	?__tdiv_to_l_+2,c
  8180  002A44  0E00               	movlw	0
  8181  002A46  6E12               	movwf	?__tdiv_to_l_+3,c
  8182  002A48  0012               	return	
  8183  002A4A                     l7669:
  8184  002A4A  90D8               	bcf	status,0,c
  8185  002A4C  3618               	rlcf	__tdiv_to_l_@quot,f,c
  8186  002A4E  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
  8187  002A50  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
  8188  002A52  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
  8189  002A54  061D               	decf	__tdiv_to_l_@exp1,f,c
  8190  002A56                     l7671:
  8191  002A56  501D               	movf	__tdiv_to_l_@exp1,w,c
  8192  002A58  A4D8               	btfss	status,2,c
  8193  002A5A  D7F7               	goto	l7669
  8194  002A5C                     l1449:
  8195  002A5C  C018  F00F         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8196  002A60  C019  F010         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8197  002A64  C01A  F011         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8198  002A68  C01B  F012         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8199  002A6C  0012               	return		;funcret
  8200  002A6E                     __end_of__tdiv_to_l_:
  8201                           	opt stack 0
  8202                           tblptru	equ	0xFF8
  8203                           tblptrh	equ	0xFF7
  8204                           tblptrl	equ	0xFF6
  8205                           tablat	equ	0xFF5
  8206                           prodh	equ	0xFF4
  8207                           prodl	equ	0xFF3
  8208                           intcon	equ	0xFF2
  8209                           intcon2	equ	0xFF1
  8210                           postinc0	equ	0xFEE
  8211                           wreg	equ	0xFE8
  8212                           postinc1	equ	0xFE6
  8213                           postdec1	equ	0xFE5
  8214                           fsr1h	equ	0xFE2
  8215                           fsr1l	equ	0xFE1
  8216                           indf2	equ	0xFDF
  8217                           postinc2	equ	0xFDE
  8218                           postdec2	equ	0xFDD
  8219                           fsr2h	equ	0xFDA
  8220                           fsr2l	equ	0xFD9
  8221                           status	equ	0xFD8
  8222                           
  8223 ;; *************** function __div_to_l_ *****************
  8224 ;; Defined at:
  8225 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  8226 ;; Parameters:    Size  Location     Type
  8227 ;;  f1              3   14[COMRAM] unsigned long 
  8228 ;;  f2              3   17[COMRAM] unsigned long 
  8229 ;; Auto vars:     Size  Location     Type
  8230 ;;  quot            4   20[COMRAM] unsigned long 
  8231 ;;  exp1            1   25[COMRAM] unsigned char 
  8232 ;;  cntr            1   24[COMRAM] unsigned char 
  8233 ;; Return value:  Size  Location     Type
  8234 ;;                  4   14[COMRAM] unsigned long 
  8235 ;; Registers used:
  8236 ;;		wreg, status,2, status,0
  8237 ;; Tracked objects:
  8238 ;;		On entry : 0/0
  8239 ;;		On exit  : 0/0
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8242 ;;      Params:         6       0       0       0       0       0       0
  8243 ;;      Locals:         6       0       0       0       0       0       0
  8244 ;;      Temps:          0       0       0       0       0       0       0
  8245 ;;      Totals:        12       0       0       0       0       0       0
  8246 ;;Total ram usage:       12 bytes
  8247 ;; Hardware stack levels used:    1
  8248 ;; Hardware stack levels required when called:    3
  8249 ;; This function calls:
  8250 ;;		Nothing
  8251 ;; This function is called by:
  8252 ;;		_printf
  8253 ;; This function uses a non-reentrant model
  8254 ;;
  8255                           
  8256                           	psect	text31
  8257  002A6E                     __ptext31:
  8258                           	opt stack 0
  8259  002A6E                     __div_to_l_:
  8260                           	opt stack 26
  8261                           
  8262                           ;incstack = 0
  8263  002A6E  3411               	rlcf	__div_to_l_@f1+2,w,c
  8264  002A70  3412               	rlcf	__div_to_l_@f1+3,w,c
  8265  002A72  6E1A               	movwf	__div_to_l_@exp1,c
  8266  002A74  501A               	movf	__div_to_l_@exp1,w,c
  8267  002A76  A4D8               	btfss	status,2,c
  8268  002A78  D009               	goto	l7679
  8269  002A7A  0E00               	movlw	0
  8270  002A7C  6E0F               	movwf	?__div_to_l_,c
  8271  002A7E  0E00               	movlw	0
  8272  002A80  6E10               	movwf	?__div_to_l_+1,c
  8273  002A82  0E00               	movlw	0
  8274  002A84  6E11               	movwf	?__div_to_l_+2,c
  8275  002A86  0E00               	movlw	0
  8276  002A88  6E12               	movwf	?__div_to_l_+3,c
  8277  002A8A  0012               	return	
  8278  002A8C                     l7679:
  8279  002A8C  3414               	rlcf	__div_to_l_@f2+2,w,c
  8280  002A8E  3415               	rlcf	__div_to_l_@f2+3,w,c
  8281  002A90  6E19               	movwf	__div_to_l_@cntr,c
  8282  002A92  5019               	movf	__div_to_l_@cntr,w,c
  8283  002A94  A4D8               	btfss	status,2,c
  8284  002A96  D009               	goto	l7685
  8285  002A98  0E00               	movlw	0
  8286  002A9A  6E0F               	movwf	?__div_to_l_,c
  8287  002A9C  0E00               	movlw	0
  8288  002A9E  6E10               	movwf	?__div_to_l_+1,c
  8289  002AA0  0E00               	movlw	0
  8290  002AA2  6E11               	movwf	?__div_to_l_+2,c
  8291  002AA4  0E00               	movlw	0
  8292  002AA6  6E12               	movwf	?__div_to_l_+3,c
  8293  002AA8  0012               	return	
  8294  002AAA                     l7685:
  8295  002AAA  8E11               	bsf	__div_to_l_@f1+2,7,c
  8296  002AAC  0EFF               	movlw	255
  8297  002AAE  160F               	andwf	__div_to_l_@f1,f,c
  8298  002AB0  0EFF               	movlw	255
  8299  002AB2  1610               	andwf	__div_to_l_@f1+1,f,c
  8300  002AB4  0EFF               	movlw	255
  8301  002AB6  1611               	andwf	__div_to_l_@f1+2,f,c
  8302  002AB8  0E00               	movlw	0
  8303  002ABA  1612               	andwf	__div_to_l_@f1+3,f,c
  8304  002ABC  8E14               	bsf	__div_to_l_@f2+2,7,c
  8305  002ABE  0EFF               	movlw	255
  8306  002AC0  1612               	andwf	__div_to_l_@f2,f,c
  8307  002AC2  0EFF               	movlw	255
  8308  002AC4  1613               	andwf	__div_to_l_@f2+1,f,c
  8309  002AC6  0EFF               	movlw	255
  8310  002AC8  1614               	andwf	__div_to_l_@f2+2,f,c
  8311  002ACA  0E00               	movlw	0
  8312  002ACC  1615               	andwf	__div_to_l_@f2+3,f,c
  8313  002ACE  0E00               	movlw	0
  8314  002AD0  6E15               	movwf	__div_to_l_@quot,c
  8315  002AD2  0E00               	movlw	0
  8316  002AD4  6E16               	movwf	__div_to_l_@quot+1,c
  8317  002AD6  0E00               	movlw	0
  8318  002AD8  6E17               	movwf	__div_to_l_@quot+2,c
  8319  002ADA  0E00               	movlw	0
  8320  002ADC  6E18               	movwf	__div_to_l_@quot+3,c
  8321  002ADE  0E7F               	movlw	127
  8322  002AE0  5E1A               	subwf	__div_to_l_@exp1,f,c
  8323  002AE2  5019               	movf	__div_to_l_@cntr,w,c
  8324  002AE4  0FA0               	addlw	160
  8325  002AE6  5E1A               	subwf	__div_to_l_@exp1,f,c
  8326  002AE8  0E20               	movlw	32
  8327  002AEA  6E19               	movwf	__div_to_l_@cntr,c
  8328  002AEC                     l7699:
  8329  002AEC  90D8               	bcf	status,0,c
  8330  002AEE  3615               	rlcf	__div_to_l_@quot,f,c
  8331  002AF0  3616               	rlcf	__div_to_l_@quot+1,f,c
  8332  002AF2  3617               	rlcf	__div_to_l_@quot+2,f,c
  8333  002AF4  3618               	rlcf	__div_to_l_@quot+3,f,c
  8334  002AF6  5012               	movf	__div_to_l_@f2,w,c
  8335  002AF8  5C0F               	subwf	__div_to_l_@f1,w,c
  8336  002AFA  5013               	movf	__div_to_l_@f2+1,w,c
  8337  002AFC  5810               	subwfb	__div_to_l_@f1+1,w,c
  8338  002AFE  5014               	movf	__div_to_l_@f2+2,w,c
  8339  002B00  5811               	subwfb	__div_to_l_@f1+2,w,c
  8340  002B02  5015               	movf	__div_to_l_@f2+3,w,c
  8341  002B04  5812               	subwfb	__div_to_l_@f1+3,w,c
  8342  002B06  A0D8               	btfss	status,0,c
  8343  002B08  D009               	goto	l7707
  8344  002B0A  5012               	movf	__div_to_l_@f2,w,c
  8345  002B0C  5E0F               	subwf	__div_to_l_@f1,f,c
  8346  002B0E  5013               	movf	__div_to_l_@f2+1,w,c
  8347  002B10  5A10               	subwfb	__div_to_l_@f1+1,f,c
  8348  002B12  5014               	movf	__div_to_l_@f2+2,w,c
  8349  002B14  5A11               	subwfb	__div_to_l_@f1+2,f,c
  8350  002B16  5015               	movf	__div_to_l_@f2+3,w,c
  8351  002B18  5A12               	subwfb	__div_to_l_@f1+3,f,c
  8352  002B1A  8015               	bsf	__div_to_l_@quot,0,c
  8353  002B1C                     l7707:
  8354  002B1C  90D8               	bcf	status,0,c
  8355  002B1E  360F               	rlcf	__div_to_l_@f1,f,c
  8356  002B20  3610               	rlcf	__div_to_l_@f1+1,f,c
  8357  002B22  3611               	rlcf	__div_to_l_@f1+2,f,c
  8358  002B24  3612               	rlcf	__div_to_l_@f1+3,f,c
  8359  002B26  2E19               	decfsz	__div_to_l_@cntr,f,c
  8360  002B28  D7E1               	goto	l7699
  8361  002B2A  AE1A               	btfss	__div_to_l_@exp1,7,c
  8362  002B2C  D016               	goto	l7723
  8363  002B2E  501A               	movf	__div_to_l_@exp1,w,c
  8364  002B30  0A80               	xorlw	128
  8365  002B32  0F9F               	addlw	159
  8366  002B34  B0D8               	btfsc	status,0,c
  8367  002B36  D009               	goto	l7719
  8368  002B38  0E00               	movlw	0
  8369  002B3A  6E0F               	movwf	?__div_to_l_,c
  8370  002B3C  0E00               	movlw	0
  8371  002B3E  6E10               	movwf	?__div_to_l_+1,c
  8372  002B40  0E00               	movlw	0
  8373  002B42  6E11               	movwf	?__div_to_l_+2,c
  8374  002B44  0E00               	movlw	0
  8375  002B46  6E12               	movwf	?__div_to_l_+3,c
  8376  002B48  0012               	return	
  8377  002B4A                     l7719:
  8378  002B4A  90D8               	bcf	status,0,c
  8379  002B4C  3218               	rrcf	__div_to_l_@quot+3,f,c
  8380  002B4E  3217               	rrcf	__div_to_l_@quot+2,f,c
  8381  002B50  3216               	rrcf	__div_to_l_@quot+1,f,c
  8382  002B52  3215               	rrcf	__div_to_l_@quot,f,c
  8383  002B54  3E1A               	incfsz	__div_to_l_@exp1,f,c
  8384  002B56  D7F9               	goto	l7719
  8385  002B58  D015               	goto	l1345
  8386  002B5A                     l7723:
  8387  002B5A  0E1F               	movlw	31
  8388  002B5C  641A               	cpfsgt	__div_to_l_@exp1,c
  8389  002B5E  D00F               	goto	l7731
  8390  002B60  0E00               	movlw	0
  8391  002B62  6E0F               	movwf	?__div_to_l_,c
  8392  002B64  0E00               	movlw	0
  8393  002B66  6E10               	movwf	?__div_to_l_+1,c
  8394  002B68  0E00               	movlw	0
  8395  002B6A  6E11               	movwf	?__div_to_l_+2,c
  8396  002B6C  0E00               	movlw	0
  8397  002B6E  6E12               	movwf	?__div_to_l_+3,c
  8398  002B70  0012               	return	
  8399  002B72                     l7729:
  8400  002B72  90D8               	bcf	status,0,c
  8401  002B74  3615               	rlcf	__div_to_l_@quot,f,c
  8402  002B76  3616               	rlcf	__div_to_l_@quot+1,f,c
  8403  002B78  3617               	rlcf	__div_to_l_@quot+2,f,c
  8404  002B7A  3618               	rlcf	__div_to_l_@quot+3,f,c
  8405  002B7C  061A               	decf	__div_to_l_@exp1,f,c
  8406  002B7E                     l7731:
  8407  002B7E  501A               	movf	__div_to_l_@exp1,w,c
  8408  002B80  A4D8               	btfss	status,2,c
  8409  002B82  D7F7               	goto	l7729
  8410  002B84                     l1345:
  8411  002B84  C015  F00F         	movff	__div_to_l_@quot,?__div_to_l_
  8412  002B88  C016  F010         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8413  002B8C  C017  F011         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8414  002B90  C018  F012         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8415  002B94  0012               	return		;funcret
  8416  002B96                     __end_of__div_to_l_:
  8417                           	opt stack 0
  8418                           tblptru	equ	0xFF8
  8419                           tblptrh	equ	0xFF7
  8420                           tblptrl	equ	0xFF6
  8421                           tablat	equ	0xFF5
  8422                           prodh	equ	0xFF4
  8423                           prodl	equ	0xFF3
  8424                           intcon	equ	0xFF2
  8425                           intcon2	equ	0xFF1
  8426                           postinc0	equ	0xFEE
  8427                           wreg	equ	0xFE8
  8428                           postinc1	equ	0xFE6
  8429                           postdec1	equ	0xFE5
  8430                           fsr1h	equ	0xFE2
  8431                           fsr1l	equ	0xFE1
  8432                           indf2	equ	0xFDF
  8433                           postinc2	equ	0xFDE
  8434                           postdec2	equ	0xFDD
  8435                           fsr2h	equ	0xFDA
  8436                           fsr2l	equ	0xFD9
  8437                           status	equ	0xFD8
  8438                           
  8439 ;; *************** function ___lltoft *****************
  8440 ;; Defined at:
  8441 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  8442 ;; Parameters:    Size  Location     Type
  8443 ;;  c               4   22[COMRAM] unsigned long 
  8444 ;; Auto vars:     Size  Location     Type
  8445 ;;  exp             1   30[COMRAM] unsigned char 
  8446 ;; Return value:  Size  Location     Type
  8447 ;;                  3   22[COMRAM] float 
  8448 ;; Registers used:
  8449 ;;		wreg, status,2, status,0, cstack
  8450 ;; Tracked objects:
  8451 ;;		On entry : 0/0
  8452 ;;		On exit  : 0/0
  8453 ;;		Unchanged: 0/0
  8454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8455 ;;      Params:         4       0       0       0       0       0       0
  8456 ;;      Locals:         1       0       0       0       0       0       0
  8457 ;;      Temps:          4       0       0       0       0       0       0
  8458 ;;      Totals:         9       0       0       0       0       0       0
  8459 ;;Total ram usage:        9 bytes
  8460 ;; Hardware stack levels used:    1
  8461 ;; Hardware stack levels required when called:    4
  8462 ;; This function calls:
  8463 ;;		___ftpack
  8464 ;; This function is called by:
  8465 ;;		_printf
  8466 ;; This function uses a non-reentrant model
  8467 ;;
  8468                           
  8469                           	psect	text32
  8470  003978                     __ptext32:
  8471                           	opt stack 0
  8472  003978                     ___lltoft:
  8473                           	opt stack 25
  8474                           
  8475                           ;incstack = 0
  8476  003978  0E8E               	movlw	142
  8477  00397A  6E1F               	movwf	___lltoft@exp,c
  8478  00397C  D006               	goto	l7897
  8479  00397E                     l7895:
  8480  00397E  90D8               	bcf	status,0,c
  8481  003980  321A               	rrcf	___lltoft@c+3,f,c
  8482  003982  3219               	rrcf	___lltoft@c+2,f,c
  8483  003984  3218               	rrcf	___lltoft@c+1,f,c
  8484  003986  3217               	rrcf	___lltoft@c,f,c
  8485  003988  2A1F               	incf	___lltoft@exp,f,c
  8486  00398A                     l7897:
  8487  00398A  0E00               	movlw	0
  8488  00398C  1417               	andwf	___lltoft@c,w,c
  8489  00398E  6E1B               	movwf	??___lltoft& (0+255),c
  8490  003990  0E00               	movlw	0
  8491  003992  1418               	andwf	___lltoft@c+1,w,c
  8492  003994  6E1C               	movwf	(??___lltoft+1)& (0+255),c
  8493  003996  0E00               	movlw	0
  8494  003998  1419               	andwf	___lltoft@c+2,w,c
  8495  00399A  6E1D               	movwf	(??___lltoft+2)& (0+255),c
  8496  00399C  0EFF               	movlw	255
  8497  00399E  141A               	andwf	___lltoft@c+3,w,c
  8498  0039A0  6E1E               	movwf	(??___lltoft+3)& (0+255),c
  8499  0039A2  501B               	movf	??___lltoft,w,c
  8500  0039A4  101C               	iorwf	??___lltoft+1,w,c
  8501  0039A6  101D               	iorwf	??___lltoft+2,w,c
  8502  0039A8  101E               	iorwf	??___lltoft+3,w,c
  8503  0039AA  A4D8               	btfss	status,2,c
  8504  0039AC  D7E8               	goto	l7895
  8505  0039AE  C017  F00F         	movff	___lltoft@c,___ftpack@arg
  8506  0039B2  C018  F010         	movff	___lltoft@c+1,___ftpack@arg+1
  8507  0039B6  C019  F011         	movff	___lltoft@c+2,___ftpack@arg+2
  8508  0039BA  C01F  F012         	movff	___lltoft@exp,___ftpack@exp
  8509  0039BE  0E00               	movlw	0
  8510  0039C0  6E13               	movwf	___ftpack@sign,c
  8511  0039C2  ECEB  F018         	call	___ftpack	;wreg free
  8512  0039C6  C00F  F017         	movff	?___ftpack,?___lltoft
  8513  0039CA  C010  F018         	movff	?___ftpack+1,?___lltoft+1
  8514  0039CE  C011  F019         	movff	?___ftpack+2,?___lltoft+2
  8515  0039D2  0012               	return	
  8516  0039D4                     __end_of___lltoft:
  8517                           	opt stack 0
  8518                           tblptru	equ	0xFF8
  8519                           tblptrh	equ	0xFF7
  8520                           tblptrl	equ	0xFF6
  8521                           tablat	equ	0xFF5
  8522                           prodh	equ	0xFF4
  8523                           prodl	equ	0xFF3
  8524                           intcon	equ	0xFF2
  8525                           intcon2	equ	0xFF1
  8526                           postinc0	equ	0xFEE
  8527                           wreg	equ	0xFE8
  8528                           postinc1	equ	0xFE6
  8529                           postdec1	equ	0xFE5
  8530                           fsr1h	equ	0xFE2
  8531                           fsr1l	equ	0xFE1
  8532                           indf2	equ	0xFDF
  8533                           postinc2	equ	0xFDE
  8534                           postdec2	equ	0xFDD
  8535                           fsr2h	equ	0xFDA
  8536                           fsr2l	equ	0xFD9
  8537                           status	equ	0xFD8
  8538                           
  8539 ;; *************** function ___llmod *****************
  8540 ;; Defined at:
  8541 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  8542 ;; Parameters:    Size  Location     Type
  8543 ;;  dividend        4   27[COMRAM] unsigned long 
  8544 ;;  divisor         4   31[COMRAM] unsigned long 
  8545 ;; Auto vars:     Size  Location     Type
  8546 ;;  counter         1   35[COMRAM] unsigned char 
  8547 ;; Return value:  Size  Location     Type
  8548 ;;                  4   27[COMRAM] unsigned long 
  8549 ;; Registers used:
  8550 ;;		wreg, status,2, status,0
  8551 ;; Tracked objects:
  8552 ;;		On entry : 0/0
  8553 ;;		On exit  : 0/0
  8554 ;;		Unchanged: 0/0
  8555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8556 ;;      Params:         8       0       0       0       0       0       0
  8557 ;;      Locals:         1       0       0       0       0       0       0
  8558 ;;      Temps:          0       0       0       0       0       0       0
  8559 ;;      Totals:         9       0       0       0       0       0       0
  8560 ;;Total ram usage:        9 bytes
  8561 ;; Hardware stack levels used:    1
  8562 ;; Hardware stack levels required when called:    3
  8563 ;; This function calls:
  8564 ;;		Nothing
  8565 ;; This function is called by:
  8566 ;;		_printf
  8567 ;; This function uses a non-reentrant model
  8568 ;;
  8569                           
  8570                           	psect	text33
  8571  003912                     __ptext33:
  8572                           	opt stack 0
  8573  003912                     ___llmod:
  8574                           	opt stack 26
  8575                           
  8576                           ;incstack = 0
  8577  003912  5020               	movf	___llmod@divisor,w,c
  8578  003914  1021               	iorwf	___llmod@divisor+1,w,c
  8579  003916  1022               	iorwf	___llmod@divisor+2,w,c
  8580  003918  1023               	iorwf	___llmod@divisor+3,w,c
  8581  00391A  B4D8               	btfsc	status,2,c
  8582  00391C  D024               	goto	l1534
  8583  00391E  0E01               	movlw	1
  8584  003920  6E24               	movwf	___llmod@counter,c
  8585  003922  D006               	goto	l7883
  8586  003924                     l7881:
  8587  003924  90D8               	bcf	status,0,c
  8588  003926  3620               	rlcf	___llmod@divisor,f,c
  8589  003928  3621               	rlcf	___llmod@divisor+1,f,c
  8590  00392A  3622               	rlcf	___llmod@divisor+2,f,c
  8591  00392C  3623               	rlcf	___llmod@divisor+3,f,c
  8592  00392E  2A24               	incf	___llmod@counter,f,c
  8593  003930                     l7883:
  8594  003930  AE23               	btfss	___llmod@divisor+3,7,c
  8595  003932  D7F8               	goto	l7881
  8596  003934                     l7885:
  8597  003934  5020               	movf	___llmod@divisor,w,c
  8598  003936  5C1C               	subwf	___llmod@dividend,w,c
  8599  003938  5021               	movf	___llmod@divisor+1,w,c
  8600  00393A  581D               	subwfb	___llmod@dividend+1,w,c
  8601  00393C  5022               	movf	___llmod@divisor+2,w,c
  8602  00393E  581E               	subwfb	___llmod@dividend+2,w,c
  8603  003940  5023               	movf	___llmod@divisor+3,w,c
  8604  003942  581F               	subwfb	___llmod@dividend+3,w,c
  8605  003944  A0D8               	btfss	status,0,c
  8606  003946  D008               	goto	l7889
  8607  003948  5020               	movf	___llmod@divisor,w,c
  8608  00394A  5E1C               	subwf	___llmod@dividend,f,c
  8609  00394C  5021               	movf	___llmod@divisor+1,w,c
  8610  00394E  5A1D               	subwfb	___llmod@dividend+1,f,c
  8611  003950  5022               	movf	___llmod@divisor+2,w,c
  8612  003952  5A1E               	subwfb	___llmod@dividend+2,f,c
  8613  003954  5023               	movf	___llmod@divisor+3,w,c
  8614  003956  5A1F               	subwfb	___llmod@dividend+3,f,c
  8615  003958                     l7889:
  8616  003958  90D8               	bcf	status,0,c
  8617  00395A  3223               	rrcf	___llmod@divisor+3,f,c
  8618  00395C  3222               	rrcf	___llmod@divisor+2,f,c
  8619  00395E  3221               	rrcf	___llmod@divisor+1,f,c
  8620  003960  3220               	rrcf	___llmod@divisor,f,c
  8621  003962  2E24               	decfsz	___llmod@counter,f,c
  8622  003964  D7E7               	goto	l7885
  8623  003966                     l1534:
  8624  003966  C01C  F01C         	movff	___llmod@dividend,?___llmod
  8625  00396A  C01D  F01D         	movff	___llmod@dividend+1,?___llmod+1
  8626  00396E  C01E  F01E         	movff	___llmod@dividend+2,?___llmod+2
  8627  003972  C01F  F01F         	movff	___llmod@dividend+3,?___llmod+3
  8628  003976  0012               	return		;funcret
  8629  003978                     __end_of___llmod:
  8630                           	opt stack 0
  8631                           tblptru	equ	0xFF8
  8632                           tblptrh	equ	0xFF7
  8633                           tblptrl	equ	0xFF6
  8634                           tablat	equ	0xFF5
  8635                           prodh	equ	0xFF4
  8636                           prodl	equ	0xFF3
  8637                           intcon	equ	0xFF2
  8638                           intcon2	equ	0xFF1
  8639                           postinc0	equ	0xFEE
  8640                           wreg	equ	0xFE8
  8641                           postinc1	equ	0xFE6
  8642                           postdec1	equ	0xFE5
  8643                           fsr1h	equ	0xFE2
  8644                           fsr1l	equ	0xFE1
  8645                           indf2	equ	0xFDF
  8646                           postinc2	equ	0xFDE
  8647                           postdec2	equ	0xFDD
  8648                           fsr2h	equ	0xFDA
  8649                           fsr2l	equ	0xFD9
  8650                           status	equ	0xFD8
  8651                           
  8652 ;; *************** function ___lldiv *****************
  8653 ;; Defined at:
  8654 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8655 ;; Parameters:    Size  Location     Type
  8656 ;;  dividend        4   14[COMRAM] unsigned long 
  8657 ;;  divisor         4   18[COMRAM] unsigned long 
  8658 ;; Auto vars:     Size  Location     Type
  8659 ;;  quotient        4   22[COMRAM] unsigned long 
  8660 ;;  counter         1   26[COMRAM] unsigned char 
  8661 ;; Return value:  Size  Location     Type
  8662 ;;                  4   14[COMRAM] unsigned long 
  8663 ;; Registers used:
  8664 ;;		wreg, status,2, status,0
  8665 ;; Tracked objects:
  8666 ;;		On entry : 0/0
  8667 ;;		On exit  : 0/0
  8668 ;;		Unchanged: 0/0
  8669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8670 ;;      Params:         8       0       0       0       0       0       0
  8671 ;;      Locals:         5       0       0       0       0       0       0
  8672 ;;      Temps:          0       0       0       0       0       0       0
  8673 ;;      Totals:        13       0       0       0       0       0       0
  8674 ;;Total ram usage:       13 bytes
  8675 ;; Hardware stack levels used:    1
  8676 ;; Hardware stack levels required when called:    3
  8677 ;; This function calls:
  8678 ;;		Nothing
  8679 ;; This function is called by:
  8680 ;;		_printf
  8681 ;; This function uses a non-reentrant model
  8682 ;;
  8683                           
  8684                           	psect	text34
  8685  00355A                     __ptext34:
  8686                           	opt stack 0
  8687  00355A                     ___lldiv:
  8688                           	opt stack 26
  8689                           
  8690                           ;incstack = 0
  8691  00355A  0E00               	movlw	0
  8692  00355C  6E17               	movwf	___lldiv@quotient,c
  8693  00355E  0E00               	movlw	0
  8694  003560  6E18               	movwf	___lldiv@quotient+1,c
  8695  003562  0E00               	movlw	0
  8696  003564  6E19               	movwf	___lldiv@quotient+2,c
  8697  003566  0E00               	movlw	0
  8698  003568  6E1A               	movwf	___lldiv@quotient+3,c
  8699  00356A  5013               	movf	___lldiv@divisor,w,c
  8700  00356C  1014               	iorwf	___lldiv@divisor+1,w,c
  8701  00356E  1015               	iorwf	___lldiv@divisor+2,w,c
  8702  003570  1016               	iorwf	___lldiv@divisor+3,w,c
  8703  003572  B4D8               	btfsc	status,2,c
  8704  003574  D02A               	goto	l1524
  8705  003576  0E01               	movlw	1
  8706  003578  6E1B               	movwf	___lldiv@counter,c
  8707  00357A  D006               	goto	l7863
  8708  00357C                     l7861:
  8709  00357C  90D8               	bcf	status,0,c
  8710  00357E  3613               	rlcf	___lldiv@divisor,f,c
  8711  003580  3614               	rlcf	___lldiv@divisor+1,f,c
  8712  003582  3615               	rlcf	___lldiv@divisor+2,f,c
  8713  003584  3616               	rlcf	___lldiv@divisor+3,f,c
  8714  003586  2A1B               	incf	___lldiv@counter,f,c
  8715  003588                     l7863:
  8716  003588  AE16               	btfss	___lldiv@divisor+3,7,c
  8717  00358A  D7F8               	goto	l7861
  8718  00358C                     l7865:
  8719  00358C  90D8               	bcf	status,0,c
  8720  00358E  3617               	rlcf	___lldiv@quotient,f,c
  8721  003590  3618               	rlcf	___lldiv@quotient+1,f,c
  8722  003592  3619               	rlcf	___lldiv@quotient+2,f,c
  8723  003594  361A               	rlcf	___lldiv@quotient+3,f,c
  8724  003596  5013               	movf	___lldiv@divisor,w,c
  8725  003598  5C0F               	subwf	___lldiv@dividend,w,c
  8726  00359A  5014               	movf	___lldiv@divisor+1,w,c
  8727  00359C  5810               	subwfb	___lldiv@dividend+1,w,c
  8728  00359E  5015               	movf	___lldiv@divisor+2,w,c
  8729  0035A0  5811               	subwfb	___lldiv@dividend+2,w,c
  8730  0035A2  5016               	movf	___lldiv@divisor+3,w,c
  8731  0035A4  5812               	subwfb	___lldiv@dividend+3,w,c
  8732  0035A6  A0D8               	btfss	status,0,c
  8733  0035A8  D009               	goto	l7873
  8734  0035AA  5013               	movf	___lldiv@divisor,w,c
  8735  0035AC  5E0F               	subwf	___lldiv@dividend,f,c
  8736  0035AE  5014               	movf	___lldiv@divisor+1,w,c
  8737  0035B0  5A10               	subwfb	___lldiv@dividend+1,f,c
  8738  0035B2  5015               	movf	___lldiv@divisor+2,w,c
  8739  0035B4  5A11               	subwfb	___lldiv@dividend+2,f,c
  8740  0035B6  5016               	movf	___lldiv@divisor+3,w,c
  8741  0035B8  5A12               	subwfb	___lldiv@dividend+3,f,c
  8742  0035BA  8017               	bsf	___lldiv@quotient,0,c
  8743  0035BC                     l7873:
  8744  0035BC  90D8               	bcf	status,0,c
  8745  0035BE  3216               	rrcf	___lldiv@divisor+3,f,c
  8746  0035C0  3215               	rrcf	___lldiv@divisor+2,f,c
  8747  0035C2  3214               	rrcf	___lldiv@divisor+1,f,c
  8748  0035C4  3213               	rrcf	___lldiv@divisor,f,c
  8749  0035C6  2E1B               	decfsz	___lldiv@counter,f,c
  8750  0035C8  D7E1               	goto	l7865
  8751  0035CA                     l1524:
  8752  0035CA  C017  F00F         	movff	___lldiv@quotient,?___lldiv
  8753  0035CE  C018  F010         	movff	___lldiv@quotient+1,?___lldiv+1
  8754  0035D2  C019  F011         	movff	___lldiv@quotient+2,?___lldiv+2
  8755  0035D6  C01A  F012         	movff	___lldiv@quotient+3,?___lldiv+3
  8756  0035DA  0012               	return		;funcret
  8757  0035DC                     __end_of___lldiv:
  8758                           	opt stack 0
  8759                           tblptru	equ	0xFF8
  8760                           tblptrh	equ	0xFF7
  8761                           tblptrl	equ	0xFF6
  8762                           tablat	equ	0xFF5
  8763                           prodh	equ	0xFF4
  8764                           prodl	equ	0xFF3
  8765                           intcon	equ	0xFF2
  8766                           intcon2	equ	0xFF1
  8767                           postinc0	equ	0xFEE
  8768                           wreg	equ	0xFE8
  8769                           postinc1	equ	0xFE6
  8770                           postdec1	equ	0xFE5
  8771                           fsr1h	equ	0xFE2
  8772                           fsr1l	equ	0xFE1
  8773                           indf2	equ	0xFDF
  8774                           postinc2	equ	0xFDE
  8775                           postdec2	equ	0xFDD
  8776                           fsr2h	equ	0xFDA
  8777                           fsr2l	equ	0xFD9
  8778                           status	equ	0xFD8
  8779                           
  8780 ;; *************** function ___ftneg *****************
  8781 ;; Defined at:
  8782 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  8783 ;; Parameters:    Size  Location     Type
  8784 ;;  f1              3   14[COMRAM] float 
  8785 ;; Auto vars:     Size  Location     Type
  8786 ;;		None
  8787 ;; Return value:  Size  Location     Type
  8788 ;;                  3   14[COMRAM] float 
  8789 ;; Registers used:
  8790 ;;		wreg, status,2, status,0
  8791 ;; Tracked objects:
  8792 ;;		On entry : 0/0
  8793 ;;		On exit  : 0/0
  8794 ;;		Unchanged: 0/0
  8795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8796 ;;      Params:         3       0       0       0       0       0       0
  8797 ;;      Locals:         0       0       0       0       0       0       0
  8798 ;;      Temps:          0       0       0       0       0       0       0
  8799 ;;      Totals:         3       0       0       0       0       0       0
  8800 ;;Total ram usage:        3 bytes
  8801 ;; Hardware stack levels used:    1
  8802 ;; Hardware stack levels required when called:    3
  8803 ;; This function calls:
  8804 ;;		Nothing
  8805 ;; This function is called by:
  8806 ;;		_printf
  8807 ;;		_CurrentCoulombCount
  8808 ;; This function uses a non-reentrant model
  8809 ;;
  8810                           
  8811                           	psect	text35
  8812  003E00                     __ptext35:
  8813                           	opt stack 0
  8814  003E00                     ___ftneg:
  8815                           	opt stack 26
  8816                           
  8817                           ;incstack = 0
  8818  003E00  500F               	movf	___ftneg@f1,w,c
  8819  003E02  1010               	iorwf	___ftneg@f1+1,w,c
  8820  003E04  1011               	iorwf	___ftneg@f1+2,w,c
  8821  003E06  B4D8               	btfsc	status,2,c
  8822  003E08  D006               	goto	l1474
  8823  003E0A  0E00               	movlw	0
  8824  003E0C  1A0F               	xorwf	___ftneg@f1,f,c
  8825  003E0E  0E00               	movlw	0
  8826  003E10  1A10               	xorwf	___ftneg@f1+1,f,c
  8827  003E12  0E80               	movlw	128
  8828  003E14  1A11               	xorwf	___ftneg@f1+2,f,c
  8829  003E16                     l1474:
  8830  003E16  C00F  F00F         	movff	___ftneg@f1,?___ftneg
  8831  003E1A  C010  F010         	movff	___ftneg@f1+1,?___ftneg+1
  8832  003E1E  C011  F011         	movff	___ftneg@f1+2,?___ftneg+2
  8833  003E22  0012               	return		;funcret
  8834  003E24                     __end_of___ftneg:
  8835                           	opt stack 0
  8836                           tblptru	equ	0xFF8
  8837                           tblptrh	equ	0xFF7
  8838                           tblptrl	equ	0xFF6
  8839                           tablat	equ	0xFF5
  8840                           prodh	equ	0xFF4
  8841                           prodl	equ	0xFF3
  8842                           intcon	equ	0xFF2
  8843                           intcon2	equ	0xFF1
  8844                           postinc0	equ	0xFEE
  8845                           wreg	equ	0xFE8
  8846                           postinc1	equ	0xFE6
  8847                           postdec1	equ	0xFE5
  8848                           fsr1h	equ	0xFE2
  8849                           fsr1l	equ	0xFE1
  8850                           indf2	equ	0xFDF
  8851                           postinc2	equ	0xFDE
  8852                           postdec2	equ	0xFDD
  8853                           fsr2h	equ	0xFDA
  8854                           fsr2l	equ	0xFD9
  8855                           status	equ	0xFD8
  8856                           
  8857 ;; *************** function ___ftge *****************
  8858 ;; Defined at:
  8859 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  8860 ;; Parameters:    Size  Location     Type
  8861 ;;  ff1             3   54[BANK0 ] float 
  8862 ;;  ff2             3   57[BANK0 ] float 
  8863 ;; Auto vars:     Size  Location     Type
  8864 ;;		None
  8865 ;; Return value:  Size  Location     Type
  8866 ;;		None               void
  8867 ;; Registers used:
  8868 ;;		wreg, status,2, status,0
  8869 ;; Tracked objects:
  8870 ;;		On entry : 0/0
  8871 ;;		On exit  : 0/0
  8872 ;;		Unchanged: 0/0
  8873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8874 ;;      Params:         0       6       0       0       0       0       0
  8875 ;;      Locals:         0       0       0       0       0       0       0
  8876 ;;      Temps:          0       3       0       0       0       0       0
  8877 ;;      Totals:         0       9       0       0       0       0       0
  8878 ;;Total ram usage:        9 bytes
  8879 ;; Hardware stack levels used:    1
  8880 ;; Hardware stack levels required when called:    3
  8881 ;; This function calls:
  8882 ;;		Nothing
  8883 ;; This function is called by:
  8884 ;;		_Temp_Fault
  8885 ;;		_Run_Mode
  8886 ;;		_printf
  8887 ;;		_CheckTestReading
  8888 ;; This function uses a non-reentrant model
  8889 ;;
  8890                           
  8891                           	psect	text36
  8892  00310E                     __ptext36:
  8893                           	opt stack 0
  8894  00310E                     ___ftge:
  8895                           	opt stack 26
  8896                           
  8897                           ;incstack = 0
  8898  00310E  0100               	movlb	0	; () banked
  8899  003110  AF98               	btfss	(___ftge@ff1+2)& (0+255),7,b
  8900  003112  D01D               	goto	l7791
  8901                           
  8902                           ; BSR set to: 0
  8903  003114  C096  F09C         	movff	___ftge@ff1,??___ftge
  8904  003118  C097  F09D         	movff	___ftge@ff1+1,??___ftge+1
  8905  00311C  C098  F09E         	movff	___ftge@ff1+2,??___ftge+2
  8906  003120  0100               	movlb	0	; () banked
  8907  003122  1F9C               	comf	??___ftge& (0+255),f,b
  8908  003124  1F9D               	comf	(??___ftge+1)& (0+255),f,b
  8909  003126  1F9E               	comf	(??___ftge+2)& (0+255),f,b
  8910  003128  2B9C               	incf	??___ftge& (0+255),f,b
  8911  00312A  0E00               	movlw	0
  8912  00312C  239D               	addwfc	(??___ftge+1)& (0+255),f,b
  8913  00312E  239E               	addwfc	(??___ftge+2)& (0+255),f,b
  8914  003130  0E00               	movlw	0
  8915  003132  0100               	movlb	0	; () banked
  8916  003134  259C               	addwf	??___ftge& (0+255),w,b
  8917  003136  0100               	movlb	0	; () banked
  8918  003138  6F96               	movwf	___ftge@ff1& (0+255),b
  8919  00313A  0E00               	movlw	0
  8920  00313C  0100               	movlb	0	; () banked
  8921  00313E  219D               	addwfc	(??___ftge+1)& (0+255),w,b
  8922  003140  0100               	movlb	0	; () banked
  8923  003142  6F97               	movwf	(___ftge@ff1+1)& (0+255),b
  8924  003144  0E80               	movlw	128
  8925  003146  0100               	movlb	0	; () banked
  8926  003148  219E               	addwfc	(??___ftge+2)& (0+255),w,b
  8927  00314A  0100               	movlb	0	; () banked
  8928  00314C  6F98               	movwf	(___ftge@ff1+2)& (0+255),b
  8929  00314E                     l7791:
  8930                           
  8931                           ; BSR set to: 0
  8932  00314E  0100               	movlb	0	; () banked
  8933  003150  AF9B               	btfss	(___ftge@ff2+2)& (0+255),7,b
  8934  003152  D01D               	goto	l7795
  8935                           
  8936                           ; BSR set to: 0
  8937  003154  C099  F09C         	movff	___ftge@ff2,??___ftge
  8938  003158  C09A  F09D         	movff	___ftge@ff2+1,??___ftge+1
  8939  00315C  C09B  F09E         	movff	___ftge@ff2+2,??___ftge+2
  8940  003160  0100               	movlb	0	; () banked
  8941  003162  1F9C               	comf	??___ftge& (0+255),f,b
  8942  003164  1F9D               	comf	(??___ftge+1)& (0+255),f,b
  8943  003166  1F9E               	comf	(??___ftge+2)& (0+255),f,b
  8944  003168  2B9C               	incf	??___ftge& (0+255),f,b
  8945  00316A  0E00               	movlw	0
  8946  00316C  239D               	addwfc	(??___ftge+1)& (0+255),f,b
  8947  00316E  239E               	addwfc	(??___ftge+2)& (0+255),f,b
  8948  003170  0E00               	movlw	0
  8949  003172  0100               	movlb	0	; () banked
  8950  003174  259C               	addwf	??___ftge& (0+255),w,b
  8951  003176  0100               	movlb	0	; () banked
  8952  003178  6F99               	movwf	___ftge@ff2& (0+255),b
  8953  00317A  0E00               	movlw	0
  8954  00317C  0100               	movlb	0	; () banked
  8955  00317E  219D               	addwfc	(??___ftge+1)& (0+255),w,b
  8956  003180  0100               	movlb	0	; () banked
  8957  003182  6F9A               	movwf	(___ftge@ff2+1)& (0+255),b
  8958  003184  0E80               	movlw	128
  8959  003186  0100               	movlb	0	; () banked
  8960  003188  219E               	addwfc	(??___ftge+2)& (0+255),w,b
  8961  00318A  0100               	movlb	0	; () banked
  8962  00318C  6F9B               	movwf	(___ftge@ff2+2)& (0+255),b
  8963  00318E                     l7795:
  8964                           
  8965                           ; BSR set to: 0
  8966  00318E  0E00               	movlw	0
  8967  003190  0100               	movlb	0	; () banked
  8968  003192  1B96               	xorwf	___ftge@ff1& (0+255),f,b
  8969  003194  0E00               	movlw	0
  8970  003196  0100               	movlb	0	; () banked
  8971  003198  1B97               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  8972  00319A  0E80               	movlw	128
  8973  00319C  0100               	movlb	0	; () banked
  8974  00319E  1B98               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  8975                           
  8976                           ; BSR set to: 0
  8977  0031A0  0E00               	movlw	0
  8978  0031A2  0100               	movlb	0	; () banked
  8979  0031A4  1B99               	xorwf	___ftge@ff2& (0+255),f,b
  8980  0031A6  0E00               	movlw	0
  8981  0031A8  0100               	movlb	0	; () banked
  8982  0031AA  1B9A               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  8983  0031AC  0E80               	movlw	128
  8984  0031AE  0100               	movlb	0	; () banked
  8985  0031B0  1B9B               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  8986  0031B2  0100               	movlb	0	; () banked
  8987  0031B4  5199               	movf	___ftge@ff2& (0+255),w,b
  8988  0031B6  0100               	movlb	0	; () banked
  8989  0031B8  5D96               	subwf	___ftge@ff1& (0+255),w,b
  8990  0031BA  0100               	movlb	0	; () banked
  8991  0031BC  519A               	movf	(___ftge@ff2+1)& (0+255),w,b
  8992  0031BE  0100               	movlb	0	; () banked
  8993  0031C0  5997               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  8994  0031C2  0100               	movlb	0	; () banked
  8995  0031C4  519B               	movf	(___ftge@ff2+2)& (0+255),w,b
  8996  0031C6  0100               	movlb	0	; () banked
  8997  0031C8  5998               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  8998  0031CA  B0D8               	btfsc	status,0,c
  8999  0031CC  D002               	goto	l7801
  9000                           
  9001                           ; BSR set to: 0
  9002  0031CE  90D8               	bcf	status,0,c
  9003  0031D0  0012               	return	
  9004  0031D2                     l7801:
  9005                           
  9006                           ; BSR set to: 0
  9007  0031D2  80D8               	bsf	status,0,c
  9008                           
  9009                           ; BSR set to: 0
  9010  0031D4  0012               	return	
  9011  0031D6                     __end_of___ftge:
  9012                           	opt stack 0
  9013                           tblptru	equ	0xFF8
  9014                           tblptrh	equ	0xFF7
  9015                           tblptrl	equ	0xFF6
  9016                           tablat	equ	0xFF5
  9017                           prodh	equ	0xFF4
  9018                           prodl	equ	0xFF3
  9019                           intcon	equ	0xFF2
  9020                           intcon2	equ	0xFF1
  9021                           postinc0	equ	0xFEE
  9022                           wreg	equ	0xFE8
  9023                           postinc1	equ	0xFE6
  9024                           postdec1	equ	0xFE5
  9025                           fsr1h	equ	0xFE2
  9026                           fsr1l	equ	0xFE1
  9027                           indf2	equ	0xFDF
  9028                           postinc2	equ	0xFDE
  9029                           postdec2	equ	0xFDD
  9030                           fsr2h	equ	0xFDA
  9031                           fsr2l	equ	0xFD9
  9032                           status	equ	0xFD8
  9033                           
  9034 ;; *************** function _TempRun *****************
  9035 ;; Defined at:
  9036 ;;		line 16 in file "Tempeture.c"
  9037 ;; Parameters:    Size  Location     Type
  9038 ;;		None
  9039 ;; Auto vars:     Size  Location     Type
  9040 ;;		None
  9041 ;; Return value:  Size  Location     Type
  9042 ;;                  1    wreg      void 
  9043 ;; Registers used:
  9044 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9045 ;; Tracked objects:
  9046 ;;		On entry : 0/0
  9047 ;;		On exit  : 0/0
  9048 ;;		Unchanged: 0/0
  9049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9050 ;;      Params:         0       0       0       0       0       0       0
  9051 ;;      Locals:         0       0       0       0       0       0       0
  9052 ;;      Temps:          0       0       0       0       0       0       0
  9053 ;;      Totals:         0       0       0       0       0       0       0
  9054 ;;Total ram usage:        0 bytes
  9055 ;; Hardware stack levels used:    1
  9056 ;; Hardware stack levels required when called:    8
  9057 ;; This function calls:
  9058 ;;		_Temp_Convert
  9059 ;;		_Temp_Read
  9060 ;; This function is called by:
  9061 ;;		_Run_Mode
  9062 ;; This function uses a non-reentrant model
  9063 ;;
  9064                           
  9065                           	psect	text37
  9066  003F14                     __ptext37:
  9067                           	opt stack 0
  9068  003F14                     _TempRun:
  9069                           	opt stack 21
  9070                           
  9071                           ;Tempeture.c: 17: Temp_Read();
  9072                           
  9073                           ; BSR set to: 0
  9074                           ;incstack = 0
  9075  003F14  EC1E  F01C         	call	_Temp_Read	;wreg free
  9076                           
  9077                           ;Tempeture.c: 18: Temp_Convert();
  9078  003F18  EC18  F010         	call	_Temp_Convert	;wreg free
  9079  003F1C  0012               	return		;funcret
  9080  003F1E                     __end_of_TempRun:
  9081                           	opt stack 0
  9082                           tblptru	equ	0xFF8
  9083                           tblptrh	equ	0xFF7
  9084                           tblptrl	equ	0xFF6
  9085                           tablat	equ	0xFF5
  9086                           prodh	equ	0xFF4
  9087                           prodl	equ	0xFF3
  9088                           intcon	equ	0xFF2
  9089                           intcon2	equ	0xFF1
  9090                           postinc0	equ	0xFEE
  9091                           wreg	equ	0xFE8
  9092                           postinc1	equ	0xFE6
  9093                           postdec1	equ	0xFE5
  9094                           fsr1h	equ	0xFE2
  9095                           fsr1l	equ	0xFE1
  9096                           indf2	equ	0xFDF
  9097                           postinc2	equ	0xFDE
  9098                           postdec2	equ	0xFDD
  9099                           fsr2h	equ	0xFDA
  9100                           fsr2l	equ	0xFD9
  9101                           status	equ	0xFD8
  9102                           
  9103 ;; *************** function _Temp_Read *****************
  9104 ;; Defined at:
  9105 ;;		line 36 in file "Tempeture.c"
  9106 ;; Parameters:    Size  Location     Type
  9107 ;;		None
  9108 ;; Auto vars:     Size  Location     Type
  9109 ;;		None
  9110 ;; Return value:  Size  Location     Type
  9111 ;;                  1    wreg      void 
  9112 ;; Registers used:
  9113 ;;		wreg, status,2, status,0, cstack
  9114 ;; Tracked objects:
  9115 ;;		On entry : 0/0
  9116 ;;		On exit  : 0/0
  9117 ;;		Unchanged: 0/0
  9118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9119 ;;      Params:         0       0       0       0       0       0       0
  9120 ;;      Locals:         0       0       0       0       0       0       0
  9121 ;;      Temps:          0       0       0       0       0       0       0
  9122 ;;      Totals:         0       0       0       0       0       0       0
  9123 ;;Total ram usage:        0 bytes
  9124 ;; Hardware stack levels used:    1
  9125 ;; Hardware stack levels required when called:    4
  9126 ;; This function calls:
  9127 ;;		_ADC_GetConversion
  9128 ;; This function is called by:
  9129 ;;		_TempRun
  9130 ;; This function uses a non-reentrant model
  9131 ;;
  9132                           
  9133                           	psect	text38
  9134  00383C                     __ptext38:
  9135                           	opt stack 0
  9136  00383C                     _Temp_Read:
  9137                           	opt stack 24
  9138                           
  9139                           ;Tempeture.c: 38: LATAbits.LA0 = 0;
  9140                           
  9141                           ;incstack = 0
  9142  00383C  9089               	bcf	3977,0,c	;volatile
  9143                           
  9144                           ;Tempeture.c: 39: ADCON1 = 0x80;
  9145  00383E  0E80               	movlw	128
  9146  003840  6EC1               	movwf	4033,c	;volatile
  9147                           
  9148                           ;Tempeture.c: 40: Temp_Adc[0] = ADC_GetConversion(TEMP1);
  9149  003842  0E01               	movlw	1
  9150  003844  EC6B  F01E         	call	_ADC_GetConversion
  9151  003848  C00F  F1E4         	movff	?_ADC_GetConversion,_Temp_Adc
  9152  00384C  C010  F1E5         	movff	?_ADC_GetConversion+1,_Temp_Adc+1
  9153                           
  9154                           ;Tempeture.c: 41: Temp_Adc[1] = ADC_GetConversion(TEMP2);
  9155  003850  0E02               	movlw	2
  9156  003852  EC6B  F01E         	call	_ADC_GetConversion
  9157  003856  C00F  F1E6         	movff	?_ADC_GetConversion,_Temp_Adc+2
  9158  00385A  C010  F1E7         	movff	?_ADC_GetConversion+1,_Temp_Adc+3
  9159                           
  9160                           ;Tempeture.c: 42: Temp_Adc[2] = ADC_GetConversion(TEMP3);
  9161  00385E  0E03               	movlw	3
  9162  003860  EC6B  F01E         	call	_ADC_GetConversion
  9163  003864  C00F  F1E8         	movff	?_ADC_GetConversion,_Temp_Adc+4
  9164  003868  C010  F1E9         	movff	?_ADC_GetConversion+1,_Temp_Adc+5
  9165                           
  9166                           ;Tempeture.c: 43: Temp_Adc[3] = ADC_GetConversion(TEMP4);
  9167  00386C  0E04               	movlw	4
  9168  00386E  EC6B  F01E         	call	_ADC_GetConversion
  9169  003872  C00F  F1EA         	movff	?_ADC_GetConversion,_Temp_Adc+6
  9170  003876  C010  F1EB         	movff	?_ADC_GetConversion+1,_Temp_Adc+7
  9171                           
  9172                           ;Tempeture.c: 44: Temp_Adc[4] = ADC_GetConversion(TEMP5);
  9173  00387A  0E05               	movlw	5
  9174  00387C  EC6B  F01E         	call	_ADC_GetConversion
  9175  003880  C00F  F1EC         	movff	?_ADC_GetConversion,_Temp_Adc+8
  9176  003884  C010  F1ED         	movff	?_ADC_GetConversion+1,_Temp_Adc+9
  9177                           
  9178                           ;Tempeture.c: 45: Temp_Adc[5] = ADC_GetConversion(TEMP6);
  9179  003888  0E06               	movlw	6
  9180  00388A  EC6B  F01E         	call	_ADC_GetConversion
  9181  00388E  C00F  F1EE         	movff	?_ADC_GetConversion,_Temp_Adc+10
  9182  003892  C010  F1EF         	movff	?_ADC_GetConversion+1,_Temp_Adc+11
  9183                           
  9184                           ;Tempeture.c: 46: Temp_Adc[6] = ADC_GetConversion(TEMP7);
  9185  003896  0E07               	movlw	7
  9186  003898  EC6B  F01E         	call	_ADC_GetConversion
  9187  00389C  C00F  F1F0         	movff	?_ADC_GetConversion,_Temp_Adc+12
  9188  0038A0  C010  F1F1         	movff	?_ADC_GetConversion+1,_Temp_Adc+13
  9189                           
  9190                           ;Tempeture.c: 47: LATAbits.LA0 = 1;
  9191  0038A4  8089               	bsf	3977,0,c	;volatile
  9192  0038A6  0012               	return		;funcret
  9193  0038A8                     __end_of_Temp_Read:
  9194                           	opt stack 0
  9195                           tblptru	equ	0xFF8
  9196                           tblptrh	equ	0xFF7
  9197                           tblptrl	equ	0xFF6
  9198                           tablat	equ	0xFF5
  9199                           prodh	equ	0xFF4
  9200                           prodl	equ	0xFF3
  9201                           intcon	equ	0xFF2
  9202                           intcon2	equ	0xFF1
  9203                           postinc0	equ	0xFEE
  9204                           wreg	equ	0xFE8
  9205                           postinc1	equ	0xFE6
  9206                           postdec1	equ	0xFE5
  9207                           fsr1h	equ	0xFE2
  9208                           fsr1l	equ	0xFE1
  9209                           indf2	equ	0xFDF
  9210                           postinc2	equ	0xFDE
  9211                           postdec2	equ	0xFDD
  9212                           fsr2h	equ	0xFDA
  9213                           fsr2l	equ	0xFD9
  9214                           status	equ	0xFD8
  9215                           
  9216 ;; *************** function _Temp_Convert *****************
  9217 ;; Defined at:
  9218 ;;		line 60 in file "Tempeture.c"
  9219 ;; Parameters:    Size  Location     Type
  9220 ;;		None
  9221 ;; Auto vars:     Size  Location     Type
  9222 ;;  x               2   43[BANK0 ] int 
  9223 ;;  steinhart       3   45[BANK0 ] float 
  9224 ;; Return value:  Size  Location     Type
  9225 ;;                  1    wreg      void 
  9226 ;; Registers used:
  9227 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9228 ;; Tracked objects:
  9229 ;;		On entry : 0/0
  9230 ;;		On exit  : 0/0
  9231 ;;		Unchanged: 0/0
  9232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9233 ;;      Params:         0       0       0       0       0       0       0
  9234 ;;      Locals:         0      11       0       0       0       0       0
  9235 ;;      Temps:          0       0       0       0       0       0       0
  9236 ;;      Totals:         0      11       0       0       0       0       0
  9237 ;;Total ram usage:       11 bytes
  9238 ;; Hardware stack levels used:    1
  9239 ;; Hardware stack levels required when called:    7
  9240 ;; This function calls:
  9241 ;;		_Temp_Filter
  9242 ;;		___awtoft
  9243 ;;		___ftadd
  9244 ;;		___ftdiv
  9245 ;;		___ftmul
  9246 ;;		___ftsub
  9247 ;;		___wmul
  9248 ;;		_log
  9249 ;; This function is called by:
  9250 ;;		_TempRun
  9251 ;; This function uses a non-reentrant model
  9252 ;;
  9253                           
  9254                           	psect	text39
  9255  002030                     __ptext39:
  9256                           	opt stack 0
  9257  002030                     _Temp_Convert:
  9258                           	opt stack 21
  9259                           
  9260                           ;Tempeture.c: 62: float steinhart;
  9261                           ;Tempeture.c: 63: for(int x = 0; x < 6; x++)
  9262                           
  9263                           ;incstack = 0
  9264  002030  0E00               	movlw	0
  9265  002032  0100               	movlb	0	; () banked
  9266  002034  6F8C               	movwf	(Temp_Convert@x+1)& (0+255),b
  9267  002036  0E00               	movlw	0
  9268  002038  6F8B               	movwf	Temp_Convert@x& (0+255),b
  9269                           
  9270                           ; BSR set to: 0
  9271  00203A  0100               	movlb	0	; () banked
  9272  00203C  BF8C               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  9273  00203E  D00A               	goto	l7909
  9274  002040  0100               	movlb	0	; () banked
  9275  002042  518C               	movf	(Temp_Convert@x+1)& (0+255),w,b
  9276  002044  E106               	bnz	u8040
  9277  002046  0E06               	movlw	6
  9278  002048  0100               	movlb	0	; () banked
  9279  00204A  5D8B               	subwf	Temp_Convert@x& (0+255),w,b
  9280  00204C  B0D8               	btfsc	status,0,c
  9281  00204E  D109               	goto	l7933
  9282  002050  D001               	goto	l7909
  9283  002052                     u8040:
  9284                           
  9285                           ; BSR set to: 0
  9286  002052  D107               	goto	l7933
  9287  002054                     l7909:
  9288                           
  9289                           ; BSR set to: 0
  9290                           ;Tempeture.c: 64: {
  9291                           ;Tempeture.c: 65: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  9292  002054  0E00               	movlw	0
  9293  002056  0100               	movlb	0	; () banked
  9294  002058  6F6D               	movwf	___ftadd@f2& (0+255),b
  9295  00205A  0E80               	movlw	128
  9296  00205C  0100               	movlb	0	; () banked
  9297  00205E  6F6E               	movwf	(___ftadd@f2+1)& (0+255),b
  9298  002060  0EBF               	movlw	191
  9299  002062  0100               	movlb	0	; () banked
  9300  002064  6F6F               	movwf	(___ftadd@f2+2)& (0+255),b
  9301  002066  90D8               	bcf	status,0,c
  9302  002068  0100               	movlb	0	; () banked
  9303  00206A  358B               	rlcf	Temp_Convert@x& (0+255),w,b
  9304  00206C  6ED9               	movwf	fsr2l,c
  9305  00206E  0100               	movlb	0	; () banked
  9306  002070  358C               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
  9307  002072  6EDA               	movwf	fsr2h,c
  9308  002074  0EE4               	movlw	low _Temp_Adc
  9309  002076  26D9               	addwf	fsr2l,f,c
  9310  002078  0E01               	movlw	high _Temp_Adc
  9311  00207A  22DA               	addwfc	fsr2h,f,c
  9312  00207C  CFDE F017          	movff	postinc2,___awtoft@c
  9313  002080  CFDD F018          	movff	postdec2,___awtoft@c+1
  9314  002084  EC1C  F01E         	call	___awtoft	;wreg free
  9315  002088  C017  F026         	movff	?___awtoft,___ftdiv@f2
  9316  00208C  C018  F027         	movff	?___awtoft+1,___ftdiv@f2+1
  9317  002090  C019  F028         	movff	?___awtoft+2,___ftdiv@f2+2
  9318  002094  0EC0               	movlw	192
  9319  002096  6E23               	movwf	___ftdiv@f1,c
  9320  002098  0E7F               	movlw	127
  9321  00209A  6E24               	movwf	___ftdiv@f1+1,c
  9322  00209C  0E44               	movlw	68
  9323  00209E  6E25               	movwf	___ftdiv@f1+2,c
  9324  0020A0  ECD5  F016         	call	___ftdiv	;wreg free
  9325  0020A4  C023  F06A         	movff	?___ftdiv,___ftadd@f1
  9326  0020A8  C024  F06B         	movff	?___ftdiv+1,___ftadd@f1+1
  9327  0020AC  C025  F06C         	movff	?___ftdiv+2,___ftadd@f1+2
  9328  0020B0  ECBD  F00D         	call	___ftadd	;wreg free
  9329  0020B4  C06A  F085         	movff	?___ftadd,_Temp_Convert$2726
  9330  0020B8  C06B  F086         	movff	?___ftadd+1,_Temp_Convert$2726+1
  9331  0020BC  C06C  F087         	movff	?___ftadd+2,_Temp_Convert$2726+2
  9332                           
  9333                           ;Tempeture.c: 64: {
  9334                           ;Tempeture.c: 65: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  9335  0020C0  C085  F026         	movff	_Temp_Convert$2726,___ftdiv@f2
  9336  0020C4  C086  F027         	movff	_Temp_Convert$2726+1,___ftdiv@f2+1
  9337  0020C8  C087  F028         	movff	_Temp_Convert$2726+2,___ftdiv@f2+2
  9338  0020CC  0E40               	movlw	64
  9339  0020CE  6E23               	movwf	___ftdiv@f1,c
  9340  0020D0  0E1C               	movlw	28
  9341  0020D2  6E24               	movwf	___ftdiv@f1+1,c
  9342  0020D4  0E46               	movlw	70
  9343  0020D6  6E25               	movwf	___ftdiv@f1+2,c
  9344  0020D8  ECD5  F016         	call	___ftdiv	;wreg free
  9345  0020DC  C023  F088         	movff	?___ftdiv,_Temp_Convert$2727
  9346  0020E0  C024  F089         	movff	?___ftdiv+1,_Temp_Convert$2727+1
  9347  0020E4  C025  F08A         	movff	?___ftdiv+2,_Temp_Convert$2727+2
  9348                           
  9349                           ;Tempeture.c: 64: {
  9350                           ;Tempeture.c: 65: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  9351  0020E8  C088  F023         	movff	_Temp_Convert$2727,___ftdiv@f1
  9352  0020EC  C089  F024         	movff	_Temp_Convert$2727+1,___ftdiv@f1+1
  9353  0020F0  C08A  F025         	movff	_Temp_Convert$2727+2,___ftdiv@f1+2
  9354  0020F4  0E40               	movlw	64
  9355  0020F6  6E26               	movwf	___ftdiv@f2,c
  9356  0020F8  0E1C               	movlw	28
  9357  0020FA  6E27               	movwf	___ftdiv@f2+1,c
  9358  0020FC  0E46               	movlw	70
  9359  0020FE  6E28               	movwf	___ftdiv@f2+2,c
  9360  002100  ECD5  F016         	call	___ftdiv	;wreg free
  9361  002104  C023  F08D         	movff	?___ftdiv,Temp_Convert@steinhart
  9362  002108  C024  F08E         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  9363  00210C  C025  F08F         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  9364                           
  9365                           ;Tempeture.c: 66: steinhart = log(steinhart);
  9366  002110  C08D  F080         	movff	Temp_Convert@steinhart,log@x
  9367  002114  C08E  F081         	movff	Temp_Convert@steinhart+1,log@x+1
  9368  002118  C08F  F082         	movff	Temp_Convert@steinhart+2,log@x+2
  9369  00211C  EC62  F013         	call	_log	;wreg free
  9370  002120  C080  F08D         	movff	?_log,Temp_Convert@steinhart
  9371  002124  C081  F08E         	movff	?_log+1,Temp_Convert@steinhart+1
  9372  002128  C082  F08F         	movff	?_log+2,Temp_Convert@steinhart+2
  9373                           
  9374                           ;Tempeture.c: 67: steinhart /= 3950;
  9375  00212C  C08D  F023         	movff	Temp_Convert@steinhart,___ftdiv@f1
  9376  002130  C08E  F024         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
  9377  002134  C08F  F025         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
  9378  002138  0EE0               	movlw	224
  9379  00213A  6E26               	movwf	___ftdiv@f2,c
  9380  00213C  0E76               	movlw	118
  9381  00213E  6E27               	movwf	___ftdiv@f2+1,c
  9382  002140  0E45               	movlw	69
  9383  002142  6E28               	movwf	___ftdiv@f2+2,c
  9384  002144  ECD5  F016         	call	___ftdiv	;wreg free
  9385  002148  C023  F08D         	movff	?___ftdiv,Temp_Convert@steinhart
  9386  00214C  C024  F08E         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  9387  002150  C025  F08F         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  9388                           
  9389                           ;Tempeture.c: 68: steinhart += 1.0 / (25 + 273.15);
  9390  002154  C08D  F06A         	movff	Temp_Convert@steinhart,___ftadd@f1
  9391  002158  C08E  F06B         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
  9392  00215C  C08F  F06C         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
  9393  002160  0ECF               	movlw	207
  9394  002162  0100               	movlb	0	; () banked
  9395  002164  6F6D               	movwf	___ftadd@f2& (0+255),b
  9396  002166  0E5B               	movlw	91
  9397  002168  0100               	movlb	0	; () banked
  9398  00216A  6F6E               	movwf	(___ftadd@f2+1)& (0+255),b
  9399  00216C  0E3B               	movlw	59
  9400  00216E  0100               	movlb	0	; () banked
  9401  002170  6F6F               	movwf	(___ftadd@f2+2)& (0+255),b
  9402  002172  ECBD  F00D         	call	___ftadd	;wreg free
  9403  002176  C06A  F08D         	movff	?___ftadd,Temp_Convert@steinhart
  9404  00217A  C06B  F08E         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  9405  00217E  C06C  F08F         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  9406                           
  9407                           ;Tempeture.c: 69: steinhart = 1.0 / steinhart;
  9408  002182  0E00               	movlw	0
  9409  002184  6E23               	movwf	___ftdiv@f1,c
  9410  002186  0E80               	movlw	128
  9411  002188  6E24               	movwf	___ftdiv@f1+1,c
  9412  00218A  0E3F               	movlw	63
  9413  00218C  6E25               	movwf	___ftdiv@f1+2,c
  9414  00218E  C08D  F026         	movff	Temp_Convert@steinhart,___ftdiv@f2
  9415  002192  C08E  F027         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
  9416  002196  C08F  F028         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
  9417  00219A  ECD5  F016         	call	___ftdiv	;wreg free
  9418  00219E  C023  F08D         	movff	?___ftdiv,Temp_Convert@steinhart
  9419  0021A2  C024  F08E         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  9420  0021A6  C025  F08F         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  9421                           
  9422                           ;Tempeture.c: 70: steinhart -= 273.15;
  9423  0021AA  C08D  F076         	movff	Temp_Convert@steinhart,___ftsub@f1
  9424  0021AE  C08E  F077         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  9425  0021B2  C08F  F078         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  9426  0021B6  0E93               	movlw	147
  9427  0021B8  0100               	movlb	0	; () banked
  9428  0021BA  6F79               	movwf	___ftsub@f2& (0+255),b
  9429  0021BC  0E88               	movlw	136
  9430  0021BE  0100               	movlb	0	; () banked
  9431  0021C0  6F7A               	movwf	(___ftsub@f2+1)& (0+255),b
  9432  0021C2  0E43               	movlw	67
  9433  0021C4  0100               	movlb	0	; () banked
  9434  0021C6  6F7B               	movwf	(___ftsub@f2+2)& (0+255),b
  9435  0021C8  ECEA  F01C         	call	___ftsub	;wreg free
  9436  0021CC  C076  F08D         	movff	?___ftsub,Temp_Convert@steinhart
  9437  0021D0  C077  F08E         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  9438  0021D4  C078  F08F         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  9439                           
  9440                           ;Tempeture.c: 71: steinhart = (steinhart*1.8) + 32.0;
  9441  0021D8  0E66               	movlw	102
  9442  0021DA  6E35               	movwf	___ftmul@f2,c
  9443  0021DC  0EE6               	movlw	230
  9444  0021DE  6E36               	movwf	___ftmul@f2+1,c
  9445  0021E0  0E3F               	movlw	63
  9446  0021E2  6E37               	movwf	___ftmul@f2+2,c
  9447  0021E4  C08D  F032         	movff	Temp_Convert@steinhart,___ftmul@f1
  9448  0021E8  C08E  F033         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  9449  0021EC  C08F  F034         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  9450  0021F0  EC5B  F016         	call	___ftmul	;wreg free
  9451  0021F4  C032  F06A         	movff	?___ftmul,___ftadd@f1
  9452  0021F8  C033  F06B         	movff	?___ftmul+1,___ftadd@f1+1
  9453  0021FC  C034  F06C         	movff	?___ftmul+2,___ftadd@f1+2
  9454  002200  0E00               	movlw	0
  9455  002202  0100               	movlb	0	; () banked
  9456  002204  6F6D               	movwf	___ftadd@f2& (0+255),b
  9457  002206  0E00               	movlw	0
  9458  002208  0100               	movlb	0	; () banked
  9459  00220A  6F6E               	movwf	(___ftadd@f2+1)& (0+255),b
  9460  00220C  0E42               	movlw	66
  9461  00220E  0100               	movlb	0	; () banked
  9462  002210  6F6F               	movwf	(___ftadd@f2+2)& (0+255),b
  9463  002212  ECBD  F00D         	call	___ftadd	;wreg free
  9464  002216  C06A  F08D         	movff	?___ftadd,Temp_Convert@steinhart
  9465  00221A  C06B  F08E         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  9466  00221E  C06C  F08F         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  9467                           
  9468                           ;Tempeture.c: 72: TmpTemp_DegF[x] = steinhart;
  9469  002222  C08B  F01D         	movff	Temp_Convert@x,___wmul@multiplier
  9470  002226  C08C  F01E         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  9471  00222A  0E00               	movlw	0
  9472  00222C  6E20               	movwf	___wmul@multiplicand+1,c
  9473  00222E  0E03               	movlw	3
  9474  002230  6E1F               	movwf	___wmul@multiplicand,c
  9475  002232  ECDB  F01E         	call	___wmul	;wreg free
  9476  002236  0EA8               	movlw	low _TmpTemp_DegF
  9477  002238  241D               	addwf	?___wmul,w,c
  9478  00223A  6ED9               	movwf	fsr2l,c
  9479  00223C  0E02               	movlw	high _TmpTemp_DegF
  9480  00223E  201E               	addwfc	?___wmul+1,w,c
  9481  002240  6EDA               	movwf	fsr2h,c
  9482  002242  C08D  FFDE         	movff	Temp_Convert@steinhart,postinc2
  9483  002246  C08E  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  9484  00224A  C08F  FFDE         	movff	Temp_Convert@steinhart+2,postinc2
  9485  00224E  0100               	movlb	0	; () banked
  9486  002250  4B8B               	infsnz	Temp_Convert@x& (0+255),f,b
  9487  002252  2B8C               	incf	(Temp_Convert@x+1)& (0+255),f,b
  9488                           
  9489                           ; BSR set to: 0
  9490  002254  0100               	movlb	0	; () banked
  9491  002256  BF8C               	btfsc	(Temp_Convert@x+1)& (0+255),7,b
  9492  002258  D6FD               	goto	l7909
  9493  00225A  0100               	movlb	0	; () banked
  9494  00225C  518C               	movf	(Temp_Convert@x+1)& (0+255),w,b
  9495  00225E  E101               	bnz	l7933
  9496  002260  D6F2               	goto	L9
  9497  002262                     l7933:
  9498                           
  9499                           ; BSR set to: 0
  9500                           ;Tempeture.c: 73: }
  9501                           ;Tempeture.c: 74: Temp_Filter();
  9502  002262  EC02  F014         	call	_Temp_Filter	;wreg free
  9503  002266  0012               	return		;funcret
  9504  002268                     __end_of_Temp_Convert:
  9505                           	opt stack 0
  9506                           tblptru	equ	0xFF8
  9507                           tblptrh	equ	0xFF7
  9508                           tblptrl	equ	0xFF6
  9509                           tablat	equ	0xFF5
  9510                           prodh	equ	0xFF4
  9511                           prodl	equ	0xFF3
  9512                           intcon	equ	0xFF2
  9513                           intcon2	equ	0xFF1
  9514                           postinc0	equ	0xFEE
  9515                           wreg	equ	0xFE8
  9516                           postinc1	equ	0xFE6
  9517                           postdec1	equ	0xFE5
  9518                           fsr1h	equ	0xFE2
  9519                           fsr1l	equ	0xFE1
  9520                           indf2	equ	0xFDF
  9521                           postinc2	equ	0xFDE
  9522                           postdec2	equ	0xFDD
  9523                           fsr2h	equ	0xFDA
  9524                           fsr2l	equ	0xFD9
  9525                           status	equ	0xFD8
  9526                           
  9527 ;; *************** function _log *****************
  9528 ;; Defined at:
  9529 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  9530 ;; Parameters:    Size  Location     Type
  9531 ;;  x               3   32[BANK0 ] void 
  9532 ;; Auto vars:     Size  Location     Type
  9533 ;;  exponent        2   35[BANK0 ] int 
  9534 ;; Return value:  Size  Location     Type
  9535 ;;                  3   32[BANK0 ] int 
  9536 ;; Registers used:
  9537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9538 ;; Tracked objects:
  9539 ;;		On entry : 0/0
  9540 ;;		On exit  : 0/0
  9541 ;;		Unchanged: 0/0
  9542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9543 ;;      Params:         0       3       0       0       0       0       0
  9544 ;;      Locals:         0       2       0       0       0       0       0
  9545 ;;      Temps:          0       0       0       0       0       0       0
  9546 ;;      Totals:         0       5       0       0       0       0       0
  9547 ;;Total ram usage:        5 bytes
  9548 ;; Hardware stack levels used:    1
  9549 ;; Hardware stack levels required when called:    6
  9550 ;; This function calls:
  9551 ;;		___awtoft
  9552 ;;		___ftadd
  9553 ;;		___ftmul
  9554 ;;		_eval_poly
  9555 ;;		_frexp
  9556 ;; This function is called by:
  9557 ;;		_Temp_Convert
  9558 ;; This function uses a non-reentrant model
  9559 ;;
  9560                           
  9561                           	psect	text40
  9562  0026C4                     __ptext40:
  9563                           	opt stack 0
  9564  0026C4                     _log:
  9565                           	opt stack 21
  9566                           
  9567                           ;incstack = 0
  9568  0026C4  0100               	movlb	0	; () banked
  9569  0026C6  AF82               	btfss	(log@x+2)& (0+255),7,b
  9570  0026C8  D00F               	goto	l7475
  9571                           
  9572                           ; BSR set to: 0
  9573  0026CA  0E00               	movlw	0
  9574  0026CC  0100               	movlb	0	; () banked
  9575  0026CE  6FD7               	movwf	(_errno+1)& (0+255),b
  9576  0026D0  0E21               	movlw	33
  9577  0026D2  6FD6               	movwf	_errno& (0+255),b
  9578  0026D4  0E00               	movlw	0
  9579  0026D6  0100               	movlb	0	; () banked
  9580  0026D8  6F80               	movwf	?_log& (0+255),b
  9581  0026DA  0E00               	movlw	0
  9582  0026DC  0100               	movlb	0	; () banked
  9583  0026DE  6F81               	movwf	(?_log+1)& (0+255),b
  9584  0026E0  0E00               	movlw	0
  9585  0026E2  0100               	movlb	0	; () banked
  9586  0026E4  6F82               	movwf	(?_log+2)& (0+255),b
  9587                           
  9588                           ; BSR set to: 0
  9589  0026E6  0012               	return	
  9590  0026E8                     l7475:
  9591                           
  9592                           ; BSR set to: 0
  9593  0026E8  0100               	movlb	0	; () banked
  9594  0026EA  5180               	movf	log@x& (0+255),w,b
  9595  0026EC  0100               	movlb	0	; () banked
  9596  0026EE  1181               	iorwf	(log@x+1)& (0+255),w,b
  9597  0026F0  0100               	movlb	0	; () banked
  9598  0026F2  1182               	iorwf	(log@x+2)& (0+255),w,b
  9599  0026F4  A4D8               	btfss	status,2,c
  9600  0026F6  D00F               	goto	l7481
  9601                           
  9602                           ; BSR set to: 0
  9603  0026F8  0E00               	movlw	0
  9604  0026FA  0100               	movlb	0	; () banked
  9605  0026FC  6FD7               	movwf	(_errno+1)& (0+255),b
  9606  0026FE  0E22               	movlw	34
  9607  002700  6FD6               	movwf	_errno& (0+255),b
  9608  002702  0E00               	movlw	0
  9609  002704  0100               	movlb	0	; () banked
  9610  002706  6F80               	movwf	?_log& (0+255),b
  9611  002708  0E00               	movlw	0
  9612  00270A  0100               	movlb	0	; () banked
  9613  00270C  6F81               	movwf	(?_log+1)& (0+255),b
  9614  00270E  0E00               	movlw	0
  9615  002710  0100               	movlb	0	; () banked
  9616  002712  6F82               	movwf	(?_log+2)& (0+255),b
  9617                           
  9618                           ; BSR set to: 0
  9619  002714  0012               	return	
  9620  002716                     l7481:
  9621                           
  9622                           ; BSR set to: 0
  9623  002716  0E00               	movlw	0
  9624  002718  6E35               	movwf	___ftmul@f2,c
  9625  00271A  0E00               	movlw	0
  9626  00271C  6E36               	movwf	___ftmul@f2+1,c
  9627  00271E  0E40               	movlw	64
  9628  002720  6E37               	movwf	___ftmul@f2+2,c
  9629  002722  0E83               	movlw	low log@exponent
  9630  002724  6E12               	movwf	frexp@eptr,c
  9631  002726  0E00               	movlw	high log@exponent
  9632  002728  6E13               	movwf	frexp@eptr+1,c
  9633  00272A  C080  F00F         	movff	log@x,frexp@value
  9634  00272E  C081  F010         	movff	log@x+1,frexp@value+1
  9635  002732  C082  F011         	movff	log@x+2,frexp@value+2
  9636  002736  ECDF  F019         	call	_frexp	;wreg free
  9637  00273A  C00F  F032         	movff	?_frexp,___ftmul@f1
  9638  00273E  C010  F033         	movff	?_frexp+1,___ftmul@f1+1
  9639  002742  C011  F034         	movff	?_frexp+2,___ftmul@f1+2
  9640  002746  EC5B  F016         	call	___ftmul	;wreg free
  9641  00274A  C032  F06A         	movff	?___ftmul,___ftadd@f1
  9642  00274E  C033  F06B         	movff	?___ftmul+1,___ftadd@f1+1
  9643  002752  C034  F06C         	movff	?___ftmul+2,___ftadd@f1+2
  9644  002756  0E00               	movlw	0
  9645  002758  0100               	movlb	0	; () banked
  9646  00275A  6F6D               	movwf	___ftadd@f2& (0+255),b
  9647  00275C  0E80               	movlw	128
  9648  00275E  0100               	movlb	0	; () banked
  9649  002760  6F6E               	movwf	(___ftadd@f2+1)& (0+255),b
  9650  002762  0EBF               	movlw	191
  9651  002764  0100               	movlb	0	; () banked
  9652  002766  6F6F               	movwf	(___ftadd@f2+2)& (0+255),b
  9653  002768  ECBD  F00D         	call	___ftadd	;wreg free
  9654  00276C  C06A  F080         	movff	?___ftadd,log@x
  9655  002770  C06B  F081         	movff	?___ftadd+1,log@x+1
  9656  002774  C06C  F082         	movff	?___ftadd+2,log@x+2
  9657  002778  0100               	movlb	0	; () banked
  9658  00277A  0783               	decf	log@exponent& (0+255),f,b
  9659  00277C  A0D8               	btfss	status,0,c
  9660  00277E  0784               	decf	(log@exponent+1)& (0+255),f,b
  9661                           
  9662                           ; BSR set to: 0
  9663  002780  C080  F076         	movff	log@x,eval_poly@x
  9664  002784  C081  F077         	movff	log@x+1,eval_poly@x+1
  9665  002788  C082  F078         	movff	log@x+2,eval_poly@x+2
  9666  00278C  0E87               	movlw	low log@coeff
  9667  00278E  0100               	movlb	0	; () banked
  9668  002790  6F79               	movwf	eval_poly@d& (0+255),b
  9669  002792  0E7F               	movlw	high log@coeff
  9670  002794  0100               	movlb	0	; () banked
  9671  002796  6F7A               	movwf	(eval_poly@d+1)& (0+255),b
  9672  002798  0E00               	movlw	0
  9673  00279A  0100               	movlb	0	; () banked
  9674  00279C  6F7C               	movwf	(eval_poly@n+1)& (0+255),b
  9675  00279E  0E08               	movlw	8
  9676  0027A0  6F7B               	movwf	eval_poly@n& (0+255),b
  9677  0027A2  ECB6  F017         	call	_eval_poly	;wreg free
  9678  0027A6  C076  F080         	movff	?_eval_poly,log@x
  9679  0027AA  C077  F081         	movff	?_eval_poly+1,log@x+1
  9680  0027AE  C078  F082         	movff	?_eval_poly+2,log@x+2
  9681  0027B2  0E72               	movlw	114
  9682  0027B4  6E35               	movwf	___ftmul@f2,c
  9683  0027B6  0E31               	movlw	49
  9684  0027B8  6E36               	movwf	___ftmul@f2+1,c
  9685  0027BA  0E3F               	movlw	63
  9686  0027BC  6E37               	movwf	___ftmul@f2+2,c
  9687  0027BE  C083  F017         	movff	log@exponent,___awtoft@c
  9688  0027C2  C084  F018         	movff	log@exponent+1,___awtoft@c+1
  9689  0027C6  EC1C  F01E         	call	___awtoft	;wreg free
  9690  0027CA  C017  F032         	movff	?___awtoft,___ftmul@f1
  9691  0027CE  C018  F033         	movff	?___awtoft+1,___ftmul@f1+1
  9692  0027D2  C019  F034         	movff	?___awtoft+2,___ftmul@f1+2
  9693  0027D6  EC5B  F016         	call	___ftmul	;wreg free
  9694  0027DA  C032  F06A         	movff	?___ftmul,___ftadd@f1
  9695  0027DE  C033  F06B         	movff	?___ftmul+1,___ftadd@f1+1
  9696  0027E2  C034  F06C         	movff	?___ftmul+2,___ftadd@f1+2
  9697  0027E6  C080  F06D         	movff	log@x,___ftadd@f2
  9698  0027EA  C081  F06E         	movff	log@x+1,___ftadd@f2+1
  9699  0027EE  C082  F06F         	movff	log@x+2,___ftadd@f2+2
  9700  0027F2  ECBD  F00D         	call	___ftadd	;wreg free
  9701  0027F6  C06A  F080         	movff	?___ftadd,?_log
  9702  0027FA  C06B  F081         	movff	?___ftadd+1,?_log+1
  9703  0027FE  C06C  F082         	movff	?___ftadd+2,?_log+2
  9704  002802  0012               	return	
  9705  002804                     __end_of_log:
  9706                           	opt stack 0
  9707                           tblptru	equ	0xFF8
  9708                           tblptrh	equ	0xFF7
  9709                           tblptrl	equ	0xFF6
  9710                           tablat	equ	0xFF5
  9711                           prodh	equ	0xFF4
  9712                           prodl	equ	0xFF3
  9713                           intcon	equ	0xFF2
  9714                           intcon2	equ	0xFF1
  9715                           postinc0	equ	0xFEE
  9716                           wreg	equ	0xFE8
  9717                           postinc1	equ	0xFE6
  9718                           postdec1	equ	0xFE5
  9719                           fsr1h	equ	0xFE2
  9720                           fsr1l	equ	0xFE1
  9721                           indf2	equ	0xFDF
  9722                           postinc2	equ	0xFDE
  9723                           postdec2	equ	0xFDD
  9724                           fsr2h	equ	0xFDA
  9725                           fsr2l	equ	0xFD9
  9726                           status	equ	0xFD8
  9727                           
  9728 ;; *************** function _frexp *****************
  9729 ;; Defined at:
  9730 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  9731 ;; Parameters:    Size  Location     Type
  9732 ;;  value           3   14[COMRAM] int 
  9733 ;;  eptr            2   17[COMRAM] PTR int 
  9734 ;;		 -> floor@expon(2), log@exponent(2), 
  9735 ;; Auto vars:     Size  Location     Type
  9736 ;;		None
  9737 ;; Return value:  Size  Location     Type
  9738 ;;                  3   14[COMRAM] PTR int 
  9739 ;; Registers used:
  9740 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9741 ;; Tracked objects:
  9742 ;;		On entry : 0/0
  9743 ;;		On exit  : 0/0
  9744 ;;		Unchanged: 0/0
  9745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9746 ;;      Params:         5       0       0       0       0       0       0
  9747 ;;      Locals:         0       0       0       0       0       0       0
  9748 ;;      Temps:          2       0       0       0       0       0       0
  9749 ;;      Totals:         7       0       0       0       0       0       0
  9750 ;;Total ram usage:        7 bytes
  9751 ;; Hardware stack levels used:    1
  9752 ;; Hardware stack levels required when called:    3
  9753 ;; This function calls:
  9754 ;;		Nothing
  9755 ;; This function is called by:
  9756 ;;		_log
  9757 ;; This function uses a non-reentrant model
  9758 ;;
  9759                           
  9760                           	psect	text41
  9761  0033BE                     __ptext41:
  9762                           	opt stack 0
  9763  0033BE                     _frexp:
  9764                           	opt stack 23
  9765                           
  9766                           ;incstack = 0
  9767  0033BE  500F               	movf	frexp@value,w,c
  9768  0033C0  1010               	iorwf	frexp@value+1,w,c
  9769  0033C2  1011               	iorwf	frexp@value+2,w,c
  9770  0033C4  A4D8               	btfss	status,2,c
  9771  0033C6  D00F               	goto	l4903
  9772  0033C8  C012  FFD9         	movff	frexp@eptr,fsr2l
  9773  0033CC  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  9774  0033D0  0E00               	movlw	0
  9775  0033D2  6EDE               	movwf	postinc2,c
  9776  0033D4  0E00               	movlw	0
  9777  0033D6  6EDD               	movwf	postdec2,c
  9778  0033D8  0E00               	movlw	0
  9779  0033DA  6E0F               	movwf	?_frexp,c
  9780  0033DC  0E00               	movlw	0
  9781  0033DE  6E10               	movwf	?_frexp+1,c
  9782  0033E0  0E00               	movlw	0
  9783  0033E2  6E11               	movwf	?_frexp+2,c
  9784  0033E4  0012               	return	
  9785  0033E6                     l4903:
  9786  0033E6  5011               	movf	frexp@value+2,w,c
  9787  0033E8  0B7F               	andlw	127
  9788  0033EA  6E14               	movwf	??_frexp& (0+255),c
  9789  0033EC  6A15               	clrf	(??_frexp+1)& (0+255),c
  9790  0033EE  90D8               	bcf	status,0,c
  9791  0033F0  3614               	rlcf	??_frexp,f,c
  9792  0033F2  3615               	rlcf	??_frexp+1,f,c
  9793  0033F4  C012  FFD9         	movff	frexp@eptr,fsr2l
  9794  0033F8  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  9795  0033FC  C014  FFDE         	movff	??_frexp,postinc2
  9796  003400  C015  FFDD         	movff	??_frexp+1,postdec2
  9797  003404  AE10               	btfss	frexp@value+1,7,c
  9798  003406  D003               	goto	u4050
  9799  003408  6A14               	clrf	??_frexp& (0+255),c
  9800  00340A  2A14               	incf	??_frexp& (0+255),f,c
  9801  00340C  D001               	goto	u4058
  9802  00340E                     u4050:
  9803  00340E  6A14               	clrf	??_frexp& (0+255),c
  9804  003410                     u4058:
  9805  003410  5014               	movf	??_frexp,w,c
  9806  003412  C012  FFD9         	movff	frexp@eptr,fsr2l
  9807  003416  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  9808  00341A  12DE               	iorwf	postinc2,f,c
  9809  00341C  0E00               	movlw	0
  9810  00341E  12DD               	iorwf	postdec2,f,c
  9811  003420  C012  FFD9         	movff	frexp@eptr,fsr2l
  9812  003424  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  9813  003428  0E82               	movlw	130
  9814  00342A  26DE               	addwf	postinc2,f,c
  9815  00342C  0EFF               	movlw	255
  9816  00342E  22DD               	addwfc	postdec2,f,c
  9817  003430  8011               	bsf	frexp@value+2,0,c
  9818  003432  8211               	bsf	frexp@value+2,1,c
  9819  003434  8411               	bsf	frexp@value+2,2,c
  9820  003436  8611               	bsf	frexp@value+2,3,c
  9821  003438  8811               	bsf	frexp@value+2,4,c
  9822  00343A  8A11               	bsf	frexp@value+2,5,c
  9823  00343C  9C11               	bcf	frexp@value+2,6,c
  9824  00343E  9E10               	bcf	frexp@value+1,7,c
  9825  003440  C00F  F00F         	movff	frexp@value,?_frexp
  9826  003444  C010  F010         	movff	frexp@value+1,?_frexp+1
  9827  003448  C011  F011         	movff	frexp@value+2,?_frexp+2
  9828  00344C  0012               	return	
  9829  00344E                     __end_of_frexp:
  9830                           	opt stack 0
  9831                           tblptru	equ	0xFF8
  9832                           tblptrh	equ	0xFF7
  9833                           tblptrl	equ	0xFF6
  9834                           tablat	equ	0xFF5
  9835                           prodh	equ	0xFF4
  9836                           prodl	equ	0xFF3
  9837                           intcon	equ	0xFF2
  9838                           intcon2	equ	0xFF1
  9839                           postinc0	equ	0xFEE
  9840                           wreg	equ	0xFE8
  9841                           postinc1	equ	0xFE6
  9842                           postdec1	equ	0xFE5
  9843                           fsr1h	equ	0xFE2
  9844                           fsr1l	equ	0xFE1
  9845                           indf2	equ	0xFDF
  9846                           postinc2	equ	0xFDE
  9847                           postdec2	equ	0xFDD
  9848                           fsr2h	equ	0xFDA
  9849                           fsr2l	equ	0xFD9
  9850                           status	equ	0xFD8
  9851                           
  9852 ;; *************** function _eval_poly *****************
  9853 ;; Defined at:
  9854 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
  9855 ;; Parameters:    Size  Location     Type
  9856 ;;  x               3   22[BANK0 ] PTR int 
  9857 ;;  d               2   25[BANK0 ] PTR const 
  9858 ;;		 -> exp@coeff(30), log@coeff(27), 
  9859 ;;  n               2   27[BANK0 ] int 
  9860 ;; Auto vars:     Size  Location     Type
  9861 ;;  res             3   29[BANK0 ] int 
  9862 ;; Return value:  Size  Location     Type
  9863 ;;                  3   22[BANK0 ] int 
  9864 ;; Registers used:
  9865 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9866 ;; Tracked objects:
  9867 ;;		On entry : 0/0
  9868 ;;		On exit  : 0/0
  9869 ;;		Unchanged: 0/0
  9870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9871 ;;      Params:         0       7       0       0       0       0       0
  9872 ;;      Locals:         0       3       0       0       0       0       0
  9873 ;;      Temps:          2       0       0       0       0       0       0
  9874 ;;      Totals:         2      10       0       0       0       0       0
  9875 ;;Total ram usage:       12 bytes
  9876 ;; Hardware stack levels used:    1
  9877 ;; Hardware stack levels required when called:    5
  9878 ;; This function calls:
  9879 ;;		___ftadd
  9880 ;;		___ftmul
  9881 ;;		___wmul
  9882 ;; This function is called by:
  9883 ;;		_log
  9884 ;; This function uses a non-reentrant model
  9885 ;;
  9886                           
  9887                           	psect	text42
  9888  002F6C                     __ptext42:
  9889                           	opt stack 0
  9890  002F6C                     _eval_poly:
  9891                           	opt stack 21
  9892                           
  9893                           ;incstack = 0
  9894  002F6C  C07B  F01D         	movff	eval_poly@n,___wmul@multiplier
  9895  002F70  C07C  F01E         	movff	eval_poly@n+1,___wmul@multiplier+1
  9896  002F74  0E00               	movlw	0
  9897  002F76  6E20               	movwf	___wmul@multiplicand+1,c
  9898  002F78  0E03               	movlw	3
  9899  002F7A  6E1F               	movwf	___wmul@multiplicand,c
  9900  002F7C  ECDB  F01E         	call	___wmul	;wreg free
  9901  002F80  C079  F041         	movff	eval_poly@d,??_eval_poly
  9902  002F84  C07A  F042         	movff	eval_poly@d+1,??_eval_poly+1
  9903  002F88  501D               	movf	?___wmul,w,c
  9904  002F8A  2641               	addwf	??_eval_poly,f,c
  9905  002F8C  501E               	movf	?___wmul+1,w,c
  9906  002F8E  2242               	addwfc	??_eval_poly+1,f,c
  9907  002F90  C041  FFF6         	movff	??_eval_poly,tblptrl
  9908  002F94  C042  FFF7         	movff	??_eval_poly+1,tblptrh
  9909  002F98                     	if	0	;tblptru may be non-zero
  9910  002F98                     	endif
  9911  002F98                     	if	0	;tblptru may be non-zero
  9912  002F98                     	endif
  9913  002F98  0009               	tblrd		*+
  9914  002F9A  CFF5 F07D          	movff	tablat,eval_poly@res
  9915  002F9E  0009               	tblrd		*+
  9916  002FA0  CFF5 F07E          	movff	tablat,eval_poly@res+1
  9917  002FA4  000A               	tblrd		*-
  9918  002FA6  CFF5 F07F          	movff	tablat,eval_poly@res+2
  9919  002FAA  D03F               	goto	l7453
  9920  002FAC                     l7451:
  9921  002FAC  C07D  F035         	movff	eval_poly@res,___ftmul@f2
  9922  002FB0  C07E  F036         	movff	eval_poly@res+1,___ftmul@f2+1
  9923  002FB4  C07F  F037         	movff	eval_poly@res+2,___ftmul@f2+2
  9924  002FB8  C076  F032         	movff	eval_poly@x,___ftmul@f1
  9925  002FBC  C077  F033         	movff	eval_poly@x+1,___ftmul@f1+1
  9926  002FC0  C078  F034         	movff	eval_poly@x+2,___ftmul@f1+2
  9927  002FC4  EC5B  F016         	call	___ftmul	;wreg free
  9928  002FC8  C032  F06A         	movff	?___ftmul,___ftadd@f1
  9929  002FCC  C033  F06B         	movff	?___ftmul+1,___ftadd@f1+1
  9930  002FD0  C034  F06C         	movff	?___ftmul+2,___ftadd@f1+2
  9931  002FD4  0E00               	movlw	0
  9932  002FD6  6E20               	movwf	___wmul@multiplicand+1,c
  9933  002FD8  0E03               	movlw	3
  9934  002FDA  6E1F               	movwf	___wmul@multiplicand,c
  9935  002FDC  0100               	movlb	0	; () banked
  9936  002FDE  077B               	decf	eval_poly@n& (0+255),f,b
  9937  002FE0  A0D8               	btfss	status,0,c
  9938  002FE2  077C               	decf	(eval_poly@n+1)& (0+255),f,b
  9939  002FE4  C07B  F01D         	movff	eval_poly@n,___wmul@multiplier
  9940  002FE8  C07C  F01E         	movff	eval_poly@n+1,___wmul@multiplier+1
  9941  002FEC  ECDB  F01E         	call	___wmul	;wreg free
  9942  002FF0  C079  F041         	movff	eval_poly@d,??_eval_poly
  9943  002FF4  C07A  F042         	movff	eval_poly@d+1,??_eval_poly+1
  9944  002FF8  501D               	movf	?___wmul,w,c
  9945  002FFA  2641               	addwf	??_eval_poly,f,c
  9946  002FFC  501E               	movf	?___wmul+1,w,c
  9947  002FFE  2242               	addwfc	??_eval_poly+1,f,c
  9948  003000  C041  FFF6         	movff	??_eval_poly,tblptrl
  9949  003004  C042  FFF7         	movff	??_eval_poly+1,tblptrh
  9950  003008                     	if	0	;tblptru may be non-zero
  9951  003008                     	endif
  9952  003008                     	if	0	;tblptru may be non-zero
  9953  003008                     	endif
  9954  003008  0009               	tblrd		*+
  9955  00300A  CFF5 F06D          	movff	tablat,___ftadd@f2
  9956  00300E  0009               	tblrd		*+
  9957  003010  CFF5 F06E          	movff	tablat,___ftadd@f2+1
  9958  003014  000A               	tblrd		*-
  9959  003016  CFF5 F06F          	movff	tablat,___ftadd@f2+2
  9960  00301A  ECBD  F00D         	call	___ftadd	;wreg free
  9961  00301E  C06A  F07D         	movff	?___ftadd,eval_poly@res
  9962  003022  C06B  F07E         	movff	?___ftadd+1,eval_poly@res+1
  9963  003026  C06C  F07F         	movff	?___ftadd+2,eval_poly@res+2
  9964  00302A                     l7453:
  9965  00302A  0100               	movlb	0	; () banked
  9966  00302C  517B               	movf	eval_poly@n& (0+255),w,b
  9967  00302E  0100               	movlb	0	; () banked
  9968  003030  117C               	iorwf	(eval_poly@n+1)& (0+255),w,b
  9969  003032  A4D8               	btfss	status,2,c
  9970  003034  D7BB               	goto	l7451
  9971                           
  9972                           ; BSR set to: 0
  9973  003036  C07D  F076         	movff	eval_poly@res,?_eval_poly
  9974  00303A  C07E  F077         	movff	eval_poly@res+1,?_eval_poly+1
  9975  00303E  C07F  F078         	movff	eval_poly@res+2,?_eval_poly+2
  9976                           
  9977                           ; BSR set to: 0
  9978  003042  0012               	return		;funcret
  9979  003044                     __end_of_eval_poly:
  9980                           	opt stack 0
  9981                           tblptru	equ	0xFF8
  9982                           tblptrh	equ	0xFF7
  9983                           tblptrl	equ	0xFF6
  9984                           tablat	equ	0xFF5
  9985                           prodh	equ	0xFF4
  9986                           prodl	equ	0xFF3
  9987                           intcon	equ	0xFF2
  9988                           intcon2	equ	0xFF1
  9989                           postinc0	equ	0xFEE
  9990                           wreg	equ	0xFE8
  9991                           postinc1	equ	0xFE6
  9992                           postdec1	equ	0xFE5
  9993                           fsr1h	equ	0xFE2
  9994                           fsr1l	equ	0xFE1
  9995                           indf2	equ	0xFDF
  9996                           postinc2	equ	0xFDE
  9997                           postdec2	equ	0xFDD
  9998                           fsr2h	equ	0xFDA
  9999                           fsr2l	equ	0xFD9
 10000                           status	equ	0xFD8
 10001                           
 10002 ;; *************** function ___ftsub *****************
 10003 ;; Defined at:
 10004 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 10005 ;; Parameters:    Size  Location     Type
 10006 ;;  f1              3   22[BANK0 ] float 
 10007 ;;  f2              3   25[BANK0 ] float 
 10008 ;; Auto vars:     Size  Location     Type
 10009 ;;		None
 10010 ;; Return value:  Size  Location     Type
 10011 ;;                  3   22[BANK0 ] float 
 10012 ;; Registers used:
 10013 ;;		wreg, status,2, status,0, cstack
 10014 ;; Tracked objects:
 10015 ;;		On entry : 0/0
 10016 ;;		On exit  : 0/0
 10017 ;;		Unchanged: 0/0
 10018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10019 ;;      Params:         0       6       0       0       0       0       0
 10020 ;;      Locals:         0       0       0       0       0       0       0
 10021 ;;      Temps:          0       0       0       0       0       0       0
 10022 ;;      Totals:         0       6       0       0       0       0       0
 10023 ;;Total ram usage:        6 bytes
 10024 ;; Hardware stack levels used:    1
 10025 ;; Hardware stack levels required when called:    5
 10026 ;; This function calls:
 10027 ;;		___ftadd
 10028 ;; This function is called by:
 10029 ;;		_Temp_Convert
 10030 ;;		_printf
 10031 ;; This function uses a non-reentrant model
 10032 ;;
 10033                           
 10034                           	psect	text43
 10035  0039D4                     __ptext43:
 10036                           	opt stack 0
 10037  0039D4                     ___ftsub:
 10038                           	opt stack 24
 10039                           
 10040                           ; BSR set to: 0
 10041                           ;incstack = 0
 10042  0039D4  0100               	movlb	0	; () banked
 10043  0039D6  5179               	movf	___ftsub@f2& (0+255),w,b
 10044  0039D8  0100               	movlb	0	; () banked
 10045  0039DA  117A               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 10046  0039DC  0100               	movlb	0	; () banked
 10047  0039DE  117B               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 10048  0039E0  B4D8               	btfsc	status,2,c
 10049  0039E2  D009               	goto	l7783
 10050                           
 10051                           ; BSR set to: 0
 10052  0039E4  0E00               	movlw	0
 10053  0039E6  0100               	movlb	0	; () banked
 10054  0039E8  1B79               	xorwf	___ftsub@f2& (0+255),f,b
 10055  0039EA  0E00               	movlw	0
 10056  0039EC  0100               	movlb	0	; () banked
 10057  0039EE  1B7A               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 10058  0039F0  0E80               	movlw	128
 10059  0039F2  0100               	movlb	0	; () banked
 10060  0039F4  1B7B               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 10061  0039F6                     l7783:
 10062                           
 10063                           ; BSR set to: 0
 10064  0039F6  C076  F06A         	movff	___ftsub@f1,___ftadd@f1
 10065  0039FA  C077  F06B         	movff	___ftsub@f1+1,___ftadd@f1+1
 10066  0039FE  C078  F06C         	movff	___ftsub@f1+2,___ftadd@f1+2
 10067  003A02  C079  F06D         	movff	___ftsub@f2,___ftadd@f2
 10068  003A06  C07A  F06E         	movff	___ftsub@f2+1,___ftadd@f2+1
 10069  003A0A  C07B  F06F         	movff	___ftsub@f2+2,___ftadd@f2+2
 10070  003A0E  ECBD  F00D         	call	___ftadd	;wreg free
 10071  003A12  C06A  F076         	movff	?___ftadd,?___ftsub
 10072  003A16  C06B  F077         	movff	?___ftadd+1,?___ftsub+1
 10073  003A1A  C06C  F078         	movff	?___ftadd+2,?___ftsub+2
 10074  003A1E  0012               	return	
 10075  003A20                     __end_of___ftsub:
 10076                           	opt stack 0
 10077                           tblptru	equ	0xFF8
 10078                           tblptrh	equ	0xFF7
 10079                           tblptrl	equ	0xFF6
 10080                           tablat	equ	0xFF5
 10081                           prodh	equ	0xFF4
 10082                           prodl	equ	0xFF3
 10083                           intcon	equ	0xFF2
 10084                           intcon2	equ	0xFF1
 10085                           postinc0	equ	0xFEE
 10086                           wreg	equ	0xFE8
 10087                           postinc1	equ	0xFE6
 10088                           postdec1	equ	0xFE5
 10089                           fsr1h	equ	0xFE2
 10090                           fsr1l	equ	0xFE1
 10091                           indf2	equ	0xFDF
 10092                           postinc2	equ	0xFDE
 10093                           postdec2	equ	0xFDD
 10094                           fsr2h	equ	0xFDA
 10095                           fsr2l	equ	0xFD9
 10096                           status	equ	0xFD8
 10097                           
 10098 ;; *************** function _Temp_Filter *****************
 10099 ;; Defined at:
 10100 ;;		line 50 in file "Tempeture.c"
 10101 ;; Parameters:    Size  Location     Type
 10102 ;;		None
 10103 ;; Auto vars:     Size  Location     Type
 10104 ;;  x               2   64[COMRAM] int 
 10105 ;; Return value:  Size  Location     Type
 10106 ;;                  1    wreg      void 
 10107 ;; Registers used:
 10108 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10109 ;; Tracked objects:
 10110 ;;		On entry : 0/0
 10111 ;;		On exit  : 0/0
 10112 ;;		Unchanged: 0/0
 10113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10114 ;;      Params:         0       0       0       0       0       0       0
 10115 ;;      Locals:         2       0       0       0       0       0       0
 10116 ;;      Temps:          0       0       0       0       0       0       0
 10117 ;;      Totals:         2       0       0       0       0       0       0
 10118 ;;Total ram usage:        2 bytes
 10119 ;; Hardware stack levels used:    1
 10120 ;; Hardware stack levels required when called:    5
 10121 ;; This function calls:
 10122 ;;		___ftadd
 10123 ;;		___ftmul
 10124 ;;		___wmul
 10125 ;; This function is called by:
 10126 ;;		_Temp_Convert
 10127 ;; This function uses a non-reentrant model
 10128 ;;
 10129                           
 10130                           	psect	text44
 10131  002804                     __ptext44:
 10132                           	opt stack 0
 10133  002804                     _Temp_Filter:
 10134                           	opt stack 22
 10135                           
 10136                           ;Tempeture.c: 53: for(int x = 0; x < 6; x++)
 10137                           
 10138                           ;incstack = 0
 10139  002804  0E00               	movlw	0
 10140  002806  6E42               	movwf	Temp_Filter@x+1,c
 10141  002808  0E00               	movlw	0
 10142  00280A  6E41               	movwf	Temp_Filter@x,c
 10143  00280C  BE42               	btfsc	Temp_Filter@x+1,7,c
 10144  00280E  D008               	goto	l7463
 10145  002810  5042               	movf	Temp_Filter@x+1,w,c
 10146  002812  E105               	bnz	u7460
 10147  002814  0E06               	movlw	6
 10148  002816  5C41               	subwf	Temp_Filter@x,w,c
 10149  002818  B0D8               	btfsc	status,0,c
 10150  00281A  0012               	return	
 10151  00281C  D001               	goto	l7463
 10152  00281E                     u7460:
 10153  00281E  0012               	return	
 10154  002820                     l7463:
 10155                           
 10156                           ;Tempeture.c: 54: {
 10157                           ;Tempeture.c: 55: Temp_DegF[x] = (0.88*TmpTemp_DegF[x] + ((1- 0.88)*PrevTemp_DegF[x]));
 10158  002820  C041  F01D         	movff	Temp_Filter@x,___wmul@multiplier
 10159  002824  C042  F01E         	movff	Temp_Filter@x+1,___wmul@multiplier+1
 10160  002828  0E00               	movlw	0
 10161  00282A  6E20               	movwf	___wmul@multiplicand+1,c
 10162  00282C  0E03               	movlw	3
 10163  00282E  6E1F               	movwf	___wmul@multiplicand,c
 10164  002830  ECDB  F01E         	call	___wmul	;wreg free
 10165  002834  0E18               	movlw	low _Temp_DegF
 10166  002836  241D               	addwf	?___wmul,w,c
 10167  002838  6ED9               	movwf	fsr2l,c
 10168  00283A  0E02               	movlw	high _Temp_DegF
 10169  00283C  201E               	addwfc	?___wmul+1,w,c
 10170  00283E  6EDA               	movwf	fsr2h,c
 10171  002840  0E48               	movlw	72
 10172  002842  6E35               	movwf	___ftmul@f2,c
 10173  002844  0E61               	movlw	97
 10174  002846  6E36               	movwf	___ftmul@f2+1,c
 10175  002848  0E3F               	movlw	63
 10176  00284A  6E37               	movwf	___ftmul@f2+2,c
 10177  00284C  C041  F01D         	movff	Temp_Filter@x,___wmul@multiplier
 10178  002850  C042  F01E         	movff	Temp_Filter@x+1,___wmul@multiplier+1
 10179  002854  0E00               	movlw	0
 10180  002856  6E20               	movwf	___wmul@multiplicand+1,c
 10181  002858  0E03               	movlw	3
 10182  00285A  6E1F               	movwf	___wmul@multiplicand,c
 10183  00285C  ECDB  F01E         	call	___wmul	;wreg free
 10184  002860  0EA8               	movlw	low _TmpTemp_DegF
 10185  002862  241D               	addwf	?___wmul,w,c
 10186  002864  6EE1               	movwf	fsr1l,c
 10187  002866  0E02               	movlw	high _TmpTemp_DegF
 10188  002868  201E               	addwfc	?___wmul+1,w,c
 10189  00286A  6EE2               	movwf	fsr1h,c
 10190  00286C  CFE6 F032          	movff	postinc1,___ftmul@f1
 10191  002870  CFE6 F033          	movff	postinc1,___ftmul@f1+1
 10192  002874  CFE5 F034          	movff	postdec1,___ftmul@f1+2
 10193  002878  EC5B  F016         	call	___ftmul	;wreg free
 10194  00287C  C032  F06A         	movff	?___ftmul,___ftadd@f1
 10195  002880  C033  F06B         	movff	?___ftmul+1,___ftadd@f1+1
 10196  002884  C034  F06C         	movff	?___ftmul+2,___ftadd@f1+2
 10197  002888  0EC3               	movlw	195
 10198  00288A  6E35               	movwf	___ftmul@f2,c
 10199  00288C  0EF5               	movlw	245
 10200  00288E  6E36               	movwf	___ftmul@f2+1,c
 10201  002890  0E3D               	movlw	61
 10202  002892  6E37               	movwf	___ftmul@f2+2,c
 10203  002894  0E00               	movlw	0
 10204  002896  6E20               	movwf	___wmul@multiplicand+1,c
 10205  002898  0E03               	movlw	3
 10206  00289A  6E1F               	movwf	___wmul@multiplicand,c
 10207  00289C  C041  F01D         	movff	Temp_Filter@x,___wmul@multiplier
 10208  0028A0  C042  F01E         	movff	Temp_Filter@x+1,___wmul@multiplier+1
 10209  0028A4  ECDB  F01E         	call	___wmul	;wreg free
 10210  0028A8  0E00               	movlw	low _PrevTemp_DegF
 10211  0028AA  241D               	addwf	?___wmul,w,c
 10212  0028AC  6EE1               	movwf	fsr1l,c
 10213  0028AE  0E02               	movlw	high _PrevTemp_DegF
 10214  0028B0  201E               	addwfc	?___wmul+1,w,c
 10215  0028B2  6EE2               	movwf	fsr1h,c
 10216  0028B4  CFE6 F032          	movff	postinc1,___ftmul@f1
 10217  0028B8  CFE6 F033          	movff	postinc1,___ftmul@f1+1
 10218  0028BC  CFE5 F034          	movff	postdec1,___ftmul@f1+2
 10219  0028C0  EC5B  F016         	call	___ftmul	;wreg free
 10220  0028C4  C032  F06D         	movff	?___ftmul,___ftadd@f2
 10221  0028C8  C033  F06E         	movff	?___ftmul+1,___ftadd@f2+1
 10222  0028CC  C034  F06F         	movff	?___ftmul+2,___ftadd@f2+2
 10223  0028D0  ECBD  F00D         	call	___ftadd	;wreg free
 10224  0028D4  C06A  FFDE         	movff	?___ftadd,postinc2
 10225  0028D8  C06B  FFDE         	movff	?___ftadd+1,postinc2
 10226  0028DC  C06C  FFDE         	movff	?___ftadd+2,postinc2
 10227                           
 10228                           ;Tempeture.c: 56: PrevTemp_DegF[x] = Temp_DegF[x];
 10229  0028E0  C041  F01D         	movff	Temp_Filter@x,___wmul@multiplier
 10230  0028E4  C042  F01E         	movff	Temp_Filter@x+1,___wmul@multiplier+1
 10231  0028E8  0E00               	movlw	0
 10232  0028EA  6E20               	movwf	___wmul@multiplicand+1,c
 10233  0028EC  0E03               	movlw	3
 10234  0028EE  6E1F               	movwf	___wmul@multiplicand,c
 10235  0028F0  ECDB  F01E         	call	___wmul	;wreg free
 10236  0028F4  0E18               	movlw	low _Temp_DegF
 10237  0028F6  241D               	addwf	?___wmul,w,c
 10238  0028F8  6ED9               	movwf	fsr2l,c
 10239  0028FA  0E02               	movlw	high _Temp_DegF
 10240  0028FC  201E               	addwfc	?___wmul+1,w,c
 10241  0028FE  6EDA               	movwf	fsr2h,c
 10242  002900  C041  F01D         	movff	Temp_Filter@x,___wmul@multiplier
 10243  002904  C042  F01E         	movff	Temp_Filter@x+1,___wmul@multiplier+1
 10244  002908  0E00               	movlw	0
 10245  00290A  6E20               	movwf	___wmul@multiplicand+1,c
 10246  00290C  0E03               	movlw	3
 10247  00290E  6E1F               	movwf	___wmul@multiplicand,c
 10248  002910  ECDB  F01E         	call	___wmul	;wreg free
 10249  002914  0E00               	movlw	low _PrevTemp_DegF
 10250  002916  241D               	addwf	?___wmul,w,c
 10251  002918  6EE1               	movwf	fsr1l,c
 10252  00291A  0E02               	movlw	high _PrevTemp_DegF
 10253  00291C  201E               	addwfc	?___wmul+1,w,c
 10254  00291E  6EE2               	movwf	fsr1h,c
 10255  002920  CFDE FFE6          	movff	postinc2,postinc1
 10256  002924  CFDE FFE6          	movff	postinc2,postinc1
 10257  002928  CFDE FFE6          	movff	postinc2,postinc1
 10258  00292C  4A41               	infsnz	Temp_Filter@x,f,c
 10259  00292E  2A42               	incf	Temp_Filter@x+1,f,c
 10260  002930  BE42               	btfsc	Temp_Filter@x+1,7,c
 10261  002932  D776               	goto	l7463
 10262  002934  5042               	movf	Temp_Filter@x+1,w,c
 10263  002936  E101               	bnz	l361
 10264  002938  D76D               	goto	L10
 10265  00293A                     l361:
 10266  00293A  0012               	return		;funcret
 10267  00293C                     __end_of_Temp_Filter:
 10268                           	opt stack 0
 10269                           tblptru	equ	0xFF8
 10270                           tblptrh	equ	0xFF7
 10271                           tblptrl	equ	0xFF6
 10272                           tablat	equ	0xFF5
 10273                           prodh	equ	0xFF4
 10274                           prodl	equ	0xFF3
 10275                           intcon	equ	0xFF2
 10276                           intcon2	equ	0xFF1
 10277                           postinc0	equ	0xFEE
 10278                           wreg	equ	0xFE8
 10279                           postinc1	equ	0xFE6
 10280                           postdec1	equ	0xFE5
 10281                           fsr1h	equ	0xFE2
 10282                           fsr1l	equ	0xFE1
 10283                           indf2	equ	0xFDF
 10284                           postinc2	equ	0xFDE
 10285                           postdec2	equ	0xFDD
 10286                           fsr2h	equ	0xFDA
 10287                           fsr2l	equ	0xFD9
 10288                           status	equ	0xFD8
 10289                           
 10290 ;; *************** function _Read_Battery *****************
 10291 ;; Defined at:
 10292 ;;		line 420 in file "BatteryManagment.c"
 10293 ;; Parameters:    Size  Location     Type
 10294 ;;  BatteryPlace    2   56[BANK0 ] int 
 10295 ;;  cell_codes      2   58[BANK0 ] PTR int [12]
 10296 ;;		 -> cell_codes_Bank(24), 
 10297 ;; Auto vars:     Size  Location     Type
 10298 ;;  Read_Status     2   62[BANK0 ] int 
 10299 ;; Return value:  Size  Location     Type
 10300 ;;                  2   56[BANK0 ] int 
 10301 ;; Registers used:
 10302 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10303 ;; Tracked objects:
 10304 ;;		On entry : 0/0
 10305 ;;		On exit  : 0/0
 10306 ;;		Unchanged: 0/0
 10307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10308 ;;      Params:         0       4       0       0       0       0       0
 10309 ;;      Locals:         0       2       0       0       0       0       0
 10310 ;;      Temps:          0       2       0       0       0       0       0
 10311 ;;      Totals:         0       8       0       0       0       0       0
 10312 ;;Total ram usage:        8 bytes
 10313 ;; Hardware stack levels used:    1
 10314 ;; Hardware stack levels required when called:    7
 10315 ;; This function calls:
 10316 ;;		_Delay
 10317 ;;		_LTC6804_adcv
 10318 ;;		_LTC6804_rdcv
 10319 ;;		_set_adc
 10320 ;; This function is called by:
 10321 ;;		_Run_Mode
 10322 ;;		_Run_ByPass
 10323 ;;		_Read_Total_Voltage
 10324 ;; This function uses a non-reentrant model
 10325 ;;
 10326                           
 10327                           	psect	text45
 10328  001574                     __ptext45:
 10329                           	opt stack 0
 10330  001574                     _Read_Battery:
 10331                           	opt stack 22
 10332                           
 10333                           ;BatteryManagment.c: 421: int Read_Status = 0;
 10334                           
 10335                           ;incstack = 0
 10336  001574  0E00               	movlw	0
 10337  001576  0100               	movlb	0	; () banked
 10338  001578  6F9F               	movwf	(Read_Battery@Read_Status+1)& (0+255),b
 10339  00157A  0E00               	movlw	0
 10340  00157C  6F9E               	movwf	Read_Battery@Read_Status& (0+255),b
 10341                           
 10342                           ;BatteryManagment.c: 423: switch (BatteryPlacement) {
 10343  00157E  D1A3               	goto	l8503
 10344  001580                     l8435:
 10345                           
 10346                           ; BSR set to: 0
 10347                           ;BatteryManagment.c: 425: set_adc(3, 0, 0, 0);
 10348  001580  0E00               	movlw	0
 10349  001582  6E10               	movwf	set_adc@MD+1,c
 10350  001584  0E03               	movlw	3
 10351  001586  6E0F               	movwf	set_adc@MD,c
 10352  001588  0E00               	movlw	0
 10353  00158A  6E12               	movwf	set_adc@DCP+1,c
 10354  00158C  0E00               	movlw	0
 10355  00158E  6E11               	movwf	set_adc@DCP,c
 10356  001590  0E00               	movlw	0
 10357  001592  6E14               	movwf	set_adc@CH+1,c
 10358  001594  0E00               	movlw	0
 10359  001596  6E13               	movwf	set_adc@CH,c
 10360  001598  0E00               	movlw	0
 10361  00159A  6E16               	movwf	set_adc@CHG+1,c
 10362  00159C  0E00               	movlw	0
 10363  00159E  6E15               	movwf	set_adc@CHG,c
 10364  0015A0  EC48  F017         	call	_set_adc	;wreg free
 10365                           
 10366                           ;BatteryManagment.c: 426: LTC6804_adcv();
 10367  0015A4  EC54  F01C         	call	_LTC6804_adcv	;wreg free
 10368                           
 10369                           ;BatteryManagment.c: 427: Delay(10);
 10370  0015A8  0E00               	movlw	0
 10371  0015AA  6E10               	movwf	Delay@wait+1,c
 10372  0015AC  0E0A               	movlw	10
 10373  0015AE  6E0F               	movwf	Delay@wait,c
 10374  0015B0  EC38  F01E         	call	_Delay	;wreg free
 10375                           
 10376                           ;BatteryManagment.c: 428: Read_Status = LTC6804_rdcv(0, 1, cell_codes);
 10377  0015B4  0E00               	movlw	0
 10378  0015B6  0100               	movlb	0	; () banked
 10379  0015B8  6F61               	movwf	(LTC6804_rdcv@reg+1)& (0+255),b
 10380  0015BA  0E00               	movlw	0
 10381  0015BC  6F60               	movwf	LTC6804_rdcv@reg& (0+255),b
 10382  0015BE  0E00               	movlw	0
 10383  0015C0  0100               	movlb	0	; () banked
 10384  0015C2  6F63               	movwf	(LTC6804_rdcv@total_ic+1)& (0+255),b
 10385  0015C4  0E01               	movlw	1
 10386  0015C6  6F62               	movwf	LTC6804_rdcv@total_ic& (0+255),b
 10387  0015C8  C09A  F064         	movff	Read_Battery@cell_codes,LTC6804_rdcv@cell_codes
 10388  0015CC  C09B  F065         	movff	Read_Battery@cell_codes+1,LTC6804_rdcv@cell_codes+1
 10389  0015D0  EC04  F006         	call	_LTC6804_rdcv	;wreg free
 10390  0015D4  D173               	goto	L16
 10391  0015D6                     l8443:
 10392                           
 10393                           ;BatteryManagment.c: 431: set_adc(2, 0, 1, 0);
 10394  0015D6  0E00               	movlw	0
 10395  0015D8  6E10               	movwf	set_adc@MD+1,c
 10396  0015DA  0E02               	movlw	2
 10397  0015DC  6E0F               	movwf	set_adc@MD,c
 10398  0015DE  0E00               	movlw	0
 10399  0015E0  6E12               	movwf	set_adc@DCP+1,c
 10400  0015E2  0E00               	movlw	0
 10401  0015E4  6E11               	movwf	set_adc@DCP,c
 10402  0015E6  0E00               	movlw	0
 10403  0015E8  6E14               	movwf	set_adc@CH+1,c
 10404  0015EA  0E01               	movlw	1
 10405  0015EC  6E13               	movwf	set_adc@CH,c
 10406  0015EE  0E00               	movlw	0
 10407  0015F0  6E16               	movwf	set_adc@CHG+1,c
 10408  0015F2  0E00               	movlw	0
 10409  0015F4  6E15               	movwf	set_adc@CHG,c
 10410  0015F6  EC48  F017         	call	_set_adc	;wreg free
 10411                           
 10412                           ;BatteryManagment.c: 432: LTC6804_adcv();
 10413  0015FA  EC54  F01C         	call	_LTC6804_adcv	;wreg free
 10414                           
 10415                           ;BatteryManagment.c: 433: Delay(10);
 10416  0015FE  0E00               	movlw	0
 10417  001600  6E10               	movwf	Delay@wait+1,c
 10418  001602  0E0A               	movlw	10
 10419  001604  6E0F               	movwf	Delay@wait,c
 10420  001606  EC38  F01E         	call	_Delay	;wreg free
 10421                           
 10422                           ;BatteryManagment.c: 434: Read_Status = LTC6804_rdcv(1, 3, cell_codes);
 10423  00160A  0E00               	movlw	0
 10424  00160C  0100               	movlb	0	; () banked
 10425  00160E  6F61               	movwf	(LTC6804_rdcv@reg+1)& (0+255),b
 10426  001610  0E01               	movlw	1
 10427  001612  6F60               	movwf	LTC6804_rdcv@reg& (0+255),b
 10428  001614  0E00               	movlw	0
 10429  001616  0100               	movlb	0	; () banked
 10430  001618  6F63               	movwf	(LTC6804_rdcv@total_ic+1)& (0+255),b
 10431  00161A  0E03               	movlw	3
 10432  00161C  6F62               	movwf	LTC6804_rdcv@total_ic& (0+255),b
 10433  00161E  C09A  F064         	movff	Read_Battery@cell_codes,LTC6804_rdcv@cell_codes
 10434  001622  C09B  F065         	movff	Read_Battery@cell_codes+1,LTC6804_rdcv@cell_codes+1
 10435  001626  EC04  F006         	call	_LTC6804_rdcv	;wreg free
 10436  00162A  C060  F09E         	movff	?_LTC6804_rdcv,Read_Battery@Read_Status
 10437  00162E  C061  F09F         	movff	?_LTC6804_rdcv+1,Read_Battery@Read_Status+1
 10438                           
 10439                           ;BatteryManagment.c: 435: Read_Status = LTC6804_rdcv(3, 3, cell_codes);
 10440  001632  0E00               	movlw	0
 10441  001634  0100               	movlb	0	; () banked
 10442  001636  6F61               	movwf	(LTC6804_rdcv@reg+1)& (0+255),b
 10443  001638  0E03               	movlw	3
 10444  00163A  6F60               	movwf	LTC6804_rdcv@reg& (0+255),b
 10445  00163C  0E00               	movlw	0
 10446  00163E  0100               	movlb	0	; () banked
 10447  001640  6F63               	movwf	(LTC6804_rdcv@total_ic+1)& (0+255),b
 10448  001642  0E03               	movlw	3
 10449  001644  6F62               	movwf	LTC6804_rdcv@total_ic& (0+255),b
 10450  001646  C09A  F064         	movff	Read_Battery@cell_codes,LTC6804_rdcv@cell_codes
 10451  00164A  C09B  F065         	movff	Read_Battery@cell_codes+1,LTC6804_rdcv@cell_codes+1
 10452  00164E  EC04  F006         	call	_LTC6804_rdcv	;wreg free
 10453  001652  D134               	goto	L16
 10454  001654                     l8453:
 10455                           
 10456                           ;BatteryManagment.c: 438: set_adc(2, 0, 2, 0);
 10457  001654  0E00               	movlw	0
 10458  001656  6E10               	movwf	set_adc@MD+1,c
 10459  001658  0E02               	movlw	2
 10460  00165A  6E0F               	movwf	set_adc@MD,c
 10461  00165C  0E00               	movlw	0
 10462  00165E  6E12               	movwf	set_adc@DCP+1,c
 10463  001660  0E00               	movlw	0
 10464  001662  6E11               	movwf	set_adc@DCP,c
 10465  001664  0E00               	movlw	0
 10466  001666  6E14               	movwf	set_adc@CH+1,c
 10467  001668  0E02               	movlw	2
 10468  00166A  6E13               	movwf	set_adc@CH,c
 10469  00166C  0E00               	movlw	0
 10470  00166E  6E16               	movwf	set_adc@CHG+1,c
 10471  001670  0E00               	movlw	0
 10472  001672  6E15               	movwf	set_adc@CHG,c
 10473  001674  EC48  F017         	call	_set_adc	;wreg free
 10474                           
 10475                           ;BatteryManagment.c: 439: LTC6804_adcv();
 10476  001678  EC54  F01C         	call	_LTC6804_adcv	;wreg free
 10477                           
 10478                           ;BatteryManagment.c: 440: Delay(10);
 10479  00167C  0E00               	movlw	0
 10480  00167E  6E10               	movwf	Delay@wait+1,c
 10481  001680  0E0A               	movlw	10
 10482  001682  6E0F               	movwf	Delay@wait,c
 10483  001684  EC38  F01E         	call	_Delay	;wreg free
 10484                           
 10485                           ;BatteryManagment.c: 441: Read_Status = LTC6804_rdcv(0, 1, cell_codes);
 10486  001688  0E00               	movlw	0
 10487  00168A  0100               	movlb	0	; () banked
 10488  00168C  6F61               	movwf	(LTC6804_rdcv@reg+1)& (0+255),b
 10489  00168E  0E00               	movlw	0
 10490  001690  6F60               	movwf	LTC6804_rdcv@reg& (0+255),b
 10491  001692  0E00               	movlw	0
 10492  001694  0100               	movlb	0	; () banked
 10493  001696  6F63               	movwf	(LTC6804_rdcv@total_ic+1)& (0+255),b
 10494  001698  0E01               	movlw	1
 10495  00169A  6F62               	movwf	LTC6804_rdcv@total_ic& (0+255),b
 10496  00169C  C09A  F064         	movff	Read_Battery@cell_codes,LTC6804_rdcv@cell_codes
 10497  0016A0  C09B  F065         	movff	Read_Battery@cell_codes+1,LTC6804_rdcv@cell_codes+1
 10498  0016A4  EC04  F006         	call	_LTC6804_rdcv	;wreg free
 10499  0016A8  C060  F09E         	movff	?_LTC6804_rdcv,Read_Battery@Read_Status
 10500  0016AC  C061  F09F         	movff	?_LTC6804_rdcv+1,Read_Battery@Read_Status+1
 10501                           
 10502                           ;BatteryManagment.c: 442: Read_Status = LTC6804_rdcv(3, 1, cell_codes);
 10503  0016B0  0E00               	movlw	0
 10504  0016B2  0100               	movlb	0	; () banked
 10505  0016B4  6F61               	movwf	(LTC6804_rdcv@reg+1)& (0+255),b
 10506  0016B6  0E03               	movlw	3
 10507  0016B8  6F60               	movwf	LTC6804_rdcv@reg& (0+255),b
 10508  0016BA  0E00               	movlw	0
 10509  0016BC  0100               	movlb	0	; () banked
 10510  0016BE  6F63               	movwf	(LTC6804_rdcv@total_ic+1)& (0+255),b
 10511  0016C0  0E01               	movlw	1
 10512  0016C2  6F62               	movwf	LTC6804_rdcv@total_ic& (0+255),b
 10513  0016C4  C09A  F064         	movff	Read_Battery@cell_codes,LTC6804_rdcv@cell_codes
 10514  0016C8  C09B  F065         	movff	Read_Battery@cell_codes+1,LTC6804_rdcv@cell_codes+1
 10515  0016CC  EC04  F006         	call	_LTC6804_rdcv	;wreg free
 10516  0016D0  D0F5               	goto	L16
 10517  0016D2                     l8463:
 10518                           
 10519                           ;BatteryManagment.c: 445: set_adc(2, 0, 3, 0);
 10520  0016D2  0E00               	movlw	0
 10521  0016D4  6E10               	movwf	set_adc@MD+1,c
 10522  0016D6  0E02               	movlw	2
 10523  0016D8  6E0F               	movwf	set_adc@MD,c
 10524  0016DA  0E00               	movlw	0
 10525  0016DC  6E12               	movwf	set_adc@DCP+1,c
 10526  0016DE  0E00               	movlw	0
 10527  0016E0  6E11               	movwf	set_adc@DCP,c
 10528  0016E2  0E00               	movlw	0
 10529  0016E4  6E14               	movwf	set_adc@CH+1,c
 10530  0016E6  0E03               	movlw	3
 10531  0016E8  6E13               	movwf	set_adc@CH,c
 10532  0016EA  0E00               	movlw	0
 10533  0016EC  6E16               	movwf	set_adc@CHG+1,c
 10534  0016EE  0E00               	movlw	0
 10535  0016F0  6E15               	movwf	set_adc@CHG,c
 10536  0016F2  EC48  F017         	call	_set_adc	;wreg free
 10537                           
 10538                           ;BatteryManagment.c: 446: LTC6804_adcv();
 10539  0016F6  EC54  F01C         	call	_LTC6804_adcv	;wreg free
 10540                           
 10541                           ;BatteryManagment.c: 447: Delay(10);
 10542  0016FA  0E00               	movlw	0
 10543  0016FC  6E10               	movwf	Delay@wait+1,c
 10544  0016FE  0E0A               	movlw	10
 10545  001700  6E0F               	movwf	Delay@wait,c
 10546  001702  EC38  F01E         	call	_Delay	;wreg free
 10547                           
 10548                           ;BatteryManagment.c: 448: Read_Status = LTC6804_rdcv(0, 1, cell_codes);
 10549  001706  0E00               	movlw	0
 10550  001708  0100               	movlb	0	; () banked
 10551  00170A  6F61               	movwf	(LTC6804_rdcv@reg+1)& (0+255),b
 10552  00170C  0E00               	movlw	0
 10553  00170E  6F60               	movwf	LTC6804_rdcv@reg& (0+255),b
 10554  001710  0E00               	movlw	0
 10555  001712  0100               	movlb	0	; () banked
 10556  001714  6F63               	movwf	(LTC6804_rdcv@total_ic+1)& (0+255),b
 10557  001716  0E01               	movlw	1
 10558  001718  6F62               	movwf	LTC6804_rdcv@total_ic& (0+255),b
 10559  00171A  C09A  F064         	movff	Read_Battery@cell_codes,LTC6804_rdcv@cell_codes
 10560  00171E  C09B  F065         	movff	Read_Battery@cell_codes+1,LTC6804_rdcv@cell_codes+1
 10561  001722  EC04  F006         	call	_LTC6804_rdcv	;wreg free
 10562  001726  C060  F09E         	movff	?_LTC6804_rdcv,Read_Battery@Read_Status
 10563  00172A  C061  F09F         	movff	?_LTC6804_rdcv+1,Read_Battery@Read_Status+1
 10564                           
 10565                           ;BatteryManagment.c: 449: Read_Status = LTC6804_rdcv(3, 1, cell_codes);
 10566  00172E  0E00               	movlw	0
 10567  001730  0100               	movlb	0	; () banked
 10568  001732  6F61               	movwf	(LTC6804_rdcv@reg+1)& (0+255),b
 10569  001734  0E03               	movlw	3
 10570  001736  6F60               	movwf	LTC6804_rdcv@reg& (0+255),b
 10571  001738  0E00               	movlw	0
 10572  00173A  0100               	movlb	0	; () banked
 10573  00173C  6F63               	movwf	(LTC6804_rdcv@total_ic+1)& (0+255),b
 10574  00173E  0E01               	movlw	1
 10575  001740  6F62               	movwf	LTC6804_rdcv@total_ic& (0+255),b
 10576  001742  C09A  F064         	movff	Read_Battery@cell_codes,LTC6804_rdcv@cell_codes
 10577  001746  C09B  F065         	movff	Read_Battery@cell_codes+1,LTC6804_rdcv@cell_codes+1
 10578  00174A  EC04  F006         	call	_LTC6804_rdcv	;wreg free
 10579  00174E  D0B6               	goto	L16
 10580  001750                     l8473:
 10581                           
 10582                           ;BatteryManagment.c: 452: set_adc(2, 0, 4, 0);
 10583  001750  0E00               	movlw	0
 10584  001752  6E10               	movwf	set_adc@MD+1,c
 10585  001754  0E02               	movlw	2
 10586  001756  6E0F               	movwf	set_adc@MD,c
 10587  001758  0E00               	movlw	0
 10588  00175A  6E12               	movwf	set_adc@DCP+1,c
 10589  00175C  0E00               	movlw	0
 10590  00175E  6E11               	movwf	set_adc@DCP,c
 10591  001760  0E00               	movlw	0
 10592  001762  6E14               	movwf	set_adc@CH+1,c
 10593  001764  0E04               	movlw	4
 10594  001766  6E13               	movwf	set_adc@CH,c
 10595  001768  0E00               	movlw	0
 10596  00176A  6E16               	movwf	set_adc@CHG+1,c
 10597  00176C  0E00               	movlw	0
 10598  00176E  6E15               	movwf	set_adc@CHG,c
 10599  001770  EC48  F017         	call	_set_adc	;wreg free
 10600                           
 10601                           ;BatteryManagment.c: 453: LTC6804_adcv();
 10602  001774  EC54  F01C         	call	_LTC6804_adcv	;wreg free
 10603                           
 10604                           ;BatteryManagment.c: 454: Read_Status = LTC6804_rdcv(2, 1, cell_codes);
 10605  001778  0E00               	movlw	0
 10606  00177A  0100               	movlb	0	; () banked
 10607  00177C  6F61               	movwf	(LTC6804_rdcv@reg+1)& (0+255),b
 10608  00177E  0E02               	movlw	2
 10609  001780  6F60               	movwf	LTC6804_rdcv@reg& (0+255),b
 10610  001782  0E00               	movlw	0
 10611  001784  0100               	movlb	0	; () banked
 10612  001786  6F63               	movwf	(LTC6804_rdcv@total_ic+1)& (0+255),b
 10613  001788  0E01               	movlw	1
 10614  00178A  6F62               	movwf	LTC6804_rdcv@total_ic& (0+255),b
 10615  00178C  C09A  F064         	movff	Read_Battery@cell_codes,LTC6804_rdcv@cell_codes
 10616  001790  C09B  F065         	movff	Read_Battery@cell_codes+1,LTC6804_rdcv@cell_codes+1
 10617  001794  EC04  F006         	call	_LTC6804_rdcv	;wreg free
 10618  001798  C060  F09E         	movff	?_LTC6804_rdcv,Read_Battery@Read_Status
 10619  00179C  C061  F09F         	movff	?_LTC6804_rdcv+1,Read_Battery@Read_Status+1
 10620                           
 10621                           ;BatteryManagment.c: 455: Read_Status = LTC6804_rdcv(4, 1, cell_codes);
 10622  0017A0  0E00               	movlw	0
 10623  0017A2  0100               	movlb	0	; () banked
 10624  0017A4  6F61               	movwf	(LTC6804_rdcv@reg+1)& (0+255),b
 10625  0017A6  0E04               	movlw	4
 10626  0017A8  6F60               	movwf	LTC6804_rdcv@reg& (0+255),b
 10627  0017AA  0E00               	movlw	0
 10628  0017AC  0100               	movlb	0	; () banked
 10629  0017AE  6F63               	movwf	(LTC6804_rdcv@total_ic+1)& (0+255),b
 10630  0017B0  0E01               	movlw	1
 10631  0017B2  6F62               	movwf	LTC6804_rdcv@total_ic& (0+255),b
 10632  0017B4  C09A  F064         	movff	Read_Battery@cell_codes,LTC6804_rdcv@cell_codes
 10633  0017B8  C09B  F065         	movff	Read_Battery@cell_codes+1,LTC6804_rdcv@cell_codes+1
 10634  0017BC  EC04  F006         	call	_LTC6804_rdcv	;wreg free
 10635  0017C0  D07D               	goto	L16
 10636  0017C2                     l8481:
 10637                           
 10638                           ;BatteryManagment.c: 458: set_adc(2, 0, 5, 0);
 10639  0017C2  0E00               	movlw	0
 10640  0017C4  6E10               	movwf	set_adc@MD+1,c
 10641  0017C6  0E02               	movlw	2
 10642  0017C8  6E0F               	movwf	set_adc@MD,c
 10643  0017CA  0E00               	movlw	0
 10644  0017CC  6E12               	movwf	set_adc@DCP+1,c
 10645  0017CE  0E00               	movlw	0
 10646  0017D0  6E11               	movwf	set_adc@DCP,c
 10647  0017D2  0E00               	movlw	0
 10648  0017D4  6E14               	movwf	set_adc@CH+1,c
 10649  0017D6  0E05               	movlw	5
 10650  0017D8  6E13               	movwf	set_adc@CH,c
 10651  0017DA  0E00               	movlw	0
 10652  0017DC  6E16               	movwf	set_adc@CHG+1,c
 10653  0017DE  0E00               	movlw	0
 10654  0017E0  6E15               	movwf	set_adc@CHG,c
 10655  0017E2  EC48  F017         	call	_set_adc	;wreg free
 10656                           
 10657                           ;BatteryManagment.c: 459: LTC6804_adcv();
 10658  0017E6  EC54  F01C         	call	_LTC6804_adcv	;wreg free
 10659                           
 10660                           ;BatteryManagment.c: 460: Delay(10);
 10661  0017EA  0E00               	movlw	0
 10662  0017EC  6E10               	movwf	Delay@wait+1,c
 10663  0017EE  0E0A               	movlw	10
 10664  0017F0  6E0F               	movwf	Delay@wait,c
 10665  0017F2  EC38  F01E         	call	_Delay	;wreg free
 10666                           
 10667                           ;BatteryManagment.c: 461: Read_Status = LTC6804_rdcv(2, 1, cell_codes);
 10668  0017F6  0E00               	movlw	0
 10669  0017F8  0100               	movlb	0	; () banked
 10670  0017FA  6F61               	movwf	(LTC6804_rdcv@reg+1)& (0+255),b
 10671  0017FC  0E02               	movlw	2
 10672  0017FE  6F60               	movwf	LTC6804_rdcv@reg& (0+255),b
 10673  001800  0E00               	movlw	0
 10674  001802  0100               	movlb	0	; () banked
 10675  001804  6F63               	movwf	(LTC6804_rdcv@total_ic+1)& (0+255),b
 10676  001806  0E01               	movlw	1
 10677  001808  6F62               	movwf	LTC6804_rdcv@total_ic& (0+255),b
 10678  00180A  C09A  F064         	movff	Read_Battery@cell_codes,LTC6804_rdcv@cell_codes
 10679  00180E  C09B  F065         	movff	Read_Battery@cell_codes+1,LTC6804_rdcv@cell_codes+1
 10680  001812  EC04  F006         	call	_LTC6804_rdcv	;wreg free
 10681  001816  C060  F09E         	movff	?_LTC6804_rdcv,Read_Battery@Read_Status
 10682  00181A  C061  F09F         	movff	?_LTC6804_rdcv+1,Read_Battery@Read_Status+1
 10683                           
 10684                           ;BatteryManagment.c: 462: Read_Status = LTC6804_rdcv(4, 1, cell_codes);
 10685  00181E  0E00               	movlw	0
 10686  001820  0100               	movlb	0	; () banked
 10687  001822  6F61               	movwf	(LTC6804_rdcv@reg+1)& (0+255),b
 10688  001824  0E04               	movlw	4
 10689  001826  6F60               	movwf	LTC6804_rdcv@reg& (0+255),b
 10690  001828  0E00               	movlw	0
 10691  00182A  0100               	movlb	0	; () banked
 10692  00182C  6F63               	movwf	(LTC6804_rdcv@total_ic+1)& (0+255),b
 10693  00182E  0E01               	movlw	1
 10694  001830  6F62               	movwf	LTC6804_rdcv@total_ic& (0+255),b
 10695  001832  C09A  F064         	movff	Read_Battery@cell_codes,LTC6804_rdcv@cell_codes
 10696  001836  C09B  F065         	movff	Read_Battery@cell_codes+1,LTC6804_rdcv@cell_codes+1
 10697  00183A  EC04  F006         	call	_LTC6804_rdcv	;wreg free
 10698  00183E  D03E               	goto	L16
 10699  001840                     l8491:
 10700                           
 10701                           ;BatteryManagment.c: 465: set_adc(2, 0, 6, 0);
 10702  001840  0E00               	movlw	0
 10703  001842  6E10               	movwf	set_adc@MD+1,c
 10704  001844  0E02               	movlw	2
 10705  001846  6E0F               	movwf	set_adc@MD,c
 10706  001848  0E00               	movlw	0
 10707  00184A  6E12               	movwf	set_adc@DCP+1,c
 10708  00184C  0E00               	movlw	0
 10709  00184E  6E11               	movwf	set_adc@DCP,c
 10710  001850  0E00               	movlw	0
 10711  001852  6E14               	movwf	set_adc@CH+1,c
 10712  001854  0E06               	movlw	6
 10713  001856  6E13               	movwf	set_adc@CH,c
 10714  001858  0E00               	movlw	0
 10715  00185A  6E16               	movwf	set_adc@CHG+1,c
 10716  00185C  0E00               	movlw	0
 10717  00185E  6E15               	movwf	set_adc@CHG,c
 10718  001860  EC48  F017         	call	_set_adc	;wreg free
 10719                           
 10720                           ;BatteryManagment.c: 466: LTC6804_adcv();
 10721  001864  EC54  F01C         	call	_LTC6804_adcv	;wreg free
 10722                           
 10723                           ;BatteryManagment.c: 467: Delay(10);
 10724  001868  0E00               	movlw	0
 10725  00186A  6E10               	movwf	Delay@wait+1,c
 10726  00186C  0E0A               	movlw	10
 10727  00186E  6E0F               	movwf	Delay@wait,c
 10728  001870  EC38  F01E         	call	_Delay	;wreg free
 10729                           
 10730                           ;BatteryManagment.c: 468: Read_Status = LTC6804_rdcv(2, 1, cell_codes);
 10731  001874  0E00               	movlw	0
 10732  001876  0100               	movlb	0	; () banked
 10733  001878  6F61               	movwf	(LTC6804_rdcv@reg+1)& (0+255),b
 10734  00187A  0E02               	movlw	2
 10735  00187C  6F60               	movwf	LTC6804_rdcv@reg& (0+255),b
 10736  00187E  0E00               	movlw	0
 10737  001880  0100               	movlb	0	; () banked
 10738  001882  6F63               	movwf	(LTC6804_rdcv@total_ic+1)& (0+255),b
 10739  001884  0E01               	movlw	1
 10740  001886  6F62               	movwf	LTC6804_rdcv@total_ic& (0+255),b
 10741  001888  C09A  F064         	movff	Read_Battery@cell_codes,LTC6804_rdcv@cell_codes
 10742  00188C  C09B  F065         	movff	Read_Battery@cell_codes+1,LTC6804_rdcv@cell_codes+1
 10743  001890  EC04  F006         	call	_LTC6804_rdcv	;wreg free
 10744  001894  C060  F09E         	movff	?_LTC6804_rdcv,Read_Battery@Read_Status
 10745  001898  C061  F09F         	movff	?_LTC6804_rdcv+1,Read_Battery@Read_Status+1
 10746                           
 10747                           ;BatteryManagment.c: 469: Read_Status = LTC6804_rdcv(4, 1, cell_codes);
 10748  00189C  0E00               	movlw	0
 10749  00189E  0100               	movlb	0	; () banked
 10750  0018A0  6F61               	movwf	(LTC6804_rdcv@reg+1)& (0+255),b
 10751  0018A2  0E04               	movlw	4
 10752  0018A4  6F60               	movwf	LTC6804_rdcv@reg& (0+255),b
 10753  0018A6  0E00               	movlw	0
 10754  0018A8  0100               	movlb	0	; () banked
 10755  0018AA  6F63               	movwf	(LTC6804_rdcv@total_ic+1)& (0+255),b
 10756  0018AC  0E01               	movlw	1
 10757  0018AE  6F62               	movwf	LTC6804_rdcv@total_ic& (0+255),b
 10758  0018B0  C09A  F064         	movff	Read_Battery@cell_codes,LTC6804_rdcv@cell_codes
 10759  0018B4  C09B  F065         	movff	Read_Battery@cell_codes+1,LTC6804_rdcv@cell_codes+1
 10760  0018B8  EC04  F006         	call	_LTC6804_rdcv	;wreg free
 10761  0018BC                     L16:
 10762  0018BC  C060  F09E         	movff	?_LTC6804_rdcv,Read_Battery@Read_Status
 10763  0018C0  C061  F09F         	movff	?_LTC6804_rdcv+1,Read_Battery@Read_Status+1
 10764                           
 10765                           ;BatteryManagment.c: 473: }
 10766                           
 10767                           ;BatteryManagment.c: 472: break;
 10768                           
 10769                           ;BatteryManagment.c: 471: default:
 10770                           
 10771                           ;BatteryManagment.c: 470: break;
 10772  0018C4  D020               	goto	l693
 10773  0018C6                     l8503:
 10774  0018C6  C098  F09C         	movff	Read_Battery@BatteryPlacement,??_Read_Battery
 10775  0018CA  C099  F09D         	movff	Read_Battery@BatteryPlacement+1,??_Read_Battery+1
 10776                           
 10777                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10778                           ; Switch size 1, requested type "space"
 10779                           ; Number of cases is 1, Range of values is 0 to 0
 10780                           ; switch strategies available:
 10781                           ; Name         Instructions Cycles
 10782                           ; simple_byte            4     3 (average)
 10783                           ;	Chosen strategy is simple_byte
 10784  0018CE  0100               	movlb	0	; () banked
 10785  0018D0  519D               	movf	(??_Read_Battery+1)& (0+255),w,b
 10786  0018D2  0A00               	xorlw	0	; case 0
 10787  0018D4  A4D8               	btfss	status,2,c
 10788  0018D6  D017               	goto	l693
 10789                           
 10790                           ; BSR set to: 0
 10791                           ; Switch size 1, requested type "space"
 10792                           ; Number of cases is 7, Range of values is 0 to 6
 10793                           ; switch strategies available:
 10794                           ; Name         Instructions Cycles
 10795                           ; simple_byte           22    12 (average)
 10796                           ;	Chosen strategy is simple_byte
 10797  0018D8  0100               	movlb	0	; () banked
 10798  0018DA  519C               	movf	??_Read_Battery& (0+255),w,b
 10799  0018DC  0A00               	xorlw	0	; case 0
 10800  0018DE  B4D8               	btfsc	status,2,c
 10801  0018E0  D64F               	goto	l8435
 10802  0018E2  0A01               	xorlw	1	; case 1
 10803  0018E4  B4D8               	btfsc	status,2,c
 10804  0018E6  D677               	goto	l8443
 10805  0018E8  0A03               	xorlw	3	; case 2
 10806  0018EA  B4D8               	btfsc	status,2,c
 10807  0018EC  D6B3               	goto	l8453
 10808  0018EE  0A01               	xorlw	1	; case 3
 10809  0018F0  B4D8               	btfsc	status,2,c
 10810  0018F2  D6EF               	goto	l8463
 10811  0018F4  0A07               	xorlw	7	; case 4
 10812  0018F6  B4D8               	btfsc	status,2,c
 10813  0018F8  D72B               	goto	l8473
 10814  0018FA  0A01               	xorlw	1	; case 5
 10815  0018FC  B4D8               	btfsc	status,2,c
 10816  0018FE  D761               	goto	l8481
 10817  001900  0A03               	xorlw	3	; case 6
 10818  001902  B4D8               	btfsc	status,2,c
 10819  001904  D79D               	goto	l8491
 10820  001906                     l693:
 10821                           
 10822                           ;BatteryManagment.c: 474: return Read_Status;
 10823  001906  C09E  F098         	movff	Read_Battery@Read_Status,?_Read_Battery
 10824  00190A  C09F  F099         	movff	Read_Battery@Read_Status+1,?_Read_Battery+1
 10825  00190E  0012               	return		;funcret
 10826  001910                     __end_of_Read_Battery:
 10827                           	opt stack 0
 10828                           tblptru	equ	0xFF8
 10829                           tblptrh	equ	0xFF7
 10830                           tblptrl	equ	0xFF6
 10831                           tablat	equ	0xFF5
 10832                           prodh	equ	0xFF4
 10833                           prodl	equ	0xFF3
 10834                           intcon	equ	0xFF2
 10835                           intcon2	equ	0xFF1
 10836                           postinc0	equ	0xFEE
 10837                           wreg	equ	0xFE8
 10838                           postinc1	equ	0xFE6
 10839                           postdec1	equ	0xFE5
 10840                           fsr1h	equ	0xFE2
 10841                           fsr1l	equ	0xFE1
 10842                           indf2	equ	0xFDF
 10843                           postinc2	equ	0xFDE
 10844                           postdec2	equ	0xFDD
 10845                           fsr2h	equ	0xFDA
 10846                           fsr2l	equ	0xFD9
 10847                           status	equ	0xFD8
 10848                           
 10849 ;; *************** function _set_adc *****************
 10850 ;; Defined at:
 10851 ;;		line 116 in file "LT6804.c"
 10852 ;; Parameters:    Size  Location     Type
 10853 ;;  MD              2   14[COMRAM] int 
 10854 ;;  DCP             2   16[COMRAM] int 
 10855 ;;  CH              2   18[COMRAM] int 
 10856 ;;  CHG             2   20[COMRAM] int 
 10857 ;; Auto vars:     Size  Location     Type
 10858 ;;  md_bits         2   24[COMRAM] int 
 10859 ;; Return value:  Size  Location     Type
 10860 ;;                  1    wreg      void 
 10861 ;; Registers used:
 10862 ;;		wreg, status,2, status,0
 10863 ;; Tracked objects:
 10864 ;;		On entry : 0/0
 10865 ;;		On exit  : 0/0
 10866 ;;		Unchanged: 0/0
 10867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10868 ;;      Params:         8       0       0       0       0       0       0
 10869 ;;      Locals:         2       0       0       0       0       0       0
 10870 ;;      Temps:          2       0       0       0       0       0       0
 10871 ;;      Totals:        12       0       0       0       0       0       0
 10872 ;;Total ram usage:       12 bytes
 10873 ;; Hardware stack levels used:    1
 10874 ;; Hardware stack levels required when called:    3
 10875 ;; This function calls:
 10876 ;;		Nothing
 10877 ;; This function is called by:
 10878 ;;		_Read_Battery
 10879 ;;		_Read_GPIO
 10880 ;;		_LTC6804_initialize
 10881 ;; This function uses a non-reentrant model
 10882 ;;
 10883                           
 10884                           	psect	text46
 10885  002E90                     __ptext46:
 10886                           	opt stack 0
 10887  002E90                     _set_adc:
 10888                           	opt stack 25
 10889                           
 10890                           ;LT6804.c: 122: int md_bits;
 10891                           ;LT6804.c: 124: md_bits = (MD & 0x02) >> 1;
 10892                           
 10893                           ;incstack = 0
 10894  002E90  3410               	rlcf	set_adc@MD+1,w,c
 10895  002E92  3010               	rrcf	set_adc@MD+1,w,c
 10896  002E94  6E18               	movwf	(??_set_adc+1)& (0+255),c
 10897  002E96  300F               	rrcf	set_adc@MD,w,c
 10898  002E98  6E17               	movwf	??_set_adc& (0+255),c
 10899  002E9A  0E01               	movlw	1
 10900  002E9C  1417               	andwf	??_set_adc,w,c
 10901  002E9E  6E19               	movwf	set_adc@md_bits,c
 10902  002EA0  6A1A               	clrf	set_adc@md_bits+1,c
 10903                           
 10904                           ;LT6804.c: 125: ADCV[0] = md_bits + 0x02;
 10905  002EA2  0E02               	movlw	2
 10906  002EA4  2419               	addwf	set_adc@md_bits,w,c
 10907  002EA6  0100               	movlb	0	; () banked
 10908  002EA8  6FE6               	movwf	_ADCV& (0+255),b
 10909  002EAA  0E00               	movlw	0
 10910  002EAC  201A               	addwfc	set_adc@md_bits+1,w,c
 10911  002EAE  0100               	movlb	0	; () banked
 10912  002EB0  6FE7               	movwf	(_ADCV+1)& (0+255),b
 10913                           
 10914                           ;LT6804.c: 126: md_bits = (MD & 0x01) << 7;
 10915  002EB2  0E01               	movlw	1
 10916  002EB4  140F               	andwf	set_adc@MD,w,c
 10917  002EB6  6E17               	movwf	??_set_adc& (0+255),c
 10918  002EB8  0E00               	movlw	0
 10919  002EBA  1410               	andwf	set_adc@MD+1,w,c
 10920  002EBC  6E18               	movwf	(??_set_adc+1)& (0+255),c
 10921  002EBE  0E07               	movlw	7
 10922  002EC0                     u5305:
 10923  002EC0  90D8               	bcf	status,0,c
 10924  002EC2  3617               	rlcf	??_set_adc,f,c
 10925  002EC4  3618               	rlcf	??_set_adc+1,f,c
 10926  002EC6  2EE8               	decfsz	wreg,f,c
 10927  002EC8  D7FB               	goto	u5305
 10928  002ECA  C017  F019         	movff	??_set_adc,set_adc@md_bits
 10929  002ECE  C018  F01A         	movff	??_set_adc+1,set_adc@md_bits+1
 10930                           
 10931                           ;LT6804.c: 127: ADCV[1] = md_bits + 0x60 + (DCP<<4) + CH;
 10932  002ED2  C011  F017         	movff	set_adc@DCP,??_set_adc
 10933  002ED6  C012  F018         	movff	set_adc@DCP+1,??_set_adc+1
 10934  002EDA  3A17               	swapf	??_set_adc,f,c
 10935  002EDC  3A18               	swapf	??_set_adc+1,f,c
 10936  002EDE  0EF0               	movlw	240
 10937  002EE0  1618               	andwf	??_set_adc+1,f,c
 10938  002EE2  5017               	movf	??_set_adc,w,c
 10939  002EE4  0B0F               	andlw	15
 10940  002EE6  1218               	iorwf	??_set_adc+1,f,c
 10941  002EE8  0EF0               	movlw	240
 10942  002EEA  1617               	andwf	??_set_adc,f,c
 10943  002EEC  5019               	movf	set_adc@md_bits,w,c
 10944  002EEE  2617               	addwf	??_set_adc,f,c
 10945  002EF0  501A               	movf	set_adc@md_bits+1,w,c
 10946  002EF2  2218               	addwfc	??_set_adc+1,f,c
 10947  002EF4  5013               	movf	set_adc@CH,w,c
 10948  002EF6  2617               	addwf	??_set_adc,f,c
 10949  002EF8  5014               	movf	set_adc@CH+1,w,c
 10950  002EFA  2218               	addwfc	??_set_adc+1,f,c
 10951  002EFC  0E60               	movlw	96
 10952  002EFE  2417               	addwf	??_set_adc,w,c
 10953  002F00  0100               	movlb	0	; () banked
 10954  002F02  6FE8               	movwf	(_ADCV+2)& (0+255),b
 10955  002F04  0E00               	movlw	0
 10956  002F06  2018               	addwfc	??_set_adc+1,w,c
 10957  002F08  0100               	movlb	0	; () banked
 10958  002F0A  6FE9               	movwf	(_ADCV+3)& (0+255),b
 10959                           
 10960                           ;LT6804.c: 129: md_bits = (MD & 0x02) >> 1;
 10961  002F0C  3410               	rlcf	set_adc@MD+1,w,c
 10962  002F0E  3010               	rrcf	set_adc@MD+1,w,c
 10963  002F10  6E18               	movwf	(??_set_adc+1)& (0+255),c
 10964  002F12  300F               	rrcf	set_adc@MD,w,c
 10965  002F14  6E17               	movwf	??_set_adc& (0+255),c
 10966  002F16  0E01               	movlw	1
 10967  002F18  1417               	andwf	??_set_adc,w,c
 10968  002F1A  6E19               	movwf	set_adc@md_bits,c
 10969  002F1C  6A1A               	clrf	set_adc@md_bits+1,c
 10970                           
 10971                           ;LT6804.c: 130: ADAX[0] = md_bits + 0x04;
 10972  002F1E  0E04               	movlw	4
 10973  002F20  2419               	addwf	set_adc@md_bits,w,c
 10974  002F22  0100               	movlb	0	; () banked
 10975  002F24  6FE2               	movwf	_ADAX& (0+255),b
 10976  002F26  0E00               	movlw	0
 10977  002F28  201A               	addwfc	set_adc@md_bits+1,w,c
 10978  002F2A  0100               	movlb	0	; () banked
 10979  002F2C  6FE3               	movwf	(_ADAX+1)& (0+255),b
 10980                           
 10981                           ;LT6804.c: 131: md_bits = (MD & 0x01) << 7;
 10982  002F2E  0E01               	movlw	1
 10983  002F30  140F               	andwf	set_adc@MD,w,c
 10984  002F32  6E17               	movwf	??_set_adc& (0+255),c
 10985  002F34  0E00               	movlw	0
 10986  002F36  1410               	andwf	set_adc@MD+1,w,c
 10987  002F38  6E18               	movwf	(??_set_adc+1)& (0+255),c
 10988  002F3A  0E07               	movlw	7
 10989  002F3C                     u5315:
 10990  002F3C  90D8               	bcf	status,0,c
 10991  002F3E  3617               	rlcf	??_set_adc,f,c
 10992  002F40  3618               	rlcf	??_set_adc+1,f,c
 10993  002F42  2EE8               	decfsz	wreg,f,c
 10994  002F44  D7FB               	goto	u5315
 10995  002F46  C017  F019         	movff	??_set_adc,set_adc@md_bits
 10996  002F4A  C018  F01A         	movff	??_set_adc+1,set_adc@md_bits+1
 10997                           
 10998                           ;LT6804.c: 132: ADAX[1] = md_bits + 0x60 + CHG ;
 10999  002F4E  5015               	movf	set_adc@CHG,w,c
 11000  002F50  2419               	addwf	set_adc@md_bits,w,c
 11001  002F52  6E17               	movwf	??_set_adc& (0+255),c
 11002  002F54  5016               	movf	set_adc@CHG+1,w,c
 11003  002F56  201A               	addwfc	set_adc@md_bits+1,w,c
 11004  002F58  6E18               	movwf	(??_set_adc+1)& (0+255),c
 11005  002F5A  0E60               	movlw	96
 11006  002F5C  2417               	addwf	??_set_adc,w,c
 11007  002F5E  0100               	movlb	0	; () banked
 11008  002F60  6FE4               	movwf	(_ADAX+2)& (0+255),b
 11009  002F62  0E00               	movlw	0
 11010  002F64  2018               	addwfc	??_set_adc+1,w,c
 11011  002F66  0100               	movlb	0	; () banked
 11012  002F68  6FE5               	movwf	(_ADAX+3)& (0+255),b
 11013                           
 11014                           ; BSR set to: 0
 11015  002F6A  0012               	return		;funcret
 11016  002F6C                     __end_of_set_adc:
 11017                           	opt stack 0
 11018                           tblptru	equ	0xFF8
 11019                           tblptrh	equ	0xFF7
 11020                           tblptrl	equ	0xFF6
 11021                           tablat	equ	0xFF5
 11022                           prodh	equ	0xFF4
 11023                           prodl	equ	0xFF3
 11024                           intcon	equ	0xFF2
 11025                           intcon2	equ	0xFF1
 11026                           postinc0	equ	0xFEE
 11027                           wreg	equ	0xFE8
 11028                           postinc1	equ	0xFE6
 11029                           postdec1	equ	0xFE5
 11030                           fsr1h	equ	0xFE2
 11031                           fsr1l	equ	0xFE1
 11032                           indf2	equ	0xFDF
 11033                           postinc2	equ	0xFDE
 11034                           postdec2	equ	0xFDD
 11035                           fsr2h	equ	0xFDA
 11036                           fsr2l	equ	0xFD9
 11037                           status	equ	0xFD8
 11038                           
 11039 ;; *************** function _LTC6804_rdcv *****************
 11040 ;; Defined at:
 11041 ;;		line 339 in file "LT6804.c"
 11042 ;; Parameters:    Size  Location     Type
 11043 ;;  reg             2    0[BANK0 ] int 
 11044 ;;  total_ic        2    2[BANK0 ] int 
 11045 ;;  cell_codes      2    4[BANK0 ] PTR int [12]
 11046 ;;		 -> cell_codes_Bank(24), 
 11047 ;; Auto vars:     Size  Location     Type
 11048 ;;  cell_data      20   14[BANK0 ] int [10]
 11049 ;;  data_counter    2   54[BANK0 ] int 
 11050 ;;  current_cell    2   52[BANK0 ] int 
 11051 ;;  CELL_IN_REG     2   50[BANK0 ] const int 
 11052 ;;  cell_reg        2   48[BANK0 ] int 
 11053 ;;  data_pec        2   46[BANK0 ] int 
 11054 ;;  received_pec    2   44[BANK0 ] int 
 11055 ;;  parsed_cell     2   42[BANK0 ] int 
 11056 ;;  BYT_IN_REG      2   40[BANK0 ] const int 
 11057 ;;  NUM_RX_BYT      2   38[BANK0 ] const int 
 11058 ;;  pec_error       2   36[BANK0 ] int 
 11059 ;;  hi              2   12[BANK0 ] int 
 11060 ;; Return value:  Size  Location     Type
 11061 ;;                  2    0[BANK0 ] int 
 11062 ;; Registers used:
 11063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11064 ;; Tracked objects:
 11065 ;;		On entry : 0/0
 11066 ;;		On exit  : 0/0
 11067 ;;		Unchanged: 0/0
 11068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11069 ;;      Params:         0       6       0       0       0       0       0
 11070 ;;      Locals:         0      44       0       0       0       0       0
 11071 ;;      Temps:          0       6       0       0       0       0       0
 11072 ;;      Totals:         0      56       0       0       0       0       0
 11073 ;;Total ram usage:       56 bytes
 11074 ;; Hardware stack levels used:    1
 11075 ;; Hardware stack levels required when called:    6
 11076 ;; This function calls:
 11077 ;;		_LTC6804_rdcv_reg
 11078 ;;		_SPI2_Exchange8bit
 11079 ;;		___wmul
 11080 ;;		_pec15_calc
 11081 ;; This function is called by:
 11082 ;;		_Read_Battery
 11083 ;; This function uses a non-reentrant model
 11084 ;;
 11085                           
 11086                           	psect	text47
 11087  000C08                     __ptext47:
 11088                           	opt stack 0
 11089  000C08                     _LTC6804_rdcv:
 11090                           	opt stack 22
 11091                           
 11092                           ;LT6804.c: 344: int hi=cell_codes[0][0];
 11093                           
 11094                           ; BSR set to: 0
 11095                           ;incstack = 0
 11096  000C08  C064  FFD9         	movff	LTC6804_rdcv@cell_codes,fsr2l
 11097  000C0C  C065  FFDA         	movff	LTC6804_rdcv@cell_codes+1,fsr2h
 11098  000C10  CFDE F06C          	movff	postinc2,LTC6804_rdcv@hi
 11099  000C14  CFDD F06D          	movff	postdec2,LTC6804_rdcv@hi+1
 11100                           
 11101                           ;LT6804.c: 345: int cell_reg = 0;
 11102  000C18  0E00               	movlw	0
 11103  000C1A  0100               	movlb	0	; () banked
 11104  000C1C  6F91               	movwf	(LTC6804_rdcv@cell_reg+1)& (0+255),b
 11105  000C1E  0E00               	movlw	0
 11106  000C20  6F90               	movwf	LTC6804_rdcv@cell_reg& (0+255),b
 11107                           
 11108                           ; BSR set to: 0
 11109                           ;LT6804.c: 346: int current_cell = 0;
 11110  000C22  0E00               	movlw	0
 11111  000C24  0100               	movlb	0	; () banked
 11112  000C26  6F95               	movwf	(LTC6804_rdcv@current_cell+1)& (0+255),b
 11113  000C28  0E00               	movlw	0
 11114  000C2A  6F94               	movwf	LTC6804_rdcv@current_cell& (0+255),b
 11115                           
 11116                           ; BSR set to: 0
 11117                           ;LT6804.c: 347: const int NUM_RX_BYT = 8;
 11118  000C2C  0E00               	movlw	0
 11119  000C2E  0100               	movlb	0	; () banked
 11120  000C30  6F87               	movwf	(LTC6804_rdcv@NUM_RX_BYT+1)& (0+255),b
 11121  000C32  0E08               	movlw	8
 11122  000C34  6F86               	movwf	LTC6804_rdcv@NUM_RX_BYT& (0+255),b
 11123                           
 11124                           ; BSR set to: 0
 11125                           ;LT6804.c: 348: const int BYT_IN_REG = 6;
 11126  000C36  0E00               	movlw	0
 11127  000C38  0100               	movlb	0	; () banked
 11128  000C3A  6F89               	movwf	(LTC6804_rdcv@BYT_IN_REG+1)& (0+255),b
 11129  000C3C  0E06               	movlw	6
 11130  000C3E  6F88               	movwf	LTC6804_rdcv@BYT_IN_REG& (0+255),b
 11131                           
 11132                           ; BSR set to: 0
 11133                           ;LT6804.c: 349: const int CELL_IN_REG = 3;
 11134  000C40  0E00               	movlw	0
 11135  000C42  0100               	movlb	0	; () banked
 11136  000C44  6F93               	movwf	(LTC6804_rdcv@CELL_IN_REG+1)& (0+255),b
 11137  000C46  0E03               	movlw	3
 11138  000C48  6F92               	movwf	LTC6804_rdcv@CELL_IN_REG& (0+255),b
 11139                           
 11140                           ; BSR set to: 0
 11141                           ;LT6804.c: 351: int cell_data[10];
 11142                           ;LT6804.c: 352: int pec_error = 0;
 11143  000C4A  0E00               	movlw	0
 11144  000C4C  0100               	movlb	0	; () banked
 11145  000C4E  6F85               	movwf	(LTC6804_rdcv@pec_error+1)& (0+255),b
 11146  000C50  0E00               	movlw	0
 11147  000C52  6F84               	movwf	LTC6804_rdcv@pec_error& (0+255),b
 11148                           
 11149                           ; BSR set to: 0
 11150                           ;LT6804.c: 353: int parsed_cell;
 11151                           ;LT6804.c: 354: int received_pec;
 11152                           ;LT6804.c: 355: int data_pec;
 11153                           ;LT6804.c: 356: int data_counter=0;
 11154  000C54  0E00               	movlw	0
 11155  000C56  0100               	movlb	0	; () banked
 11156  000C58  6F97               	movwf	(LTC6804_rdcv@data_counter+1)& (0+255),b
 11157  000C5A  0E00               	movlw	0
 11158  000C5C  6F96               	movwf	LTC6804_rdcv@data_counter& (0+255),b
 11159                           
 11160                           ; BSR set to: 0
 11161                           ;LT6804.c: 358: if (reg == 0)
 11162  000C5E  0100               	movlb	0	; () banked
 11163  000C60  5160               	movf	LTC6804_rdcv@reg& (0+255),w,b
 11164  000C62  0100               	movlb	0	; () banked
 11165  000C64  1161               	iorwf	(LTC6804_rdcv@reg+1)& (0+255),w,b
 11166  000C66  A4D8               	btfss	status,2,c
 11167  000C68  D14A               	goto	l8335
 11168                           
 11169                           ; BSR set to: 0
 11170                           ;LT6804.c: 359: {LATD3 = 0;
 11171  000C6A  968C               	bcf	3980,3,c	;volatile
 11172                           
 11173                           ; BSR set to: 0
 11174                           ;LT6804.c: 360: SPI2_Exchange8bit(0);
 11175  000C6C  0E00               	movlw	0
 11176  000C6E  EC33  F01F         	call	_SPI2_Exchange8bit
 11177                           
 11178                           ;LT6804.c: 361: LATD3 = 1;
 11179  000C72  868C               	bsf	3980,3,c	;volatile
 11180                           
 11181                           ;LT6804.c: 363: for(cell_reg = 1; cell_reg<5; cell_reg++)
 11182  000C74  0E00               	movlw	0
 11183  000C76  0100               	movlb	0	; () banked
 11184  000C78  6F91               	movwf	(LTC6804_rdcv@cell_reg+1)& (0+255),b
 11185  000C7A  0E01               	movlw	1
 11186  000C7C  6F90               	movwf	LTC6804_rdcv@cell_reg& (0+255),b
 11187                           
 11188                           ; BSR set to: 0
 11189  000C7E  0100               	movlb	0	; () banked
 11190  000C80  BF91               	btfsc	(LTC6804_rdcv@cell_reg+1)& (0+255),7,b
 11191  000C82  D00A               	goto	l8297
 11192  000C84  0100               	movlb	0	; () banked
 11193  000C86  5191               	movf	(LTC6804_rdcv@cell_reg+1)& (0+255),w,b
 11194  000C88  E106               	bnz	u8630
 11195  000C8A  0E05               	movlw	5
 11196  000C8C  0100               	movlb	0	; () banked
 11197  000C8E  5D90               	subwf	LTC6804_rdcv@cell_reg& (0+255),w,b
 11198  000C90  B0D8               	btfsc	status,0,c
 11199  000C92  D260               	goto	l865
 11200  000C94  D001               	goto	l8297
 11201  000C96                     u8630:
 11202                           
 11203                           ; BSR set to: 0
 11204  000C96  D25E               	goto	l865
 11205  000C98                     l8297:
 11206                           
 11207                           ; BSR set to: 0
 11208                           ;LT6804.c: 364: {
 11209                           ;LT6804.c: 365: data_counter = 0;
 11210  000C98  0E00               	movlw	0
 11211  000C9A  0100               	movlb	0	; () banked
 11212  000C9C  6F97               	movwf	(LTC6804_rdcv@data_counter+1)& (0+255),b
 11213  000C9E  0E00               	movlw	0
 11214  000CA0  6F96               	movwf	LTC6804_rdcv@data_counter& (0+255),b
 11215                           
 11216                           ; BSR set to: 0
 11217                           ;LT6804.c: 366: LTC6804_rdcv_reg(cell_reg, total_ic,cell_data);
 11218  000CA2  C090  F030         	movff	LTC6804_rdcv@cell_reg,LTC6804_rdcv_reg@reg
 11219  000CA6  C091  F031         	movff	LTC6804_rdcv@cell_reg+1,LTC6804_rdcv_reg@reg+1
 11220  000CAA  C062  F032         	movff	LTC6804_rdcv@total_ic,LTC6804_rdcv_reg@total_ic
 11221  000CAE  C063  F033         	movff	LTC6804_rdcv@total_ic+1,LTC6804_rdcv_reg@total_ic+1
 11222  000CB2  0E6E               	movlw	low LTC6804_rdcv@cell_data
 11223  000CB4  6E34               	movwf	LTC6804_rdcv_reg@data,c
 11224  000CB6  0E00               	movlw	high LTC6804_rdcv@cell_data
 11225  000CB8  6E35               	movwf	LTC6804_rdcv_reg@data+1,c
 11226  000CBA  ECCB  F015         	call	_LTC6804_rdcv_reg	;wreg free
 11227                           
 11228                           ;LT6804.c: 367: for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 11229  000CBE  0E00               	movlw	0
 11230  000CC0  6E4E               	movwf	_current_ic+1,c
 11231  000CC2  0E00               	movlw	0
 11232  000CC4  6E4D               	movwf	_current_ic,c
 11233  000CC6  D102               	goto	l859
 11234  000CC8                     l8303:
 11235                           
 11236                           ;LT6804.c: 368: {
 11237                           ;LT6804.c: 370: for(current_cell = 0; current_cell<CELL_IN_REG; current_cell++)
 11238  000CC8  0E00               	movlw	0
 11239  000CCA  0100               	movlb	0	; () banked
 11240  000CCC  6F95               	movwf	(LTC6804_rdcv@current_cell+1)& (0+255),b
 11241  000CCE  0E00               	movlw	0
 11242  000CD0  6F94               	movwf	LTC6804_rdcv@current_cell& (0+255),b
 11243  000CD2                     l8305:
 11244                           
 11245                           ; BSR set to: 0
 11246  000CD2  0100               	movlb	0	; () banked
 11247  000CD4  5192               	movf	LTC6804_rdcv@CELL_IN_REG& (0+255),w,b
 11248  000CD6  0100               	movlb	0	; () banked
 11249  000CD8  5D94               	subwf	LTC6804_rdcv@current_cell& (0+255),w,b
 11250  000CDA  0100               	movlb	0	; () banked
 11251  000CDC  5195               	movf	(LTC6804_rdcv@current_cell+1)& (0+255),w,b
 11252  000CDE  0A80               	xorlw	128
 11253  000CE0  0100               	movlb	0	; () banked
 11254  000CE2  6F66               	movwf	??_LTC6804_rdcv& (0+255),b
 11255  000CE4  0100               	movlb	0	; () banked
 11256  000CE6  5193               	movf	(LTC6804_rdcv@CELL_IN_REG+1)& (0+255),w,b
 11257  000CE8  0A80               	xorlw	128
 11258  000CEA  0100               	movlb	0	; () banked
 11259  000CEC  5966               	subwfb	??_LTC6804_rdcv& (0+255),w,b
 11260  000CEE  B0D8               	btfsc	status,0,c
 11261  000CF0  D07D               	goto	l8319
 11262                           
 11263                           ; BSR set to: 0
 11264                           ;LT6804.c: 371: {
 11265                           ;LT6804.c: 372: parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 
      +                          8);
 11266                           
 11267                           ; BSR set to: 0
 11268                           
 11269                           ; BSR set to: 0
 11270  000CF2  90D8               	bcf	status,0,c
 11271  000CF4  0100               	movlb	0	; () banked
 11272  000CF6  3596               	rlcf	LTC6804_rdcv@data_counter& (0+255),w,b
 11273  000CF8  6ED9               	movwf	fsr2l,c
 11274  000CFA  0100               	movlb	0	; () banked
 11275  000CFC  3597               	rlcf	(LTC6804_rdcv@data_counter+1)& (0+255),w,b
 11276  000CFE  6EDA               	movwf	fsr2h,c
 11277  000D00  0E6E               	movlw	low LTC6804_rdcv@cell_data
 11278  000D02  26D9               	addwf	fsr2l,f,c
 11279  000D04  0E00               	movlw	high LTC6804_rdcv@cell_data
 11280  000D06  22DA               	addwfc	fsr2h,f,c
 11281  000D08  CFDE F066          	movff	postinc2,??_LTC6804_rdcv
 11282  000D0C  CFDD F067          	movff	postdec2,??_LTC6804_rdcv+1
 11283  000D10  C096  F068         	movff	LTC6804_rdcv@data_counter,??_LTC6804_rdcv+2
 11284  000D14  C097  F069         	movff	LTC6804_rdcv@data_counter+1,??_LTC6804_rdcv+3
 11285  000D18  90D8               	bcf	status,0,c
 11286  000D1A  0100               	movlb	0	; () banked
 11287  000D1C  3768               	rlcf	(??_LTC6804_rdcv+2)& (0+255),f,b
 11288  000D1E  3769               	rlcf	(??_LTC6804_rdcv+3)& (0+255),f,b
 11289  000D20  0E02               	movlw	2
 11290  000D22  0100               	movlb	0	; () banked
 11291  000D24  2768               	addwf	(??_LTC6804_rdcv+2)& (0+255),f,b
 11292  000D26  0E00               	movlw	0
 11293  000D28  2369               	addwfc	(??_LTC6804_rdcv+3)& (0+255),f,b
 11294  000D2A  0E6E               	movlw	low LTC6804_rdcv@cell_data
 11295  000D2C  0100               	movlb	0	; () banked
 11296  000D2E  2568               	addwf	(??_LTC6804_rdcv+2)& (0+255),w,b
 11297  000D30  6ED9               	movwf	fsr2l,c
 11298  000D32  0E00               	movlw	high LTC6804_rdcv@cell_data
 11299  000D34  0100               	movlb	0	; () banked
 11300  000D36  2169               	addwfc	(??_LTC6804_rdcv+3)& (0+255),w,b
 11301  000D38  6EDA               	movwf	fsr2h,c
 11302  000D3A  CFDE F06A          	movff	postinc2,??_LTC6804_rdcv+4
 11303  000D3E  CFDD F06B          	movff	postdec2,??_LTC6804_rdcv+5
 11304  000D42  C06A  F06B         	movff	??_LTC6804_rdcv+4,??_LTC6804_rdcv+5
 11305  000D46  0100               	movlb	0	; () banked
 11306  000D48  6B6A               	clrf	(??_LTC6804_rdcv+4)& (0+255),b
 11307  000D4A  0100               	movlb	0	; () banked
 11308  000D4C  5166               	movf	??_LTC6804_rdcv& (0+255),w,b
 11309  000D4E  0100               	movlb	0	; () banked
 11310  000D50  256A               	addwf	(??_LTC6804_rdcv+4)& (0+255),w,b
 11311  000D52  0100               	movlb	0	; () banked
 11312  000D54  6F8A               	movwf	LTC6804_rdcv@parsed_cell& (0+255),b
 11313  000D56  0100               	movlb	0	; () banked
 11314  000D58  5167               	movf	(??_LTC6804_rdcv+1)& (0+255),w,b
 11315  000D5A  0100               	movlb	0	; () banked
 11316  000D5C  216B               	addwfc	(??_LTC6804_rdcv+5)& (0+255),w,b
 11317  000D5E  0100               	movlb	0	; () banked
 11318  000D60  6F8B               	movwf	(LTC6804_rdcv@parsed_cell+1)& (0+255),b
 11319                           
 11320                           ; BSR set to: 0
 11321                           ;LT6804.c: 373: cell_codes[current_ic][current_cell + ((cell_reg - 1) * CELL_IN_REG)] = 
      +                          parsed_cell;
 11322  000D62  C04D  F01D         	movff	_current_ic,___wmul@multiplier
 11323  000D66  C04E  F01E         	movff	_current_ic+1,___wmul@multiplier+1
 11324  000D6A  0E00               	movlw	0
 11325  000D6C  6E20               	movwf	___wmul@multiplicand+1,c
 11326  000D6E  0E18               	movlw	24
 11327  000D70  6E1F               	movwf	___wmul@multiplicand,c
 11328  000D72  ECDB  F01E         	call	___wmul	;wreg free
 11329  000D76  C064  F066         	movff	LTC6804_rdcv@cell_codes,??_LTC6804_rdcv
 11330  000D7A  C065  F067         	movff	LTC6804_rdcv@cell_codes+1,??_LTC6804_rdcv+1
 11331  000D7E  501D               	movf	?___wmul,w,c
 11332  000D80  0100               	movlb	0	; () banked
 11333  000D82  2766               	addwf	??_LTC6804_rdcv& (0+255),f,b
 11334  000D84  501E               	movf	?___wmul+1,w,c
 11335  000D86  0100               	movlb	0	; () banked
 11336  000D88  2367               	addwfc	(??_LTC6804_rdcv+1)& (0+255),f,b
 11337  000D8A  0EFF               	movlw	255
 11338  000D8C  0100               	movlb	0	; () banked
 11339  000D8E  2590               	addwf	LTC6804_rdcv@cell_reg& (0+255),w,b
 11340  000D90  6E1D               	movwf	___wmul@multiplier,c
 11341  000D92  0EFF               	movlw	255
 11342  000D94  0100               	movlb	0	; () banked
 11343  000D96  2191               	addwfc	(LTC6804_rdcv@cell_reg+1)& (0+255),w,b
 11344  000D98  6E1E               	movwf	___wmul@multiplier+1,c
 11345  000D9A  C092  F01F         	movff	LTC6804_rdcv@CELL_IN_REG,___wmul@multiplicand
 11346  000D9E  C093  F020         	movff	LTC6804_rdcv@CELL_IN_REG+1,___wmul@multiplicand+1
 11347  000DA2  ECDB  F01E         	call	___wmul	;wreg free
 11348  000DA6  0100               	movlb	0	; () banked
 11349  000DA8  5194               	movf	LTC6804_rdcv@current_cell& (0+255),w,b
 11350  000DAA  261D               	addwf	?___wmul,f,c
 11351  000DAC  0100               	movlb	0	; () banked
 11352  000DAE  5195               	movf	(LTC6804_rdcv@current_cell+1)& (0+255),w,b
 11353  000DB0  221E               	addwfc	?___wmul+1,f,c
 11354  000DB2  90D8               	bcf	status,0,c
 11355  000DB4  361D               	rlcf	?___wmul,f,c
 11356  000DB6  361E               	rlcf	?___wmul+1,f,c
 11357  000DB8  501D               	movf	?___wmul,w,c
 11358  000DBA  0100               	movlb	0	; () banked
 11359  000DBC  2566               	addwf	??_LTC6804_rdcv& (0+255),w,b
 11360  000DBE  6ED9               	movwf	fsr2l,c
 11361  000DC0  501E               	movf	?___wmul+1,w,c
 11362  000DC2  0100               	movlb	0	; () banked
 11363  000DC4  2167               	addwfc	(??_LTC6804_rdcv+1)& (0+255),w,b
 11364  000DC6  6EDA               	movwf	fsr2h,c
 11365  000DC8  C08A  FFDE         	movff	LTC6804_rdcv@parsed_cell,postinc2
 11366  000DCC  C08B  FFDD         	movff	LTC6804_rdcv@parsed_cell+1,postdec2
 11367                           
 11368                           ; BSR set to: 0
 11369                           ;LT6804.c: 374: data_counter = data_counter + 2;
 11370  000DD0  0E02               	movlw	2
 11371  000DD2  0100               	movlb	0	; () banked
 11372  000DD4  2596               	addwf	LTC6804_rdcv@data_counter& (0+255),w,b
 11373  000DD6  0100               	movlb	0	; () banked
 11374  000DD8  6F96               	movwf	LTC6804_rdcv@data_counter& (0+255),b
 11375  000DDA  0E00               	movlw	0
 11376  000DDC  0100               	movlb	0	; () banked
 11377  000DDE  2197               	addwfc	(LTC6804_rdcv@data_counter+1)& (0+255),w,b
 11378  000DE0  0100               	movlb	0	; () banked
 11379  000DE2  6F97               	movwf	(LTC6804_rdcv@data_counter+1)& (0+255),b
 11380                           
 11381                           ; BSR set to: 0
 11382  000DE4  0100               	movlb	0	; () banked
 11383  000DE6  4B94               	infsnz	LTC6804_rdcv@current_cell& (0+255),f,b
 11384  000DE8  2B95               	incf	(LTC6804_rdcv@current_cell+1)& (0+255),f,b
 11385  000DEA  D773               	goto	l8305
 11386  000DEC                     l8319:
 11387                           
 11388                           ; BSR set to: 0
 11389                           ;LT6804.c: 375: }
 11390                           ;LT6804.c: 377: received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter+1
      +                          ];
 11391  000DEC  C096  F066         	movff	LTC6804_rdcv@data_counter,??_LTC6804_rdcv
 11392  000DF0  C097  F067         	movff	LTC6804_rdcv@data_counter+1,??_LTC6804_rdcv+1
 11393  000DF4  90D8               	bcf	status,0,c
 11394  000DF6  0100               	movlb	0	; () banked
 11395  000DF8  3766               	rlcf	??_LTC6804_rdcv& (0+255),f,b
 11396  000DFA  3767               	rlcf	(??_LTC6804_rdcv+1)& (0+255),f,b
 11397  000DFC  0E02               	movlw	2
 11398  000DFE  0100               	movlb	0	; () banked
 11399  000E00  2766               	addwf	??_LTC6804_rdcv& (0+255),f,b
 11400  000E02  0E00               	movlw	0
 11401  000E04  2367               	addwfc	(??_LTC6804_rdcv+1)& (0+255),f,b
 11402  000E06  0E6E               	movlw	low LTC6804_rdcv@cell_data
 11403  000E08  0100               	movlb	0	; () banked
 11404  000E0A  2566               	addwf	??_LTC6804_rdcv& (0+255),w,b
 11405  000E0C  6ED9               	movwf	fsr2l,c
 11406  000E0E  0E00               	movlw	high LTC6804_rdcv@cell_data
 11407  000E10  0100               	movlb	0	; () banked
 11408  000E12  2167               	addwfc	(??_LTC6804_rdcv+1)& (0+255),w,b
 11409  000E14  6EDA               	movwf	fsr2h,c
 11410  000E16  CFDE F068          	movff	postinc2,??_LTC6804_rdcv+2
 11411  000E1A  CFDD F069          	movff	postdec2,??_LTC6804_rdcv+3
 11412  000E1E  90D8               	bcf	status,0,c
 11413  000E20  0100               	movlb	0	; () banked
 11414  000E22  3596               	rlcf	LTC6804_rdcv@data_counter& (0+255),w,b
 11415  000E24  6ED9               	movwf	fsr2l,c
 11416  000E26  0100               	movlb	0	; () banked
 11417  000E28  3597               	rlcf	(LTC6804_rdcv@data_counter+1)& (0+255),w,b
 11418  000E2A  6EDA               	movwf	fsr2h,c
 11419  000E2C  0E6E               	movlw	low LTC6804_rdcv@cell_data
 11420  000E2E  26D9               	addwf	fsr2l,f,c
 11421  000E30  0E00               	movlw	high LTC6804_rdcv@cell_data
 11422  000E32  22DA               	addwfc	fsr2h,f,c
 11423  000E34  CFDE F06A          	movff	postinc2,??_LTC6804_rdcv+4
 11424  000E38  CFDD F06B          	movff	postdec2,??_LTC6804_rdcv+5
 11425  000E3C  C06A  F06B         	movff	??_LTC6804_rdcv+4,??_LTC6804_rdcv+5
 11426  000E40  0100               	movlb	0	; () banked
 11427  000E42  6B6A               	clrf	(??_LTC6804_rdcv+4)& (0+255),b
 11428  000E44  0100               	movlb	0	; () banked
 11429  000E46  5168               	movf	(??_LTC6804_rdcv+2)& (0+255),w,b
 11430  000E48  0100               	movlb	0	; () banked
 11431  000E4A  256A               	addwf	(??_LTC6804_rdcv+4)& (0+255),w,b
 11432  000E4C  0100               	movlb	0	; () banked
 11433  000E4E  6F8C               	movwf	LTC6804_rdcv@received_pec& (0+255),b
 11434  000E50  0100               	movlb	0	; () banked
 11435  000E52  5169               	movf	(??_LTC6804_rdcv+3)& (0+255),w,b
 11436  000E54  0100               	movlb	0	; () banked
 11437  000E56  216B               	addwfc	(??_LTC6804_rdcv+5)& (0+255),w,b
 11438  000E58  0100               	movlb	0	; () banked
 11439  000E5A  6F8D               	movwf	(LTC6804_rdcv@received_pec+1)& (0+255),b
 11440                           
 11441                           ; BSR set to: 0
 11442                           ;LT6804.c: 378: data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT ]);
 11443  000E5C  C088  F023         	movff	LTC6804_rdcv@BYT_IN_REG,pec15_calc@len
 11444  000E60  C089  F024         	movff	LTC6804_rdcv@BYT_IN_REG+1,pec15_calc@len+1
 11445  000E64  C04D  F01D         	movff	_current_ic,___wmul@multiplier
 11446  000E68  C04E  F01E         	movff	_current_ic+1,___wmul@multiplier+1
 11447  000E6C  C086  F01F         	movff	LTC6804_rdcv@NUM_RX_BYT,___wmul@multiplicand
 11448  000E70  C087  F020         	movff	LTC6804_rdcv@NUM_RX_BYT+1,___wmul@multiplicand+1
 11449  000E74  ECDB  F01E         	call	___wmul	;wreg free
 11450  000E78  90D8               	bcf	status,0,c
 11451  000E7A  361D               	rlcf	?___wmul,f,c
 11452  000E7C  361E               	rlcf	?___wmul+1,f,c
 11453  000E7E  0E6E               	movlw	low LTC6804_rdcv@cell_data
 11454  000E80  241D               	addwf	?___wmul,w,c
 11455  000E82  6E25               	movwf	pec15_calc@data,c
 11456  000E84  0E00               	movlw	high LTC6804_rdcv@cell_data
 11457  000E86  201E               	addwfc	?___wmul+1,w,c
 11458  000E88  6E26               	movwf	pec15_calc@data+1,c
 11459  000E8A  EC42  F019         	call	_pec15_calc	;wreg free
 11460  000E8E  C023  F08E         	movff	?_pec15_calc,LTC6804_rdcv@data_pec
 11461  000E92  C024  F08F         	movff	?_pec15_calc+1,LTC6804_rdcv@data_pec+1
 11462                           
 11463                           ;LT6804.c: 379: if(received_pec != data_pec)
 11464  000E96  0100               	movlb	0	; () banked
 11465  000E98  518E               	movf	LTC6804_rdcv@data_pec& (0+255),w,b
 11466  000E9A  0100               	movlb	0	; () banked
 11467  000E9C  198C               	xorwf	LTC6804_rdcv@received_pec& (0+255),w,b
 11468  000E9E  E106               	bnz	u8660
 11469  000EA0  0100               	movlb	0	; () banked
 11470  000EA2  518F               	movf	(LTC6804_rdcv@data_pec+1)& (0+255),w,b
 11471  000EA4  0100               	movlb	0	; () banked
 11472  000EA6  198D               	xorwf	(LTC6804_rdcv@received_pec+1)& (0+255),w,b
 11473  000EA8  B4D8               	btfsc	status,2,c
 11474  000EAA  D004               	goto	l8327
 11475  000EAC                     u8660:
 11476                           
 11477                           ; BSR set to: 0
 11478                           ;LT6804.c: 380: {
 11479                           ;LT6804.c: 381: pec_error--;
 11480  000EAC  0100               	movlb	0	; () banked
 11481  000EAE  0784               	decf	LTC6804_rdcv@pec_error& (0+255),f,b
 11482  000EB0  A0D8               	btfss	status,0,c
 11483  000EB2  0785               	decf	(LTC6804_rdcv@pec_error+1)& (0+255),f,b
 11484  000EB4                     l8327:
 11485                           
 11486                           ; BSR set to: 0
 11487                           ;LT6804.c: 382: }
 11488                           ;LT6804.c: 383: data_counter=data_counter+2;
 11489  000EB4  0E02               	movlw	2
 11490  000EB6  0100               	movlb	0	; () banked
 11491  000EB8  2596               	addwf	LTC6804_rdcv@data_counter& (0+255),w,b
 11492  000EBA  0100               	movlb	0	; () banked
 11493  000EBC  6F96               	movwf	LTC6804_rdcv@data_counter& (0+255),b
 11494  000EBE  0E00               	movlw	0
 11495  000EC0  0100               	movlb	0	; () banked
 11496  000EC2  2197               	addwfc	(LTC6804_rdcv@data_counter+1)& (0+255),w,b
 11497  000EC4  0100               	movlb	0	; () banked
 11498  000EC6  6F97               	movwf	(LTC6804_rdcv@data_counter+1)& (0+255),b
 11499                           
 11500                           ; BSR set to: 0
 11501  000EC8  4A4D               	infsnz	_current_ic,f,c
 11502  000ECA  2A4E               	incf	_current_ic+1,f,c
 11503  000ECC                     l859:
 11504  000ECC  0100               	movlb	0	; () banked
 11505  000ECE  5162               	movf	LTC6804_rdcv@total_ic& (0+255),w,b
 11506  000ED0  5C4D               	subwf	_current_ic,w,c
 11507  000ED2  504E               	movf	_current_ic+1,w,c
 11508  000ED4  0A80               	xorlw	128
 11509  000ED6  0100               	movlb	0	; () banked
 11510  000ED8  6F66               	movwf	??_LTC6804_rdcv& (0+255),b
 11511  000EDA  0100               	movlb	0	; () banked
 11512  000EDC  5163               	movf	(LTC6804_rdcv@total_ic+1)& (0+255),w,b
 11513  000EDE  0A80               	xorlw	128
 11514  000EE0  0100               	movlb	0	; () banked
 11515  000EE2  5966               	subwfb	??_LTC6804_rdcv& (0+255),w,b
 11516  000EE4  A0D8               	btfss	status,0,c
 11517  000EE6  D6F0               	goto	l8303
 11518                           
 11519                           ; BSR set to: 0
 11520                           
 11521                           ; BSR set to: 0
 11522  000EE8  0100               	movlb	0	; () banked
 11523  000EEA  4B90               	infsnz	LTC6804_rdcv@cell_reg& (0+255),f,b
 11524  000EEC  2B91               	incf	(LTC6804_rdcv@cell_reg+1)& (0+255),f,b
 11525                           
 11526                           ; BSR set to: 0
 11527  000EEE  0100               	movlb	0	; () banked
 11528  000EF0  BF91               	btfsc	(LTC6804_rdcv@cell_reg+1)& (0+255),7,b
 11529  000EF2  D6D2               	goto	l8297
 11530  000EF4  0100               	movlb	0	; () banked
 11531  000EF6  5191               	movf	(LTC6804_rdcv@cell_reg+1)& (0+255),w,b
 11532  000EF8  E101               	bnz	u8680
 11533  000EFA  D6C7               	goto	L17
 11534  000EFC                     u8680:
 11535                           
 11536                           ; BSR set to: 0
 11537                           ;LT6804.c: 384: }
 11538                           ;LT6804.c: 385: }
 11539                           ;LT6804.c: 386: }
 11540  000EFC  D12B               	goto	l865
 11541  000EFE                     l8335:
 11542                           
 11543                           ; BSR set to: 0
 11544                           ;LT6804.c: 388: else
 11545                           ;LT6804.c: 389: {
 11546                           ;LT6804.c: 392: LTC6804_rdcv_reg(reg, total_ic,cell_data);
 11547  000EFE  C060  F030         	movff	LTC6804_rdcv@reg,LTC6804_rdcv_reg@reg
 11548  000F02  C061  F031         	movff	LTC6804_rdcv@reg+1,LTC6804_rdcv_reg@reg+1
 11549  000F06  C062  F032         	movff	LTC6804_rdcv@total_ic,LTC6804_rdcv_reg@total_ic
 11550  000F0A  C063  F033         	movff	LTC6804_rdcv@total_ic+1,LTC6804_rdcv_reg@total_ic+1
 11551  000F0E  0E6E               	movlw	low LTC6804_rdcv@cell_data
 11552  000F10  6E34               	movwf	LTC6804_rdcv_reg@data,c
 11553  000F12  0E00               	movlw	high LTC6804_rdcv@cell_data
 11554  000F14  6E35               	movwf	LTC6804_rdcv_reg@data+1,c
 11555  000F16  ECCB  F015         	call	_LTC6804_rdcv_reg	;wreg free
 11556                           
 11557                           ;LT6804.c: 393: for (current_ic = 0 ; current_ic < total_ic; current_ic++)
 11558  000F1A  0E00               	movlw	0
 11559  000F1C  6E4E               	movwf	_current_ic+1,c
 11560  000F1E  0E00               	movlw	0
 11561  000F20  6E4D               	movwf	_current_ic,c
 11562  000F22  D10A               	goto	l8365
 11563  000F24                     l8339:
 11564                           
 11565                           ;LT6804.c: 394: {
 11566                           ;LT6804.c: 396: for(current_cell = 0; current_cell < CELL_IN_REG; current_cell++)
 11567  000F24  0E00               	movlw	0
 11568  000F26  0100               	movlb	0	; () banked
 11569  000F28  6F95               	movwf	(LTC6804_rdcv@current_cell+1)& (0+255),b
 11570  000F2A  0E00               	movlw	0
 11571  000F2C  6F94               	movwf	LTC6804_rdcv@current_cell& (0+255),b
 11572  000F2E                     l8341:
 11573                           
 11574                           ; BSR set to: 0
 11575  000F2E  0100               	movlb	0	; () banked
 11576  000F30  5192               	movf	LTC6804_rdcv@CELL_IN_REG& (0+255),w,b
 11577  000F32  0100               	movlb	0	; () banked
 11578  000F34  5D94               	subwf	LTC6804_rdcv@current_cell& (0+255),w,b
 11579  000F36  0100               	movlb	0	; () banked
 11580  000F38  5195               	movf	(LTC6804_rdcv@current_cell+1)& (0+255),w,b
 11581  000F3A  0A80               	xorlw	128
 11582  000F3C  0100               	movlb	0	; () banked
 11583  000F3E  6F66               	movwf	??_LTC6804_rdcv& (0+255),b
 11584  000F40  0100               	movlb	0	; () banked
 11585  000F42  5193               	movf	(LTC6804_rdcv@CELL_IN_REG+1)& (0+255),w,b
 11586  000F44  0A80               	xorlw	128
 11587  000F46  0100               	movlb	0	; () banked
 11588  000F48  5966               	subwfb	??_LTC6804_rdcv& (0+255),w,b
 11589  000F4A  B0D8               	btfsc	status,0,c
 11590  000F4C  D07D               	goto	l8355
 11591                           
 11592                           ; BSR set to: 0
 11593                           ;LT6804.c: 397: {
 11594                           ;LT6804.c: 398: parsed_cell = cell_data[data_counter] + (cell_data[data_counter+1]<<8);
 11595                           
 11596                           ; BSR set to: 0
 11597                           
 11598                           ; BSR set to: 0
 11599  000F4E  90D8               	bcf	status,0,c
 11600  000F50  0100               	movlb	0	; () banked
 11601  000F52  3596               	rlcf	LTC6804_rdcv@data_counter& (0+255),w,b
 11602  000F54  6ED9               	movwf	fsr2l,c
 11603  000F56  0100               	movlb	0	; () banked
 11604  000F58  3597               	rlcf	(LTC6804_rdcv@data_counter+1)& (0+255),w,b
 11605  000F5A  6EDA               	movwf	fsr2h,c
 11606  000F5C  0E6E               	movlw	low LTC6804_rdcv@cell_data
 11607  000F5E  26D9               	addwf	fsr2l,f,c
 11608  000F60  0E00               	movlw	high LTC6804_rdcv@cell_data
 11609  000F62  22DA               	addwfc	fsr2h,f,c
 11610  000F64  CFDE F066          	movff	postinc2,??_LTC6804_rdcv
 11611  000F68  CFDD F067          	movff	postdec2,??_LTC6804_rdcv+1
 11612  000F6C  C096  F068         	movff	LTC6804_rdcv@data_counter,??_LTC6804_rdcv+2
 11613  000F70  C097  F069         	movff	LTC6804_rdcv@data_counter+1,??_LTC6804_rdcv+3
 11614  000F74  90D8               	bcf	status,0,c
 11615  000F76  0100               	movlb	0	; () banked
 11616  000F78  3768               	rlcf	(??_LTC6804_rdcv+2)& (0+255),f,b
 11617  000F7A  3769               	rlcf	(??_LTC6804_rdcv+3)& (0+255),f,b
 11618  000F7C  0E02               	movlw	2
 11619  000F7E  0100               	movlb	0	; () banked
 11620  000F80  2768               	addwf	(??_LTC6804_rdcv+2)& (0+255),f,b
 11621  000F82  0E00               	movlw	0
 11622  000F84  2369               	addwfc	(??_LTC6804_rdcv+3)& (0+255),f,b
 11623  000F86  0E6E               	movlw	low LTC6804_rdcv@cell_data
 11624  000F88  0100               	movlb	0	; () banked
 11625  000F8A  2568               	addwf	(??_LTC6804_rdcv+2)& (0+255),w,b
 11626  000F8C  6ED9               	movwf	fsr2l,c
 11627  000F8E  0E00               	movlw	high LTC6804_rdcv@cell_data
 11628  000F90  0100               	movlb	0	; () banked
 11629  000F92  2169               	addwfc	(??_LTC6804_rdcv+3)& (0+255),w,b
 11630  000F94  6EDA               	movwf	fsr2h,c
 11631  000F96  CFDE F06A          	movff	postinc2,??_LTC6804_rdcv+4
 11632  000F9A  CFDD F06B          	movff	postdec2,??_LTC6804_rdcv+5
 11633  000F9E  C06A  F06B         	movff	??_LTC6804_rdcv+4,??_LTC6804_rdcv+5
 11634  000FA2  0100               	movlb	0	; () banked
 11635  000FA4  6B6A               	clrf	(??_LTC6804_rdcv+4)& (0+255),b
 11636  000FA6  0100               	movlb	0	; () banked
 11637  000FA8  5166               	movf	??_LTC6804_rdcv& (0+255),w,b
 11638  000FAA  0100               	movlb	0	; () banked
 11639  000FAC  256A               	addwf	(??_LTC6804_rdcv+4)& (0+255),w,b
 11640  000FAE  0100               	movlb	0	; () banked
 11641  000FB0  6F8A               	movwf	LTC6804_rdcv@parsed_cell& (0+255),b
 11642  000FB2  0100               	movlb	0	; () banked
 11643  000FB4  5167               	movf	(??_LTC6804_rdcv+1)& (0+255),w,b
 11644  000FB6  0100               	movlb	0	; () banked
 11645  000FB8  216B               	addwfc	(??_LTC6804_rdcv+5)& (0+255),w,b
 11646  000FBA  0100               	movlb	0	; () banked
 11647  000FBC  6F8B               	movwf	(LTC6804_rdcv@parsed_cell+1)& (0+255),b
 11648                           
 11649                           ; BSR set to: 0
 11650                           ;LT6804.c: 399: cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)] = 0x000
      +                          0FFFF & parsed_cell;
 11651  000FBE  C04D  F01D         	movff	_current_ic,___wmul@multiplier
 11652  000FC2  C04E  F01E         	movff	_current_ic+1,___wmul@multiplier+1
 11653  000FC6  0E00               	movlw	0
 11654  000FC8  6E20               	movwf	___wmul@multiplicand+1,c
 11655  000FCA  0E18               	movlw	24
 11656  000FCC  6E1F               	movwf	___wmul@multiplicand,c
 11657  000FCE  ECDB  F01E         	call	___wmul	;wreg free
 11658  000FD2  C064  F066         	movff	LTC6804_rdcv@cell_codes,??_LTC6804_rdcv
 11659  000FD6  C065  F067         	movff	LTC6804_rdcv@cell_codes+1,??_LTC6804_rdcv+1
 11660  000FDA  501D               	movf	?___wmul,w,c
 11661  000FDC  0100               	movlb	0	; () banked
 11662  000FDE  2766               	addwf	??_LTC6804_rdcv& (0+255),f,b
 11663  000FE0  501E               	movf	?___wmul+1,w,c
 11664  000FE2  0100               	movlb	0	; () banked
 11665  000FE4  2367               	addwfc	(??_LTC6804_rdcv+1)& (0+255),f,b
 11666  000FE6  0EFF               	movlw	255
 11667  000FE8  0100               	movlb	0	; () banked
 11668  000FEA  2560               	addwf	LTC6804_rdcv@reg& (0+255),w,b
 11669  000FEC  6E1D               	movwf	___wmul@multiplier,c
 11670  000FEE  0EFF               	movlw	255
 11671  000FF0  0100               	movlb	0	; () banked
 11672  000FF2  2161               	addwfc	(LTC6804_rdcv@reg+1)& (0+255),w,b
 11673  000FF4  6E1E               	movwf	___wmul@multiplier+1,c
 11674  000FF6  C092  F01F         	movff	LTC6804_rdcv@CELL_IN_REG,___wmul@multiplicand
 11675  000FFA  C093  F020         	movff	LTC6804_rdcv@CELL_IN_REG+1,___wmul@multiplicand+1
 11676  000FFE  ECDB  F01E         	call	___wmul	;wreg free
 11677  001002  0100               	movlb	0	; () banked
 11678  001004  5194               	movf	LTC6804_rdcv@current_cell& (0+255),w,b
 11679  001006  261D               	addwf	?___wmul,f,c
 11680  001008  0100               	movlb	0	; () banked
 11681  00100A  5195               	movf	(LTC6804_rdcv@current_cell+1)& (0+255),w,b
 11682  00100C  221E               	addwfc	?___wmul+1,f,c
 11683  00100E  90D8               	bcf	status,0,c
 11684  001010  361D               	rlcf	?___wmul,f,c
 11685  001012  361E               	rlcf	?___wmul+1,f,c
 11686  001014  501D               	movf	?___wmul,w,c
 11687  001016  0100               	movlb	0	; () banked
 11688  001018  2566               	addwf	??_LTC6804_rdcv& (0+255),w,b
 11689  00101A  6ED9               	movwf	fsr2l,c
 11690  00101C  501E               	movf	?___wmul+1,w,c
 11691  00101E  0100               	movlb	0	; () banked
 11692  001020  2167               	addwfc	(??_LTC6804_rdcv+1)& (0+255),w,b
 11693  001022  6EDA               	movwf	fsr2h,c
 11694  001024  C08A  FFDE         	movff	LTC6804_rdcv@parsed_cell,postinc2
 11695  001028  C08B  FFDD         	movff	LTC6804_rdcv@parsed_cell+1,postdec2
 11696                           
 11697                           ; BSR set to: 0
 11698                           ;LT6804.c: 400: data_counter= data_counter + 2;
 11699  00102C  0E02               	movlw	2
 11700  00102E  0100               	movlb	0	; () banked
 11701  001030  2596               	addwf	LTC6804_rdcv@data_counter& (0+255),w,b
 11702  001032  0100               	movlb	0	; () banked
 11703  001034  6F96               	movwf	LTC6804_rdcv@data_counter& (0+255),b
 11704  001036  0E00               	movlw	0
 11705  001038  0100               	movlb	0	; () banked
 11706  00103A  2197               	addwfc	(LTC6804_rdcv@data_counter+1)& (0+255),w,b
 11707  00103C  0100               	movlb	0	; () banked
 11708  00103E  6F97               	movwf	(LTC6804_rdcv@data_counter+1)& (0+255),b
 11709                           
 11710                           ; BSR set to: 0
 11711  001040  0100               	movlb	0	; () banked
 11712  001042  4B94               	infsnz	LTC6804_rdcv@current_cell& (0+255),f,b
 11713  001044  2B95               	incf	(LTC6804_rdcv@current_cell+1)& (0+255),f,b
 11714  001046  D773               	goto	l8341
 11715  001048                     l8355:
 11716                           
 11717                           ; BSR set to: 0
 11718                           ;LT6804.c: 401: }
 11719                           ;LT6804.c: 403: received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter +
      +                           1];
 11720  001048  C096  F066         	movff	LTC6804_rdcv@data_counter,??_LTC6804_rdcv
 11721  00104C  C097  F067         	movff	LTC6804_rdcv@data_counter+1,??_LTC6804_rdcv+1
 11722  001050  90D8               	bcf	status,0,c
 11723  001052  0100               	movlb	0	; () banked
 11724  001054  3766               	rlcf	??_LTC6804_rdcv& (0+255),f,b
 11725  001056  3767               	rlcf	(??_LTC6804_rdcv+1)& (0+255),f,b
 11726  001058  0E02               	movlw	2
 11727  00105A  0100               	movlb	0	; () banked
 11728  00105C  2766               	addwf	??_LTC6804_rdcv& (0+255),f,b
 11729  00105E  0E00               	movlw	0
 11730  001060  2367               	addwfc	(??_LTC6804_rdcv+1)& (0+255),f,b
 11731  001062  0E6E               	movlw	low LTC6804_rdcv@cell_data
 11732  001064  0100               	movlb	0	; () banked
 11733  001066  2566               	addwf	??_LTC6804_rdcv& (0+255),w,b
 11734  001068  6ED9               	movwf	fsr2l,c
 11735  00106A  0E00               	movlw	high LTC6804_rdcv@cell_data
 11736  00106C  0100               	movlb	0	; () banked
 11737  00106E  2167               	addwfc	(??_LTC6804_rdcv+1)& (0+255),w,b
 11738  001070  6EDA               	movwf	fsr2h,c
 11739  001072  CFDE F068          	movff	postinc2,??_LTC6804_rdcv+2
 11740  001076  CFDD F069          	movff	postdec2,??_LTC6804_rdcv+3
 11741  00107A  90D8               	bcf	status,0,c
 11742  00107C  0100               	movlb	0	; () banked
 11743  00107E  3596               	rlcf	LTC6804_rdcv@data_counter& (0+255),w,b
 11744  001080  6ED9               	movwf	fsr2l,c
 11745  001082  0100               	movlb	0	; () banked
 11746  001084  3597               	rlcf	(LTC6804_rdcv@data_counter+1)& (0+255),w,b
 11747  001086  6EDA               	movwf	fsr2h,c
 11748  001088  0E6E               	movlw	low LTC6804_rdcv@cell_data
 11749  00108A  26D9               	addwf	fsr2l,f,c
 11750  00108C  0E00               	movlw	high LTC6804_rdcv@cell_data
 11751  00108E  22DA               	addwfc	fsr2h,f,c
 11752  001090  CFDE F06A          	movff	postinc2,??_LTC6804_rdcv+4
 11753  001094  CFDD F06B          	movff	postdec2,??_LTC6804_rdcv+5
 11754  001098  C06A  F06B         	movff	??_LTC6804_rdcv+4,??_LTC6804_rdcv+5
 11755  00109C  0100               	movlb	0	; () banked
 11756  00109E  6B6A               	clrf	(??_LTC6804_rdcv+4)& (0+255),b
 11757  0010A0  0100               	movlb	0	; () banked
 11758  0010A2  5168               	movf	(??_LTC6804_rdcv+2)& (0+255),w,b
 11759  0010A4  0100               	movlb	0	; () banked
 11760  0010A6  256A               	addwf	(??_LTC6804_rdcv+4)& (0+255),w,b
 11761  0010A8  0100               	movlb	0	; () banked
 11762  0010AA  6F8C               	movwf	LTC6804_rdcv@received_pec& (0+255),b
 11763  0010AC  0100               	movlb	0	; () banked
 11764  0010AE  5169               	movf	(??_LTC6804_rdcv+3)& (0+255),w,b
 11765  0010B0  0100               	movlb	0	; () banked
 11766  0010B2  216B               	addwfc	(??_LTC6804_rdcv+5)& (0+255),w,b
 11767  0010B4  0100               	movlb	0	; () banked
 11768  0010B6  6F8D               	movwf	(LTC6804_rdcv@received_pec+1)& (0+255),b
 11769                           
 11770                           ; BSR set to: 0
 11771                           ;LT6804.c: 404: data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT * (
      +                          reg-1)]);
 11772  0010B8  C04D  F01D         	movff	_current_ic,___wmul@multiplier
 11773  0010BC  C04E  F01E         	movff	_current_ic+1,___wmul@multiplier+1
 11774  0010C0  C086  F01F         	movff	LTC6804_rdcv@NUM_RX_BYT,___wmul@multiplicand
 11775  0010C4  C087  F020         	movff	LTC6804_rdcv@NUM_RX_BYT+1,___wmul@multiplicand+1
 11776  0010C8  ECDB  F01E         	call	___wmul	;wreg free
 11777  0010CC  C01D  F082         	movff	?___wmul,_LTC6804_rdcv$2734
 11778  0010D0  C01E  F083         	movff	?___wmul+1,_LTC6804_rdcv$2734+1
 11779                           
 11780                           ;LT6804.c: 404: data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT * (
      +                          reg-1)]);
 11781  0010D4  C088  F023         	movff	LTC6804_rdcv@BYT_IN_REG,pec15_calc@len
 11782  0010D8  C089  F024         	movff	LTC6804_rdcv@BYT_IN_REG+1,pec15_calc@len+1
 11783  0010DC  0EFF               	movlw	255
 11784  0010DE  0100               	movlb	0	; () banked
 11785  0010E0  2560               	addwf	LTC6804_rdcv@reg& (0+255),w,b
 11786  0010E2  6E1D               	movwf	___wmul@multiplier,c
 11787  0010E4  0EFF               	movlw	255
 11788  0010E6  0100               	movlb	0	; () banked
 11789  0010E8  2161               	addwfc	(LTC6804_rdcv@reg+1)& (0+255),w,b
 11790  0010EA  6E1E               	movwf	___wmul@multiplier+1,c
 11791  0010EC  C082  F01F         	movff	_LTC6804_rdcv$2734,___wmul@multiplicand
 11792  0010F0  C083  F020         	movff	_LTC6804_rdcv$2734+1,___wmul@multiplicand+1
 11793  0010F4  ECDB  F01E         	call	___wmul	;wreg free
 11794  0010F8  90D8               	bcf	status,0,c
 11795  0010FA  361D               	rlcf	?___wmul,f,c
 11796  0010FC  361E               	rlcf	?___wmul+1,f,c
 11797  0010FE  0E6E               	movlw	low LTC6804_rdcv@cell_data
 11798  001100  241D               	addwf	?___wmul,w,c
 11799  001102  6E25               	movwf	pec15_calc@data,c
 11800  001104  0E00               	movlw	high LTC6804_rdcv@cell_data
 11801  001106  201E               	addwfc	?___wmul+1,w,c
 11802  001108  6E26               	movwf	pec15_calc@data+1,c
 11803  00110A  EC42  F019         	call	_pec15_calc	;wreg free
 11804  00110E  C023  F08E         	movff	?_pec15_calc,LTC6804_rdcv@data_pec
 11805  001112  C024  F08F         	movff	?_pec15_calc+1,LTC6804_rdcv@data_pec+1
 11806                           
 11807                           ;LT6804.c: 405: if(received_pec != data_pec)
 11808  001116  0100               	movlb	0	; () banked
 11809  001118  518E               	movf	LTC6804_rdcv@data_pec& (0+255),w,b
 11810  00111A  0100               	movlb	0	; () banked
 11811  00111C  198C               	xorwf	LTC6804_rdcv@received_pec& (0+255),w,b
 11812  00111E  E106               	bnz	u8710
 11813  001120  0100               	movlb	0	; () banked
 11814  001122  518F               	movf	(LTC6804_rdcv@data_pec+1)& (0+255),w,b
 11815  001124  0100               	movlb	0	; () banked
 11816  001126  198D               	xorwf	(LTC6804_rdcv@received_pec+1)& (0+255),w,b
 11817  001128  B4D8               	btfsc	status,2,c
 11818  00112A  D004               	goto	l870
 11819  00112C                     u8710:
 11820                           
 11821                           ; BSR set to: 0
 11822                           ;LT6804.c: 406: {
 11823                           ;LT6804.c: 407: pec_error--;
 11824  00112C  0100               	movlb	0	; () banked
 11825  00112E  0784               	decf	LTC6804_rdcv@pec_error& (0+255),f,b
 11826  001130  A0D8               	btfss	status,0,c
 11827  001132  0785               	decf	(LTC6804_rdcv@pec_error+1)& (0+255),f,b
 11828  001134                     l870:
 11829                           
 11830                           ; BSR set to: 0
 11831  001134  4A4D               	infsnz	_current_ic,f,c
 11832  001136  2A4E               	incf	_current_ic+1,f,c
 11833  001138                     l8365:
 11834  001138  0100               	movlb	0	; () banked
 11835  00113A  5162               	movf	LTC6804_rdcv@total_ic& (0+255),w,b
 11836  00113C  5C4D               	subwf	_current_ic,w,c
 11837  00113E  504E               	movf	_current_ic+1,w,c
 11838  001140  0A80               	xorlw	128
 11839  001142  0100               	movlb	0	; () banked
 11840  001144  6F66               	movwf	??_LTC6804_rdcv& (0+255),b
 11841  001146  0100               	movlb	0	; () banked
 11842  001148  5163               	movf	(LTC6804_rdcv@total_ic+1)& (0+255),w,b
 11843  00114A  0A80               	xorlw	128
 11844  00114C  0100               	movlb	0	; () banked
 11845  00114E  5966               	subwfb	??_LTC6804_rdcv& (0+255),w,b
 11846  001150  A0D8               	btfss	status,0,c
 11847  001152  D6E8               	goto	l8339
 11848  001154                     l865:
 11849                           
 11850                           ; BSR set to: 0
 11851                           ;LT6804.c: 408: }
 11852                           ;LT6804.c: 409: }
 11853                           ;LT6804.c: 410: }
 11854                           ;LT6804.c: 412: return(pec_error);
 11855  001154  C084  F060         	movff	LTC6804_rdcv@pec_error,?_LTC6804_rdcv
 11856  001158  C085  F061         	movff	LTC6804_rdcv@pec_error+1,?_LTC6804_rdcv+1
 11857                           
 11858                           ; BSR set to: 0
 11859  00115C  0012               	return		;funcret
 11860  00115E                     __end_of_LTC6804_rdcv:
 11861                           	opt stack 0
 11862                           tblptru	equ	0xFF8
 11863                           tblptrh	equ	0xFF7
 11864                           tblptrl	equ	0xFF6
 11865                           tablat	equ	0xFF5
 11866                           prodh	equ	0xFF4
 11867                           prodl	equ	0xFF3
 11868                           intcon	equ	0xFF2
 11869                           intcon2	equ	0xFF1
 11870                           postinc0	equ	0xFEE
 11871                           wreg	equ	0xFE8
 11872                           postinc1	equ	0xFE6
 11873                           postdec1	equ	0xFE5
 11874                           fsr1h	equ	0xFE2
 11875                           fsr1l	equ	0xFE1
 11876                           indf2	equ	0xFDF
 11877                           postinc2	equ	0xFDE
 11878                           postdec2	equ	0xFDD
 11879                           fsr2h	equ	0xFDA
 11880                           fsr2l	equ	0xFD9
 11881                           status	equ	0xFD8
 11882                           
 11883 ;; *************** function _LTC6804_rdcv_reg *****************
 11884 ;; Defined at:
 11885 ;;		line 451 in file "LT6804.c"
 11886 ;; Parameters:    Size  Location     Type
 11887 ;;  reg             2   47[COMRAM] int 
 11888 ;;  total_ic        2   49[COMRAM] int 
 11889 ;;  data            2   51[COMRAM] PTR int 
 11890 ;;		 -> LTC6804_rdcv@cell_data(20), 
 11891 ;; Auto vars:     Size  Location     Type
 11892 ;;  cmd             8   57[COMRAM] int [4]
 11893 ;;  temp_pec        2   55[COMRAM] int 
 11894 ;; Return value:  Size  Location     Type
 11895 ;;                  1    wreg      void 
 11896 ;; Registers used:
 11897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11898 ;; Tracked objects:
 11899 ;;		On entry : 0/0
 11900 ;;		On exit  : 0/0
 11901 ;;		Unchanged: 0/0
 11902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11903 ;;      Params:         6       0       0       0       0       0       0
 11904 ;;      Locals:        10       0       0       0       0       0       0
 11905 ;;      Temps:          2       0       0       0       0       0       0
 11906 ;;      Totals:        18       0       0       0       0       0       0
 11907 ;;Total ram usage:       18 bytes
 11908 ;; Hardware stack levels used:    1
 11909 ;; Hardware stack levels required when called:    5
 11910 ;; This function calls:
 11911 ;;		_pec15_calc
 11912 ;;		_spi_write_read
 11913 ;;		_wakeup_idle
 11914 ;; This function is called by:
 11915 ;;		_LTC6804_rdcv
 11916 ;; This function uses a non-reentrant model
 11917 ;;
 11918                           
 11919                           	psect	text48
 11920  002B96                     __ptext48:
 11921                           	opt stack 0
 11922  002B96                     _LTC6804_rdcv_reg:
 11923                           	opt stack 22
 11924                           
 11925                           ;LT6804.c: 456: int cmd[4];
 11926                           ;LT6804.c: 457: int temp_pec;
 11927                           ;LT6804.c: 460: if (reg == 1)
 11928                           
 11929                           ; BSR set to: 0
 11930                           ;incstack = 0
 11931  002B96  0430               	decf	LTC6804_rdcv_reg@reg,w,c
 11932  002B98  1031               	iorwf	LTC6804_rdcv_reg@reg+1,w,c
 11933  002B9A  A4D8               	btfss	status,2,c
 11934  002B9C  D004               	goto	l5025
 11935                           
 11936                           ;LT6804.c: 461: {
 11937                           ;LT6804.c: 462: cmd[1] = 0x04;
 11938  002B9E  0E00               	movlw	0
 11939  002BA0  6E3D               	movwf	LTC6804_rdcv_reg@cmd+3,c
 11940  002BA2  0E04               	movlw	4
 11941  002BA4  D01A               	goto	L20
 11942  002BA6                     l5025:
 11943                           
 11944                           ;LT6804.c: 465: else if(reg == 2)
 11945  002BA6  0E02               	movlw	2
 11946  002BA8  1830               	xorwf	LTC6804_rdcv_reg@reg,w,c
 11947  002BAA  1031               	iorwf	LTC6804_rdcv_reg@reg+1,w,c
 11948  002BAC  A4D8               	btfss	status,2,c
 11949  002BAE  D004               	goto	l5029
 11950                           
 11951                           ;LT6804.c: 466: {
 11952                           ;LT6804.c: 467: cmd[1] = 0x06;
 11953  002BB0  0E00               	movlw	0
 11954  002BB2  6E3D               	movwf	LTC6804_rdcv_reg@cmd+3,c
 11955  002BB4  0E06               	movlw	6
 11956  002BB6  D011               	goto	L20
 11957  002BB8                     l5029:
 11958                           
 11959                           ;LT6804.c: 470: else if(reg == 3)
 11960  002BB8  0E03               	movlw	3
 11961  002BBA  1830               	xorwf	LTC6804_rdcv_reg@reg,w,c
 11962  002BBC  1031               	iorwf	LTC6804_rdcv_reg@reg+1,w,c
 11963  002BBE  A4D8               	btfss	status,2,c
 11964  002BC0  D004               	goto	l5033
 11965                           
 11966                           ;LT6804.c: 471: {
 11967                           ;LT6804.c: 472: cmd[1] = 0x08;
 11968  002BC2  0E00               	movlw	0
 11969  002BC4  6E3D               	movwf	LTC6804_rdcv_reg@cmd+3,c
 11970  002BC6  0E08               	movlw	8
 11971  002BC8  D008               	goto	L20
 11972  002BCA                     l5033:
 11973                           
 11974                           ;LT6804.c: 475: else if(reg == 4)
 11975  002BCA  0E04               	movlw	4
 11976  002BCC  1830               	xorwf	LTC6804_rdcv_reg@reg,w,c
 11977  002BCE  1031               	iorwf	LTC6804_rdcv_reg@reg+1,w,c
 11978  002BD0  A4D8               	btfss	status,2,c
 11979  002BD2  D008               	goto	l5037
 11980                           
 11981                           ;LT6804.c: 476: {
 11982                           ;LT6804.c: 477: cmd[1] = 0x0A;
 11983  002BD4  0E00               	movlw	0
 11984  002BD6  6E3D               	movwf	LTC6804_rdcv_reg@cmd+3,c
 11985  002BD8  0E0A               	movlw	10
 11986  002BDA                     L20:
 11987  002BDA  6E3C               	movwf	LTC6804_rdcv_reg@cmd+2,c
 11988                           
 11989                           ;LT6804.c: 478: cmd[0] = 0x00;
 11990  002BDC  0E00               	movlw	0
 11991  002BDE  6E3B               	movwf	LTC6804_rdcv_reg@cmd+1,c
 11992  002BE0  0E00               	movlw	0
 11993  002BE2  6E3A               	movwf	LTC6804_rdcv_reg@cmd,c
 11994  002BE4                     l5037:
 11995                           
 11996                           ;LT6804.c: 479: }
 11997                           ;LT6804.c: 485: wakeup_idle ();
 11998  002BE4  EC58  F01F         	call	_wakeup_idle	;wreg free
 11999                           
 12000                           ;LT6804.c: 486: LATD3 = 1;
 12001  002BE8  868C               	bsf	3980,3,c	;volatile
 12002                           
 12003                           ;LT6804.c: 488: for(current_ic = 0; current_ic<total_ic; current_ic++)
 12004  002BEA  0E00               	movlw	0
 12005  002BEC  6E4E               	movwf	_current_ic+1,c
 12006  002BEE  0E00               	movlw	0
 12007  002BF0  6E4D               	movwf	_current_ic,c
 12008  002BF2  D056               	goto	l5059
 12009  002BF4                     l5043:
 12010                           
 12011                           ;LT6804.c: 489: {
 12012                           ;LT6804.c: 490: cmd[0] = 0x80 + (current_ic<<3);
 12013  002BF4  C04D  F036         	movff	_current_ic,??_LTC6804_rdcv_reg
 12014  002BF8  C04E  F037         	movff	_current_ic+1,??_LTC6804_rdcv_reg+1
 12015  002BFC  90D8               	bcf	status,0,c
 12016  002BFE  3636               	rlcf	??_LTC6804_rdcv_reg,f,c
 12017  002C00  3637               	rlcf	??_LTC6804_rdcv_reg+1,f,c
 12018  002C02  90D8               	bcf	status,0,c
 12019  002C04  3636               	rlcf	??_LTC6804_rdcv_reg,f,c
 12020  002C06  3637               	rlcf	??_LTC6804_rdcv_reg+1,f,c
 12021  002C08  90D8               	bcf	status,0,c
 12022  002C0A  3636               	rlcf	??_LTC6804_rdcv_reg,f,c
 12023  002C0C  3637               	rlcf	??_LTC6804_rdcv_reg+1,f,c
 12024  002C0E  0E80               	movlw	128
 12025  002C10  2436               	addwf	??_LTC6804_rdcv_reg,w,c
 12026  002C12  6E3A               	movwf	LTC6804_rdcv_reg@cmd,c
 12027  002C14  0E00               	movlw	0
 12028  002C16  2037               	addwfc	??_LTC6804_rdcv_reg+1,w,c
 12029  002C18  6E3B               	movwf	LTC6804_rdcv_reg@cmd+1,c
 12030                           
 12031                           ;LT6804.c: 491: temp_pec = pec15_calc(2, cmd);
 12032  002C1A  0E00               	movlw	0
 12033  002C1C  6E24               	movwf	pec15_calc@len+1,c
 12034  002C1E  0E02               	movlw	2
 12035  002C20  6E23               	movwf	pec15_calc@len,c
 12036  002C22  0E3A               	movlw	low LTC6804_rdcv_reg@cmd
 12037  002C24  6E25               	movwf	pec15_calc@data,c
 12038  002C26  0E00               	movlw	high LTC6804_rdcv_reg@cmd
 12039  002C28  6E26               	movwf	pec15_calc@data+1,c
 12040  002C2A  EC42  F019         	call	_pec15_calc	;wreg free
 12041  002C2E  C023  F038         	movff	?_pec15_calc,LTC6804_rdcv_reg@temp_pec
 12042  002C32  C024  F039         	movff	?_pec15_calc+1,LTC6804_rdcv_reg@temp_pec+1
 12043                           
 12044                           ;LT6804.c: 492: cmd[2] = (int)(temp_pec >> 8);
 12045  002C36  C039  F036         	movff	LTC6804_rdcv_reg@temp_pec+1,??_LTC6804_rdcv_reg
 12046  002C3A  6A37               	clrf	(??_LTC6804_rdcv_reg+1)& (0+255),c
 12047  002C3C  BE36               	btfsc	??_LTC6804_rdcv_reg& (0+255),7,c
 12048  002C3E  6837               	setf	(??_LTC6804_rdcv_reg+1)& (0+255),c
 12049  002C40  C036  F03E         	movff	??_LTC6804_rdcv_reg,LTC6804_rdcv_reg@cmd+4
 12050  002C44  C037  F03F         	movff	??_LTC6804_rdcv_reg+1,LTC6804_rdcv_reg@cmd+5
 12051                           
 12052                           ;LT6804.c: 493: cmd[3] = (int)(temp_pec);
 12053  002C48  C038  F040         	movff	LTC6804_rdcv_reg@temp_pec,LTC6804_rdcv_reg@cmd+6
 12054  002C4C  C039  F041         	movff	LTC6804_rdcv_reg@temp_pec+1,LTC6804_rdcv_reg@cmd+7
 12055                           
 12056                           ;LT6804.c: 494: LATD3 = 0;
 12057  002C50  968C               	bcf	3980,3,c	;volatile
 12058                           
 12059                           ;LT6804.c: 495: spi_write_read(cmd,4,&data[current_ic*8],8);
 12060  002C52  0E3A               	movlw	low LTC6804_rdcv_reg@cmd
 12061  002C54  6E11               	movwf	spi_write_read@tx_Data,c
 12062  002C56  0E00               	movlw	high LTC6804_rdcv_reg@cmd
 12063  002C58  6E12               	movwf	spi_write_read@tx_Data+1,c
 12064  002C5A  0E00               	movlw	0
 12065  002C5C  6E14               	movwf	spi_write_read@tx_len+1,c
 12066  002C5E  0E04               	movlw	4
 12067  002C60  6E13               	movwf	spi_write_read@tx_len,c
 12068  002C62  C04D  F036         	movff	_current_ic,??_LTC6804_rdcv_reg
 12069  002C66  C04E  F037         	movff	_current_ic+1,??_LTC6804_rdcv_reg+1
 12070  002C6A  90D8               	bcf	status,0,c
 12071  002C6C  3636               	rlcf	??_LTC6804_rdcv_reg,f,c
 12072  002C6E  3637               	rlcf	??_LTC6804_rdcv_reg+1,f,c
 12073  002C70  90D8               	bcf	status,0,c
 12074  002C72  3636               	rlcf	??_LTC6804_rdcv_reg,f,c
 12075  002C74  3637               	rlcf	??_LTC6804_rdcv_reg+1,f,c
 12076  002C76  90D8               	bcf	status,0,c
 12077  002C78  3636               	rlcf	??_LTC6804_rdcv_reg,f,c
 12078  002C7A  3637               	rlcf	??_LTC6804_rdcv_reg+1,f,c
 12079  002C7C  90D8               	bcf	status,0,c
 12080  002C7E  3636               	rlcf	??_LTC6804_rdcv_reg,f,c
 12081  002C80  3637               	rlcf	??_LTC6804_rdcv_reg+1,f,c
 12082  002C82  5036               	movf	??_LTC6804_rdcv_reg,w,c
 12083  002C84  2434               	addwf	LTC6804_rdcv_reg@data,w,c
 12084  002C86  6E15               	movwf	spi_write_read@rx_data,c
 12085  002C88  5037               	movf	??_LTC6804_rdcv_reg+1,w,c
 12086  002C8A  2035               	addwfc	LTC6804_rdcv_reg@data+1,w,c
 12087  002C8C  6E16               	movwf	spi_write_read@rx_data+1,c
 12088  002C8E  0E00               	movlw	0
 12089  002C90  6E18               	movwf	spi_write_read@rx_len+1,c
 12090  002C92  0E08               	movlw	8
 12091  002C94  6E17               	movwf	spi_write_read@rx_len,c
 12092  002C96  ECEE  F01A         	call	_spi_write_read	;wreg free
 12093                           
 12094                           ;LT6804.c: 496: LATD3 = 1;
 12095  002C9A  868C               	bsf	3980,3,c	;volatile
 12096  002C9C  4A4D               	infsnz	_current_ic,f,c
 12097  002C9E  2A4E               	incf	_current_ic+1,f,c
 12098  002CA0                     l5059:
 12099  002CA0  5032               	movf	LTC6804_rdcv_reg@total_ic,w,c
 12100  002CA2  5C4D               	subwf	_current_ic,w,c
 12101  002CA4  504E               	movf	_current_ic+1,w,c
 12102  002CA6  0A80               	xorlw	128
 12103  002CA8  6E36               	movwf	??_LTC6804_rdcv_reg& (0+255),c
 12104  002CAA  5033               	movf	LTC6804_rdcv_reg@total_ic+1,w,c
 12105  002CAC  0A80               	xorlw	128
 12106  002CAE  5836               	subwfb	??_LTC6804_rdcv_reg& (0+255),w,c
 12107  002CB0  B0D8               	btfsc	status,0,c
 12108  002CB2  0012               	return	
 12109  002CB4  D79F               	goto	l5043
 12110  002CB6                     __end_of_LTC6804_rdcv_reg:
 12111                           	opt stack 0
 12112                           tblptru	equ	0xFF8
 12113                           tblptrh	equ	0xFF7
 12114                           tblptrl	equ	0xFF6
 12115                           tablat	equ	0xFF5
 12116                           prodh	equ	0xFF4
 12117                           prodl	equ	0xFF3
 12118                           intcon	equ	0xFF2
 12119                           intcon2	equ	0xFF1
 12120                           postinc0	equ	0xFEE
 12121                           wreg	equ	0xFE8
 12122                           postinc1	equ	0xFE6
 12123                           postdec1	equ	0xFE5
 12124                           fsr1h	equ	0xFE2
 12125                           fsr1l	equ	0xFE1
 12126                           indf2	equ	0xFDF
 12127                           postinc2	equ	0xFDE
 12128                           postdec2	equ	0xFDD
 12129                           fsr2h	equ	0xFDA
 12130                           fsr2l	equ	0xFD9
 12131                           status	equ	0xFD8
 12132                           
 12133 ;; *************** function _wakeup_idle *****************
 12134 ;; Defined at:
 12135 ;;		line 1139 in file "LT6804.c"
 12136 ;; Parameters:    Size  Location     Type
 12137 ;;		None
 12138 ;; Auto vars:     Size  Location     Type
 12139 ;;		None
 12140 ;; Return value:  Size  Location     Type
 12141 ;;                  1    wreg      void 
 12142 ;; Registers used:
 12143 ;;		wreg, status,2, status,0, cstack
 12144 ;; Tracked objects:
 12145 ;;		On entry : 0/0
 12146 ;;		On exit  : 0/0
 12147 ;;		Unchanged: 0/0
 12148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12149 ;;      Params:         0       0       0       0       0       0       0
 12150 ;;      Locals:         0       0       0       0       0       0       0
 12151 ;;      Temps:          0       0       0       0       0       0       0
 12152 ;;      Totals:         0       0       0       0       0       0       0
 12153 ;;Total ram usage:        0 bytes
 12154 ;; Hardware stack levels used:    1
 12155 ;; Hardware stack levels required when called:    4
 12156 ;; This function calls:
 12157 ;;		_DelayMicro
 12158 ;; This function is called by:
 12159 ;;		_LTC6804_rdcv_reg
 12160 ;;		_LTC6804_wrcfg
 12161 ;;		_LTC6804_adax
 12162 ;;		_LTC6804_ADSTAT
 12163 ;;		_LTC6804_rdaux_reg
 12164 ;;		_LTC6804_rdStat_reg
 12165 ;;		_LTC6804_clrcell
 12166 ;;		_LTC6804_clraux
 12167 ;;		_LTC6804_rdcfg
 12168 ;; This function uses a non-reentrant model
 12169 ;;
 12170                           
 12171                           	psect	text49
 12172  003EB0                     __ptext49:
 12173                           	opt stack 0
 12174  003EB0                     _wakeup_idle:
 12175                           	opt stack 22
 12176                           
 12177                           ;LT6804.c: 1142: LATD3 = 0;
 12178                           
 12179                           ;incstack = 0
 12180  003EB0  968C               	bcf	3980,3,c	;volatile
 12181                           
 12182                           ;LT6804.c: 1144: DelayMicro(10);
 12183  003EB2  0E00               	movlw	0
 12184  003EB4  6E10               	movwf	DelayMicro@wait+1,c
 12185  003EB6  0E0A               	movlw	10
 12186  003EB8  6E0F               	movwf	DelayMicro@wait,c
 12187  003EBA  ECC7  F01E         	call	_DelayMicro	;wreg free
 12188                           
 12189                           ;LT6804.c: 1145: LATD3 = 1;
 12190  003EBE  868C               	bsf	3980,3,c	;volatile
 12191  003EC0  0012               	return		;funcret
 12192  003EC2                     __end_of_wakeup_idle:
 12193                           	opt stack 0
 12194                           tblptru	equ	0xFF8
 12195                           tblptrh	equ	0xFF7
 12196                           tblptrl	equ	0xFF6
 12197                           tablat	equ	0xFF5
 12198                           prodh	equ	0xFF4
 12199                           prodl	equ	0xFF3
 12200                           intcon	equ	0xFF2
 12201                           intcon2	equ	0xFF1
 12202                           postinc0	equ	0xFEE
 12203                           wreg	equ	0xFE8
 12204                           postinc1	equ	0xFE6
 12205                           postdec1	equ	0xFE5
 12206                           fsr1h	equ	0xFE2
 12207                           fsr1l	equ	0xFE1
 12208                           indf2	equ	0xFDF
 12209                           postinc2	equ	0xFDE
 12210                           postdec2	equ	0xFDD
 12211                           fsr2h	equ	0xFDA
 12212                           fsr2l	equ	0xFD9
 12213                           status	equ	0xFD8
 12214                           
 12215 ;; *************** function _DelayMicro *****************
 12216 ;; Defined at:
 12217 ;;		line 17 in file "Functions.c"
 12218 ;; Parameters:    Size  Location     Type
 12219 ;;  wait            2   14[COMRAM] int 
 12220 ;; Auto vars:     Size  Location     Type
 12221 ;;  x               2   17[COMRAM] int 
 12222 ;; Return value:  Size  Location     Type
 12223 ;;                  1    wreg      void 
 12224 ;; Registers used:
 12225 ;;		wreg, status,2, status,0
 12226 ;; Tracked objects:
 12227 ;;		On entry : 0/0
 12228 ;;		On exit  : 0/0
 12229 ;;		Unchanged: 0/0
 12230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12231 ;;      Params:         2       0       0       0       0       0       0
 12232 ;;      Locals:         2       0       0       0       0       0       0
 12233 ;;      Temps:          1       0       0       0       0       0       0
 12234 ;;      Totals:         5       0       0       0       0       0       0
 12235 ;;Total ram usage:        5 bytes
 12236 ;; Hardware stack levels used:    1
 12237 ;; Hardware stack levels required when called:    3
 12238 ;; This function calls:
 12239 ;;		Nothing
 12240 ;; This function is called by:
 12241 ;;		_wakeup_idle
 12242 ;;		_wakeup_sleep
 12243 ;; This function uses a non-reentrant model
 12244 ;;
 12245                           
 12246                           	psect	text50
 12247  003D8E                     __ptext50:
 12248                           	opt stack 0
 12249  003D8E                     _DelayMicro:
 12250                           	opt stack 22
 12251                           
 12252                           ;Functions.c: 19: int x;
 12253                           ;Functions.c: 20: for(x = 0;x<wait;x++)
 12254                           
 12255                           ;incstack = 0
 12256  003D8E  0E00               	movlw	0
 12257  003D90  6E13               	movwf	DelayMicro@x+1,c
 12258  003D92  0E00               	movlw	0
 12259  003D94  6E12               	movwf	DelayMicro@x,c
 12260  003D96  D004               	goto	l4615
 12261  003D98                     l320:
 12262                           
 12263                           ;Functions.c: 21: {
 12264                           ;Functions.c: 22: _delay((unsigned long)((1)*(16000000/4000000.0)));
 12265  003D98  D000               	nop2		;2 cycle nop
 12266  003D9A  D000               	nop2		;2 cycle nop
 12267  003D9C  4A12               	infsnz	DelayMicro@x,f,c
 12268  003D9E  2A13               	incf	DelayMicro@x+1,f,c
 12269  003DA0                     l4615:
 12270  003DA0  500F               	movf	DelayMicro@wait,w,c
 12271  003DA2  5C12               	subwf	DelayMicro@x,w,c
 12272  003DA4  5013               	movf	DelayMicro@x+1,w,c
 12273  003DA6  0A80               	xorlw	128
 12274  003DA8  6E11               	movwf	??_DelayMicro& (0+255),c
 12275  003DAA  5010               	movf	DelayMicro@wait+1,w,c
 12276  003DAC  0A80               	xorlw	128
 12277  003DAE  5811               	subwfb	??_DelayMicro& (0+255),w,c
 12278  003DB0  B0D8               	btfsc	status,0,c
 12279  003DB2  0012               	return	
 12280  003DB4  D7F1               	goto	l320
 12281  003DB6                     __end_of_DelayMicro:
 12282                           	opt stack 0
 12283                           tblptru	equ	0xFF8
 12284                           tblptrh	equ	0xFF7
 12285                           tblptrl	equ	0xFF6
 12286                           tablat	equ	0xFF5
 12287                           prodh	equ	0xFF4
 12288                           prodl	equ	0xFF3
 12289                           intcon	equ	0xFF2
 12290                           intcon2	equ	0xFF1
 12291                           postinc0	equ	0xFEE
 12292                           wreg	equ	0xFE8
 12293                           postinc1	equ	0xFE6
 12294                           postdec1	equ	0xFE5
 12295                           fsr1h	equ	0xFE2
 12296                           fsr1l	equ	0xFE1
 12297                           indf2	equ	0xFDF
 12298                           postinc2	equ	0xFDE
 12299                           postdec2	equ	0xFDD
 12300                           fsr2h	equ	0xFDA
 12301                           fsr2l	equ	0xFD9
 12302                           status	equ	0xFD8
 12303                           
 12304 ;; *************** function _spi_write_read *****************
 12305 ;; Defined at:
 12306 ;;		line 1218 in file "LT6804.c"
 12307 ;; Parameters:    Size  Location     Type
 12308 ;;  tx_Data         2   16[COMRAM] PTR int 
 12309 ;;		 -> LTC6804_rdcfg@cmd(8), LTC6804_clrcell@cmd(8), LTC6804_rdStat_reg@cmd(8), LTC6804_rdaux_reg@cmd(8), 
 12310 ;;		 -> LTC6804_rdcv_reg@cmd(8), 
 12311 ;;  tx_len          2   18[COMRAM] int 
 12312 ;;  rx_data         2   20[COMRAM] PTR int 
 12313 ;;		 -> RAM(1535), LTC6804_rdStat@data(150), LTC6804_rdcv@cell_data(20), NULL(0), 
 12314 ;;  rx_len          2   22[COMRAM] int 
 12315 ;; Auto vars:     Size  Location     Type
 12316 ;;  i               2   26[COMRAM] int 
 12317 ;; Return value:  Size  Location     Type
 12318 ;;                  1    wreg      void 
 12319 ;; Registers used:
 12320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12321 ;; Tracked objects:
 12322 ;;		On entry : 0/0
 12323 ;;		On exit  : 0/0
 12324 ;;		Unchanged: 0/0
 12325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12326 ;;      Params:         8       0       0       0       0       0       0
 12327 ;;      Locals:         2       0       0       0       0       0       0
 12328 ;;      Temps:          2       0       0       0       0       0       0
 12329 ;;      Totals:        12       0       0       0       0       0       0
 12330 ;;Total ram usage:       12 bytes
 12331 ;; Hardware stack levels used:    1
 12332 ;; Hardware stack levels required when called:    4
 12333 ;; This function calls:
 12334 ;;		_SPI2_Exchange8bit
 12335 ;; This function is called by:
 12336 ;;		_LTC6804_rdcv_reg
 12337 ;;		_LTC6804_rdaux_reg
 12338 ;;		_LTC6804_rdStat_reg
 12339 ;;		_LTC6804_clrcell
 12340 ;;		_LTC6804_rdcfg
 12341 ;; This function uses a non-reentrant model
 12342 ;;
 12343                           
 12344                           	psect	text51
 12345  0035DC                     __ptext51:
 12346                           	opt stack 0
 12347  0035DC                     _spi_write_read:
 12348                           	opt stack 22
 12349                           
 12350                           ;LT6804.c: 1225: for(i = 0; i < tx_len; i++)
 12351                           
 12352                           ;incstack = 0
 12353  0035DC  0E00               	movlw	0
 12354  0035DE  6E46               	movwf	_i+1,c
 12355  0035E0  0E00               	movlw	0
 12356  0035E2  6E45               	movwf	_i,c
 12357  0035E4  D00E               	goto	l4793
 12358  0035E6                     l4789:
 12359                           
 12360                           ;LT6804.c: 1226: {
 12361                           ;LT6804.c: 1227: SPI2_Exchange8bit(tx_Data[i]);
 12362  0035E6  90D8               	bcf	status,0,c
 12363  0035E8  3445               	rlcf	_i,w,c
 12364  0035EA  6ED9               	movwf	fsr2l,c
 12365  0035EC  3446               	rlcf	_i+1,w,c
 12366  0035EE  6EDA               	movwf	fsr2h,c
 12367  0035F0  5011               	movf	spi_write_read@tx_Data,w,c
 12368  0035F2  26D9               	addwf	fsr2l,f,c
 12369  0035F4  5012               	movf	spi_write_read@tx_Data+1,w,c
 12370  0035F6  22DA               	addwfc	fsr2h,f,c
 12371  0035F8  50DF               	movf	indf2,w,c
 12372  0035FA  EC33  F01F         	call	_SPI2_Exchange8bit
 12373  0035FE  4A45               	infsnz	_i,f,c
 12374  003600  2A46               	incf	_i+1,f,c
 12375  003602                     l4793:
 12376  003602  5013               	movf	spi_write_read@tx_len,w,c
 12377  003604  5C45               	subwf	_i,w,c
 12378  003606  5046               	movf	_i+1,w,c
 12379  003608  0A80               	xorlw	128
 12380  00360A  6E19               	movwf	??_spi_write_read& (0+255),c
 12381  00360C  5014               	movf	spi_write_read@tx_len+1,w,c
 12382  00360E  0A80               	xorlw	128
 12383  003610  5819               	subwfb	??_spi_write_read& (0+255),w,c
 12384  003612  A0D8               	btfss	status,0,c
 12385  003614  D7E8               	goto	l4789
 12386                           
 12387                           ;LT6804.c: 1228: }
 12388                           ;LT6804.c: 1230: for(int i = 0; i < rx_len; i++)
 12389  003616  0E00               	movlw	0
 12390  003618  6E1C               	movwf	spi_write_read@i+1,c
 12391  00361A  0E00               	movlw	0
 12392  00361C  6E1B               	movwf	spi_write_read@i,c
 12393  00361E  D014               	goto	l4801
 12394  003620                     l4797:
 12395                           
 12396                           ;LT6804.c: 1231: {
 12397                           ;LT6804.c: 1232: rx_data[i] = SPI2_Exchange8bit(0x00);
 12398  003620  0E00               	movlw	0
 12399  003622  EC33  F01F         	call	_SPI2_Exchange8bit
 12400  003626  6E19               	movwf	??_spi_write_read& (0+255),c
 12401  003628  6A1A               	clrf	(??_spi_write_read+1)& (0+255),c
 12402  00362A  90D8               	bcf	status,0,c
 12403  00362C  341B               	rlcf	spi_write_read@i,w,c
 12404  00362E  6ED9               	movwf	fsr2l,c
 12405  003630  341C               	rlcf	spi_write_read@i+1,w,c
 12406  003632  6EDA               	movwf	fsr2h,c
 12407  003634  5015               	movf	spi_write_read@rx_data,w,c
 12408  003636  26D9               	addwf	fsr2l,f,c
 12409  003638  5016               	movf	spi_write_read@rx_data+1,w,c
 12410  00363A  22DA               	addwfc	fsr2h,f,c
 12411  00363C  C019  FFDE         	movff	??_spi_write_read,postinc2
 12412  003640  C01A  FFDD         	movff	??_spi_write_read+1,postdec2
 12413  003644  4A1B               	infsnz	spi_write_read@i,f,c
 12414  003646  2A1C               	incf	spi_write_read@i+1,f,c
 12415  003648                     l4801:
 12416  003648  5017               	movf	spi_write_read@rx_len,w,c
 12417  00364A  5C1B               	subwf	spi_write_read@i,w,c
 12418  00364C  501C               	movf	spi_write_read@i+1,w,c
 12419  00364E  0A80               	xorlw	128
 12420  003650  6E19               	movwf	??_spi_write_read& (0+255),c
 12421  003652  5018               	movf	spi_write_read@rx_len+1,w,c
 12422  003654  0A80               	xorlw	128
 12423  003656  5819               	subwfb	??_spi_write_read& (0+255),w,c
 12424  003658  B0D8               	btfsc	status,0,c
 12425  00365A  0012               	return	
 12426  00365C  D7E1               	goto	l4797
 12427  00365E                     __end_of_spi_write_read:
 12428                           	opt stack 0
 12429                           tblptru	equ	0xFF8
 12430                           tblptrh	equ	0xFF7
 12431                           tblptrl	equ	0xFF6
 12432                           tablat	equ	0xFF5
 12433                           prodh	equ	0xFF4
 12434                           prodl	equ	0xFF3
 12435                           intcon	equ	0xFF2
 12436                           intcon2	equ	0xFF1
 12437                           postinc0	equ	0xFEE
 12438                           wreg	equ	0xFE8
 12439                           postinc1	equ	0xFE6
 12440                           postdec1	equ	0xFE5
 12441                           fsr1h	equ	0xFE2
 12442                           fsr1l	equ	0xFE1
 12443                           indf2	equ	0xFDF
 12444                           postinc2	equ	0xFDE
 12445                           postdec2	equ	0xFDD
 12446                           fsr2h	equ	0xFDA
 12447                           fsr2l	equ	0xFD9
 12448                           status	equ	0xFD8
 12449                           
 12450 ;; *************** function _LTC6804_adcv *****************
 12451 ;; Defined at:
 12452 ;;		line 177 in file "LT6804.c"
 12453 ;; Parameters:    Size  Location     Type
 12454 ;;		None
 12455 ;; Auto vars:     Size  Location     Type
 12456 ;;  cmd             8   49[COMRAM] int [4]
 12457 ;;  temp_pec        2   57[COMRAM] int 
 12458 ;; Return value:  Size  Location     Type
 12459 ;;                  1    wreg      void 
 12460 ;; Registers used:
 12461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12462 ;; Tracked objects:
 12463 ;;		On entry : 0/0
 12464 ;;		On exit  : 0/0
 12465 ;;		Unchanged: 0/0
 12466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12467 ;;      Params:         0       0       0       0       0       0       0
 12468 ;;      Locals:        10       0       0       0       0       0       0
 12469 ;;      Temps:          2       0       0       0       0       0       0
 12470 ;;      Totals:        12       0       0       0       0       0       0
 12471 ;;Total ram usage:       12 bytes
 12472 ;; Hardware stack levels used:    1
 12473 ;; Hardware stack levels required when called:    5
 12474 ;; This function calls:
 12475 ;;		_SPI2_Exchange8bit
 12476 ;;		_pec15_calc
 12477 ;;		_spi_write_array
 12478 ;; This function is called by:
 12479 ;;		_Read_Battery
 12480 ;; This function uses a non-reentrant model
 12481 ;;
 12482                           
 12483                           	psect	text52
 12484  0038A8                     __ptext52:
 12485                           	opt stack 0
 12486  0038A8                     _LTC6804_adcv:
 12487                           	opt stack 23
 12488                           
 12489                           ;LT6804.c: 180: int cmd[4];
 12490                           ;LT6804.c: 181: int temp_pec;
 12491                           ;LT6804.c: 184: cmd[0] = ADCV[0];
 12492                           
 12493                           ;incstack = 0
 12494  0038A8  C0E6  F032         	movff	_ADCV,LTC6804_adcv@cmd
 12495  0038AC  C0E7  F033         	movff	_ADCV+1,LTC6804_adcv@cmd+1
 12496                           
 12497                           ;LT6804.c: 185: cmd[1] = ADCV[1];
 12498  0038B0  C0E8  F034         	movff	_ADCV+2,LTC6804_adcv@cmd+2
 12499  0038B4  C0E9  F035         	movff	_ADCV+3,LTC6804_adcv@cmd+3
 12500                           
 12501                           ;LT6804.c: 188: temp_pec = pec15_calc(2, ADCV);
 12502  0038B8  0E00               	movlw	0
 12503  0038BA  6E24               	movwf	pec15_calc@len+1,c
 12504  0038BC  0E02               	movlw	2
 12505  0038BE  6E23               	movwf	pec15_calc@len,c
 12506  0038C0  0EE6               	movlw	low _ADCV
 12507  0038C2  6E25               	movwf	pec15_calc@data,c
 12508  0038C4  0E00               	movlw	high _ADCV
 12509  0038C6  6E26               	movwf	pec15_calc@data+1,c
 12510  0038C8  EC42  F019         	call	_pec15_calc	;wreg free
 12511  0038CC  C023  F03A         	movff	?_pec15_calc,LTC6804_adcv@temp_pec
 12512  0038D0  C024  F03B         	movff	?_pec15_calc+1,LTC6804_adcv@temp_pec+1
 12513                           
 12514                           ;LT6804.c: 189: cmd[2] = (int)(temp_pec >> 8);
 12515  0038D4  C03B  F030         	movff	LTC6804_adcv@temp_pec+1,??_LTC6804_adcv
 12516  0038D8  6A31               	clrf	(??_LTC6804_adcv+1)& (0+255),c
 12517  0038DA  BE30               	btfsc	??_LTC6804_adcv& (0+255),7,c
 12518  0038DC  6831               	setf	(??_LTC6804_adcv+1)& (0+255),c
 12519  0038DE  C030  F036         	movff	??_LTC6804_adcv,LTC6804_adcv@cmd+4
 12520  0038E2  C031  F037         	movff	??_LTC6804_adcv+1,LTC6804_adcv@cmd+5
 12521                           
 12522                           ;LT6804.c: 190: cmd[3] = (int)(temp_pec);
 12523  0038E6  C03A  F038         	movff	LTC6804_adcv@temp_pec,LTC6804_adcv@cmd+6
 12524  0038EA  C03B  F039         	movff	LTC6804_adcv@temp_pec+1,LTC6804_adcv@cmd+7
 12525                           
 12526                           ;LT6804.c: 193: LATD3 = 0;
 12527  0038EE  968C               	bcf	3980,3,c	;volatile
 12528                           
 12529                           ;LT6804.c: 194: SPI2_Exchange8bit(0);
 12530  0038F0  0E00               	movlw	0
 12531  0038F2  EC33  F01F         	call	_SPI2_Exchange8bit
 12532                           
 12533                           ;LT6804.c: 195: LATD3 = 1;
 12534  0038F6  868C               	bsf	3980,3,c	;volatile
 12535                           
 12536                           ;LT6804.c: 199: LATD3 = 0;
 12537  0038F8  968C               	bcf	3980,3,c	;volatile
 12538                           
 12539                           ;LT6804.c: 200: spi_write_array(4,cmd);
 12540  0038FA  0E00               	movlw	0
 12541  0038FC  6E12               	movwf	spi_write_array@len+1,c
 12542  0038FE  0E04               	movlw	4
 12543  003900  6E11               	movwf	spi_write_array@len,c
 12544  003902  0E32               	movlw	low LTC6804_adcv@cmd
 12545  003904  6E13               	movwf	spi_write_array@data,c
 12546  003906  0E00               	movlw	high LTC6804_adcv@cmd
 12547  003908  6E14               	movwf	spi_write_array@data+1,c
 12548  00390A  ECE1  F01D         	call	_spi_write_array	;wreg free
 12549                           
 12550                           ;LT6804.c: 201: LATD3 = 1;
 12551  00390E  868C               	bsf	3980,3,c	;volatile
 12552  003910  0012               	return		;funcret
 12553  003912                     __end_of_LTC6804_adcv:
 12554                           	opt stack 0
 12555                           tblptru	equ	0xFF8
 12556                           tblptrh	equ	0xFF7
 12557                           tblptrl	equ	0xFF6
 12558                           tablat	equ	0xFF5
 12559                           prodh	equ	0xFF4
 12560                           prodl	equ	0xFF3
 12561                           intcon	equ	0xFF2
 12562                           intcon2	equ	0xFF1
 12563                           postinc0	equ	0xFEE
 12564                           wreg	equ	0xFE8
 12565                           postinc1	equ	0xFE6
 12566                           postdec1	equ	0xFE5
 12567                           fsr1h	equ	0xFE2
 12568                           fsr1l	equ	0xFE1
 12569                           indf2	equ	0xFDF
 12570                           postinc2	equ	0xFDE
 12571                           postdec2	equ	0xFDD
 12572                           fsr2h	equ	0xFDA
 12573                           fsr2l	equ	0xFD9
 12574                           status	equ	0xFD8
 12575                           
 12576 ;; *************** function _spi_write_array *****************
 12577 ;; Defined at:
 12578 ;;		line 1199 in file "LT6804.c"
 12579 ;; Parameters:    Size  Location     Type
 12580 ;;  len             2   16[COMRAM] int 
 12581 ;;  data            2   18[COMRAM] PTR int 
 12582 ;;		 -> LTC6804_wrcfg@cmd(200), LTC6804_ADSTAT@cmd(8), LTC6804_adax@cmd(8), LTC6804_adcv@cmd(8), 
 12583 ;; Auto vars:     Size  Location     Type
 12584 ;;		None
 12585 ;; Return value:  Size  Location     Type
 12586 ;;                  1    wreg      void 
 12587 ;; Registers used:
 12588 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12589 ;; Tracked objects:
 12590 ;;		On entry : 0/0
 12591 ;;		On exit  : 0/0
 12592 ;;		Unchanged: 0/0
 12593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12594 ;;      Params:         4       0       0       0       0       0       0
 12595 ;;      Locals:         0       0       0       0       0       0       0
 12596 ;;      Temps:          1       0       0       0       0       0       0
 12597 ;;      Totals:         5       0       0       0       0       0       0
 12598 ;;Total ram usage:        5 bytes
 12599 ;; Hardware stack levels used:    1
 12600 ;; Hardware stack levels required when called:    4
 12601 ;; This function calls:
 12602 ;;		_SPI2_Exchange8bit
 12603 ;; This function is called by:
 12604 ;;		_LTC6804_adcv
 12605 ;;		_LTC6804_wrcfg
 12606 ;;		_LTC6804_adax
 12607 ;;		_LTC6804_ADSTAT
 12608 ;; This function uses a non-reentrant model
 12609 ;;
 12610                           
 12611                           	psect	text53
 12612  003BC2                     __ptext53:
 12613                           	opt stack 0
 12614  003BC2                     _spi_write_array:
 12615                           	opt stack 22
 12616                           
 12617                           ;LT6804.c: 1203: for(i = 0; i < len; i++)
 12618                           
 12619                           ;incstack = 0
 12620  003BC2  0E00               	movlw	0
 12621  003BC4  6E46               	movwf	_i+1,c
 12622  003BC6  0E00               	movlw	0
 12623  003BC8  6E45               	movwf	_i,c
 12624  003BCA  D00E               	goto	l4779
 12625  003BCC                     l4775:
 12626                           
 12627                           ;LT6804.c: 1204: {
 12628                           ;LT6804.c: 1205: SPI2_Exchange8bit((char)data[i]);
 12629  003BCC  90D8               	bcf	status,0,c
 12630  003BCE  3445               	rlcf	_i,w,c
 12631  003BD0  6ED9               	movwf	fsr2l,c
 12632  003BD2  3446               	rlcf	_i+1,w,c
 12633  003BD4  6EDA               	movwf	fsr2h,c
 12634  003BD6  5013               	movf	spi_write_array@data,w,c
 12635  003BD8  26D9               	addwf	fsr2l,f,c
 12636  003BDA  5014               	movf	spi_write_array@data+1,w,c
 12637  003BDC  22DA               	addwfc	fsr2h,f,c
 12638  003BDE  50DF               	movf	indf2,w,c
 12639  003BE0  EC33  F01F         	call	_SPI2_Exchange8bit
 12640  003BE4  4A45               	infsnz	_i,f,c
 12641  003BE6  2A46               	incf	_i+1,f,c
 12642  003BE8                     l4779:
 12643  003BE8  5011               	movf	spi_write_array@len,w,c
 12644  003BEA  5C45               	subwf	_i,w,c
 12645  003BEC  5046               	movf	_i+1,w,c
 12646  003BEE  0A80               	xorlw	128
 12647  003BF0  6E15               	movwf	??_spi_write_array& (0+255),c
 12648  003BF2  5012               	movf	spi_write_array@len+1,w,c
 12649  003BF4  0A80               	xorlw	128
 12650  003BF6  5815               	subwfb	??_spi_write_array& (0+255),w,c
 12651  003BF8  B0D8               	btfsc	status,0,c
 12652  003BFA  0012               	return	
 12653  003BFC  D7E7               	goto	l4775
 12654  003BFE                     __end_of_spi_write_array:
 12655                           	opt stack 0
 12656                           tblptru	equ	0xFF8
 12657                           tblptrh	equ	0xFF7
 12658                           tblptrl	equ	0xFF6
 12659                           tablat	equ	0xFF5
 12660                           prodh	equ	0xFF4
 12661                           prodl	equ	0xFF3
 12662                           intcon	equ	0xFF2
 12663                           intcon2	equ	0xFF1
 12664                           postinc0	equ	0xFEE
 12665                           wreg	equ	0xFE8
 12666                           postinc1	equ	0xFE6
 12667                           postdec1	equ	0xFE5
 12668                           fsr1h	equ	0xFE2
 12669                           fsr1l	equ	0xFE1
 12670                           indf2	equ	0xFDF
 12671                           postinc2	equ	0xFDE
 12672                           postdec2	equ	0xFDD
 12673                           fsr2h	equ	0xFDA
 12674                           fsr2l	equ	0xFD9
 12675                           status	equ	0xFD8
 12676                           
 12677 ;; *************** function _SPI2_Exchange8bit *****************
 12678 ;; Defined at:
 12679 ;;		line 78 in file "mcc_generated_files/spi2.c"
 12680 ;; Parameters:    Size  Location     Type
 12681 ;;  stuff           1    wreg     unsigned char 
 12682 ;; Auto vars:     Size  Location     Type
 12683 ;;  stuff           1   14[COMRAM] unsigned char 
 12684 ;;  data            1   15[COMRAM] unsigned char 
 12685 ;; Return value:  Size  Location     Type
 12686 ;;                  1    wreg      unsigned char 
 12687 ;; Registers used:
 12688 ;;		wreg, status,2
 12689 ;; Tracked objects:
 12690 ;;		On entry : 0/0
 12691 ;;		On exit  : 0/0
 12692 ;;		Unchanged: 0/0
 12693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12694 ;;      Params:         0       0       0       0       0       0       0
 12695 ;;      Locals:         2       0       0       0       0       0       0
 12696 ;;      Temps:          0       0       0       0       0       0       0
 12697 ;;      Totals:         2       0       0       0       0       0       0
 12698 ;;Total ram usage:        2 bytes
 12699 ;; Hardware stack levels used:    1
 12700 ;; Hardware stack levels required when called:    3
 12701 ;; This function calls:
 12702 ;;		Nothing
 12703 ;; This function is called by:
 12704 ;;		_LTC6804_adcv
 12705 ;;		_LTC6804_rdcv
 12706 ;;		_spi_write_array
 12707 ;;		_spi_write_read
 12708 ;;		_SPI2_Exchange8bitBuffer
 12709 ;; This function uses a non-reentrant model
 12710 ;;
 12711                           
 12712                           	psect	text54
 12713  003E66                     __ptext54:
 12714                           	opt stack 0
 12715  003E66                     _SPI2_Exchange8bit:
 12716                           	opt stack 22
 12717                           
 12718                           ;incstack = 0
 12719                           ;SPI2_Exchange8bit@stuff stored from wreg
 12720  003E66  6E0F               	movwf	SPI2_Exchange8bit@stuff,c
 12721                           
 12722                           ;spi2.c: 80: char data = 0;
 12723  003E68  0E00               	movlw	0
 12724  003E6A  6E10               	movwf	SPI2_Exchange8bit@data,c
 12725                           
 12726                           ;spi2.c: 82: data = SSP2BUF;
 12727  003E6C  CF6F F010          	movff	3951,SPI2_Exchange8bit@data	;volatile
 12728                           
 12729                           ;spi2.c: 83: PIR1bits.SSP1IF =0;
 12730  003E70  969E               	bcf	3998,3,c	;volatile
 12731                           
 12732                           ;spi2.c: 86: SSP2BUF = stuff;
 12733  003E72  C00F  FF6F         	movff	SPI2_Exchange8bit@stuff,3951	;volatile
 12734  003E76                     l20:
 12735  003E76  A06D               	btfss	3949,0,c	;volatile
 12736  003E78  D7FE               	goto	l20
 12737                           
 12738                           ;spi2.c: 89: data = SSP2BUF;
 12739  003E7A  CF6F F010          	movff	3951,SPI2_Exchange8bit@data	;volatile
 12740                           
 12741                           ;spi2.c: 90: return (data);
 12742  003E7E  5010               	movf	SPI2_Exchange8bit@data,w,c
 12743  003E80  0012               	return		;funcret
 12744  003E82                     __end_of_SPI2_Exchange8bit:
 12745                           	opt stack 0
 12746                           tblptru	equ	0xFF8
 12747                           tblptrh	equ	0xFF7
 12748                           tblptrl	equ	0xFF6
 12749                           tablat	equ	0xFF5
 12750                           prodh	equ	0xFF4
 12751                           prodl	equ	0xFF3
 12752                           intcon	equ	0xFF2
 12753                           intcon2	equ	0xFF1
 12754                           postinc0	equ	0xFEE
 12755                           wreg	equ	0xFE8
 12756                           postinc1	equ	0xFE6
 12757                           postdec1	equ	0xFE5
 12758                           fsr1h	equ	0xFE2
 12759                           fsr1l	equ	0xFE1
 12760                           indf2	equ	0xFDF
 12761                           postinc2	equ	0xFDE
 12762                           postdec2	equ	0xFDD
 12763                           fsr2h	equ	0xFDA
 12764                           fsr2l	equ	0xFD9
 12765                           status	equ	0xFD8
 12766                           
 12767 ;; *************** function _pec15_calc *****************
 12768 ;; Defined at:
 12769 ;;		line 1178 in file "LT6804.c"
 12770 ;; Parameters:    Size  Location     Type
 12771 ;;  len             2   34[COMRAM] int 
 12772 ;;  data            2   36[COMRAM] PTR int 
 12773 ;;		 -> RAM(1535), LTC6804_rdcfg@cmd(8), LTC6804_wrcfg@cmd(200), LTC6804_clraux@cmd(8), 
 12774 ;;		 -> LTC6804_clrcell@cmd(8), LTC6804_rdStat_reg@cmd(8), LTC6804_rdStat@data(150), LTC6804_rdaux_reg@cmd(8), 
 12775 ;;		 -> LTC6804_rdcv_reg@cmd(8), LTC6804_rdcv@cell_data(20), ADSTAT(4), ADAX(4), 
 12776 ;;		 -> ADCV(4), LTC6804_DATA_ConfigBank(12), 
 12777 ;; Auto vars:     Size  Location     Type
 12778 ;;  remainder       2   45[COMRAM] int 
 12779 ;;  addr            2   43[COMRAM] int 
 12780 ;; Return value:  Size  Location     Type
 12781 ;;                  2   34[COMRAM] int 
 12782 ;; Registers used:
 12783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 12784 ;; Tracked objects:
 12785 ;;		On entry : 0/0
 12786 ;;		On exit  : 0/0
 12787 ;;		Unchanged: 0/0
 12788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12789 ;;      Params:         4       0       0       0       0       0       0
 12790 ;;      Locals:         4       0       0       0       0       0       0
 12791 ;;      Temps:          5       0       0       0       0       0       0
 12792 ;;      Totals:        13       0       0       0       0       0       0
 12793 ;;Total ram usage:       13 bytes
 12794 ;; Hardware stack levels used:    1
 12795 ;; Hardware stack levels required when called:    3
 12796 ;; This function calls:
 12797 ;;		Nothing
 12798 ;; This function is called by:
 12799 ;;		_LTC6804_adcv
 12800 ;;		_LTC6804_rdcv
 12801 ;;		_LTC6804_rdcv_reg
 12802 ;;		_LTC6804_wrcfg
 12803 ;;		_LTC6804_adax
 12804 ;;		_LTC6804_ADSTAT
 12805 ;;		_LTC6804_rdaux
 12806 ;;		_LTC6804_rdaux_reg
 12807 ;;		_LTC6804_rdStat
 12808 ;;		_LTC6804_rdStat_reg
 12809 ;;		_LTC6804_clrcell
 12810 ;;		_LTC6804_clraux
 12811 ;;		_LTC6804_rdcfg
 12812 ;; This function uses a non-reentrant model
 12813 ;;
 12814                           
 12815                           	psect	text55
 12816  003284                     __ptext55:
 12817                           	opt stack 0
 12818  003284                     _pec15_calc:
 12819                           	opt stack 23
 12820                           
 12821                           ;LT6804.c: 1180: int remainder,addr;
 12822                           ;LT6804.c: 1182: remainder = 16;
 12823                           
 12824                           ;incstack = 0
 12825  003284  0E00               	movlw	0
 12826  003286  6E2F               	movwf	pec15_calc@remainder+1,c
 12827  003288  0E10               	movlw	16
 12828  00328A  6E2E               	movwf	pec15_calc@remainder,c
 12829                           
 12830                           ;LT6804.c: 1183: for(i = 0; i<len;i++)
 12831  00328C  0E00               	movlw	0
 12832  00328E  6E46               	movwf	_i+1,c
 12833  003290  0E00               	movlw	0
 12834  003292  6E45               	movwf	_i,c
 12835  003294  D039               	goto	l4767
 12836  003296                     l4761:
 12837                           
 12838                           ;LT6804.c: 1184: {
 12839                           ;LT6804.c: 1185: addr = ((remainder>>7)^data[i])&0xff;
 12840  003296  90D8               	bcf	status,0,c
 12841  003298  3445               	rlcf	_i,w,c
 12842  00329A  6ED9               	movwf	fsr2l,c
 12843  00329C  3446               	rlcf	_i+1,w,c
 12844  00329E  6EDA               	movwf	fsr2h,c
 12845  0032A0  5025               	movf	pec15_calc@data,w,c
 12846  0032A2  26D9               	addwf	fsr2l,f,c
 12847  0032A4  5026               	movf	pec15_calc@data+1,w,c
 12848  0032A6  22DA               	addwfc	fsr2h,f,c
 12849  0032A8  CFDE F027          	movff	postinc2,??_pec15_calc
 12850  0032AC  CFDD F028          	movff	postdec2,??_pec15_calc+1
 12851  0032B0  C02E  F029         	movff	pec15_calc@remainder,??_pec15_calc+2
 12852  0032B4  C02F  F02A         	movff	pec15_calc@remainder+1,??_pec15_calc+3
 12853  0032B8  0E07               	movlw	7
 12854  0032BA  6E2B               	movwf	(??_pec15_calc+4)& (0+255),c
 12855  0032BC                     u3865:
 12856  0032BC  342A               	rlcf	??_pec15_calc+3,w,c
 12857  0032BE  322A               	rrcf	??_pec15_calc+3,f,c
 12858  0032C0  3229               	rrcf	??_pec15_calc+2,f,c
 12859  0032C2  2E2B               	decfsz	(??_pec15_calc+4)& (0+255),f,c
 12860  0032C4  D7FB               	goto	u3865
 12861  0032C6  5027               	movf	??_pec15_calc,w,c
 12862  0032C8  1A29               	xorwf	??_pec15_calc+2,f,c
 12863  0032CA  5028               	movf	??_pec15_calc+1,w,c
 12864  0032CC  1A2A               	xorwf	??_pec15_calc+3,f,c
 12865  0032CE  5029               	movf	??_pec15_calc+2,w,c
 12866  0032D0  6E2C               	movwf	pec15_calc@addr,c
 12867  0032D2  6A2D               	clrf	pec15_calc@addr+1,c
 12868                           
 12869                           ;LT6804.c: 1186: remainder = (remainder<<8)^crc15Table[addr];
 12870  0032D4  90D8               	bcf	status,0,c
 12871  0032D6  342C               	rlcf	pec15_calc@addr,w,c
 12872  0032D8  6EF6               	movwf	tblptrl,c
 12873  0032DA  342D               	rlcf	pec15_calc@addr+1,w,c
 12874  0032DC  6EF7               	movwf	tblptrh,c
 12875  0032DE  0EF3               	movlw	low LT6804@crc15Table
 12876  0032E0  26F6               	addwf	tblptrl,f,c
 12877  0032E2  0E7A               	movlw	high LT6804@crc15Table
 12878  0032E4  22F7               	addwfc	tblptrh,f,c
 12879  0032E6                     	if	0	;There are less than 3 active tblptr bytes
 12880  0032E6                     	endif
 12881  0032E6  0009               	tblrd		*+
 12882  0032E8  CFF5 F027          	movff	tablat,??_pec15_calc
 12883  0032EC  0009               	tblrd		*+
 12884  0032EE  CFF5 F028          	movff	tablat,??_pec15_calc+1
 12885  0032F2  502E               	movf	pec15_calc@remainder,w,c
 12886  0032F4  6E2A               	movwf	(??_pec15_calc+3)& (0+255),c
 12887  0032F6  6A29               	clrf	(??_pec15_calc+2)& (0+255),c
 12888  0032F8  5027               	movf	??_pec15_calc,w,c
 12889  0032FA  1829               	xorwf	??_pec15_calc+2,w,c
 12890  0032FC  6E2E               	movwf	pec15_calc@remainder,c
 12891  0032FE  5028               	movf	??_pec15_calc+1,w,c
 12892  003300  182A               	xorwf	??_pec15_calc+3,w,c
 12893  003302  6E2F               	movwf	pec15_calc@remainder+1,c
 12894  003304  4A45               	infsnz	_i,f,c
 12895  003306  2A46               	incf	_i+1,f,c
 12896  003308                     l4767:
 12897  003308  5023               	movf	pec15_calc@len,w,c
 12898  00330A  5C45               	subwf	_i,w,c
 12899  00330C  5046               	movf	_i+1,w,c
 12900  00330E  0A80               	xorlw	128
 12901  003310  6E27               	movwf	??_pec15_calc& (0+255),c
 12902  003312  5024               	movf	pec15_calc@len+1,w,c
 12903  003314  0A80               	xorlw	128
 12904  003316  5827               	subwfb	??_pec15_calc& (0+255),w,c
 12905  003318  A0D8               	btfss	status,0,c
 12906  00331A  D7BD               	goto	l4761
 12907                           
 12908                           ;LT6804.c: 1187: }
 12909                           ;LT6804.c: 1188: return(remainder*2);
 12910  00331C  90D8               	bcf	status,0,c
 12911  00331E  342E               	rlcf	pec15_calc@remainder,w,c
 12912  003320  6E23               	movwf	?_pec15_calc,c
 12913  003322  342F               	rlcf	pec15_calc@remainder+1,w,c
 12914  003324  6E24               	movwf	?_pec15_calc+1,c
 12915  003326  0012               	return	
 12916  003328                     __end_of_pec15_calc:
 12917                           	opt stack 0
 12918                           tblptru	equ	0xFF8
 12919                           tblptrh	equ	0xFF7
 12920                           tblptrl	equ	0xFF6
 12921                           tablat	equ	0xFF5
 12922                           prodh	equ	0xFF4
 12923                           prodl	equ	0xFF3
 12924                           intcon	equ	0xFF2
 12925                           intcon2	equ	0xFF1
 12926                           postinc0	equ	0xFEE
 12927                           wreg	equ	0xFE8
 12928                           postinc1	equ	0xFE6
 12929                           postdec1	equ	0xFE5
 12930                           fsr1h	equ	0xFE2
 12931                           fsr1l	equ	0xFE1
 12932                           indf2	equ	0xFDF
 12933                           postinc2	equ	0xFDE
 12934                           postdec2	equ	0xFDD
 12935                           fsr2h	equ	0xFDA
 12936                           fsr2l	equ	0xFD9
 12937                           status	equ	0xFD8
 12938                           
 12939 ;; *************** function _Delay *****************
 12940 ;; Defined at:
 12941 ;;		line 9 in file "Functions.c"
 12942 ;; Parameters:    Size  Location     Type
 12943 ;;  wait            2   14[COMRAM] int 
 12944 ;; Auto vars:     Size  Location     Type
 12945 ;;  x               2   17[COMRAM] int 
 12946 ;; Return value:  Size  Location     Type
 12947 ;;                  1    wreg      void 
 12948 ;; Registers used:
 12949 ;;		wreg, status,2, status,0
 12950 ;; Tracked objects:
 12951 ;;		On entry : 0/0
 12952 ;;		On exit  : 0/0
 12953 ;;		Unchanged: 0/0
 12954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12955 ;;      Params:         2       0       0       0       0       0       0
 12956 ;;      Locals:         2       0       0       0       0       0       0
 12957 ;;      Temps:          1       0       0       0       0       0       0
 12958 ;;      Totals:         5       0       0       0       0       0       0
 12959 ;;Total ram usage:        5 bytes
 12960 ;; Hardware stack levels used:    1
 12961 ;; Hardware stack levels required when called:    3
 12962 ;; This function calls:
 12963 ;;		Nothing
 12964 ;; This function is called by:
 12965 ;;		_main
 12966 ;;		_Read_Battery
 12967 ;;		_addressFault
 12968 ;; This function uses a non-reentrant model
 12969 ;;
 12970                           
 12971                           	psect	text56
 12972  003C70                     __ptext56:
 12973                           	opt stack 0
 12974  003C70                     _Delay:
 12975                           	opt stack 25
 12976                           
 12977                           ;Functions.c: 11: int x;
 12978                           ;Functions.c: 12: for(x = 0;x<wait;x++)
 12979                           
 12980                           ;incstack = 0
 12981  003C70  0E00               	movlw	0
 12982  003C72  6E13               	movwf	Delay@x+1,c
 12983  003C74  0E00               	movlw	0
 12984  003C76  6E12               	movwf	Delay@x,c
 12985  003C78  D00A               	goto	l313
 12986  003C7A                     l5421:
 12987                           
 12988                           ;Functions.c: 13: {
 12989                           ;Functions.c: 14: _delay((unsigned long)((1)*(16000000/4000.0)));
 12990  003C7A  0E06               	movlw	6
 12991  003C7C  6E11               	movwf	??_Delay& (0+255),c
 12992  003C7E  0E30               	movlw	48
 12993  003C80                     u9917:
 12994  003C80  2EE8               	decfsz	wreg,f,c
 12995  003C82  D7FE               	bra	u9917
 12996  003C84  2E11               	decfsz	??_Delay& (0+255),f,c
 12997  003C86  D7FC               	bra	u9917
 12998  003C88  D000               	nop2	
 12999  003C8A  4A12               	infsnz	Delay@x,f,c
 13000  003C8C  2A13               	incf	Delay@x+1,f,c
 13001  003C8E                     l313:
 13002  003C8E  500F               	movf	Delay@wait,w,c
 13003  003C90  5C12               	subwf	Delay@x,w,c
 13004  003C92  5013               	movf	Delay@x+1,w,c
 13005  003C94  0A80               	xorlw	128
 13006  003C96  6E11               	movwf	??_Delay& (0+255),c
 13007  003C98  5010               	movf	Delay@wait+1,w,c
 13008  003C9A  0A80               	xorlw	128
 13009  003C9C  5811               	subwfb	??_Delay& (0+255),w,c
 13010  003C9E  B0D8               	btfsc	status,0,c
 13011  003CA0  0012               	return	
 13012  003CA2  D7EB               	goto	l5421
 13013  003CA4                     __end_of_Delay:
 13014                           	opt stack 0
 13015                           tblptru	equ	0xFF8
 13016                           tblptrh	equ	0xFF7
 13017                           tblptrl	equ	0xFF6
 13018                           tablat	equ	0xFF5
 13019                           prodh	equ	0xFF4
 13020                           prodl	equ	0xFF3
 13021                           intcon	equ	0xFF2
 13022                           intcon2	equ	0xFF1
 13023                           postinc0	equ	0xFEE
 13024                           wreg	equ	0xFE8
 13025                           postinc1	equ	0xFE6
 13026                           postdec1	equ	0xFE5
 13027                           fsr1h	equ	0xFE2
 13028                           fsr1l	equ	0xFE1
 13029                           indf2	equ	0xFDF
 13030                           postinc2	equ	0xFDE
 13031                           postdec2	equ	0xFDD
 13032                           fsr2h	equ	0xFDA
 13033                           fsr2l	equ	0xFD9
 13034                           status	equ	0xFD8
 13035                           
 13036 ;; *************** function _ReadCurrent *****************
 13037 ;; Defined at:
 13038 ;;		line 735 in file "BatteryManagment.c"
 13039 ;; Parameters:    Size  Location     Type
 13040 ;;		None
 13041 ;; Auto vars:     Size  Location     Type
 13042 ;;  Return          3   49[BANK0 ] float 
 13043 ;;  i               2   52[BANK0 ] int 
 13044 ;; Return value:  Size  Location     Type
 13045 ;;                  3   46[BANK0 ] float 
 13046 ;; Registers used:
 13047 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13048 ;; Tracked objects:
 13049 ;;		On entry : 0/0
 13050 ;;		On exit  : 0/0
 13051 ;;		Unchanged: 0/0
 13052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13053 ;;      Params:         0       3       0       0       0       0       0
 13054 ;;      Locals:         0       5       0       0       0       0       0
 13055 ;;      Temps:          0       0       0       0       0       0       0
 13056 ;;      Totals:         0       8       0       0       0       0       0
 13057 ;;Total ram usage:        8 bytes
 13058 ;; Hardware stack levels used:    1
 13059 ;; Hardware stack levels required when called:    6
 13060 ;; This function calls:
 13061 ;;		_ADC_GetConversion
 13062 ;;		_ReadVoltToCurrent
 13063 ;;		___lwtoft
 13064 ;;		___wmul
 13065 ;; This function is called by:
 13066 ;;		_Run_Mode
 13067 ;; This function uses a non-reentrant model
 13068 ;;
 13069                           
 13070                           	psect	text57
 13071  003044                     __ptext57:
 13072                           	opt stack 0
 13073  003044                     _ReadCurrent:
 13074                           	opt stack 23
 13075                           
 13076                           ;BatteryManagment.c: 736: float Return = 0;
 13077                           
 13078                           ;incstack = 0
 13079  003044  0E00               	movlw	0
 13080  003046  0100               	movlb	0	; () banked
 13081  003048  6F91               	movwf	ReadCurrent@Return& (0+255),b
 13082  00304A  0E00               	movlw	0
 13083  00304C  0100               	movlb	0	; () banked
 13084  00304E  6F92               	movwf	(ReadCurrent@Return+1)& (0+255),b
 13085  003050  0E00               	movlw	0
 13086  003052  0100               	movlb	0	; () banked
 13087  003054  6F93               	movwf	(ReadCurrent@Return+2)& (0+255),b
 13088                           
 13089                           ;BatteryManagment.c: 737: int i;
 13090                           ;BatteryManagment.c: 739: for(i=6;i<1;i--){
 13091  003056  0E00               	movlw	0
 13092  003058  0100               	movlb	0	; () banked
 13093  00305A  6F95               	movwf	(ReadCurrent@i+1)& (0+255),b
 13094  00305C  0E06               	movlw	6
 13095  00305E  6F94               	movwf	ReadCurrent@i& (0+255),b
 13096  003060                     l8511:
 13097                           
 13098                           ; BSR set to: 0
 13099  003060  0100               	movlb	0	; () banked
 13100  003062  BF95               	btfsc	(ReadCurrent@i+1)& (0+255),7,b
 13101  003064  D007               	goto	l8515
 13102  003066  0100               	movlb	0	; () banked
 13103  003068  5195               	movf	(ReadCurrent@i+1)& (0+255),w,b
 13104  00306A  E133               	bnz	l8521
 13105  00306C  0100               	movlb	0	; () banked
 13106  00306E  0594               	decf	ReadCurrent@i& (0+255),w,b
 13107  003070  B0D8               	btfsc	status,0,c
 13108  003072  D02F               	goto	l8521
 13109  003074                     l8515:
 13110                           
 13111                           ; BSR set to: 0
 13112                           ;BatteryManagment.c: 740: CVolt[i] = CVolt[i-1];
 13113  003074  0EFF               	movlw	255
 13114  003076  0100               	movlb	0	; () banked
 13115  003078  2594               	addwf	ReadCurrent@i& (0+255),w,b
 13116  00307A  6E1D               	movwf	___wmul@multiplier,c
 13117  00307C  0EFF               	movlw	255
 13118  00307E  0100               	movlb	0	; () banked
 13119  003080  2195               	addwfc	(ReadCurrent@i+1)& (0+255),w,b
 13120  003082  6E1E               	movwf	___wmul@multiplier+1,c
 13121  003084  0E00               	movlw	0
 13122  003086  6E20               	movwf	___wmul@multiplicand+1,c
 13123  003088  0E03               	movlw	3
 13124  00308A  6E1F               	movwf	___wmul@multiplicand,c
 13125  00308C  ECDB  F01E         	call	___wmul	;wreg free
 13126  003090  0E48               	movlw	low _CVolt
 13127  003092  241D               	addwf	?___wmul,w,c
 13128  003094  6ED9               	movwf	fsr2l,c
 13129  003096  0E02               	movlw	high _CVolt
 13130  003098  201E               	addwfc	?___wmul+1,w,c
 13131  00309A  6EDA               	movwf	fsr2h,c
 13132  00309C  C094  F01D         	movff	ReadCurrent@i,___wmul@multiplier
 13133  0030A0  C095  F01E         	movff	ReadCurrent@i+1,___wmul@multiplier+1
 13134  0030A4  0E00               	movlw	0
 13135  0030A6  6E20               	movwf	___wmul@multiplicand+1,c
 13136  0030A8  0E03               	movlw	3
 13137  0030AA  6E1F               	movwf	___wmul@multiplicand,c
 13138  0030AC  ECDB  F01E         	call	___wmul	;wreg free
 13139  0030B0  0E48               	movlw	low _CVolt
 13140  0030B2  241D               	addwf	?___wmul,w,c
 13141  0030B4  6EE1               	movwf	fsr1l,c
 13142  0030B6  0E02               	movlw	high _CVolt
 13143  0030B8  201E               	addwfc	?___wmul+1,w,c
 13144  0030BA  6EE2               	movwf	fsr1h,c
 13145  0030BC  CFDE FFE6          	movff	postinc2,postinc1
 13146  0030C0  CFDE FFE6          	movff	postinc2,postinc1
 13147  0030C4  CFDE FFE6          	movff	postinc2,postinc1
 13148  0030C8  0100               	movlb	0	; () banked
 13149  0030CA  0794               	decf	ReadCurrent@i& (0+255),f,b
 13150  0030CC  A0D8               	btfss	status,0,c
 13151  0030CE  0795               	decf	(ReadCurrent@i+1)& (0+255),f,b
 13152  0030D0  D7C7               	goto	l8511
 13153  0030D2                     l8521:
 13154                           
 13155                           ; BSR set to: 0
 13156                           ;BatteryManagment.c: 741: }
 13157                           ;BatteryManagment.c: 742: CVolt[0] = ADC_GetConversion(CURRENT);
 13158  0030D2  0E0B               	movlw	11
 13159  0030D4  EC6B  F01E         	call	_ADC_GetConversion
 13160  0030D8  C00F  F017         	movff	?_ADC_GetConversion,___lwtoft@c
 13161  0030DC  C010  F018         	movff	?_ADC_GetConversion+1,___lwtoft@c+1
 13162  0030E0  EC12  F01F         	call	___lwtoft	;wreg free
 13163  0030E4  C017  F248         	movff	?___lwtoft,_CVolt
 13164  0030E8  C018  F249         	movff	?___lwtoft+1,_CVolt+1
 13165  0030EC  C019  F24A         	movff	?___lwtoft+2,_CVolt+2
 13166                           
 13167                           ;BatteryManagment.c: 743: Return = ReadVoltToCurrent();
 13168  0030F0  EC34  F011         	call	_ReadVoltToCurrent	;wreg free
 13169  0030F4  C085  F091         	movff	?_ReadVoltToCurrent,ReadCurrent@Return
 13170  0030F8  C086  F092         	movff	?_ReadVoltToCurrent+1,ReadCurrent@Return+1
 13171  0030FC  C087  F093         	movff	?_ReadVoltToCurrent+2,ReadCurrent@Return+2
 13172                           
 13173                           ;BatteryManagment.c: 744: return Return;
 13174  003100  C091  F08E         	movff	ReadCurrent@Return,?_ReadCurrent
 13175  003104  C092  F08F         	movff	ReadCurrent@Return+1,?_ReadCurrent+1
 13176  003108  C093  F090         	movff	ReadCurrent@Return+2,?_ReadCurrent+2
 13177  00310C  0012               	return	
 13178  00310E                     __end_of_ReadCurrent:
 13179                           	opt stack 0
 13180                           tblptru	equ	0xFF8
 13181                           tblptrh	equ	0xFF7
 13182                           tblptrl	equ	0xFF6
 13183                           tablat	equ	0xFF5
 13184                           prodh	equ	0xFF4
 13185                           prodl	equ	0xFF3
 13186                           intcon	equ	0xFF2
 13187                           intcon2	equ	0xFF1
 13188                           postinc0	equ	0xFEE
 13189                           wreg	equ	0xFE8
 13190                           postinc1	equ	0xFE6
 13191                           postdec1	equ	0xFE5
 13192                           fsr1h	equ	0xFE2
 13193                           fsr1l	equ	0xFE1
 13194                           indf2	equ	0xFDF
 13195                           postinc2	equ	0xFDE
 13196                           postdec2	equ	0xFDD
 13197                           fsr2h	equ	0xFDA
 13198                           fsr2l	equ	0xFD9
 13199                           status	equ	0xFD8
 13200                           
 13201 ;; *************** function ___lwtoft *****************
 13202 ;; Defined at:
 13203 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwtoft.c"
 13204 ;; Parameters:    Size  Location     Type
 13205 ;;  c               2   22[COMRAM] unsigned int 
 13206 ;; Auto vars:     Size  Location     Type
 13207 ;;		None
 13208 ;; Return value:  Size  Location     Type
 13209 ;;                  3   22[COMRAM] float 
 13210 ;; Registers used:
 13211 ;;		wreg, status,2, status,0, cstack
 13212 ;; Tracked objects:
 13213 ;;		On entry : 0/0
 13214 ;;		On exit  : 0/0
 13215 ;;		Unchanged: 0/0
 13216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13217 ;;      Params:         3       0       0       0       0       0       0
 13218 ;;      Locals:         0       0       0       0       0       0       0
 13219 ;;      Temps:          0       0       0       0       0       0       0
 13220 ;;      Totals:         3       0       0       0       0       0       0
 13221 ;;Total ram usage:        3 bytes
 13222 ;; Hardware stack levels used:    1
 13223 ;; Hardware stack levels required when called:    4
 13224 ;; This function calls:
 13225 ;;		___ftpack
 13226 ;; This function is called by:
 13227 ;;		_ReadCurrent
 13228 ;;		_ReadVolt
 13229 ;; This function uses a non-reentrant model
 13230 ;;
 13231                           
 13232                           	psect	text58
 13233  003E24                     __ptext58:
 13234                           	opt stack 0
 13235  003E24                     ___lwtoft:
 13236                           	opt stack 24
 13237                           
 13238                           ;incstack = 0
 13239  003E24  C017  F00F         	movff	___lwtoft@c,___ftpack@arg
 13240  003E28  C018  F010         	movff	___lwtoft@c+1,___ftpack@arg+1
 13241  003E2C  6A11               	clrf	___ftpack@arg+2,c
 13242  003E2E  0E8E               	movlw	142
 13243  003E30  6E12               	movwf	___ftpack@exp,c
 13244  003E32  0E00               	movlw	0
 13245  003E34  6E13               	movwf	___ftpack@sign,c
 13246  003E36  ECEB  F018         	call	___ftpack	;wreg free
 13247  003E3A  C00F  F017         	movff	?___ftpack,?___lwtoft
 13248  003E3E  C010  F018         	movff	?___ftpack+1,?___lwtoft+1
 13249  003E42  C011  F019         	movff	?___ftpack+2,?___lwtoft+2
 13250  003E46  0012               	return	
 13251  003E48                     __end_of___lwtoft:
 13252                           	opt stack 0
 13253                           tblptru	equ	0xFF8
 13254                           tblptrh	equ	0xFF7
 13255                           tblptrl	equ	0xFF6
 13256                           tablat	equ	0xFF5
 13257                           prodh	equ	0xFF4
 13258                           prodl	equ	0xFF3
 13259                           intcon	equ	0xFF2
 13260                           intcon2	equ	0xFF1
 13261                           postinc0	equ	0xFEE
 13262                           wreg	equ	0xFE8
 13263                           postinc1	equ	0xFE6
 13264                           postdec1	equ	0xFE5
 13265                           fsr1h	equ	0xFE2
 13266                           fsr1l	equ	0xFE1
 13267                           indf2	equ	0xFDF
 13268                           postinc2	equ	0xFDE
 13269                           postdec2	equ	0xFDD
 13270                           fsr2h	equ	0xFDA
 13271                           fsr2l	equ	0xFD9
 13272                           status	equ	0xFD8
 13273                           
 13274 ;; *************** function _ReadVoltToCurrent *****************
 13275 ;; Defined at:
 13276 ;;		line 766 in file "BatteryManagment.c"
 13277 ;; Parameters:    Size  Location     Type
 13278 ;;		None
 13279 ;; Auto vars:     Size  Location     Type
 13280 ;;  CurrentTotal    3   43[BANK0 ] float 
 13281 ;; Return value:  Size  Location     Type
 13282 ;;                  3   37[BANK0 ] float 
 13283 ;; Registers used:
 13284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13285 ;; Tracked objects:
 13286 ;;		On entry : 0/0
 13287 ;;		On exit  : 0/0
 13288 ;;		Unchanged: 0/0
 13289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13290 ;;      Params:         0       3       0       0       0       0       0
 13291 ;;      Locals:         0       6       0       0       0       0       0
 13292 ;;      Temps:          0       0       0       0       0       0       0
 13293 ;;      Totals:         0       9       0       0       0       0       0
 13294 ;;Total ram usage:        9 bytes
 13295 ;; Hardware stack levels used:    1
 13296 ;; Hardware stack levels required when called:    5
 13297 ;; This function calls:
 13298 ;;		___awtoft
 13299 ;;		___ftadd
 13300 ;;		___ftdiv
 13301 ;;		___ftmul
 13302 ;;		___fttol
 13303 ;;		___wmul
 13304 ;; This function is called by:
 13305 ;;		_ReadCurrent
 13306 ;; This function uses a non-reentrant model
 13307 ;;
 13308                           
 13309                           	psect	text59
 13310  002268                     __ptext59:
 13311                           	opt stack 0
 13312  002268                     _ReadVoltToCurrent:
 13313                           	opt stack 23
 13314                           
 13315                           ;BatteryManagment.c: 767: float CurrentTotal = 0;
 13316                           
 13317                           ;incstack = 0
 13318  002268  0E00               	movlw	0
 13319  00226A  0100               	movlb	0	; () banked
 13320  00226C  6F8B               	movwf	ReadVoltToCurrent@CurrentTotal& (0+255),b
 13321  00226E  0E00               	movlw	0
 13322  002270  0100               	movlb	0	; () banked
 13323  002272  6F8C               	movwf	(ReadVoltToCurrent@CurrentTotal+1)& (0+255),b
 13324  002274  0E00               	movlw	0
 13325  002276  0100               	movlb	0	; () banked
 13326  002278  6F8D               	movwf	(ReadVoltToCurrent@CurrentTotal+2)& (0+255),b
 13327                           
 13328                           ;BatteryManagment.c: 768: for (k = 0; k < 5; k++) {
 13329  00227A  0E00               	movlw	0
 13330  00227C  0100               	movlb	0	; () banked
 13331  00227E  6FDD               	movwf	(_k+1)& (0+255),b
 13332  002280  0E00               	movlw	0
 13333  002282  6FDC               	movwf	_k& (0+255),b
 13334                           
 13335                           ; BSR set to: 0
 13336  002284  0100               	movlb	0	; () banked
 13337  002286  BFDD               	btfsc	(_k+1)& (0+255),7,b
 13338  002288  D00A               	goto	l8373
 13339  00228A  0100               	movlb	0	; () banked
 13340  00228C  51DD               	movf	(_k+1)& (0+255),w,b
 13341  00228E  E106               	bnz	u8730
 13342  002290  0E05               	movlw	5
 13343  002292  0100               	movlb	0	; () banked
 13344  002294  5DDC               	subwf	_k& (0+255),w,b
 13345  002296  B0D8               	btfsc	status,0,c
 13346  002298  D083               	goto	l8379
 13347  00229A  D001               	goto	l8373
 13348  00229C                     u8730:
 13349                           
 13350                           ; BSR set to: 0
 13351  00229C  D081               	goto	l8379
 13352  00229E                     l8373:
 13353                           
 13354                           ; BSR set to: 0
 13355                           ;BatteryManagment.c: 770: Current[k] = (((CVolt[k] / 4095)*5)/40) + CurrentOffset[k];
 13356  00229E  0E00               	movlw	0
 13357  0022A0  6E35               	movwf	___ftmul@f2,c
 13358  0022A2  0EA0               	movlw	160
 13359  0022A4  6E36               	movwf	___ftmul@f2+1,c
 13360  0022A6  0E40               	movlw	64
 13361  0022A8  6E37               	movwf	___ftmul@f2+2,c
 13362  0022AA  0EF0               	movlw	240
 13363  0022AC  6E26               	movwf	___ftdiv@f2,c
 13364  0022AE  0E7F               	movlw	127
 13365  0022B0  6E27               	movwf	___ftdiv@f2+1,c
 13366  0022B2  0E45               	movlw	69
 13367  0022B4  6E28               	movwf	___ftdiv@f2+2,c
 13368  0022B6  C0DC  F01D         	movff	_k,___wmul@multiplier
 13369  0022BA  C0DD  F01E         	movff	_k+1,___wmul@multiplier+1
 13370  0022BE  0E00               	movlw	0
 13371  0022C0  6E20               	movwf	___wmul@multiplicand+1,c
 13372  0022C2  0E03               	movlw	3
 13373  0022C4  6E1F               	movwf	___wmul@multiplicand,c
 13374  0022C6  ECDB  F01E         	call	___wmul	;wreg free
 13375  0022CA  0E48               	movlw	low _CVolt
 13376  0022CC  241D               	addwf	?___wmul,w,c
 13377  0022CE  6ED9               	movwf	fsr2l,c
 13378  0022D0  0E02               	movlw	high _CVolt
 13379  0022D2  201E               	addwfc	?___wmul+1,w,c
 13380  0022D4  6EDA               	movwf	fsr2h,c
 13381  0022D6  CFDE F023          	movff	postinc2,___ftdiv@f1
 13382  0022DA  CFDE F024          	movff	postinc2,___ftdiv@f1+1
 13383  0022DE  CFDD F025          	movff	postdec2,___ftdiv@f1+2
 13384  0022E2  ECD5  F016         	call	___ftdiv	;wreg free
 13385  0022E6  C023  F032         	movff	?___ftdiv,___ftmul@f1
 13386  0022EA  C024  F033         	movff	?___ftdiv+1,___ftmul@f1+1
 13387  0022EE  C025  F034         	movff	?___ftdiv+2,___ftmul@f1+2
 13388  0022F2  EC5B  F016         	call	___ftmul	;wreg free
 13389  0022F6  C032  F088         	movff	?___ftmul,_ReadVoltToCurrent$2733
 13390  0022FA  C033  F089         	movff	?___ftmul+1,_ReadVoltToCurrent$2733+1
 13391  0022FE  C034  F08A         	movff	?___ftmul+2,_ReadVoltToCurrent$2733+2
 13392                           
 13393                           ;BatteryManagment.c: 770: Current[k] = (((CVolt[k] / 4095)*5)/40) + CurrentOffset[k];
 13394  002302  0E00               	movlw	0
 13395  002304  6E20               	movwf	___wmul@multiplicand+1,c
 13396  002306  0E03               	movlw	3
 13397  002308  6E1F               	movwf	___wmul@multiplicand,c
 13398  00230A  C0DC  F01D         	movff	_k,___wmul@multiplier
 13399  00230E  C0DD  F01E         	movff	_k+1,___wmul@multiplier+1
 13400  002312  ECDB  F01E         	call	___wmul	;wreg free
 13401  002316  0E5A               	movlw	low _CurrentOffset
 13402  002318  241D               	addwf	?___wmul,w,c
 13403  00231A  6ED9               	movwf	fsr2l,c
 13404  00231C  0E02               	movlw	high _CurrentOffset
 13405  00231E  201E               	addwfc	?___wmul+1,w,c
 13406  002320  6EDA               	movwf	fsr2h,c
 13407  002322  CFDE F06D          	movff	postinc2,___ftadd@f2
 13408  002326  CFDE F06E          	movff	postinc2,___ftadd@f2+1
 13409  00232A  CFDD F06F          	movff	postdec2,___ftadd@f2+2
 13410  00232E  0E00               	movlw	0
 13411  002330  6E26               	movwf	___ftdiv@f2,c
 13412  002332  0E20               	movlw	32
 13413  002334  6E27               	movwf	___ftdiv@f2+1,c
 13414  002336  0E42               	movlw	66
 13415  002338  6E28               	movwf	___ftdiv@f2+2,c
 13416  00233A  C088  F023         	movff	_ReadVoltToCurrent$2733,___ftdiv@f1
 13417  00233E  C089  F024         	movff	_ReadVoltToCurrent$2733+1,___ftdiv@f1+1
 13418  002342  C08A  F025         	movff	_ReadVoltToCurrent$2733+2,___ftdiv@f1+2
 13419  002346  ECD5  F016         	call	___ftdiv	;wreg free
 13420  00234A  C023  F06A         	movff	?___ftdiv,___ftadd@f1
 13421  00234E  C024  F06B         	movff	?___ftdiv+1,___ftadd@f1+1
 13422  002352  C025  F06C         	movff	?___ftdiv+2,___ftadd@f1+2
 13423  002356  ECBD  F00D         	call	___ftadd	;wreg free
 13424  00235A  C06A  F076         	movff	?___ftadd,___fttol@f1
 13425  00235E  C06B  F077         	movff	?___ftadd+1,___fttol@f1+1
 13426  002362  C06C  F078         	movff	?___ftadd+2,___fttol@f1+2
 13427  002366  ECC0  F012         	call	___fttol	;wreg free
 13428  00236A  90D8               	bcf	status,0,c
 13429  00236C  0100               	movlb	0	; () banked
 13430  00236E  35DC               	rlcf	_k& (0+255),w,b
 13431  002370  6ED9               	movwf	fsr2l,c
 13432  002372  0100               	movlb	0	; () banked
 13433  002374  35DD               	rlcf	(_k+1)& (0+255),w,b
 13434  002376  6EDA               	movwf	fsr2h,c
 13435  002378  0EB9               	movlw	low _Current
 13436  00237A  26D9               	addwf	fsr2l,f,c
 13437  00237C  0E00               	movlw	high _Current
 13438  00237E  22DA               	addwfc	fsr2h,f,c
 13439  002380  0100               	movlb	0	; () banked
 13440  002382  C076  FFDE         	movff	?___fttol,postinc2
 13441  002386  0100               	movlb	0	; () banked
 13442  002388  C077  FFDD         	movff	?___fttol+1,postdec2
 13443                           
 13444                           ; BSR set to: 0
 13445  00238C  0100               	movlb	0	; () banked
 13446  00238E  4BDC               	infsnz	_k& (0+255),f,b
 13447  002390  2BDD               	incf	(_k+1)& (0+255),f,b
 13448                           
 13449                           ; BSR set to: 0
 13450  002392  0100               	movlb	0	; () banked
 13451  002394  BFDD               	btfsc	(_k+1)& (0+255),7,b
 13452  002396  D783               	goto	l8373
 13453  002398  0100               	movlb	0	; () banked
 13454  00239A  51DD               	movf	(_k+1)& (0+255),w,b
 13455  00239C  E101               	bnz	l8379
 13456  00239E  D778               	goto	L21
 13457  0023A0                     l8379:
 13458                           
 13459                           ; BSR set to: 0
 13460                           ;BatteryManagment.c: 771: }
 13461                           ;BatteryManagment.c: 772: for (k = 0; k < 5; k++){
 13462  0023A0  0E00               	movlw	0
 13463  0023A2  0100               	movlb	0	; () banked
 13464  0023A4  6FDD               	movwf	(_k+1)& (0+255),b
 13465  0023A6  0E00               	movlw	0
 13466  0023A8  6FDC               	movwf	_k& (0+255),b
 13467  0023AA                     l8381:
 13468                           
 13469                           ; BSR set to: 0
 13470  0023AA  0100               	movlb	0	; () banked
 13471  0023AC  BFDD               	btfsc	(_k+1)& (0+255),7,b
 13472  0023AE  D008               	goto	l8385
 13473  0023B0  0100               	movlb	0	; () banked
 13474  0023B2  51DD               	movf	(_k+1)& (0+255),w,b
 13475  0023B4  E12E               	bnz	l8391
 13476  0023B6  0E05               	movlw	5
 13477  0023B8  0100               	movlb	0	; () banked
 13478  0023BA  5DDC               	subwf	_k& (0+255),w,b
 13479  0023BC  B0D8               	btfsc	status,0,c
 13480  0023BE  D029               	goto	l8391
 13481  0023C0                     l8385:
 13482                           
 13483                           ; BSR set to: 0
 13484                           ;BatteryManagment.c: 773: CurrentTotal = Current[k] + CurrentTotal;
 13485  0023C0  90D8               	bcf	status,0,c
 13486  0023C2  0100               	movlb	0	; () banked
 13487  0023C4  35DC               	rlcf	_k& (0+255),w,b
 13488  0023C6  6ED9               	movwf	fsr2l,c
 13489  0023C8  0100               	movlb	0	; () banked
 13490  0023CA  35DD               	rlcf	(_k+1)& (0+255),w,b
 13491  0023CC  6EDA               	movwf	fsr2h,c
 13492  0023CE  0EB9               	movlw	low _Current
 13493  0023D0  26D9               	addwf	fsr2l,f,c
 13494  0023D2  0E00               	movlw	high _Current
 13495  0023D4  22DA               	addwfc	fsr2h,f,c
 13496  0023D6  CFDE F017          	movff	postinc2,___awtoft@c
 13497  0023DA  CFDD F018          	movff	postdec2,___awtoft@c+1
 13498  0023DE  EC1C  F01E         	call	___awtoft	;wreg free
 13499  0023E2  C017  F06A         	movff	?___awtoft,___ftadd@f1
 13500  0023E6  C018  F06B         	movff	?___awtoft+1,___ftadd@f1+1
 13501  0023EA  C019  F06C         	movff	?___awtoft+2,___ftadd@f1+2
 13502  0023EE  C08B  F06D         	movff	ReadVoltToCurrent@CurrentTotal,___ftadd@f2
 13503  0023F2  C08C  F06E         	movff	ReadVoltToCurrent@CurrentTotal+1,___ftadd@f2+1
 13504  0023F6  C08D  F06F         	movff	ReadVoltToCurrent@CurrentTotal+2,___ftadd@f2+2
 13505  0023FA  ECBD  F00D         	call	___ftadd	;wreg free
 13506  0023FE  C06A  F08B         	movff	?___ftadd,ReadVoltToCurrent@CurrentTotal
 13507  002402  C06B  F08C         	movff	?___ftadd+1,ReadVoltToCurrent@CurrentTotal+1
 13508  002406  C06C  F08D         	movff	?___ftadd+2,ReadVoltToCurrent@CurrentTotal+2
 13509  00240A  0100               	movlb	0	; () banked
 13510  00240C  4BDC               	infsnz	_k& (0+255),f,b
 13511  00240E  2BDD               	incf	(_k+1)& (0+255),f,b
 13512  002410  D7CC               	goto	l8381
 13513  002412                     l8391:
 13514                           
 13515                           ; BSR set to: 0
 13516                           ;BatteryManagment.c: 774: }
 13517                           ;BatteryManagment.c: 775: return CurrentTotal/6;
 13518  002412  C08B  F023         	movff	ReadVoltToCurrent@CurrentTotal,___ftdiv@f1
 13519  002416  C08C  F024         	movff	ReadVoltToCurrent@CurrentTotal+1,___ftdiv@f1+1
 13520  00241A  C08D  F025         	movff	ReadVoltToCurrent@CurrentTotal+2,___ftdiv@f1+2
 13521  00241E  0E00               	movlw	0
 13522  002420  6E26               	movwf	___ftdiv@f2,c
 13523  002422  0EC0               	movlw	192
 13524  002424  6E27               	movwf	___ftdiv@f2+1,c
 13525  002426  0E40               	movlw	64
 13526  002428  6E28               	movwf	___ftdiv@f2+2,c
 13527  00242A  ECD5  F016         	call	___ftdiv	;wreg free
 13528  00242E  C023  F085         	movff	?___ftdiv,?_ReadVoltToCurrent
 13529  002432  C024  F086         	movff	?___ftdiv+1,?_ReadVoltToCurrent+1
 13530  002436  C025  F087         	movff	?___ftdiv+2,?_ReadVoltToCurrent+2
 13531  00243A  0012               	return	
 13532  00243C                     __end_of_ReadVoltToCurrent:
 13533                           	opt stack 0
 13534                           tblptru	equ	0xFF8
 13535                           tblptrh	equ	0xFF7
 13536                           tblptrl	equ	0xFF6
 13537                           tablat	equ	0xFF5
 13538                           prodh	equ	0xFF4
 13539                           prodl	equ	0xFF3
 13540                           intcon	equ	0xFF2
 13541                           intcon2	equ	0xFF1
 13542                           postinc0	equ	0xFEE
 13543                           wreg	equ	0xFE8
 13544                           postinc1	equ	0xFE6
 13545                           postdec1	equ	0xFE5
 13546                           fsr1h	equ	0xFE2
 13547                           fsr1l	equ	0xFE1
 13548                           indf2	equ	0xFDF
 13549                           postinc2	equ	0xFDE
 13550                           postdec2	equ	0xFDD
 13551                           fsr2h	equ	0xFDA
 13552                           fsr2l	equ	0xFD9
 13553                           status	equ	0xFD8
 13554                           
 13555 ;; *************** function ___wmul *****************
 13556 ;; Defined at:
 13557 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13558 ;; Parameters:    Size  Location     Type
 13559 ;;  multiplier      2   28[COMRAM] unsigned int 
 13560 ;;  multiplicand    2   30[COMRAM] unsigned int 
 13561 ;; Auto vars:     Size  Location     Type
 13562 ;;  product         2   32[COMRAM] unsigned int 
 13563 ;; Return value:  Size  Location     Type
 13564 ;;                  2   28[COMRAM] unsigned int 
 13565 ;; Registers used:
 13566 ;;		wreg, status,2, status,0, prodl, prodh
 13567 ;; Tracked objects:
 13568 ;;		On entry : 0/0
 13569 ;;		On exit  : 0/0
 13570 ;;		Unchanged: 0/0
 13571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13572 ;;      Params:         4       0       0       0       0       0       0
 13573 ;;      Locals:         2       0       0       0       0       0       0
 13574 ;;      Temps:          0       0       0       0       0       0       0
 13575 ;;      Totals:         6       0       0       0       0       0       0
 13576 ;;Total ram usage:        6 bytes
 13577 ;; Hardware stack levels used:    1
 13578 ;; Hardware stack levels required when called:    3
 13579 ;; This function calls:
 13580 ;;		Nothing
 13581 ;; This function is called by:
 13582 ;;		_Temp_Fault
 13583 ;;		_Temp_Filter
 13584 ;;		_Temp_Convert
 13585 ;;		_Tempeture_Get
 13586 ;;		_SetTempEnable
 13587 ;;		_Set_ADC_Mode
 13588 ;;		_Set_DCC_Mode_OFF
 13589 ;;		_Set_DCTO_Mode_OFF
 13590 ;;		_Set_REFON_Pin
 13591 ;;		_ReadCurrent
 13592 ;;		_ReadVoltToCurrent
 13593 ;;		_LTC6804_rdcv
 13594 ;;		_LTC6804_wrcfg
 13595 ;;		_fround
 13596 ;;		_scale
 13597 ;;		_printf
 13598 ;;		_eval_poly
 13599 ;;		_CheckThresholdsBank
 13600 ;;		_SetBypass
 13601 ;;		_SetUnderOverVoltage
 13602 ;;		_ReadVolt
 13603 ;;		_CurrentCoulombCount
 13604 ;;		_LTC6804_rdaux
 13605 ;;		_LTC6804_rdStat
 13606 ;;		_LTC6804_rdcfg
 13607 ;; This function uses a non-reentrant model
 13608 ;;
 13609                           
 13610                           	psect	text60
 13611  003DB6                     __ptext60:
 13612                           	opt stack 0
 13613  003DB6                     ___wmul:
 13614                           	opt stack 25
 13615                           
 13616                           ;incstack = 0
 13617  003DB6  501D               	movf	___wmul@multiplier,w,c
 13618  003DB8  021F               	mulwf	___wmul@multiplicand,c
 13619  003DBA  CFF3 F021          	movff	prodl,___wmul@product
 13620  003DBE  CFF4 F022          	movff	prodh,___wmul@product+1
 13621  003DC2  501D               	movf	___wmul@multiplier,w,c
 13622  003DC4  0220               	mulwf	___wmul@multiplicand+1,c
 13623  003DC6  50F3               	movf	prodl,w,c
 13624  003DC8  2622               	addwf	___wmul@product+1,f,c
 13625  003DCA  501E               	movf	___wmul@multiplier+1,w,c
 13626  003DCC  021F               	mulwf	___wmul@multiplicand,c
 13627  003DCE  50F3               	movf	prodl,w,c
 13628  003DD0  2622               	addwf	___wmul@product+1,f,c
 13629  003DD2  C021  F01D         	movff	___wmul@product,?___wmul
 13630  003DD6  C022  F01E         	movff	___wmul@product+1,?___wmul+1
 13631  003DDA  0012               	return	
 13632  003DDC                     __end_of___wmul:
 13633                           	opt stack 0
 13634                           tblptru	equ	0xFF8
 13635                           tblptrh	equ	0xFF7
 13636                           tblptrl	equ	0xFF6
 13637                           tablat	equ	0xFF5
 13638                           prodh	equ	0xFF4
 13639                           prodl	equ	0xFF3
 13640                           intcon	equ	0xFF2
 13641                           intcon2	equ	0xFF1
 13642                           postinc0	equ	0xFEE
 13643                           wreg	equ	0xFE8
 13644                           postinc1	equ	0xFE6
 13645                           postdec1	equ	0xFE5
 13646                           fsr1h	equ	0xFE2
 13647                           fsr1l	equ	0xFE1
 13648                           indf2	equ	0xFDF
 13649                           postinc2	equ	0xFDE
 13650                           postdec2	equ	0xFDD
 13651                           fsr2h	equ	0xFDA
 13652                           fsr2l	equ	0xFD9
 13653                           status	equ	0xFD8
 13654                           
 13655 ;; *************** function ___fttol *****************
 13656 ;; Defined at:
 13657 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 13658 ;; Parameters:    Size  Location     Type
 13659 ;;  f1              3   22[BANK0 ] float 
 13660 ;; Auto vars:     Size  Location     Type
 13661 ;;  lval            4   32[BANK0 ] unsigned long 
 13662 ;;  exp1            1   36[BANK0 ] unsigned char 
 13663 ;;  sign1           1   31[BANK0 ] unsigned char 
 13664 ;; Return value:  Size  Location     Type
 13665 ;;                  4   22[BANK0 ] long 
 13666 ;; Registers used:
 13667 ;;		wreg, status,2, status,0
 13668 ;; Tracked objects:
 13669 ;;		On entry : 0/0
 13670 ;;		On exit  : 0/0
 13671 ;;		Unchanged: 0/0
 13672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13673 ;;      Params:         0       4       0       0       0       0       0
 13674 ;;      Locals:         0       6       0       0       0       0       0
 13675 ;;      Temps:          0       5       0       0       0       0       0
 13676 ;;      Totals:         0      15       0       0       0       0       0
 13677 ;;Total ram usage:       15 bytes
 13678 ;; Hardware stack levels used:    1
 13679 ;; Hardware stack levels required when called:    3
 13680 ;; This function calls:
 13681 ;;		Nothing
 13682 ;; This function is called by:
 13683 ;;		_ReadVoltToCurrent
 13684 ;;		_printf
 13685 ;;		_CheckTestReading
 13686 ;; This function uses a non-reentrant model
 13687 ;;
 13688                           
 13689                           	psect	text61
 13690  002580                     __ptext61:
 13691                           	opt stack 0
 13692  002580                     ___fttol:
 13693                           	opt stack 26
 13694                           
 13695                           ;incstack = 0
 13696  002580  C078  F07A         	movff	___fttol@f1+2,??___fttol
 13697  002584  0100               	movlb	0	; () banked
 13698  002586  6B7B               	clrf	(??___fttol+1)& (0+255),b
 13699  002588  6B7C               	clrf	(??___fttol+2)& (0+255),b
 13700  00258A  0100               	movlb	0	; () banked
 13701  00258C  3577               	rlcf	(___fttol@f1+1)& (0+255),w,b
 13702  00258E  0100               	movlb	0	; () banked
 13703  002590  377A               	rlcf	??___fttol& (0+255),f,b
 13704  002592  E301               	bnc	u7891
 13705  002594  817B               	bsf	(??___fttol+1)& (0+255),0,b
 13706  002596                     u7891:
 13707  002596  0100               	movlb	0	; () banked
 13708  002598  517A               	movf	??___fttol& (0+255),w,b
 13709  00259A  0100               	movlb	0	; () banked
 13710  00259C  6F84               	movwf	___fttol@exp1& (0+255),b
 13711  00259E  0100               	movlb	0	; () banked
 13712  0025A0  5184               	movf	___fttol@exp1& (0+255),w,b
 13713  0025A2  A4D8               	btfss	status,2,c
 13714  0025A4  D00A               	goto	l7815
 13715                           
 13716                           ; BSR set to: 0
 13717  0025A6  0E00               	movlw	0
 13718  0025A8  0100               	movlb	0	; () banked
 13719  0025AA  6F76               	movwf	?___fttol& (0+255),b
 13720  0025AC  0E00               	movlw	0
 13721  0025AE  6F77               	movwf	(?___fttol+1)& (0+255),b
 13722  0025B0  0E00               	movlw	0
 13723  0025B2  6F78               	movwf	(?___fttol+2)& (0+255),b
 13724  0025B4  0E00               	movlw	0
 13725  0025B6  6F79               	movwf	(?___fttol+3)& (0+255),b
 13726                           
 13727                           ; BSR set to: 0
 13728  0025B8  0012               	return	
 13729  0025BA                     l7815:
 13730                           
 13731                           ; BSR set to: 0
 13732  0025BA  0E17               	movlw	23
 13733  0025BC  0100               	movlb	0	; () banked
 13734  0025BE  6F7A               	movwf	??___fttol& (0+255),b
 13735  0025C0  C076  F07B         	movff	___fttol@f1,??___fttol+1
 13736  0025C4  C077  F07C         	movff	___fttol@f1+1,??___fttol+2
 13737  0025C8  C078  F07D         	movff	___fttol@f1+2,??___fttol+3
 13738  0025CC  0100               	movlb	0	; () banked
 13739  0025CE  297A               	incf	??___fttol& (0+255),w,b
 13740  0025D0  0100               	movlb	0	; () banked
 13741  0025D2  6F7E               	movwf	(??___fttol+4)& (0+255),b
 13742  0025D4  D005               	goto	u7910
 13743  0025D6                     u7915:
 13744  0025D6  0100               	movlb	0	; () banked
 13745  0025D8  90D8               	bcf	status,0,c
 13746  0025DA  337D               	rrcf	(??___fttol+3)& (0+255),f,b
 13747  0025DC  337C               	rrcf	(??___fttol+2)& (0+255),f,b
 13748  0025DE  337B               	rrcf	(??___fttol+1)& (0+255),f,b
 13749  0025E0                     u7910:
 13750  0025E0  0100               	movlb	0	; () banked
 13751  0025E2  2F7E               	decfsz	(??___fttol+4)& (0+255),f,b
 13752  0025E4  D7F8               	goto	u7915
 13753  0025E6  0100               	movlb	0	; () banked
 13754  0025E8  517B               	movf	(??___fttol+1)& (0+255),w,b
 13755  0025EA  0100               	movlb	0	; () banked
 13756  0025EC  6F7F               	movwf	___fttol@sign1& (0+255),b
 13757                           
 13758                           ; BSR set to: 0
 13759  0025EE  0100               	movlb	0	; () banked
 13760  0025F0  8F77               	bsf	(___fttol@f1+1)& (0+255),7,b
 13761                           
 13762                           ; BSR set to: 0
 13763  0025F2  0EFF               	movlw	255
 13764  0025F4  0100               	movlb	0	; () banked
 13765  0025F6  1776               	andwf	___fttol@f1& (0+255),f,b
 13766  0025F8  0EFF               	movlw	255
 13767  0025FA  0100               	movlb	0	; () banked
 13768  0025FC  1777               	andwf	(___fttol@f1+1)& (0+255),f,b
 13769  0025FE  0E00               	movlw	0
 13770  002600  0100               	movlb	0	; () banked
 13771  002602  1778               	andwf	(___fttol@f1+2)& (0+255),f,b
 13772                           
 13773                           ; BSR set to: 0
 13774  002604  0100               	movlb	0	; () banked
 13775  002606  5176               	movf	___fttol@f1& (0+255),w,b
 13776  002608  0100               	movlb	0	; () banked
 13777  00260A  6F80               	movwf	___fttol@lval& (0+255),b
 13778  00260C  0100               	movlb	0	; () banked
 13779  00260E  5177               	movf	(___fttol@f1+1)& (0+255),w,b
 13780  002610  0100               	movlb	0	; () banked
 13781  002612  6F81               	movwf	(___fttol@lval+1)& (0+255),b
 13782  002614  0100               	movlb	0	; () banked
 13783  002616  5178               	movf	(___fttol@f1+2)& (0+255),w,b
 13784  002618  0100               	movlb	0	; () banked
 13785  00261A  6F82               	movwf	(___fttol@lval+2)& (0+255),b
 13786  00261C  0100               	movlb	0	; () banked
 13787  00261E  6B83               	clrf	(___fttol@lval+3)& (0+255),b
 13788                           
 13789                           ; BSR set to: 0
 13790  002620  0E8E               	movlw	142
 13791  002622  0100               	movlb	0	; () banked
 13792  002624  5F84               	subwf	___fttol@exp1& (0+255),f,b
 13793                           
 13794                           ; BSR set to: 0
 13795  002626  0100               	movlb	0	; () banked
 13796  002628  AF84               	btfss	___fttol@exp1& (0+255),7,b
 13797  00262A  D01A               	goto	l7837
 13798                           
 13799                           ; BSR set to: 0
 13800  00262C  0100               	movlb	0	; () banked
 13801  00262E  5184               	movf	___fttol@exp1& (0+255),w,b
 13802  002630  0A80               	xorlw	128
 13803  002632  0F8F               	addlw	143
 13804  002634  B0D8               	btfsc	status,0,c
 13805  002636  D00A               	goto	l7833
 13806                           
 13807                           ; BSR set to: 0
 13808  002638  0E00               	movlw	0
 13809  00263A  0100               	movlb	0	; () banked
 13810  00263C  6F76               	movwf	?___fttol& (0+255),b
 13811  00263E  0E00               	movlw	0
 13812  002640  6F77               	movwf	(?___fttol+1)& (0+255),b
 13813  002642  0E00               	movlw	0
 13814  002644  6F78               	movwf	(?___fttol+2)& (0+255),b
 13815  002646  0E00               	movlw	0
 13816  002648  6F79               	movwf	(?___fttol+3)& (0+255),b
 13817                           
 13818                           ; BSR set to: 0
 13819  00264A  0012               	return	
 13820  00264C                     l7833:
 13821                           
 13822                           ; BSR set to: 0
 13823  00264C  0100               	movlb	0	; () banked
 13824  00264E  90D8               	bcf	status,0,c
 13825  002650  3383               	rrcf	(___fttol@lval+3)& (0+255),f,b
 13826  002652  3382               	rrcf	(___fttol@lval+2)& (0+255),f,b
 13827  002654  3381               	rrcf	(___fttol@lval+1)& (0+255),f,b
 13828  002656  3380               	rrcf	___fttol@lval& (0+255),f,b
 13829                           
 13830                           ; BSR set to: 0
 13831  002658  0100               	movlb	0	; () banked
 13832  00265A  3F84               	incfsz	___fttol@exp1& (0+255),f,b
 13833  00265C  D7F7               	goto	l7833
 13834                           
 13835                           ; BSR set to: 0
 13836  00265E  D01B               	goto	l7847
 13837  002660                     l7837:
 13838                           
 13839                           ; BSR set to: 0
 13840  002660  0E17               	movlw	23
 13841  002662  0100               	movlb	0	; () banked
 13842  002664  6584               	cpfsgt	___fttol@exp1& (0+255),b
 13843  002666  D012               	goto	l7845
 13844                           
 13845                           ; BSR set to: 0
 13846  002668  0E00               	movlw	0
 13847  00266A  0100               	movlb	0	; () banked
 13848  00266C  6F76               	movwf	?___fttol& (0+255),b
 13849  00266E  0E00               	movlw	0
 13850  002670  6F77               	movwf	(?___fttol+1)& (0+255),b
 13851  002672  0E00               	movlw	0
 13852  002674  6F78               	movwf	(?___fttol+2)& (0+255),b
 13853  002676  0E00               	movlw	0
 13854  002678  6F79               	movwf	(?___fttol+3)& (0+255),b
 13855                           
 13856                           ; BSR set to: 0
 13857  00267A  0012               	return	
 13858  00267C                     l7843:
 13859                           
 13860                           ; BSR set to: 0
 13861  00267C  0100               	movlb	0	; () banked
 13862  00267E  90D8               	bcf	status,0,c
 13863  002680  3780               	rlcf	___fttol@lval& (0+255),f,b
 13864  002682  3781               	rlcf	(___fttol@lval+1)& (0+255),f,b
 13865  002684  3782               	rlcf	(___fttol@lval+2)& (0+255),f,b
 13866  002686  3783               	rlcf	(___fttol@lval+3)& (0+255),f,b
 13867  002688  0100               	movlb	0	; () banked
 13868  00268A  0784               	decf	___fttol@exp1& (0+255),f,b
 13869  00268C                     l7845:
 13870                           
 13871                           ; BSR set to: 0
 13872  00268C  0100               	movlb	0	; () banked
 13873  00268E  5184               	movf	___fttol@exp1& (0+255),w,b
 13874  002690  0100               	movlb	0	; () banked
 13875  002692  A4D8               	btfss	status,2,c
 13876  002694  D7F3               	goto	l7843
 13877  002696                     l7847:
 13878                           
 13879                           ; BSR set to: 0
 13880  002696  0100               	movlb	0	; () banked
 13881  002698  517F               	movf	___fttol@sign1& (0+255),w,b
 13882  00269A  0100               	movlb	0	; () banked
 13883  00269C  B4D8               	btfsc	status,2,c
 13884  00269E  D009               	goto	l7851
 13885                           
 13886                           ; BSR set to: 0
 13887  0026A0  0100               	movlb	0	; () banked
 13888  0026A2  1F83               	comf	(___fttol@lval+3)& (0+255),f,b
 13889  0026A4  1F82               	comf	(___fttol@lval+2)& (0+255),f,b
 13890  0026A6  1F81               	comf	(___fttol@lval+1)& (0+255),f,b
 13891  0026A8  6D80               	negf	___fttol@lval& (0+255),b
 13892  0026AA  0E00               	movlw	0
 13893  0026AC  2381               	addwfc	(___fttol@lval+1)& (0+255),f,b
 13894  0026AE  2382               	addwfc	(___fttol@lval+2)& (0+255),f,b
 13895  0026B0  2383               	addwfc	(___fttol@lval+3)& (0+255),f,b
 13896  0026B2                     l7851:
 13897                           
 13898                           ; BSR set to: 0
 13899  0026B2  C080  F076         	movff	___fttol@lval,?___fttol
 13900  0026B6  C081  F077         	movff	___fttol@lval+1,?___fttol+1
 13901  0026BA  C082  F078         	movff	___fttol@lval+2,?___fttol+2
 13902  0026BE  C083  F079         	movff	___fttol@lval+3,?___fttol+3
 13903  0026C2  0012               	return	
 13904  0026C4                     __end_of___fttol:
 13905                           	opt stack 0
 13906                           tblptru	equ	0xFF8
 13907                           tblptrh	equ	0xFF7
 13908                           tblptrl	equ	0xFF6
 13909                           tablat	equ	0xFF5
 13910                           prodh	equ	0xFF4
 13911                           prodl	equ	0xFF3
 13912                           intcon	equ	0xFF2
 13913                           intcon2	equ	0xFF1
 13914                           postinc0	equ	0xFEE
 13915                           wreg	equ	0xFE8
 13916                           postinc1	equ	0xFE6
 13917                           postdec1	equ	0xFE5
 13918                           fsr1h	equ	0xFE2
 13919                           fsr1l	equ	0xFE1
 13920                           indf2	equ	0xFDF
 13921                           postinc2	equ	0xFDE
 13922                           postdec2	equ	0xFDD
 13923                           fsr2h	equ	0xFDA
 13924                           fsr2l	equ	0xFD9
 13925                           status	equ	0xFD8
 13926                           
 13927 ;; *************** function ___ftmul *****************
 13928 ;; Defined at:
 13929 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 13930 ;; Parameters:    Size  Location     Type
 13931 ;;  f1              3   49[COMRAM] float 
 13932 ;;  f2              3   52[COMRAM] float 
 13933 ;; Auto vars:     Size  Location     Type
 13934 ;;  f3_as_produc    3   59[COMRAM] unsigned um
 13935 ;;  sign            1   63[COMRAM] unsigned char 
 13936 ;;  cntr            1   62[COMRAM] unsigned char 
 13937 ;;  exp             1   58[COMRAM] unsigned char 
 13938 ;; Return value:  Size  Location     Type
 13939 ;;                  3   49[COMRAM] float 
 13940 ;; Registers used:
 13941 ;;		wreg, status,2, status,0, cstack
 13942 ;; Tracked objects:
 13943 ;;		On entry : 0/0
 13944 ;;		On exit  : 0/0
 13945 ;;		Unchanged: 0/0
 13946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13947 ;;      Params:         6       0       0       0       0       0       0
 13948 ;;      Locals:         6       0       0       0       0       0       0
 13949 ;;      Temps:          3       0       0       0       0       0       0
 13950 ;;      Totals:        15       0       0       0       0       0       0
 13951 ;;Total ram usage:       15 bytes
 13952 ;; Hardware stack levels used:    1
 13953 ;; Hardware stack levels required when called:    4
 13954 ;; This function calls:
 13955 ;;		___ftpack
 13956 ;; This function is called by:
 13957 ;;		_Temp_Filter
 13958 ;;		_Temp_Convert
 13959 ;;		_Run_Mode
 13960 ;;		_ReadVoltToCurrent
 13961 ;;		_fround
 13962 ;;		_scale
 13963 ;;		_printf
 13964 ;;		_log
 13965 ;;		_eval_poly
 13966 ;;		_CheckTestReading
 13967 ;; This function uses a non-reentrant model
 13968 ;;
 13969                           
 13970                           	psect	text62
 13971  002CB6                     __ptext62:
 13972                           	opt stack 0
 13973  002CB6                     ___ftmul:
 13974                           	opt stack 24
 13975                           
 13976                           ; BSR set to: 0
 13977                           ;incstack = 0
 13978  002CB6  C034  F038         	movff	___ftmul@f1+2,??___ftmul
 13979  002CBA  6A39               	clrf	(??___ftmul+1)& (0+255),c
 13980  002CBC  6A3A               	clrf	(??___ftmul+2)& (0+255),c
 13981  002CBE  3433               	rlcf	___ftmul@f1+1,w,c
 13982  002CC0  3638               	rlcf	??___ftmul& (0+255),f,c
 13983  002CC2  E301               	bnc	u7231
 13984  002CC4  8039               	bsf	(??___ftmul+1)& (0+255),0,c
 13985  002CC6                     u7231:
 13986  002CC6  5038               	movf	??___ftmul,w,c
 13987  002CC8  6E3B               	movwf	___ftmul@exp,c
 13988  002CCA  503B               	movf	___ftmul@exp,w,c
 13989  002CCC  A4D8               	btfss	status,2,c
 13990  002CCE  D007               	goto	l7297
 13991  002CD0  0E00               	movlw	0
 13992  002CD2  6E32               	movwf	?___ftmul,c
 13993  002CD4  0E00               	movlw	0
 13994  002CD6  6E33               	movwf	?___ftmul+1,c
 13995  002CD8  0E00               	movlw	0
 13996  002CDA  6E34               	movwf	?___ftmul+2,c
 13997  002CDC  0012               	return	
 13998  002CDE                     l7297:
 13999  002CDE  C037  F038         	movff	___ftmul@f2+2,??___ftmul
 14000  002CE2  6A39               	clrf	(??___ftmul+1)& (0+255),c
 14001  002CE4  6A3A               	clrf	(??___ftmul+2)& (0+255),c
 14002  002CE6  3436               	rlcf	___ftmul@f2+1,w,c
 14003  002CE8  3638               	rlcf	??___ftmul& (0+255),f,c
 14004  002CEA  E301               	bnc	u7251
 14005  002CEC  8039               	bsf	(??___ftmul+1)& (0+255),0,c
 14006  002CEE                     u7251:
 14007  002CEE  5038               	movf	??___ftmul,w,c
 14008  002CF0  6E40               	movwf	___ftmul@sign,c
 14009  002CF2  5040               	movf	___ftmul@sign,w,c
 14010  002CF4  A4D8               	btfss	status,2,c
 14011  002CF6  D007               	goto	l7303
 14012  002CF8  0E00               	movlw	0
 14013  002CFA  6E32               	movwf	?___ftmul,c
 14014  002CFC  0E00               	movlw	0
 14015  002CFE  6E33               	movwf	?___ftmul+1,c
 14016  002D00  0E00               	movlw	0
 14017  002D02  6E34               	movwf	?___ftmul+2,c
 14018  002D04  0012               	return	
 14019  002D06                     l7303:
 14020  002D06  5040               	movf	___ftmul@sign,w,c
 14021  002D08  0F7B               	addlw	123
 14022  002D0A  263B               	addwf	___ftmul@exp,f,c
 14023  002D0C  C034  F040         	movff	___ftmul@f1+2,___ftmul@sign
 14024  002D10  5037               	movf	___ftmul@f2+2,w,c
 14025  002D12  1A40               	xorwf	___ftmul@sign,f,c
 14026  002D14  0E80               	movlw	128
 14027  002D16  1640               	andwf	___ftmul@sign,f,c
 14028  002D18  8E33               	bsf	___ftmul@f1+1,7,c
 14029  002D1A  8E36               	bsf	___ftmul@f2+1,7,c
 14030  002D1C  0EFF               	movlw	255
 14031  002D1E  1635               	andwf	___ftmul@f2,f,c
 14032  002D20  0EFF               	movlw	255
 14033  002D22  1636               	andwf	___ftmul@f2+1,f,c
 14034  002D24  0E00               	movlw	0
 14035  002D26  1637               	andwf	___ftmul@f2+2,f,c
 14036  002D28  0E00               	movlw	0
 14037  002D2A  6E3C               	movwf	___ftmul@f3_as_product,c
 14038  002D2C  0E00               	movlw	0
 14039  002D2E  6E3D               	movwf	___ftmul@f3_as_product+1,c
 14040  002D30  0E00               	movlw	0
 14041  002D32  6E3E               	movwf	___ftmul@f3_as_product+2,c
 14042  002D34  0E07               	movlw	7
 14043  002D36  6E3F               	movwf	___ftmul@cntr,c
 14044  002D38                     l7317:
 14045  002D38  A032               	btfss	___ftmul@f1,0,c
 14046  002D3A  D006               	goto	l7321
 14047  002D3C  5035               	movf	___ftmul@f2,w,c
 14048  002D3E  263C               	addwf	___ftmul@f3_as_product,f,c
 14049  002D40  5036               	movf	___ftmul@f2+1,w,c
 14050  002D42  223D               	addwfc	___ftmul@f3_as_product+1,f,c
 14051  002D44  5037               	movf	___ftmul@f2+2,w,c
 14052  002D46  223E               	addwfc	___ftmul@f3_as_product+2,f,c
 14053  002D48                     l7321:
 14054  002D48  90D8               	bcf	status,0,c
 14055  002D4A  3234               	rrcf	___ftmul@f1+2,f,c
 14056  002D4C  3233               	rrcf	___ftmul@f1+1,f,c
 14057  002D4E  3232               	rrcf	___ftmul@f1,f,c
 14058  002D50  90D8               	bcf	status,0,c
 14059  002D52  3635               	rlcf	___ftmul@f2,f,c
 14060  002D54  3636               	rlcf	___ftmul@f2+1,f,c
 14061  002D56  3637               	rlcf	___ftmul@f2+2,f,c
 14062  002D58  2E3F               	decfsz	___ftmul@cntr,f,c
 14063  002D5A  D7EE               	goto	l7317
 14064  002D5C  0E09               	movlw	9
 14065  002D5E  6E3F               	movwf	___ftmul@cntr,c
 14066  002D60                     l7327:
 14067  002D60  A032               	btfss	___ftmul@f1,0,c
 14068  002D62  D006               	goto	l7331
 14069  002D64  5035               	movf	___ftmul@f2,w,c
 14070  002D66  263C               	addwf	___ftmul@f3_as_product,f,c
 14071  002D68  5036               	movf	___ftmul@f2+1,w,c
 14072  002D6A  223D               	addwfc	___ftmul@f3_as_product+1,f,c
 14073  002D6C  5037               	movf	___ftmul@f2+2,w,c
 14074  002D6E  223E               	addwfc	___ftmul@f3_as_product+2,f,c
 14075  002D70                     l7331:
 14076  002D70  90D8               	bcf	status,0,c
 14077  002D72  3234               	rrcf	___ftmul@f1+2,f,c
 14078  002D74  3233               	rrcf	___ftmul@f1+1,f,c
 14079  002D76  3232               	rrcf	___ftmul@f1,f,c
 14080  002D78  90D8               	bcf	status,0,c
 14081  002D7A  323E               	rrcf	___ftmul@f3_as_product+2,f,c
 14082  002D7C  323D               	rrcf	___ftmul@f3_as_product+1,f,c
 14083  002D7E  323C               	rrcf	___ftmul@f3_as_product,f,c
 14084  002D80  2E3F               	decfsz	___ftmul@cntr,f,c
 14085  002D82  D7EE               	goto	l7327
 14086  002D84  C03C  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
 14087  002D88  C03D  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 14088  002D8C  C03E  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 14089  002D90  C03B  F012         	movff	___ftmul@exp,___ftpack@exp
 14090  002D94  C040  F013         	movff	___ftmul@sign,___ftpack@sign
 14091  002D98  ECEB  F018         	call	___ftpack	;wreg free
 14092  002D9C  C00F  F032         	movff	?___ftpack,?___ftmul
 14093  002DA0  C010  F033         	movff	?___ftpack+1,?___ftmul+1
 14094  002DA4  C011  F034         	movff	?___ftpack+2,?___ftmul+2
 14095  002DA8  0012               	return	
 14096  002DAA                     __end_of___ftmul:
 14097                           	opt stack 0
 14098                           tblptru	equ	0xFF8
 14099                           tblptrh	equ	0xFF7
 14100                           tblptrl	equ	0xFF6
 14101                           tablat	equ	0xFF5
 14102                           prodh	equ	0xFF4
 14103                           prodl	equ	0xFF3
 14104                           intcon	equ	0xFF2
 14105                           intcon2	equ	0xFF1
 14106                           postinc0	equ	0xFEE
 14107                           wreg	equ	0xFE8
 14108                           postinc1	equ	0xFE6
 14109                           postdec1	equ	0xFE5
 14110                           fsr1h	equ	0xFE2
 14111                           fsr1l	equ	0xFE1
 14112                           indf2	equ	0xFDF
 14113                           postinc2	equ	0xFDE
 14114                           postdec2	equ	0xFDD
 14115                           fsr2h	equ	0xFDA
 14116                           fsr2l	equ	0xFD9
 14117                           status	equ	0xFD8
 14118                           
 14119 ;; *************** function ___ftdiv *****************
 14120 ;; Defined at:
 14121 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 14122 ;; Parameters:    Size  Location     Type
 14123 ;;  f1              3   34[COMRAM] float 
 14124 ;;  f2              3   37[COMRAM] float 
 14125 ;; Auto vars:     Size  Location     Type
 14126 ;;  f3              3   44[COMRAM] float 
 14127 ;;  sign            1   48[COMRAM] unsigned char 
 14128 ;;  exp             1   47[COMRAM] unsigned char 
 14129 ;;  cntr            1   43[COMRAM] unsigned char 
 14130 ;; Return value:  Size  Location     Type
 14131 ;;                  3   34[COMRAM] float 
 14132 ;; Registers used:
 14133 ;;		wreg, status,2, status,0, cstack
 14134 ;; Tracked objects:
 14135 ;;		On entry : 0/0
 14136 ;;		On exit  : 0/0
 14137 ;;		Unchanged: 0/0
 14138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14139 ;;      Params:         6       0       0       0       0       0       0
 14140 ;;      Locals:         6       0       0       0       0       0       0
 14141 ;;      Temps:          3       0       0       0       0       0       0
 14142 ;;      Totals:        15       0       0       0       0       0       0
 14143 ;;Total ram usage:       15 bytes
 14144 ;; Hardware stack levels used:    1
 14145 ;; Hardware stack levels required when called:    4
 14146 ;; This function calls:
 14147 ;;		___ftpack
 14148 ;; This function is called by:
 14149 ;;		_Temp_Convert
 14150 ;;		_ReadVoltToCurrent
 14151 ;;		_CheckTestReading
 14152 ;; This function uses a non-reentrant model
 14153 ;;
 14154                           
 14155                           	psect	text63
 14156  002DAA                     __ptext63:
 14157                           	opt stack 0
 14158  002DAA                     ___ftdiv:
 14159                           	opt stack 23
 14160                           
 14161                           ;incstack = 0
 14162  002DAA  C025  F029         	movff	___ftdiv@f1+2,??___ftdiv
 14163  002DAE  6A2A               	clrf	(??___ftdiv+1)& (0+255),c
 14164  002DB0  6A2B               	clrf	(??___ftdiv+2)& (0+255),c
 14165  002DB2  3424               	rlcf	___ftdiv@f1+1,w,c
 14166  002DB4  3629               	rlcf	??___ftdiv& (0+255),f,c
 14167  002DB6  E301               	bnc	u7791
 14168  002DB8  802A               	bsf	(??___ftdiv+1)& (0+255),0,c
 14169  002DBA                     u7791:
 14170  002DBA  5029               	movf	??___ftdiv,w,c
 14171  002DBC  6E30               	movwf	___ftdiv@exp,c
 14172  002DBE  5030               	movf	___ftdiv@exp,w,c
 14173  002DC0  A4D8               	btfss	status,2,c
 14174  002DC2  D007               	goto	l7739
 14175  002DC4  0E00               	movlw	0
 14176  002DC6  6E23               	movwf	?___ftdiv,c
 14177  002DC8  0E00               	movlw	0
 14178  002DCA  6E24               	movwf	?___ftdiv+1,c
 14179  002DCC  0E00               	movlw	0
 14180  002DCE  6E25               	movwf	?___ftdiv+2,c
 14181  002DD0  0012               	return	
 14182  002DD2                     l7739:
 14183  002DD2  C028  F029         	movff	___ftdiv@f2+2,??___ftdiv
 14184  002DD6  6A2A               	clrf	(??___ftdiv+1)& (0+255),c
 14185  002DD8  6A2B               	clrf	(??___ftdiv+2)& (0+255),c
 14186  002DDA  3427               	rlcf	___ftdiv@f2+1,w,c
 14187  002DDC  3629               	rlcf	??___ftdiv& (0+255),f,c
 14188  002DDE  E301               	bnc	u7811
 14189  002DE0  802A               	bsf	(??___ftdiv+1)& (0+255),0,c
 14190  002DE2                     u7811:
 14191  002DE2  5029               	movf	??___ftdiv,w,c
 14192  002DE4  6E31               	movwf	___ftdiv@sign,c
 14193  002DE6  5031               	movf	___ftdiv@sign,w,c
 14194  002DE8  A4D8               	btfss	status,2,c
 14195  002DEA  D007               	goto	l7745
 14196  002DEC  0E00               	movlw	0
 14197  002DEE  6E23               	movwf	?___ftdiv,c
 14198  002DF0  0E00               	movlw	0
 14199  002DF2  6E24               	movwf	?___ftdiv+1,c
 14200  002DF4  0E00               	movlw	0
 14201  002DF6  6E25               	movwf	?___ftdiv+2,c
 14202  002DF8  0012               	return	
 14203  002DFA                     l7745:
 14204  002DFA  0E00               	movlw	0
 14205  002DFC  6E2D               	movwf	___ftdiv@f3,c
 14206  002DFE  0E00               	movlw	0
 14207  002E00  6E2E               	movwf	___ftdiv@f3+1,c
 14208  002E02  0E00               	movlw	0
 14209  002E04  6E2F               	movwf	___ftdiv@f3+2,c
 14210  002E06  5031               	movf	___ftdiv@sign,w,c
 14211  002E08  0F89               	addlw	137
 14212  002E0A  5E30               	subwf	___ftdiv@exp,f,c
 14213  002E0C  C025  F031         	movff	___ftdiv@f1+2,___ftdiv@sign
 14214  002E10  5028               	movf	___ftdiv@f2+2,w,c
 14215  002E12  1A31               	xorwf	___ftdiv@sign,f,c
 14216  002E14  0E80               	movlw	128
 14217  002E16  1631               	andwf	___ftdiv@sign,f,c
 14218  002E18  8E24               	bsf	___ftdiv@f1+1,7,c
 14219  002E1A  0EFF               	movlw	255
 14220  002E1C  1623               	andwf	___ftdiv@f1,f,c
 14221  002E1E  0EFF               	movlw	255
 14222  002E20  1624               	andwf	___ftdiv@f1+1,f,c
 14223  002E22  0E00               	movlw	0
 14224  002E24  1625               	andwf	___ftdiv@f1+2,f,c
 14225  002E26  8E27               	bsf	___ftdiv@f2+1,7,c
 14226  002E28  0EFF               	movlw	255
 14227  002E2A  1626               	andwf	___ftdiv@f2,f,c
 14228  002E2C  0EFF               	movlw	255
 14229  002E2E  1627               	andwf	___ftdiv@f2+1,f,c
 14230  002E30  0E00               	movlw	0
 14231  002E32  1628               	andwf	___ftdiv@f2+2,f,c
 14232  002E34  0E18               	movlw	24
 14233  002E36  6E2C               	movwf	___ftdiv@cntr,c
 14234  002E38                     l7765:
 14235  002E38  90D8               	bcf	status,0,c
 14236  002E3A  362D               	rlcf	___ftdiv@f3,f,c
 14237  002E3C  362E               	rlcf	___ftdiv@f3+1,f,c
 14238  002E3E  362F               	rlcf	___ftdiv@f3+2,f,c
 14239  002E40  5026               	movf	___ftdiv@f2,w,c
 14240  002E42  5C23               	subwf	___ftdiv@f1,w,c
 14241  002E44  5027               	movf	___ftdiv@f2+1,w,c
 14242  002E46  5824               	subwfb	___ftdiv@f1+1,w,c
 14243  002E48  5028               	movf	___ftdiv@f2+2,w,c
 14244  002E4A  5825               	subwfb	___ftdiv@f1+2,w,c
 14245  002E4C  A0D8               	btfss	status,0,c
 14246  002E4E  D007               	goto	l1435
 14247  002E50  5026               	movf	___ftdiv@f2,w,c
 14248  002E52  5E23               	subwf	___ftdiv@f1,f,c
 14249  002E54  5027               	movf	___ftdiv@f2+1,w,c
 14250  002E56  5A24               	subwfb	___ftdiv@f1+1,f,c
 14251  002E58  5028               	movf	___ftdiv@f2+2,w,c
 14252  002E5A  5A25               	subwfb	___ftdiv@f1+2,f,c
 14253  002E5C  802D               	bsf	___ftdiv@f3,0,c
 14254  002E5E                     l1435:
 14255  002E5E  90D8               	bcf	status,0,c
 14256  002E60  3623               	rlcf	___ftdiv@f1,f,c
 14257  002E62  3624               	rlcf	___ftdiv@f1+1,f,c
 14258  002E64  3625               	rlcf	___ftdiv@f1+2,f,c
 14259  002E66  2E2C               	decfsz	___ftdiv@cntr,f,c
 14260  002E68  D7E7               	goto	l7765
 14261  002E6A  C02D  F00F         	movff	___ftdiv@f3,___ftpack@arg
 14262  002E6E  C02E  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
 14263  002E72  C02F  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
 14264  002E76  C030  F012         	movff	___ftdiv@exp,___ftpack@exp
 14265  002E7A  C031  F013         	movff	___ftdiv@sign,___ftpack@sign
 14266  002E7E  ECEB  F018         	call	___ftpack	;wreg free
 14267  002E82  C00F  F023         	movff	?___ftpack,?___ftdiv
 14268  002E86  C010  F024         	movff	?___ftpack+1,?___ftdiv+1
 14269  002E8A  C011  F025         	movff	?___ftpack+2,?___ftdiv+2
 14270  002E8E  0012               	return	
 14271  002E90                     __end_of___ftdiv:
 14272                           	opt stack 0
 14273                           tblptru	equ	0xFF8
 14274                           tblptrh	equ	0xFF7
 14275                           tblptrl	equ	0xFF6
 14276                           tablat	equ	0xFF5
 14277                           prodh	equ	0xFF4
 14278                           prodl	equ	0xFF3
 14279                           intcon	equ	0xFF2
 14280                           intcon2	equ	0xFF1
 14281                           postinc0	equ	0xFEE
 14282                           wreg	equ	0xFE8
 14283                           postinc1	equ	0xFE6
 14284                           postdec1	equ	0xFE5
 14285                           fsr1h	equ	0xFE2
 14286                           fsr1l	equ	0xFE1
 14287                           indf2	equ	0xFDF
 14288                           postinc2	equ	0xFDE
 14289                           postdec2	equ	0xFDD
 14290                           fsr2h	equ	0xFDA
 14291                           fsr2l	equ	0xFD9
 14292                           status	equ	0xFD8
 14293                           
 14294 ;; *************** function ___ftadd *****************
 14295 ;; Defined at:
 14296 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 14297 ;; Parameters:    Size  Location     Type
 14298 ;;  f1              3   10[BANK0 ] float 
 14299 ;;  f2              3   13[BANK0 ] float 
 14300 ;; Auto vars:     Size  Location     Type
 14301 ;;  exp1            1   21[BANK0 ] unsigned char 
 14302 ;;  exp2            1   20[BANK0 ] unsigned char 
 14303 ;;  sign            1   19[BANK0 ] unsigned char 
 14304 ;; Return value:  Size  Location     Type
 14305 ;;                  3   10[BANK0 ] float 
 14306 ;; Registers used:
 14307 ;;		wreg, status,2, status,0, cstack
 14308 ;; Tracked objects:
 14309 ;;		On entry : 0/0
 14310 ;;		On exit  : 0/0
 14311 ;;		Unchanged: 0/0
 14312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14313 ;;      Params:         0       6       0       0       0       0       0
 14314 ;;      Locals:         0       3       0       0       0       0       0
 14315 ;;      Temps:          0       3       0       0       0       0       0
 14316 ;;      Totals:         0      12       0       0       0       0       0
 14317 ;;Total ram usage:       12 bytes
 14318 ;; Hardware stack levels used:    1
 14319 ;; Hardware stack levels required when called:    4
 14320 ;; This function calls:
 14321 ;;		___ftpack
 14322 ;; This function is called by:
 14323 ;;		_Temp_Filter
 14324 ;;		_Temp_Convert
 14325 ;;		_ReadVoltToCurrent
 14326 ;;		_printf
 14327 ;;		___ftsub
 14328 ;;		_log
 14329 ;;		_eval_poly
 14330 ;;		_CheckTestReading
 14331 ;;		_CurrentCoulombCount
 14332 ;; This function uses a non-reentrant model
 14333 ;;
 14334                           
 14335                           	psect	text64
 14336  001B7A                     __ptext64:
 14337                           	opt stack 0
 14338  001B7A                     ___ftadd:
 14339                           	opt stack 24
 14340                           
 14341                           ;incstack = 0
 14342  001B7A  C06C  F070         	movff	___ftadd@f1+2,??___ftadd
 14343  001B7E  0100               	movlb	0	; () banked
 14344  001B80  6B71               	clrf	(??___ftadd+1)& (0+255),b
 14345  001B82  6B72               	clrf	(??___ftadd+2)& (0+255),b
 14346  001B84  0100               	movlb	0	; () banked
 14347  001B86  356B               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 14348  001B88  0100               	movlb	0	; () banked
 14349  001B8A  3770               	rlcf	??___ftadd& (0+255),f,b
 14350  001B8C  E301               	bnc	u7021
 14351  001B8E  8171               	bsf	(??___ftadd+1)& (0+255),0,b
 14352  001B90                     u7021:
 14353  001B90  0100               	movlb	0	; () banked
 14354  001B92  5170               	movf	??___ftadd& (0+255),w,b
 14355  001B94  0100               	movlb	0	; () banked
 14356  001B96  6F75               	movwf	___ftadd@exp1& (0+255),b
 14357  001B98  C06F  F070         	movff	___ftadd@f2+2,??___ftadd
 14358  001B9C  0100               	movlb	0	; () banked
 14359  001B9E  6B71               	clrf	(??___ftadd+1)& (0+255),b
 14360  001BA0  6B72               	clrf	(??___ftadd+2)& (0+255),b
 14361  001BA2  0100               	movlb	0	; () banked
 14362  001BA4  356E               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 14363  001BA6  0100               	movlb	0	; () banked
 14364  001BA8  3770               	rlcf	??___ftadd& (0+255),f,b
 14365  001BAA  E301               	bnc	u7031
 14366  001BAC  8171               	bsf	(??___ftadd+1)& (0+255),0,b
 14367  001BAE                     u7031:
 14368  001BAE  0100               	movlb	0	; () banked
 14369  001BB0  5170               	movf	??___ftadd& (0+255),w,b
 14370  001BB2  0100               	movlb	0	; () banked
 14371  001BB4  6F74               	movwf	___ftadd@exp2& (0+255),b
 14372                           
 14373                           ; BSR set to: 0
 14374  001BB6  0100               	movlb	0	; () banked
 14375  001BB8  5175               	movf	___ftadd@exp1& (0+255),w,b
 14376  001BBA  0100               	movlb	0	; () banked
 14377  001BBC  B4D8               	btfsc	status,2,c
 14378  001BBE  D011               	goto	l1400
 14379                           
 14380                           ; BSR set to: 0
 14381  001BC0  0100               	movlb	0	; () banked
 14382  001BC2  5174               	movf	___ftadd@exp2& (0+255),w,b
 14383  001BC4  0100               	movlb	0	; () banked
 14384  001BC6  5D75               	subwf	___ftadd@exp1& (0+255),w,b
 14385  001BC8  B0D8               	btfsc	status,0,c
 14386  001BCA  D012               	goto	l7229
 14387                           
 14388                           ; BSR set to: 0
 14389  001BCC  0100               	movlb	0	; () banked
 14390  001BCE  5175               	movf	___ftadd@exp1& (0+255),w,b
 14391  001BD0  0800               	sublw	0
 14392  001BD2  0100               	movlb	0	; () banked
 14393  001BD4  2574               	addwf	___ftadd@exp2& (0+255),w,b
 14394  001BD6  0100               	movlb	0	; () banked
 14395  001BD8  6F70               	movwf	??___ftadd& (0+255),b
 14396  001BDA  0E18               	movlw	24
 14397  001BDC  0100               	movlb	0	; () banked
 14398  001BDE  6570               	cpfsgt	??___ftadd& (0+255),b
 14399  001BE0  D007               	goto	l7229
 14400  001BE2                     l1400:
 14401                           
 14402                           ; BSR set to: 0
 14403  001BE2  C06D  F06A         	movff	___ftadd@f2,?___ftadd
 14404  001BE6  C06E  F06B         	movff	___ftadd@f2+1,?___ftadd+1
 14405  001BEA  C06F  F06C         	movff	___ftadd@f2+2,?___ftadd+2
 14406  001BEE  0012               	return	
 14407  001BF0                     l7229:
 14408                           
 14409                           ; BSR set to: 0
 14410  001BF0  0100               	movlb	0	; () banked
 14411  001BF2  5174               	movf	___ftadd@exp2& (0+255),w,b
 14412  001BF4  0100               	movlb	0	; () banked
 14413  001BF6  B4D8               	btfsc	status,2,c
 14414  001BF8  D011               	goto	l1404
 14415                           
 14416                           ; BSR set to: 0
 14417  001BFA  0100               	movlb	0	; () banked
 14418  001BFC  5175               	movf	___ftadd@exp1& (0+255),w,b
 14419  001BFE  0100               	movlb	0	; () banked
 14420  001C00  5D74               	subwf	___ftadd@exp2& (0+255),w,b
 14421  001C02  B0D8               	btfsc	status,0,c
 14422  001C04  D012               	goto	l7235
 14423                           
 14424                           ; BSR set to: 0
 14425  001C06  0100               	movlb	0	; () banked
 14426  001C08  5174               	movf	___ftadd@exp2& (0+255),w,b
 14427  001C0A  0800               	sublw	0
 14428  001C0C  0100               	movlb	0	; () banked
 14429  001C0E  2575               	addwf	___ftadd@exp1& (0+255),w,b
 14430  001C10  0100               	movlb	0	; () banked
 14431  001C12  6F70               	movwf	??___ftadd& (0+255),b
 14432  001C14  0E18               	movlw	24
 14433  001C16  0100               	movlb	0	; () banked
 14434  001C18  6570               	cpfsgt	??___ftadd& (0+255),b
 14435  001C1A  D007               	goto	l7235
 14436  001C1C                     l1404:
 14437                           
 14438                           ; BSR set to: 0
 14439  001C1C  C06A  F06A         	movff	___ftadd@f1,?___ftadd
 14440  001C20  C06B  F06B         	movff	___ftadd@f1+1,?___ftadd+1
 14441  001C24  C06C  F06C         	movff	___ftadd@f1+2,?___ftadd+2
 14442  001C28  0012               	return	
 14443  001C2A                     l7235:
 14444                           
 14445                           ; BSR set to: 0
 14446  001C2A  0E06               	movlw	6
 14447  001C2C  0100               	movlb	0	; () banked
 14448  001C2E  6F73               	movwf	___ftadd@sign& (0+255),b
 14449                           
 14450                           ; BSR set to: 0
 14451  001C30  0100               	movlb	0	; () banked
 14452  001C32  AF6C               	btfss	(___ftadd@f1+2)& (0+255),7,b
 14453  001C34  D002               	goto	l7241
 14454                           
 14455                           ; BSR set to: 0
 14456  001C36  0100               	movlb	0	; () banked
 14457  001C38  8F73               	bsf	___ftadd@sign& (0+255),7,b
 14458  001C3A                     l7241:
 14459                           
 14460                           ; BSR set to: 0
 14461  001C3A  0100               	movlb	0	; () banked
 14462  001C3C  AF6F               	btfss	(___ftadd@f2+2)& (0+255),7,b
 14463  001C3E  D002               	goto	l1406
 14464                           
 14465                           ; BSR set to: 0
 14466  001C40  0100               	movlb	0	; () banked
 14467  001C42  8D73               	bsf	___ftadd@sign& (0+255),6,b
 14468  001C44                     l1406:
 14469                           
 14470                           ; BSR set to: 0
 14471  001C44  0100               	movlb	0	; () banked
 14472  001C46  8F6B               	bsf	(___ftadd@f1+1)& (0+255),7,b
 14473                           
 14474                           ; BSR set to: 0
 14475  001C48  0EFF               	movlw	255
 14476  001C4A  0100               	movlb	0	; () banked
 14477  001C4C  176A               	andwf	___ftadd@f1& (0+255),f,b
 14478  001C4E  0EFF               	movlw	255
 14479  001C50  0100               	movlb	0	; () banked
 14480  001C52  176B               	andwf	(___ftadd@f1+1)& (0+255),f,b
 14481  001C54  0E00               	movlw	0
 14482  001C56  0100               	movlb	0	; () banked
 14483  001C58  176C               	andwf	(___ftadd@f1+2)& (0+255),f,b
 14484  001C5A  0100               	movlb	0	; () banked
 14485  001C5C  8F6E               	bsf	(___ftadd@f2+1)& (0+255),7,b
 14486                           
 14487                           ; BSR set to: 0
 14488  001C5E  0EFF               	movlw	255
 14489  001C60  0100               	movlb	0	; () banked
 14490  001C62  176D               	andwf	___ftadd@f2& (0+255),f,b
 14491  001C64  0EFF               	movlw	255
 14492  001C66  0100               	movlb	0	; () banked
 14493  001C68  176E               	andwf	(___ftadd@f2+1)& (0+255),f,b
 14494  001C6A  0E00               	movlw	0
 14495  001C6C  0100               	movlb	0	; () banked
 14496  001C6E  176F               	andwf	(___ftadd@f2+2)& (0+255),f,b
 14497                           
 14498                           ; BSR set to: 0
 14499  001C70  0100               	movlb	0	; () banked
 14500  001C72  5174               	movf	___ftadd@exp2& (0+255),w,b
 14501  001C74  0100               	movlb	0	; () banked
 14502  001C76  5D75               	subwf	___ftadd@exp1& (0+255),w,b
 14503  001C78  B0D8               	btfsc	status,0,c
 14504  001C7A  D025               	goto	l7261
 14505  001C7C                     l7251:
 14506                           
 14507                           ; BSR set to: 0
 14508  001C7C  0100               	movlb	0	; () banked
 14509  001C7E  90D8               	bcf	status,0,c
 14510  001C80  376D               	rlcf	___ftadd@f2& (0+255),f,b
 14511  001C82  376E               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 14512  001C84  376F               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 14513  001C86  0100               	movlb	0	; () banked
 14514  001C88  0774               	decf	___ftadd@exp2& (0+255),f,b
 14515                           
 14516                           ; BSR set to: 0
 14517  001C8A  0100               	movlb	0	; () banked
 14518  001C8C  5175               	movf	___ftadd@exp1& (0+255),w,b
 14519  001C8E  0100               	movlb	0	; () banked
 14520  001C90  1974               	xorwf	___ftadd@exp2& (0+255),w,b
 14521  001C92  B4D8               	btfsc	status,2,c
 14522  001C94  D011               	goto	l7259
 14523                           
 14524                           ; BSR set to: 0
 14525  001C96  0100               	movlb	0	; () banked
 14526  001C98  0773               	decf	___ftadd@sign& (0+255),f,b
 14527  001C9A  C073  F070         	movff	___ftadd@sign,??___ftadd
 14528  001C9E  0E07               	movlw	7
 14529  001CA0  0100               	movlb	0	; () banked
 14530  001CA2  1770               	andwf	??___ftadd& (0+255),f,b
 14531  001CA4  B4D8               	btfsc	status,2,c
 14532  001CA6  D008               	goto	l7259
 14533  001CA8  D7E9               	goto	l7251
 14534  001CAA                     l7257:
 14535                           
 14536                           ; BSR set to: 0
 14537  001CAA  0100               	movlb	0	; () banked
 14538  001CAC  90D8               	bcf	status,0,c
 14539  001CAE  336C               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 14540  001CB0  336B               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 14541  001CB2  336A               	rrcf	___ftadd@f1& (0+255),f,b
 14542  001CB4  0100               	movlb	0	; () banked
 14543  001CB6  2B75               	incf	___ftadd@exp1& (0+255),f,b
 14544  001CB8                     l7259:
 14545                           
 14546                           ; BSR set to: 0
 14547  001CB8  0100               	movlb	0	; () banked
 14548  001CBA  5174               	movf	___ftadd@exp2& (0+255),w,b
 14549  001CBC  0100               	movlb	0	; () banked
 14550  001CBE  1975               	xorwf	___ftadd@exp1& (0+255),w,b
 14551  001CC0  B4D8               	btfsc	status,2,c
 14552  001CC2  D02B               	goto	l1415
 14553  001CC4  D7F2               	goto	l7257
 14554  001CC6                     l7261:
 14555                           
 14556                           ; BSR set to: 0
 14557  001CC6  0100               	movlb	0	; () banked
 14558  001CC8  5175               	movf	___ftadd@exp1& (0+255),w,b
 14559  001CCA  0100               	movlb	0	; () banked
 14560  001CCC  5D74               	subwf	___ftadd@exp2& (0+255),w,b
 14561  001CCE  B0D8               	btfsc	status,0,c
 14562  001CD0  D024               	goto	l1415
 14563  001CD2                     l7263:
 14564                           
 14565                           ; BSR set to: 0
 14566  001CD2  0100               	movlb	0	; () banked
 14567  001CD4  90D8               	bcf	status,0,c
 14568  001CD6  376A               	rlcf	___ftadd@f1& (0+255),f,b
 14569  001CD8  376B               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 14570  001CDA  376C               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 14571  001CDC  0100               	movlb	0	; () banked
 14572  001CDE  0775               	decf	___ftadd@exp1& (0+255),f,b
 14573                           
 14574                           ; BSR set to: 0
 14575  001CE0  0100               	movlb	0	; () banked
 14576  001CE2  5175               	movf	___ftadd@exp1& (0+255),w,b
 14577  001CE4  0100               	movlb	0	; () banked
 14578  001CE6  1974               	xorwf	___ftadd@exp2& (0+255),w,b
 14579  001CE8  B4D8               	btfsc	status,2,c
 14580  001CEA  D011               	goto	l7271
 14581                           
 14582                           ; BSR set to: 0
 14583  001CEC  0100               	movlb	0	; () banked
 14584  001CEE  0773               	decf	___ftadd@sign& (0+255),f,b
 14585  001CF0  C073  F070         	movff	___ftadd@sign,??___ftadd
 14586  001CF4  0E07               	movlw	7
 14587  001CF6  0100               	movlb	0	; () banked
 14588  001CF8  1770               	andwf	??___ftadd& (0+255),f,b
 14589  001CFA  B4D8               	btfsc	status,2,c
 14590  001CFC  D008               	goto	l7271
 14591  001CFE  D7E9               	goto	l7263
 14592  001D00                     l7269:
 14593                           
 14594                           ; BSR set to: 0
 14595  001D00  0100               	movlb	0	; () banked
 14596  001D02  90D8               	bcf	status,0,c
 14597  001D04  336F               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 14598  001D06  336E               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 14599  001D08  336D               	rrcf	___ftadd@f2& (0+255),f,b
 14600  001D0A  0100               	movlb	0	; () banked
 14601  001D0C  2B74               	incf	___ftadd@exp2& (0+255),f,b
 14602  001D0E                     l7271:
 14603                           
 14604                           ; BSR set to: 0
 14605  001D0E  0100               	movlb	0	; () banked
 14606  001D10  5174               	movf	___ftadd@exp2& (0+255),w,b
 14607  001D12  0100               	movlb	0	; () banked
 14608  001D14  1975               	xorwf	___ftadd@exp1& (0+255),w,b
 14609  001D16  A4D8               	btfss	status,2,c
 14610  001D18  D7F3               	goto	l7269
 14611  001D1A                     l1415:
 14612                           
 14613                           ; BSR set to: 0
 14614  001D1A  0100               	movlb	0	; () banked
 14615  001D1C  AF73               	btfss	___ftadd@sign& (0+255),7,b
 14616  001D1E  D012               	goto	l1424
 14617                           
 14618                           ; BSR set to: 0
 14619  001D20  0EFF               	movlw	255
 14620  001D22  0100               	movlb	0	; () banked
 14621  001D24  1B6A               	xorwf	___ftadd@f1& (0+255),f,b
 14622  001D26  0EFF               	movlw	255
 14623  001D28  0100               	movlb	0	; () banked
 14624  001D2A  1B6B               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 14625  001D2C  0EFF               	movlw	255
 14626  001D2E  0100               	movlb	0	; () banked
 14627  001D30  1B6C               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 14628  001D32  0E01               	movlw	1
 14629  001D34  0100               	movlb	0	; () banked
 14630  001D36  276A               	addwf	___ftadd@f1& (0+255),f,b
 14631  001D38  0E00               	movlw	0
 14632  001D3A  0100               	movlb	0	; () banked
 14633  001D3C  236B               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 14634  001D3E  0E00               	movlw	0
 14635  001D40  0100               	movlb	0	; () banked
 14636  001D42  236C               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 14637  001D44                     l1424:
 14638                           
 14639                           ; BSR set to: 0
 14640  001D44  0100               	movlb	0	; () banked
 14641  001D46  AD73               	btfss	___ftadd@sign& (0+255),6,b
 14642  001D48  D012               	goto	l7277
 14643                           
 14644                           ; BSR set to: 0
 14645  001D4A  0EFF               	movlw	255
 14646  001D4C  0100               	movlb	0	; () banked
 14647  001D4E  1B6D               	xorwf	___ftadd@f2& (0+255),f,b
 14648  001D50  0EFF               	movlw	255
 14649  001D52  0100               	movlb	0	; () banked
 14650  001D54  1B6E               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 14651  001D56  0EFF               	movlw	255
 14652  001D58  0100               	movlb	0	; () banked
 14653  001D5A  1B6F               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 14654  001D5C  0E01               	movlw	1
 14655  001D5E  0100               	movlb	0	; () banked
 14656  001D60  276D               	addwf	___ftadd@f2& (0+255),f,b
 14657  001D62  0E00               	movlw	0
 14658  001D64  0100               	movlb	0	; () banked
 14659  001D66  236E               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14660  001D68  0E00               	movlw	0
 14661  001D6A  0100               	movlb	0	; () banked
 14662  001D6C  236F               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14663  001D6E                     l7277:
 14664                           
 14665                           ; BSR set to: 0
 14666  001D6E  0E00               	movlw	0
 14667  001D70  0100               	movlb	0	; () banked
 14668  001D72  6F73               	movwf	___ftadd@sign& (0+255),b
 14669                           
 14670                           ; BSR set to: 0
 14671  001D74  0100               	movlb	0	; () banked
 14672  001D76  516A               	movf	___ftadd@f1& (0+255),w,b
 14673  001D78  0100               	movlb	0	; () banked
 14674  001D7A  276D               	addwf	___ftadd@f2& (0+255),f,b
 14675  001D7C  0100               	movlb	0	; () banked
 14676  001D7E  516B               	movf	(___ftadd@f1+1)& (0+255),w,b
 14677  001D80  0100               	movlb	0	; () banked
 14678  001D82  236E               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14679  001D84  0100               	movlb	0	; () banked
 14680  001D86  516C               	movf	(___ftadd@f1+2)& (0+255),w,b
 14681  001D88  0100               	movlb	0	; () banked
 14682  001D8A  236F               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14683                           
 14684                           ; BSR set to: 0
 14685  001D8C  0100               	movlb	0	; () banked
 14686  001D8E  AF6F               	btfss	(___ftadd@f2+2)& (0+255),7,b
 14687  001D90  D015               	goto	l7287
 14688                           
 14689                           ; BSR set to: 0
 14690  001D92  0EFF               	movlw	255
 14691  001D94  0100               	movlb	0	; () banked
 14692  001D96  1B6D               	xorwf	___ftadd@f2& (0+255),f,b
 14693  001D98  0EFF               	movlw	255
 14694  001D9A  0100               	movlb	0	; () banked
 14695  001D9C  1B6E               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 14696  001D9E  0EFF               	movlw	255
 14697  001DA0  0100               	movlb	0	; () banked
 14698  001DA2  1B6F               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 14699  001DA4  0E01               	movlw	1
 14700  001DA6  0100               	movlb	0	; () banked
 14701  001DA8  276D               	addwf	___ftadd@f2& (0+255),f,b
 14702  001DAA  0E00               	movlw	0
 14703  001DAC  0100               	movlb	0	; () banked
 14704  001DAE  236E               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14705  001DB0  0E00               	movlw	0
 14706  001DB2  0100               	movlb	0	; () banked
 14707  001DB4  236F               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14708                           
 14709                           ; BSR set to: 0
 14710  001DB6  0E01               	movlw	1
 14711  001DB8  0100               	movlb	0	; () banked
 14712  001DBA  6F73               	movwf	___ftadd@sign& (0+255),b
 14713  001DBC                     l7287:
 14714                           
 14715                           ; BSR set to: 0
 14716  001DBC  C06D  F00F         	movff	___ftadd@f2,___ftpack@arg
 14717  001DC0  C06E  F010         	movff	___ftadd@f2+1,___ftpack@arg+1
 14718  001DC4  C06F  F011         	movff	___ftadd@f2+2,___ftpack@arg+2
 14719  001DC8  C075  F012         	movff	___ftadd@exp1,___ftpack@exp
 14720  001DCC  C073  F013         	movff	___ftadd@sign,___ftpack@sign
 14721  001DD0  ECEB  F018         	call	___ftpack	;wreg free
 14722  001DD4  C00F  F06A         	movff	?___ftpack,?___ftadd
 14723  001DD8  C010  F06B         	movff	?___ftpack+1,?___ftadd+1
 14724  001DDC  C011  F06C         	movff	?___ftpack+2,?___ftadd+2
 14725  001DE0  0012               	return	
 14726  001DE2                     __end_of___ftadd:
 14727                           	opt stack 0
 14728                           tblptru	equ	0xFF8
 14729                           tblptrh	equ	0xFF7
 14730                           tblptrl	equ	0xFF6
 14731                           tablat	equ	0xFF5
 14732                           prodh	equ	0xFF4
 14733                           prodl	equ	0xFF3
 14734                           intcon	equ	0xFF2
 14735                           intcon2	equ	0xFF1
 14736                           postinc0	equ	0xFEE
 14737                           wreg	equ	0xFE8
 14738                           postinc1	equ	0xFE6
 14739                           postdec1	equ	0xFE5
 14740                           fsr1h	equ	0xFE2
 14741                           fsr1l	equ	0xFE1
 14742                           indf2	equ	0xFDF
 14743                           postinc2	equ	0xFDE
 14744                           postdec2	equ	0xFDD
 14745                           fsr2h	equ	0xFDA
 14746                           fsr2l	equ	0xFD9
 14747                           status	equ	0xFD8
 14748                           
 14749 ;; *************** function ___awtoft *****************
 14750 ;; Defined at:
 14751 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 14752 ;; Parameters:    Size  Location     Type
 14753 ;;  c               2   22[COMRAM] int 
 14754 ;; Auto vars:     Size  Location     Type
 14755 ;;  sign            1   25[COMRAM] unsigned char 
 14756 ;; Return value:  Size  Location     Type
 14757 ;;                  3   22[COMRAM] float 
 14758 ;; Registers used:
 14759 ;;		wreg, status,2, status,0, cstack
 14760 ;; Tracked objects:
 14761 ;;		On entry : 0/0
 14762 ;;		On exit  : 0/0
 14763 ;;		Unchanged: 0/0
 14764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14765 ;;      Params:         3       0       0       0       0       0       0
 14766 ;;      Locals:         1       0       0       0       0       0       0
 14767 ;;      Temps:          0       0       0       0       0       0       0
 14768 ;;      Totals:         4       0       0       0       0       0       0
 14769 ;;Total ram usage:        4 bytes
 14770 ;; Hardware stack levels used:    1
 14771 ;; Hardware stack levels required when called:    4
 14772 ;; This function calls:
 14773 ;;		___ftpack
 14774 ;; This function is called by:
 14775 ;;		_Temp_Convert
 14776 ;;		_Run_Mode
 14777 ;;		_ReadVoltToCurrent
 14778 ;;		_log
 14779 ;;		_CheckTestReading
 14780 ;;		_CurrentCoulombCount
 14781 ;; This function uses a non-reentrant model
 14782 ;;
 14783                           
 14784                           	psect	text65
 14785  003C38                     __ptext65:
 14786                           	opt stack 0
 14787  003C38                     ___awtoft:
 14788                           	opt stack 25
 14789                           
 14790                           ;incstack = 0
 14791  003C38  0E00               	movlw	0
 14792  003C3A  6E1A               	movwf	___awtoft@sign,c
 14793  003C3C  AE18               	btfss	___awtoft@c+1,7,c
 14794  003C3E  D006               	goto	l7445
 14795  003C40  6C17               	negf	___awtoft@c,c
 14796  003C42  1E18               	comf	___awtoft@c+1,f,c
 14797  003C44  B0D8               	btfsc	status,0,c
 14798  003C46  2A18               	incf	___awtoft@c+1,f,c
 14799  003C48  0E01               	movlw	1
 14800  003C4A  6E1A               	movwf	___awtoft@sign,c
 14801  003C4C                     l7445:
 14802  003C4C  C017  F00F         	movff	___awtoft@c,___ftpack@arg
 14803  003C50  C018  F010         	movff	___awtoft@c+1,___ftpack@arg+1
 14804  003C54  6A11               	clrf	___ftpack@arg+2,c
 14805  003C56  0E8E               	movlw	142
 14806  003C58  6E12               	movwf	___ftpack@exp,c
 14807  003C5A  C01A  F013         	movff	___awtoft@sign,___ftpack@sign
 14808  003C5E  ECEB  F018         	call	___ftpack	;wreg free
 14809  003C62  C00F  F017         	movff	?___ftpack,?___awtoft
 14810  003C66  C010  F018         	movff	?___ftpack+1,?___awtoft+1
 14811  003C6A  C011  F019         	movff	?___ftpack+2,?___awtoft+2
 14812  003C6E  0012               	return	
 14813  003C70                     __end_of___awtoft:
 14814                           	opt stack 0
 14815                           tblptru	equ	0xFF8
 14816                           tblptrh	equ	0xFF7
 14817                           tblptrl	equ	0xFF6
 14818                           tablat	equ	0xFF5
 14819                           prodh	equ	0xFF4
 14820                           prodl	equ	0xFF3
 14821                           intcon	equ	0xFF2
 14822                           intcon2	equ	0xFF1
 14823                           postinc0	equ	0xFEE
 14824                           wreg	equ	0xFE8
 14825                           postinc1	equ	0xFE6
 14826                           postdec1	equ	0xFE5
 14827                           fsr1h	equ	0xFE2
 14828                           fsr1l	equ	0xFE1
 14829                           indf2	equ	0xFDF
 14830                           postinc2	equ	0xFDE
 14831                           postdec2	equ	0xFDD
 14832                           fsr2h	equ	0xFDA
 14833                           fsr2l	equ	0xFD9
 14834                           status	equ	0xFD8
 14835                           
 14836 ;; *************** function ___ftpack *****************
 14837 ;; Defined at:
 14838 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 14839 ;; Parameters:    Size  Location     Type
 14840 ;;  arg             3   14[COMRAM] unsigned um
 14841 ;;  exp             1   17[COMRAM] unsigned char 
 14842 ;;  sign            1   18[COMRAM] unsigned char 
 14843 ;; Auto vars:     Size  Location     Type
 14844 ;;		None
 14845 ;; Return value:  Size  Location     Type
 14846 ;;                  3   14[COMRAM] float 
 14847 ;; Registers used:
 14848 ;;		wreg, status,2, status,0
 14849 ;; Tracked objects:
 14850 ;;		On entry : 0/0
 14851 ;;		On exit  : 0/0
 14852 ;;		Unchanged: 0/0
 14853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14854 ;;      Params:         5       0       0       0       0       0       0
 14855 ;;      Locals:         0       0       0       0       0       0       0
 14856 ;;      Temps:          3       0       0       0       0       0       0
 14857 ;;      Totals:         8       0       0       0       0       0       0
 14858 ;;Total ram usage:        8 bytes
 14859 ;; Hardware stack levels used:    1
 14860 ;; Hardware stack levels required when called:    3
 14861 ;; This function calls:
 14862 ;;		Nothing
 14863 ;; This function is called by:
 14864 ;;		___awtoft
 14865 ;;		___ftadd
 14866 ;;		___ftdiv
 14867 ;;		___ftmul
 14868 ;;		___lltoft
 14869 ;;		___lwtoft
 14870 ;; This function uses a non-reentrant model
 14871 ;;
 14872                           
 14873                           	psect	text66
 14874  0031D6                     __ptext66:
 14875                           	opt stack 0
 14876  0031D6                     ___ftpack:
 14877                           	opt stack 24
 14878                           
 14879                           ;incstack = 0
 14880  0031D6  5012               	movf	___ftpack@exp,w,c
 14881  0031D8  B4D8               	btfsc	status,2,c
 14882  0031DA  D005               	goto	l7183
 14883  0031DC  500F               	movf	___ftpack@arg,w,c
 14884  0031DE  1010               	iorwf	___ftpack@arg+1,w,c
 14885  0031E0  1011               	iorwf	___ftpack@arg+2,w,c
 14886  0031E2  A4D8               	btfss	status,2,c
 14887  0031E4  D00C               	goto	l7189
 14888  0031E6                     l7183:
 14889  0031E6  0E00               	movlw	0
 14890  0031E8  6E0F               	movwf	?___ftpack,c
 14891  0031EA  0E00               	movlw	0
 14892  0031EC  6E10               	movwf	?___ftpack+1,c
 14893  0031EE  0E00               	movlw	0
 14894  0031F0  6E11               	movwf	?___ftpack+2,c
 14895  0031F2  0012               	return	
 14896  0031F4                     l7187:
 14897  0031F4  2A12               	incf	___ftpack@exp,f,c
 14898  0031F6  90D8               	bcf	status,0,c
 14899  0031F8  3211               	rrcf	___ftpack@arg+2,f,c
 14900  0031FA  3210               	rrcf	___ftpack@arg+1,f,c
 14901  0031FC  320F               	rrcf	___ftpack@arg,f,c
 14902  0031FE                     l7189:
 14903  0031FE  0E00               	movlw	0
 14904  003200  140F               	andwf	___ftpack@arg,w,c
 14905  003202  6E14               	movwf	??___ftpack& (0+255),c
 14906  003204  0E00               	movlw	0
 14907  003206  1410               	andwf	___ftpack@arg+1,w,c
 14908  003208  6E15               	movwf	(??___ftpack+1)& (0+255),c
 14909  00320A  0EFE               	movlw	254
 14910  00320C  1411               	andwf	___ftpack@arg+2,w,c
 14911  00320E  6E16               	movwf	(??___ftpack+2)& (0+255),c
 14912  003210  5014               	movf	??___ftpack,w,c
 14913  003212  1015               	iorwf	??___ftpack+1,w,c
 14914  003214  1016               	iorwf	??___ftpack+2,w,c
 14915  003216  B4D8               	btfsc	status,2,c
 14916  003218  D00C               	goto	l7195
 14917  00321A  D7EC               	goto	l7187
 14918  00321C                     l7191:
 14919  00321C  2A12               	incf	___ftpack@exp,f,c
 14920  00321E  0E01               	movlw	1
 14921  003220  260F               	addwf	___ftpack@arg,f,c
 14922  003222  0E00               	movlw	0
 14923  003224  2210               	addwfc	___ftpack@arg+1,f,c
 14924  003226  0E00               	movlw	0
 14925  003228  2211               	addwfc	___ftpack@arg+2,f,c
 14926  00322A  90D8               	bcf	status,0,c
 14927  00322C  3211               	rrcf	___ftpack@arg+2,f,c
 14928  00322E  3210               	rrcf	___ftpack@arg+1,f,c
 14929  003230  320F               	rrcf	___ftpack@arg,f,c
 14930  003232                     l7195:
 14931  003232  0E00               	movlw	0
 14932  003234  140F               	andwf	___ftpack@arg,w,c
 14933  003236  6E14               	movwf	??___ftpack& (0+255),c
 14934  003238  0E00               	movlw	0
 14935  00323A  1410               	andwf	___ftpack@arg+1,w,c
 14936  00323C  6E15               	movwf	(??___ftpack+1)& (0+255),c
 14937  00323E  0EFF               	movlw	255
 14938  003240  1411               	andwf	___ftpack@arg+2,w,c
 14939  003242  6E16               	movwf	(??___ftpack+2)& (0+255),c
 14940  003244  5014               	movf	??___ftpack,w,c
 14941  003246  1015               	iorwf	??___ftpack+1,w,c
 14942  003248  1016               	iorwf	??___ftpack+2,w,c
 14943  00324A  B4D8               	btfsc	status,2,c
 14944  00324C  D006               	goto	l7199
 14945  00324E  D7E6               	goto	l7191
 14946  003250                     l7197:
 14947  003250  0612               	decf	___ftpack@exp,f,c
 14948  003252  90D8               	bcf	status,0,c
 14949  003254  360F               	rlcf	___ftpack@arg,f,c
 14950  003256  3610               	rlcf	___ftpack@arg+1,f,c
 14951  003258  3611               	rlcf	___ftpack@arg+2,f,c
 14952  00325A                     l7199:
 14953  00325A  BE10               	btfsc	___ftpack@arg+1,7,c
 14954  00325C  D003               	goto	l1377
 14955  00325E  0E02               	movlw	2
 14956  003260  6012               	cpfslt	___ftpack@exp,c
 14957  003262  D7F6               	goto	l7197
 14958  003264                     l1377:
 14959  003264  A012               	btfss	___ftpack@exp,0,c
 14960  003266  9E10               	bcf	___ftpack@arg+1,7,c
 14961  003268  90D8               	bcf	status,0,c
 14962  00326A  3212               	rrcf	___ftpack@exp,f,c
 14963  00326C  5012               	movf	___ftpack@exp,w,c
 14964  00326E  1211               	iorwf	___ftpack@arg+2,f,c
 14965  003270  5013               	movf	___ftpack@sign,w,c
 14966  003272  A4D8               	btfss	status,2,c
 14967  003274  8E11               	bsf	___ftpack@arg+2,7,c
 14968  003276  C00F  F00F         	movff	___ftpack@arg,?___ftpack
 14969  00327A  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
 14970  00327E  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
 14971  003282  0012               	return	
 14972  003284                     __end_of___ftpack:
 14973                           	opt stack 0
 14974                           tblptru	equ	0xFF8
 14975                           tblptrh	equ	0xFF7
 14976                           tblptrl	equ	0xFF6
 14977                           tablat	equ	0xFF5
 14978                           prodh	equ	0xFF4
 14979                           prodl	equ	0xFF3
 14980                           intcon	equ	0xFF2
 14981                           intcon2	equ	0xFF1
 14982                           postinc0	equ	0xFEE
 14983                           wreg	equ	0xFE8
 14984                           postinc1	equ	0xFE6
 14985                           postdec1	equ	0xFE5
 14986                           fsr1h	equ	0xFE2
 14987                           fsr1l	equ	0xFE1
 14988                           indf2	equ	0xFDF
 14989                           postinc2	equ	0xFDE
 14990                           postdec2	equ	0xFDD
 14991                           fsr2h	equ	0xFDA
 14992                           fsr2l	equ	0xFD9
 14993                           status	equ	0xFD8
 14994                           
 14995 ;; *************** function _ADC_GetConversion *****************
 14996 ;; Defined at:
 14997 ;;		line 107 in file "mcc_generated_files/adc.c"
 14998 ;; Parameters:    Size  Location     Type
 14999 ;;  channel         1    wreg     enum E6958
 15000 ;; Auto vars:     Size  Location     Type
 15001 ;;  channel         1   18[COMRAM] enum E6958
 15002 ;; Return value:  Size  Location     Type
 15003 ;;                  2   14[COMRAM] unsigned int 
 15004 ;; Registers used:
 15005 ;;		wreg, status,2, status,0
 15006 ;; Tracked objects:
 15007 ;;		On entry : 0/0
 15008 ;;		On exit  : 0/0
 15009 ;;		Unchanged: 0/0
 15010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15011 ;;      Params:         2       0       0       0       0       0       0
 15012 ;;      Locals:         1       0       0       0       0       0       0
 15013 ;;      Temps:          2       0       0       0       0       0       0
 15014 ;;      Totals:         5       0       0       0       0       0       0
 15015 ;;Total ram usage:        5 bytes
 15016 ;; Hardware stack levels used:    1
 15017 ;; Hardware stack levels required when called:    3
 15018 ;; This function calls:
 15019 ;;		Nothing
 15020 ;; This function is called by:
 15021 ;;		_Temp_Read
 15022 ;;		_ReadCurrent
 15023 ;;		_ReadVolt
 15024 ;; This function uses a non-reentrant model
 15025 ;;
 15026                           
 15027                           	psect	text67
 15028  003CD6                     __ptext67:
 15029                           	opt stack 0
 15030  003CD6                     _ADC_GetConversion:
 15031                           	opt stack 24
 15032                           
 15033                           ;incstack = 0
 15034                           ;ADC_GetConversion@channel stored from wreg
 15035  003CD6  6E13               	movwf	ADC_GetConversion@channel,c
 15036                           
 15037                           ;adc.c: 110: ADCON0bits.CHS = channel;
 15038  003CD8  C013  F011         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 15039  003CDC  4611               	rlncf	??_ADC_GetConversion,f,c
 15040  003CDE  4611               	rlncf	??_ADC_GetConversion,f,c
 15041  003CE0  50C2               	movf	4034,w,c	;volatile
 15042  003CE2  1811               	xorwf	??_ADC_GetConversion,w,c
 15043  003CE4  0B83               	andlw	-125
 15044  003CE6  1811               	xorwf	??_ADC_GetConversion,w,c
 15045  003CE8  6EC2               	movwf	4034,c	;volatile
 15046                           
 15047                           ;adc.c: 113: ADCON0bits.ADON = 1;
 15048  003CEA  80C2               	bsf	4034,0,c	;volatile
 15049                           
 15050                           ;adc.c: 117: ADCON0bits.GO_nDONE = 1;
 15051  003CEC  82C2               	bsf	4034,1,c	;volatile
 15052  003CEE                     l170:
 15053  003CEE  B2C2               	btfsc	4034,1,c	;volatile
 15054  003CF0  D7FE               	goto	l170
 15055                           
 15056                           ;adc.c: 122: }
 15057                           ;adc.c: 125: return ((ADRESH << 8) + ADRESL);
 15058  003CF2  50C4               	movf	4036,w,c	;volatile
 15059  003CF4  6E12               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 15060  003CF6  6A11               	clrf	??_ADC_GetConversion& (0+255),c
 15061  003CF8  50C3               	movf	4035,w,c	;volatile
 15062  003CFA  2411               	addwf	??_ADC_GetConversion,w,c
 15063  003CFC  6E0F               	movwf	?_ADC_GetConversion,c
 15064  003CFE  0E00               	movlw	0
 15065  003D00  2012               	addwfc	??_ADC_GetConversion+1,w,c
 15066  003D02  6E10               	movwf	?_ADC_GetConversion+1,c
 15067  003D04  0012               	return	
 15068  003D06                     __end_of_ADC_GetConversion:
 15069                           	opt stack 0
 15070                           tblptru	equ	0xFF8
 15071                           tblptrh	equ	0xFF7
 15072                           tblptrl	equ	0xFF6
 15073                           tablat	equ	0xFF5
 15074                           prodh	equ	0xFF4
 15075                           prodl	equ	0xFF3
 15076                           intcon	equ	0xFF2
 15077                           intcon2	equ	0xFF1
 15078                           postinc0	equ	0xFEE
 15079                           wreg	equ	0xFE8
 15080                           postinc1	equ	0xFE6
 15081                           postdec1	equ	0xFE5
 15082                           fsr1h	equ	0xFE2
 15083                           fsr1l	equ	0xFE1
 15084                           indf2	equ	0xFDF
 15085                           postinc2	equ	0xFDE
 15086                           postdec2	equ	0xFDD
 15087                           fsr2h	equ	0xFDA
 15088                           fsr2l	equ	0xFD9
 15089                           status	equ	0xFD8
 15090                           
 15091 ;; *************** function _INTERRUPT_InterruptManager *****************
 15092 ;; Defined at:
 15093 ;;		line 69 in file "mcc_generated_files/interrupt_manager.c"
 15094 ;; Parameters:    Size  Location     Type
 15095 ;;		None
 15096 ;; Auto vars:     Size  Location     Type
 15097 ;;		None
 15098 ;; Return value:  Size  Location     Type
 15099 ;;                  1    wreg      void 
 15100 ;; Registers used:
 15101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15102 ;; Tracked objects:
 15103 ;;		On entry : 0/0
 15104 ;;		On exit  : 0/0
 15105 ;;		Unchanged: 0/0
 15106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15107 ;;      Params:         0       0       0       0       0       0       0
 15108 ;;      Locals:         0       0       0       0       0       0       0
 15109 ;;      Temps:         14       0       0       0       0       0       0
 15110 ;;      Totals:        14       0       0       0       0       0       0
 15111 ;;Total ram usage:       14 bytes
 15112 ;; Hardware stack levels used:    1
 15113 ;; Hardware stack levels required when called:    2
 15114 ;; This function calls:
 15115 ;;		_ADC_ISR
 15116 ;;		_EUSART1_Receive_ISR
 15117 ;;		_EUSART1_Transmit_ISR
 15118 ;;		_TMR0_ISR
 15119 ;; This function is called by:
 15120 ;;		Interrupt level 2
 15121 ;; This function uses a non-reentrant model
 15122 ;;
 15123                           
 15124                           	psect	intcode
 15125  000008                     __pintcode:
 15126                           	opt stack 0
 15127  000008                     _INTERRUPT_InterruptManager:
 15128                           	opt stack 21
 15129                           
 15130                           ;incstack = 0
 15131  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15132  00000A  CFFA F001          	movff	pclath,??_INTERRUPT_InterruptManager
 15133  00000E  CFFB F002          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 15134  000012  CFE9 F003          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 15135  000016  CFEA F004          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 15136  00001A  CFE1 F005          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 15137  00001E  CFE2 F006          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 15138  000022  CFD9 F007          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 15139  000026  CFDA F008          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 15140  00002A  CFF3 F009          	movff	prodl,??_INTERRUPT_InterruptManager+8
 15141  00002E  CFF4 F00A          	movff	prodh,??_INTERRUPT_InterruptManager+9
 15142  000032  CFF6 F00B          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 15143  000036  CFF7 F00C          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 15144  00003A  CFF8 F00D          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 15145  00003E  CFF5 F00E          	movff	tablat,??_INTERRUPT_InterruptManager+13
 15146                           
 15147                           ;interrupt_manager.c: 72: if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
 15148  000042  BC9D               	btfsc	3997,6,c	;volatile
 15149  000044  AC9E               	btfss	3998,6,c	;volatile
 15150  000046  D003               	goto	i2l202
 15151                           
 15152                           ;interrupt_manager.c: 73: {
 15153                           ;interrupt_manager.c: 74: ADC_ISR();
 15154  000048  EC97  F01F         	call	_ADC_ISR	;wreg free
 15155                           
 15156                           ;interrupt_manager.c: 75: }
 15157  00004C  D011               	goto	i2l210
 15158  00004E                     i2l202:
 15159                           
 15160                           ;interrupt_manager.c: 76: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 15161  00004E  BAF2               	btfsc	intcon,5,c	;volatile
 15162  000050  A4F2               	btfss	intcon,2,c	;volatile
 15163  000052  D003               	goto	i2l204
 15164                           
 15165                           ;interrupt_manager.c: 77: {
 15166                           ;interrupt_manager.c: 78: TMR0_ISR();
 15167  000054  EC69  F01F         	call	_TMR0_ISR	;wreg free
 15168                           
 15169                           ;interrupt_manager.c: 79: }
 15170  000058  D00B               	goto	i2l210
 15171  00005A                     i2l204:
 15172                           
 15173                           ;interrupt_manager.c: 80: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 15174  00005A  B89D               	btfsc	3997,4,c	;volatile
 15175  00005C  A89E               	btfss	3998,4,c	;volatile
 15176  00005E  D003               	goto	i2l206
 15177                           
 15178                           ;interrupt_manager.c: 81: {
 15179                           ;interrupt_manager.c: 82: EUSART1_Transmit_ISR();
 15180  000060  EC52  F01E         	call	_EUSART1_Transmit_ISR	;wreg free
 15181                           
 15182                           ;interrupt_manager.c: 83: }
 15183  000064  D005               	goto	i2l210
 15184  000066                     i2l206:
 15185                           
 15186                           ;interrupt_manager.c: 84: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 15187  000066  BA9D               	btfsc	3997,5,c	;volatile
 15188  000068  AA9E               	btfss	3998,5,c	;volatile
 15189  00006A  D002               	goto	i2l210
 15190                           
 15191                           ;interrupt_manager.c: 85: {
 15192                           ;interrupt_manager.c: 86: EUSART1_Receive_ISR();
 15193  00006C  EC9A  F01E         	call	_EUSART1_Receive_ISR	;wreg free
 15194  000070                     i2l210:
 15195  000070  C00E  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 15196  000074  C00D  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 15197  000078  C00C  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 15198  00007C  C00B  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 15199  000080  C00A  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 15200  000084  C009  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 15201  000088  C008  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 15202  00008C  C007  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 15203  000090  C006  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 15204  000094  C005  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 15205  000098  C004  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 15206  00009C  C003  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 15207  0000A0  C002  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 15208  0000A4  C001  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 15209  0000A8  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15210  0000AA  0011               	retfie		f
 15211  0000AC                     __end_of_INTERRUPT_InterruptManager:
 15212                           	opt stack 0
 15213                           pclatu	equ	0xFFB
 15214                           pclath	equ	0xFFA
 15215                           tblptru	equ	0xFF8
 15216                           tblptrh	equ	0xFF7
 15217                           tblptrl	equ	0xFF6
 15218                           tablat	equ	0xFF5
 15219                           prodh	equ	0xFF4
 15220                           prodl	equ	0xFF3
 15221                           intcon	equ	0xFF2
 15222                           intcon2	equ	0xFF1
 15223                           postinc0	equ	0xFEE
 15224                           fsr0h	equ	0xFEA
 15225                           fsr0l	equ	0xFE9
 15226                           wreg	equ	0xFE8
 15227                           postinc1	equ	0xFE6
 15228                           postdec1	equ	0xFE5
 15229                           fsr1h	equ	0xFE2
 15230                           fsr1l	equ	0xFE1
 15231                           indf2	equ	0xFDF
 15232                           postinc2	equ	0xFDE
 15233                           postdec2	equ	0xFDD
 15234                           fsr2h	equ	0xFDA
 15235                           fsr2l	equ	0xFD9
 15236                           status	equ	0xFD8
 15237                           
 15238 ;; *************** function _TMR0_ISR *****************
 15239 ;; Defined at:
 15240 ;;		line 131 in file "mcc_generated_files/tmr0.c"
 15241 ;; Parameters:    Size  Location     Type
 15242 ;;		None
 15243 ;; Auto vars:     Size  Location     Type
 15244 ;;		None
 15245 ;; Return value:  Size  Location     Type
 15246 ;;                  1    wreg      void 
 15247 ;; Registers used:
 15248 ;;		wreg, status,2, cstack
 15249 ;; Tracked objects:
 15250 ;;		On entry : 0/0
 15251 ;;		On exit  : 0/0
 15252 ;;		Unchanged: 0/0
 15253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15254 ;;      Params:         0       0       0       0       0       0       0
 15255 ;;      Locals:         0       0       0       0       0       0       0
 15256 ;;      Temps:          0       0       0       0       0       0       0
 15257 ;;      Totals:         0       0       0       0       0       0       0
 15258 ;;Total ram usage:        0 bytes
 15259 ;; Hardware stack levels used:    1
 15260 ;; Hardware stack levels required when called:    1
 15261 ;; This function calls:
 15262 ;;		_TMR0_CallBack
 15263 ;; This function is called by:
 15264 ;;		_INTERRUPT_InterruptManager
 15265 ;; This function uses a non-reentrant model
 15266 ;;
 15267                           
 15268                           	psect	text69
 15269  003ED2                     __ptext69:
 15270                           	opt stack 0
 15271  003ED2                     _TMR0_ISR:
 15272                           	opt stack 21
 15273                           
 15274                           ;tmr0.c: 135: INTCONbits.TMR0IF = 0;
 15275                           
 15276                           ;incstack = 0
 15277  003ED2  94F2               	bcf	intcon,2,c	;volatile
 15278                           
 15279                           ;tmr0.c: 139: TMR0H = timer0ReloadVal16bit >> 8;
 15280  003ED4  5050               	movf	_timer0ReloadVal16bit+1,w,c	;volatile
 15281  003ED6  6ED7               	movwf	4055,c	;volatile
 15282                           
 15283                           ;tmr0.c: 140: TMR0L = (uint8_t) timer0ReloadVal16bit;
 15284  003ED8  C04F  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
 15285                           
 15286                           ;tmr0.c: 144: TMR0_CallBack();
 15287  003EDC  EC99  F01F         	call	_TMR0_CallBack	;wreg free
 15288  003EE0  0012               	return		;funcret
 15289  003EE2                     __end_of_TMR0_ISR:
 15290                           	opt stack 0
 15291                           pclatu	equ	0xFFB
 15292                           pclath	equ	0xFFA
 15293                           tblptru	equ	0xFF8
 15294                           tblptrh	equ	0xFF7
 15295                           tblptrl	equ	0xFF6
 15296                           tablat	equ	0xFF5
 15297                           prodh	equ	0xFF4
 15298                           prodl	equ	0xFF3
 15299                           intcon	equ	0xFF2
 15300                           intcon2	equ	0xFF1
 15301                           postinc0	equ	0xFEE
 15302                           fsr0h	equ	0xFEA
 15303                           fsr0l	equ	0xFE9
 15304                           wreg	equ	0xFE8
 15305                           postinc1	equ	0xFE6
 15306                           postdec1	equ	0xFE5
 15307                           fsr1h	equ	0xFE2
 15308                           fsr1l	equ	0xFE1
 15309                           indf2	equ	0xFDF
 15310                           postinc2	equ	0xFDE
 15311                           postdec2	equ	0xFDD
 15312                           fsr2h	equ	0xFDA
 15313                           fsr2l	equ	0xFD9
 15314                           status	equ	0xFD8
 15315                           
 15316 ;; *************** function _TMR0_CallBack *****************
 15317 ;; Defined at:
 15318 ;;		line 149 in file "mcc_generated_files/tmr0.c"
 15319 ;; Parameters:    Size  Location     Type
 15320 ;;		None
 15321 ;; Auto vars:     Size  Location     Type
 15322 ;;		None
 15323 ;; Return value:  Size  Location     Type
 15324 ;;                  1    wreg      void 
 15325 ;; Registers used:
 15326 ;;		None
 15327 ;; Tracked objects:
 15328 ;;		On entry : 0/0
 15329 ;;		On exit  : 0/0
 15330 ;;		Unchanged: 0/0
 15331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15332 ;;      Params:         0       0       0       0       0       0       0
 15333 ;;      Locals:         0       0       0       0       0       0       0
 15334 ;;      Temps:          0       0       0       0       0       0       0
 15335 ;;      Totals:         0       0       0       0       0       0       0
 15336 ;;Total ram usage:        0 bytes
 15337 ;; Hardware stack levels used:    1
 15338 ;; This function calls:
 15339 ;;		Nothing
 15340 ;; This function is called by:
 15341 ;;		_TMR0_ISR
 15342 ;; This function uses a non-reentrant model
 15343 ;;
 15344                           
 15345                           	psect	text70
 15346  003F32                     __ptext70:
 15347                           	opt stack 0
 15348  003F32                     _TMR0_CallBack:
 15349                           	opt stack 21
 15350                           
 15351                           ;incstack = 0
 15352  003F32  0012               	return		;funcret
 15353  003F34                     __end_of_TMR0_CallBack:
 15354                           	opt stack 0
 15355                           pclatu	equ	0xFFB
 15356                           pclath	equ	0xFFA
 15357                           tblptru	equ	0xFF8
 15358                           tblptrh	equ	0xFF7
 15359                           tblptrl	equ	0xFF6
 15360                           tablat	equ	0xFF5
 15361                           prodh	equ	0xFF4
 15362                           prodl	equ	0xFF3
 15363                           intcon	equ	0xFF2
 15364                           intcon2	equ	0xFF1
 15365                           postinc0	equ	0xFEE
 15366                           fsr0h	equ	0xFEA
 15367                           fsr0l	equ	0xFE9
 15368                           wreg	equ	0xFE8
 15369                           postinc1	equ	0xFE6
 15370                           postdec1	equ	0xFE5
 15371                           fsr1h	equ	0xFE2
 15372                           fsr1l	equ	0xFE1
 15373                           indf2	equ	0xFDF
 15374                           postinc2	equ	0xFDE
 15375                           postdec2	equ	0xFDD
 15376                           fsr2h	equ	0xFDA
 15377                           fsr2l	equ	0xFD9
 15378                           status	equ	0xFD8
 15379                           
 15380 ;; *************** function _EUSART1_Transmit_ISR *****************
 15381 ;; Defined at:
 15382 ;;		line 167 in file "mcc_generated_files/eusart1.c"
 15383 ;; Parameters:    Size  Location     Type
 15384 ;;		None
 15385 ;; Auto vars:     Size  Location     Type
 15386 ;;		None
 15387 ;; Return value:  Size  Location     Type
 15388 ;;                  1    wreg      void 
 15389 ;; Registers used:
 15390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15391 ;; Tracked objects:
 15392 ;;		On entry : 0/0
 15393 ;;		On exit  : 0/0
 15394 ;;		Unchanged: 0/0
 15395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15396 ;;      Params:         0       0       0       0       0       0       0
 15397 ;;      Locals:         0       0       0       0       0       0       0
 15398 ;;      Temps:          0       0       0       0       0       0       0
 15399 ;;      Totals:         0       0       0       0       0       0       0
 15400 ;;Total ram usage:        0 bytes
 15401 ;; Hardware stack levels used:    1
 15402 ;; This function calls:
 15403 ;;		Nothing
 15404 ;; This function is called by:
 15405 ;;		_INTERRUPT_InterruptManager
 15406 ;; This function uses a non-reentrant model
 15407 ;;
 15408                           
 15409                           	psect	text71
 15410  003CA4                     __ptext71:
 15411                           	opt stack 0
 15412  003CA4                     _EUSART1_Transmit_ISR:
 15413                           	opt stack 22
 15414                           
 15415                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 15416                           
 15417                           ;incstack = 0
 15418  003CA4  0E08               	movlw	8
 15419  003CA6  0100               	movlb	0	; () banked
 15420  003CA8  61F4               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 15421  003CAA  D013               	goto	i2l300
 15422                           
 15423                           ; BSR set to: 0
 15424                           ;eusart1.c: 172: {
 15425                           ;eusart1.c: 173: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 15426  003CAC  504C               	movf	_eusart1TxTail,w,c
 15427  003CAE  0D01               	mullw	1
 15428  003CB0  0ED6               	movlw	low _eusart1TxBuffer
 15429  003CB2  24F3               	addwf	prodl,w,c
 15430  003CB4  6ED9               	movwf	fsr2l,c
 15431  003CB6  0E01               	movlw	high _eusart1TxBuffer
 15432  003CB8  20F4               	addwfc	prodh,w,c
 15433  003CBA  6EDA               	movwf	fsr2h,c
 15434  003CBC  50DF               	movf	indf2,w,c
 15435  003CBE  6EAD               	movwf	4013,c	;volatile
 15436                           
 15437                           ; BSR set to: 0
 15438  003CC0  2A4C               	incf	_eusart1TxTail,f,c
 15439                           
 15440                           ; BSR set to: 0
 15441                           ;eusart1.c: 174: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 15442  003CC2  0E07               	movlw	7
 15443  003CC4  644C               	cpfsgt	_eusart1TxTail,c
 15444  003CC6  D002               	goto	i2l6127
 15445                           
 15446                           ; BSR set to: 0
 15447                           ;eusart1.c: 175: {
 15448                           ;eusart1.c: 176: eusart1TxTail = 0;
 15449  003CC8  0E00               	movlw	0
 15450  003CCA  6E4C               	movwf	_eusart1TxTail,c
 15451  003CCC                     i2l6127:
 15452                           
 15453                           ; BSR set to: 0
 15454                           ;eusart1.c: 177: }
 15455                           ;eusart1.c: 178: eusart1TxBufferRemaining++;
 15456  003CCC  0100               	movlb	0	; () banked
 15457  003CCE  2BF4               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 15458                           
 15459                           ;eusart1.c: 179: }
 15460  003CD0  0012               	return	
 15461  003CD2                     i2l300:
 15462                           
 15463                           ; BSR set to: 0
 15464                           ;eusart1.c: 180: else
 15465                           ;eusart1.c: 181: {
 15466                           ;eusart1.c: 182: PIE1bits.TX1IE = 0;
 15467  003CD2  989D               	bcf	3997,4,c	;volatile
 15468  003CD4  0012               	return	
 15469  003CD6                     __end_of_EUSART1_Transmit_ISR:
 15470                           	opt stack 0
 15471                           pclatu	equ	0xFFB
 15472                           pclath	equ	0xFFA
 15473                           tblptru	equ	0xFF8
 15474                           tblptrh	equ	0xFF7
 15475                           tblptrl	equ	0xFF6
 15476                           tablat	equ	0xFF5
 15477                           prodh	equ	0xFF4
 15478                           prodl	equ	0xFF3
 15479                           intcon	equ	0xFF2
 15480                           intcon2	equ	0xFF1
 15481                           postinc0	equ	0xFEE
 15482                           fsr0h	equ	0xFEA
 15483                           fsr0l	equ	0xFE9
 15484                           wreg	equ	0xFE8
 15485                           postinc1	equ	0xFE6
 15486                           postdec1	equ	0xFE5
 15487                           fsr1h	equ	0xFE2
 15488                           fsr1l	equ	0xFE1
 15489                           indf2	equ	0xFDF
 15490                           postinc2	equ	0xFDE
 15491                           postdec2	equ	0xFDD
 15492                           fsr2h	equ	0xFDA
 15493                           fsr2l	equ	0xFD9
 15494                           status	equ	0xFD8
 15495                           
 15496 ;; *************** function _EUSART1_Receive_ISR *****************
 15497 ;; Defined at:
 15498 ;;		line 186 in file "mcc_generated_files/eusart1.c"
 15499 ;; Parameters:    Size  Location     Type
 15500 ;;		None
 15501 ;; Auto vars:     Size  Location     Type
 15502 ;;		None
 15503 ;; Return value:  Size  Location     Type
 15504 ;;                  1    wreg      void 
 15505 ;; Registers used:
 15506 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15507 ;; Tracked objects:
 15508 ;;		On entry : 0/0
 15509 ;;		On exit  : 0/0
 15510 ;;		Unchanged: 0/0
 15511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15512 ;;      Params:         0       0       0       0       0       0       0
 15513 ;;      Locals:         0       0       0       0       0       0       0
 15514 ;;      Temps:          0       0       0       0       0       0       0
 15515 ;;      Totals:         0       0       0       0       0       0       0
 15516 ;;Total ram usage:        0 bytes
 15517 ;; Hardware stack levels used:    1
 15518 ;; This function calls:
 15519 ;;		Nothing
 15520 ;; This function is called by:
 15521 ;;		_INTERRUPT_InterruptManager
 15522 ;; This function uses a non-reentrant model
 15523 ;;
 15524                           
 15525                           	psect	text72
 15526  003D34                     __ptext72:
 15527                           	opt stack 0
 15528  003D34                     _EUSART1_Receive_ISR:
 15529                           	opt stack 22
 15530                           
 15531                           ;eusart1.c: 188: if(1 == RCSTA1bits.OERR)
 15532                           
 15533                           ; BSR set to: 0
 15534                           ;incstack = 0
 15535  003D34  A2AB               	btfss	4011,1,c	;volatile
 15536  003D36  D002               	goto	i2l6133
 15537                           
 15538                           ;eusart1.c: 189: {
 15539                           ;eusart1.c: 192: RCSTA1bits.CREN = 0;
 15540  003D38  98AB               	bcf	4011,4,c	;volatile
 15541                           
 15542                           ;eusart1.c: 193: RCSTA1bits.CREN = 1;
 15543  003D3A  88AB               	bsf	4011,4,c	;volatile
 15544  003D3C                     i2l6133:
 15545                           
 15546                           ;eusart1.c: 194: }
 15547                           ;eusart1.c: 197: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 15548  003D3C  504A               	movf	_eusart1RxHead,w,c
 15549  003D3E  0D01               	mullw	1
 15550  003D40  0ECE               	movlw	low _eusart1RxBuffer
 15551  003D42  24F3               	addwf	prodl,w,c
 15552  003D44  6ED9               	movwf	fsr2l,c
 15553  003D46  0E01               	movlw	high _eusart1RxBuffer
 15554  003D48  20F4               	addwfc	prodh,w,c
 15555  003D4A  6EDA               	movwf	fsr2h,c
 15556  003D4C  CFAE FFDF          	movff	4014,indf2	;volatile
 15557  003D50  2A4A               	incf	_eusart1RxHead,f,c
 15558                           
 15559                           ;eusart1.c: 198: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 15560  003D52  0E07               	movlw	7
 15561  003D54  644A               	cpfsgt	_eusart1RxHead,c
 15562  003D56  D002               	goto	i2l6141
 15563                           
 15564                           ;eusart1.c: 199: {
 15565                           ;eusart1.c: 200: eusart1RxHead = 0;
 15566  003D58  0E00               	movlw	0
 15567  003D5A  6E4A               	movwf	_eusart1RxHead,c
 15568  003D5C                     i2l6141:
 15569                           
 15570                           ;eusart1.c: 201: }
 15571                           ;eusart1.c: 202: eusart1RxCount++;
 15572  003D5C  0100               	movlb	0	; () banked
 15573  003D5E  2BDE               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 15574                           
 15575                           ; BSR set to: 0
 15576  003D60  0012               	return		;funcret
 15577  003D62                     __end_of_EUSART1_Receive_ISR:
 15578                           	opt stack 0
 15579                           pclatu	equ	0xFFB
 15580                           pclath	equ	0xFFA
 15581                           tblptru	equ	0xFF8
 15582                           tblptrh	equ	0xFF7
 15583                           tblptrl	equ	0xFF6
 15584                           tablat	equ	0xFF5
 15585                           prodh	equ	0xFF4
 15586                           prodl	equ	0xFF3
 15587                           intcon	equ	0xFF2
 15588                           intcon2	equ	0xFF1
 15589                           postinc0	equ	0xFEE
 15590                           fsr0h	equ	0xFEA
 15591                           fsr0l	equ	0xFE9
 15592                           wreg	equ	0xFE8
 15593                           postinc1	equ	0xFE6
 15594                           postdec1	equ	0xFE5
 15595                           fsr1h	equ	0xFE2
 15596                           fsr1l	equ	0xFE1
 15597                           indf2	equ	0xFDF
 15598                           postinc2	equ	0xFDE
 15599                           postdec2	equ	0xFDD
 15600                           fsr2h	equ	0xFDA
 15601                           fsr2l	equ	0xFD9
 15602                           status	equ	0xFD8
 15603                           
 15604 ;; *************** function _ADC_ISR *****************
 15605 ;; Defined at:
 15606 ;;		line 128 in file "mcc_generated_files/adc.c"
 15607 ;; Parameters:    Size  Location     Type
 15608 ;;		None
 15609 ;; Auto vars:     Size  Location     Type
 15610 ;;		None
 15611 ;; Return value:  Size  Location     Type
 15612 ;;                  1    wreg      void 
 15613 ;; Registers used:
 15614 ;;		None
 15615 ;; Tracked objects:
 15616 ;;		On entry : 0/0
 15617 ;;		On exit  : 0/0
 15618 ;;		Unchanged: 0/0
 15619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15620 ;;      Params:         0       0       0       0       0       0       0
 15621 ;;      Locals:         0       0       0       0       0       0       0
 15622 ;;      Temps:          0       0       0       0       0       0       0
 15623 ;;      Totals:         0       0       0       0       0       0       0
 15624 ;;Total ram usage:        0 bytes
 15625 ;; Hardware stack levels used:    1
 15626 ;; This function calls:
 15627 ;;		Nothing
 15628 ;; This function is called by:
 15629 ;;		_INTERRUPT_InterruptManager
 15630 ;; This function uses a non-reentrant model
 15631 ;;
 15632                           
 15633                           	psect	text73
 15634  003F2E                     __ptext73:
 15635                           	opt stack 0
 15636  003F2E                     _ADC_ISR:
 15637                           	opt stack 22
 15638                           
 15639                           ;adc.c: 131: PIR1bits.ADIF = 0;
 15640                           
 15641                           ; BSR set to: 0
 15642                           ;incstack = 0
 15643  003F2E  9C9E               	bcf	3998,6,c	;volatile
 15644  003F30  0012               	return		;funcret
 15645  003F32                     __end_of_ADC_ISR:
 15646                           	opt stack 0
 15647                           pclatu	equ	0xFFB
 15648                           pclath	equ	0xFFA
 15649                           tblptru	equ	0xFF8
 15650                           tblptrh	equ	0xFF7
 15651                           tblptrl	equ	0xFF6
 15652                           tablat	equ	0xFF5
 15653                           prodh	equ	0xFF4
 15654                           prodl	equ	0xFF3
 15655                           intcon	equ	0xFF2
 15656                           intcon2	equ	0xFF1
 15657                           postinc0	equ	0xFEE
 15658                           fsr0h	equ	0xFEA
 15659                           fsr0l	equ	0xFE9
 15660                           wreg	equ	0xFE8
 15661                           postinc1	equ	0xFE6
 15662                           postdec1	equ	0xFE5
 15663                           fsr1h	equ	0xFE2
 15664                           fsr1l	equ	0xFE1
 15665                           indf2	equ	0xFDF
 15666                           postinc2	equ	0xFDE
 15667                           postdec2	equ	0xFDD
 15668                           fsr2h	equ	0xFDA
 15669                           fsr2l	equ	0xFD9
 15670                           status	equ	0xFD8
 15671                           pclatu	equ	0xFFB
 15672                           pclath	equ	0xFFA
 15673                           tblptru	equ	0xFF8
 15674                           tblptrh	equ	0xFF7
 15675                           tblptrl	equ	0xFF6
 15676                           tablat	equ	0xFF5
 15677                           prodh	equ	0xFF4
 15678                           prodl	equ	0xFF3
 15679                           intcon	equ	0xFF2
 15680                           intcon2	equ	0xFF1
 15681                           postinc0	equ	0xFEE
 15682                           fsr0h	equ	0xFEA
 15683                           fsr0l	equ	0xFE9
 15684                           wreg	equ	0xFE8
 15685                           postinc1	equ	0xFE6
 15686                           postdec1	equ	0xFE5
 15687                           fsr1h	equ	0xFE2
 15688                           fsr1l	equ	0xFE1
 15689                           indf2	equ	0xFDF
 15690                           postinc2	equ	0xFDE
 15691                           postdec2	equ	0xFDD
 15692                           fsr2h	equ	0xFDA
 15693                           fsr2l	equ	0xFD9
 15694                           status	equ	0xFD8
 15695                           
 15696                           	psect	rparam
 15697  0000                     pclatu	equ	0xFFB
 15698                           pclath	equ	0xFFA
 15699                           tblptru	equ	0xFF8
 15700                           tblptrh	equ	0xFF7
 15701                           tblptrl	equ	0xFF6
 15702                           tablat	equ	0xFF5
 15703                           prodh	equ	0xFF4
 15704                           prodl	equ	0xFF3
 15705                           intcon	equ	0xFF2
 15706                           intcon2	equ	0xFF1
 15707                           postinc0	equ	0xFEE
 15708                           fsr0h	equ	0xFEA
 15709                           fsr0l	equ	0xFE9
 15710                           wreg	equ	0xFE8
 15711                           postinc1	equ	0xFE6
 15712                           postdec1	equ	0xFE5
 15713                           fsr1h	equ	0xFE2
 15714                           fsr1l	equ	0xFE1
 15715                           indf2	equ	0xFDF
 15716                           postinc2	equ	0xFDE
 15717                           postdec2	equ	0xFDD
 15718                           fsr2h	equ	0xFDA
 15719                           fsr2l	equ	0xFD9
 15720                           status	equ	0xFD8
 15721                           
 15722                           	psect	temp
 15723  000051                     btemp:
 15724                           	opt stack 0
 15725  000051                     	ds	1
 15726  0000                     int$flags	set	btemp
 15727                           pclatu	equ	0xFFB
 15728                           pclath	equ	0xFFA
 15729                           tblptru	equ	0xFF8
 15730                           tblptrh	equ	0xFF7
 15731                           tblptrl	equ	0xFF6
 15732                           tablat	equ	0xFF5
 15733                           prodh	equ	0xFF4
 15734                           prodl	equ	0xFF3
 15735                           intcon	equ	0xFF2
 15736                           intcon2	equ	0xFF1
 15737                           postinc0	equ	0xFEE
 15738                           fsr0h	equ	0xFEA
 15739                           fsr0l	equ	0xFE9
 15740                           wreg	equ	0xFE8
 15741                           postinc1	equ	0xFE6
 15742                           postdec1	equ	0xFE5
 15743                           fsr1h	equ	0xFE2
 15744                           fsr1l	equ	0xFE1
 15745                           indf2	equ	0xFDF
 15746                           postinc2	equ	0xFDE
 15747                           postdec2	equ	0xFDD
 15748                           fsr2h	equ	0xFDA
 15749                           fsr2l	equ	0xFD9
 15750                           status	equ	0xFD8


Data Sizes:
    Strings     93
    Constant    1199
    Data        22
    BSS         331
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     66      80
    BANK0           160     89     149
    BANK1           256    206     256
    BANK2           256      0     232
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    free$0	PTR void  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(COMRAM[2]), log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> exp@coeff(CODE[30]), log@coeff(CODE[27]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_5(CODE[14]), STR_4(CODE[23]), STR_3(CODE[26]), STR_2(CODE[5]), 
		 -> STR_1(CODE[25]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    spi_write_read@rx_data	PTR int  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), LTC6804_rdStat@data(BANK0[150]), LTC6804_rdcv@cell_data(BANK0[20]), NULL(NULL[0]), 

    spi_write_read@tx_Data	PTR int  size(2) Largest target is 8
		 -> LTC6804_rdcfg@cmd(COMRAM[8]), LTC6804_clrcell@cmd(COMRAM[8]), LTC6804_rdStat_reg@cmd(COMRAM[8]), LTC6804_rdaux_reg@cmd(COMRAM[8]), 
		 -> LTC6804_rdcv_reg@cmd(COMRAM[8]), 

    spi_write_array@data	PTR int  size(2) Largest target is 200
		 -> LTC6804_wrcfg@cmd(BANK1[200]), LTC6804_ADSTAT@cmd(COMRAM[8]), LTC6804_adax@cmd(COMRAM[8]), LTC6804_adcv@cmd(COMRAM[8]), 

    pec15_calc@data	PTR int  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), LTC6804_rdcfg@cmd(COMRAM[8]), LTC6804_wrcfg@cmd(BANK1[200]), LTC6804_clraux@cmd(COMRAM[8]), 
		 -> LTC6804_clrcell@cmd(COMRAM[8]), LTC6804_rdStat_reg@cmd(COMRAM[8]), LTC6804_rdStat@data(BANK0[150]), LTC6804_rdaux_reg@cmd(COMRAM[8]), 
		 -> LTC6804_rdcv_reg@cmd(COMRAM[8]), LTC6804_rdcv@cell_data(BANK0[20]), ADSTAT(BANK0[4]), ADAX(BANK0[4]), 
		 -> ADCV(BANK0[4]), LTC6804_DATA_ConfigBank(BANK1[12]), 

    LTC6804_wrcfg@config	PTR int [6] size(2) Largest target is 12
		 -> LTC6804_DATA_ConfigBank(BANK1[12]), 

    sp__malloc	PTR void  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 

    LTC6804_rdcv_reg@data	PTR int  size(2) Largest target is 20
		 -> LTC6804_rdcv@cell_data(BANK0[20]), 

    LTC6804_rdcv@cell_codes	PTR int [12] size(2) Largest target is 24
		 -> cell_codes_Bank(BANK2[24]), 

    Read_Battery@cell_codes	PTR int [12] size(2) Largest target is 24
		 -> cell_codes_Bank(BANK2[24]), 


Critical Paths under _main in COMRAM

    _Start_BMS->_Initalize_LT6804b
    _UpdateLT6804->_LTC6804_wrcfg
    _LTC6804_wrcfg->_pec15_calc
    _Set_REFON_Pin->___wmul
    _Set_DCTO_Mode_OFF->___wmul
    _Set_DCC_Mode_OFF->___wmul
    _Set_ADC_Mode->___wmul
    _SetTempEnable->___wmul
    _SYSTEM_Initialize->_TMR0_Initialize
    _Tempeture_Get->___wmul
    _printf->___ftmul
    _scale->___ftmul
    _putch->_EUSART1_Write
    _fround->___ftmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    _Temp_Read->_ADC_GetConversion
    _Temp_Convert->_Temp_Filter
    _log->_eval_poly
    _eval_poly->___ftmul
    _Temp_Filter->___ftmul
    _LTC6804_rdcv->_LTC6804_rdcv_reg
    _LTC6804_rdcv_reg->_pec15_calc
    _wakeup_idle->_DelayMicro
    _spi_write_read->_SPI2_Exchange8bit
    _LTC6804_adcv->_pec15_calc
    _spi_write_array->_SPI2_Exchange8bit
    _pec15_calc->___wmul
    ___lwtoft->___ftpack
    _ReadVoltToCurrent->___ftmul
    ___wmul->___awdiv
    ___fttol->___ftmul
    ___ftmul->___ftdiv
    ___ftdiv->___wmul
    ___ftadd->___ftmul
    ___awtoft->___ftpack

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_Run_Mode
    _Run_Mode->_Temp_Fault
    _Temp_Fault->_printf
    _printf->___ftge
    ___ftge->_ReadCurrent
    _TempRun->_Temp_Convert
    _Temp_Convert->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    _Read_Battery->_LTC6804_rdcv
    _ReadCurrent->_ReadVoltToCurrent
    _ReadVoltToCurrent->___fttol
    ___fttol->___ftadd
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _UpdateLT6804->_LTC6804_wrcfg
    _Run_Mode->_printf
    _Temp_Fault->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5  641717
                                             84 BANK0      5     0      5
                              _Delay
                           _Run_Mode
                  _SYSTEM_Initialize
                          _Start_BMS
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Start_BMS                                            0     0      0   81907
                  _Initalize_LT6804b
 ---------------------------------------------------------------------------------
 (2) _Initalize_LT6804b                                    2     2      0   81907
                                             53 COMRAM     2     2      0
                      _SetTempEnable
                       _Set_ADC_Mode
                   _Set_DCC_Mode_OFF
                  _Set_DCTO_Mode_OFF
                      _Set_REFON_Pin
                       _UpdateLT6804
 ---------------------------------------------------------------------------------
 (3) _UpdateLT6804                                         0     0      0   17247
                      _LTC6804_wrcfg
 ---------------------------------------------------------------------------------
 (4) _LTC6804_wrcfg                                      212   208      4   17247
                                             47 COMRAM     6     2      4
                                              0 BANK1    206   206      0
                             ___wmul
                         _pec15_calc
                    _spi_write_array
                        _wakeup_idle
 ---------------------------------------------------------------------------------
 (3) _Set_REFON_Pin                                        7     4      3   12932
                                             34 COMRAM     7     4      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _Set_DCTO_Mode_OFF                                    6     4      2   12824
                                             34 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _Set_DCC_Mode_OFF                                     6     4      2   12848
                                             34 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _Set_ADC_Mode                                         7     4      3   12932
                                             34 COMRAM     7     4      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _SetTempEnable                                        7     4      3   12932
                                             34 COMRAM     7     4      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI2_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0       0
                                             14 COMRAM     2     2      0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Run_Mode                                             5     5      0  457015
                                             79 BANK0      5     5      0
                        _ReadCurrent
                       _Read_Battery
                            _TempRun
                         _Temp_Fault
                      _Tempeture_Get
                           ___awtoft
                             ___ftge
                            ___ftmul
                             _printf
 ---------------------------------------------------------------------------------
 (2) _Tempeture_Get                                        3     0      3   12814
                                             34 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Temp_Fault                                           3     3      0  117062
                                             76 BANK0      3     3      0
                             ___ftge
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              46    39      7  102173
                                             63 BANK0     13     6      7
                                              0 BANK1     27    27      0
                      _Tempeture_Get (ARG)
                            ___awdiv
                           ___awtoft (ARG)
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   25663
                                              0 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             15 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   25384
                                              0 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1819
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1985
                                             20 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     608
                                             14 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     827
                                             14 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2820
                                             22 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     848
                                             27 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     703
                                             14 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     544
                                             14 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    2040
                                             54 BANK0      9     3      6
                        _ReadCurrent (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _TempRun                                              0     0      0  121789
                       _Temp_Convert
                          _Temp_Read
 ---------------------------------------------------------------------------------
 (3) _Temp_Read                                            0     0      0      22
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (3) _Temp_Convert                                        11    11      0  121767
                                             37 BANK0     11    11      0
                        _Temp_Filter
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  5     2      3   48947
                                             32 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     454
                                             14 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7   28627
                                             64 COMRAM     2     2      0
                                             22 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    7441
                                             22 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) _Temp_Filter                                          2     2      0   28194
                                             64 COMRAM     2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Read_Battery                                         8     4      4   34634
                                             56 BANK0      8     4      4
                              _Delay
                       _LTC6804_adcv
                       _LTC6804_rdcv
                            _set_adc
 ---------------------------------------------------------------------------------
 (3) _set_adc                                             12     4      8    4086
                                             14 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) _LTC6804_rdcv                                        56    50      6   25317
                                              0 BANK0     56    50      6
                   _LTC6804_rdcv_reg
                  _SPI2_Exchange8bit
                             ___wmul
                         _pec15_calc
 ---------------------------------------------------------------------------------
 (4) _LTC6804_rdcv_reg                                    18    12      6    4958
                                             47 COMRAM    18    12      6
                         _pec15_calc
                     _spi_write_read
                        _wakeup_idle
 ---------------------------------------------------------------------------------
 (5) _wakeup_idle                                          0     0      0     174
                         _DelayMicro
 ---------------------------------------------------------------------------------
 (6) _DelayMicro                                           5     3      2     174
                                             14 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (5) _spi_write_read                                      12     4      8    1461
                                             16 COMRAM    12     4      8
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (3) _LTC6804_adcv                                        12    12      0    3486
                                             47 COMRAM    12    12      0
                  _SPI2_Exchange8bit
                         _pec15_calc
                    _spi_write_array
 ---------------------------------------------------------------------------------
 (5) _spi_write_array                                      5     1      4     731
                                             16 COMRAM     5     1      4
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (6) _SPI2_Exchange8bit                                    2     2      0      47
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _pec15_calc                                          13     9      4    2567
                                             34 COMRAM    13     9      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     622
                                             14 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _ReadCurrent                                          8     5      3   53596
                                             46 BANK0      8     5      3
                  _ADC_GetConversion
                  _ReadVoltToCurrent
                           ___lwtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    2769
                                             22 COMRAM     3     0      3
                  _ADC_GetConversion (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _ReadVoltToCurrent                                    9     6      3   37932
                                             37 BANK0      9     6      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4   12706
                                             28 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1081
                                             22 BANK0     15    11      4
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                             ___wmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    8456
                                             49 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    4618
                                             34 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    6809
                                             10 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    4160
                                             22 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _ADC_GetConversion                                    5     3      2      22
                                             14 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          14    14      0       0
                                              0 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (10) _TMR0_CallBack                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay
   _Run_Mode
     _ReadCurrent
       _ADC_GetConversion
       _ReadVoltToCurrent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___fttol
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft
         _ADC_GetConversion (ARG)
         ___ftpack (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _Read_Battery
       _Delay
       _LTC6804_adcv
         _SPI2_Exchange8bit
         _pec15_calc
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _spi_write_array
           _SPI2_Exchange8bit
       _LTC6804_rdcv
         _LTC6804_rdcv_reg
           _pec15_calc
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _spi_write_read
             _SPI2_Exchange8bit
           _wakeup_idle
             _DelayMicro
         _SPI2_Exchange8bit
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _pec15_calc
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _set_adc
     _TempRun
       _Temp_Convert
         _Temp_Filter
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _frexp
       _Temp_Read
         _ADC_GetConversion
     _Temp_Fault
       ___ftge
         _ReadCurrent (ARG)
           _ADC_GetConversion
           _ReadVoltToCurrent
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___fttol
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft
             _ADC_GetConversion (ARG)
             ___ftpack (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _printf
         _Tempeture_Get (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge (ARG)
           _ReadCurrent (ARG)
             _ADC_GetConversion
             _ReadVoltToCurrent
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___fttol
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___ftpack (ARG)
                         ___wmul (ARG)
                           ___awdiv (ARG)
                             ___awmod (ARG)
                           ___awmod (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                       _frexp (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft
               _ADC_GetConversion (ARG)
               ___ftpack (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _EUSART1_Write
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _Tempeture_Get
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awtoft
       ___ftpack
     ___ftge
       _ReadCurrent (ARG)
         _ADC_GetConversion
         _ReadVoltToCurrent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___fttol
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft
           _ADC_GetConversion (ARG)
           ___ftpack (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     _printf
       _Tempeture_Get (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge (ARG)
         _ReadCurrent (ARG)
           _ADC_GetConversion
           _ReadVoltToCurrent
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___fttol
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _frexp (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft
             _ADC_GetConversion (ARG)
             ___ftpack (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _EUSART1_Write
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI2_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _Start_BMS
     _Initalize_LT6804b
       _SetTempEnable
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _Set_ADC_Mode
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _Set_DCC_Mode_OFF
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _Set_DCTO_Mode_OFF
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _Set_REFON_Pin
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _UpdateLT6804
         _LTC6804_wrcfg
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _pec15_calc
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _spi_write_array
             _SPI2_Exchange8bit
           _wakeup_idle
             _DelayMicro
   _printf
     _Tempeture_Get (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge (ARG)
       _ReadCurrent (ARG)
         _ADC_GetConversion
         _ReadVoltToCurrent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___fttol
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _frexp (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft
           _ADC_GetConversion (ARG)
           ___ftpack (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _EUSART1_Write
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      E8       8       90.6%
BITBANK1           100      0       0       5        0.0%
BANK1              100     CE     100       6      100.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     59      95       4       93.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     42      50       1       85.1%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2CD       9        0.0%
DATA                 0      0     2CD      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Apr 01 01:21:06 2017

                      ?_LTC6804_adcv 0001                        ?_LTC6804_rdcv 0060  
           _eusart1TxBufferRemaining 00F4                                    _i 0045  
                                  _j 00DA                                    _k 00DC  
                                 l20 3E76                         ___awdiv@sign 001A  
                     ?_LTC6804_wrcfg 0030                  ___wmul@multiplicand 001F  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                       ___ftadd@exp1 0075                         ___ftadd@exp2 0074  
                        __CFG_LVP$ON 000000                         ___ftadd@sign 0073  
                                _CC1 00C5                                  _CC2 00C8  
                                _CC3 00CB                                  l320 3D98  
                                l313 3C8E                                  l170 3CEE  
                                l361 293A                                  l353 33BC  
                                l288 3B98                                  l693 1906  
                                l870 1134                                  l865 1154  
                                l859 0ECC                         __CFG_CPB$OFF 000000  
                       __CFG_CPD$OFF 000000                                  _log 26C4  
                    __end_of_ADC_ISR 3F32                         ___awmod@sign 0014  
                                prod 000FF3                                  wreg 000FE8  
           __end_ofLT6804@crc15Table 7CF3                         ___ftdiv@cntr 002C  
                       ___ftdiv@sign 0031                                 l1102 07AC  
                               l1400 1BE2                                 l1128 0B3E  
                               l1404 1C1C                                 l1406 1C44  
                               l1415 1D1A                                 l1424 1D44  
                               l1345 2B84                                 l1089 06C4  
                               l1442 29CE                                 l1435 2E5E  
                               l1443 29F6                                 l1524 35CA  
                               l1534 3966                                 l1377 3264  
                               l1449 2A5C                                 l1474 3E16  
                               l5033 2BCA                                 l5025 2BA6  
                               l5043 2BF4                                 l5029 2BB8  
                               l5037 2BE4                                 l5059 2CA0  
                               l5421 3C7A                                 l4615 3DA0  
                               l4801 3648                                 l7303 2D06  
                               l4903 33E6                                 l8111 078E  
                               l8103 075E                                 l8031 044E  
                               l8023 03DA                                 l8015 036A  
                               l7241 1C3A                                 l7321 2D48  
                               l4761 3296                                 l8201 0AFC  
                               l8121 07D4                                 l8105 076C  
                               l8033 0464                                 l7251 1C7C  
                               l7235 1C2A                                 l7331 2D70  
                               l8211 0B4C                                 l8115 07B0  
                               l8043 04DC                                 l8027 0408  
                               l7261 1CC6                                 l7229 1BF0  
                               l7317 2D38                                 l7421 3806  
                               l7413 37EC                                 l7341 3B86  
                               l8205 0B16                                 l8125 0826  
                               l8133 0900                                 l8109 077A  
                               l8053 053A                                 l8029 041E  
                               l8141 092A                                 ?_log 0080  
                               l7191 321C                                 l7183 31E6  
                               l7271 1D0E                                 l7263 1CD2  
                               l7327 2D60                                 l4767 3308  
                               l4775 3BCC                                 l8303 0CC8  
                               l8215 0BD2                                 l8151 096E  
                               l8135 090E                                 l8071 05EC  
                               l8039 04AE                                 l8223 3A34  
                               l7257 1CAA                                 l4793 3602  
                               l8305 0CD2                                 l7433 3832  
                               l7425 381A                                 l7417 37FA  
                               l7409 37E0                                 l7353 3BBA  
                               l7601 154E                                 l8081 0664  
                               l8057 05A0                                 l8217 0BE8  
                               l8233 3A7E                                 l7521 1A9A  
                               _ADAX 00E2                                 l7195 3232  
                               l7187 31F4                                 l7259 1CB8  
                               l4779 3BE8                                 l7451 2FAC  
                               l7371 34FA                                 l7419 3802  
                               l7355 3BBE                                 l8171 09E0  
                               l8139 091C                                 l8091 06B0  
                               l8083 066C                                 l8075 063C  
                               l8059 05A6                                 _ADCV 00E6  
                               l7197 3250                                 l7189 31FE  
                               l7445 3C4C                                 l7277 1D6E  
                               l7269 1D00                                 l4797 3620  
                               l4789 35E6                                 l8341 0F2E  
                               l7453 302A                                 l7381 351C  
                               l7365 34EA                                 l7429 3824  
                               l7613 3E5E                                 l8157 0994  
                               l8085 0680                                 l8405 3338  
                               l7525 1AA8                                 l7509 19E8  
                               l7199 325A                                 l7287 1DBC  
                               l8511 3060                                 l8327 0EB4  
                               l8319 0DEC                                 l8335 0EFE  
                               l8503 18C6                                 l7463 2820  
                               l7623 2968                                 l8191 0AA4  
                               l8175 0A08                                 l8159 099A  
                               l8079 065E                                 l8415 33B4  
                               l7543 1B64                                 l7519 1A8C  
                               l8431 34D0                                 l7297 2CDE  
                               l8521 30D2                                 l7481 2716  
                               l7801 31D2                                 l7377 3510  
                               l7393 3542                                 l8193 0AAE  
                               l8185 0A6C                                 l8097 06D2  
                               l8409 334E                                 l8425 3476  
                               l8515 3074                                 l8355 1048  
                               l8339 0F24                                 l8443 15D6  
                               l8435 1580                                 l7475 26E8  
                               l7731 2B7E                                 l7723 2B5A  
                               l7707 2B1C                                 l7379 3518  
                               l7563 1FEE                                 l7555 1F2C  
                               l8179 0A38                                 l8259 3AC8  
                    spi_write_read@i 001B                                 l8381 23AA  
                               l8373 229E                                 l8365 1138  
                               l8453 1654                                 l7629 2994  
                               l7397 3550                                 l7389 3538  
                               l8197 0AE6                                 l8429 34C2  
                               l8621 3B72                                 l7815 25BA  
                               l8391 2412                                 l8463 16D2  
                               l7719 2B4A                                 l7671 2A56  
                               l7663 2A32                                 l7583 134A  
                               l8199 0AF0                                 l8535 2460  
                               l7495 1956                                 l7745 2DFA  
                               l7833 264C                                 l8385 23C0  
                               l8297 0C98                                 l8481 17C2  
                               l8473 1750                                 l7729 2B72  
                               l7577 12A0                                 l8553 2506  
                               l7497 195E                                 l7739 2DD2  
                               l7851 26B2                                 l7843 267C  
                               l8379 23A0                                 l8491 1840  
                               l7659 2A22                                 l7595 14A4  
                               l7587 1370                                 l8547 24EC  
                               l8539 2476                                 l7765 2E38  
                               l7845 268C                                 l7837 2660  
                               l7933 2262                                 l7909 2054  
                               l7861 357C                                 l7685 2AAA  
                               l7669 2A4A                                 l7941 00D6  
                               l8549 24F0                                 l7847 2696  
                               l7783 39F6                                 l7791 314E  
                               l7863 3588                                 l7679 2A8C  
                               l7943 00EC                                 l8559 253E  
                               l7873 35BC                                 l7865 358C  
                               l7881 3924                                 l7953 0126  
                               l7961 019A                                 l7937 00C0  
                               l7795 318E                                 l7883 3930  
                               l7699 2AEC                                 l7971 01FE  
                               l7947 00F6                                 l7885 3934  
                               l7981 022A                                 l7973 0214  
                               l7895 397E                                 l7983 025C  
                               l7967 01C2                                 l7889 3958  
                               l7897 398A                                 l7977 0224  
                               l7989 0276                                 l7999 02BC  
                               STR_1 7FBC                                 STR_2 7FFA  
                               STR_3 7FA2                                 STR_4 7FD5  
                               STR_5 7FEC                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               _LATD 000F8C                                 _LATE 000F8D  
                               u4050 340E                                 u4058 3410  
                       printf@tmpval 0109                                 u5305 2EC0  
                               u5315 2F3C                                 u7021 1B90  
                               u7031 1BAE                                 u7231 2CC6  
                               u8040 2052                                 u3865 32BC  
                               u7251 2CEE                                 u8150 0302  
                               u7521 1A98                                 u8155 02F6  
                               u7460 281E                                 u7631 294C  
                               u8360 07A4                                 u7811 2DE2  
                               u7651 2978                                 u7910 25E0  
                               u8710 112C                                 u8630 0C96  
                               u8730 229C                                 u7915 25D6  
                               u8660 0EAC                                 u7791 2DBA  
                               u8680 0EFC                                 u7891 2596  
                               u9917 3C80                         _Voltage_data 0230  
                               _WPUB 000F61              Tempeture_Get@channelnum 0023  
                      _EUSART1_Write 3B84               __end_of_spi_write_read 365E  
                               _main 3B44                         ___ftpack@arg 000F  
                       ___ftpack@exp 0012                      _TMR0_StartTimer 3F2A  
                         _DelayMicro 3D8E                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 0051               SPI2_Exchange8bit@stuff 000F  
                      __CFG_BORV$190 000000                  _Under_Voltage_Value 00F0  
                               log@x 0080                                 prodh 000FF4  
                               prodl 000FF3                                 start 00AC  
                      __CFG_IESO$OFF 000000                       ??_LTC6804_adcv 0030  
                       ___ftmul@cntr 003F                       ??_LTC6804_rdcv 0066  
                       ___param_bank 000000                         ___ftmul@sign 0040  
                      ??_ReadCurrent 0041                         ___fttol@exp1 0084  
                      ?_Read_Battery 0098                                ??_log 0043  
                       ___fttol@lval 0080                  Initalize_LT6804b@IC 0036  
            __end_of_TMR0_Initialize 3D8E                    ?_LTC6804_rdcv_reg 0030  
                    __end_of_TempRun 3F1E       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 3EFE                                ?_main 00B4  
                    __end_of___awdiv 355A                                _CFGR0 0047  
                              _CFGR1 01E1                                _CFGR2 01E2  
                              _CFGR3 01E3                                _CFGR4 0048  
                              _CFGR5 0049                      __end_of___ftadd 1DE2  
                    __end_of___awmod 383C                   ??_LTC6804_rdcv_reg 0036  
                    __end_of___ftdiv 2E90                      __end_of___ftneg 3E24  
                    __end_of___lldiv 35DC                      __end_of___ftmul 2DAA  
                              _T0CON 000FD5                      ___awdiv@divisor 0017  
                    __end_of___llmod 3978                      __end_of___ftsub 3A20  
                    __end_of___fttol 26C4                                _LATD3 007C63  
                              _LATD6 007C66                       __CFG_DEBUG$OFF 000000  
                              i2l210 0070                                i2l202 004E  
                              i2l300 3CD2                                i2l204 005A  
                              i2l206 0066                      ___awdiv@counter 0019  
                              _TMR0H 000FD7                                _TMR0L 000FD6  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                                _CVolt 0248  
                              _CarOn 00F2                                _Delay 3C70  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
            __end_of_spi_write_array 3BFE                         ___lltoft@exp 001F  
               _EUSART1_Transmit_ISR 3CA4                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                   __end_of_TMR0_ISR 3EE2                                _Volt1 00CE  
                              _Volt2 01DE                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                        ___awtoft@sign 001A  
                              _fault 00D1                      __end_of_dpowers 7F1B  
                              _frexp 33BE                                _errno 00D6  
                              _scale 115E                      __end_of_isdigit 3E66  
                 __CFG_MCLRE$EXTMCLR 000000                        ___ftpack@sign 0013  
                              _retrn 02D8                                _putch 3F0A  
                     ?_EUSART1_Write 0001                      __end_of_set_adc 2F6C  
                              pclath 000FFA                                tablat 000FF5  
       Set_DCTO_Mode_OFF@fault_value 0027                      ?_spi_write_read 0011  
                              status 000FD8                       __CFG_HFOFST$ON 000000  
                  _LTC6804_rdcv$2734 0082                       __CFG_PBADEN$ON 000000  
                    __initialization 36DE                          log@exponent 0083  
                      _CurrentOffset 025A                    _SPI2_Exchange8bit 3E66  
         __end_of_EUSART1_Initialize 3C38                         __end_of_main 3B84  
                    ??_LTC6804_wrcfg 0034                       ??_Read_Battery 009C  
                         _CurrentDir 00F3                   ?_SPI2_Exchange8bit 0001  
                          ??_ADC_ISR 0001          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 0043                        ___fttol@sign1 007F  
       Read_Battery@BatteryPlacement 0098                  __end_of_ReadCurrent 310E  
                      __activetblptr 000002                       set_adc@md_bits 0019  
           __size_of_SPI2_Initialize 000E                 __size_of__tdiv_to_l_ 0132  
                ??_SPI2_Exchange8bit 000F                        ?_Set_ADC_Mode 0023  
                             ?_Delay 000F                ?_EUSART1_Transmit_ISR 0001  
                   _Set_DCC_Mode_OFF 365E                     __end_of_Run_Mode 2580  
            __end_of_TMR0_StartTimer 3F2E                  pec15_calc@remainder 002E  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                               ?_frexp 000F  
                   ___llmod@dividend 001C                               ?_scale 0060  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                             _ADSTAT 00EA                     ___awdiv@dividend 0015  
                   __end_of___awtoft 3C70                               _ANSELA 000F38  
                             ?_putch 0001                               _ANSELB 000F39  
                             _ANSELC 000F3A                               _ANSELD 000F3B  
                             _ANSELE 000F3C                     __end_of___ftpack 3284  
                   __end_of___lltoft 39D4                       __CFG_WDTEN$OFF 000000  
                             Delay@x 0012                               i2l6141 3D5C  
                             i2l6133 3D3C                               i2l6127 3CCC  
                             _RCREG1 000FAE                     __end_of___lwtoft 3E48  
                      ??_Temp_Filter 0041                               _RCSTA1 000FAB  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _SLRCON 000F60                               _TRISD3 007CAB  
                        ?_DelayMicro 000F                               _TXREG1 000FAD  
                             _TXSTA1 000FAC                           _Temp_Fault 3328  
          __end_of_SPI2_Exchange8bit 3E82                       __CFG_XINST$OFF 000000  
                          ??_TempRun 0043                     __end_of__powers_ 7F69  
              __end_of_Tempeture_Get 3D34                               ___ftge 310E  
                             ___wmul 3DB6                            ??___awdiv 0019  
                          ??___ftadd 0070                       __CFG_STVREN$ON 000000  
                          ??___awmod 0013                            ??___ftdiv 0029  
                          ??___ftneg 0012                            ??___lldiv 0017  
                          ??___ftmul 0038                            ??___llmod 0024  
                          ??___ftsub 0041                            ??___fttol 007A  
                   ?_TMR0_Initialize 0001                               _fround 1DE2  
                             clear_0 3724                               clear_1 3730  
                             clear_2 373C                               clear_3 3748  
                   ___awdiv@quotient 001B                   __size_of_Temp_Read 006C  
                    ___awmod@divisor 0011                      ___awmod@counter 0013  
                             _printf 00B0                         ?_wakeup_idle 0001  
              ___ftmul@f3_as_product 003C                       ??_Set_ADC_Mode 0026  
                       ReadCurrent@i 0094                            ??_isdigit 000F  
             __size_of_Set_REFON_Pin 004A                         __mediumconst 7AF2  
                          ??_set_adc 0017                               tblptrh 000FF7  
                   ?_spi_write_array 0011                               tblptrl 000FF6  
                             tblptru 000FF8                LTC6804_wrcfg@temp_pec 01CA  
           ADC_GetConversion@channel 0013                   __size_of_Start_BMS 0006  
               __end_of_LTC6804_adcv 3912                __end_of_TMR0_CallBack 3F34  
                  ReadCurrent@Return 0091                      ??_EUSART1_Write 000F  
               __end_of_LTC6804_rdcv 115E                      _eusart1RxBuffer 01CE  
              LTC6804_wrcfg@total_ic 0030        __size_of_INTERRUPT_Initialize 000C  
                    _eusart1TxBuffer 01D6                     __end_ofexp@coeff 7F87  
                  _SYSTEM_Initialize 3DDC                     __end_oflog@coeff 7FA2  
                 SetTempEnable@value 0025                           __accesstop 0060  
      ReadVoltToCurrent@CurrentTotal 008B              __end_of__initialization 374E  
                         ___ftadd@f1 006A                           ___ftadd@f2 006D  
                         ___ftge@ff1 0096                           ___ftge@ff2 0099  
                 ?_SYSTEM_Initialize 0001                         eval_poly@res 007D  
                      ___rparam_used 000001                           ___ftdiv@f1 0023  
                         ___ftdiv@f2 0026                           ___ftdiv@f3 002D  
                         ___ftneg@f1 000F                      _cell_codes_Bank 02C0  
                         ___awtoft@c 0017                        __end_of_Delay 3CA4  
                         ___ftmul@f1 0032                           ___ftmul@f2 0035  
                         _crc15Table 7CF3                           ___ftsub@f1 0076  
                         ___ftsub@f2 0079                  __end_of_Temp_Filter 293C  
                         ___fttol@f1 0076                       __pcstackCOMRAM 0001  
                     DelayMicro@wait 000F                         __pidataBANK0 3F1E  
                       __pidataBANK2 3EC2                  ??_SYSTEM_Initialize 0011  
                        _ReadCurrent 3044                            ?_TMR0_ISR 0001  
                         ___lltoft@c 0017                        __end_of_frexp 344E  
                Set_DCTO_Mode_OFF@ic 0023                        __end_of_scale 1574  
                      __end_of_putch 3F14              Read_Battery@Read_Status 009E  
                         ___lwtoft@c 0017             Set_REFON_Pin@fault_value 0028  
             ??_EUSART1_Transmit_ISR 0001                           __div_to_l_ 2A6E  
                __size_of_DelayMicro 0028                              ??_Delay 0011  
        __end_of_EUSART1_Receive_ISR 3D62                        ?_Temp_Convert 0001  
                    __div_to_l_@exp1 001A                     ?_TMR0_StartTimer 0001  
                    __div_to_l_@cntr 0019                              ??_frexp 0014  
                            ??_scale 0041            __end_of_SYSTEM_Initialize 3E00  
                    __div_to_l_@quot 0015                 __end_of_Read_Battery 1910  
                            ??_putch 0010                        _eusart1RxHead 004A  
                      _eusart1TxHead 004B                    ??_SPI2_Initialize 000F  
                      _eusart1RxTail 00DF                           __pbssBANK0 00B9  
                         __pbssBANK1 01CE                           __pbssBANK2 0200  
                      _eusart1TxTail 004C                   __size_of_eval_poly 00D8  
                    __CFG_PLLCFG$OFF 000000                    __end_of_Temp_Read 38A8  
                         __pnvCOMRAM 004F               Read_Battery@cell_codes 009A  
              Temp_Convert@steinhart 008D                           _pec15_calc 3284  
                        ?_Temp_Fault 0001                        __div_to_l_@f1 000F  
                      __div_to_l_@f2 0012                       LTC6804_rdcv@hi 006C  
                      _Set_REFON_Pin 3A20           __size_of_SPI2_Exchange8bit 001C  
                 spi_write_array@len 0011                   __CFG_CCP2MX$PORTC1 000000  
                        Temp_Fault@i 00AD                              ?___ftge 0096  
                  __end_of_Start_BMS 3F2A               LTC6804_rdcv@cell_codes 0064  
                            ?___wmul 001D                            ?_Run_Mode 0001  
                         ??_TMR0_ISR 0001                   __CFG_CCP3MX$PORTB5 000000  
            _LTC6804_DATA_ConfigBank 01F4             LTC6804_rdcv@data_counter 0096  
                            _ADC_ISR 3F2E                              ?_fround 0060  
             __size_of_SetTempEnable 004A                            ?___awtoft 0017  
                          ?___ftpack 000F                     LTC6804_wrcfg@cmd 0100  
                            ?_printf 009F                            ?___lltoft 0017  
            __size_of_ADC_Initialize 0018                            ?___lwtoft 0017  
                      Temp_Convert@x 008B                           _fault_flag 00E0  
                    Temp_Fault@fault 00AC                           _faultvalue 00D8  
                 _Over_Voltage_Value 00EE                              _OSCCON2 000FD2  
                     ??_Temp_Convert 0043                              _OSCTUNE 000F9B  
                            _SPBRGH1 000FB0                     ??_spi_write_read 0019  
                            _SSP2ADD 000F6E                              _SSP2BUF 000F6F  
                  _ReadVoltToCurrent 2268            __size_of_LTC6804_rdcv_reg 0120  
                 ?_ReadVoltToCurrent 0085                      _aux_codes_Bank1 0290  
                    _aux_codes_Bank2 029C                          _Temp_Filter 2804  
                     ?_Set_REFON_Pin 0023                              _Current 00B9  
                    __CFG_PWRTEN$OFF 000000                 __end_of_Set_ADC_Mode 3AB4  
                  __end_of__npowers_ 7F42                  ??_ReadVoltToCurrent 0041  
                            __Hparam 0000               LTC6804_wrcfg@cmd_index 01CC  
                         _scale$2739 0063             __end_of_Set_DCC_Mode_OFF 36DE  
                            __Lparam 0000                              _TempRun 3F14  
                    __size_of___ftge 00C8                           ??_Run_Mode 0043  
               spi_write_read@rx_len 0017                              ___awdiv 34D6  
                            ___ftadd 1B7A                              ___awmod 37CC  
               spi_write_read@tx_len 0013                              ___ftdiv 2DAA  
                            ___ftneg 3E00                              ___lldiv 355A  
                    __size_of___wmul 0026                              ___ftmul 2CB6  
                            ___llmod 3912                              ___ftsub 39D4  
                            ___fttol 2580                           _current_ic 004D  
                            __pcinit 36DE                           ??___awtoft 001A  
                         ??___ftpack 0014                    __end_of_eval_poly 3044  
                    __size_of_fround 024E                              __ramtop 0600  
                         ??___lltoft 001B                              __ptext0 3B44  
                            __ptext1 3F24                              __ptext2 344E  
                            __ptext3 3E9A                              __ptext4 1910  
                            __ptext5 3A20                              __ptext6 3AFE  
                            __ptext7 365E                              __ptext8 3A6A  
                            __ptext9 3AB4                      __size_of_printf 0B58  
                         ??___lwtoft 001A                            _T0CONbits 000FD5  
              __size_of_LTC6804_adcv 006A                          ?__div_to_l_ 000F  
                      ?_UpdateLT6804 0001                __size_of_LTC6804_rdcv 0556  
                            _infault 00E1                              _dpowers 7EF3  
              _OSCILLATOR_Initialize 3EF0                         __size_of_log 0140  
                            _isdigit 3E48                     ___awmod@dividend 000F  
               __size_of_wakeup_idle 0012                  __size_of_Temp_Fault 0096  
          __end_of_ReadVoltToCurrent 243C                   _EUSART1_Initialize 3BFE  
           ??_PIN_MANAGER_Initialize 000F                              _set_adc 2E90  
         __size_of_SYSTEM_Initialize 0024                 end_of_initialization 374E  
                          Delay@wait 000F                  ?_EUSART1_Initialize 0001  
                      _SetTempEnable 3AB4              Set_ADC_Mode@ADCOPT_Mode 0025  
                      __Lmediumconst 7AF2                         ??_DelayMicro 0011  
                      pec15_calc@len 0023                          ?_pec15_calc 0023  
                    ___lldiv@divisor 0013                      ___lldiv@counter 001B  
                            printf@c 011A                              printf@f 009F  
                       _LTC6804_adcv 38A8                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
                       _LTC6804_rdcv 0C08                    _Initalize_LT6804b 344E  
                     __tdiv_to_l_@f1 000F                       __tdiv_to_l_@f2 0012  
               ??_EUSART1_Initialize 000F                __end_of_LTC6804_wrcfg 1B7A  
                      ??__tdiv_to_l_ 0015                   ?_Initalize_LT6804b 0001  
                    _Stat_codes_Bank 0284                       ??_UpdateLT6804 0036  
                LTC6804_rdcv_reg@cmd 003A                  LTC6804_rdcv_reg@reg 0030  
              __size_of_Read_Battery 039C                   __end_of_DelayMicro 3DB6  
                ??_Initalize_LT6804b 0036                    _Set_DCTO_Mode_OFF 3AFE  
                          _TRISDbits 000F95                   ?_Set_DCTO_Mode_OFF 0023  
                EUSART1_Write@txData 000F                       ?_SetTempEnable 0023  
                    ??_Set_REFON_Pin 0026                          ___ftdiv@exp 0030  
                        printf@width 0107                  ??_Set_DCTO_Mode_OFF 0025  
              SPI2_Exchange8bit@data 0010                  __size_of__div_to_l_ 0128  
          __end_of_Initalize_LT6804b 34D6                          ___ftmul@exp 003B  
               _timer0ReloadVal16bit 004F                 __end_of_Temp_Convert 2268  
                       ?_ReadCurrent 008E         __end_of_INTERRUPT_Initialize 3F0A  
                     __end_of___ftge 31D6                      _Read_Status_INC 00D4  
                       _Read_Battery 1574                       __end_of___wmul 3DDC  
                  __size_of_TMR0_ISR 0010                       _ADC_Initialize 3E82  
             ?_OSCILLATOR_Initialize 0001                       __end_of_fround 2030  
                    _SPI2_Initialize 3EE2            __end_of_Set_DCTO_Mode_OFF 3B44  
                     __end_of_printf 0C08                  __size_of_pec15_calc 00A4  
                start_initialization 36DE           __size_of_ReadVoltToCurrent 01D4  
                         eval_poly@d 0079                           eval_poly@n 007B  
                         eval_poly@x 0076             __size_of_TMR0_Initialize 002C  
    __size_of_PIN_MANAGER_Initialize 0070                  __end_of__tdiv_to_l_ 2A6E  
                        __end_of_log 2804               __size_of_Tempeture_Get 002E  
                   _LTC6804_rdcv_reg 2B96                          putch@txData 0010  
              __end_of_EUSART1_Write 3BC2                       Set_ADC_Mode@ic 0023  
              __size_of_Set_ADC_Mode 004A                           frexp@value 000F  
           __size_of_spi_write_array 003C                      ___llmod@divisor 0020  
                    ___llmod@counter 0024                         ??_Temp_Fault 0041  
                          _Temp_DegF 0218                            _Temp_Read 383C  
                           ??___ftge 009C                             ??___wmul 0021  
             __size_of_TMR0_CallBack 0002               __end_of_ADC_Initialize 3E9A  
                        __pdataBANK0 00EE                          __pdataBANK2 02D8  
                           ?_ADC_ISR 0001                             ??_fround 0041  
                    LTC6804_adcv@cmd 0032                    __size_of_Run_Mode 0144  
                          _Start_BMS 3F24                            Run_Mode@k 00B2  
                           ??_printf 00A6                       _eusart1RxCount 00DE  
                         fround@prec 0069                    __size_of___awtoft 0038  
                  __size_of___ftpack 00AE                    __size_of___lltoft 005C  
                        __pbssCOMRAM 0043                         _Set_ADC_Mode 3A6A  
                  __size_of___lwtoft 0024        __size_of_EUSART1_Transmit_ISR 0032  
                      __pcstackBANK0 0060                        __pcstackBANK1 0100  
            LTC6804_rdcv@CELL_IN_REG 0092                   __end_of_Temp_Fault 33BE  
                    ??_SetTempEnable 0026                         _isdigit$2175 0010  
                      _PrevTemp_DegF 0200              Set_ADC_Mode@fault_value 0028  
       __size_of_EUSART1_Receive_ISR 002E                         ?_Temp_Filter 0001  
                    LTC6804_rdcv@reg 0060                      SetTempEnable@ic 0023  
                       _current_byte 0043                 __end_of_UpdateLT6804 3EB0  
                          __pnvBANK0 00F4             __size_of_TMR0_StartTimer 0004  
                spi_write_array@data 0013                           ?_Temp_Read 0001  
             _PIN_MANAGER_Initialize 375C           __size_of_Initalize_LT6804b 0088  
                           ?_TempRun 0001                    ?_Set_DCC_Mode_OFF 0023  
              LTC6804_rdcv@cell_data 006E                            __pintcode 0008  
                  _Temp_Convert$2726 0085                    _Temp_Convert$2727 0088  
                      __pmediumconst 7AF2              __end_of_SPI2_Initialize 3EF0  
                      _Tempeture_Get 3D06                             ?___awdiv 0015  
                           ?___ftadd 006A                             ?___awmod 000F  
                           ?___ftdiv 0023                             ?___ftneg 000F  
                           ?___lldiv 000F                             ?___ftmul 0032  
                           ?___llmod 001C                             ?___ftsub 0076  
                          __npowers_ 7F1B                             ?___fttol 0076  
                       Temp_Filter@x 0041                   ??_Set_DCC_Mode_OFF 0025  
                    ?_ADC_Initialize 0001                           ?_Start_BMS 0001  
       ??_INTERRUPT_InterruptManager 0001                     __CFG_PRICLKEN$ON 000000  
                        __tdiv_to_l_ 293C                      Set_REFON_Pin@ic 0023  
                       ??__div_to_l_ 0015           __size_of_Set_DCTO_Mode_OFF 0046  
                           _BAUDCON1 000FB8                           set_adc@CHG 0015  
                         set_adc@DCP 0011                             ?_isdigit 0001  
                          _eval_poly 2F6C                       __size_of_Delay 0034  
                           ?_set_adc 000F              Set_REFON_Pin@REFON_Mode 0025  
                 __end_of_crc15Table 7EF3                       __size_of_frexp 0090  
                      _TMR0_CallBack 3F32                       __size_of_scale 0416  
                     __size_of_putch 000A                LTC6804_rdcv@pec_error 0084  
               _INTERRUPT_Initialize 3EFE                    ??_TMR0_Initialize 000F  
                     ___wmul@product 0021                             _LATAbits 000F89  
                           _LATCbits 000F8B                 LTC6804_adcv@temp_pec 003A  
           LTC6804_rdcv@current_cell 0094                __size_of_Temp_Convert 0238  
                       ??_pec15_calc 0027             SetTempEnable@fault_value 0028  
                           _IPR1bits 000F9F                             _PIE1bits 000F9D  
__size_of_INTERRUPT_InterruptManager 00A4                             _PIR1bits 000F9E  
                 __end_of__div_to_l_ 2B96                       ?_Tempeture_Get 0023  
                           _RCONbits 000FD0                    ??_spi_write_array 0015  
                   __CFG_WDTPS$32768 000000                             _SSP2CON1 000F6C  
                           _TMR0_ISR 3ED2                             _SSP2STAT 000F6D  
               __size_of_ReadCurrent 00CA                        ??_wakeup_idle 0014  
                   __size_of_ADC_ISR 0004                           _ADCON0bits 000FC2  
                  ___wmul@multiplier 001D                           printf@flag 0111  
                         printf@fval 0115                           printf@prec 0118  
                         ?_eval_poly 0076                   __end_of_pec15_calc 3328  
                     ?_TMR0_CallBack 0001                         _Temp_Convert 2030  
                        _INTCON2bits 000FF1                            copy_data0 36F2  
                          copy_data1 3712                ?_INTERRUPT_Initialize 0001  
           LTC6804_rdcv_reg@temp_pec 0038                             _Aux_data 0278  
                        DelayMicro@x 0012             LTC6804_rdcv@received_pec 008C  
           LTC6804_rdcv_reg@total_ic 0032                        _Run_Mode$2728 00AF  
                          frexp@eptr 0012              __size_of_spi_write_read 0082  
                           __Hrparam 0000                          ??_Temp_Read 0014  
                           _Temp_Adc 01E4                     LT6804@crc15Table 7AF3  
                           __Lrparam 0000                    _ADC_GetConversion 3CD6  
                LTC6804_wrcfg@config 0032                   __CFG_BOREN$SBORDIS 000000  
                   __size_of_TempRun 000A                    __CFG_P2BMX$PORTD2 000000  
                           _Run_Mode 243C                     ?_SPI2_Initialize 0001  
            ??_OSCILLATOR_Initialize 000F                   ?_ADC_GetConversion 000F  
           __end_of_LTC6804_rdcv_reg 2CB6                spi_write_read@tx_Data 0011  
                  ??_TMR0_StartTimer 000F                     __size_of___awdiv 0084  
                   __size_of___ftadd 0268                     __size_of___awmod 0070  
              spi_write_read@rx_data 0015                     __size_of___ftdiv 00E6  
                   __size_of___ftneg 0024                     __size_of___lldiv 0082  
                   __size_of___ftmul 00F4                     __size_of___llmod 0066  
                   __size_of___ftsub 004C                     __size_of___fttol 0144  
        __size_of_EUSART1_Initialize 003A                             ___awtoft 3C38  
                           ___ftpack 31D6                          ??_Start_BMS 0038  
                        _fround$2737 0066                          _fround$2738 0063  
                           ___lltoft 3978                             ___lwtoft 3E24  
                ??_ADC_GetConversion 0011                     __size_of_isdigit 001E  
               LTC6804_rdcv@data_pec 008E                 LTC6804_rdcv@cell_reg 0090  
                __end_of_wakeup_idle 3EC2                     __size_of_set_adc 00DC  
                           __ptext10 3DDC                             __ptext11 3D62  
                           __ptext20 3D06                             __ptext12 3F2A  
                           __ptext21 3328                             __ptext13 3EE2  
                           __ptext30 293C                             __ptext22 00B0  
                           __ptext14 375C                             __ptext31 2A6E  
                           __ptext23 115E                             __ptext15 3EF0  
                           __ptext40 26C4                             __ptext32 3978  
                           __ptext24 3F0A                             __ptext16 3EFE  
                           __ptext41 33BE                             __ptext33 3912  
                           __ptext25 3B84                             __ptext17 3BFE  
                           __ptext50 3D8E                             __ptext42 2F6C  
                           __ptext34 355A                             __ptext26 3E48  
                           __ptext18 3E82                             __ptext51 35DC  
                           __ptext43 39D4                             __ptext35 3E00  
                           __ptext27 1DE2                             __ptext19 243C  
                           __ptext60 3DB6                             __ptext52 38A8  
                           __ptext44 2804                             __ptext36 310E  
                           __ptext28 37CC                             __ptext61 2580  
                           __ptext53 3BC2                             __ptext45 1574  
                           __ptext37 3F14                             __ptext29 34D6  
                           __ptext70 3F32                             __ptext62 2CB6  
                           __ptext54 3E66                             __ptext46 2E90  
                           __ptext38 383C                             __ptext71 3CA4  
                           __ptext63 2DAA                             __ptext55 3284  
                           __ptext47 0C08                             __ptext39 2030  
                           __ptext72 3D34                             __ptext64 1B7A  
                           __ptext56 3C70                             __ptext48 2B96  
                           __ptext73 3F2E                             __ptext65 3C38  
                           __ptext57 3044                             __ptext49 3EB0  
                           __ptext66 31D6                             __ptext58 3E24  
                           __ptext67 3CD6                             __ptext59 2268  
                           __ptext69 3ED2                             __powers_ 7F42  
                       _SSP2CON1bits 000F6C                __size_of_UpdateLT6804 0016  
                          set_adc@CH 0013                            set_adc@MD 000F  
             __size_of_LTC6804_wrcfg 026A                        __size_of_main 0040  
              __end_of_Set_REFON_Pin 3A6A                       _Aux_codes_Bank 026C  
          __end_of_ADC_GetConversion 3D06                         _TmpTemp_DegF 02A8  
               __size_of_Temp_Filter 0138                      ??_Tempeture_Get 0026  
                           int$flags 0051   __end_of_INTERRUPT_InterruptManager 00AC  
         _INTERRUPT_InterruptManager 0008               _ReadVoltToCurrent$2733 0088  
                           main@argc 00B4                            printf@exp 0113  
                           main@argv 00B6                            printf@val 010D  
               LTC6804_rdcv@total_ic 0062                  _EUSART1_Receive_ISR 3D34  
                       _SSP2STATbits 000F6D                             exp@coeff 7F69  
                           log@coeff 7F87                         _UpdateLT6804 3E9A  
                         _INTCONbits 000FF2                          ??_eval_poly 0041  
                    ??_TMR0_CallBack 0001                             isdigit@c 0011  
             ??_INTERRUPT_Initialize 000F              LTC6804_rdcv@parsed_cell 008A  
                           scale@scl 0066                       pec15_calc@addr 002C  
                     pec15_calc@data 0025                             intlevel2 0000  
                   __tdiv_to_l_@exp1 001D                     __tdiv_to_l_@cntr 001C  
                   __tdiv_to_l_@quot 0018                 ?_EUSART1_Receive_ISR 0001  
                   ___lldiv@dividend 000F              ?_PIN_MANAGER_Initialize 0001  
             LTC6804_rdcv@BYT_IN_REG 0088                           _RCSTA1bits 000FAB  
       __end_of_EUSART1_Transmit_ISR 3CD6                     ??_ADC_Initialize 000F  
                           printf@ap 0105                        _LTC6804_wrcfg 1910  
             __size_of_EUSART1_Write 003E                         ?__tdiv_to_l_ 000F  
                 Set_DCC_Mode_OFF@ic 0023                          _wakeup_idle 3EB0  
                        _printf$2740 0100                          _printf$1949 0103  
                   ___lldiv@quotient 0017                      _TMR0_Initialize 3D62  
          __size_of_Set_DCC_Mode_OFF 0080                    __CFG_T3CMX$PORTC0 000000  
          LTC6804_wrcfg@BYTES_IN_REG 01C8                __end_of_SetTempEnable 3AFE  
              ??_EUSART1_Receive_ISR 0001       __end_of_PIN_MANAGER_Initialize 37CC  
                    _spi_write_array 3BC2                 LTC6804_rdcv_reg@data 0034  
                  __CFG_FOSC$INTIO67 000000                       _spi_write_read 35DC  
         __size_of_ADC_GetConversion 0030               LTC6804_rdcv@NUM_RX_BYT 0086  
        Set_DCC_Mode_OFF@fault_value 0027  
