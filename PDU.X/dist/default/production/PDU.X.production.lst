

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Oct 07 00:27:41 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    78                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    79  0000                     
    80 ;; Function _Receive_peek is unused but had its address taken
    81  0000                     
    82                           	psect	idataCOMRAM
    83  001C34                     __pidataCOMRAM:
    84                           	opt stack 0
    85                           
    86                           ;initializer for _readwhat
    87  001C34  0001               	dw	1
    88                           
    89                           ;initializer for _Transmit_stall
    90  001C36  01                 	db	1
    91  0000                     _ANSELA	set	3896
    92  0000                     _ANSELB	set	3897
    93  0000                     _ANSELC	set	3898
    94  0000                     _ANSELCbits	set	3898
    95  0000                     _ANSELD	set	3899
    96  0000                     _ANSELE	set	3900
    97  0000                     _CCPTMRS1bits	set	3912
    98  0000                     _ANSB3	set	31179
    99  0000                     _ANSB4	set	31180
   100  0000                     _ANSD7	set	31199
   101  0000                     _ADCON0	set	4034
   102  0000                     _ADCON0bits	set	4034
   103  0000                     _ADCON1	set	4033
   104  0000                     _ADCON2	set	4032
   105  0000                     _ADCON2bits	set	4032
   106  0000                     _ADRESH	set	4036
   107  0000                     _ADRESL	set	4035
   108  0000                     _BAUD1CON	set	4024
   109  0000                     _CCP2CON	set	3942
   110  0000                     _CCPR2H	set	3944
   111  0000                     _CCPR2L	set	3943
   112  0000                     _EEADR	set	4009
   113  0000                     _EECON1bits	set	4006
   114  0000                     _EECON2	set	4007
   115  0000                     _EEDATA	set	4008
   116  0000                     _INTCON2bits	set	4081
   117  0000                     _INTCONbits	set	4082
   118  0000                     _IPR1bits	set	3999
   119  0000                     _LATA	set	3977
   120  0000                     _LATB	set	3978
   121  0000                     _LATC	set	3979
   122  0000                     _LATCbits	set	3979
   123  0000                     _LATD	set	3980
   124  0000                     _LATE	set	3981
   125  0000                     _OSCCON	set	4051
   126  0000                     _OSCCON2	set	4050
   127  0000                     _OSCTUNE	set	3995
   128  0000                     _PIE1bits	set	3997
   129  0000                     _PIR1bits	set	3998
   130  0000                     _PR2	set	4027
   131  0000                     _RC1STA	set	4011
   132  0000                     _RC1STAbits	set	4011
   133  0000                     _RCONbits	set	4048
   134  0000                     _RCREG1	set	4014
   135  0000                     _SPBRG1	set	4015
   136  0000                     _SPBRGH1	set	4016
   137  0000                     _T1CON	set	4045
   138  0000                     _T1CONbits	set	4045
   139  0000                     _T1GCON	set	4044
   140  0000                     _T1GCONbits	set	4044
   141  0000                     _T2CON	set	4026
   142  0000                     _T2CONbits	set	4026
   143  0000                     _TABLAT	set	4085
   144  0000                     _TBLPTRH	set	4087
   145  0000                     _TBLPTRL	set	4086
   146  0000                     _TBLPTRU	set	4088
   147  0000                     _TMR1H	set	4047
   148  0000                     _TMR1L	set	4046
   149  0000                     _TMR2	set	4028
   150  0000                     _TRISA	set	3986
   151  0000                     _TRISB	set	3987
   152  0000                     _TRISC	set	3988
   153  0000                     _TRISCbits	set	3988
   154  0000                     _TRISD	set	3989
   155  0000                     _TRISDbits	set	3989
   156  0000                     _TRISE	set	3990
   157  0000                     _TX1STA	set	4012
   158  0000                     _TXREG1	set	4013
   159  0000                     _WPUB	set	3937
   160  0000                     _LATA3	set	31819
   161  0000                     _LATA4	set	31820
   162  0000                     _LATB0	set	31824
   163  0000                     _LATB3	set	31827
   164  0000                     _LATB4	set	31828
   165  0000                     _LATB5	set	31829
   166  0000                     _LATD4	set	31844
   167  0000                     _LATD5	set	31845
   168  0000                     _LATD6	set	31846
   169  0000                     _LATD7	set	31847
   170  0000                     _TRISB3	set	31899
   171  0000                     _TRISB4	set	31900
   172  0000                     _TRISB5	set	31901
   173                           
   174                           ; #config settings
   175  0000                     
   176                           	psect	cinit
   177  00155A                     __pcinit:
   178                           	opt stack 0
   179  00155A                     start_initialization:
   180                           	opt stack 0
   181  00155A                     __initialization:
   182                           	opt stack 0
   183                           
   184                           ; Clear objects allocated to BANK4 (206 bytes)
   185  00155A  EE04  F000         	lfsr	0,__pbssBANK4
   186  00155E  0ECE               	movlw	206
   187  001560                     clear_0:
   188  001560  6AEE               	clrf	postinc0,c
   189  001562  06E8               	decf	wreg,f,c
   190  001564  E1FD               	bnz	clear_0
   191                           
   192                           ; Clear objects allocated to BANK3 (206 bytes)
   193  001566  EE03  F000         	lfsr	0,__pbssBANK3
   194  00156A  0ECE               	movlw	206
   195  00156C                     clear_1:
   196  00156C  6AEE               	clrf	postinc0,c
   197  00156E  06E8               	decf	wreg,f,c
   198  001570  E1FD               	bnz	clear_1
   199                           
   200                           ; Clear objects allocated to BANK2 (200 bytes)
   201  001572  EE02  F000         	lfsr	0,__pbssBANK2
   202  001576  0EC8               	movlw	200
   203  001578                     clear_2:
   204  001578  6AEE               	clrf	postinc0,c
   205  00157A  06E8               	decf	wreg,f,c
   206  00157C  E1FD               	bnz	clear_2
   207                           
   208                           ; Clear objects allocated to BANK1 (254 bytes)
   209  00157E  EE01  F000         	lfsr	0,__pbssBANK1
   210  001582  0EFE               	movlw	254
   211  001584                     clear_3:
   212  001584  6AEE               	clrf	postinc0,c
   213  001586  06E8               	decf	wreg,f,c
   214  001588  E1FD               	bnz	clear_3
   215                           
   216                           ; Clear objects allocated to BANK0 (113 bytes)
   217  00158A  EE00  F060         	lfsr	0,__pbssBANK0
   218  00158E  0E71               	movlw	113
   219  001590                     clear_4:
   220  001590  6AEE               	clrf	postinc0,c
   221  001592  06E8               	decf	wreg,f,c
   222  001594  E1FD               	bnz	clear_4
   223                           
   224                           ; Clear objects allocated to COMRAM (29 bytes)
   225  001596  EE00  F025         	lfsr	0,__pbssCOMRAM
   226  00159A  0E1D               	movlw	29
   227  00159C                     clear_5:
   228  00159C  6AEE               	clrf	postinc0,c
   229  00159E  06E8               	decf	wreg,f,c
   230  0015A0  E1FD               	bnz	clear_5
   231                           
   232                           ; Initialize objects allocated to COMRAM (3 bytes)
   233                           ; load TBLPTR registers with __pidataCOMRAM
   234  0015A2  0E34               	movlw	low __pidataCOMRAM
   235  0015A4  6EF6               	movwf	tblptrl,c
   236  0015A6  0E1C               	movlw	high __pidataCOMRAM
   237  0015A8  6EF7               	movwf	tblptrh,c
   238  0015AA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   239  0015AC  6EF8               	movwf	tblptru,c
   240  0015AE  0009               	tblrd		*+	;fetch initializer
   241  0015B0  CFF5 F042          	movff	tablat,__pdataCOMRAM
   242  0015B4  0009               	tblrd		*+	;fetch initializer
   243  0015B6  CFF5 F043          	movff	tablat,__pdataCOMRAM+1
   244  0015BA  0009               	tblrd		*+	;fetch initializer
   245  0015BC  CFF5 F044          	movff	tablat,__pdataCOMRAM+2
   246  0015C0                     end_of_initialization:
   247                           	opt stack 0
   248  0015C0                     __end_of__initialization:
   249                           	opt stack 0
   250  0015C0  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   251  0015C2  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   252  0015C4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   253  0015C6  6EF8               	movwf	tblptru,c
   254  0015C8  0100               	movlb	0
   255  0015CA  EFB7  F008         	goto	_main	;jump to C main() function
   256                           tblptru	equ	0xFF8
   257                           tblptrh	equ	0xFF7
   258                           tblptrl	equ	0xFF6
   259                           tablat	equ	0xFF5
   260                           postinc0	equ	0xFEE
   261                           wreg	equ	0xFE8
   262                           
   263                           	psect	bssCOMRAM
   264  000025                     __pbssCOMRAM:
   265                           	opt stack 0
   266  000025                     _group:
   267                           	opt stack 0
   268  000025                     	ds	2
   269  000027                     _prev_pos:
   270                           	opt stack 0
   271  000027                     	ds	2
   272  000029                     _receiveArrayAddress:
   273                           	opt stack 0
   274  000029                     	ds	2
   275  00002B                     _sendStructAddress:
   276                           	opt stack 0
   277  00002B                     	ds	2
   278  00002D                     _serial_available:
   279                           	opt stack 0
   280  00002D                     	ds	2
   281  00002F                     _serial_peek:
   282                           	opt stack 0
   283  00002F                     	ds	2
   284  000031                     _serial_read:
   285                           	opt stack 0
   286  000031                     	ds	2
   287  000033                     _serial_write:
   288                           	opt stack 0
   289  000033                     	ds	2
   290  000035                     _timer1ReloadVal:
   291                           	opt stack 0
   292  000035                     	ds	2
   293  000037                     updateComms@previousPowerState:
   294                           	opt stack 0
   295  000037                     	ds	2
   296  000039                     _AKNAKsend:
   297                           	opt stack 0
   298  000039                     	ds	1
   299  00003A                     _MCSOn:
   300                           	opt stack 0
   301  00003A                     	ds	1
   302  00003B                     _calc_CS:
   303                           	opt stack 0
   304  00003B                     	ds	1
   305  00003C                     _maxDataAddress:
   306                           	opt stack 0
   307  00003C                     	ds	1
   308  00003D                     _moduleAddress:
   309                           	opt stack 0
   310  00003D                     	ds	1
   311  00003E                     _returnAddress:
   312                           	opt stack 0
   313  00003E                     	ds	1
   314  00003F                     _rx_address:
   315                           	opt stack 0
   316  00003F                     	ds	1
   317  000040                     _rx_array_inx:
   318                           	opt stack 0
   319  000040                     	ds	1
   320  000041                     _rx_len:
   321                           	opt stack 0
   322  000041                     	ds	1
   323                           tblptru	equ	0xFF8
   324                           tblptrh	equ	0xFF7
   325                           tblptrl	equ	0xFF6
   326                           tablat	equ	0xFF5
   327                           postinc0	equ	0xFEE
   328                           wreg	equ	0xFE8
   329                           
   330                           	psect	dataCOMRAM
   331  000042                     __pdataCOMRAM:
   332                           	opt stack 0
   333  000042                     _readwhat:
   334                           	opt stack 0
   335  000042                     	ds	2
   336  000044                     _Transmit_stall:
   337                           	opt stack 0
   338  000044                     	ds	1
   339                           tblptru	equ	0xFF8
   340                           tblptrh	equ	0xFF7
   341                           tblptrl	equ	0xFF6
   342                           tablat	equ	0xFF5
   343                           postinc0	equ	0xFEE
   344                           wreg	equ	0xFE8
   345                           
   346                           	psect	bssBANK0
   347  000060                     __pbssBANK0:
   348                           	opt stack 0
   349  000060                     _Current:
   350                           	opt stack 0
   351  000060                     	ds	12
   352  00006C                     _CurrentADC:
   353                           	opt stack 0
   354  00006C                     	ds	12
   355  000078                     _Currentcomp:
   356                           	opt stack 0
   357  000078                     	ds	12
   358  000084                     _data:
   359                           	opt stack 0
   360  000084                     	ds	12
   361  000090                     _addressErrorCounter:
   362                           	opt stack 0
   363  000090                     	ds	2
   364  000092                     _alignErrorCounter:
   365                           	opt stack 0
   366  000092                     	ds	2
   367  000094                     _crcErrorCounter:
   368                           	opt stack 0
   369  000094                     	ds	2
   370  000096                     _dataAdressErrorCounter:
   371                           	opt stack 0
   372  000096                     	ds	2
   373  000098                     _receiveArray:
   374                           	opt stack 0
   375  000098                     	ds	40
   376  0000C0                     _crc_buffer:
   377                           	opt stack 0
   378  0000C0                     	ds	17
   379                           tblptru	equ	0xFF8
   380                           tblptrh	equ	0xFF7
   381                           tblptrl	equ	0xFF6
   382                           tablat	equ	0xFF5
   383                           postinc0	equ	0xFEE
   384                           wreg	equ	0xFE8
   385                           
   386                           	psect	bssBANK1
   387  000100                     __pbssBANK1:
   388                           	opt stack 0
   389  000100                     _registers:
   390                           	opt stack 0
   391  000100                     	ds	48
   392  000130                     _ring_buffer:
   393                           	opt stack 0
   394  000130                     	ds	206
   395                           tblptru	equ	0xFF8
   396                           tblptrh	equ	0xFF7
   397                           tblptrl	equ	0xFF6
   398                           tablat	equ	0xFF5
   399                           postinc0	equ	0xFEE
   400                           wreg	equ	0xFE8
   401                           
   402                           	psect	bssBANK2
   403  000200                     __pbssBANK2:
   404                           	opt stack 0
   405  000200                     _rx_buffer:
   406                           	opt stack 0
   407  000200                     	ds	200
   408                           tblptru	equ	0xFF8
   409                           tblptrh	equ	0xFF7
   410                           tblptrl	equ	0xFF6
   411                           tablat	equ	0xFF5
   412                           postinc0	equ	0xFEE
   413                           wreg	equ	0xFE8
   414                           
   415                           	psect	bssBANK3
   416  000300                     __pbssBANK3:
   417                           	opt stack 0
   418  000300                     _input_buffer:
   419                           	opt stack 0
   420  000300                     	ds	206
   421                           tblptru	equ	0xFF8
   422                           tblptrh	equ	0xFF7
   423                           tblptrl	equ	0xFF6
   424                           tablat	equ	0xFF5
   425                           postinc0	equ	0xFEE
   426                           wreg	equ	0xFE8
   427                           
   428                           	psect	bssBANK4
   429  000400                     __pbssBANK4:
   430                           	opt stack 0
   431  000400                     _output_buffer:
   432                           	opt stack 0
   433  000400                     	ds	206
   434                           tblptru	equ	0xFF8
   435                           tblptrh	equ	0xFF7
   436                           tblptrl	equ	0xFF6
   437                           tablat	equ	0xFF5
   438                           postinc0	equ	0xFEE
   439                           wreg	equ	0xFE8
   440                           
   441                           	psect	cstackBANK0
   442  0000D1                     __pcstackBANK0:
   443                           	opt stack 0
   444  0000D1                     ??_UART_buff_put:
   445  0000D1                     UART_buff_get@c:
   446                           	opt stack 0
   447  0000D1                     begin@ptr:
   448                           	opt stack 0
   449  0000D1                     FastTransfer_buffer_put@_this:
   450                           	opt stack 0
   451  0000D1                     FastTransfer_buffer_flush@_this:
   452                           	opt stack 0
   453  0000D1                     EnableSlavePower@onof:
   454                           	opt stack 0
   455  0000D1                     writeRegisters@val:
   456                           	opt stack 0
   457  0000D1                     PotSetpoint@new_point:
   458                           	opt stack 0
   459  0000D1                     PotClear@x:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x0
   463  0000D1                     	ds	2
   464  0000D3                     ??_PotSetpoint:
   465  0000D3                     begin@maxSize:
   466                           	opt stack 0
   467  0000D3                     FastTransfer_buffer_put@towhere:
   468                           	opt stack 0
   469  0000D3                     EnableSlavePower@slave:
   470                           	opt stack 0
   471  0000D3                     Send_put@_data:
   472                           	opt stack 0
   473  0000D3                     FastTransfer_buffer_flush@clearBuffer:
   474                           	opt stack 0
   475  0000D3                     writeRegisters@i:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x2
   479  0000D3                     	ds	1
   480  0000D4                     ??_receiveData:
   481  0000D4                     begin@givenAddress:
   482                           	opt stack 0
   483  0000D4                     FastTransfer_buffer_put@towhat:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x3
   487  0000D4                     	ds	1
   488  0000D5                     ??_sendData:
   489  0000D5                     begin@error:
   490                           	opt stack 0
   491  0000D5                     processPowerRequest@powerSet:
   492                           	opt stack 0
   493  0000D5                     Clear595@i:
   494                           	opt stack 0
   495  0000D5                     PotSetpoint@set_point:
   496                           	opt stack 0
   497                           
   498                           ; 2 bytes @ 0x4
   499  0000D5                     	ds	1
   500  0000D6                     sendData@whereToSend:
   501                           	opt stack 0
   502  0000D6                     ToSend@where:
   503                           	opt stack 0
   504  0000D6                     begin@stufftosend:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x5
   508  0000D6                     	ds	1
   509  0000D7                     sendData@CS:
   510                           	opt stack 0
   511  0000D7                     PotSetpoint@x:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x6
   515  0000D7                     	ds	1
   516  0000D8                     begin@stufftoreceive:
   517                           	opt stack 0
   518  0000D8                     sendData@i:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x7
   522  0000D8                     	ds	1
   523  0000D9                     PotSetpoint@new_pos:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x8
   527  0000D9                     	ds	1
   528  0000DA                     begin@stuffavailable:
   529                           	opt stack 0
   530  0000DA                     receiveData@holder:
   531                           	opt stack 0
   532                           
   533                           ; 3 bytes @ 0x9
   534  0000DA                     	ds	2
   535  0000DC                     begin@stuffpeek:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0xB
   539  0000DC                     	ds	1
   540  0000DD                     receiveData@holder_1381:
   541                           	opt stack 0
   542                           
   543                           ; 3 bytes @ 0xC
   544  0000DD                     	ds	3
   545  0000E0                     receiveData@crcHolder:
   546                           	opt stack 0
   547                           
   548                           ; 1 bytes @ 0xF
   549  0000E0                     	ds	1
   550  0000E1                     receiveData@crcHolder_1382:
   551                           	opt stack 0
   552                           
   553                           ; 1 bytes @ 0x10
   554  0000E1                     	ds	1
   555  0000E2                     receiveData@u:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x11
   559  0000E2                     	ds	2
   560  0000E4                     receiveData@r:
   561                           	opt stack 0
   562                           
   563                           ; 2 bytes @ 0x13
   564  0000E4                     	ds	2
   565  0000E6                     main@j:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x15
   569  0000E6                     	ds	2
   570  0000E8                     main@i:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x17
   574  0000E8                     	ds	2
   575  0000EA                     main@UP:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0x19
   579  0000EA                     	ds	1
   580                           tblptru	equ	0xFF8
   581                           tblptrh	equ	0xFF7
   582                           tblptrl	equ	0xFF6
   583                           tablat	equ	0xFF5
   584                           postinc0	equ	0xFEE
   585                           wreg	equ	0xFE8
   586                           
   587                           	psect	cstackCOMRAM
   588  000001                     __pcstackCOMRAM:
   589                           	opt stack 0
   590  000001                     ?i2_UART_buff_size:
   591                           	opt stack 0
   592  000001                     ?i2_UART_buff_modulo_inc:
   593                           	opt stack 0
   594  000001                     i2UART_buff_size@_this:
   595                           	opt stack 0
   596  000001                     i2UART_buff_modulo_inc@value:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0x0
   600  000001                     	ds	2
   601  000003                     i2UART_buff_modulo_inc@modulus:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x2
   605  000003                     	ds	2
   606  000005                     i2UART_buff_modulo_inc@my_value:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x4
   610  000005                     	ds	2
   611  000007                     i2UART_buff_put@_this:
   612                           	opt stack 0
   613  000007                     i2UART_buff_get@_this:
   614                           	opt stack 0
   615                           
   616                           ; 2 bytes @ 0x6
   617  000007                     	ds	2
   618  000009                     ??i2_UART_buff_get:
   619  000009                     i2UART_buff_put@c:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0x8
   623  000009                     	ds	1
   624  00000A                     ??i2_UART_buff_put:
   625                           
   626                           ; 1 bytes @ 0x9
   627  00000A                     	ds	1
   628  00000B                     i2UART_buff_get@c:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0xA
   632  00000B                     	ds	1
   633  00000C                     EUSART1_Receive_ISR@data:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0xB
   637  00000C                     	ds	1
   638  00000D                     ??_INTERRUPT_InterruptManager:
   639                           
   640                           ; 1 bytes @ 0xC
   641  00000D                     	ds	14
   642  00001B                     ?_FastTransfer_buffer_modulo_inc:
   643                           	opt stack 0
   644  00001B                     ?_UART_buff_modulo_inc:
   645                           	opt stack 0
   646  00001B                     ?_UART_buff_size:
   647                           	opt stack 0
   648  00001B                     ?___awdiv:
   649                           	opt stack 0
   650  00001B                     DATAEE_ReadByte@bAdd:
   651                           	opt stack 0
   652  00001B                     PWM4_LoadDutyValue@dutyValue:
   653                           	opt stack 0
   654  00001B                     CRC8@data:
   655                           	opt stack 0
   656  00001B                     FastTransfer_buffer_modulo_inc@value:
   657                           	opt stack 0
   658  00001B                     crcBufS_put@_this:
   659                           	opt stack 0
   660  00001B                     SetPin595@Reg:
   661                           	opt stack 0
   662  00001B                     UART_buff_size@_this:
   663                           	opt stack 0
   664  00001B                     UART_buff_modulo_inc@value:
   665                           	opt stack 0
   666  00001B                     ___awdiv@dividend:
   667                           	opt stack 0
   668  00001B                     memset@p1:
   669                           	opt stack 0
   670  00001B                     Delay@wait:
   671                           	opt stack 0
   672                           
   673                           ; 4 bytes @ 0x1A
   674  00001B                     	ds	1
   675  00001C                     ??_ComputeStorageData:
   676                           
   677                           ; 1 bytes @ 0x1B
   678  00001C                     	ds	1
   679  00001D                     ??_PWM4_LoadDutyValue:
   680  00001D                     ?_Receive_available:
   681                           	opt stack 0
   682  00001D                     CRC8@len:
   683                           	opt stack 0
   684  00001D                     crcBufS_put@address:
   685                           	opt stack 0
   686  00001D                     FastTransfer_buffer_modulo_inc@modulus:
   687                           	opt stack 0
   688  00001D                     SetPin595@pin:
   689                           	opt stack 0
   690  00001D                     UART_buff_modulo_inc@modulus:
   691                           	opt stack 0
   692  00001D                     ___awdiv@divisor:
   693                           	opt stack 0
   694  00001D                     memset@c:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0x1C
   698  00001D                     	ds	1
   699  00001E                     CRC8@sum:
   700                           	opt stack 0
   701  00001E                     crcBufS_put@oldCRC:
   702                           	opt stack 0
   703  00001E                     ComputeStorageData@i:
   704                           	opt stack 0
   705                           
   706                           ; 2 bytes @ 0x1D
   707  00001E                     	ds	1
   708  00001F                     ??_Delay:
   709  00001F                     CRC8@extract:
   710                           	opt stack 0
   711  00001F                     crcBufS_put@status:
   712                           	opt stack 0
   713  00001F                     ___awdiv@counter:
   714                           	opt stack 0
   715  00001F                     FastTransfer_buffer_modulo_inc@my_value:
   716                           	opt stack 0
   717  00001F                     SetPin595@value:
   718                           	opt stack 0
   719  00001F                     UART_buff_modulo_inc@my_value:
   720                           	opt stack 0
   721  00001F                     memset@n:
   722                           	opt stack 0
   723                           
   724                           ; 2 bytes @ 0x1E
   725  00001F                     	ds	1
   726  000020                     ??_crcBufS_put:
   727  000020                     CRC8@tempI:
   728                           	opt stack 0
   729  000020                     ___awdiv@sign:
   730                           	opt stack 0
   731  000020                     Delay@i:
   732                           	opt stack 0
   733                           
   734                           ; 4 bytes @ 0x1F
   735  000020                     	ds	1
   736  000021                     ??_FastTransfer_buffer_put:
   737  000021                     ??_SetPin595:
   738  000021                     CRC8@crc:
   739                           	opt stack 0
   740  000021                     UART_buff_put@_this:
   741                           	opt stack 0
   742  000021                     UART_buff_get@_this:
   743                           	opt stack 0
   744  000021                     ___awdiv@quotient:
   745                           	opt stack 0
   746  000021                     memset@p:
   747                           	opt stack 0
   748                           
   749                           ; 2 bytes @ 0x20
   750  000021                     	ds	2
   751  000023                     ??_UART_buff_get:
   752  000023                     UART_buff_put@c:
   753                           	opt stack 0
   754  000023                     ToSend@what:
   755                           	opt stack 0
   756  000023                     UART_buff_init@_this:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0x22
   760  000023                     	ds	1
   761  000024                     
   762                           ; 1 bytes @ 0x23
   763  000024                     	ds	1
   764  000025                     tblptru	equ	0xFF8
   765                           tblptrh	equ	0xFF7
   766                           tblptrl	equ	0xFF6
   767                           tablat	equ	0xFF5
   768                           postinc0	equ	0xFEE
   769                           wreg	equ	0xFE8
   770                           
   771                           ; 1 bytes @ 0x24
   772 ;;
   773 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   774 ;;
   775 ;; *************** function _main *****************
   776 ;; Defined at:
   777 ;;		line 11 in file "main.c"
   778 ;; Parameters:    Size  Location     Type
   779 ;;		None
   780 ;; Auto vars:     Size  Location     Type
   781 ;;  i               2   23[BANK0 ] int 
   782 ;;  j               2   21[BANK0 ] int 
   783 ;;  UP              1   25[BANK0 ] unsigned char 
   784 ;; Return value:  Size  Location     Type
   785 ;;                  1    wreg      void 
   786 ;; Registers used:
   787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   788 ;; Tracked objects:
   789 ;;		On entry : 0/0
   790 ;;		On exit  : 0/0
   791 ;;		Unchanged: 0/0
   792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   793 ;;      Params:         0       0       0       0       0       0       0
   794 ;;      Locals:         0       5       0       0       0       0       0
   795 ;;      Temps:          0       0       0       0       0       0       0
   796 ;;      Totals:         0       5       0       0       0       0       0
   797 ;;Total ram usage:        5 bytes
   798 ;; Hardware stack levels required when called:   10
   799 ;; This function calls:
   800 ;;		_ComputeStorageData
   801 ;;		_CoolingCheck
   802 ;;		_CoolingStart
   803 ;;		_CoolingStop
   804 ;;		_PDUStartup
   805 ;;		_PWM4_LoadDutyValue
   806 ;;		_PotSetpoint
   807 ;;		_SYSTEM_Initialize
   808 ;;		_updateComms
   809 ;; This function is called by:
   810 ;;		Startup code after reset
   811 ;; This function uses a non-reentrant model
   812 ;;
   813                           
   814                           	psect	text0
   815  00116E                     __ptext0:
   816                           	opt stack 0
   817  00116E                     _main:
   818                           	opt stack 21
   819                           
   820                           ;main.c: 13: SYSTEM_Initialize();
   821                           
   822                           ;incstack = 0
   823  00116E  EC72  F00A         	call	_SYSTEM_Initialize	;wreg free
   824                           
   825                           ;main.c: 14: PDUStartup();
   826  001172  EC4E  F00B         	call	_PDUStartup	;wreg free
   827                           
   828                           ;main.c: 33: (INTCONbits.GIE = 1);
   829  001176  8EF2               	bsf	intcon,7,c	;volatile
   830                           
   831                           ;main.c: 36: (INTCONbits.PEIE = 1);
   832  001178  8CF2               	bsf	intcon,6,c	;volatile
   833                           
   834                           ;main.c: 56: PotSetpoint(0);
   835  00117A  0E00               	movlw	0
   836  00117C  0100               	movlb	0	; () banked
   837  00117E  6FD2               	movwf	(PotSetpoint@new_point+1)& (0+255),b
   838  001180  0E00               	movlw	0
   839  001182  6FD1               	movwf	PotSetpoint@new_point& (0+255),b
   840  001184  EC0D  F006         	call	_PotSetpoint	;wreg free
   841                           
   842                           ;main.c: 57: PWM4_LoadDutyValue(0);
   843  001188  0E00               	movlw	0
   844  00118A  6E1C               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
   845  00118C  0E00               	movlw	0
   846  00118E  6E1B               	movwf	PWM4_LoadDutyValue@dutyValue,c
   847  001190  ECEA  F00C         	call	_PWM4_LoadDutyValue	;wreg free
   848                           
   849                           ;main.c: 58: LATCbits.LATC5 = 0;
   850  001194  9A8B               	bcf	3979,5,c	;volatile
   851                           
   852                           ;main.c: 59: do { LATA3 = 1; } while(0);
   853  001196  8689               	bsf	3977,3,c	;volatile
   854                           
   855                           ;main.c: 60: do { LATA4 = 1; } while(0);
   856  001198  8889               	bsf	3977,4,c	;volatile
   857                           
   858                           ;main.c: 61: int i = 0;
   859  00119A  0E00               	movlw	0
   860  00119C  0100               	movlb	0	; () banked
   861  00119E  6FE9               	movwf	(main@i+1)& (0+255),b
   862  0011A0  0E00               	movlw	0
   863  0011A2  6FE8               	movwf	main@i& (0+255),b
   864                           
   865                           ; BSR set to: 0
   866                           ;main.c: 62: bool UP = 0;
   867  0011A4  0E00               	movlw	0
   868  0011A6  0100               	movlb	0	; () banked
   869  0011A8  6FEA               	movwf	main@UP& (0+255),b
   870                           
   871                           ;main.c: 63: ComputeStorageData();
   872  0011AA  EC0B  F007         	call	_ComputeStorageData	;wreg free
   873                           
   874                           ;main.c: 65: int j = 1;
   875  0011AE  0E00               	movlw	0
   876  0011B0  0100               	movlb	0	; () banked
   877  0011B2  6FE7               	movwf	(main@j+1)& (0+255),b
   878  0011B4  0E01               	movlw	1
   879  0011B6  6FE6               	movwf	main@j& (0+255),b
   880  0011B8                     l4606:
   881                           
   882                           ; BSR set to: 0
   883                           ;main.c: 67: updateComms();
   884  0011B8  EC9E  F00C         	call	_updateComms	;wreg free
   885                           
   886                           ;main.c: 68: if(CoolingCheck() && UP == 0){
   887  0011BC  EC16  F00E         	call	_CoolingCheck	;wreg free
   888  0011C0  0900               	iorlw	0
   889  0011C2  B4D8               	btfsc	status,2,c
   890  0011C4  D00A               	goto	l4616
   891  0011C6  0100               	movlb	0	; () banked
   892  0011C8  51EA               	movf	main@UP& (0+255),w,b
   893  0011CA  0100               	movlb	0	; () banked
   894  0011CC  A4D8               	btfss	status,2,c
   895  0011CE  D005               	goto	l4616
   896                           
   897                           ; BSR set to: 0
   898                           ;main.c: 69: UP = 1;
   899  0011D0  0E01               	movlw	1
   900  0011D2  0100               	movlb	0	; () banked
   901  0011D4  6FEA               	movwf	main@UP& (0+255),b
   902                           
   903                           ; BSR set to: 0
   904                           ;main.c: 70: CoolingStart();
   905  0011D6  EC79  F00D         	call	_CoolingStart	;wreg free
   906  0011DA                     l4616:
   907                           
   908                           ;main.c: 71: }
   909                           ;main.c: 72: if(!CoolingCheck() && UP == 1){
   910  0011DA  EC16  F00E         	call	_CoolingCheck	;wreg free
   911  0011DE  0900               	iorlw	0
   912  0011E0  A4D8               	btfss	status,2,c
   913  0011E2  D009               	goto	l4624
   914  0011E4  0100               	movlb	0	; () banked
   915  0011E6  05EA               	decf	main@UP& (0+255),w,b
   916  0011E8  A4D8               	btfss	status,2,c
   917  0011EA  D005               	goto	l4624
   918                           
   919                           ; BSR set to: 0
   920                           ;main.c: 73: UP = 0;
   921  0011EC  0E00               	movlw	0
   922  0011EE  0100               	movlb	0	; () banked
   923  0011F0  6FEA               	movwf	main@UP& (0+255),b
   924                           
   925                           ; BSR set to: 0
   926                           ;main.c: 74: CoolingStop();
   927  0011F2  ECF3  F00D         	call	_CoolingStop	;wreg free
   928  0011F6                     l4624:
   929                           
   930                           ;main.c: 75: }
   931                           ;main.c: 76: i++;
   932  0011F6  0100               	movlb	0	; () banked
   933  0011F8  4BE8               	infsnz	main@i& (0+255),f,b
   934  0011FA  2BE9               	incf	(main@i+1)& (0+255),f,b
   935                           
   936                           ; BSR set to: 0
   937                           ;main.c: 77: PWM4_LoadDutyValue(i);
   938  0011FC  C0E8  F01B         	movff	main@i,PWM4_LoadDutyValue@dutyValue
   939  001200  C0E9  F01C         	movff	main@i+1,PWM4_LoadDutyValue@dutyValue+1
   940  001204  ECEA  F00C         	call	_PWM4_LoadDutyValue	;wreg free
   941                           
   942                           ;main.c: 78: if(i>500){
   943  001208  0100               	movlb	0	; () banked
   944  00120A  BFE9               	btfsc	(main@i+1)& (0+255),7,b
   945  00120C  D7D5               	goto	l4606
   946  00120E  0EF5               	movlw	245
   947  001210  0100               	movlb	0	; () banked
   948  001212  5DE8               	subwf	main@i& (0+255),w,b
   949  001214  0E01               	movlw	1
   950  001216  0100               	movlb	0	; () banked
   951  001218  59E9               	subwfb	(main@i+1)& (0+255),w,b
   952  00121A  A0D8               	btfss	status,0,c
   953  00121C  D7CD               	goto	l4606
   954                           
   955                           ; BSR set to: 0
   956                           ;main.c: 79: i = 0;
   957  00121E  0E00               	movlw	0
   958  001220  0100               	movlb	0	; () banked
   959  001222  6FE9               	movwf	(main@i+1)& (0+255),b
   960  001224  0E00               	movlw	0
   961  001226  6FE8               	movwf	main@i& (0+255),b
   962                           
   963                           ; BSR set to: 0
   964                           
   965                           ; BSR set to: 0
   966  001228  D7C7               	goto	l4606
   967  00122A                     __end_of_main:
   968                           	opt stack 0
   969                           tblptru	equ	0xFF8
   970                           tblptrh	equ	0xFF7
   971                           tblptrl	equ	0xFF6
   972                           tablat	equ	0xFF5
   973                           intcon	equ	0xFF2
   974                           postinc0	equ	0xFEE
   975                           wreg	equ	0xFE8
   976                           status	equ	0xFD8
   977                           
   978 ;; *************** function _updateComms *****************
   979 ;; Defined at:
   980 ;;		line 21 in file "Communications.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;		None
   983 ;; Auto vars:     Size  Location     Type
   984 ;;		None
   985 ;; Return value:  Size  Location     Type
   986 ;;                  1    wreg      void 
   987 ;; Registers used:
   988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   989 ;; Tracked objects:
   990 ;;		On entry : 0/0
   991 ;;		On exit  : 0/0
   992 ;;		Unchanged: 0/0
   993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   994 ;;      Params:         0       0       0       0       0       0       0
   995 ;;      Locals:         0       0       0       0       0       0       0
   996 ;;      Temps:          0       0       0       0       0       0       0
   997 ;;      Totals:         0       0       0       0       0       0       0
   998 ;;Total ram usage:        0 bytes
   999 ;; Hardware stack levels used:    1
  1000 ;; Hardware stack levels required when called:    9
  1001 ;; This function calls:
  1002 ;;		_processPowerRequest
  1003 ;;		_receiveData
  1004 ;;		_respondECU
  1005 ;; This function is called by:
  1006 ;;		_main
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010                           	psect	text1
  1011  00193C                     __ptext1:
  1012                           	opt stack 0
  1013  00193C                     _updateComms:
  1014                           	opt stack 21
  1015                           
  1016                           ;Communications.c: 22: if (receiveData()) {
  1017                           
  1018                           ; BSR set to: 0
  1019                           ;incstack = 0
  1020  00193C  EC58  F000         	call	_receiveData	;wreg free
  1021  001940  0900               	iorlw	0
  1022  001942  B4D8               	btfsc	status,2,c
  1023  001944  0012               	return	
  1024                           
  1025                           ;Communications.c: 23: static int previousPowerState;
  1026                           ;Communications.c: 24: if (previousPowerState != receiveArray[1]) {
  1027  001946  5037               	movf	updateComms@previousPowerState,w,c
  1028  001948  0100               	movlb	0	; () banked
  1029  00194A  199A               	xorwf	(_receiveArray+2)& (0+255),w,b	;volatile
  1030  00194C  E105               	bnz	u3960
  1031  00194E  5038               	movf	updateComms@previousPowerState+1,w,c
  1032  001950  0100               	movlb	0	; () banked
  1033  001952  199B               	xorwf	(_receiveArray+3)& (0+255),w,b	;volatile
  1034  001954  B4D8               	btfsc	status,2,c
  1035  001956  D00A               	goto	l4436
  1036  001958                     u3960:
  1037                           
  1038                           ; BSR set to: 0
  1039                           ;Communications.c: 25: previousPowerState = receiveArray[1];
  1040  001958  C09A  F037         	movff	_receiveArray+2,updateComms@previousPowerState	;volatile
  1041  00195C  C09B  F038         	movff	_receiveArray+3,updateComms@previousPowerState+1	;volatile
  1042                           
  1043                           ; BSR set to: 0
  1044                           ;Communications.c: 26: processPowerRequest(previousPowerState);
  1045  001960  C037  F0D5         	movff	updateComms@previousPowerState,processPowerRequest@powerSet
  1046  001964  C038  F0D6         	movff	updateComms@previousPowerState+1,processPowerRequest@powerSet+1
  1047  001968  EC50  F008         	call	_processPowerRequest	;wreg free
  1048  00196C                     l4436:
  1049                           
  1050                           ;Communications.c: 27: }
  1051                           ;Communications.c: 28: respondECU();
  1052  00196C  ECAA  F00B         	call	_respondECU	;wreg free
  1053  001970  0012               	return	
  1054  001972                     __end_of_updateComms:
  1055                           	opt stack 0
  1056                           tblptru	equ	0xFF8
  1057                           tblptrh	equ	0xFF7
  1058                           tblptrl	equ	0xFF6
  1059                           tablat	equ	0xFF5
  1060                           intcon	equ	0xFF2
  1061                           postinc0	equ	0xFEE
  1062                           wreg	equ	0xFE8
  1063                           status	equ	0xFD8
  1064                           
  1065 ;; *************** function _respondECU *****************
  1066 ;; Defined at:
  1067 ;;		line 48 in file "Communications.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;		None
  1070 ;; Auto vars:     Size  Location     Type
  1071 ;;		None
  1072 ;; Return value:  Size  Location     Type
  1073 ;;                  1    wreg      void 
  1074 ;; Registers used:
  1075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1076 ;; Tracked objects:
  1077 ;;		On entry : 0/0
  1078 ;;		On exit  : 0/0
  1079 ;;		Unchanged: 0/0
  1080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1081 ;;      Params:         0       0       0       0       0       0       0
  1082 ;;      Locals:         0       0       0       0       0       0       0
  1083 ;;      Temps:          0       0       0       0       0       0       0
  1084 ;;      Totals:         0       0       0       0       0       0       0
  1085 ;;Total ram usage:        0 bytes
  1086 ;; Hardware stack levels used:    1
  1087 ;; Hardware stack levels required when called:    8
  1088 ;; This function calls:
  1089 ;;		_Delay
  1090 ;;		_ToSend
  1091 ;;		_sendData
  1092 ;; This function is called by:
  1093 ;;		_updateComms
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text2
  1098  001754                     __ptext2:
  1099                           	opt stack 0
  1100  001754                     _respondECU:
  1101                           	opt stack 21
  1102                           
  1103                           ;Communications.c: 49: LATCbits.LATC5 = 1;
  1104                           
  1105                           ;incstack = 0
  1106  001754  8A8B               	bsf	3979,5,c	;volatile
  1107                           
  1108                           ;Communications.c: 50: ToSend(0, 5);
  1109  001756  0E00               	movlw	0
  1110  001758  6E24               	movwf	ToSend@what+1,c
  1111  00175A  0E05               	movlw	5
  1112  00175C  6E23               	movwf	ToSend@what,c
  1113  00175E  0E00               	movlw	0
  1114  001760  EC57  F00D         	call	_ToSend
  1115                           
  1116                           ;Communications.c: 51: ToSend(1,0);
  1117  001764  0E00               	movlw	0
  1118  001766  6E24               	movwf	ToSend@what+1,c
  1119  001768  0E00               	movlw	0
  1120  00176A  6E23               	movwf	ToSend@what,c
  1121  00176C  0E01               	movlw	1
  1122  00176E  EC57  F00D         	call	_ToSend
  1123                           
  1124                           ;Communications.c: 52: Delay(5);
  1125  001772  0E05               	movlw	5
  1126  001774  6E1B               	movwf	Delay@wait,c
  1127  001776  0E00               	movlw	0
  1128  001778  6E1C               	movwf	Delay@wait+1,c
  1129  00177A  0E00               	movlw	0
  1130  00177C  6E1D               	movwf	Delay@wait+2,c
  1131  00177E  0E00               	movlw	0
  1132  001780  6E1E               	movwf	Delay@wait+3,c
  1133  001782  EC1E  F00C         	call	_Delay	;wreg free
  1134                           
  1135                           ;Communications.c: 53: sendData(1);
  1136  001786  0E01               	movlw	1
  1137  001788  EC4A  F004         	call	_sendData
  1138                           
  1139                           ;Communications.c: 54: Delay(3);
  1140  00178C  0E03               	movlw	3
  1141  00178E  6E1B               	movwf	Delay@wait,c
  1142  001790  0E00               	movlw	0
  1143  001792  6E1C               	movwf	Delay@wait+1,c
  1144  001794  0E00               	movlw	0
  1145  001796  6E1D               	movwf	Delay@wait+2,c
  1146  001798  0E00               	movlw	0
  1147  00179A  6E1E               	movwf	Delay@wait+3,c
  1148  00179C  EC1E  F00C         	call	_Delay	;wreg free
  1149                           
  1150                           ;Communications.c: 55: LATCbits.LATC5 = 0;
  1151  0017A0  9A8B               	bcf	3979,5,c	;volatile
  1152  0017A2  0012               	return		;funcret
  1153  0017A4                     __end_of_respondECU:
  1154                           	opt stack 0
  1155                           tblptru	equ	0xFF8
  1156                           tblptrh	equ	0xFF7
  1157                           tblptrl	equ	0xFF6
  1158                           tablat	equ	0xFF5
  1159                           intcon	equ	0xFF2
  1160                           postinc0	equ	0xFEE
  1161                           wreg	equ	0xFE8
  1162                           status	equ	0xFD8
  1163                           
  1164 ;; *************** function _sendData *****************
  1165 ;; Defined at:
  1166 ;;		line 53 in file "FastTransfer.c"
  1167 ;; Parameters:    Size  Location     Type
  1168 ;;  whereToSend     1    wreg     unsigned char 
  1169 ;; Auto vars:     Size  Location     Type
  1170 ;;  whereToSend     1    5[BANK0 ] unsigned char 
  1171 ;;  i               2    7[BANK0 ] int 
  1172 ;;  CS              1    6[BANK0 ] unsigned char 
  1173 ;; Return value:  Size  Location     Type
  1174 ;;                  1    wreg      void 
  1175 ;; Registers used:
  1176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1177 ;; Tracked objects:
  1178 ;;		On entry : 0/0
  1179 ;;		On exit  : 0/0
  1180 ;;		Unchanged: 0/0
  1181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1182 ;;      Params:         0       0       0       0       0       0       0
  1183 ;;      Locals:         0       4       0       0       0       0       0
  1184 ;;      Temps:          0       1       0       0       0       0       0
  1185 ;;      Totals:         0       5       0       0       0       0       0
  1186 ;;Total ram usage:        5 bytes
  1187 ;; Hardware stack levels used:    1
  1188 ;; Hardware stack levels required when called:    7
  1189 ;; This function calls:
  1190 ;;		Absolute function
  1191 ;;		_CRC8
  1192 ;;		_FastTransfer_buffer_flush
  1193 ;;		_Send_put
  1194 ;;		_crcBufS_put
  1195 ;; This function is called by:
  1196 ;;		_respondECU
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200                           	psect	text3
  1201  000894                     __ptext3:
  1202                           	opt stack 0
  1203  000894                     _sendData:
  1204                           	opt stack 21
  1205                           
  1206                           ;incstack = 0
  1207                           ;sendData@whereToSend stored from wreg
  1208  000894  0100               	movlb	0	; () banked
  1209  000896  6FD6               	movwf	sendData@whereToSend& (0+255),b
  1210                           
  1211                           ;FastTransfer.c: 56: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  1212  000898  C02B  F01B         	movff	_sendStructAddress,CRC8@data
  1213  00089C  C02C  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1214  0008A0  C1FC  F01D         	movff	_ring_buffer+204,CRC8@len
  1215  0008A4  ECF9  F00B         	call	_CRC8	;wreg free
  1216  0008A8  0100               	movlb	0	; () banked
  1217  0008AA  6FD7               	movwf	sendData@CS& (0+255),b
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;FastTransfer.c: 58: serial_write(0x06);
  1221  0008AC  D801               	call	u3238
  1222  0008AE  D00B               	goto	l3966
  1223  0008B0                     u3238:
  1224  0008B0  0005               	push	
  1225  0008B2  6EFA               	movwf	pclath,c
  1226  0008B4  5033               	movf	_serial_write,w,c
  1227  0008B6  6EFD               	movwf	tosl,c
  1228  0008B8  5034               	movf	_serial_write+1,w,c
  1229  0008BA  6EFE               	movwf	tosh,c
  1230  0008BC  50F8               	movf	tblptru,w,c
  1231  0008BE  6EFF               	movwf	tosu,c
  1232  0008C0  50FA               	movf	pclath,w,c
  1233  0008C2  0E06               	movlw	6
  1234  0008C4  0012               	return		;indir
  1235  0008C6                     l3966:
  1236                           
  1237                           ;FastTransfer.c: 59: serial_write(0x85);
  1238  0008C6  D801               	call	u3248
  1239  0008C8  D00B               	goto	l3968
  1240  0008CA                     u3248:
  1241  0008CA  0005               	push	
  1242  0008CC  6EFA               	movwf	pclath,c
  1243  0008CE  5033               	movf	_serial_write,w,c
  1244  0008D0  6EFD               	movwf	tosl,c
  1245  0008D2  5034               	movf	_serial_write+1,w,c
  1246  0008D4  6EFE               	movwf	tosh,c
  1247  0008D6  50F8               	movf	tblptru,w,c
  1248  0008D8  6EFF               	movwf	tosu,c
  1249  0008DA  50FA               	movf	pclath,w,c
  1250  0008DC  0E85               	movlw	133
  1251  0008DE  0012               	return		;indir
  1252  0008E0                     l3968:
  1253                           
  1254                           ;FastTransfer.c: 60: serial_write(whereToSend);
  1255  0008E0  D801               	call	u3258
  1256  0008E2  D00C               	goto	l3970
  1257  0008E4                     u3258:
  1258  0008E4  0005               	push	
  1259  0008E6  6EFA               	movwf	pclath,c
  1260  0008E8  5033               	movf	_serial_write,w,c
  1261  0008EA  6EFD               	movwf	tosl,c
  1262  0008EC  5034               	movf	_serial_write+1,w,c
  1263  0008EE  6EFE               	movwf	tosh,c
  1264  0008F0  50F8               	movf	tblptru,w,c
  1265  0008F2  6EFF               	movwf	tosu,c
  1266  0008F4  50FA               	movf	pclath,w,c
  1267  0008F6  0100               	movlb	0	; () banked
  1268  0008F8  51D6               	movf	sendData@whereToSend& (0+255),w,b
  1269  0008FA  0012               	return		;indir
  1270  0008FC                     l3970:
  1271                           
  1272                           ;FastTransfer.c: 61: serial_write(moduleAddress);
  1273  0008FC  D801               	call	u3268
  1274  0008FE  D00B               	goto	l3972
  1275  000900                     u3268:
  1276  000900  0005               	push	
  1277  000902  6EFA               	movwf	pclath,c
  1278  000904  5033               	movf	_serial_write,w,c
  1279  000906  6EFD               	movwf	tosl,c
  1280  000908  5034               	movf	_serial_write+1,w,c
  1281  00090A  6EFE               	movwf	tosh,c
  1282  00090C  50F8               	movf	tblptru,w,c
  1283  00090E  6EFF               	movwf	tosu,c
  1284  000910  50FA               	movf	pclath,w,c
  1285  000912  503D               	movf	_moduleAddress,w,c
  1286  000914  0012               	return		;indir
  1287  000916                     l3972:
  1288                           
  1289                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1290  000916  D801               	call	u3278
  1291  000918  D00C               	goto	l3974
  1292  00091A                     u3278:
  1293  00091A  0005               	push	
  1294  00091C  6EFA               	movwf	pclath,c
  1295  00091E  5033               	movf	_serial_write,w,c
  1296  000920  6EFD               	movwf	tosl,c
  1297  000922  5034               	movf	_serial_write+1,w,c
  1298  000924  6EFE               	movwf	tosh,c
  1299  000926  50F8               	movf	tblptru,w,c
  1300  000928  6EFF               	movwf	tosu,c
  1301  00092A  50FA               	movf	pclath,w,c
  1302  00092C  0101               	movlb	1	; () banked
  1303  00092E  51FC               	movf	(_ring_buffer+204)& (0+255),w,b
  1304  000930  0012               	return		;indir
  1305  000932                     l3974:
  1306                           
  1307                           ;FastTransfer.c: 66: int i;
  1308                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1309  000932  0E00               	movlw	0
  1310  000934  0100               	movlb	0	; () banked
  1311  000936  6FD9               	movwf	(sendData@i+1)& (0+255),b
  1312  000938  0E00               	movlw	0
  1313  00093A  6FD8               	movwf	sendData@i& (0+255),b
  1314  00093C  D018               	goto	l3980
  1315  00093E                     l3976:
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;FastTransfer.c: 68: serial_write(*(sendStructAddress + i));
  1319  00093E  D801               	call	u3288
  1320  000940  D013               	goto	l3978
  1321  000942                     u3288:
  1322  000942  0005               	push	
  1323  000944  6EFA               	movwf	pclath,c
  1324  000946  5033               	movf	_serial_write,w,c
  1325  000948  6EFD               	movwf	tosl,c
  1326  00094A  5034               	movf	_serial_write+1,w,c
  1327  00094C  6EFE               	movwf	tosh,c
  1328  00094E  50F8               	movf	tblptru,w,c
  1329  000950  6EFF               	movwf	tosu,c
  1330  000952  50FA               	movf	pclath,w,c
  1331  000954  0100               	movlb	0	; () banked
  1332  000956  51D8               	movf	sendData@i& (0+255),w,b
  1333  000958  242B               	addwf	_sendStructAddress,w,c
  1334  00095A  6ED9               	movwf	fsr2l,c
  1335  00095C  0100               	movlb	0	; () banked
  1336  00095E  51D9               	movf	(sendData@i+1)& (0+255),w,b
  1337  000960  202C               	addwfc	_sendStructAddress+1,w,c
  1338  000962  6EDA               	movwf	fsr2h,c
  1339  000964  50DF               	movf	indf2,w,c
  1340  000966  0012               	return		;indir
  1341  000968                     l3978:
  1342  000968  0100               	movlb	0	; () banked
  1343  00096A  4BD8               	infsnz	sendData@i& (0+255),f,b
  1344  00096C  2BD9               	incf	(sendData@i+1)& (0+255),f,b
  1345  00096E                     l3980:
  1346                           
  1347                           ; BSR set to: 0
  1348  00096E  0101               	movlb	1	; () banked
  1349  000970  51FC               	movf	(_ring_buffer+204)& (0+255),w,b
  1350  000972  0100               	movlb	0	; () banked
  1351  000974  5DD8               	subwf	sendData@i& (0+255),w,b
  1352  000976  0100               	movlb	0	; () banked
  1353  000978  51D9               	movf	(sendData@i+1)& (0+255),w,b
  1354  00097A  0A80               	xorlw	128
  1355  00097C  0100               	movlb	0	; () banked
  1356  00097E  6FD5               	movwf	??_sendData& (0+255),b
  1357  000980  0101               	movlb	1	; () banked
  1358  000982  51FD               	movf	(_ring_buffer+205)& (0+255),w,b
  1359  000984  0A80               	xorlw	128
  1360  000986  0100               	movlb	0	; () banked
  1361  000988  59D5               	subwfb	??_sendData& (0+255),w,b
  1362  00098A  A0D8               	btfss	status,0,c
  1363  00098C  D7D8               	goto	l3976
  1364                           
  1365                           ; BSR set to: 0
  1366                           ;FastTransfer.c: 69: }
  1367                           ;FastTransfer.c: 72: serial_write(CS);
  1368                           
  1369                           ; BSR set to: 0
  1370  00098E  D801               	call	u3308
  1371  000990  D00C               	goto	l3984
  1372  000992                     u3308:
  1373  000992  0005               	push	
  1374  000994  6EFA               	movwf	pclath,c
  1375  000996  5033               	movf	_serial_write,w,c
  1376  000998  6EFD               	movwf	tosl,c
  1377  00099A  5034               	movf	_serial_write+1,w,c
  1378  00099C  6EFE               	movwf	tosh,c
  1379  00099E  50F8               	movf	tblptru,w,c
  1380  0009A0  6EFF               	movwf	tosu,c
  1381  0009A2  50FA               	movf	pclath,w,c
  1382  0009A4  0100               	movlb	0	; () banked
  1383  0009A6  51D7               	movf	sendData@CS& (0+255),w,b
  1384  0009A8  0012               	return		;indir
  1385  0009AA                     l3984:
  1386                           
  1387                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1388  0009AA  0EC0               	movlw	low _crc_buffer
  1389  0009AC  6E1B               	movwf	crcBufS_put@_this,c
  1390  0009AE  0E00               	movlw	high _crc_buffer
  1391  0009B0  6E1C               	movwf	crcBufS_put@_this+1,c
  1392  0009B2  C0D6  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1393  0009B6  C0D7  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1394  0009BA  0E00               	movlw	0
  1395  0009BC  6E1F               	movwf	crcBufS_put@status,c
  1396  0009BE  EC79  F007         	call	_crcBufS_put
  1397                           
  1398                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  1399  0009C2  0E30               	movlw	low _ring_buffer
  1400  0009C4  0100               	movlb	0	; () banked
  1401  0009C6  6FD1               	movwf	FastTransfer_buffer_flush@_this& (0+255),b
  1402  0009C8  0E01               	movlw	high _ring_buffer
  1403  0009CA  0100               	movlb	0	; () banked
  1404  0009CC  6FD2               	movwf	(FastTransfer_buffer_flush@_this+1)& (0+255),b
  1405  0009CE  0E00               	movlw	0
  1406  0009D0  0100               	movlb	0	; () banked
  1407  0009D2  6FD4               	movwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),b
  1408  0009D4  0E01               	movlw	1
  1409  0009D6  6FD3               	movwf	FastTransfer_buffer_flush@clearBuffer& (0+255),b
  1410  0009D8  ECE7  F00A         	call	_FastTransfer_buffer_flush	;wreg free
  1411  0009DC  0012               	return		;funcret
  1412  0009DE                     __end_of_sendData:
  1413                           	opt stack 0
  1414                           tosu	equ	0xFFF
  1415                           tosh	equ	0xFFE
  1416                           tosl	equ	0xFFD
  1417                           pclath	equ	0xFFA
  1418                           tblptru	equ	0xFF8
  1419                           tblptrh	equ	0xFF7
  1420                           tblptrl	equ	0xFF6
  1421                           tablat	equ	0xFF5
  1422                           intcon	equ	0xFF2
  1423                           postinc0	equ	0xFEE
  1424                           wreg	equ	0xFE8
  1425                           indf2	equ	0xFDF
  1426                           fsr2h	equ	0xFDA
  1427                           fsr2l	equ	0xFD9
  1428                           status	equ	0xFD8
  1429                           
  1430 ;; *************** function _crcBufS_put *****************
  1431 ;; Defined at:
  1432 ;;		line 321 in file "FastTransfer.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1435 ;;		 -> crc_buffer(17), 
  1436 ;;  address         1   28[COMRAM] unsigned char 
  1437 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1438 ;;  status          1   30[COMRAM] unsigned char 
  1439 ;; Auto vars:     Size  Location     Type
  1440 ;;		None
  1441 ;; Return value:  Size  Location     Type
  1442 ;;                  1    wreg      void 
  1443 ;; Registers used:
  1444 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1445 ;; Tracked objects:
  1446 ;;		On entry : 0/0
  1447 ;;		On exit  : 0/0
  1448 ;;		Unchanged: 0/0
  1449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1450 ;;      Params:         5       0       0       0       0       0       0
  1451 ;;      Locals:         0       0       0       0       0       0       0
  1452 ;;      Temps:          2       0       0       0       0       0       0
  1453 ;;      Totals:         7       0       0       0       0       0       0
  1454 ;;Total ram usage:        7 bytes
  1455 ;; Hardware stack levels used:    1
  1456 ;; Hardware stack levels required when called:    4
  1457 ;; This function calls:
  1458 ;;		Nothing
  1459 ;; This function is called by:
  1460 ;;		_sendData
  1461 ;; This function uses a non-reentrant model
  1462 ;;
  1463                           
  1464                           	psect	text4
  1465  000EF2                     __ptext4:
  1466                           	opt stack 0
  1467  000EF2                     _crcBufS_put:
  1468                           	opt stack 23
  1469                           
  1470                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  1471                           
  1472                           ;incstack = 0
  1473  000EF2  EE20 F00F          	lfsr	2,15
  1474  000EF6  501B               	movf	crcBufS_put@_this,w,c
  1475  000EF8  26D9               	addwf	fsr2l,f,c
  1476  000EFA  501C               	movf	crcBufS_put@_this+1,w,c
  1477  000EFC  22DA               	addwfc	fsr2h,f,c
  1478  000EFE  CFDE F020          	movff	postinc2,??_crcBufS_put
  1479  000F02  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1480  000F06  5020               	movf	??_crcBufS_put,w,c
  1481  000F08  241B               	addwf	crcBufS_put@_this,w,c
  1482  000F0A  6ED9               	movwf	fsr2l,c
  1483  000F0C  5021               	movf	??_crcBufS_put+1,w,c
  1484  000F0E  201C               	addwfc	crcBufS_put@_this+1,w,c
  1485  000F10  6EDA               	movwf	fsr2h,c
  1486  000F12  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1487                           
  1488                           ;FastTransfer.c: 323: _this->head++;
  1489  000F16  EE20 F00F          	lfsr	2,15
  1490  000F1A  501B               	movf	crcBufS_put@_this,w,c
  1491  000F1C  26D9               	addwf	fsr2l,f,c
  1492  000F1E  501C               	movf	crcBufS_put@_this+1,w,c
  1493  000F20  22DA               	addwfc	fsr2h,f,c
  1494  000F22  2ADE               	incf	postinc2,f,c
  1495  000F24  0E00               	movlw	0
  1496  000F26  22DD               	addwfc	postdec2,f,c
  1497                           
  1498                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  1499  000F28  EE20 F00F          	lfsr	2,15
  1500  000F2C  501B               	movf	crcBufS_put@_this,w,c
  1501  000F2E  26D9               	addwf	fsr2l,f,c
  1502  000F30  501C               	movf	crcBufS_put@_this+1,w,c
  1503  000F32  22DA               	addwfc	fsr2h,f,c
  1504  000F34  CFDE F020          	movff	postinc2,??_crcBufS_put
  1505  000F38  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1506  000F3C  5020               	movf	??_crcBufS_put,w,c
  1507  000F3E  241B               	addwf	crcBufS_put@_this,w,c
  1508  000F40  6ED9               	movwf	fsr2l,c
  1509  000F42  5021               	movf	??_crcBufS_put+1,w,c
  1510  000F44  201C               	addwfc	crcBufS_put@_this+1,w,c
  1511  000F46  6EDA               	movwf	fsr2h,c
  1512  000F48  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1513                           
  1514                           ;FastTransfer.c: 325: _this->head++;
  1515  000F4C  EE20 F00F          	lfsr	2,15
  1516  000F50  501B               	movf	crcBufS_put@_this,w,c
  1517  000F52  26D9               	addwf	fsr2l,f,c
  1518  000F54  501C               	movf	crcBufS_put@_this+1,w,c
  1519  000F56  22DA               	addwfc	fsr2h,f,c
  1520  000F58  2ADE               	incf	postinc2,f,c
  1521  000F5A  0E00               	movlw	0
  1522  000F5C  22DD               	addwfc	postdec2,f,c
  1523                           
  1524                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  1525  000F5E  EE20 F00F          	lfsr	2,15
  1526  000F62  501B               	movf	crcBufS_put@_this,w,c
  1527  000F64  26D9               	addwf	fsr2l,f,c
  1528  000F66  501C               	movf	crcBufS_put@_this+1,w,c
  1529  000F68  22DA               	addwfc	fsr2h,f,c
  1530  000F6A  CFDE F020          	movff	postinc2,??_crcBufS_put
  1531  000F6E  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1532  000F72  5020               	movf	??_crcBufS_put,w,c
  1533  000F74  241B               	addwf	crcBufS_put@_this,w,c
  1534  000F76  6ED9               	movwf	fsr2l,c
  1535  000F78  5021               	movf	??_crcBufS_put+1,w,c
  1536  000F7A  201C               	addwfc	crcBufS_put@_this+1,w,c
  1537  000F7C  6EDA               	movwf	fsr2h,c
  1538  000F7E  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1539                           
  1540                           ;FastTransfer.c: 327: _this->head++;
  1541  000F82  EE20 F00F          	lfsr	2,15
  1542  000F86  501B               	movf	crcBufS_put@_this,w,c
  1543  000F88  26D9               	addwf	fsr2l,f,c
  1544  000F8A  501C               	movf	crcBufS_put@_this+1,w,c
  1545  000F8C  22DA               	addwfc	fsr2h,f,c
  1546  000F8E  2ADE               	incf	postinc2,f,c
  1547  000F90  0E00               	movlw	0
  1548  000F92  22DD               	addwfc	postdec2,f,c
  1549                           
  1550                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  1551  000F94  EE20 F00F          	lfsr	2,15
  1552  000F98  501B               	movf	crcBufS_put@_this,w,c
  1553  000F9A  26D9               	addwf	fsr2l,f,c
  1554  000F9C  501C               	movf	crcBufS_put@_this+1,w,c
  1555  000F9E  22DA               	addwfc	fsr2h,f,c
  1556  000FA0  0E01               	movlw	1
  1557  000FA2  BEDB               	btfsc	plusw2,7,c
  1558  000FA4  0012               	return	
  1559  000FA6  0E01               	movlw	1
  1560  000FA8  50DB               	movf	plusw2,w,c
  1561  000FAA  E104               	bnz	u3150
  1562  000FAC  0E0F               	movlw	15
  1563  000FAE  5CDE               	subwf	postinc2,w,c
  1564  000FB0  A0D8               	btfss	status,0,c
  1565  000FB2  0012               	return	
  1566  000FB4                     u3150:
  1567                           
  1568                           ;FastTransfer.c: 329: _this->head = 0;
  1569  000FB4  EE20 F00F          	lfsr	2,15
  1570  000FB8  501B               	movf	crcBufS_put@_this,w,c
  1571  000FBA  26D9               	addwf	fsr2l,f,c
  1572  000FBC  501C               	movf	crcBufS_put@_this+1,w,c
  1573  000FBE  22DA               	addwfc	fsr2h,f,c
  1574  000FC0  0E00               	movlw	0
  1575  000FC2  6EDE               	movwf	postinc2,c
  1576  000FC4  0E00               	movlw	0
  1577  000FC6  6EDD               	movwf	postdec2,c
  1578  000FC8  0012               	return	
  1579  000FCA                     __end_of_crcBufS_put:
  1580                           	opt stack 0
  1581                           tosu	equ	0xFFF
  1582                           tosh	equ	0xFFE
  1583                           tosl	equ	0xFFD
  1584                           pclath	equ	0xFFA
  1585                           tblptru	equ	0xFF8
  1586                           tblptrh	equ	0xFF7
  1587                           tblptrl	equ	0xFF6
  1588                           tablat	equ	0xFF5
  1589                           intcon	equ	0xFF2
  1590                           postinc0	equ	0xFEE
  1591                           wreg	equ	0xFE8
  1592                           indf2	equ	0xFDF
  1593                           postinc2	equ	0xFDE
  1594                           postdec2	equ	0xFDD
  1595                           plusw2	equ	0xFDB
  1596                           fsr2h	equ	0xFDA
  1597                           fsr2l	equ	0xFD9
  1598                           status	equ	0xFD8
  1599                           
  1600 ;; *************** function _FastTransfer_buffer_flush *****************
  1601 ;; Defined at:
  1602 ;;		line 261 in file "FastTransfer.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;  _this           2    0[BANK0 ] PTR struct ringBufS
  1605 ;;		 -> ring_buffer(206), 
  1606 ;;  clearBuffer     2    2[BANK0 ] const int 
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;		None
  1609 ;; Return value:  Size  Location     Type
  1610 ;;                  1    wreg      void 
  1611 ;; Registers used:
  1612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1613 ;; Tracked objects:
  1614 ;;		On entry : 0/0
  1615 ;;		On exit  : 0/0
  1616 ;;		Unchanged: 0/0
  1617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1618 ;;      Params:         0       4       0       0       0       0       0
  1619 ;;      Locals:         0       0       0       0       0       0       0
  1620 ;;      Temps:          0       0       0       0       0       0       0
  1621 ;;      Totals:         0       4       0       0       0       0       0
  1622 ;;Total ram usage:        4 bytes
  1623 ;; Hardware stack levels used:    1
  1624 ;; Hardware stack levels required when called:    5
  1625 ;; This function calls:
  1626 ;;		_memset
  1627 ;; This function is called by:
  1628 ;;		_sendData
  1629 ;; This function uses a non-reentrant model
  1630 ;;
  1631                           
  1632                           	psect	text5
  1633  0015CE                     __ptext5:
  1634                           	opt stack 0
  1635  0015CE                     _FastTransfer_buffer_flush:
  1636                           	opt stack 22
  1637                           
  1638                           ;FastTransfer.c: 262: _this->count = 0;
  1639                           
  1640                           ;incstack = 0
  1641  0015CE  0100               	movlb	0	; () banked
  1642  0015D0  EE20 F0CC          	lfsr	2,204
  1643  0015D4  51D1               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1644  0015D6  26D9               	addwf	fsr2l,f,c
  1645  0015D8  51D2               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1646  0015DA  22DA               	addwfc	fsr2h,f,c
  1647  0015DC  0E00               	movlw	0
  1648  0015DE  6EDE               	movwf	postinc2,c
  1649  0015E0  0E00               	movlw	0
  1650  0015E2  6EDD               	movwf	postdec2,c
  1651                           
  1652                           ;FastTransfer.c: 263: _this->head = 0;
  1653  0015E4  0100               	movlb	0	; () banked
  1654  0015E6  EE20 F0C8          	lfsr	2,200
  1655  0015EA  51D1               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1656  0015EC  26D9               	addwf	fsr2l,f,c
  1657  0015EE  51D2               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1658  0015F0  22DA               	addwfc	fsr2h,f,c
  1659  0015F2  0E00               	movlw	0
  1660  0015F4  6EDE               	movwf	postinc2,c
  1661  0015F6  0E00               	movlw	0
  1662  0015F8  6EDD               	movwf	postdec2,c
  1663                           
  1664                           ;FastTransfer.c: 264: _this->tail = 0;
  1665  0015FA  0100               	movlb	0	; () banked
  1666  0015FC  EE20 F0CA          	lfsr	2,202
  1667  001600  51D1               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1668  001602  26D9               	addwf	fsr2l,f,c
  1669  001604  51D2               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1670  001606  22DA               	addwfc	fsr2h,f,c
  1671  001608  0E00               	movlw	0
  1672  00160A  6EDE               	movwf	postinc2,c
  1673  00160C  0E00               	movlw	0
  1674  00160E  6EDD               	movwf	postdec2,c
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;FastTransfer.c: 265: if (clearBuffer) {
  1678  001610  0100               	movlb	0	; () banked
  1679  001612  51D3               	movf	FastTransfer_buffer_flush@clearBuffer& (0+255),w,b
  1680  001614  0100               	movlb	0	; () banked
  1681  001616  11D4               	iorwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),w,b
  1682  001618  B4D8               	btfsc	status,2,c
  1683  00161A  0012               	return	
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  1687  00161C  C0D1  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1688  001620  C0D2  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1689  001624  0E00               	movlw	0
  1690  001626  6E1E               	movwf	memset@c+1,c
  1691  001628  0E00               	movlw	0
  1692  00162A  6E1D               	movwf	memset@c,c
  1693  00162C  0E00               	movlw	0
  1694  00162E  6E20               	movwf	memset@n+1,c
  1695  001630  0EC8               	movlw	200
  1696  001632  6E1F               	movwf	memset@n,c
  1697  001634  EC02  F00D         	call	_memset	;wreg free
  1698  001638  0012               	return	
  1699  00163A                     __end_of_FastTransfer_buffer_flush:
  1700                           	opt stack 0
  1701                           tosu	equ	0xFFF
  1702                           tosh	equ	0xFFE
  1703                           tosl	equ	0xFFD
  1704                           pclath	equ	0xFFA
  1705                           tblptru	equ	0xFF8
  1706                           tblptrh	equ	0xFF7
  1707                           tblptrl	equ	0xFF6
  1708                           tablat	equ	0xFF5
  1709                           intcon	equ	0xFF2
  1710                           postinc0	equ	0xFEE
  1711                           wreg	equ	0xFE8
  1712                           indf2	equ	0xFDF
  1713                           postinc2	equ	0xFDE
  1714                           postdec2	equ	0xFDD
  1715                           plusw2	equ	0xFDB
  1716                           fsr2h	equ	0xFDA
  1717                           fsr2l	equ	0xFD9
  1718                           status	equ	0xFD8
  1719                           
  1720 ;; *************** function _ToSend *****************
  1721 ;; Defined at:
  1722 ;;		line 216 in file "FastTransfer.c"
  1723 ;; Parameters:    Size  Location     Type
  1724 ;;  where           1    wreg     unsigned char 
  1725 ;;  what            2   34[COMRAM] unsigned int 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  where           1    5[BANK0 ] unsigned char 
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      void 
  1730 ;; Registers used:
  1731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1737 ;;      Params:         2       0       0       0       0       0       0
  1738 ;;      Locals:         0       1       0       0       0       0       0
  1739 ;;      Temps:          0       0       0       0       0       0       0
  1740 ;;      Totals:         2       1       0       0       0       0       0
  1741 ;;Total ram usage:        3 bytes
  1742 ;; Hardware stack levels used:    1
  1743 ;; Hardware stack levels required when called:    6
  1744 ;; This function calls:
  1745 ;;		_FastTransfer_buffer_put
  1746 ;; This function is called by:
  1747 ;;		_respondECU
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           	psect	text6
  1752  001AAE                     __ptext6:
  1753                           	opt stack 0
  1754  001AAE                     _ToSend:
  1755                           	opt stack 22
  1756                           
  1757                           ;incstack = 0
  1758                           ;ToSend@where stored from wreg
  1759  001AAE  0100               	movlb	0	; () banked
  1760  001AB0  6FD6               	movwf	ToSend@where& (0+255),b
  1761                           
  1762                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  1763  001AB2  0E30               	movlw	low _ring_buffer
  1764  001AB4  0100               	movlb	0	; () banked
  1765  001AB6  6FD1               	movwf	FastTransfer_buffer_put@_this& (0+255),b
  1766  001AB8  0E01               	movlw	high _ring_buffer
  1767  001ABA  0100               	movlb	0	; () banked
  1768  001ABC  6FD2               	movwf	(FastTransfer_buffer_put@_this+1)& (0+255),b
  1769  001ABE  C0D6  F0D3         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  1770  001AC2  C023  F0D4         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  1771  001AC6  C024  F0D5         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  1772  001ACA  EC83  F003         	call	_FastTransfer_buffer_put	;wreg free
  1773  001ACE  0012               	return		;funcret
  1774  001AD0                     __end_of_ToSend:
  1775                           	opt stack 0
  1776                           tosu	equ	0xFFF
  1777                           tosh	equ	0xFFE
  1778                           tosl	equ	0xFFD
  1779                           pclath	equ	0xFFA
  1780                           tblptru	equ	0xFF8
  1781                           tblptrh	equ	0xFF7
  1782                           tblptrl	equ	0xFF6
  1783                           tablat	equ	0xFF5
  1784                           intcon	equ	0xFF2
  1785                           postinc0	equ	0xFEE
  1786                           wreg	equ	0xFE8
  1787                           indf2	equ	0xFDF
  1788                           postinc2	equ	0xFDE
  1789                           postdec2	equ	0xFDD
  1790                           plusw2	equ	0xFDB
  1791                           fsr2h	equ	0xFDA
  1792                           fsr2l	equ	0xFD9
  1793                           status	equ	0xFD8
  1794                           
  1795 ;; *************** function _FastTransfer_buffer_put *****************
  1796 ;; Defined at:
  1797 ;;		line 223 in file "FastTransfer.c"
  1798 ;; Parameters:    Size  Location     Type
  1799 ;;  _this           2    0[BANK0 ] PTR struct ringBufS
  1800 ;;		 -> ring_buffer(206), 
  1801 ;;  towhere         1    2[BANK0 ] unsigned char 
  1802 ;;  towhat          2    3[BANK0 ] unsigned int 
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;		None
  1805 ;; Return value:  Size  Location     Type
  1806 ;;                  1    wreg      void 
  1807 ;; Registers used:
  1808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1814 ;;      Params:         0       5       0       0       0       0       0
  1815 ;;      Locals:         0       0       0       0       0       0       0
  1816 ;;      Temps:          2       0       0       0       0       0       0
  1817 ;;      Totals:         2       5       0       0       0       0       0
  1818 ;;Total ram usage:        7 bytes
  1819 ;; Hardware stack levels used:    1
  1820 ;; Hardware stack levels required when called:    5
  1821 ;; This function calls:
  1822 ;;		_FastTransfer_buffer_modulo_inc
  1823 ;; This function is called by:
  1824 ;;		_ToSend
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828                           	psect	text7
  1829  000706                     __ptext7:
  1830                           	opt stack 0
  1831  000706                     _FastTransfer_buffer_put:
  1832                           	opt stack 22
  1833                           
  1834                           ;FastTransfer.c: 225: group.integer = towhat;
  1835                           
  1836                           ;incstack = 0
  1837  000706  C0D4  F025         	movff	FastTransfer_buffer_put@towhat,_group
  1838  00070A  C0D5  F026         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  1839                           
  1840                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  1841  00070E  0100               	movlb	0	; () banked
  1842  000710  EE20 F0CC          	lfsr	2,204
  1843  000714  51D1               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1844  000716  26D9               	addwf	fsr2l,f,c
  1845  000718  51D2               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1846  00071A  22DA               	addwfc	fsr2h,f,c
  1847  00071C  0E01               	movlw	1
  1848  00071E  BEDB               	btfsc	plusw2,7,c
  1849  000720  D007               	goto	l3866
  1850  000722  0E01               	movlw	1
  1851  000724  50DB               	movf	plusw2,w,c
  1852  000726  E103               	bnz	u3171
  1853  000728  0EC5               	movlw	197
  1854  00072A  5CDE               	subwf	postinc2,w,c
  1855  00072C  B0D8               	btfsc	status,0,c
  1856  00072E                     u3171:
  1857  00072E  0012               	return	
  1858  000730                     l3866:
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  1862  000730  0100               	movlb	0	; () banked
  1863  000732  EE20 F0C8          	lfsr	2,200
  1864  000736  51D1               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1865  000738  26D9               	addwf	fsr2l,f,c
  1866  00073A  51D2               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1867  00073C  22DA               	addwfc	fsr2h,f,c
  1868  00073E  CFDE F021          	movff	postinc2,??_FastTransfer_buffer_put
  1869  000742  CFDD F022          	movff	postdec2,??_FastTransfer_buffer_put+1
  1870  000746  5021               	movf	??_FastTransfer_buffer_put,w,c
  1871  000748  0100               	movlb	0	; () banked
  1872  00074A  25D1               	addwf	FastTransfer_buffer_put@_this& (0+255),w,b
  1873  00074C  6ED9               	movwf	fsr2l,c
  1874  00074E  5022               	movf	??_FastTransfer_buffer_put+1,w,c
  1875  000750  0100               	movlb	0	; () banked
  1876  000752  21D2               	addwfc	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1877  000754  6EDA               	movwf	fsr2h,c
  1878  000756  C0D3  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1882  00075A  0100               	movlb	0	; () banked
  1883  00075C  EE20 F0C8          	lfsr	2,200
  1884  000760  51D1               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1885  000762  26D9               	addwf	fsr2l,f,c
  1886  000764  51D2               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1887  000766  22DA               	addwfc	fsr2h,f,c
  1888  000768  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1889  00076C  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1890  000770  0E00               	movlw	0
  1891  000772  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1892  000774  0EC8               	movlw	200
  1893  000776  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1894  000778  EC18  F00D         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1895  00077C  0100               	movlb	0	; () banked
  1896  00077E  EE20 F0C8          	lfsr	2,200
  1897  000782  51D1               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1898  000784  26D9               	addwf	fsr2l,f,c
  1899  000786  51D2               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1900  000788  22DA               	addwfc	fsr2h,f,c
  1901  00078A  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1902  00078E  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;FastTransfer.c: 230: ++_this->count;
  1906  000792  0100               	movlb	0	; () banked
  1907  000794  EE20 F0CC          	lfsr	2,204
  1908  000798  51D1               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1909  00079A  26D9               	addwf	fsr2l,f,c
  1910  00079C  51D2               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1911  00079E  22DA               	addwfc	fsr2h,f,c
  1912  0007A0  2ADE               	incf	postinc2,f,c
  1913  0007A2  0E00               	movlw	0
  1914  0007A4  22DD               	addwfc	postdec2,f,c
  1915                           
  1916                           ; BSR set to: 0
  1917                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  1918  0007A6  0100               	movlb	0	; () banked
  1919  0007A8  EE20 F0C8          	lfsr	2,200
  1920  0007AC  51D1               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1921  0007AE  26D9               	addwf	fsr2l,f,c
  1922  0007B0  51D2               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1923  0007B2  22DA               	addwfc	fsr2h,f,c
  1924  0007B4  CFDE F021          	movff	postinc2,??_FastTransfer_buffer_put
  1925  0007B8  CFDD F022          	movff	postdec2,??_FastTransfer_buffer_put+1
  1926  0007BC  5021               	movf	??_FastTransfer_buffer_put,w,c
  1927  0007BE  0100               	movlb	0	; () banked
  1928  0007C0  25D1               	addwf	FastTransfer_buffer_put@_this& (0+255),w,b
  1929  0007C2  6ED9               	movwf	fsr2l,c
  1930  0007C4  5022               	movf	??_FastTransfer_buffer_put+1,w,c
  1931  0007C6  0100               	movlb	0	; () banked
  1932  0007C8  21D2               	addwfc	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1933  0007CA  6EDA               	movwf	fsr2h,c
  1934  0007CC  C025  FFDF         	movff	_group,indf2
  1935                           
  1936                           ; BSR set to: 0
  1937                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1938  0007D0  0100               	movlb	0	; () banked
  1939  0007D2  EE20 F0C8          	lfsr	2,200
  1940  0007D6  51D1               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1941  0007D8  26D9               	addwf	fsr2l,f,c
  1942  0007DA  51D2               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1943  0007DC  22DA               	addwfc	fsr2h,f,c
  1944  0007DE  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1945  0007E2  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1946  0007E6  0E00               	movlw	0
  1947  0007E8  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1948  0007EA  0EC8               	movlw	200
  1949  0007EC  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1950  0007EE  EC18  F00D         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1951  0007F2  0100               	movlb	0	; () banked
  1952  0007F4  EE20 F0C8          	lfsr	2,200
  1953  0007F8  51D1               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1954  0007FA  26D9               	addwf	fsr2l,f,c
  1955  0007FC  51D2               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1956  0007FE  22DA               	addwfc	fsr2h,f,c
  1957  000800  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1958  000804  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1959                           
  1960                           ;FastTransfer.c: 233: ++_this->count;
  1961  000808  0100               	movlb	0	; () banked
  1962  00080A  EE20 F0CC          	lfsr	2,204
  1963  00080E  51D1               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1964  000810  26D9               	addwf	fsr2l,f,c
  1965  000812  51D2               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1966  000814  22DA               	addwfc	fsr2h,f,c
  1967  000816  2ADE               	incf	postinc2,f,c
  1968  000818  0E00               	movlw	0
  1969  00081A  22DD               	addwfc	postdec2,f,c
  1970                           
  1971                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  1972  00081C  0100               	movlb	0	; () banked
  1973  00081E  EE20 F0C8          	lfsr	2,200
  1974  000822  51D1               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1975  000824  26D9               	addwf	fsr2l,f,c
  1976  000826  51D2               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1977  000828  22DA               	addwfc	fsr2h,f,c
  1978  00082A  CFDE F021          	movff	postinc2,??_FastTransfer_buffer_put
  1979  00082E  CFDD F022          	movff	postdec2,??_FastTransfer_buffer_put+1
  1980  000832  5021               	movf	??_FastTransfer_buffer_put,w,c
  1981  000834  0100               	movlb	0	; () banked
  1982  000836  25D1               	addwf	FastTransfer_buffer_put@_this& (0+255),w,b
  1983  000838  6ED9               	movwf	fsr2l,c
  1984  00083A  5022               	movf	??_FastTransfer_buffer_put+1,w,c
  1985  00083C  0100               	movlb	0	; () banked
  1986  00083E  21D2               	addwfc	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1987  000840  6EDA               	movwf	fsr2h,c
  1988  000842  C026  FFDF         	movff	_group+1,indf2
  1989                           
  1990                           ; BSR set to: 0
  1991                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1992  000846  0100               	movlb	0	; () banked
  1993  000848  EE20 F0C8          	lfsr	2,200
  1994  00084C  51D1               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1995  00084E  26D9               	addwf	fsr2l,f,c
  1996  000850  51D2               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1997  000852  22DA               	addwfc	fsr2h,f,c
  1998  000854  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1999  000858  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2000  00085C  0E00               	movlw	0
  2001  00085E  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2002  000860  0EC8               	movlw	200
  2003  000862  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2004  000864  EC18  F00D         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2005  000868  0100               	movlb	0	; () banked
  2006  00086A  EE20 F0C8          	lfsr	2,200
  2007  00086E  51D1               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  2008  000870  26D9               	addwf	fsr2l,f,c
  2009  000872  51D2               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  2010  000874  22DA               	addwfc	fsr2h,f,c
  2011  000876  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2012  00087A  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;FastTransfer.c: 236: ++_this->count;
  2016  00087E  0100               	movlb	0	; () banked
  2017  000880  EE20 F0CC          	lfsr	2,204
  2018  000884  51D1               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  2019  000886  26D9               	addwf	fsr2l,f,c
  2020  000888  51D2               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  2021  00088A  22DA               	addwfc	fsr2h,f,c
  2022  00088C  2ADE               	incf	postinc2,f,c
  2023  00088E  0E00               	movlw	0
  2024  000890  22DD               	addwfc	postdec2,f,c
  2025  000892  0012               	return	
  2026  000894                     __end_of_FastTransfer_buffer_put:
  2027                           	opt stack 0
  2028                           tosu	equ	0xFFF
  2029                           tosh	equ	0xFFE
  2030                           tosl	equ	0xFFD
  2031                           pclath	equ	0xFFA
  2032                           tblptru	equ	0xFF8
  2033                           tblptrh	equ	0xFF7
  2034                           tblptrl	equ	0xFF6
  2035                           tablat	equ	0xFF5
  2036                           intcon	equ	0xFF2
  2037                           postinc0	equ	0xFEE
  2038                           wreg	equ	0xFE8
  2039                           indf2	equ	0xFDF
  2040                           postinc2	equ	0xFDE
  2041                           postdec2	equ	0xFDD
  2042                           plusw2	equ	0xFDB
  2043                           fsr2h	equ	0xFDA
  2044                           fsr2l	equ	0xFD9
  2045                           status	equ	0xFD8
  2046                           
  2047 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  2048 ;; Defined at:
  2049 ;;		line 273 in file "FastTransfer.c"
  2050 ;; Parameters:    Size  Location     Type
  2051 ;;  value           2   26[COMRAM] const unsigned int 
  2052 ;;  modulus         2   28[COMRAM] const unsigned int 
  2053 ;; Auto vars:     Size  Location     Type
  2054 ;;  my_value        2   30[COMRAM] unsigned int 
  2055 ;; Return value:  Size  Location     Type
  2056 ;;                  2   26[COMRAM] unsigned int 
  2057 ;; Registers used:
  2058 ;;		wreg, status,2, status,0
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2064 ;;      Params:         4       0       0       0       0       0       0
  2065 ;;      Locals:         2       0       0       0       0       0       0
  2066 ;;      Temps:          0       0       0       0       0       0       0
  2067 ;;      Totals:         6       0       0       0       0       0       0
  2068 ;;Total ram usage:        6 bytes
  2069 ;; Hardware stack levels used:    1
  2070 ;; Hardware stack levels required when called:    4
  2071 ;; This function calls:
  2072 ;;		Nothing
  2073 ;; This function is called by:
  2074 ;;		_FastTransfer_buffer_put
  2075 ;;		_FastTransfer_buffer_get
  2076 ;; This function uses a non-reentrant model
  2077 ;;
  2078                           
  2079                           	psect	text8
  2080  001A30                     __ptext8:
  2081                           	opt stack 0
  2082  001A30                     _FastTransfer_buffer_modulo_inc:
  2083                           	opt stack 22
  2084                           
  2085                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  2086                           
  2087                           ; BSR set to: 0
  2088                           ;incstack = 0
  2089  001A30  0E01               	movlw	1
  2090  001A32  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  2091  001A34  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2092  001A36  0E00               	movlw	0
  2093  001A38  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  2094  001A3A  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2095                           
  2096                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  2097  001A3C  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  2098  001A3E  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  2099  001A40  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  2100  001A42  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  2101  001A44  A0D8               	btfss	status,0,c
  2102  001A46  D004               	goto	l3790
  2103                           
  2104                           ;FastTransfer.c: 276: my_value = 0;
  2105  001A48  0E00               	movlw	0
  2106  001A4A  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2107  001A4C  0E00               	movlw	0
  2108  001A4E  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2109  001A50                     l3790:
  2110                           
  2111                           ;FastTransfer.c: 277: }
  2112                           ;FastTransfer.c: 278: return (my_value);
  2113  001A50  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  2114  001A54  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  2115  001A58  0012               	return	
  2116  001A5A                     __end_of_FastTransfer_buffer_modulo_inc:
  2117                           	opt stack 0
  2118                           tosu	equ	0xFFF
  2119                           tosh	equ	0xFFE
  2120                           tosl	equ	0xFFD
  2121                           pclath	equ	0xFFA
  2122                           tblptru	equ	0xFF8
  2123                           tblptrh	equ	0xFF7
  2124                           tblptrl	equ	0xFF6
  2125                           tablat	equ	0xFF5
  2126                           intcon	equ	0xFF2
  2127                           postinc0	equ	0xFEE
  2128                           wreg	equ	0xFE8
  2129                           indf2	equ	0xFDF
  2130                           postinc2	equ	0xFDE
  2131                           postdec2	equ	0xFDD
  2132                           plusw2	equ	0xFDB
  2133                           fsr2h	equ	0xFDA
  2134                           fsr2l	equ	0xFD9
  2135                           status	equ	0xFD8
  2136                           
  2137 ;; *************** function _receiveData *****************
  2138 ;; Defined at:
  2139 ;;		line 82 in file "FastTransfer.c"
  2140 ;; Parameters:    Size  Location     Type
  2141 ;;		None
  2142 ;; Auto vars:     Size  Location     Type
  2143 ;;  holder          3   12[BANK0 ] unsigned char [3]
  2144 ;;  crcHolder       1   16[BANK0 ] unsigned char 
  2145 ;;  holder          3    9[BANK0 ] unsigned char [3]
  2146 ;;  crcHolder       1   15[BANK0 ] unsigned char 
  2147 ;;  u               2   17[BANK0 ] int 
  2148 ;;  r               2   19[BANK0 ] int 
  2149 ;; Return value:  Size  Location     Type
  2150 ;;                  1    wreg      unsigned char 
  2151 ;; Registers used:
  2152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2153 ;; Tracked objects:
  2154 ;;		On entry : 0/0
  2155 ;;		On exit  : 0/0
  2156 ;;		Unchanged: 0/0
  2157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2158 ;;      Params:         0       0       0       0       0       0       0
  2159 ;;      Locals:         0      12       0       0       0       0       0
  2160 ;;      Temps:          0       6       0       0       0       0       0
  2161 ;;      Totals:         0      18       0       0       0       0       0
  2162 ;;Total ram usage:       18 bytes
  2163 ;; Hardware stack levels used:    1
  2164 ;; Hardware stack levels required when called:    7
  2165 ;; This function calls:
  2166 ;;		Absolute function
  2167 ;;		_CRC8
  2168 ;;		_Receive_available
  2169 ;;		_Receive_get
  2170 ;;		_Send_put
  2171 ;; This function is called by:
  2172 ;;		_updateComms
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           	psect	text9
  2177  0000B0                     __ptext9:
  2178                           	opt stack 0
  2179  0000B0                     _receiveData:
  2180                           	opt stack 22
  2181                           
  2182                           ;FastTransfer.c: 85: if (rx_len == 0) {
  2183                           
  2184                           ;incstack = 0
  2185  0000B0  5041               	movf	_rx_len,w,c
  2186  0000B2  A4D8               	btfss	status,2,c
  2187  0000B4  D0AC               	goto	l4178
  2188                           
  2189                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2190  0000B6  D801               	call	u3408
  2191  0000B8  D00A               	goto	u3409
  2192  0000BA                     u3408:
  2193  0000BA  0005               	push	
  2194  0000BC  6EFA               	movwf	pclath,c
  2195  0000BE  502D               	movf	_serial_available,w,c
  2196  0000C0  6EFD               	movwf	tosl,c
  2197  0000C2  502E               	movf	_serial_available+1,w,c
  2198  0000C4  6EFE               	movwf	tosh,c
  2199  0000C6  50F8               	movf	tblptru,w,c
  2200  0000C8  6EFF               	movwf	tosu,c
  2201  0000CA  50FA               	movf	pclath,w,c
  2202  0000CC  0012               	return		;indir
  2203  0000CE                     u3409:
  2204  0000CE  BE1E               	btfsc	?_Receive_available+1,7,c
  2205  0000D0  D09E               	goto	l4178
  2206  0000D2  501E               	movf	?_Receive_available+1,w,c
  2207  0000D4  E11E               	bnz	l4154
  2208  0000D6  0E05               	movlw	5
  2209  0000D8  5C1D               	subwf	?_Receive_available,w,c
  2210  0000DA  B0D8               	btfsc	status,0,c
  2211  0000DC  D01A               	goto	l4154
  2212  0000DE  D097               	goto	l4178
  2213  0000E0                     l4146:
  2214                           
  2215                           ;FastTransfer.c: 93: alignErrorCounter++;
  2216  0000E0  0100               	movlb	0	; () banked
  2217  0000E2  4B92               	infsnz	_alignErrorCounter& (0+255),f,b
  2218  0000E4  2B93               	incf	(_alignErrorCounter+1)& (0+255),f,b
  2219                           
  2220                           ; BSR set to: 0
  2221                           ;FastTransfer.c: 94: if (serial_available() < 5)
  2222  0000E6  D801               	call	u3428
  2223  0000E8  D00A               	goto	u3429
  2224  0000EA                     u3428:
  2225  0000EA  0005               	push	
  2226  0000EC  6EFA               	movwf	pclath,c
  2227  0000EE  502D               	movf	_serial_available,w,c
  2228  0000F0  6EFD               	movwf	tosl,c
  2229  0000F2  502E               	movf	_serial_available+1,w,c
  2230  0000F4  6EFE               	movwf	tosh,c
  2231  0000F6  50F8               	movf	tblptru,w,c
  2232  0000F8  6EFF               	movwf	tosu,c
  2233  0000FA  50FA               	movf	pclath,w,c
  2234  0000FC  0012               	return		;indir
  2235  0000FE                     u3429:
  2236  0000FE  BE1E               	btfsc	?_Receive_available+1,7,c
  2237  000100  D006               	goto	l4150
  2238  000102  501E               	movf	?_Receive_available+1,w,c
  2239  000104  E106               	bnz	l4154
  2240  000106  0E05               	movlw	5
  2241  000108  5C1D               	subwf	?_Receive_available,w,c
  2242  00010A  B0D8               	btfsc	status,0,c
  2243  00010C  D002               	goto	l4154
  2244  00010E                     l4150:
  2245                           
  2246                           ;FastTransfer.c: 95: return 0;
  2247  00010E  0E00               	movlw	0
  2248  000110  0012               	return	
  2249  000112                     l4154:
  2250  000112  D801               	call	u3448
  2251  000114  D00A               	goto	u3449
  2252  000116                     u3448:
  2253  000116  0005               	push	
  2254  000118  6EFA               	movwf	pclath,c
  2255  00011A  5031               	movf	_serial_read,w,c
  2256  00011C  6EFD               	movwf	tosl,c
  2257  00011E  5032               	movf	_serial_read+1,w,c
  2258  000120  6EFE               	movwf	tosh,c
  2259  000122  50F8               	movf	tblptru,w,c
  2260  000124  6EFF               	movwf	tosu,c
  2261  000126  50FA               	movf	pclath,w,c
  2262  000128  0012               	return		;indir
  2263  00012A                     u3449:
  2264  00012A  0A06               	xorlw	6
  2265  00012C  A4D8               	btfss	status,2,c
  2266  00012E  D7D8               	goto	l4146
  2267                           
  2268                           ;FastTransfer.c: 96: }
  2269                           ;FastTransfer.c: 97: if (serial_read() == 0x85) {
  2270  000130  D801               	call	u3468
  2271  000132  D00A               	goto	u3469
  2272  000134                     u3468:
  2273  000134  0005               	push	
  2274  000136  6EFA               	movwf	pclath,c
  2275  000138  5031               	movf	_serial_read,w,c
  2276  00013A  6EFD               	movwf	tosl,c
  2277  00013C  5032               	movf	_serial_read+1,w,c
  2278  00013E  6EFE               	movwf	tosh,c
  2279  000140  50F8               	movf	tblptru,w,c
  2280  000142  6EFF               	movwf	tosu,c
  2281  000144  50FA               	movf	pclath,w,c
  2282  000146  0012               	return		;indir
  2283  000148                     u3469:
  2284  000148  0A85               	xorlw	133
  2285  00014A  A4D8               	btfss	status,2,c
  2286  00014C  D060               	goto	l4178
  2287                           
  2288                           ;FastTransfer.c: 98: rx_address = serial_read();
  2289  00014E  D801               	call	u3488
  2290  000150  D00A               	goto	u3489
  2291  000152                     u3488:
  2292  000152  0005               	push	
  2293  000154  6EFA               	movwf	pclath,c
  2294  000156  5031               	movf	_serial_read,w,c
  2295  000158  6EFD               	movwf	tosl,c
  2296  00015A  5032               	movf	_serial_read+1,w,c
  2297  00015C  6EFE               	movwf	tosh,c
  2298  00015E  50F8               	movf	tblptru,w,c
  2299  000160  6EFF               	movwf	tosu,c
  2300  000162  50FA               	movf	pclath,w,c
  2301  000164  0012               	return		;indir
  2302  000166                     u3489:
  2303  000166  6E3F               	movwf	_rx_address,c
  2304                           
  2305                           ;FastTransfer.c: 99: returnAddress = serial_read();
  2306  000168  D801               	call	u3498
  2307  00016A  D00A               	goto	u3499
  2308  00016C                     u3498:
  2309  00016C  0005               	push	
  2310  00016E  6EFA               	movwf	pclath,c
  2311  000170  5031               	movf	_serial_read,w,c
  2312  000172  6EFD               	movwf	tosl,c
  2313  000174  5032               	movf	_serial_read+1,w,c
  2314  000176  6EFE               	movwf	tosh,c
  2315  000178  50F8               	movf	tblptru,w,c
  2316  00017A  6EFF               	movwf	tosu,c
  2317  00017C  50FA               	movf	pclath,w,c
  2318  00017E  0012               	return		;indir
  2319  000180                     u3499:
  2320  000180  6E3E               	movwf	_returnAddress,c
  2321                           
  2322                           ;FastTransfer.c: 100: rx_len = serial_read();
  2323  000182  D801               	call	u3508
  2324  000184  D00A               	goto	u3509
  2325  000186                     u3508:
  2326  000186  0005               	push	
  2327  000188  6EFA               	movwf	pclath,c
  2328  00018A  5031               	movf	_serial_read,w,c
  2329  00018C  6EFD               	movwf	tosl,c
  2330  00018E  5032               	movf	_serial_read+1,w,c
  2331  000190  6EFE               	movwf	tosh,c
  2332  000192  50F8               	movf	tblptru,w,c
  2333  000194  6EFF               	movwf	tosu,c
  2334  000196  50FA               	movf	pclath,w,c
  2335  000198  0012               	return		;indir
  2336  00019A                     u3509:
  2337  00019A  6E41               	movwf	_rx_len,c
  2338                           
  2339                           ;FastTransfer.c: 102: if (rx_address != moduleAddress) {
  2340  00019C  503D               	movf	_moduleAddress,w,c
  2341  00019E  183F               	xorwf	_rx_address,w,c
  2342  0001A0  B4D8               	btfsc	status,2,c
  2343  0001A2  D035               	goto	l4178
  2344                           
  2345                           ;FastTransfer.c: 103: addressErrorCounter++;
  2346  0001A4  0100               	movlb	0	; () banked
  2347  0001A6  4B90               	infsnz	_addressErrorCounter& (0+255),f,b
  2348  0001A8  2B91               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;FastTransfer.c: 106: int u;
  2352                           ;FastTransfer.c: 107: for (u = 0; u <= (rx_len + 1); u++) {
  2353  0001AA  0E00               	movlw	0
  2354  0001AC  0100               	movlb	0	; () banked
  2355  0001AE  6FE3               	movwf	(receiveData@u+1)& (0+255),b
  2356  0001B0  0E00               	movlw	0
  2357  0001B2  6FE2               	movwf	receiveData@u& (0+255),b
  2358  0001B4  D00F               	goto	l4170
  2359  0001B6                     l4166:
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;FastTransfer.c: 108: serial_read();
  2363  0001B6  D801               	call	u3528
  2364  0001B8  D00A               	goto	l4168
  2365  0001BA                     u3528:
  2366  0001BA  0005               	push	
  2367  0001BC  6EFA               	movwf	pclath,c
  2368  0001BE  5031               	movf	_serial_read,w,c
  2369  0001C0  6EFD               	movwf	tosl,c
  2370  0001C2  5032               	movf	_serial_read+1,w,c
  2371  0001C4  6EFE               	movwf	tosh,c
  2372  0001C6  50F8               	movf	tblptru,w,c
  2373  0001C8  6EFF               	movwf	tosu,c
  2374  0001CA  50FA               	movf	pclath,w,c
  2375  0001CC  0012               	return		;indir
  2376  0001CE                     l4168:
  2377  0001CE  0100               	movlb	0	; () banked
  2378  0001D0  4BE2               	infsnz	receiveData@u& (0+255),f,b
  2379  0001D2  2BE3               	incf	(receiveData@u+1)& (0+255),f,b
  2380  0001D4                     l4170:
  2381                           
  2382                           ; BSR set to: 0
  2383  0001D4  5041               	movf	_rx_len,w,c
  2384  0001D6  0100               	movlb	0	; () banked
  2385  0001D8  6FD4               	movwf	??_receiveData& (0+255),b
  2386  0001DA  6BD5               	clrf	(??_receiveData+1)& (0+255),b
  2387  0001DC  0E01               	movlw	1
  2388  0001DE  0100               	movlb	0	; () banked
  2389  0001E0  27D4               	addwf	??_receiveData& (0+255),f,b
  2390  0001E2  0E00               	movlw	0
  2391  0001E4  23D5               	addwfc	(??_receiveData+1)& (0+255),f,b
  2392  0001E6  0100               	movlb	0	; () banked
  2393  0001E8  51E2               	movf	receiveData@u& (0+255),w,b
  2394  0001EA  0100               	movlb	0	; () banked
  2395  0001EC  5DD4               	subwf	??_receiveData& (0+255),w,b
  2396  0001EE  0100               	movlb	0	; () banked
  2397  0001F0  51D5               	movf	(??_receiveData+1)& (0+255),w,b
  2398  0001F2  0A80               	xorlw	128
  2399  0001F4  0100               	movlb	0	; () banked
  2400  0001F6  6FD6               	movwf	(??_receiveData+2)& (0+255),b
  2401  0001F8  0100               	movlb	0	; () banked
  2402  0001FA  51E3               	movf	(receiveData@u+1)& (0+255),w,b
  2403  0001FC  0A80               	xorlw	128
  2404  0001FE  0100               	movlb	0	; () banked
  2405  000200  59D6               	subwfb	(??_receiveData+2)& (0+255),w,b
  2406  000202  B0D8               	btfsc	status,0,c
  2407  000204  D7D8               	goto	l4166
  2408                           
  2409                           ; BSR set to: 0
  2410                           ;FastTransfer.c: 109: }
  2411                           ;FastTransfer.c: 110: rx_len = 0;
  2412                           
  2413                           ; BSR set to: 0
  2414  000206  0E00               	movlw	0
  2415  000208  6E41               	movwf	_rx_len,c
  2416                           
  2417                           ; BSR set to: 0
  2418                           ;FastTransfer.c: 111: return 0;
  2419  00020A  0E00               	movlw	0
  2420                           
  2421                           ; BSR set to: 0
  2422  00020C  0012               	return	
  2423  00020E                     l4178:
  2424                           
  2425                           ;FastTransfer.c: 112: }
  2426                           ;FastTransfer.c: 114: }
  2427                           ;FastTransfer.c: 115: }
  2428                           ;FastTransfer.c: 116: }
  2429                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2430  00020E  5041               	movf	_rx_len,w,c
  2431  000210  A4D8               	btfss	status,2,c
  2432  000212  D01A               	goto	l4186
  2433  000214  D276               	goto	l4286
  2434  000216                     l4182:
  2435                           
  2436                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2437  000216  D801               	call	u3558
  2438  000218  D00A               	goto	u3559
  2439  00021A                     u3558:
  2440  00021A  0005               	push	
  2441  00021C  6EFA               	movwf	pclath,c
  2442  00021E  5031               	movf	_serial_read,w,c
  2443  000220  6EFD               	movwf	tosl,c
  2444  000222  5032               	movf	_serial_read+1,w,c
  2445  000224  6EFE               	movwf	tosh,c
  2446  000226  50F8               	movf	tblptru,w,c
  2447  000228  6EFF               	movwf	tosu,c
  2448  00022A  50FA               	movf	pclath,w,c
  2449  00022C  0012               	return		;indir
  2450  00022E                     u3559:
  2451  00022E  0100               	movlb	0	; () banked
  2452  000230  6FD4               	movwf	??_receiveData& (0+255),b
  2453  000232  5040               	movf	_rx_array_inx,w,c
  2454  000234  0D01               	mullw	1
  2455  000236  0E00               	movlw	low _rx_buffer
  2456  000238  24F3               	addwf	prodl,w,c
  2457  00023A  6ED9               	movwf	fsr2l,c
  2458  00023C  0E02               	movlw	high _rx_buffer
  2459  00023E  20F4               	addwfc	prodh,w,c
  2460  000240  6EDA               	movwf	fsr2h,c
  2461  000242  C0D4  FFDF         	movff	??_receiveData,indf2
  2462                           
  2463                           ; BSR set to: 0
  2464  000246  2A40               	incf	_rx_array_inx,f,c
  2465  000248                     l4186:
  2466  000248  D801               	call	u3568
  2467  00024A  D00A               	goto	u3569
  2468  00024C                     u3568:
  2469  00024C  0005               	push	
  2470  00024E  6EFA               	movwf	pclath,c
  2471  000250  502D               	movf	_serial_available,w,c
  2472  000252  6EFD               	movwf	tosl,c
  2473  000254  502E               	movf	_serial_available+1,w,c
  2474  000256  6EFE               	movwf	tosh,c
  2475  000258  50F8               	movf	tblptru,w,c
  2476  00025A  6EFF               	movwf	tosu,c
  2477  00025C  50FA               	movf	pclath,w,c
  2478  00025E  0012               	return		;indir
  2479  000260                     u3569:
  2480  000260  501D               	movf	?_Receive_available,w,c
  2481  000262  101E               	iorwf	?_Receive_available+1,w,c
  2482  000264  B4D8               	btfsc	status,2,c
  2483  000266  D004               	goto	l4190
  2484  000268  5040               	movf	_rx_array_inx,w,c
  2485  00026A  5C41               	subwf	_rx_len,w,c
  2486  00026C  B0D8               	btfsc	status,0,c
  2487  00026E  D7D3               	goto	l4182
  2488  000270                     l4190:
  2489                           
  2490                           ;FastTransfer.c: 135: }
  2491                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2492  000270  5041               	movf	_rx_len,w,c
  2493  000272  0100               	movlb	0	; () banked
  2494  000274  6FD4               	movwf	??_receiveData& (0+255),b
  2495  000276  6BD5               	clrf	(??_receiveData+1)& (0+255),b
  2496  000278  0EFF               	movlw	255
  2497  00027A  0100               	movlb	0	; () banked
  2498  00027C  6FD6               	movwf	(??_receiveData+2)& (0+255),b
  2499  00027E  0EFF               	movlw	255
  2500  000280  0100               	movlb	0	; () banked
  2501  000282  6FD7               	movwf	(??_receiveData+3)& (0+255),b
  2502  000284  5040               	movf	_rx_array_inx,w,c
  2503  000286  0100               	movlb	0	; () banked
  2504  000288  6FD8               	movwf	(??_receiveData+4)& (0+255),b
  2505  00028A  6BD9               	clrf	(??_receiveData+5)& (0+255),b
  2506  00028C  0100               	movlb	0	; () banked
  2507  00028E  51D6               	movf	(??_receiveData+2)& (0+255),w,b
  2508  000290  0100               	movlb	0	; () banked
  2509  000292  27D8               	addwf	(??_receiveData+4)& (0+255),f,b
  2510  000294  0100               	movlb	0	; () banked
  2511  000296  51D7               	movf	(??_receiveData+3)& (0+255),w,b
  2512  000298  0100               	movlb	0	; () banked
  2513  00029A  23D9               	addwfc	(??_receiveData+5)& (0+255),f,b
  2514  00029C  0100               	movlb	0	; () banked
  2515  00029E  51D4               	movf	??_receiveData& (0+255),w,b
  2516  0002A0  0100               	movlb	0	; () banked
  2517  0002A2  19D8               	xorwf	(??_receiveData+4)& (0+255),w,b
  2518  0002A4  E105               	bnz	u3591
  2519  0002A6  0100               	movlb	0	; () banked
  2520  0002A8  51D5               	movf	(??_receiveData+1)& (0+255),w,b
  2521  0002AA  0100               	movlb	0	; () banked
  2522  0002AC  19D9               	xorwf	(??_receiveData+5)& (0+255),w,b
  2523  0002AE  A4D8               	btfss	status,2,c
  2524  0002B0                     u3591:
  2525  0002B0  D228               	goto	l4286
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2529  0002B2  0E00               	movlw	low _rx_buffer
  2530  0002B4  6E1B               	movwf	CRC8@data,c
  2531  0002B6  0E02               	movlw	high _rx_buffer
  2532  0002B8  6E1C               	movwf	CRC8@data+1,c
  2533  0002BA  C041  F01D         	movff	_rx_len,CRC8@len
  2534  0002BE  ECF9  F00B         	call	_CRC8	;wreg free
  2535  0002C2  6E3B               	movwf	_calc_CS,c
  2536                           
  2537                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2538  0002C4  0EFF               	movlw	255
  2539  0002C6  0100               	movlb	0	; () banked
  2540  0002C8  6FD4               	movwf	??_receiveData& (0+255),b
  2541  0002CA  0EFF               	movlw	255
  2542  0002CC  0100               	movlb	0	; () banked
  2543  0002CE  6FD5               	movwf	(??_receiveData+1)& (0+255),b
  2544  0002D0  5040               	movf	_rx_array_inx,w,c
  2545  0002D2  0100               	movlb	0	; () banked
  2546  0002D4  6FD6               	movwf	(??_receiveData+2)& (0+255),b
  2547  0002D6  6BD7               	clrf	(??_receiveData+3)& (0+255),b
  2548  0002D8  0100               	movlb	0	; () banked
  2549  0002DA  51D4               	movf	??_receiveData& (0+255),w,b
  2550  0002DC  0100               	movlb	0	; () banked
  2551  0002DE  27D6               	addwf	(??_receiveData+2)& (0+255),f,b
  2552  0002E0  0100               	movlb	0	; () banked
  2553  0002E2  51D5               	movf	(??_receiveData+1)& (0+255),w,b
  2554  0002E4  0100               	movlb	0	; () banked
  2555  0002E6  23D7               	addwfc	(??_receiveData+3)& (0+255),f,b
  2556  0002E8  0E00               	movlw	low _rx_buffer
  2557  0002EA  0100               	movlb	0	; () banked
  2558  0002EC  25D6               	addwf	(??_receiveData+2)& (0+255),w,b
  2559  0002EE  6ED9               	movwf	fsr2l,c
  2560  0002F0  0E02               	movlw	high _rx_buffer
  2561  0002F2  0100               	movlb	0	; () banked
  2562  0002F4  21D7               	addwfc	(??_receiveData+3)& (0+255),w,b
  2563  0002F6  6EDA               	movwf	fsr2h,c
  2564  0002F8  503B               	movf	_calc_CS,w,c
  2565  0002FA  18DE               	xorwf	postinc2,w,c
  2566  0002FC  A4D8               	btfss	status,2,c
  2567  0002FE  D139               	goto	l4248
  2568                           
  2569                           ; BSR set to: 0
  2570                           ;FastTransfer.c: 147: int r;
  2571                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2572  000300  0E00               	movlw	0
  2573  000302  0100               	movlb	0	; () banked
  2574  000304  6FE5               	movwf	(receiveData@r+1)& (0+255),b
  2575  000306  0E00               	movlw	0
  2576  000308  6FE4               	movwf	receiveData@r& (0+255),b
  2577  00030A  D05A               	goto	l4208
  2578  00030C                     l4198:
  2579                           
  2580                           ; BSR set to: 0
  2581                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2582  00030C  0E00               	movlw	low _rx_buffer
  2583  00030E  0100               	movlb	0	; () banked
  2584  000310  25E4               	addwf	receiveData@r& (0+255),w,b
  2585  000312  6ED9               	movwf	fsr2l,c
  2586  000314  0E02               	movlw	high _rx_buffer
  2587  000316  0100               	movlb	0	; () banked
  2588  000318  21E5               	addwfc	(receiveData@r+1)& (0+255),w,b
  2589  00031A  6EDA               	movwf	fsr2h,c
  2590  00031C  503C               	movf	_maxDataAddress,w,c
  2591  00031E  5CDE               	subwf	postinc2,w,c
  2592  000320  B0D8               	btfsc	status,0,c
  2593  000322  D041               	goto	l4204
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2597  000324  0E01               	movlw	1
  2598  000326  0100               	movlb	0	; () banked
  2599  000328  25E4               	addwf	receiveData@r& (0+255),w,b
  2600  00032A  0100               	movlb	0	; () banked
  2601  00032C  6FD4               	movwf	??_receiveData& (0+255),b
  2602  00032E  0E00               	movlw	0
  2603  000330  0100               	movlb	0	; () banked
  2604  000332  21E5               	addwfc	(receiveData@r+1)& (0+255),w,b
  2605  000334  0100               	movlb	0	; () banked
  2606  000336  6FD5               	movwf	(??_receiveData+1)& (0+255),b
  2607  000338  0E00               	movlw	low _rx_buffer
  2608  00033A  0100               	movlb	0	; () banked
  2609  00033C  25D4               	addwf	??_receiveData& (0+255),w,b
  2610  00033E  6ED9               	movwf	fsr2l,c
  2611  000340  0E02               	movlw	high _rx_buffer
  2612  000342  0100               	movlb	0	; () banked
  2613  000344  21D5               	addwfc	(??_receiveData+1)& (0+255),w,b
  2614  000346  6EDA               	movwf	fsr2h,c
  2615  000348  50DF               	movf	indf2,w,c
  2616  00034A  6E25               	movwf	_group,c
  2617                           
  2618                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2619  00034C  0E02               	movlw	2
  2620  00034E  0100               	movlb	0	; () banked
  2621  000350  25E4               	addwf	receiveData@r& (0+255),w,b
  2622  000352  0100               	movlb	0	; () banked
  2623  000354  6FD4               	movwf	??_receiveData& (0+255),b
  2624  000356  0E00               	movlw	0
  2625  000358  0100               	movlb	0	; () banked
  2626  00035A  21E5               	addwfc	(receiveData@r+1)& (0+255),w,b
  2627  00035C  0100               	movlb	0	; () banked
  2628  00035E  6FD5               	movwf	(??_receiveData+1)& (0+255),b
  2629  000360  0E00               	movlw	low _rx_buffer
  2630  000362  0100               	movlb	0	; () banked
  2631  000364  25D4               	addwf	??_receiveData& (0+255),w,b
  2632  000366  6ED9               	movwf	fsr2l,c
  2633  000368  0E02               	movlw	high _rx_buffer
  2634  00036A  0100               	movlb	0	; () banked
  2635  00036C  21D5               	addwfc	(??_receiveData+1)& (0+255),w,b
  2636  00036E  6EDA               	movwf	fsr2h,c
  2637  000370  50DF               	movf	indf2,w,c
  2638  000372  6E26               	movwf	_group+1,c
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2642  000374  0E00               	movlw	low _rx_buffer
  2643  000376  0100               	movlb	0	; () banked
  2644  000378  25E4               	addwf	receiveData@r& (0+255),w,b
  2645  00037A  6ED9               	movwf	fsr2l,c
  2646  00037C  0E02               	movlw	high _rx_buffer
  2647  00037E  0100               	movlb	0	; () banked
  2648  000380  21E5               	addwfc	(receiveData@r+1)& (0+255),w,b
  2649  000382  6EDA               	movwf	fsr2h,c
  2650  000384  50DF               	movf	indf2,w,c
  2651  000386  0100               	movlb	0	; () banked
  2652  000388  6FD4               	movwf	??_receiveData& (0+255),b
  2653  00038A  0100               	movlb	0	; () banked
  2654  00038C  51D4               	movf	??_receiveData& (0+255),w,b
  2655  00038E  0D02               	mullw	2
  2656  000390  50F3               	movf	prodl,w,c
  2657  000392  2429               	addwf	_receiveArrayAddress,w,c
  2658  000394  6ED9               	movwf	fsr2l,c
  2659  000396  50F4               	movf	prodh,w,c
  2660  000398  202A               	addwfc	_receiveArrayAddress+1,w,c
  2661  00039A  6EDA               	movwf	fsr2h,c
  2662  00039C  C025  FFDE         	movff	_group,postinc2
  2663  0003A0  C026  FFDD         	movff	_group+1,postdec2
  2664                           
  2665                           ;FastTransfer.c: 153: } else {
  2666  0003A4  D003               	goto	l4206
  2667  0003A6                     l4204:
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2671  0003A6  0100               	movlb	0	; () banked
  2672  0003A8  4B96               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2673  0003AA  2B97               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2674  0003AC                     l4206:
  2675                           
  2676                           ; BSR set to: 0
  2677  0003AC  0E03               	movlw	3
  2678  0003AE  0100               	movlb	0	; () banked
  2679  0003B0  25E4               	addwf	receiveData@r& (0+255),w,b
  2680  0003B2  0100               	movlb	0	; () banked
  2681  0003B4  6FE4               	movwf	receiveData@r& (0+255),b
  2682  0003B6  0E00               	movlw	0
  2683  0003B8  0100               	movlb	0	; () banked
  2684  0003BA  21E5               	addwfc	(receiveData@r+1)& (0+255),w,b
  2685  0003BC  0100               	movlb	0	; () banked
  2686  0003BE  6FE5               	movwf	(receiveData@r+1)& (0+255),b
  2687  0003C0                     l4208:
  2688                           
  2689                           ; BSR set to: 0
  2690  0003C0  5041               	movf	_rx_len,w,c
  2691  0003C2  0100               	movlb	0	; () banked
  2692  0003C4  6FD4               	movwf	??_receiveData& (0+255),b
  2693  0003C6  6BD5               	clrf	(??_receiveData+1)& (0+255),b
  2694  0003C8  0100               	movlb	0	; () banked
  2695  0003CA  51D4               	movf	??_receiveData& (0+255),w,b
  2696  0003CC  0100               	movlb	0	; () banked
  2697  0003CE  5DE4               	subwf	receiveData@r& (0+255),w,b
  2698  0003D0  0100               	movlb	0	; () banked
  2699  0003D2  51E5               	movf	(receiveData@r+1)& (0+255),w,b
  2700  0003D4  0A80               	xorlw	128
  2701  0003D6  0100               	movlb	0	; () banked
  2702  0003D8  6FD6               	movwf	(??_receiveData+2)& (0+255),b
  2703  0003DA  0100               	movlb	0	; () banked
  2704  0003DC  51D5               	movf	(??_receiveData+1)& (0+255),w,b
  2705  0003DE  0A80               	xorlw	128
  2706  0003E0  0100               	movlb	0	; () banked
  2707  0003E2  59D6               	subwfb	(??_receiveData+2)& (0+255),w,b
  2708  0003E4  A0D8               	btfss	status,0,c
  2709  0003E6  D792               	goto	l4198
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;FastTransfer.c: 155: }
  2713                           ;FastTransfer.c: 156: }
  2714                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2715                           
  2716                           ; BSR set to: 0
  2717  0003E8  5039               	movf	_AKNAKsend,w,c
  2718  0003EA  B4D8               	btfsc	status,2,c
  2719  0003EC  D0BC               	goto	l4238
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;FastTransfer.c: 160: unsigned char holder[3];
  2723                           ;FastTransfer.c: 161: holder[0] = 255;
  2724  0003EE  0100               	movlb	0	; () banked
  2725  0003F0  69DA               	setf	receiveData@holder& (0+255),b
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;FastTransfer.c: 162: holder[1] = 1;
  2729  0003F2  0E01               	movlw	1
  2730  0003F4  0100               	movlb	0	; () banked
  2731  0003F6  6FDB               	movwf	(receiveData@holder+1)& (0+255),b
  2732                           
  2733                           ; BSR set to: 0
  2734                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  2735  0003F8  0EFF               	movlw	255
  2736  0003FA  0100               	movlb	0	; () banked
  2737  0003FC  6FD4               	movwf	??_receiveData& (0+255),b
  2738  0003FE  0EFF               	movlw	255
  2739  000400  0100               	movlb	0	; () banked
  2740  000402  6FD5               	movwf	(??_receiveData+1)& (0+255),b
  2741  000404  5040               	movf	_rx_array_inx,w,c
  2742  000406  0100               	movlb	0	; () banked
  2743  000408  6FD6               	movwf	(??_receiveData+2)& (0+255),b
  2744  00040A  6BD7               	clrf	(??_receiveData+3)& (0+255),b
  2745  00040C  0100               	movlb	0	; () banked
  2746  00040E  51D4               	movf	??_receiveData& (0+255),w,b
  2747  000410  0100               	movlb	0	; () banked
  2748  000412  27D6               	addwf	(??_receiveData+2)& (0+255),f,b
  2749  000414  0100               	movlb	0	; () banked
  2750  000416  51D5               	movf	(??_receiveData+1)& (0+255),w,b
  2751  000418  0100               	movlb	0	; () banked
  2752  00041A  23D7               	addwfc	(??_receiveData+3)& (0+255),f,b
  2753  00041C  0E00               	movlw	low _rx_buffer
  2754  00041E  0100               	movlb	0	; () banked
  2755  000420  25D6               	addwf	(??_receiveData+2)& (0+255),w,b
  2756  000422  6ED9               	movwf	fsr2l,c
  2757  000424  0E02               	movlw	high _rx_buffer
  2758  000426  0100               	movlb	0	; () banked
  2759  000428  21D7               	addwfc	(??_receiveData+3)& (0+255),w,b
  2760  00042A  6EDA               	movwf	fsr2h,c
  2761  00042C  50DF               	movf	indf2,w,c
  2762  00042E  0100               	movlb	0	; () banked
  2763  000430  6FDC               	movwf	(receiveData@holder+2)& (0+255),b
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;FastTransfer.c: 164: unsigned char crcHolder = CRC8(holder, 3);
  2767  000432  0EDA               	movlw	low receiveData@holder
  2768  000434  6E1B               	movwf	CRC8@data,c
  2769  000436  0E00               	movlw	high receiveData@holder
  2770  000438  6E1C               	movwf	CRC8@data+1,c
  2771  00043A  0E03               	movlw	3
  2772  00043C  6E1D               	movwf	CRC8@len,c
  2773  00043E  ECF9  F00B         	call	_CRC8	;wreg free
  2774  000442  0100               	movlb	0	; () banked
  2775  000444  6FE0               	movwf	receiveData@crcHolder& (0+255),b
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;FastTransfer.c: 165: serial_write(0x06);
  2779  000446  D801               	call	u3648
  2780  000448  D00B               	goto	l4222
  2781  00044A                     u3648:
  2782  00044A  0005               	push	
  2783  00044C  6EFA               	movwf	pclath,c
  2784  00044E  5033               	movf	_serial_write,w,c
  2785  000450  6EFD               	movwf	tosl,c
  2786  000452  5034               	movf	_serial_write+1,w,c
  2787  000454  6EFE               	movwf	tosh,c
  2788  000456  50F8               	movf	tblptru,w,c
  2789  000458  6EFF               	movwf	tosu,c
  2790  00045A  50FA               	movf	pclath,w,c
  2791  00045C  0E06               	movlw	6
  2792  00045E  0012               	return		;indir
  2793  000460                     l4222:
  2794                           
  2795                           ;FastTransfer.c: 166: serial_write(0x85);
  2796  000460  D801               	call	u3658
  2797  000462  D00B               	goto	l4224
  2798  000464                     u3658:
  2799  000464  0005               	push	
  2800  000466  6EFA               	movwf	pclath,c
  2801  000468  5033               	movf	_serial_write,w,c
  2802  00046A  6EFD               	movwf	tosl,c
  2803  00046C  5034               	movf	_serial_write+1,w,c
  2804  00046E  6EFE               	movwf	tosh,c
  2805  000470  50F8               	movf	tblptru,w,c
  2806  000472  6EFF               	movwf	tosu,c
  2807  000474  50FA               	movf	pclath,w,c
  2808  000476  0E85               	movlw	133
  2809  000478  0012               	return		;indir
  2810  00047A                     l4224:
  2811                           
  2812                           ;FastTransfer.c: 167: serial_write(returnAddress);
  2813  00047A  D801               	call	u3668
  2814  00047C  D00B               	goto	l4226
  2815  00047E                     u3668:
  2816  00047E  0005               	push	
  2817  000480  6EFA               	movwf	pclath,c
  2818  000482  5033               	movf	_serial_write,w,c
  2819  000484  6EFD               	movwf	tosl,c
  2820  000486  5034               	movf	_serial_write+1,w,c
  2821  000488  6EFE               	movwf	tosh,c
  2822  00048A  50F8               	movf	tblptru,w,c
  2823  00048C  6EFF               	movwf	tosu,c
  2824  00048E  50FA               	movf	pclath,w,c
  2825  000490  503E               	movf	_returnAddress,w,c
  2826  000492  0012               	return		;indir
  2827  000494                     l4226:
  2828                           
  2829                           ;FastTransfer.c: 168: serial_write(moduleAddress);
  2830  000494  D801               	call	u3678
  2831  000496  D00B               	goto	l4228
  2832  000498                     u3678:
  2833  000498  0005               	push	
  2834  00049A  6EFA               	movwf	pclath,c
  2835  00049C  5033               	movf	_serial_write,w,c
  2836  00049E  6EFD               	movwf	tosl,c
  2837  0004A0  5034               	movf	_serial_write+1,w,c
  2838  0004A2  6EFE               	movwf	tosh,c
  2839  0004A4  50F8               	movf	tblptru,w,c
  2840  0004A6  6EFF               	movwf	tosu,c
  2841  0004A8  50FA               	movf	pclath,w,c
  2842  0004AA  503D               	movf	_moduleAddress,w,c
  2843  0004AC  0012               	return		;indir
  2844  0004AE                     l4228:
  2845                           
  2846                           ;FastTransfer.c: 169: serial_write(3);
  2847  0004AE  D801               	call	u3688
  2848  0004B0  D00B               	goto	l4230
  2849  0004B2                     u3688:
  2850  0004B2  0005               	push	
  2851  0004B4  6EFA               	movwf	pclath,c
  2852  0004B6  5033               	movf	_serial_write,w,c
  2853  0004B8  6EFD               	movwf	tosl,c
  2854  0004BA  5034               	movf	_serial_write+1,w,c
  2855  0004BC  6EFE               	movwf	tosh,c
  2856  0004BE  50F8               	movf	tblptru,w,c
  2857  0004C0  6EFF               	movwf	tosu,c
  2858  0004C2  50FA               	movf	pclath,w,c
  2859  0004C4  0E03               	movlw	3
  2860  0004C6  0012               	return		;indir
  2861  0004C8                     l4230:
  2862                           
  2863                           ;FastTransfer.c: 170: serial_write(255);
  2864  0004C8  D801               	call	u3698
  2865  0004CA  D00B               	goto	l4232
  2866  0004CC                     u3698:
  2867  0004CC  0005               	push	
  2868  0004CE  6EFA               	movwf	pclath,c
  2869  0004D0  5033               	movf	_serial_write,w,c
  2870  0004D2  6EFD               	movwf	tosl,c
  2871  0004D4  5034               	movf	_serial_write+1,w,c
  2872  0004D6  6EFE               	movwf	tosh,c
  2873  0004D8  50F8               	movf	tblptru,w,c
  2874  0004DA  6EFF               	movwf	tosu,c
  2875  0004DC  50FA               	movf	pclath,w,c
  2876  0004DE  0EFF               	movlw	255
  2877  0004E0  0012               	return		;indir
  2878  0004E2                     l4232:
  2879                           
  2880                           ;FastTransfer.c: 171: serial_write(1);
  2881  0004E2  D801               	call	u3708
  2882  0004E4  D00B               	goto	l4234
  2883  0004E6                     u3708:
  2884  0004E6  0005               	push	
  2885  0004E8  6EFA               	movwf	pclath,c
  2886  0004EA  5033               	movf	_serial_write,w,c
  2887  0004EC  6EFD               	movwf	tosl,c
  2888  0004EE  5034               	movf	_serial_write+1,w,c
  2889  0004F0  6EFE               	movwf	tosh,c
  2890  0004F2  50F8               	movf	tblptru,w,c
  2891  0004F4  6EFF               	movwf	tosu,c
  2892  0004F6  50FA               	movf	pclath,w,c
  2893  0004F8  0E01               	movlw	1
  2894  0004FA  0012               	return		;indir
  2895  0004FC                     l4234:
  2896                           
  2897                           ;FastTransfer.c: 172: serial_write(rx_buffer[rx_array_inx - 1]);
  2898  0004FC  D801               	call	u3718
  2899  0004FE  D025               	goto	l4236
  2900  000500                     u3718:
  2901  000500  0005               	push	
  2902  000502  6EFA               	movwf	pclath,c
  2903  000504  5033               	movf	_serial_write,w,c
  2904  000506  6EFD               	movwf	tosl,c
  2905  000508  5034               	movf	_serial_write+1,w,c
  2906  00050A  6EFE               	movwf	tosh,c
  2907  00050C  50F8               	movf	tblptru,w,c
  2908  00050E  6EFF               	movwf	tosu,c
  2909  000510  50FA               	movf	pclath,w,c
  2910  000512  0EFF               	movlw	255
  2911  000514  0100               	movlb	0	; () banked
  2912  000516  6FD4               	movwf	??_receiveData& (0+255),b
  2913  000518  0EFF               	movlw	255
  2914  00051A  0100               	movlb	0	; () banked
  2915  00051C  6FD5               	movwf	(??_receiveData+1)& (0+255),b
  2916  00051E  5040               	movf	_rx_array_inx,w,c
  2917  000520  0100               	movlb	0	; () banked
  2918  000522  6FD6               	movwf	(??_receiveData+2)& (0+255),b
  2919  000524  6BD7               	clrf	(??_receiveData+3)& (0+255),b
  2920  000526  0100               	movlb	0	; () banked
  2921  000528  51D4               	movf	??_receiveData& (0+255),w,b
  2922  00052A  0100               	movlb	0	; () banked
  2923  00052C  27D6               	addwf	(??_receiveData+2)& (0+255),f,b
  2924  00052E  0100               	movlb	0	; () banked
  2925  000530  51D5               	movf	(??_receiveData+1)& (0+255),w,b
  2926  000532  0100               	movlb	0	; () banked
  2927  000534  23D7               	addwfc	(??_receiveData+3)& (0+255),f,b
  2928  000536  0E00               	movlw	low _rx_buffer
  2929  000538  0100               	movlb	0	; () banked
  2930  00053A  25D6               	addwf	(??_receiveData+2)& (0+255),w,b
  2931  00053C  6ED9               	movwf	fsr2l,c
  2932  00053E  0E02               	movlw	high _rx_buffer
  2933  000540  0100               	movlb	0	; () banked
  2934  000542  21D7               	addwfc	(??_receiveData+3)& (0+255),w,b
  2935  000544  6EDA               	movwf	fsr2h,c
  2936  000546  50DF               	movf	indf2,w,c
  2937  000548  0012               	return		;indir
  2938  00054A                     l4236:
  2939                           
  2940                           ;FastTransfer.c: 173: serial_write(crcHolder);
  2941  00054A  D801               	call	u3728
  2942  00054C  D00C               	goto	l4238
  2943  00054E                     u3728:
  2944  00054E  0005               	push	
  2945  000550  6EFA               	movwf	pclath,c
  2946  000552  5033               	movf	_serial_write,w,c
  2947  000554  6EFD               	movwf	tosl,c
  2948  000556  5034               	movf	_serial_write+1,w,c
  2949  000558  6EFE               	movwf	tosh,c
  2950  00055A  50F8               	movf	tblptru,w,c
  2951  00055C  6EFF               	movwf	tosu,c
  2952  00055E  50FA               	movf	pclath,w,c
  2953  000560  0100               	movlb	0	; () banked
  2954  000562  51E0               	movf	receiveData@crcHolder& (0+255),w,b
  2955  000564  0012               	return		;indir
  2956  000566                     l4238:
  2957                           
  2958                           ;FastTransfer.c: 174: }
  2959                           ;FastTransfer.c: 178: rx_len = 0;
  2960  000566  0E00               	movlw	0
  2961  000568  6E41               	movwf	_rx_len,c
  2962                           
  2963                           ;FastTransfer.c: 179: rx_array_inx = 0;
  2964  00056A  0E00               	movlw	0
  2965  00056C  6E40               	movwf	_rx_array_inx,c
  2966                           
  2967                           ;FastTransfer.c: 180: return 1;
  2968  00056E  0E01               	movlw	1
  2969  000570  0012               	return	
  2970  000572                     l4248:
  2971                           
  2972                           ;FastTransfer.c: 182: crcErrorCounter++;
  2973  000572  0100               	movlb	0	; () banked
  2974  000574  4B94               	infsnz	_crcErrorCounter& (0+255),f,b
  2975  000576  2B95               	incf	(_crcErrorCounter+1)& (0+255),f,b
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;FastTransfer.c: 184: if (AKNAKsend) {
  2979  000578  5039               	movf	_AKNAKsend,w,c
  2980  00057A  B4D8               	btfsc	status,2,c
  2981  00057C  D0BC               	goto	l4278
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;FastTransfer.c: 185: unsigned char holder[3];
  2985                           ;FastTransfer.c: 186: holder[0] = 255;
  2986  00057E  0100               	movlb	0	; () banked
  2987  000580  69DD               	setf	receiveData@holder_1381& (0+255),b
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;FastTransfer.c: 187: holder[1] = 2;
  2991  000582  0E02               	movlw	2
  2992  000584  0100               	movlb	0	; () banked
  2993  000586  6FDE               	movwf	(receiveData@holder_1381+1)& (0+255),b
  2994                           
  2995                           ; BSR set to: 0
  2996                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  2997  000588  0EFF               	movlw	255
  2998  00058A  0100               	movlb	0	; () banked
  2999  00058C  6FD4               	movwf	??_receiveData& (0+255),b
  3000  00058E  0EFF               	movlw	255
  3001  000590  0100               	movlb	0	; () banked
  3002  000592  6FD5               	movwf	(??_receiveData+1)& (0+255),b
  3003  000594  5040               	movf	_rx_array_inx,w,c
  3004  000596  0100               	movlb	0	; () banked
  3005  000598  6FD6               	movwf	(??_receiveData+2)& (0+255),b
  3006  00059A  6BD7               	clrf	(??_receiveData+3)& (0+255),b
  3007  00059C  0100               	movlb	0	; () banked
  3008  00059E  51D4               	movf	??_receiveData& (0+255),w,b
  3009  0005A0  0100               	movlb	0	; () banked
  3010  0005A2  27D6               	addwf	(??_receiveData+2)& (0+255),f,b
  3011  0005A4  0100               	movlb	0	; () banked
  3012  0005A6  51D5               	movf	(??_receiveData+1)& (0+255),w,b
  3013  0005A8  0100               	movlb	0	; () banked
  3014  0005AA  23D7               	addwfc	(??_receiveData+3)& (0+255),f,b
  3015  0005AC  0E00               	movlw	low _rx_buffer
  3016  0005AE  0100               	movlb	0	; () banked
  3017  0005B0  25D6               	addwf	(??_receiveData+2)& (0+255),w,b
  3018  0005B2  6ED9               	movwf	fsr2l,c
  3019  0005B4  0E02               	movlw	high _rx_buffer
  3020  0005B6  0100               	movlb	0	; () banked
  3021  0005B8  21D7               	addwfc	(??_receiveData+3)& (0+255),w,b
  3022  0005BA  6EDA               	movwf	fsr2h,c
  3023  0005BC  50DF               	movf	indf2,w,c
  3024  0005BE  0100               	movlb	0	; () banked
  3025  0005C0  6FDF               	movwf	(receiveData@holder_1381+2)& (0+255),b
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;FastTransfer.c: 189: unsigned char crcHolder = CRC8(holder, 3);
  3029  0005C2  0EDD               	movlw	low receiveData@holder_1381
  3030  0005C4  6E1B               	movwf	CRC8@data,c
  3031  0005C6  0E00               	movlw	high receiveData@holder_1381
  3032  0005C8  6E1C               	movwf	CRC8@data+1,c
  3033  0005CA  0E03               	movlw	3
  3034  0005CC  6E1D               	movwf	CRC8@len,c
  3035  0005CE  ECF9  F00B         	call	_CRC8
  3036  0005D2  0100               	movlb	0	; () banked
  3037  0005D4  6FE1               	movwf	receiveData@crcHolder_1382& (0+255),b
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;FastTransfer.c: 190: serial_write(0x06);
  3041  0005D6  D801               	call	u3748
  3042  0005D8  D00B               	goto	l4262
  3043  0005DA                     u3748:
  3044  0005DA  0005               	push	
  3045  0005DC  6EFA               	movwf	pclath,c
  3046  0005DE  5033               	movf	_serial_write,w,c
  3047  0005E0  6EFD               	movwf	tosl,c
  3048  0005E2  5034               	movf	_serial_write+1,w,c
  3049  0005E4  6EFE               	movwf	tosh,c
  3050  0005E6  50F8               	movf	tblptru,w,c
  3051  0005E8  6EFF               	movwf	tosu,c
  3052  0005EA  50FA               	movf	pclath,w,c
  3053  0005EC  0E06               	movlw	6
  3054  0005EE  0012               	return		;indir
  3055  0005F0                     l4262:
  3056                           
  3057                           ;FastTransfer.c: 191: serial_write(0x85);
  3058  0005F0  D801               	call	u3758
  3059  0005F2  D00B               	goto	l4264
  3060  0005F4                     u3758:
  3061  0005F4  0005               	push	
  3062  0005F6  6EFA               	movwf	pclath,c
  3063  0005F8  5033               	movf	_serial_write,w,c
  3064  0005FA  6EFD               	movwf	tosl,c
  3065  0005FC  5034               	movf	_serial_write+1,w,c
  3066  0005FE  6EFE               	movwf	tosh,c
  3067  000600  50F8               	movf	tblptru,w,c
  3068  000602  6EFF               	movwf	tosu,c
  3069  000604  50FA               	movf	pclath,w,c
  3070  000606  0E85               	movlw	133
  3071  000608  0012               	return		;indir
  3072  00060A                     l4264:
  3073                           
  3074                           ;FastTransfer.c: 192: serial_write(returnAddress);
  3075  00060A  D801               	call	u3768
  3076  00060C  D00B               	goto	l4266
  3077  00060E                     u3768:
  3078  00060E  0005               	push	
  3079  000610  6EFA               	movwf	pclath,c
  3080  000612  5033               	movf	_serial_write,w,c
  3081  000614  6EFD               	movwf	tosl,c
  3082  000616  5034               	movf	_serial_write+1,w,c
  3083  000618  6EFE               	movwf	tosh,c
  3084  00061A  50F8               	movf	tblptru,w,c
  3085  00061C  6EFF               	movwf	tosu,c
  3086  00061E  50FA               	movf	pclath,w,c
  3087  000620  503E               	movf	_returnAddress,w,c
  3088  000622  0012               	return		;indir
  3089  000624                     l4266:
  3090                           
  3091                           ;FastTransfer.c: 193: serial_write(moduleAddress);
  3092  000624  D801               	call	u3778
  3093  000626  D00B               	goto	l4268
  3094  000628                     u3778:
  3095  000628  0005               	push	
  3096  00062A  6EFA               	movwf	pclath,c
  3097  00062C  5033               	movf	_serial_write,w,c
  3098  00062E  6EFD               	movwf	tosl,c
  3099  000630  5034               	movf	_serial_write+1,w,c
  3100  000632  6EFE               	movwf	tosh,c
  3101  000634  50F8               	movf	tblptru,w,c
  3102  000636  6EFF               	movwf	tosu,c
  3103  000638  50FA               	movf	pclath,w,c
  3104  00063A  503D               	movf	_moduleAddress,w,c
  3105  00063C  0012               	return		;indir
  3106  00063E                     l4268:
  3107                           
  3108                           ;FastTransfer.c: 194: serial_write(3);
  3109  00063E  D801               	call	u3788
  3110  000640  D00B               	goto	l4270
  3111  000642                     u3788:
  3112  000642  0005               	push	
  3113  000644  6EFA               	movwf	pclath,c
  3114  000646  5033               	movf	_serial_write,w,c
  3115  000648  6EFD               	movwf	tosl,c
  3116  00064A  5034               	movf	_serial_write+1,w,c
  3117  00064C  6EFE               	movwf	tosh,c
  3118  00064E  50F8               	movf	tblptru,w,c
  3119  000650  6EFF               	movwf	tosu,c
  3120  000652  50FA               	movf	pclath,w,c
  3121  000654  0E03               	movlw	3
  3122  000656  0012               	return		;indir
  3123  000658                     l4270:
  3124                           
  3125                           ;FastTransfer.c: 195: serial_write(255);
  3126  000658  D801               	call	u3798
  3127  00065A  D00B               	goto	l4272
  3128  00065C                     u3798:
  3129  00065C  0005               	push	
  3130  00065E  6EFA               	movwf	pclath,c
  3131  000660  5033               	movf	_serial_write,w,c
  3132  000662  6EFD               	movwf	tosl,c
  3133  000664  5034               	movf	_serial_write+1,w,c
  3134  000666  6EFE               	movwf	tosh,c
  3135  000668  50F8               	movf	tblptru,w,c
  3136  00066A  6EFF               	movwf	tosu,c
  3137  00066C  50FA               	movf	pclath,w,c
  3138  00066E  0EFF               	movlw	255
  3139  000670  0012               	return		;indir
  3140  000672                     l4272:
  3141                           
  3142                           ;FastTransfer.c: 196: serial_write(2);
  3143  000672  D801               	call	u3808
  3144  000674  D00B               	goto	l4274
  3145  000676                     u3808:
  3146  000676  0005               	push	
  3147  000678  6EFA               	movwf	pclath,c
  3148  00067A  5033               	movf	_serial_write,w,c
  3149  00067C  6EFD               	movwf	tosl,c
  3150  00067E  5034               	movf	_serial_write+1,w,c
  3151  000680  6EFE               	movwf	tosh,c
  3152  000682  50F8               	movf	tblptru,w,c
  3153  000684  6EFF               	movwf	tosu,c
  3154  000686  50FA               	movf	pclath,w,c
  3155  000688  0E02               	movlw	2
  3156  00068A  0012               	return		;indir
  3157  00068C                     l4274:
  3158                           
  3159                           ;FastTransfer.c: 197: serial_write(rx_buffer[rx_array_inx - 1]);
  3160  00068C  D801               	call	u3818
  3161  00068E  D025               	goto	l4276
  3162  000690                     u3818:
  3163  000690  0005               	push	
  3164  000692  6EFA               	movwf	pclath,c
  3165  000694  5033               	movf	_serial_write,w,c
  3166  000696  6EFD               	movwf	tosl,c
  3167  000698  5034               	movf	_serial_write+1,w,c
  3168  00069A  6EFE               	movwf	tosh,c
  3169  00069C  50F8               	movf	tblptru,w,c
  3170  00069E  6EFF               	movwf	tosu,c
  3171  0006A0  50FA               	movf	pclath,w,c
  3172  0006A2  0EFF               	movlw	255
  3173  0006A4  0100               	movlb	0	; () banked
  3174  0006A6  6FD4               	movwf	??_receiveData& (0+255),b
  3175  0006A8  0EFF               	movlw	255
  3176  0006AA  0100               	movlb	0	; () banked
  3177  0006AC  6FD5               	movwf	(??_receiveData+1)& (0+255),b
  3178  0006AE  5040               	movf	_rx_array_inx,w,c
  3179  0006B0  0100               	movlb	0	; () banked
  3180  0006B2  6FD6               	movwf	(??_receiveData+2)& (0+255),b
  3181  0006B4  6BD7               	clrf	(??_receiveData+3)& (0+255),b
  3182  0006B6  0100               	movlb	0	; () banked
  3183  0006B8  51D4               	movf	??_receiveData& (0+255),w,b
  3184  0006BA  0100               	movlb	0	; () banked
  3185  0006BC  27D6               	addwf	(??_receiveData+2)& (0+255),f,b
  3186  0006BE  0100               	movlb	0	; () banked
  3187  0006C0  51D5               	movf	(??_receiveData+1)& (0+255),w,b
  3188  0006C2  0100               	movlb	0	; () banked
  3189  0006C4  23D7               	addwfc	(??_receiveData+3)& (0+255),f,b
  3190  0006C6  0E00               	movlw	low _rx_buffer
  3191  0006C8  0100               	movlb	0	; () banked
  3192  0006CA  25D6               	addwf	(??_receiveData+2)& (0+255),w,b
  3193  0006CC  6ED9               	movwf	fsr2l,c
  3194  0006CE  0E02               	movlw	high _rx_buffer
  3195  0006D0  0100               	movlb	0	; () banked
  3196  0006D2  21D7               	addwfc	(??_receiveData+3)& (0+255),w,b
  3197  0006D4  6EDA               	movwf	fsr2h,c
  3198  0006D6  50DF               	movf	indf2,w,c
  3199  0006D8  0012               	return		;indir
  3200  0006DA                     l4276:
  3201                           
  3202                           ;FastTransfer.c: 198: serial_write(crcHolder);
  3203  0006DA  D801               	call	u3828
  3204  0006DC  D00C               	goto	l4278
  3205  0006DE                     u3828:
  3206  0006DE  0005               	push	
  3207  0006E0  6EFA               	movwf	pclath,c
  3208  0006E2  5033               	movf	_serial_write,w,c
  3209  0006E4  6EFD               	movwf	tosl,c
  3210  0006E6  5034               	movf	_serial_write+1,w,c
  3211  0006E8  6EFE               	movwf	tosh,c
  3212  0006EA  50F8               	movf	tblptru,w,c
  3213  0006EC  6EFF               	movwf	tosu,c
  3214  0006EE  50FA               	movf	pclath,w,c
  3215  0006F0  0100               	movlb	0	; () banked
  3216  0006F2  51E1               	movf	receiveData@crcHolder_1382& (0+255),w,b
  3217  0006F4  0012               	return		;indir
  3218  0006F6                     l4278:
  3219                           
  3220                           ;FastTransfer.c: 199: }
  3221                           ;FastTransfer.c: 202: rx_len = 0;
  3222  0006F6  0E00               	movlw	0
  3223  0006F8  6E41               	movwf	_rx_len,c
  3224                           
  3225                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3226  0006FA  0E00               	movlw	0
  3227  0006FC  6E40               	movwf	_rx_array_inx,c
  3228                           
  3229                           ;FastTransfer.c: 204: return 0;
  3230  0006FE  0E00               	movlw	0
  3231  000700  0012               	return	
  3232  000702                     l4286:
  3233                           
  3234                           ;FastTransfer.c: 205: }
  3235                           ;FastTransfer.c: 206: }
  3236                           ;FastTransfer.c: 207: }
  3237                           ;FastTransfer.c: 210: return 0;
  3238  000702  0E00               	movlw	0
  3239  000704  0012               	return	
  3240  000706                     __end_of_receiveData:
  3241                           	opt stack 0
  3242                           tosu	equ	0xFFF
  3243                           tosh	equ	0xFFE
  3244                           tosl	equ	0xFFD
  3245                           pclath	equ	0xFFA
  3246                           tblptru	equ	0xFF8
  3247                           tblptrh	equ	0xFF7
  3248                           tblptrl	equ	0xFF6
  3249                           tablat	equ	0xFF5
  3250                           prodh	equ	0xFF4
  3251                           prodl	equ	0xFF3
  3252                           intcon	equ	0xFF2
  3253                           postinc0	equ	0xFEE
  3254                           wreg	equ	0xFE8
  3255                           indf2	equ	0xFDF
  3256                           postinc2	equ	0xFDE
  3257                           postdec2	equ	0xFDD
  3258                           plusw2	equ	0xFDB
  3259                           fsr2h	equ	0xFDA
  3260                           fsr2l	equ	0xFD9
  3261                           status	equ	0xFD8
  3262                           
  3263 ;; *************** function _Send_put *****************
  3264 ;; Defined at:
  3265 ;;		line 132 in file "UART.c"
  3266 ;; Parameters:    Size  Location     Type
  3267 ;;  _data           1    wreg     unsigned char 
  3268 ;; Auto vars:     Size  Location     Type
  3269 ;;  _data           1    2[BANK0 ] unsigned char 
  3270 ;; Return value:  Size  Location     Type
  3271 ;;                  1    wreg      void 
  3272 ;; Registers used:
  3273 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3274 ;; Tracked objects:
  3275 ;;		On entry : 0/0
  3276 ;;		On exit  : 0/0
  3277 ;;		Unchanged: 0/0
  3278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3279 ;;      Params:         0       0       0       0       0       0       0
  3280 ;;      Locals:         0       1       0       0       0       0       0
  3281 ;;      Temps:          0       0       0       0       0       0       0
  3282 ;;      Totals:         0       1       0       0       0       0       0
  3283 ;;Total ram usage:        1 bytes
  3284 ;; Hardware stack levels used:    1
  3285 ;; Hardware stack levels required when called:    6
  3286 ;; This function calls:
  3287 ;;		_UART_buff_get
  3288 ;;		_UART_buff_put
  3289 ;; This function is called by:
  3290 ;;		_SYSTEM_Initialize
  3291 ;;		_putch
  3292 ;;		_sendData
  3293 ;;		_receiveData
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text10
  3298  0019A4                     __ptext10:
  3299                           	opt stack 0
  3300  0019A4                     _Send_put:
  3301                           	opt stack 21
  3302                           
  3303                           ;incstack = 0
  3304                           ;Send_put@_data stored from wreg
  3305  0019A4  0100               	movlb	0	; () banked
  3306  0019A6  6FD3               	movwf	Send_put@_data& (0+255),b
  3307                           
  3308                           ;UART.c: 133: UART_buff_put(&output_buffer, _data);
  3309  0019A8  0E00               	movlw	low _output_buffer
  3310  0019AA  6E21               	movwf	UART_buff_put@_this,c
  3311  0019AC  0E04               	movlw	high _output_buffer
  3312  0019AE  6E22               	movwf	UART_buff_put@_this+1,c
  3313  0019B0  C0D3  F023         	movff	Send_put@_data,UART_buff_put@c
  3314  0019B4  ECEF  F004         	call	_UART_buff_put
  3315                           
  3316                           ;UART.c: 134: if (Transmit_stall == 1) {
  3317  0019B8  0444               	decf	_Transmit_stall,w,c
  3318  0019BA  A4D8               	btfss	status,2,c
  3319  0019BC  0012               	return	
  3320                           
  3321                           ;UART.c: 135: Transmit_stall = 0;
  3322  0019BE  0E00               	movlw	0
  3323  0019C0  6E44               	movwf	_Transmit_stall,c
  3324                           
  3325                           ;UART.c: 136: TXREG1 = UART_buff_get(&output_buffer);
  3326  0019C2  0E00               	movlw	low _output_buffer
  3327  0019C4  6E21               	movwf	UART_buff_get@_this,c
  3328  0019C6  0E04               	movlw	high _output_buffer
  3329  0019C8  6E22               	movwf	UART_buff_get@_this+1,c
  3330  0019CA  EC15  F009         	call	_UART_buff_get	;wreg free
  3331  0019CE  6EAD               	movwf	4013,c	;volatile
  3332                           
  3333                           ;UART.c: 137: PIE1bits.TX1IE = 1;
  3334  0019D0  889D               	bsf	3997,4,c	;volatile
  3335  0019D2  0012               	return	
  3336  0019D4                     __end_of_Send_put:
  3337                           	opt stack 0
  3338                           tosu	equ	0xFFF
  3339                           tosh	equ	0xFFE
  3340                           tosl	equ	0xFFD
  3341                           pclath	equ	0xFFA
  3342                           tblptru	equ	0xFF8
  3343                           tblptrh	equ	0xFF7
  3344                           tblptrl	equ	0xFF6
  3345                           tablat	equ	0xFF5
  3346                           prodh	equ	0xFF4
  3347                           prodl	equ	0xFF3
  3348                           intcon	equ	0xFF2
  3349                           postinc0	equ	0xFEE
  3350                           wreg	equ	0xFE8
  3351                           indf2	equ	0xFDF
  3352                           postinc2	equ	0xFDE
  3353                           postdec2	equ	0xFDD
  3354                           plusw2	equ	0xFDB
  3355                           fsr2h	equ	0xFDA
  3356                           fsr2l	equ	0xFD9
  3357                           status	equ	0xFD8
  3358                           
  3359 ;; *************** function _UART_buff_put *****************
  3360 ;; Defined at:
  3361 ;;		line 70 in file "UART.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3364 ;;		 -> output_buffer(206), input_buffer(206), 
  3365 ;;  c               1   34[COMRAM] const unsigned char 
  3366 ;; Auto vars:     Size  Location     Type
  3367 ;;		None
  3368 ;; Return value:  Size  Location     Type
  3369 ;;                  1    wreg      void 
  3370 ;; Registers used:
  3371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3372 ;; Tracked objects:
  3373 ;;		On entry : 0/0
  3374 ;;		On exit  : 0/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3377 ;;      Params:         3       0       0       0       0       0       0
  3378 ;;      Locals:         0       0       0       0       0       0       0
  3379 ;;      Temps:          0       2       0       0       0       0       0
  3380 ;;      Totals:         3       2       0       0       0       0       0
  3381 ;;Total ram usage:        5 bytes
  3382 ;; Hardware stack levels used:    1
  3383 ;; Hardware stack levels required when called:    5
  3384 ;; This function calls:
  3385 ;;		_UART_buff_modulo_inc
  3386 ;; This function is called by:
  3387 ;;		_Send_put
  3388 ;; This function uses a non-reentrant model
  3389 ;;
  3390                           
  3391                           	psect	text11
  3392  0009DE                     __ptext11:
  3393                           	opt stack 0
  3394  0009DE                     _UART_buff_put:
  3395                           	opt stack 21
  3396                           
  3397                           ;UART.c: 71: if (_this->count < 200) {
  3398                           
  3399                           ;incstack = 0
  3400  0009DE  EE20 F0CC          	lfsr	2,204
  3401  0009E2  5021               	movf	UART_buff_put@_this,w,c
  3402  0009E4  26D9               	addwf	fsr2l,f,c
  3403  0009E6  5022               	movf	UART_buff_put@_this+1,w,c
  3404  0009E8  22DA               	addwfc	fsr2h,f,c
  3405  0009EA  0E01               	movlw	1
  3406  0009EC  BEDB               	btfsc	plusw2,7,c
  3407  0009EE  D007               	goto	l3804
  3408  0009F0  0E01               	movlw	1
  3409  0009F2  50DB               	movf	plusw2,w,c
  3410  0009F4  E13C               	bnz	l3810
  3411  0009F6  0EC8               	movlw	200
  3412  0009F8  5CDE               	subwf	postinc2,w,c
  3413  0009FA  B0D8               	btfsc	status,0,c
  3414  0009FC  D038               	goto	l3810
  3415  0009FE                     l3804:
  3416                           
  3417                           ;UART.c: 72: _this->buf[_this->head] = c;
  3418  0009FE  EE20 F0C8          	lfsr	2,200
  3419  000A02  5021               	movf	UART_buff_put@_this,w,c
  3420  000A04  26D9               	addwf	fsr2l,f,c
  3421  000A06  5022               	movf	UART_buff_put@_this+1,w,c
  3422  000A08  22DA               	addwfc	fsr2h,f,c
  3423  000A0A  CFDE F0D1          	movff	postinc2,??_UART_buff_put
  3424  000A0E  CFDD F0D2          	movff	postdec2,??_UART_buff_put+1
  3425  000A12  0100               	movlb	0	; () banked
  3426  000A14  51D1               	movf	??_UART_buff_put& (0+255),w,b
  3427  000A16  2421               	addwf	UART_buff_put@_this,w,c
  3428  000A18  6ED9               	movwf	fsr2l,c
  3429  000A1A  0100               	movlb	0	; () banked
  3430  000A1C  51D2               	movf	(??_UART_buff_put+1)& (0+255),w,b
  3431  000A1E  2022               	addwfc	UART_buff_put@_this+1,w,c
  3432  000A20  6EDA               	movwf	fsr2h,c
  3433  000A22  C023  FFDF         	movff	UART_buff_put@c,indf2
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;UART.c: 73: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3437  000A26  EE20 F0C8          	lfsr	2,200
  3438  000A2A  5021               	movf	UART_buff_put@_this,w,c
  3439  000A2C  26D9               	addwf	fsr2l,f,c
  3440  000A2E  5022               	movf	UART_buff_put@_this+1,w,c
  3441  000A30  22DA               	addwfc	fsr2h,f,c
  3442  000A32  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3443  000A36  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3444  000A3A  0E00               	movlw	0
  3445  000A3C  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3446  000A3E  0EC8               	movlw	200
  3447  000A40  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3448  000A42  EC2D  F00D         	call	_UART_buff_modulo_inc	;wreg free
  3449  000A46  EE20 F0C8          	lfsr	2,200
  3450  000A4A  5021               	movf	UART_buff_put@_this,w,c
  3451  000A4C  26D9               	addwf	fsr2l,f,c
  3452  000A4E  5022               	movf	UART_buff_put@_this+1,w,c
  3453  000A50  22DA               	addwfc	fsr2h,f,c
  3454  000A52  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3455  000A56  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3456                           
  3457                           ;UART.c: 74: ++_this->count;
  3458  000A5A  EE20 F0CC          	lfsr	2,204
  3459  000A5E  5021               	movf	UART_buff_put@_this,w,c
  3460  000A60  26D9               	addwf	fsr2l,f,c
  3461  000A62  5022               	movf	UART_buff_put@_this+1,w,c
  3462  000A64  22DA               	addwfc	fsr2h,f,c
  3463  000A66  2ADE               	incf	postinc2,f,c
  3464  000A68  0E00               	movlw	0
  3465  000A6A  22DD               	addwfc	postdec2,f,c
  3466                           
  3467                           ;UART.c: 75: } else {
  3468  000A6C  0012               	return	
  3469  000A6E                     l3810:
  3470                           
  3471                           ;UART.c: 76: _this->buf[_this->head] = c;
  3472  000A6E  EE20 F0C8          	lfsr	2,200
  3473  000A72  5021               	movf	UART_buff_put@_this,w,c
  3474  000A74  26D9               	addwf	fsr2l,f,c
  3475  000A76  5022               	movf	UART_buff_put@_this+1,w,c
  3476  000A78  22DA               	addwfc	fsr2h,f,c
  3477  000A7A  CFDE F0D1          	movff	postinc2,??_UART_buff_put
  3478  000A7E  CFDD F0D2          	movff	postdec2,??_UART_buff_put+1
  3479  000A82  0100               	movlb	0	; () banked
  3480  000A84  51D1               	movf	??_UART_buff_put& (0+255),w,b
  3481  000A86  2421               	addwf	UART_buff_put@_this,w,c
  3482  000A88  6ED9               	movwf	fsr2l,c
  3483  000A8A  0100               	movlb	0	; () banked
  3484  000A8C  51D2               	movf	(??_UART_buff_put+1)& (0+255),w,b
  3485  000A8E  2022               	addwfc	UART_buff_put@_this+1,w,c
  3486  000A90  6EDA               	movwf	fsr2h,c
  3487  000A92  C023  FFDF         	movff	UART_buff_put@c,indf2
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;UART.c: 77: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3491  000A96  EE20 F0C8          	lfsr	2,200
  3492  000A9A  5021               	movf	UART_buff_put@_this,w,c
  3493  000A9C  26D9               	addwf	fsr2l,f,c
  3494  000A9E  5022               	movf	UART_buff_put@_this+1,w,c
  3495  000AA0  22DA               	addwfc	fsr2h,f,c
  3496  000AA2  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3497  000AA6  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3498  000AAA  0E00               	movlw	0
  3499  000AAC  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3500  000AAE  0EC8               	movlw	200
  3501  000AB0  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3502  000AB2  EC2D  F00D         	call	_UART_buff_modulo_inc	;wreg free
  3503  000AB6  EE20 F0C8          	lfsr	2,200
  3504  000ABA  5021               	movf	UART_buff_put@_this,w,c
  3505  000ABC  26D9               	addwf	fsr2l,f,c
  3506  000ABE  5022               	movf	UART_buff_put@_this+1,w,c
  3507  000AC0  22DA               	addwfc	fsr2h,f,c
  3508  000AC2  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3509  000AC6  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3510                           
  3511                           ;UART.c: 78: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3512  000ACA  EE20 F0CA          	lfsr	2,202
  3513  000ACE  5021               	movf	UART_buff_put@_this,w,c
  3514  000AD0  26D9               	addwf	fsr2l,f,c
  3515  000AD2  5022               	movf	UART_buff_put@_this+1,w,c
  3516  000AD4  22DA               	addwfc	fsr2h,f,c
  3517  000AD6  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3518  000ADA  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3519  000ADE  0E00               	movlw	0
  3520  000AE0  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3521  000AE2  0EC8               	movlw	200
  3522  000AE4  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3523  000AE6  EC2D  F00D         	call	_UART_buff_modulo_inc	;wreg free
  3524  000AEA  EE20 F0CA          	lfsr	2,202
  3525  000AEE  5021               	movf	UART_buff_put@_this,w,c
  3526  000AF0  26D9               	addwf	fsr2l,f,c
  3527  000AF2  5022               	movf	UART_buff_put@_this+1,w,c
  3528  000AF4  22DA               	addwfc	fsr2h,f,c
  3529  000AF6  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3530  000AFA  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3531  000AFE  0012               	return	
  3532  000B00                     __end_of_UART_buff_put:
  3533                           	opt stack 0
  3534                           tosu	equ	0xFFF
  3535                           tosh	equ	0xFFE
  3536                           tosl	equ	0xFFD
  3537                           pclath	equ	0xFFA
  3538                           tblptru	equ	0xFF8
  3539                           tblptrh	equ	0xFF7
  3540                           tblptrl	equ	0xFF6
  3541                           tablat	equ	0xFF5
  3542                           prodh	equ	0xFF4
  3543                           prodl	equ	0xFF3
  3544                           intcon	equ	0xFF2
  3545                           postinc0	equ	0xFEE
  3546                           wreg	equ	0xFE8
  3547                           indf2	equ	0xFDF
  3548                           postinc2	equ	0xFDE
  3549                           postdec2	equ	0xFDD
  3550                           plusw2	equ	0xFDB
  3551                           fsr2h	equ	0xFDA
  3552                           fsr2l	equ	0xFD9
  3553                           status	equ	0xFD8
  3554                           
  3555 ;; *************** function _Receive_get *****************
  3556 ;; Defined at:
  3557 ;;		line 128 in file "UART.c"
  3558 ;; Parameters:    Size  Location     Type
  3559 ;;		None
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;		None
  3562 ;; Return value:  Size  Location     Type
  3563 ;;                  1    wreg      unsigned char 
  3564 ;; Registers used:
  3565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3566 ;; Tracked objects:
  3567 ;;		On entry : 0/0
  3568 ;;		On exit  : 0/0
  3569 ;;		Unchanged: 0/0
  3570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3571 ;;      Params:         0       0       0       0       0       0       0
  3572 ;;      Locals:         0       0       0       0       0       0       0
  3573 ;;      Temps:          0       0       0       0       0       0       0
  3574 ;;      Totals:         0       0       0       0       0       0       0
  3575 ;;Total ram usage:        0 bytes
  3576 ;; Hardware stack levels used:    1
  3577 ;; Hardware stack levels required when called:    6
  3578 ;; This function calls:
  3579 ;;		_UART_buff_get
  3580 ;; This function is called by:
  3581 ;;		_SYSTEM_Initialize
  3582 ;;		_getch
  3583 ;;		_receiveData
  3584 ;;		_CRCcheck
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588                           	psect	text12
  3589  001BF8                     __ptext12:
  3590                           	opt stack 0
  3591  001BF8                     _Receive_get:
  3592                           	opt stack 22
  3593                           
  3594                           ;UART.c: 129: return UART_buff_get(&input_buffer);
  3595                           
  3596                           ;incstack = 0
  3597  001BF8  0E00               	movlw	low _input_buffer
  3598  001BFA  6E21               	movwf	UART_buff_get@_this,c
  3599  001BFC  0E03               	movlw	high _input_buffer
  3600  001BFE  6E22               	movwf	UART_buff_get@_this+1,c
  3601  001C00  EC15  F009         	call	_UART_buff_get	;wreg free
  3602  001C04  0012               	return	
  3603  001C06                     __end_of_Receive_get:
  3604                           	opt stack 0
  3605                           tosu	equ	0xFFF
  3606                           tosh	equ	0xFFE
  3607                           tosl	equ	0xFFD
  3608                           pclath	equ	0xFFA
  3609                           tblptru	equ	0xFF8
  3610                           tblptrh	equ	0xFF7
  3611                           tblptrl	equ	0xFF6
  3612                           tablat	equ	0xFF5
  3613                           prodh	equ	0xFF4
  3614                           prodl	equ	0xFF3
  3615                           intcon	equ	0xFF2
  3616                           postinc0	equ	0xFEE
  3617                           wreg	equ	0xFE8
  3618                           indf2	equ	0xFDF
  3619                           postinc2	equ	0xFDE
  3620                           postdec2	equ	0xFDD
  3621                           plusw2	equ	0xFDB
  3622                           fsr2h	equ	0xFDA
  3623                           fsr2l	equ	0xFD9
  3624                           status	equ	0xFD8
  3625                           
  3626 ;; *************** function _UART_buff_get *****************
  3627 ;; Defined at:
  3628 ;;		line 83 in file "UART.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3631 ;;		 -> output_buffer(206), input_buffer(206), 
  3632 ;; Auto vars:     Size  Location     Type
  3633 ;;  c               1    0[BANK0 ] unsigned char 
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  1    wreg      unsigned char 
  3636 ;; Registers used:
  3637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3643 ;;      Params:         2       0       0       0       0       0       0
  3644 ;;      Locals:         0       1       0       0       0       0       0
  3645 ;;      Temps:          2       0       0       0       0       0       0
  3646 ;;      Totals:         4       1       0       0       0       0       0
  3647 ;;Total ram usage:        5 bytes
  3648 ;; Hardware stack levels used:    1
  3649 ;; Hardware stack levels required when called:    5
  3650 ;; This function calls:
  3651 ;;		_UART_buff_modulo_inc
  3652 ;; This function is called by:
  3653 ;;		_Receive_get
  3654 ;;		_Send_put
  3655 ;; This function uses a non-reentrant model
  3656 ;;
  3657                           
  3658                           	psect	text13
  3659  00122A                     __ptext13:
  3660                           	opt stack 0
  3661  00122A                     _UART_buff_get:
  3662                           	opt stack 21
  3663                           
  3664                           ;UART.c: 84: unsigned char c;
  3665                           ;UART.c: 85: if (_this->count > 0) {
  3666                           
  3667                           ;incstack = 0
  3668  00122A  EE20 F0CC          	lfsr	2,204
  3669  00122E  5021               	movf	UART_buff_get@_this,w,c
  3670  001230  26D9               	addwf	fsr2l,f,c
  3671  001232  5022               	movf	UART_buff_get@_this+1,w,c
  3672  001234  22DA               	addwfc	fsr2h,f,c
  3673  001236  0E01               	movlw	1
  3674  001238  BEDB               	btfsc	plusw2,7,c
  3675  00123A  D03D               	goto	l3824
  3676  00123C  0E01               	movlw	1
  3677  00123E  50DB               	movf	plusw2,w,c
  3678  001240  E103               	bnz	u3110
  3679  001242  04DE               	decf	postinc2,w,c
  3680  001244  A0D8               	btfss	status,0,c
  3681  001246  D037               	goto	l3824
  3682  001248                     u3110:
  3683                           
  3684                           ;UART.c: 86: c = _this->buf[_this->tail];
  3685  001248  EE20 F0CA          	lfsr	2,202
  3686  00124C  5021               	movf	UART_buff_get@_this,w,c
  3687  00124E  26D9               	addwf	fsr2l,f,c
  3688  001250  5022               	movf	UART_buff_get@_this+1,w,c
  3689  001252  22DA               	addwfc	fsr2h,f,c
  3690  001254  CFDE F023          	movff	postinc2,??_UART_buff_get
  3691  001258  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  3692  00125C  5023               	movf	??_UART_buff_get,w,c
  3693  00125E  2421               	addwf	UART_buff_get@_this,w,c
  3694  001260  6ED9               	movwf	fsr2l,c
  3695  001262  5024               	movf	??_UART_buff_get+1,w,c
  3696  001264  2022               	addwfc	UART_buff_get@_this+1,w,c
  3697  001266  6EDA               	movwf	fsr2h,c
  3698  001268  50DF               	movf	indf2,w,c
  3699  00126A  0100               	movlb	0	; () banked
  3700  00126C  6FD1               	movwf	UART_buff_get@c& (0+255),b
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;UART.c: 87: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3704  00126E  EE20 F0CA          	lfsr	2,202
  3705  001272  5021               	movf	UART_buff_get@_this,w,c
  3706  001274  26D9               	addwf	fsr2l,f,c
  3707  001276  5022               	movf	UART_buff_get@_this+1,w,c
  3708  001278  22DA               	addwfc	fsr2h,f,c
  3709  00127A  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3710  00127E  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3711  001282  0E00               	movlw	0
  3712  001284  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3713  001286  0EC8               	movlw	200
  3714  001288  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3715  00128A  EC2D  F00D         	call	_UART_buff_modulo_inc	;wreg free
  3716  00128E  EE20 F0CA          	lfsr	2,202
  3717  001292  5021               	movf	UART_buff_get@_this,w,c
  3718  001294  26D9               	addwf	fsr2l,f,c
  3719  001296  5022               	movf	UART_buff_get@_this+1,w,c
  3720  001298  22DA               	addwfc	fsr2h,f,c
  3721  00129A  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3722  00129E  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3723                           
  3724                           ;UART.c: 88: --_this->count;
  3725  0012A2  EE20 F0CC          	lfsr	2,204
  3726  0012A6  5021               	movf	UART_buff_get@_this,w,c
  3727  0012A8  26D9               	addwf	fsr2l,f,c
  3728  0012AA  5022               	movf	UART_buff_get@_this+1,w,c
  3729  0012AC  22DA               	addwfc	fsr2h,f,c
  3730  0012AE  06DE               	decf	postinc2,f,c
  3731  0012B0  0E00               	movlw	0
  3732  0012B2  5ADD               	subwfb	postdec2,f,c
  3733                           
  3734                           ;UART.c: 89: } else {
  3735  0012B4  D003               	goto	l798
  3736  0012B6                     l3824:
  3737                           
  3738                           ;UART.c: 90: c = 0;
  3739  0012B6  0E00               	movlw	0
  3740  0012B8  0100               	movlb	0	; () banked
  3741  0012BA  6FD1               	movwf	UART_buff_get@c& (0+255),b
  3742  0012BC                     l798:
  3743                           
  3744                           ;UART.c: 91: }
  3745                           ;UART.c: 92: return (c);
  3746  0012BC  0100               	movlb	0	; () banked
  3747  0012BE  51D1               	movf	UART_buff_get@c& (0+255),w,b
  3748  0012C0  0012               	return	
  3749  0012C2                     __end_of_UART_buff_get:
  3750                           	opt stack 0
  3751                           tosu	equ	0xFFF
  3752                           tosh	equ	0xFFE
  3753                           tosl	equ	0xFFD
  3754                           pclath	equ	0xFFA
  3755                           tblptru	equ	0xFF8
  3756                           tblptrh	equ	0xFF7
  3757                           tblptrl	equ	0xFF6
  3758                           tablat	equ	0xFF5
  3759                           prodh	equ	0xFF4
  3760                           prodl	equ	0xFF3
  3761                           intcon	equ	0xFF2
  3762                           postinc0	equ	0xFEE
  3763                           wreg	equ	0xFE8
  3764                           indf2	equ	0xFDF
  3765                           postinc2	equ	0xFDE
  3766                           postdec2	equ	0xFDD
  3767                           plusw2	equ	0xFDB
  3768                           fsr2h	equ	0xFDA
  3769                           fsr2l	equ	0xFD9
  3770                           status	equ	0xFD8
  3771                           
  3772 ;; *************** function _UART_buff_modulo_inc *****************
  3773 ;; Defined at:
  3774 ;;		line 108 in file "UART.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;  value           2   26[COMRAM] const unsigned int 
  3777 ;;  modulus         2   28[COMRAM] const unsigned int 
  3778 ;; Auto vars:     Size  Location     Type
  3779 ;;  my_value        2   30[COMRAM] unsigned int 
  3780 ;; Return value:  Size  Location     Type
  3781 ;;                  2   26[COMRAM] unsigned int 
  3782 ;; Registers used:
  3783 ;;		wreg, status,2, status,0
  3784 ;; Tracked objects:
  3785 ;;		On entry : 0/0
  3786 ;;		On exit  : 0/0
  3787 ;;		Unchanged: 0/0
  3788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3789 ;;      Params:         4       0       0       0       0       0       0
  3790 ;;      Locals:         2       0       0       0       0       0       0
  3791 ;;      Temps:          0       0       0       0       0       0       0
  3792 ;;      Totals:         6       0       0       0       0       0       0
  3793 ;;Total ram usage:        6 bytes
  3794 ;; Hardware stack levels used:    1
  3795 ;; Hardware stack levels required when called:    4
  3796 ;; This function calls:
  3797 ;;		Nothing
  3798 ;; This function is called by:
  3799 ;;		_UART_buff_put
  3800 ;;		_UART_buff_get
  3801 ;; This function uses a non-reentrant model
  3802 ;;
  3803                           
  3804                           	psect	text14
  3805  001A5A                     __ptext14:
  3806                           	opt stack 0
  3807  001A5A                     _UART_buff_modulo_inc:
  3808                           	opt stack 21
  3809                           
  3810                           ;UART.c: 109: unsigned int my_value = value + 1;
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;incstack = 0
  3814  001A5A  0E01               	movlw	1
  3815  001A5C  241B               	addwf	UART_buff_modulo_inc@value,w,c
  3816  001A5E  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  3817  001A60  0E00               	movlw	0
  3818  001A62  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  3819  001A64  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  3820                           
  3821                           ;UART.c: 110: if (my_value >= modulus) {
  3822  001A66  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  3823  001A68  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  3824  001A6A  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  3825  001A6C  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  3826  001A6E  A0D8               	btfss	status,0,c
  3827  001A70  D004               	goto	l3774
  3828                           
  3829                           ;UART.c: 111: my_value = 0;
  3830  001A72  0E00               	movlw	0
  3831  001A74  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  3832  001A76  0E00               	movlw	0
  3833  001A78  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  3834  001A7A                     l3774:
  3835                           
  3836                           ;UART.c: 112: }
  3837                           ;UART.c: 113: return (my_value);
  3838  001A7A  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  3839  001A7E  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  3840  001A82  0012               	return	
  3841  001A84                     __end_of_UART_buff_modulo_inc:
  3842                           	opt stack 0
  3843                           tosu	equ	0xFFF
  3844                           tosh	equ	0xFFE
  3845                           tosl	equ	0xFFD
  3846                           pclath	equ	0xFFA
  3847                           tblptru	equ	0xFF8
  3848                           tblptrh	equ	0xFF7
  3849                           tblptrl	equ	0xFF6
  3850                           tablat	equ	0xFF5
  3851                           prodh	equ	0xFF4
  3852                           prodl	equ	0xFF3
  3853                           intcon	equ	0xFF2
  3854                           postinc0	equ	0xFEE
  3855                           wreg	equ	0xFE8
  3856                           indf2	equ	0xFDF
  3857                           postinc2	equ	0xFDE
  3858                           postdec2	equ	0xFDD
  3859                           plusw2	equ	0xFDB
  3860                           fsr2h	equ	0xFDA
  3861                           fsr2l	equ	0xFD9
  3862                           status	equ	0xFD8
  3863                           
  3864 ;; *************** function _Receive_available *****************
  3865 ;; Defined at:
  3866 ;;		line 124 in file "UART.c"
  3867 ;; Parameters:    Size  Location     Type
  3868 ;;		None
  3869 ;; Auto vars:     Size  Location     Type
  3870 ;;		None
  3871 ;; Return value:  Size  Location     Type
  3872 ;;                  2   28[COMRAM] int 
  3873 ;; Registers used:
  3874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3875 ;; Tracked objects:
  3876 ;;		On entry : 0/0
  3877 ;;		On exit  : 0/0
  3878 ;;		Unchanged: 0/0
  3879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3880 ;;      Params:         2       0       0       0       0       0       0
  3881 ;;      Locals:         0       0       0       0       0       0       0
  3882 ;;      Temps:          0       0       0       0       0       0       0
  3883 ;;      Totals:         2       0       0       0       0       0       0
  3884 ;;Total ram usage:        2 bytes
  3885 ;; Hardware stack levels used:    1
  3886 ;; Hardware stack levels required when called:    5
  3887 ;; This function calls:
  3888 ;;		_UART_buff_size
  3889 ;; This function is called by:
  3890 ;;		_SYSTEM_Initialize
  3891 ;;		_receiveData
  3892 ;;		_CRCcheck
  3893 ;; This function uses a non-reentrant model
  3894 ;;
  3895                           
  3896                           	psect	text15
  3897  001B68                     __ptext15:
  3898                           	opt stack 0
  3899  001B68                     _Receive_available:
  3900                           	opt stack 23
  3901                           
  3902                           ;UART.c: 125: return UART_buff_size(&input_buffer);
  3903                           
  3904                           ;incstack = 0
  3905  001B68  0E00               	movlw	low _input_buffer
  3906  001B6A  6E1B               	movwf	UART_buff_size@_this,c
  3907  001B6C  0E03               	movlw	high _input_buffer
  3908  001B6E  6E1C               	movwf	UART_buff_size@_this+1,c
  3909  001B70  ECBF  F00D         	call	_UART_buff_size	;wreg free
  3910  001B74  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  3911  001B78  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  3912  001B7C  0012               	return	
  3913  001B7E                     __end_of_Receive_available:
  3914                           	opt stack 0
  3915                           tosu	equ	0xFFF
  3916                           tosh	equ	0xFFE
  3917                           tosl	equ	0xFFD
  3918                           pclath	equ	0xFFA
  3919                           tblptru	equ	0xFF8
  3920                           tblptrh	equ	0xFF7
  3921                           tblptrl	equ	0xFF6
  3922                           tablat	equ	0xFF5
  3923                           prodh	equ	0xFF4
  3924                           prodl	equ	0xFF3
  3925                           intcon	equ	0xFF2
  3926                           postinc0	equ	0xFEE
  3927                           wreg	equ	0xFE8
  3928                           indf2	equ	0xFDF
  3929                           postinc2	equ	0xFDE
  3930                           postdec2	equ	0xFDD
  3931                           plusw2	equ	0xFDB
  3932                           fsr2h	equ	0xFDA
  3933                           fsr2l	equ	0xFD9
  3934                           status	equ	0xFD8
  3935                           
  3936 ;; *************** function _UART_buff_size *****************
  3937 ;; Defined at:
  3938 ;;		line 104 in file "UART.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3941 ;;		 -> output_buffer(206), input_buffer(206), 
  3942 ;; Auto vars:     Size  Location     Type
  3943 ;;		None
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  2   26[COMRAM] int 
  3946 ;; Registers used:
  3947 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3953 ;;      Params:         2       0       0       0       0       0       0
  3954 ;;      Locals:         0       0       0       0       0       0       0
  3955 ;;      Temps:          0       0       0       0       0       0       0
  3956 ;;      Totals:         2       0       0       0       0       0       0
  3957 ;;Total ram usage:        2 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    4
  3960 ;; This function calls:
  3961 ;;		Nothing
  3962 ;; This function is called by:
  3963 ;;		_Receive_available
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           	psect	text16
  3968  001B7E                     __ptext16:
  3969                           	opt stack 0
  3970  001B7E                     _UART_buff_size:
  3971                           	opt stack 23
  3972                           
  3973                           ;UART.c: 105: return (_this->count);
  3974                           
  3975                           ;incstack = 0
  3976  001B7E  EE20 F0CC          	lfsr	2,204
  3977  001B82  501B               	movf	UART_buff_size@_this,w,c
  3978  001B84  26D9               	addwf	fsr2l,f,c
  3979  001B86  501C               	movf	UART_buff_size@_this+1,w,c
  3980  001B88  22DA               	addwfc	fsr2h,f,c
  3981  001B8A  CFDE F01B          	movff	postinc2,?_UART_buff_size
  3982  001B8E  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  3983  001B92  0012               	return	
  3984  001B94                     __end_of_UART_buff_size:
  3985                           	opt stack 0
  3986                           tosu	equ	0xFFF
  3987                           tosh	equ	0xFFE
  3988                           tosl	equ	0xFFD
  3989                           pclath	equ	0xFFA
  3990                           tblptru	equ	0xFF8
  3991                           tblptrh	equ	0xFF7
  3992                           tblptrl	equ	0xFF6
  3993                           tablat	equ	0xFF5
  3994                           prodh	equ	0xFF4
  3995                           prodl	equ	0xFF3
  3996                           intcon	equ	0xFF2
  3997                           postinc0	equ	0xFEE
  3998                           wreg	equ	0xFE8
  3999                           indf2	equ	0xFDF
  4000                           postinc2	equ	0xFDE
  4001                           postdec2	equ	0xFDD
  4002                           plusw2	equ	0xFDB
  4003                           fsr2h	equ	0xFDA
  4004                           fsr2l	equ	0xFD9
  4005                           status	equ	0xFD8
  4006                           
  4007 ;; *************** function _CRC8 *****************
  4008 ;; Defined at:
  4009 ;;		line 34 in file "FastTransfer.c"
  4010 ;; Parameters:    Size  Location     Type
  4011 ;;  data            2   26[COMRAM] PTR const unsigned char 
  4012 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_1381(3), receiveData@holder(3), 
  4013 ;;		 -> rx_buffer(200), ring_buffer(206), 
  4014 ;;  len             1   28[COMRAM] unsigned char 
  4015 ;; Auto vars:     Size  Location     Type
  4016 ;;  sum             1   29[COMRAM] unsigned char 
  4017 ;;  tempI           1   31[COMRAM] unsigned char 
  4018 ;;  extract         1   30[COMRAM] unsigned char 
  4019 ;;  crc             1   32[COMRAM] unsigned char 
  4020 ;; Return value:  Size  Location     Type
  4021 ;;                  1    wreg      unsigned char 
  4022 ;; Registers used:
  4023 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4024 ;; Tracked objects:
  4025 ;;		On entry : 0/0
  4026 ;;		On exit  : 0/0
  4027 ;;		Unchanged: 0/0
  4028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4029 ;;      Params:         3       0       0       0       0       0       0
  4030 ;;      Locals:         4       0       0       0       0       0       0
  4031 ;;      Temps:          0       0       0       0       0       0       0
  4032 ;;      Totals:         7       0       0       0       0       0       0
  4033 ;;Total ram usage:        7 bytes
  4034 ;; Hardware stack levels used:    1
  4035 ;; Hardware stack levels required when called:    4
  4036 ;; This function calls:
  4037 ;;		Nothing
  4038 ;; This function is called by:
  4039 ;;		_sendData
  4040 ;;		_receiveData
  4041 ;;		_CRCcheck
  4042 ;; This function uses a non-reentrant model
  4043 ;;
  4044                           
  4045                           	psect	text17
  4046  0017F2                     __ptext17:
  4047                           	opt stack 0
  4048  0017F2                     _CRC8:
  4049                           	opt stack 23
  4050                           
  4051                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  4052                           
  4053                           ;incstack = 0
  4054  0017F2  0E00               	movlw	0
  4055  0017F4  6E21               	movwf	CRC8@crc,c
  4056                           
  4057                           ;FastTransfer.c: 36: while (len--) {
  4058  0017F6  D01C               	goto	l3846
  4059  0017F8                     l3830:
  4060                           
  4061                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  4062  0017F8  C01B  FFD9         	movff	CRC8@data,fsr2l
  4063  0017FC  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  4064  001800  50DF               	movf	indf2,w,c
  4065  001802  6E1F               	movwf	CRC8@extract,c
  4066  001804  4A1B               	infsnz	CRC8@data,f,c
  4067  001806  2A1C               	incf	CRC8@data+1,f,c
  4068                           
  4069                           ;FastTransfer.c: 38: unsigned char tempI;
  4070                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  4071  001808  0E08               	movlw	8
  4072  00180A  6E20               	movwf	CRC8@tempI,c
  4073  00180C  D00E               	goto	l3844
  4074  00180E                     l3836:
  4075                           
  4076                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  4077  00180E  5021               	movf	CRC8@crc,w,c
  4078  001810  181F               	xorwf	CRC8@extract,w,c
  4079  001812  0B01               	andlw	1
  4080  001814  6E1E               	movwf	CRC8@sum,c
  4081                           
  4082                           ;FastTransfer.c: 41: crc >>= 1;
  4083  001816  90D8               	bcf	status,0,c
  4084  001818  3221               	rrcf	CRC8@crc,f,c
  4085                           
  4086                           ;FastTransfer.c: 42: if (sum) {
  4087  00181A  501E               	movf	CRC8@sum,w,c
  4088  00181C  B4D8               	btfsc	status,2,c
  4089  00181E  D002               	goto	l480
  4090                           
  4091                           ;FastTransfer.c: 43: crc ^= 0x8C;
  4092  001820  0E8C               	movlw	140
  4093  001822  1A21               	xorwf	CRC8@crc,f,c
  4094  001824                     l480:
  4095                           
  4096                           ;FastTransfer.c: 44: }
  4097                           ;FastTransfer.c: 45: extract >>= 1;
  4098  001824  90D8               	bcf	status,0,c
  4099  001826  321F               	rrcf	CRC8@extract,f,c
  4100  001828  0620               	decf	CRC8@tempI,f,c
  4101  00182A                     l3844:
  4102  00182A  5020               	movf	CRC8@tempI,w,c
  4103  00182C  A4D8               	btfss	status,2,c
  4104  00182E  D7EF               	goto	l3836
  4105  001830                     l3846:
  4106  001830  061D               	decf	CRC8@len,f,c
  4107  001832  281D               	incf	CRC8@len,w,c
  4108  001834  A4D8               	btfss	status,2,c
  4109  001836  D7E0               	goto	l3830
  4110                           
  4111                           ;FastTransfer.c: 46: }
  4112                           ;FastTransfer.c: 47: }
  4113                           ;FastTransfer.c: 48: return crc;
  4114  001838  5021               	movf	CRC8@crc,w,c
  4115  00183A  0012               	return	
  4116  00183C                     __end_of_CRC8:
  4117                           	opt stack 0
  4118                           tosu	equ	0xFFF
  4119                           tosh	equ	0xFFE
  4120                           tosl	equ	0xFFD
  4121                           pclath	equ	0xFFA
  4122                           tblptru	equ	0xFF8
  4123                           tblptrh	equ	0xFF7
  4124                           tblptrl	equ	0xFF6
  4125                           tablat	equ	0xFF5
  4126                           prodh	equ	0xFF4
  4127                           prodl	equ	0xFF3
  4128                           intcon	equ	0xFF2
  4129                           postinc0	equ	0xFEE
  4130                           wreg	equ	0xFE8
  4131                           indf2	equ	0xFDF
  4132                           postinc2	equ	0xFDE
  4133                           postdec2	equ	0xFDD
  4134                           plusw2	equ	0xFDB
  4135                           fsr2h	equ	0xFDA
  4136                           fsr2l	equ	0xFD9
  4137                           status	equ	0xFD8
  4138                           
  4139 ;; *************** function _processPowerRequest *****************
  4140 ;; Defined at:
  4141 ;;		line 33 in file "Communications.c"
  4142 ;; Parameters:    Size  Location     Type
  4143 ;;  powerSet        2    4[BANK0 ] int 
  4144 ;; Auto vars:     Size  Location     Type
  4145 ;;		None
  4146 ;; Return value:  Size  Location     Type
  4147 ;;                  1    wreg      void 
  4148 ;; Registers used:
  4149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4150 ;; Tracked objects:
  4151 ;;		On entry : 0/0
  4152 ;;		On exit  : 0/0
  4153 ;;		Unchanged: 0/0
  4154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4155 ;;      Params:         0       2       0       0       0       0       0
  4156 ;;      Locals:         0       0       0       0       0       0       0
  4157 ;;      Temps:          0       0       0       0       0       0       0
  4158 ;;      Totals:         0       2       0       0       0       0       0
  4159 ;;Total ram usage:        2 bytes
  4160 ;; Hardware stack levels used:    1
  4161 ;; Hardware stack levels required when called:    7
  4162 ;; This function calls:
  4163 ;;		_EnableSlavePower
  4164 ;;		_Update
  4165 ;; This function is called by:
  4166 ;;		_updateComms
  4167 ;; This function uses a non-reentrant model
  4168 ;;
  4169                           
  4170                           	psect	text18
  4171  0010A0                     __ptext18:
  4172                           	opt stack 0
  4173  0010A0                     _processPowerRequest:
  4174                           	opt stack 22
  4175                           
  4176                           ;Communications.c: 35: if (powerSet & 0x01) EnableSlavePower(BMM, ON);
  4177                           
  4178                           ;incstack = 0
  4179  0010A0  0100               	movlb	0	; () banked
  4180  0010A2  A1D5               	btfss	processPowerRequest@powerSet& (0+255),0,b
  4181  0010A4  D009               	goto	l4294
  4182                           
  4183                           ; BSR set to: 0
  4184  0010A6  0E00               	movlw	0
  4185  0010A8  0100               	movlb	0	; () banked
  4186  0010AA  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4187  0010AC  0E01               	movlw	1
  4188  0010AE  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4189  0010B0  0E04               	movlw	4
  4190  0010B2  EC97  F006         	call	_EnableSlavePower
  4191  0010B6  D008               	goto	l4296
  4192  0010B8                     l4294:
  4193                           
  4194                           ;Communications.c: 36: else EnableSlavePower(BMM, OFF);
  4195  0010B8  0E00               	movlw	0
  4196  0010BA  0100               	movlb	0	; () banked
  4197  0010BC  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4198  0010BE  0E00               	movlw	0
  4199  0010C0  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4200  0010C2  0E04               	movlw	4
  4201  0010C4  EC97  F006         	call	_EnableSlavePower
  4202  0010C8                     l4296:
  4203                           
  4204                           ;Communications.c: 37: if (powerSet & 0x02) EnableSlavePower(MCS, ON);
  4205  0010C8  0100               	movlb	0	; () banked
  4206  0010CA  A3D5               	btfss	processPowerRequest@powerSet& (0+255),1,b
  4207  0010CC  D009               	goto	l4300
  4208                           
  4209                           ; BSR set to: 0
  4210  0010CE  0E00               	movlw	0
  4211  0010D0  0100               	movlb	0	; () banked
  4212  0010D2  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4213  0010D4  0E01               	movlw	1
  4214  0010D6  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4215  0010D8  0E02               	movlw	2
  4216  0010DA  EC97  F006         	call	_EnableSlavePower
  4217  0010DE  D008               	goto	l4302
  4218  0010E0                     l4300:
  4219                           
  4220                           ;Communications.c: 38: else EnableSlavePower(MCS,OFF);
  4221  0010E0  0E00               	movlw	0
  4222  0010E2  0100               	movlb	0	; () banked
  4223  0010E4  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4224  0010E6  0E00               	movlw	0
  4225  0010E8  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4226  0010EA  0E02               	movlw	2
  4227  0010EC  EC97  F006         	call	_EnableSlavePower
  4228  0010F0                     l4302:
  4229                           
  4230                           ;Communications.c: 39: if (powerSet & 0x04) EnableSlavePower(DDS,ON);
  4231  0010F0  0100               	movlb	0	; () banked
  4232  0010F2  A5D5               	btfss	processPowerRequest@powerSet& (0+255),2,b
  4233  0010F4  D009               	goto	l4306
  4234                           
  4235                           ; BSR set to: 0
  4236  0010F6  0E00               	movlw	0
  4237  0010F8  0100               	movlb	0	; () banked
  4238  0010FA  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4239  0010FC  0E01               	movlw	1
  4240  0010FE  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4241  001100  0E01               	movlw	1
  4242  001102  EC97  F006         	call	_EnableSlavePower
  4243  001106  D008               	goto	l4308
  4244  001108                     l4306:
  4245                           
  4246                           ;Communications.c: 40: else EnableSlavePower(DDS,OFF);
  4247  001108  0E00               	movlw	0
  4248  00110A  0100               	movlb	0	; () banked
  4249  00110C  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4250  00110E  0E00               	movlw	0
  4251  001110  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4252  001112  0E01               	movlw	1
  4253  001114  EC97  F006         	call	_EnableSlavePower
  4254  001118                     l4308:
  4255                           
  4256                           ;Communications.c: 41: if(powerSet & 0x08) EnableSlavePower(SAS,ON);
  4257  001118  0100               	movlb	0	; () banked
  4258  00111A  A7D5               	btfss	processPowerRequest@powerSet& (0+255),3,b
  4259  00111C  D009               	goto	l4312
  4260                           
  4261                           ; BSR set to: 0
  4262  00111E  0E00               	movlw	0
  4263  001120  0100               	movlb	0	; () banked
  4264  001122  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4265  001124  0E01               	movlw	1
  4266  001126  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4267  001128  0E03               	movlw	3
  4268  00112A  EC97  F006         	call	_EnableSlavePower
  4269  00112E  D008               	goto	l4314
  4270  001130                     l4312:
  4271                           
  4272                           ;Communications.c: 42: else EnableSlavePower(SAS,OFF);
  4273  001130  0E00               	movlw	0
  4274  001132  0100               	movlb	0	; () banked
  4275  001134  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4276  001136  0E00               	movlw	0
  4277  001138  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4278  00113A  0E03               	movlw	3
  4279  00113C  EC97  F006         	call	_EnableSlavePower
  4280  001140                     l4314:
  4281                           
  4282                           ;Communications.c: 43: if(powerSet & 0x10) EnableSlavePower(TSS, ON);
  4283  001140  0100               	movlb	0	; () banked
  4284  001142  A9D5               	btfss	processPowerRequest@powerSet& (0+255),4,b
  4285  001144  D009               	goto	l4318
  4286                           
  4287                           ; BSR set to: 0
  4288  001146  0E00               	movlw	0
  4289  001148  0100               	movlb	0	; () banked
  4290  00114A  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4291  00114C  0E01               	movlw	1
  4292  00114E  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4293  001150  0E05               	movlw	5
  4294  001152  EC97  F006         	call	_EnableSlavePower
  4295  001156  D008               	goto	l408
  4296  001158                     l4318:
  4297                           
  4298                           ;Communications.c: 44: else EnableSlavePower(TSS,OFF);
  4299  001158  0E00               	movlw	0
  4300  00115A  0100               	movlb	0	; () banked
  4301  00115C  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4302  00115E  0E00               	movlw	0
  4303  001160  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4304  001162  0E05               	movlw	5
  4305  001164  EC97  F006         	call	_EnableSlavePower
  4306  001168                     l408:
  4307                           
  4308                           ;Communications.c: 45: Update();
  4309  001168  EC0F  F00E         	call	_Update	;wreg free
  4310  00116C  0012               	return		;funcret
  4311  00116E                     __end_of_processPowerRequest:
  4312                           	opt stack 0
  4313                           tosu	equ	0xFFF
  4314                           tosh	equ	0xFFE
  4315                           tosl	equ	0xFFD
  4316                           pclath	equ	0xFFA
  4317                           tblptru	equ	0xFF8
  4318                           tblptrh	equ	0xFF7
  4319                           tblptrl	equ	0xFF6
  4320                           tablat	equ	0xFF5
  4321                           prodh	equ	0xFF4
  4322                           prodl	equ	0xFF3
  4323                           intcon	equ	0xFF2
  4324                           postinc0	equ	0xFEE
  4325                           wreg	equ	0xFE8
  4326                           indf2	equ	0xFDF
  4327                           postinc2	equ	0xFDE
  4328                           postdec2	equ	0xFDD
  4329                           plusw2	equ	0xFDB
  4330                           fsr2h	equ	0xFDA
  4331                           fsr2l	equ	0xFD9
  4332                           status	equ	0xFD8
  4333                           
  4334 ;; *************** function _SYSTEM_Initialize *****************
  4335 ;; Defined at:
  4336 ;;		line 113 in file "mcc_generated_files/mcc.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;		None
  4339 ;; Auto vars:     Size  Location     Type
  4340 ;;		None
  4341 ;; Return value:  Size  Location     Type
  4342 ;;                  1    wreg      void 
  4343 ;; Registers used:
  4344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4345 ;; Tracked objects:
  4346 ;;		On entry : 0/0
  4347 ;;		On exit  : 0/0
  4348 ;;		Unchanged: 0/0
  4349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4350 ;;      Params:         0       0       0       0       0       0       0
  4351 ;;      Locals:         0       0       0       0       0       0       0
  4352 ;;      Temps:          0       0       0       0       0       0       0
  4353 ;;      Totals:         0       0       0       0       0       0       0
  4354 ;;Total ram usage:        0 bytes
  4355 ;; Hardware stack levels used:    1
  4356 ;; Hardware stack levels required when called:    7
  4357 ;; This function calls:
  4358 ;;		_ADC_Initialize
  4359 ;;		_EUSART1_Initialize
  4360 ;;		_INTERRUPT_Initialize
  4361 ;;		_OSCILLATOR_Initialize
  4362 ;;		_PIN_MANAGER_Initialize
  4363 ;;		_PWM4_Initialize
  4364 ;;		_TMR1_Initialize
  4365 ;;		_TMR2_Initialize
  4366 ;;		_begin
  4367 ;; This function is called by:
  4368 ;;		_main
  4369 ;; This function uses a non-reentrant model
  4370 ;;
  4371                           
  4372                           	psect	text19
  4373  0014E4                     __ptext19:
  4374                           	opt stack 0
  4375  0014E4                     _SYSTEM_Initialize:
  4376                           	opt stack 23
  4377                           
  4378                           ;mcc.c: 114: OSCILLATOR_Initialize();
  4379                           
  4380                           ;incstack = 0
  4381  0014E4  EC03  F00E         	call	_OSCILLATOR_Initialize	;wreg free
  4382                           
  4383                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  4384  0014E8  EC35  F00A         	call	_PIN_MANAGER_Initialize	;wreg free
  4385                           
  4386                           ;mcc.c: 116: INTERRUPT_Initialize();
  4387  0014EC  EC0A  F00E         	call	_INTERRUPT_Initialize	;wreg free
  4388                           
  4389                           ;mcc.c: 117: EUSART1_Initialize();
  4390  0014F0  EC62  F00C         	call	_EUSART1_Initialize	;wreg free
  4391                           
  4392                           ;mcc.c: 118: begin(receiveArray, sizeof (receiveArray), 5, 0, Send_put, Receive_get, Rec
      +                          eive_available, Receive_peek);
  4393  0014F4  0E98               	movlw	low _receiveArray
  4394  0014F6  0100               	movlb	0	; () banked
  4395  0014F8  6FD1               	movwf	begin@ptr& (0+255),b
  4396  0014FA  0E00               	movlw	high _receiveArray
  4397  0014FC  0100               	movlb	0	; () banked
  4398  0014FE  6FD2               	movwf	(begin@ptr+1)& (0+255),b
  4399  001500  0E28               	movlw	40
  4400  001502  0100               	movlb	0	; () banked
  4401  001504  6FD3               	movwf	begin@maxSize& (0+255),b
  4402  001506  0E05               	movlw	5
  4403  001508  0100               	movlb	0	; () banked
  4404  00150A  6FD4               	movwf	begin@givenAddress& (0+255),b
  4405  00150C  0E00               	movlw	0
  4406  00150E  0100               	movlb	0	; () banked
  4407  001510  6FD5               	movwf	begin@error& (0+255),b
  4408  001512  0EA4               	movlw	low _Send_put
  4409  001514  0100               	movlb	0	; () banked
  4410  001516  6FD6               	movwf	begin@stufftosend& (0+255),b
  4411  001518  0E19               	movlw	high _Send_put
  4412  00151A  0100               	movlb	0	; () banked
  4413  00151C  6FD7               	movwf	(begin@stufftosend+1)& (0+255),b
  4414  00151E  0EF8               	movlw	low _Receive_get
  4415  001520  0100               	movlb	0	; () banked
  4416  001522  6FD8               	movwf	begin@stufftoreceive& (0+255),b
  4417  001524  0E1B               	movlw	high _Receive_get
  4418  001526  0100               	movlb	0	; () banked
  4419  001528  6FD9               	movwf	(begin@stufftoreceive+1)& (0+255),b
  4420  00152A  0E68               	movlw	low _Receive_available
  4421  00152C  0100               	movlb	0	; () banked
  4422  00152E  6FDA               	movwf	begin@stuffavailable& (0+255),b
  4423  001530  0E1B               	movlw	high _Receive_available
  4424  001532  0100               	movlb	0	; () banked
  4425  001534  6FDB               	movwf	(begin@stuffavailable+1)& (0+255),b
  4426  001536  0E00               	movlw	0
  4427  001538  0100               	movlb	0	; () banked
  4428  00153A  6FDC               	movwf	begin@stuffpeek& (0+255),b
  4429  00153C  0E00               	movlw	0
  4430  00153E  0100               	movlb	0	; () banked
  4431  001540  6FDD               	movwf	(begin@stuffpeek+1)& (0+255),b
  4432  001542  EC7D  F00B         	call	_begin	;wreg free
  4433                           
  4434                           ;mcc.c: 119: PWM4_Initialize();
  4435  001546  ECDF  F00D         	call	_PWM4_Initialize	;wreg free
  4436                           
  4437                           ;mcc.c: 120: TMR1_Initialize();
  4438  00154A  EC68  F00D         	call	_TMR1_Initialize	;wreg free
  4439                           
  4440                           ;mcc.c: 121: TMR2_Initialize();
  4441  00154E  ECD5  F00D         	call	_TMR2_Initialize	;wreg free
  4442                           
  4443                           ;mcc.c: 122: LATB4 = 1;
  4444  001552  888A               	bsf	3978,4,c	;volatile
  4445                           
  4446                           ;mcc.c: 123: ADC_Initialize();
  4447  001554  ECA8  F00D         	call	_ADC_Initialize	;wreg free
  4448  001558  0012               	return		;funcret
  4449  00155A                     __end_of_SYSTEM_Initialize:
  4450                           	opt stack 0
  4451                           tosu	equ	0xFFF
  4452                           tosh	equ	0xFFE
  4453                           tosl	equ	0xFFD
  4454                           pclath	equ	0xFFA
  4455                           tblptru	equ	0xFF8
  4456                           tblptrh	equ	0xFF7
  4457                           tblptrl	equ	0xFF6
  4458                           tablat	equ	0xFF5
  4459                           prodh	equ	0xFF4
  4460                           prodl	equ	0xFF3
  4461                           intcon	equ	0xFF2
  4462                           postinc0	equ	0xFEE
  4463                           wreg	equ	0xFE8
  4464                           indf2	equ	0xFDF
  4465                           postinc2	equ	0xFDE
  4466                           postdec2	equ	0xFDD
  4467                           plusw2	equ	0xFDB
  4468                           fsr2h	equ	0xFDA
  4469                           fsr2l	equ	0xFD9
  4470                           status	equ	0xFD8
  4471                           
  4472 ;; *************** function _begin *****************
  4473 ;; Defined at:
  4474 ;;		line 18 in file "FastTransfer.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  4477 ;;		 -> receiveArray(40), 
  4478 ;;  maxSize         1    2[BANK0 ] unsigned char 
  4479 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  4480 ;;  error           1    4[BANK0 ] unsigned char 
  4481 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  4482 ;;		 -> Send_put(1), 
  4483 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  4484 ;;		 -> Receive_get(1), 
  4485 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  4486 ;;		 -> Receive_available(2), 
  4487 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  4488 ;;		 -> Receive_peek(1), 
  4489 ;; Auto vars:     Size  Location     Type
  4490 ;;		None
  4491 ;; Return value:  Size  Location     Type
  4492 ;;                  1    wreg      void 
  4493 ;; Registers used:
  4494 ;;		wreg, status,2, status,0, cstack
  4495 ;; Tracked objects:
  4496 ;;		On entry : 0/0
  4497 ;;		On exit  : 0/0
  4498 ;;		Unchanged: 0/0
  4499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4500 ;;      Params:         0      13       0       0       0       0       0
  4501 ;;      Locals:         0       0       0       0       0       0       0
  4502 ;;      Temps:          0       0       0       0       0       0       0
  4503 ;;      Totals:         0      13       0       0       0       0       0
  4504 ;;Total ram usage:       13 bytes
  4505 ;; Hardware stack levels used:    1
  4506 ;; Hardware stack levels required when called:    5
  4507 ;; This function calls:
  4508 ;;		___awdiv
  4509 ;; This function is called by:
  4510 ;;		_SYSTEM_Initialize
  4511 ;; This function uses a non-reentrant model
  4512 ;;
  4513                           
  4514                           	psect	text20
  4515  0016FA                     __ptext20:
  4516                           	opt stack 0
  4517  0016FA                     _begin:
  4518                           	opt stack 24
  4519                           
  4520                           ;FastTransfer.c: 19: receiveArrayAddress = ptr;
  4521                           
  4522                           ;incstack = 0
  4523  0016FA  C0D1  F029         	movff	begin@ptr,_receiveArrayAddress
  4524  0016FE  C0D2  F02A         	movff	begin@ptr+1,_receiveArrayAddress+1
  4525                           
  4526                           ;FastTransfer.c: 20: moduleAddress = givenAddress;
  4527  001702  C0D4  F03D         	movff	begin@givenAddress,_moduleAddress
  4528                           
  4529                           ;FastTransfer.c: 21: serial_write = stufftosend;
  4530  001706  C0D6  F033         	movff	begin@stufftosend,_serial_write
  4531  00170A  C0D7  F034         	movff	begin@stufftosend+1,_serial_write+1
  4532                           
  4533                           ;FastTransfer.c: 22: serial_available = stuffavailable;
  4534  00170E  C0DA  F02D         	movff	begin@stuffavailable,_serial_available
  4535  001712  C0DB  F02E         	movff	begin@stuffavailable+1,_serial_available+1
  4536                           
  4537                           ;FastTransfer.c: 23: serial_peek = stuffpeek;
  4538  001716  C0DC  F02F         	movff	begin@stuffpeek,_serial_peek
  4539  00171A  C0DD  F030         	movff	begin@stuffpeek+1,_serial_peek+1
  4540                           
  4541                           ;FastTransfer.c: 24: serial_read = stufftoreceive;
  4542  00171E  C0D8  F031         	movff	begin@stufftoreceive,_serial_read
  4543  001722  C0D9  F032         	movff	begin@stufftoreceive+1,_serial_read+1
  4544                           
  4545                           ;FastTransfer.c: 25: maxDataAddress = maxSize / 2;
  4546  001726  C0D3  F01B         	movff	begin@maxSize,___awdiv@dividend
  4547  00172A  6A1C               	clrf	___awdiv@dividend+1,c
  4548  00172C  0E00               	movlw	0
  4549  00172E  6E1E               	movwf	___awdiv@divisor+1,c
  4550  001730  0E02               	movlw	2
  4551  001732  6E1D               	movwf	___awdiv@divisor,c
  4552  001734  ECF3  F009         	call	___awdiv	;wreg free
  4553  001738  501B               	movf	?___awdiv,w,c
  4554  00173A  6E3C               	movwf	_maxDataAddress,c
  4555                           
  4556                           ;FastTransfer.c: 26: sendStructAddress = (unsigned char*) & ring_buffer;
  4557  00173C  0E30               	movlw	low _ring_buffer
  4558  00173E  6E2B               	movwf	_sendStructAddress,c
  4559  001740  0E01               	movlw	high _ring_buffer
  4560  001742  6E2C               	movwf	_sendStructAddress+1,c
  4561                           
  4562                           ;FastTransfer.c: 27: AKNAKsend = error;
  4563  001744  C0D5  F039         	movff	begin@error,_AKNAKsend
  4564                           
  4565                           ;FastTransfer.c: 28: alignErrorCounter = 0;
  4566  001748  0E00               	movlw	0
  4567  00174A  0100               	movlb	0	; () banked
  4568  00174C  6F93               	movwf	(_alignErrorCounter+1)& (0+255),b
  4569  00174E  0E00               	movlw	0
  4570  001750  6F92               	movwf	_alignErrorCounter& (0+255),b
  4571                           
  4572                           ; BSR set to: 0
  4573  001752  0012               	return		;funcret
  4574  001754                     __end_of_begin:
  4575                           	opt stack 0
  4576                           tosu	equ	0xFFF
  4577                           tosh	equ	0xFFE
  4578                           tosl	equ	0xFFD
  4579                           pclath	equ	0xFFA
  4580                           tblptru	equ	0xFF8
  4581                           tblptrh	equ	0xFF7
  4582                           tblptrl	equ	0xFF6
  4583                           tablat	equ	0xFF5
  4584                           prodh	equ	0xFF4
  4585                           prodl	equ	0xFF3
  4586                           intcon	equ	0xFF2
  4587                           postinc0	equ	0xFEE
  4588                           wreg	equ	0xFE8
  4589                           indf2	equ	0xFDF
  4590                           postinc2	equ	0xFDE
  4591                           postdec2	equ	0xFDD
  4592                           plusw2	equ	0xFDB
  4593                           fsr2h	equ	0xFDA
  4594                           fsr2l	equ	0xFD9
  4595                           status	equ	0xFD8
  4596                           
  4597 ;; *************** function ___awdiv *****************
  4598 ;; Defined at:
  4599 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  4600 ;; Parameters:    Size  Location     Type
  4601 ;;  dividend        2   26[COMRAM] int 
  4602 ;;  divisor         2   28[COMRAM] int 
  4603 ;; Auto vars:     Size  Location     Type
  4604 ;;  quotient        2   32[COMRAM] int 
  4605 ;;  sign            1   31[COMRAM] unsigned char 
  4606 ;;  counter         1   30[COMRAM] unsigned char 
  4607 ;; Return value:  Size  Location     Type
  4608 ;;                  2   26[COMRAM] int 
  4609 ;; Registers used:
  4610 ;;		wreg, status,2, status,0
  4611 ;; Tracked objects:
  4612 ;;		On entry : 0/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4616 ;;      Params:         4       0       0       0       0       0       0
  4617 ;;      Locals:         4       0       0       0       0       0       0
  4618 ;;      Temps:          0       0       0       0       0       0       0
  4619 ;;      Totals:         8       0       0       0       0       0       0
  4620 ;;Total ram usage:        8 bytes
  4621 ;; Hardware stack levels used:    1
  4622 ;; Hardware stack levels required when called:    4
  4623 ;; This function calls:
  4624 ;;		Nothing
  4625 ;; This function is called by:
  4626 ;;		_begin
  4627 ;; This function uses a non-reentrant model
  4628 ;;
  4629                           
  4630                           	psect	text21
  4631  0013E6                     __ptext21:
  4632                           	opt stack 0
  4633  0013E6                     ___awdiv:
  4634                           	opt stack 24
  4635                           
  4636                           ; BSR set to: 0
  4637                           ;incstack = 0
  4638  0013E6  0E00               	movlw	0
  4639  0013E8  6E20               	movwf	___awdiv@sign,c
  4640  0013EA  AE1E               	btfss	___awdiv@divisor+1,7,c
  4641  0013EC  D006               	goto	l4020
  4642  0013EE  6C1D               	negf	___awdiv@divisor,c
  4643  0013F0  1E1E               	comf	___awdiv@divisor+1,f,c
  4644  0013F2  B0D8               	btfsc	status,0,c
  4645  0013F4  2A1E               	incf	___awdiv@divisor+1,f,c
  4646  0013F6  0E01               	movlw	1
  4647  0013F8  6E20               	movwf	___awdiv@sign,c
  4648  0013FA                     l4020:
  4649  0013FA  AE1C               	btfss	___awdiv@dividend+1,7,c
  4650  0013FC  D006               	goto	l4026
  4651  0013FE  6C1B               	negf	___awdiv@dividend,c
  4652  001400  1E1C               	comf	___awdiv@dividend+1,f,c
  4653  001402  B0D8               	btfsc	status,0,c
  4654  001404  2A1C               	incf	___awdiv@dividend+1,f,c
  4655  001406  0E01               	movlw	1
  4656  001408  1A20               	xorwf	___awdiv@sign,f,c
  4657  00140A                     l4026:
  4658  00140A  0E00               	movlw	0
  4659  00140C  6E22               	movwf	___awdiv@quotient+1,c
  4660  00140E  0E00               	movlw	0
  4661  001410  6E21               	movwf	___awdiv@quotient,c
  4662  001412  501D               	movf	___awdiv@divisor,w,c
  4663  001414  101E               	iorwf	___awdiv@divisor+1,w,c
  4664  001416  B4D8               	btfsc	status,2,c
  4665  001418  D01C               	goto	l4048
  4666  00141A  0E01               	movlw	1
  4667  00141C  6E1F               	movwf	___awdiv@counter,c
  4668  00141E  D004               	goto	l4034
  4669  001420                     l4032:
  4670  001420  90D8               	bcf	status,0,c
  4671  001422  361D               	rlcf	___awdiv@divisor,f,c
  4672  001424  361E               	rlcf	___awdiv@divisor+1,f,c
  4673  001426  2A1F               	incf	___awdiv@counter,f,c
  4674  001428                     l4034:
  4675  001428  AE1E               	btfss	___awdiv@divisor+1,7,c
  4676  00142A  D7FA               	goto	l4032
  4677  00142C                     l4036:
  4678  00142C  90D8               	bcf	status,0,c
  4679  00142E  3621               	rlcf	___awdiv@quotient,f,c
  4680  001430  3622               	rlcf	___awdiv@quotient+1,f,c
  4681  001432  501D               	movf	___awdiv@divisor,w,c
  4682  001434  5C1B               	subwf	___awdiv@dividend,w,c
  4683  001436  501E               	movf	___awdiv@divisor+1,w,c
  4684  001438  581C               	subwfb	___awdiv@dividend+1,w,c
  4685  00143A  A0D8               	btfss	status,0,c
  4686  00143C  D005               	goto	l4044
  4687  00143E  501D               	movf	___awdiv@divisor,w,c
  4688  001440  5E1B               	subwf	___awdiv@dividend,f,c
  4689  001442  501E               	movf	___awdiv@divisor+1,w,c
  4690  001444  5A1C               	subwfb	___awdiv@dividend+1,f,c
  4691  001446  8021               	bsf	___awdiv@quotient,0,c
  4692  001448                     l4044:
  4693  001448  90D8               	bcf	status,0,c
  4694  00144A  321E               	rrcf	___awdiv@divisor+1,f,c
  4695  00144C  321D               	rrcf	___awdiv@divisor,f,c
  4696  00144E  2E1F               	decfsz	___awdiv@counter,f,c
  4697  001450  D7ED               	goto	l4036
  4698  001452                     l4048:
  4699  001452  5020               	movf	___awdiv@sign,w,c
  4700  001454  B4D8               	btfsc	status,2,c
  4701  001456  D004               	goto	l4052
  4702  001458  6C21               	negf	___awdiv@quotient,c
  4703  00145A  1E22               	comf	___awdiv@quotient+1,f,c
  4704  00145C  B0D8               	btfsc	status,0,c
  4705  00145E  2A22               	incf	___awdiv@quotient+1,f,c
  4706  001460                     l4052:
  4707  001460  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  4708  001464  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  4709  001468  0012               	return	
  4710  00146A                     __end_of___awdiv:
  4711                           	opt stack 0
  4712                           tosu	equ	0xFFF
  4713                           tosh	equ	0xFFE
  4714                           tosl	equ	0xFFD
  4715                           pclath	equ	0xFFA
  4716                           tblptru	equ	0xFF8
  4717                           tblptrh	equ	0xFF7
  4718                           tblptrl	equ	0xFF6
  4719                           tablat	equ	0xFF5
  4720                           prodh	equ	0xFF4
  4721                           prodl	equ	0xFF3
  4722                           intcon	equ	0xFF2
  4723                           postinc0	equ	0xFEE
  4724                           wreg	equ	0xFE8
  4725                           indf2	equ	0xFDF
  4726                           postinc2	equ	0xFDE
  4727                           postdec2	equ	0xFDD
  4728                           plusw2	equ	0xFDB
  4729                           fsr2h	equ	0xFDA
  4730                           fsr2l	equ	0xFD9
  4731                           status	equ	0xFD8
  4732                           
  4733 ;; *************** function _TMR2_Initialize *****************
  4734 ;; Defined at:
  4735 ;;		line 9 in file "mcc_generated_files/tmr2.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;		None
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;		None
  4740 ;; Return value:  Size  Location     Type
  4741 ;;                  1    wreg      void 
  4742 ;; Registers used:
  4743 ;;		wreg, status,2, cstack
  4744 ;; Tracked objects:
  4745 ;;		On entry : 0/0
  4746 ;;		On exit  : 0/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4749 ;;      Params:         0       0       0       0       0       0       0
  4750 ;;      Locals:         0       0       0       0       0       0       0
  4751 ;;      Temps:          0       0       0       0       0       0       0
  4752 ;;      Totals:         0       0       0       0       0       0       0
  4753 ;;Total ram usage:        0 bytes
  4754 ;; Hardware stack levels used:    1
  4755 ;; Hardware stack levels required when called:    5
  4756 ;; This function calls:
  4757 ;;		_TMR2_StartTimer
  4758 ;; This function is called by:
  4759 ;;		_SYSTEM_Initialize
  4760 ;; This function uses a non-reentrant model
  4761 ;;
  4762                           
  4763                           	psect	text22
  4764  001BAA                     __ptext22:
  4765                           	opt stack 0
  4766  001BAA                     _TMR2_Initialize:
  4767                           	opt stack 24
  4768                           
  4769                           ;tmr2.c: 14: T2CON = 0x1A;
  4770                           
  4771                           ;incstack = 0
  4772  001BAA  0E1A               	movlw	26
  4773  001BAC  6EBA               	movwf	4026,c	;volatile
  4774                           
  4775                           ;tmr2.c: 17: PR2 = 0x7C;
  4776  001BAE  0E7C               	movlw	124
  4777  001BB0  6EBB               	movwf	4027,c	;volatile
  4778                           
  4779                           ;tmr2.c: 20: TMR2 = 0x00;
  4780  001BB2  0E00               	movlw	0
  4781  001BB4  6EBC               	movwf	4028,c	;volatile
  4782                           
  4783                           ;tmr2.c: 23: PIR1bits.TMR2IF = 0;
  4784  001BB6  929E               	bcf	3998,1,c	;volatile
  4785                           
  4786                           ;tmr2.c: 26: TMR2_StartTimer();
  4787  001BB8  EC12  F00E         	call	_TMR2_StartTimer	;wreg free
  4788  001BBC  0012               	return		;funcret
  4789  001BBE                     __end_of_TMR2_Initialize:
  4790                           	opt stack 0
  4791                           tosu	equ	0xFFF
  4792                           tosh	equ	0xFFE
  4793                           tosl	equ	0xFFD
  4794                           pclath	equ	0xFFA
  4795                           tblptru	equ	0xFF8
  4796                           tblptrh	equ	0xFF7
  4797                           tblptrl	equ	0xFF6
  4798                           tablat	equ	0xFF5
  4799                           prodh	equ	0xFF4
  4800                           prodl	equ	0xFF3
  4801                           intcon	equ	0xFF2
  4802                           postinc0	equ	0xFEE
  4803                           wreg	equ	0xFE8
  4804                           indf2	equ	0xFDF
  4805                           postinc2	equ	0xFDE
  4806                           postdec2	equ	0xFDD
  4807                           plusw2	equ	0xFDB
  4808                           fsr2h	equ	0xFDA
  4809                           fsr2l	equ	0xFD9
  4810                           status	equ	0xFD8
  4811                           
  4812 ;; *************** function _TMR2_StartTimer *****************
  4813 ;; Defined at:
  4814 ;;		line 29 in file "mcc_generated_files/tmr2.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;		None
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;		None
  4819 ;; Return value:  Size  Location     Type
  4820 ;;                  1    wreg      void 
  4821 ;; Registers used:
  4822 ;;		None
  4823 ;; Tracked objects:
  4824 ;;		On entry : 0/0
  4825 ;;		On exit  : 0/0
  4826 ;;		Unchanged: 0/0
  4827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4828 ;;      Params:         0       0       0       0       0       0       0
  4829 ;;      Locals:         0       0       0       0       0       0       0
  4830 ;;      Temps:          0       0       0       0       0       0       0
  4831 ;;      Totals:         0       0       0       0       0       0       0
  4832 ;;Total ram usage:        0 bytes
  4833 ;; Hardware stack levels used:    1
  4834 ;; Hardware stack levels required when called:    4
  4835 ;; This function calls:
  4836 ;;		Nothing
  4837 ;; This function is called by:
  4838 ;;		_TMR2_Initialize
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           	psect	text23
  4843  001C24                     __ptext23:
  4844                           	opt stack 0
  4845  001C24                     _TMR2_StartTimer:
  4846                           	opt stack 24
  4847                           
  4848                           ;tmr2.c: 32: T2CONbits.TMR2ON = 1;
  4849                           
  4850                           ;incstack = 0
  4851  001C24  84BA               	bsf	4026,2,c	;volatile
  4852  001C26  0012               	return		;funcret
  4853  001C28                     __end_of_TMR2_StartTimer:
  4854                           	opt stack 0
  4855                           tosu	equ	0xFFF
  4856                           tosh	equ	0xFFE
  4857                           tosl	equ	0xFFD
  4858                           pclath	equ	0xFFA
  4859                           tblptru	equ	0xFF8
  4860                           tblptrh	equ	0xFF7
  4861                           tblptrl	equ	0xFF6
  4862                           tablat	equ	0xFF5
  4863                           prodh	equ	0xFF4
  4864                           prodl	equ	0xFF3
  4865                           intcon	equ	0xFF2
  4866                           postinc0	equ	0xFEE
  4867                           wreg	equ	0xFE8
  4868                           indf2	equ	0xFDF
  4869                           postinc2	equ	0xFDE
  4870                           postdec2	equ	0xFDD
  4871                           plusw2	equ	0xFDB
  4872                           fsr2h	equ	0xFDA
  4873                           fsr2l	equ	0xFD9
  4874                           status	equ	0xFD8
  4875                           
  4876 ;; *************** function _TMR1_Initialize *****************
  4877 ;; Defined at:
  4878 ;;		line 66 in file "mcc_generated_files/tmr1.c"
  4879 ;; Parameters:    Size  Location     Type
  4880 ;;		None
  4881 ;; Auto vars:     Size  Location     Type
  4882 ;;		None
  4883 ;; Return value:  Size  Location     Type
  4884 ;;                  2   97[None  ] int 
  4885 ;; Registers used:
  4886 ;;		wreg, status,2, cstack
  4887 ;; Tracked objects:
  4888 ;;		On entry : 0/0
  4889 ;;		On exit  : 0/0
  4890 ;;		Unchanged: 0/0
  4891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4892 ;;      Params:         0       0       0       0       0       0       0
  4893 ;;      Locals:         0       0       0       0       0       0       0
  4894 ;;      Temps:          0       0       0       0       0       0       0
  4895 ;;      Totals:         0       0       0       0       0       0       0
  4896 ;;Total ram usage:        0 bytes
  4897 ;; Hardware stack levels used:    1
  4898 ;; Hardware stack levels required when called:    5
  4899 ;; This function calls:
  4900 ;;		_TMR1_StartTimer
  4901 ;; This function is called by:
  4902 ;;		_SYSTEM_Initialize
  4903 ;; This function uses a non-reentrant model
  4904 ;;
  4905                           
  4906                           	psect	text24
  4907  001AD0                     __ptext24:
  4908                           	opt stack 0
  4909  001AD0                     _TMR1_Initialize:
  4910                           	opt stack 24
  4911                           
  4912                           ;tmr1.c: 71: T1CON = 0x00;
  4913                           
  4914                           ;incstack = 0
  4915  001AD0  0E00               	movlw	0
  4916  001AD2  6ECD               	movwf	4045,c	;volatile
  4917                           
  4918                           ;tmr1.c: 75: T1GCON = 0x00;
  4919  001AD4  0E00               	movlw	0
  4920  001AD6  6ECC               	movwf	4044,c	;volatile
  4921                           
  4922                           ;tmr1.c: 78: TMR1H = 0x00;
  4923  001AD8  0E00               	movlw	0
  4924  001ADA  6ECF               	movwf	4047,c	;volatile
  4925                           
  4926                           ;tmr1.c: 81: TMR1L = 0x00;
  4927  001ADC  0E00               	movlw	0
  4928  001ADE  6ECE               	movwf	4046,c	;volatile
  4929                           
  4930                           ;tmr1.c: 84: timer1ReloadVal=0;
  4931  001AE0  0E00               	movlw	0
  4932  001AE2  6E36               	movwf	_timer1ReloadVal+1,c	;volatile
  4933  001AE4  0E00               	movlw	0
  4934  001AE6  6E35               	movwf	_timer1ReloadVal,c	;volatile
  4935                           
  4936                           ;tmr1.c: 87: PIR1bits.TMR1IF = 0;
  4937  001AE8  909E               	bcf	3998,0,c	;volatile
  4938                           
  4939                           ;tmr1.c: 90: PIE1bits.TMR1IE = 1;
  4940  001AEA  809D               	bsf	3997,0,c	;volatile
  4941                           
  4942                           ;tmr1.c: 93: TMR1_StartTimer();
  4943  001AEC  EC14  F00E         	call	_TMR1_StartTimer	;wreg free
  4944  001AF0  0012               	return		;funcret
  4945  001AF2                     __end_of_TMR1_Initialize:
  4946                           	opt stack 0
  4947                           tosu	equ	0xFFF
  4948                           tosh	equ	0xFFE
  4949                           tosl	equ	0xFFD
  4950                           pclath	equ	0xFFA
  4951                           tblptru	equ	0xFF8
  4952                           tblptrh	equ	0xFF7
  4953                           tblptrl	equ	0xFF6
  4954                           tablat	equ	0xFF5
  4955                           prodh	equ	0xFF4
  4956                           prodl	equ	0xFF3
  4957                           intcon	equ	0xFF2
  4958                           postinc0	equ	0xFEE
  4959                           wreg	equ	0xFE8
  4960                           indf2	equ	0xFDF
  4961                           postinc2	equ	0xFDE
  4962                           postdec2	equ	0xFDD
  4963                           plusw2	equ	0xFDB
  4964                           fsr2h	equ	0xFDA
  4965                           fsr2l	equ	0xFD9
  4966                           status	equ	0xFD8
  4967                           
  4968 ;; *************** function _TMR1_StartTimer *****************
  4969 ;; Defined at:
  4970 ;;		line 96 in file "mcc_generated_files/tmr1.c"
  4971 ;; Parameters:    Size  Location     Type
  4972 ;;		None
  4973 ;; Auto vars:     Size  Location     Type
  4974 ;;		None
  4975 ;; Return value:  Size  Location     Type
  4976 ;;                  1    wreg      void 
  4977 ;; Registers used:
  4978 ;;		None
  4979 ;; Tracked objects:
  4980 ;;		On entry : 0/0
  4981 ;;		On exit  : 0/0
  4982 ;;		Unchanged: 0/0
  4983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4984 ;;      Params:         0       0       0       0       0       0       0
  4985 ;;      Locals:         0       0       0       0       0       0       0
  4986 ;;      Temps:          0       0       0       0       0       0       0
  4987 ;;      Totals:         0       0       0       0       0       0       0
  4988 ;;Total ram usage:        0 bytes
  4989 ;; Hardware stack levels used:    1
  4990 ;; Hardware stack levels required when called:    4
  4991 ;; This function calls:
  4992 ;;		Nothing
  4993 ;; This function is called by:
  4994 ;;		_TMR1_Initialize
  4995 ;; This function uses a non-reentrant model
  4996 ;;
  4997                           
  4998                           	psect	text25
  4999  001C28                     __ptext25:
  5000                           	opt stack 0
  5001  001C28                     _TMR1_StartTimer:
  5002                           	opt stack 24
  5003                           
  5004                           ;tmr1.c: 99: T1CONbits.TMR1ON = 1;
  5005                           
  5006                           ;incstack = 0
  5007  001C28  80CD               	bsf	4045,0,c	;volatile
  5008  001C2A  0012               	return		;funcret
  5009  001C2C                     __end_of_TMR1_StartTimer:
  5010                           	opt stack 0
  5011                           tosu	equ	0xFFF
  5012                           tosh	equ	0xFFE
  5013                           tosl	equ	0xFFD
  5014                           pclath	equ	0xFFA
  5015                           tblptru	equ	0xFF8
  5016                           tblptrh	equ	0xFF7
  5017                           tblptrl	equ	0xFF6
  5018                           tablat	equ	0xFF5
  5019                           prodh	equ	0xFF4
  5020                           prodl	equ	0xFF3
  5021                           intcon	equ	0xFF2
  5022                           postinc0	equ	0xFEE
  5023                           wreg	equ	0xFE8
  5024                           indf2	equ	0xFDF
  5025                           postinc2	equ	0xFDE
  5026                           postdec2	equ	0xFDD
  5027                           plusw2	equ	0xFDB
  5028                           fsr2h	equ	0xFDA
  5029                           fsr2l	equ	0xFD9
  5030                           status	equ	0xFD8
  5031                           
  5032 ;; *************** function _PWM4_Initialize *****************
  5033 ;; Defined at:
  5034 ;;		line 64 in file "mcc_generated_files/pwm4.c"
  5035 ;; Parameters:    Size  Location     Type
  5036 ;;		None
  5037 ;; Auto vars:     Size  Location     Type
  5038 ;;		None
  5039 ;; Return value:  Size  Location     Type
  5040 ;;                  1    wreg      void 
  5041 ;; Registers used:
  5042 ;;		wreg, status,2
  5043 ;; Tracked objects:
  5044 ;;		On entry : 0/0
  5045 ;;		On exit  : 0/0
  5046 ;;		Unchanged: 0/0
  5047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5048 ;;      Params:         0       0       0       0       0       0       0
  5049 ;;      Locals:         0       0       0       0       0       0       0
  5050 ;;      Temps:          0       0       0       0       0       0       0
  5051 ;;      Totals:         0       0       0       0       0       0       0
  5052 ;;Total ram usage:        0 bytes
  5053 ;; Hardware stack levels used:    1
  5054 ;; Hardware stack levels required when called:    4
  5055 ;; This function calls:
  5056 ;;		Nothing
  5057 ;; This function is called by:
  5058 ;;		_SYSTEM_Initialize
  5059 ;; This function uses a non-reentrant model
  5060 ;;
  5061                           
  5062                           	psect	text26
  5063  001BBE                     __ptext26:
  5064                           	opt stack 0
  5065  001BBE                     _PWM4_Initialize:
  5066                           	opt stack 25
  5067                           
  5068                           ;pwm4.c: 69: CCP2CON = 0x1C;
  5069                           
  5070                           ;incstack = 0
  5071  001BBE  0E1C               	movlw	28
  5072  001BC0  6E66               	movwf	3942,c	;volatile
  5073                           
  5074                           ;pwm4.c: 72: CCPR2L = 0x3E;
  5075  001BC2  0E3E               	movlw	62
  5076  001BC4  6E67               	movwf	3943,c	;volatile
  5077                           
  5078                           ;pwm4.c: 75: CCPR2H = 0x00;
  5079  001BC6  0E00               	movlw	0
  5080  001BC8  6E68               	movwf	3944,c	;volatile
  5081                           
  5082                           ;pwm4.c: 78: CCPTMRS1bits.C4TSEL = 0x0;
  5083  001BCA  0EFC               	movlw	-4
  5084  001BCC  010F               	movlb	15	; () banked
  5085  001BCE  1748               	andwf	72,f,b	;volatile
  5086                           
  5087                           ; BSR set to: 15
  5088  001BD0  0012               	return		;funcret
  5089  001BD2                     __end_of_PWM4_Initialize:
  5090                           	opt stack 0
  5091                           tosu	equ	0xFFF
  5092                           tosh	equ	0xFFE
  5093                           tosl	equ	0xFFD
  5094                           pclath	equ	0xFFA
  5095                           tblptru	equ	0xFF8
  5096                           tblptrh	equ	0xFF7
  5097                           tblptrl	equ	0xFF6
  5098                           tablat	equ	0xFF5
  5099                           prodh	equ	0xFF4
  5100                           prodl	equ	0xFF3
  5101                           intcon	equ	0xFF2
  5102                           postinc0	equ	0xFEE
  5103                           wreg	equ	0xFE8
  5104                           indf2	equ	0xFDF
  5105                           postinc2	equ	0xFDE
  5106                           postdec2	equ	0xFDD
  5107                           plusw2	equ	0xFDB
  5108                           fsr2h	equ	0xFDA
  5109                           fsr2l	equ	0xFD9
  5110                           status	equ	0xFD8
  5111                           
  5112 ;; *************** function _PIN_MANAGER_Initialize *****************
  5113 ;; Defined at:
  5114 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  5115 ;; Parameters:    Size  Location     Type
  5116 ;;		None
  5117 ;; Auto vars:     Size  Location     Type
  5118 ;;		None
  5119 ;; Return value:  Size  Location     Type
  5120 ;;                  1    wreg      void 
  5121 ;; Registers used:
  5122 ;;		wreg, status,2
  5123 ;; Tracked objects:
  5124 ;;		On entry : 0/0
  5125 ;;		On exit  : 0/0
  5126 ;;		Unchanged: 0/0
  5127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5128 ;;      Params:         0       0       0       0       0       0       0
  5129 ;;      Locals:         0       0       0       0       0       0       0
  5130 ;;      Temps:          0       0       0       0       0       0       0
  5131 ;;      Totals:         0       0       0       0       0       0       0
  5132 ;;Total ram usage:        0 bytes
  5133 ;; Hardware stack levels used:    1
  5134 ;; Hardware stack levels required when called:    4
  5135 ;; This function calls:
  5136 ;;		Nothing
  5137 ;; This function is called by:
  5138 ;;		_SYSTEM_Initialize
  5139 ;; This function uses a non-reentrant model
  5140 ;;
  5141                           
  5142                           	psect	text27
  5143  00146A                     __ptext27:
  5144                           	opt stack 0
  5145  00146A                     _PIN_MANAGER_Initialize:
  5146                           	opt stack 25
  5147                           
  5148                           ;pin_manager.c: 52: LATA = 0x00;
  5149                           
  5150                           ; BSR set to: 15
  5151                           ;incstack = 0
  5152  00146A  0E00               	movlw	0
  5153  00146C  6E89               	movwf	3977,c	;volatile
  5154                           
  5155                           ;pin_manager.c: 53: TRISA = 0xF7;
  5156  00146E  0EF7               	movlw	247
  5157  001470  6E92               	movwf	3986,c	;volatile
  5158                           
  5159                           ;pin_manager.c: 54: ANSELA = 0x27;
  5160  001472  0E27               	movlw	39
  5161  001474  010F               	movlb	15	; () banked
  5162  001476  6F38               	movwf	56,b	;volatile
  5163                           
  5164                           ;pin_manager.c: 56: LATB = 0x01;
  5165  001478  0E01               	movlw	1
  5166  00147A  6E8A               	movwf	3978,c	;volatile
  5167                           
  5168                           ;pin_manager.c: 57: TRISB = 0xFE;
  5169  00147C  0EFE               	movlw	254
  5170  00147E  6E93               	movwf	3987,c	;volatile
  5171                           
  5172                           ;pin_manager.c: 58: ANSELB = 0x3E;
  5173  001480  0E3E               	movlw	62
  5174  001482  010F               	movlb	15	; () banked
  5175  001484  6F39               	movwf	57,b	;volatile
  5176                           
  5177                           ;pin_manager.c: 59: WPUB = 0x00;
  5178  001486  0E00               	movlw	0
  5179  001488  6E61               	movwf	3937,c	;volatile
  5180                           
  5181                           ;pin_manager.c: 61: LATC = 0x00;
  5182  00148A  0E00               	movlw	0
  5183  00148C  6E8B               	movwf	3979,c	;volatile
  5184                           
  5185                           ;pin_manager.c: 62: TRISC = 0xDF;
  5186  00148E  0EDF               	movlw	223
  5187  001490  6E94               	movwf	3988,c	;volatile
  5188                           
  5189                           ;pin_manager.c: 63: ANSELC = 0x1C;
  5190  001492  0E1C               	movlw	28
  5191  001494  010F               	movlb	15	; () banked
  5192  001496  6F3A               	movwf	58,b	;volatile
  5193                           
  5194                           ;pin_manager.c: 65: LATD = 0x00;
  5195  001498  0E00               	movlw	0
  5196  00149A  6E8C               	movwf	3980,c	;volatile
  5197                           
  5198                           ;pin_manager.c: 66: TRISD = 0x0F;
  5199  00149C  0E0F               	movlw	15
  5200  00149E  6E95               	movwf	3989,c	;volatile
  5201                           
  5202                           ;pin_manager.c: 67: ANSELD = 0x0F;
  5203  0014A0  0E0F               	movlw	15
  5204  0014A2  010F               	movlb	15	; () banked
  5205  0014A4  6F3B               	movwf	59,b	;volatile
  5206                           
  5207                           ;pin_manager.c: 69: LATE = 0x00;
  5208  0014A6  0E00               	movlw	0
  5209  0014A8  6E8D               	movwf	3981,c	;volatile
  5210                           
  5211                           ;pin_manager.c: 70: TRISE = 0x07;
  5212  0014AA  0E07               	movlw	7
  5213  0014AC  6E96               	movwf	3990,c	;volatile
  5214                           
  5215                           ;pin_manager.c: 71: ANSELE = 0x07;
  5216  0014AE  0E07               	movlw	7
  5217  0014B0  010F               	movlb	15	; () banked
  5218  0014B2  6F3C               	movwf	60,b	;volatile
  5219                           
  5220                           ; BSR set to: 15
  5221                           ;pin_manager.c: 72: TRISCbits.RC6 = 1;
  5222  0014B4  8C94               	bsf	3988,6,c	;volatile
  5223                           
  5224                           ; BSR set to: 15
  5225                           ;pin_manager.c: 73: TRISCbits.RC7 = 1;
  5226  0014B6  8E94               	bsf	3988,7,c	;volatile
  5227                           
  5228                           ; BSR set to: 15
  5229                           ;pin_manager.c: 74: TRISCbits.RC5 = 0;
  5230  0014B8  9A94               	bcf	3988,5,c	;volatile
  5231                           
  5232                           ; BSR set to: 15
  5233                           ;pin_manager.c: 75: LATCbits.LATC5 = 1;
  5234  0014BA  8A8B               	bsf	3979,5,c	;volatile
  5235                           
  5236                           ; BSR set to: 15
  5237                           ;pin_manager.c: 76: LATCbits.LATC6 = 1;
  5238  0014BC  8C8B               	bsf	3979,6,c	;volatile
  5239                           
  5240                           ; BSR set to: 15
  5241                           ;pin_manager.c: 77: LATCbits.LATC7 = 1;
  5242  0014BE  8E8B               	bsf	3979,7,c	;volatile
  5243                           
  5244                           ; BSR set to: 15
  5245                           ;pin_manager.c: 78: ANSELCbits.ANSC5 =0;
  5246  0014C0  010F               	movlb	15	; () banked
  5247  0014C2  9B3A               	bcf	58,5,b	;volatile
  5248                           
  5249                           ; BSR set to: 15
  5250                           ;pin_manager.c: 79: ANSELCbits.ANSC6 =0;
  5251  0014C4  010F               	movlb	15	; () banked
  5252  0014C6  9D3A               	bcf	58,6,b	;volatile
  5253                           
  5254                           ; BSR set to: 15
  5255                           ;pin_manager.c: 80: ANSELCbits.ANSC7 =0;
  5256  0014C8  010F               	movlb	15	; () banked
  5257  0014CA  9F3A               	bcf	58,7,b	;volatile
  5258                           
  5259                           ; BSR set to: 15
  5260                           ;pin_manager.c: 82: INTCON2bits.nRBPU = 0x01;
  5261  0014CC  8EF1               	bsf	intcon2,7,c	;volatile
  5262                           
  5263                           ; BSR set to: 15
  5264                           
  5265                           ; BSR set to: 15
  5266                           
  5267                           ;pin_manager.c: 84: do { TRISB4 = 0; } while(0);
  5268  0014CE  9893               	bcf	3987,4,c	;volatile
  5269                           
  5270                           ; BSR set to: 15
  5271                           
  5272                           ; BSR set to: 15
  5273                           
  5274                           ;pin_manager.c: 85: do { TRISB3 = 0; } while(0);
  5275                           
  5276                           ; BSR set to: 15
  5277  0014D0  9693               	bcf	3987,3,c	;volatile
  5278                           
  5279                           ; BSR set to: 15
  5280                           
  5281                           ; BSR set to: 15
  5282                           
  5283                           ;pin_manager.c: 86: do { TRISB5 = 0; } while(0);
  5284                           
  5285                           ; BSR set to: 15
  5286  0014D2  9A93               	bcf	3987,5,c	;volatile
  5287                           
  5288                           ; BSR set to: 15
  5289                           ;pin_manager.c: 88: TRISDbits.RD1 = 0;
  5290                           
  5291                           ; BSR set to: 15
  5292  0014D4  9295               	bcf	3989,1,c	;volatile
  5293                           
  5294                           ; BSR set to: 15
  5295                           
  5296                           ; BSR set to: 15
  5297                           
  5298                           ;pin_manager.c: 90: do { ANSB3 = 0; } while(0);
  5299  0014D6  010F               	movlb	15	; () banked
  5300  0014D8  9739               	bcf	57,3,b	;volatile
  5301                           
  5302                           ; BSR set to: 15
  5303                           
  5304                           ; BSR set to: 15
  5305                           
  5306                           ;pin_manager.c: 91: do { ANSD7 = 0; } while(0);
  5307                           
  5308                           ; BSR set to: 15
  5309  0014DA  010F               	movlb	15	; () banked
  5310  0014DC  9F3B               	bcf	59,7,b	;volatile
  5311                           
  5312                           ; BSR set to: 15
  5313                           
  5314                           ; BSR set to: 15
  5315                           
  5316                           ;pin_manager.c: 92: do { ANSB4 = 0; } while(0);
  5317                           
  5318                           ; BSR set to: 15
  5319  0014DE  010F               	movlb	15	; () banked
  5320  0014E0  9939               	bcf	57,4,b	;volatile
  5321  0014E2  0012               	return	
  5322  0014E4                     __end_of_PIN_MANAGER_Initialize:
  5323                           	opt stack 0
  5324                           tosu	equ	0xFFF
  5325                           tosh	equ	0xFFE
  5326                           tosl	equ	0xFFD
  5327                           pclath	equ	0xFFA
  5328                           tblptru	equ	0xFF8
  5329                           tblptrh	equ	0xFF7
  5330                           tblptrl	equ	0xFF6
  5331                           tablat	equ	0xFF5
  5332                           prodh	equ	0xFF4
  5333                           prodl	equ	0xFF3
  5334                           intcon	equ	0xFF2
  5335                           intcon2	equ	0xFF1
  5336                           postinc0	equ	0xFEE
  5337                           wreg	equ	0xFE8
  5338                           indf2	equ	0xFDF
  5339                           postinc2	equ	0xFDE
  5340                           postdec2	equ	0xFDD
  5341                           plusw2	equ	0xFDB
  5342                           fsr2h	equ	0xFDA
  5343                           fsr2l	equ	0xFD9
  5344                           status	equ	0xFD8
  5345                           
  5346 ;; *************** function _OSCILLATOR_Initialize *****************
  5347 ;; Defined at:
  5348 ;;		line 126 in file "mcc_generated_files/mcc.c"
  5349 ;; Parameters:    Size  Location     Type
  5350 ;;		None
  5351 ;; Auto vars:     Size  Location     Type
  5352 ;;		None
  5353 ;; Return value:  Size  Location     Type
  5354 ;;                  1    wreg      void 
  5355 ;; Registers used:
  5356 ;;		wreg, status,2
  5357 ;; Tracked objects:
  5358 ;;		On entry : 0/0
  5359 ;;		On exit  : 0/0
  5360 ;;		Unchanged: 0/0
  5361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5362 ;;      Params:         0       0       0       0       0       0       0
  5363 ;;      Locals:         0       0       0       0       0       0       0
  5364 ;;      Temps:          0       0       0       0       0       0       0
  5365 ;;      Totals:         0       0       0       0       0       0       0
  5366 ;;Total ram usage:        0 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; Hardware stack levels required when called:    4
  5369 ;; This function calls:
  5370 ;;		Nothing
  5371 ;; This function is called by:
  5372 ;;		_SYSTEM_Initialize
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           	psect	text28
  5377  001C06                     __ptext28:
  5378                           	opt stack 0
  5379  001C06                     _OSCILLATOR_Initialize:
  5380                           	opt stack 25
  5381                           
  5382                           ;mcc.c: 128: OSCCON = 0x72;
  5383                           
  5384                           ; BSR set to: 15
  5385                           ;incstack = 0
  5386  001C06  0E72               	movlw	114
  5387  001C08  6ED3               	movwf	4051,c	;volatile
  5388                           
  5389                           ;mcc.c: 130: OSCCON2 = 0x04;
  5390  001C0A  0E04               	movlw	4
  5391  001C0C  6ED2               	movwf	4050,c	;volatile
  5392                           
  5393                           ;mcc.c: 132: OSCTUNE = 0x00;
  5394  001C0E  0E00               	movlw	0
  5395  001C10  6E9B               	movwf	3995,c	;volatile
  5396  001C12  0012               	return		;funcret
  5397  001C14                     __end_of_OSCILLATOR_Initialize:
  5398                           	opt stack 0
  5399                           tosu	equ	0xFFF
  5400                           tosh	equ	0xFFE
  5401                           tosl	equ	0xFFD
  5402                           pclath	equ	0xFFA
  5403                           tblptru	equ	0xFF8
  5404                           tblptrh	equ	0xFF7
  5405                           tblptrl	equ	0xFF6
  5406                           tablat	equ	0xFF5
  5407                           prodh	equ	0xFF4
  5408                           prodl	equ	0xFF3
  5409                           intcon	equ	0xFF2
  5410                           intcon2	equ	0xFF1
  5411                           postinc0	equ	0xFEE
  5412                           wreg	equ	0xFE8
  5413                           indf2	equ	0xFDF
  5414                           postinc2	equ	0xFDE
  5415                           postdec2	equ	0xFDD
  5416                           plusw2	equ	0xFDB
  5417                           fsr2h	equ	0xFDA
  5418                           fsr2l	equ	0xFD9
  5419                           status	equ	0xFD8
  5420                           
  5421 ;; *************** function _INTERRUPT_Initialize *****************
  5422 ;; Defined at:
  5423 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5424 ;; Parameters:    Size  Location     Type
  5425 ;;		None
  5426 ;; Auto vars:     Size  Location     Type
  5427 ;;		None
  5428 ;; Return value:  Size  Location     Type
  5429 ;;                  1    wreg      void 
  5430 ;; Registers used:
  5431 ;;		None
  5432 ;; Tracked objects:
  5433 ;;		On entry : 0/0
  5434 ;;		On exit  : 0/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5437 ;;      Params:         0       0       0       0       0       0       0
  5438 ;;      Locals:         0       0       0       0       0       0       0
  5439 ;;      Temps:          0       0       0       0       0       0       0
  5440 ;;      Totals:         0       0       0       0       0       0       0
  5441 ;;Total ram usage:        0 bytes
  5442 ;; Hardware stack levels used:    1
  5443 ;; Hardware stack levels required when called:    4
  5444 ;; This function calls:
  5445 ;;		Nothing
  5446 ;; This function is called by:
  5447 ;;		_SYSTEM_Initialize
  5448 ;; This function uses a non-reentrant model
  5449 ;;
  5450                           
  5451                           	psect	text29
  5452  001C14                     __ptext29:
  5453                           	opt stack 0
  5454  001C14                     _INTERRUPT_Initialize:
  5455                           	opt stack 25
  5456                           
  5457                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  5458                           
  5459                           ;incstack = 0
  5460  001C14  9ED0               	bcf	4048,7,c	;volatile
  5461                           
  5462                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  5463  001C16  9A9F               	bcf	3999,5,c	;volatile
  5464                           
  5465                           ;interrupt_manager.c: 62: IPR1bits.TX1IP = 0;
  5466  001C18  989F               	bcf	3999,4,c	;volatile
  5467                           
  5468                           ;interrupt_manager.c: 64: IPR1bits.ADIP = 0;
  5469  001C1A  9C9F               	bcf	3999,6,c	;volatile
  5470  001C1C  0012               	return		;funcret
  5471  001C1E                     __end_of_INTERRUPT_Initialize:
  5472                           	opt stack 0
  5473                           tosu	equ	0xFFF
  5474                           tosh	equ	0xFFE
  5475                           tosl	equ	0xFFD
  5476                           pclath	equ	0xFFA
  5477                           tblptru	equ	0xFF8
  5478                           tblptrh	equ	0xFF7
  5479                           tblptrl	equ	0xFF6
  5480                           tablat	equ	0xFF5
  5481                           prodh	equ	0xFF4
  5482                           prodl	equ	0xFF3
  5483                           intcon	equ	0xFF2
  5484                           intcon2	equ	0xFF1
  5485                           postinc0	equ	0xFEE
  5486                           wreg	equ	0xFE8
  5487                           indf2	equ	0xFDF
  5488                           postinc2	equ	0xFDE
  5489                           postdec2	equ	0xFDD
  5490                           plusw2	equ	0xFDB
  5491                           fsr2h	equ	0xFDA
  5492                           fsr2l	equ	0xFD9
  5493                           status	equ	0xFD8
  5494                           
  5495 ;; *************** function _EUSART1_Initialize *****************
  5496 ;; Defined at:
  5497 ;;		line 23 in file "UART.c"
  5498 ;; Parameters:    Size  Location     Type
  5499 ;;		None
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;		None
  5502 ;; Return value:  Size  Location     Type
  5503 ;;                  1    wreg      void 
  5504 ;; Registers used:
  5505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5511 ;;      Params:         0       0       0       0       0       0       0
  5512 ;;      Locals:         0       0       0       0       0       0       0
  5513 ;;      Temps:          0       0       0       0       0       0       0
  5514 ;;      Totals:         0       0       0       0       0       0       0
  5515 ;;Total ram usage:        0 bytes
  5516 ;; Hardware stack levels used:    1
  5517 ;; Hardware stack levels required when called:    6
  5518 ;; This function calls:
  5519 ;;		_UART_buff_init
  5520 ;; This function is called by:
  5521 ;;		_SYSTEM_Initialize
  5522 ;; This function uses a non-reentrant model
  5523 ;;
  5524                           
  5525                           	psect	text30
  5526  0018C4                     __ptext30:
  5527                           	opt stack 0
  5528  0018C4                     _EUSART1_Initialize:
  5529                           	opt stack 23
  5530                           
  5531                           ;UART.c: 25: PIE1bits.RC1IE = 0;
  5532                           
  5533                           ;incstack = 0
  5534  0018C4  9A9D               	bcf	3997,5,c	;volatile
  5535                           
  5536                           ;UART.c: 26: PIE1bits.TX1IE = 0;
  5537  0018C6  989D               	bcf	3997,4,c	;volatile
  5538                           
  5539                           ;UART.c: 31: BAUD1CON = 0x48;
  5540  0018C8  0E48               	movlw	72
  5541  0018CA  6EB8               	movwf	4024,c	;volatile
  5542                           
  5543                           ;UART.c: 34: RC1STA = 0x98;
  5544  0018CC  0E98               	movlw	152
  5545  0018CE  6EAB               	movwf	4011,c	;volatile
  5546                           
  5547                           ;UART.c: 37: TX1STA = 0x26;
  5548  0018D0  0E26               	movlw	38
  5549  0018D2  6EAC               	movwf	4012,c	;volatile
  5550                           
  5551                           ;UART.c: 40: SPBRG1 = (((16000000/38400)/4)-1);
  5552  0018D4  0E67               	movlw	103
  5553  0018D6  6EAF               	movwf	4015,c	;volatile
  5554                           
  5555                           ;UART.c: 43: SPBRGH1 = 0x00;
  5556  0018D8  0E00               	movlw	0
  5557  0018DA  6EB0               	movwf	4016,c	;volatile
  5558                           
  5559                           ;UART.c: 46: TXREG1 = 0x00;
  5560  0018DC  0E00               	movlw	0
  5561  0018DE  6EAD               	movwf	4013,c	;volatile
  5562                           
  5563                           ;UART.c: 49: RCREG1 = 0x00;
  5564  0018E0  0E00               	movlw	0
  5565  0018E2  6EAE               	movwf	4014,c	;volatile
  5566                           
  5567                           ;UART.c: 51: UART_buff_init(&input_buffer);
  5568  0018E4  0E00               	movlw	low _input_buffer
  5569  0018E6  6E23               	movwf	UART_buff_init@_this,c
  5570  0018E8  0E03               	movlw	high _input_buffer
  5571  0018EA  6E24               	movwf	UART_buff_init@_this+1,c
  5572  0018EC  EC99  F00D         	call	_UART_buff_init	;wreg free
  5573                           
  5574                           ;UART.c: 52: UART_buff_init(&output_buffer);
  5575  0018F0  0E00               	movlw	low _output_buffer
  5576  0018F2  6E23               	movwf	UART_buff_init@_this,c
  5577  0018F4  0E04               	movlw	high _output_buffer
  5578  0018F6  6E24               	movwf	UART_buff_init@_this+1,c
  5579  0018F8  EC99  F00D         	call	_UART_buff_init	;wreg free
  5580                           
  5581                           ;UART.c: 54: PIE1bits.RC1IE = 1;
  5582  0018FC  8A9D               	bsf	3997,5,c	;volatile
  5583  0018FE  0012               	return		;funcret
  5584  001900                     __end_of_EUSART1_Initialize:
  5585                           	opt stack 0
  5586                           tosu	equ	0xFFF
  5587                           tosh	equ	0xFFE
  5588                           tosl	equ	0xFFD
  5589                           pclath	equ	0xFFA
  5590                           tblptru	equ	0xFF8
  5591                           tblptrh	equ	0xFF7
  5592                           tblptrl	equ	0xFF6
  5593                           tablat	equ	0xFF5
  5594                           prodh	equ	0xFF4
  5595                           prodl	equ	0xFF3
  5596                           intcon	equ	0xFF2
  5597                           intcon2	equ	0xFF1
  5598                           postinc0	equ	0xFEE
  5599                           wreg	equ	0xFE8
  5600                           indf2	equ	0xFDF
  5601                           postinc2	equ	0xFDE
  5602                           postdec2	equ	0xFDD
  5603                           plusw2	equ	0xFDB
  5604                           fsr2h	equ	0xFDA
  5605                           fsr2l	equ	0xFD9
  5606                           status	equ	0xFD8
  5607                           
  5608 ;; *************** function _UART_buff_init *****************
  5609 ;; Defined at:
  5610 ;;		line 58 in file "UART.c"
  5611 ;; Parameters:    Size  Location     Type
  5612 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  5613 ;;		 -> output_buffer(206), input_buffer(206), 
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;		None
  5616 ;; Return value:  Size  Location     Type
  5617 ;;                  1    wreg      void 
  5618 ;; Registers used:
  5619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5620 ;; Tracked objects:
  5621 ;;		On entry : 0/0
  5622 ;;		On exit  : 0/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5625 ;;      Params:         2       0       0       0       0       0       0
  5626 ;;      Locals:         0       0       0       0       0       0       0
  5627 ;;      Temps:          0       0       0       0       0       0       0
  5628 ;;      Totals:         2       0       0       0       0       0       0
  5629 ;;Total ram usage:        2 bytes
  5630 ;; Hardware stack levels used:    1
  5631 ;; Hardware stack levels required when called:    5
  5632 ;; This function calls:
  5633 ;;		_memset
  5634 ;; This function is called by:
  5635 ;;		_EUSART1_Initialize
  5636 ;; This function uses a non-reentrant model
  5637 ;;
  5638                           
  5639                           	psect	text31
  5640  001B32                     __ptext31:
  5641                           	opt stack 0
  5642  001B32                     _UART_buff_init:
  5643                           	opt stack 23
  5644                           
  5645                           ;UART.c: 67: memset(_this, 0, sizeof (*_this));
  5646                           
  5647                           ;incstack = 0
  5648  001B32  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  5649  001B36  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  5650  001B3A  0E00               	movlw	0
  5651  001B3C  6E1E               	movwf	memset@c+1,c
  5652  001B3E  0E00               	movlw	0
  5653  001B40  6E1D               	movwf	memset@c,c
  5654  001B42  0E00               	movlw	0
  5655  001B44  6E20               	movwf	memset@n+1,c
  5656  001B46  0ECE               	movlw	206
  5657  001B48  6E1F               	movwf	memset@n,c
  5658  001B4A  EC02  F00D         	call	_memset	;wreg free
  5659  001B4E  0012               	return		;funcret
  5660  001B50                     __end_of_UART_buff_init:
  5661                           	opt stack 0
  5662                           tosu	equ	0xFFF
  5663                           tosh	equ	0xFFE
  5664                           tosl	equ	0xFFD
  5665                           pclath	equ	0xFFA
  5666                           tblptru	equ	0xFF8
  5667                           tblptrh	equ	0xFF7
  5668                           tblptrl	equ	0xFF6
  5669                           tablat	equ	0xFF5
  5670                           prodh	equ	0xFF4
  5671                           prodl	equ	0xFF3
  5672                           intcon	equ	0xFF2
  5673                           intcon2	equ	0xFF1
  5674                           postinc0	equ	0xFEE
  5675                           wreg	equ	0xFE8
  5676                           indf2	equ	0xFDF
  5677                           postinc2	equ	0xFDE
  5678                           postdec2	equ	0xFDD
  5679                           plusw2	equ	0xFDB
  5680                           fsr2h	equ	0xFDA
  5681                           fsr2l	equ	0xFD9
  5682                           status	equ	0xFD8
  5683                           
  5684 ;; *************** function _memset *****************
  5685 ;; Defined at:
  5686 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;  p1              2   26[COMRAM] PTR void 
  5689 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  5690 ;;  c               2   28[COMRAM] int 
  5691 ;;  n               2   30[COMRAM] unsigned int 
  5692 ;; Auto vars:     Size  Location     Type
  5693 ;;  p               2   32[COMRAM] PTR unsigned char 
  5694 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  5695 ;; Return value:  Size  Location     Type
  5696 ;;                  2   26[COMRAM] PTR void 
  5697 ;; Registers used:
  5698 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5699 ;; Tracked objects:
  5700 ;;		On entry : 0/0
  5701 ;;		On exit  : 0/0
  5702 ;;		Unchanged: 0/0
  5703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5704 ;;      Params:         6       0       0       0       0       0       0
  5705 ;;      Locals:         2       0       0       0       0       0       0
  5706 ;;      Temps:          0       0       0       0       0       0       0
  5707 ;;      Totals:         8       0       0       0       0       0       0
  5708 ;;Total ram usage:        8 bytes
  5709 ;; Hardware stack levels used:    1
  5710 ;; Hardware stack levels required when called:    4
  5711 ;; This function calls:
  5712 ;;		Nothing
  5713 ;; This function is called by:
  5714 ;;		_FastTransfer_buffer_flush
  5715 ;;		_UART_buff_init
  5716 ;;		_UART_buff_flush
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720                           	psect	text32
  5721  001A04                     __ptext32:
  5722                           	opt stack 0
  5723  001A04                     _memset:
  5724                           	opt stack 22
  5725                           
  5726                           ;incstack = 0
  5727  001A04  C01B  F021         	movff	memset@p1,memset@p
  5728  001A08  C01C  F022         	movff	memset@p1+1,memset@p+1
  5729  001A0C  D008               	goto	l3800
  5730  001A0E                     l3796:
  5731  001A0E  C021  FFD9         	movff	memset@p,fsr2l
  5732  001A12  C022  FFDA         	movff	memset@p+1,fsr2h
  5733  001A16  C01D  FFDF         	movff	memset@c,indf2
  5734  001A1A  4A21               	infsnz	memset@p,f,c
  5735  001A1C  2A22               	incf	memset@p+1,f,c
  5736  001A1E                     l3800:
  5737  001A1E  061F               	decf	memset@n,f,c
  5738  001A20  A0D8               	btfss	status,0,c
  5739  001A22  0620               	decf	memset@n+1,f,c
  5740  001A24  281F               	incf	memset@n,w,c
  5741  001A26  E1F3               	bnz	l3796
  5742  001A28  2820               	incf	memset@n+1,w,c
  5743  001A2A  B4D8               	btfsc	status,2,c
  5744  001A2C  0012               	return	
  5745  001A2E  D7EF               	goto	l3796
  5746  001A30                     __end_of_memset:
  5747                           	opt stack 0
  5748                           tosu	equ	0xFFF
  5749                           tosh	equ	0xFFE
  5750                           tosl	equ	0xFFD
  5751                           pclath	equ	0xFFA
  5752                           tblptru	equ	0xFF8
  5753                           tblptrh	equ	0xFF7
  5754                           tblptrl	equ	0xFF6
  5755                           tablat	equ	0xFF5
  5756                           prodh	equ	0xFF4
  5757                           prodl	equ	0xFF3
  5758                           intcon	equ	0xFF2
  5759                           intcon2	equ	0xFF1
  5760                           postinc0	equ	0xFEE
  5761                           wreg	equ	0xFE8
  5762                           indf2	equ	0xFDF
  5763                           postinc2	equ	0xFDE
  5764                           postdec2	equ	0xFDD
  5765                           plusw2	equ	0xFDB
  5766                           fsr2h	equ	0xFDA
  5767                           fsr2l	equ	0xFD9
  5768                           status	equ	0xFD8
  5769                           
  5770 ;; *************** function _ADC_Initialize *****************
  5771 ;; Defined at:
  5772 ;;		line 59 in file "mcc_generated_files/adc.c"
  5773 ;; Parameters:    Size  Location     Type
  5774 ;;		None
  5775 ;; Auto vars:     Size  Location     Type
  5776 ;;		None
  5777 ;; Return value:  Size  Location     Type
  5778 ;;                  1    wreg      void 
  5779 ;; Registers used:
  5780 ;;		wreg, status,2
  5781 ;; Tracked objects:
  5782 ;;		On entry : 0/0
  5783 ;;		On exit  : 0/0
  5784 ;;		Unchanged: 0/0
  5785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5786 ;;      Params:         0       0       0       0       0       0       0
  5787 ;;      Locals:         0       0       0       0       0       0       0
  5788 ;;      Temps:          0       0       0       0       0       0       0
  5789 ;;      Totals:         0       0       0       0       0       0       0
  5790 ;;Total ram usage:        0 bytes
  5791 ;; Hardware stack levels used:    1
  5792 ;; Hardware stack levels required when called:    4
  5793 ;; This function calls:
  5794 ;;		Nothing
  5795 ;; This function is called by:
  5796 ;;		_SYSTEM_Initialize
  5797 ;; This function uses a non-reentrant model
  5798 ;;
  5799                           
  5800                           	psect	text33
  5801  001B50                     __ptext33:
  5802                           	opt stack 0
  5803  001B50                     _ADC_Initialize:
  5804                           	opt stack 25
  5805                           
  5806                           ;adc.c: 64: ADCON0 = 0x01;
  5807                           
  5808                           ;incstack = 0
  5809  001B50  0E01               	movlw	1
  5810  001B52  6EC2               	movwf	4034,c	;volatile
  5811                           
  5812                           ;adc.c: 67: ADCON1 = 0x80;
  5813  001B54  0E80               	movlw	128
  5814  001B56  6EC1               	movwf	4033,c	;volatile
  5815                           
  5816                           ;adc.c: 70: ADCON2 = 0x12;
  5817  001B58  0E12               	movlw	18
  5818  001B5A  6EC0               	movwf	4032,c	;volatile
  5819                           
  5820                           ;adc.c: 72: ADCON2bits.ADFM = 1;
  5821  001B5C  8EC0               	bsf	4032,7,c	;volatile
  5822                           
  5823                           ;adc.c: 75: ADRESL = 0x00;
  5824  001B5E  0E00               	movlw	0
  5825  001B60  6EC3               	movwf	4035,c	;volatile
  5826                           
  5827                           ;adc.c: 78: ADRESH = 0x00;
  5828  001B62  0E00               	movlw	0
  5829  001B64  6EC4               	movwf	4036,c	;volatile
  5830  001B66  0012               	return		;funcret
  5831  001B68                     __end_of_ADC_Initialize:
  5832                           	opt stack 0
  5833                           tosu	equ	0xFFF
  5834                           tosh	equ	0xFFE
  5835                           tosl	equ	0xFFD
  5836                           pclath	equ	0xFFA
  5837                           tblptru	equ	0xFF8
  5838                           tblptrh	equ	0xFF7
  5839                           tblptrl	equ	0xFF6
  5840                           tablat	equ	0xFF5
  5841                           prodh	equ	0xFF4
  5842                           prodl	equ	0xFF3
  5843                           intcon	equ	0xFF2
  5844                           intcon2	equ	0xFF1
  5845                           postinc0	equ	0xFEE
  5846                           wreg	equ	0xFE8
  5847                           indf2	equ	0xFDF
  5848                           postinc2	equ	0xFDE
  5849                           postdec2	equ	0xFDD
  5850                           plusw2	equ	0xFDB
  5851                           fsr2h	equ	0xFDA
  5852                           fsr2l	equ	0xFD9
  5853                           status	equ	0xFD8
  5854                           
  5855 ;; *************** function _PDUStartup *****************
  5856 ;; Defined at:
  5857 ;;		line 18 in file "PDU.c"
  5858 ;; Parameters:    Size  Location     Type
  5859 ;;		None
  5860 ;; Auto vars:     Size  Location     Type
  5861 ;;		None
  5862 ;; Return value:  Size  Location     Type
  5863 ;;                  1    wreg      void 
  5864 ;; Registers used:
  5865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5866 ;; Tracked objects:
  5867 ;;		On entry : 0/0
  5868 ;;		On exit  : 0/0
  5869 ;;		Unchanged: 0/0
  5870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5871 ;;      Params:         0       0       0       0       0       0       0
  5872 ;;      Locals:         0       0       0       0       0       0       0
  5873 ;;      Temps:          0       0       0       0       0       0       0
  5874 ;;      Totals:         0       0       0       0       0       0       0
  5875 ;;Total ram usage:        0 bytes
  5876 ;; Hardware stack levels used:    1
  5877 ;; Hardware stack levels required when called:    8
  5878 ;; This function calls:
  5879 ;;		_ComputeStorageData
  5880 ;;		_EnableSlavePower
  5881 ;;		_StartUp595
  5882 ;;		_Update
  5883 ;; This function is called by:
  5884 ;;		_main
  5885 ;; This function uses a non-reentrant model
  5886 ;;
  5887                           
  5888                           	psect	text34
  5889  00169C                     __ptext34:
  5890                           	opt stack 0
  5891  00169C                     _PDUStartup:
  5892                           	opt stack 22
  5893                           
  5894                           ;PDU.c: 21: StartUp595();
  5895                           
  5896                           ;incstack = 0
  5897  00169C  EC1D  F00B         	call	_StartUp595	;wreg free
  5898                           
  5899                           ;PDU.c: 22: EnableSlavePower(SAS, OFF);
  5900  0016A0  0E00               	movlw	0
  5901  0016A2  0100               	movlb	0	; () banked
  5902  0016A4  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  5903  0016A6  0E00               	movlw	0
  5904  0016A8  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  5905  0016AA  0E03               	movlw	3
  5906  0016AC  EC97  F006         	call	_EnableSlavePower
  5907                           
  5908                           ;PDU.c: 23: EnableSlavePower(DDS, OFF);
  5909  0016B0  0E00               	movlw	0
  5910  0016B2  0100               	movlb	0	; () banked
  5911  0016B4  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  5912  0016B6  0E00               	movlw	0
  5913  0016B8  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  5914  0016BA  0E01               	movlw	1
  5915  0016BC  EC97  F006         	call	_EnableSlavePower
  5916                           
  5917                           ;PDU.c: 24: EnableSlavePower(MCS, OFF);
  5918  0016C0  0E00               	movlw	0
  5919  0016C2  0100               	movlb	0	; () banked
  5920  0016C4  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  5921  0016C6  0E00               	movlw	0
  5922  0016C8  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  5923  0016CA  0E02               	movlw	2
  5924  0016CC  EC97  F006         	call	_EnableSlavePower
  5925                           
  5926                           ;PDU.c: 25: EnableSlavePower(BMM, OFF);
  5927  0016D0  0E00               	movlw	0
  5928  0016D2  0100               	movlb	0	; () banked
  5929  0016D4  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  5930  0016D6  0E00               	movlw	0
  5931  0016D8  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  5932  0016DA  0E04               	movlw	4
  5933  0016DC  EC97  F006         	call	_EnableSlavePower
  5934                           
  5935                           ;PDU.c: 26: EnableSlavePower(TSS, OFF);
  5936  0016E0  0E00               	movlw	0
  5937  0016E2  0100               	movlb	0	; () banked
  5938  0016E4  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  5939  0016E6  0E00               	movlw	0
  5940  0016E8  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  5941  0016EA  0E05               	movlw	5
  5942  0016EC  EC97  F006         	call	_EnableSlavePower
  5943                           
  5944                           ;PDU.c: 27: Update();
  5945  0016F0  EC0F  F00E         	call	_Update	;wreg free
  5946                           
  5947                           ;PDU.c: 29: ComputeStorageData();
  5948  0016F4  EC0B  F007         	call	_ComputeStorageData	;wreg free
  5949  0016F8  0012               	return		;funcret
  5950  0016FA                     __end_of_PDUStartup:
  5951                           	opt stack 0
  5952                           tosu	equ	0xFFF
  5953                           tosh	equ	0xFFE
  5954                           tosl	equ	0xFFD
  5955                           pclath	equ	0xFFA
  5956                           tblptru	equ	0xFF8
  5957                           tblptrh	equ	0xFF7
  5958                           tblptrl	equ	0xFF6
  5959                           tablat	equ	0xFF5
  5960                           prodh	equ	0xFF4
  5961                           prodl	equ	0xFF3
  5962                           intcon	equ	0xFF2
  5963                           intcon2	equ	0xFF1
  5964                           postinc0	equ	0xFEE
  5965                           wreg	equ	0xFE8
  5966                           indf2	equ	0xFDF
  5967                           postinc2	equ	0xFDE
  5968                           postdec2	equ	0xFDD
  5969                           plusw2	equ	0xFDB
  5970                           fsr2h	equ	0xFDA
  5971                           fsr2l	equ	0xFD9
  5972                           status	equ	0xFD8
  5973                           
  5974 ;; *************** function _Update *****************
  5975 ;; Defined at:
  5976 ;;		line 208 in file "PDU.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;		None
  5979 ;; Auto vars:     Size  Location     Type
  5980 ;;		None
  5981 ;; Return value:  Size  Location     Type
  5982 ;;                  1    wreg      void 
  5983 ;; Registers used:
  5984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5985 ;; Tracked objects:
  5986 ;;		On entry : 0/0
  5987 ;;		On exit  : 0/0
  5988 ;;		Unchanged: 0/0
  5989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5990 ;;      Params:         0       0       0       0       0       0       0
  5991 ;;      Locals:         0       0       0       0       0       0       0
  5992 ;;      Temps:          0       0       0       0       0       0       0
  5993 ;;      Totals:         0       0       0       0       0       0       0
  5994 ;;Total ram usage:        0 bytes
  5995 ;; Hardware stack levels used:    1
  5996 ;; Hardware stack levels required when called:    6
  5997 ;; This function calls:
  5998 ;;		_writeRegisters
  5999 ;; This function is called by:
  6000 ;;		_processPowerRequest
  6001 ;;		_PDUStartup
  6002 ;;		_ReadCurrent
  6003 ;; This function uses a non-reentrant model
  6004 ;;
  6005                           
  6006                           	psect	text35
  6007  001C1E                     __ptext35:
  6008                           	opt stack 0
  6009  001C1E                     _Update:
  6010                           	opt stack 22
  6011                           
  6012                           ;PDU.c: 209: writeRegisters();
  6013                           
  6014                           ;incstack = 0
  6015  001C1E  EC61  F009         	call	_writeRegisters	;wreg free
  6016  001C22  0012               	return		;funcret
  6017  001C24                     __end_of_Update:
  6018                           	opt stack 0
  6019                           tosu	equ	0xFFF
  6020                           tosh	equ	0xFFE
  6021                           tosl	equ	0xFFD
  6022                           pclath	equ	0xFFA
  6023                           tblptru	equ	0xFF8
  6024                           tblptrh	equ	0xFF7
  6025                           tblptrl	equ	0xFF6
  6026                           tablat	equ	0xFF5
  6027                           prodh	equ	0xFF4
  6028                           prodl	equ	0xFF3
  6029                           intcon	equ	0xFF2
  6030                           intcon2	equ	0xFF1
  6031                           postinc0	equ	0xFEE
  6032                           wreg	equ	0xFE8
  6033                           indf2	equ	0xFDF
  6034                           postinc2	equ	0xFDE
  6035                           postdec2	equ	0xFDD
  6036                           plusw2	equ	0xFDB
  6037                           fsr2h	equ	0xFDA
  6038                           fsr2l	equ	0xFD9
  6039                           status	equ	0xFD8
  6040                           
  6041 ;; *************** function _StartUp595 *****************
  6042 ;; Defined at:
  6043 ;;		line 10 in file "Shift595.c"
  6044 ;; Parameters:    Size  Location     Type
  6045 ;;		None
  6046 ;; Auto vars:     Size  Location     Type
  6047 ;;		None
  6048 ;; Return value:  Size  Location     Type
  6049 ;;                  1    wreg      void 
  6050 ;; Registers used:
  6051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6052 ;; Tracked objects:
  6053 ;;		On entry : 0/0
  6054 ;;		On exit  : 0/0
  6055 ;;		Unchanged: 0/0
  6056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6057 ;;      Params:         0       0       0       0       0       0       0
  6058 ;;      Locals:         0       0       0       0       0       0       0
  6059 ;;      Temps:          0       0       0       0       0       0       0
  6060 ;;      Totals:         0       0       0       0       0       0       0
  6061 ;;Total ram usage:        0 bytes
  6062 ;; Hardware stack levels used:    1
  6063 ;; Hardware stack levels required when called:    7
  6064 ;; This function calls:
  6065 ;;		_Clear595
  6066 ;;		_Delay
  6067 ;; This function is called by:
  6068 ;;		_PDUStartup
  6069 ;; This function uses a non-reentrant model
  6070 ;;
  6071                           
  6072                           	psect	text36
  6073  00163A                     __ptext36:
  6074                           	opt stack 0
  6075  00163A                     _StartUp595:
  6076                           	opt stack 22
  6077                           
  6078                           ;incstack = 0
  6079                           ;Shift595.c: 12: do { LATD5 = 1; } while(0);
  6080  00163A  8A8C               	bsf	3980,5,c	;volatile
  6081                           
  6082                           ;Shift595.c: 13: do { LATB0 = 1; } while(0);
  6083  00163C  808A               	bsf	3978,0,c	;volatile
  6084                           
  6085                           ;Shift595.c: 15: Delay(2);
  6086  00163E  0E02               	movlw	2
  6087  001640  6E1B               	movwf	Delay@wait,c
  6088  001642  0E00               	movlw	0
  6089  001644  6E1C               	movwf	Delay@wait+1,c
  6090  001646  0E00               	movlw	0
  6091  001648  6E1D               	movwf	Delay@wait+2,c
  6092  00164A  0E00               	movlw	0
  6093  00164C  6E1E               	movwf	Delay@wait+3,c
  6094  00164E  EC1E  F00C         	call	_Delay	;wreg free
  6095                           
  6096                           ;Shift595.c: 16: do { LATD5 = 0; } while(0);
  6097  001652  9A8C               	bcf	3980,5,c	;volatile
  6098                           
  6099                           ;Shift595.c: 17: Delay(2);
  6100  001654  0E02               	movlw	2
  6101  001656  6E1B               	movwf	Delay@wait,c
  6102  001658  0E00               	movlw	0
  6103  00165A  6E1C               	movwf	Delay@wait+1,c
  6104  00165C  0E00               	movlw	0
  6105  00165E  6E1D               	movwf	Delay@wait+2,c
  6106  001660  0E00               	movlw	0
  6107  001662  6E1E               	movwf	Delay@wait+3,c
  6108  001664  EC1E  F00C         	call	_Delay	;wreg free
  6109                           
  6110                           ;Shift595.c: 18: do { LATB0 = 0; } while(0);
  6111  001668  908A               	bcf	3978,0,c	;volatile
  6112                           
  6113                           ;Shift595.c: 19: Delay(2);
  6114  00166A  0E02               	movlw	2
  6115  00166C  6E1B               	movwf	Delay@wait,c
  6116  00166E  0E00               	movlw	0
  6117  001670  6E1C               	movwf	Delay@wait+1,c
  6118  001672  0E00               	movlw	0
  6119  001674  6E1D               	movwf	Delay@wait+2,c
  6120  001676  0E00               	movlw	0
  6121  001678  6E1E               	movwf	Delay@wait+3,c
  6122  00167A  EC1E  F00C         	call	_Delay	;wreg free
  6123                           
  6124                           ;Shift595.c: 20: do { LATD5 = 1; } while(0);
  6125  00167E  8A8C               	bsf	3980,5,c	;volatile
  6126                           
  6127                           ;Shift595.c: 21: Delay(2);
  6128  001680  0E02               	movlw	2
  6129  001682  6E1B               	movwf	Delay@wait,c
  6130  001684  0E00               	movlw	0
  6131  001686  6E1C               	movwf	Delay@wait+1,c
  6132  001688  0E00               	movlw	0
  6133  00168A  6E1D               	movwf	Delay@wait+2,c
  6134  00168C  0E00               	movlw	0
  6135  00168E  6E1E               	movwf	Delay@wait+3,c
  6136  001690  EC1E  F00C         	call	_Delay	;wreg free
  6137                           
  6138                           ;Shift595.c: 22: do { LATB0 = 1; } while(0);
  6139  001694  808A               	bsf	3978,0,c	;volatile
  6140                           
  6141                           ;Shift595.c: 24: Clear595();
  6142  001696  EC43  F00C         	call	_Clear595	;wreg free
  6143  00169A  0012               	return		;funcret
  6144  00169C                     __end_of_StartUp595:
  6145                           	opt stack 0
  6146                           tosu	equ	0xFFF
  6147                           tosh	equ	0xFFE
  6148                           tosl	equ	0xFFD
  6149                           pclath	equ	0xFFA
  6150                           tblptru	equ	0xFF8
  6151                           tblptrh	equ	0xFF7
  6152                           tblptrl	equ	0xFF6
  6153                           tablat	equ	0xFF5
  6154                           prodh	equ	0xFF4
  6155                           prodl	equ	0xFF3
  6156                           intcon	equ	0xFF2
  6157                           intcon2	equ	0xFF1
  6158                           postinc0	equ	0xFEE
  6159                           wreg	equ	0xFE8
  6160                           indf2	equ	0xFDF
  6161                           postinc2	equ	0xFDE
  6162                           postdec2	equ	0xFDD
  6163                           plusw2	equ	0xFDB
  6164                           fsr2h	equ	0xFDA
  6165                           fsr2l	equ	0xFD9
  6166                           status	equ	0xFD8
  6167                           
  6168 ;; *************** function _Clear595 *****************
  6169 ;; Defined at:
  6170 ;;		line 39 in file "Shift595.c"
  6171 ;; Parameters:    Size  Location     Type
  6172 ;;		None
  6173 ;; Auto vars:     Size  Location     Type
  6174 ;;  i               2    4[BANK0 ] int 
  6175 ;; Return value:  Size  Location     Type
  6176 ;;                  1    wreg      void 
  6177 ;; Registers used:
  6178 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6179 ;; Tracked objects:
  6180 ;;		On entry : 0/0
  6181 ;;		On exit  : 0/0
  6182 ;;		Unchanged: 0/0
  6183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6184 ;;      Params:         0       0       0       0       0       0       0
  6185 ;;      Locals:         0       2       0       0       0       0       0
  6186 ;;      Temps:          0       0       0       0       0       0       0
  6187 ;;      Totals:         0       2       0       0       0       0       0
  6188 ;;Total ram usage:        2 bytes
  6189 ;; Hardware stack levels used:    1
  6190 ;; Hardware stack levels required when called:    6
  6191 ;; This function calls:
  6192 ;;		_writeRegisters
  6193 ;; This function is called by:
  6194 ;;		_StartUp595
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           	psect	text37
  6199  001886                     __ptext37:
  6200                           	opt stack 0
  6201  001886                     _Clear595:
  6202                           	opt stack 22
  6203                           
  6204                           ;Shift595.c: 40: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6205                           
  6206                           ;incstack = 0
  6207  001886  0E00               	movlw	0
  6208  001888  0100               	movlb	0	; () banked
  6209  00188A  6FD6               	movwf	(Clear595@i+1)& (0+255),b
  6210  00188C  0E17               	movlw	23
  6211  00188E  6FD5               	movwf	Clear595@i& (0+255),b
  6212  001890                     l3990:
  6213                           
  6214                           ; BSR set to: 0
  6215  001890  0100               	movlb	0	; () banked
  6216  001892  BFD6               	btfsc	(Clear595@i+1)& (0+255),7,b
  6217  001894  D014               	goto	l4000
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;Shift595.c: 41: registers[i] = 0;
  6221                           
  6222                           ; BSR set to: 0
  6223                           
  6224                           ; BSR set to: 0
  6225  001896  90D8               	bcf	status,0,c
  6226  001898  0100               	movlb	0	; () banked
  6227  00189A  35D5               	rlcf	Clear595@i& (0+255),w,b
  6228  00189C  6ED9               	movwf	fsr2l,c
  6229  00189E  0100               	movlb	0	; () banked
  6230  0018A0  35D6               	rlcf	(Clear595@i+1)& (0+255),w,b
  6231  0018A2  6EDA               	movwf	fsr2h,c
  6232  0018A4  0E00               	movlw	low _registers
  6233  0018A6  26D9               	addwf	fsr2l,f,c
  6234  0018A8  0E01               	movlw	high _registers
  6235  0018AA  22DA               	addwfc	fsr2h,f,c
  6236  0018AC  0E00               	movlw	0
  6237  0018AE  6EDE               	movwf	postinc2,c
  6238  0018B0  0E00               	movlw	0
  6239  0018B2  6EDD               	movwf	postdec2,c
  6240                           
  6241                           ; BSR set to: 0
  6242  0018B4  0100               	movlb	0	; () banked
  6243  0018B6  07D5               	decf	Clear595@i& (0+255),f,b
  6244  0018B8  A0D8               	btfss	status,0,c
  6245  0018BA  07D6               	decf	(Clear595@i+1)& (0+255),f,b
  6246  0018BC  D7E9               	goto	l3990
  6247  0018BE                     l4000:
  6248                           
  6249                           ; BSR set to: 0
  6250                           ;Shift595.c: 42: }
  6251                           ;Shift595.c: 44: writeRegisters();
  6252  0018BE  EC61  F009         	call	_writeRegisters	;wreg free
  6253  0018C2  0012               	return		;funcret
  6254  0018C4                     __end_of_Clear595:
  6255                           	opt stack 0
  6256                           tosu	equ	0xFFF
  6257                           tosh	equ	0xFFE
  6258                           tosl	equ	0xFFD
  6259                           pclath	equ	0xFFA
  6260                           tblptru	equ	0xFF8
  6261                           tblptrh	equ	0xFF7
  6262                           tblptrl	equ	0xFF6
  6263                           tablat	equ	0xFF5
  6264                           prodh	equ	0xFF4
  6265                           prodl	equ	0xFF3
  6266                           intcon	equ	0xFF2
  6267                           intcon2	equ	0xFF1
  6268                           postinc0	equ	0xFEE
  6269                           wreg	equ	0xFE8
  6270                           indf2	equ	0xFDF
  6271                           postinc2	equ	0xFDE
  6272                           postdec2	equ	0xFDD
  6273                           plusw2	equ	0xFDB
  6274                           fsr2h	equ	0xFDA
  6275                           fsr2l	equ	0xFD9
  6276                           status	equ	0xFD8
  6277                           
  6278 ;; *************** function _writeRegisters *****************
  6279 ;; Defined at:
  6280 ;;		line 50 in file "Shift595.c"
  6281 ;; Parameters:    Size  Location     Type
  6282 ;;		None
  6283 ;; Auto vars:     Size  Location     Type
  6284 ;;  i               2    2[BANK0 ] int 
  6285 ;;  val             2    0[BANK0 ] int 
  6286 ;; Return value:  Size  Location     Type
  6287 ;;                  1    wreg      void 
  6288 ;; Registers used:
  6289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6290 ;; Tracked objects:
  6291 ;;		On entry : 0/0
  6292 ;;		On exit  : 0/0
  6293 ;;		Unchanged: 0/0
  6294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6295 ;;      Params:         0       0       0       0       0       0       0
  6296 ;;      Locals:         0       4       0       0       0       0       0
  6297 ;;      Temps:          0       0       0       0       0       0       0
  6298 ;;      Totals:         0       4       0       0       0       0       0
  6299 ;;Total ram usage:        4 bytes
  6300 ;; Hardware stack levels used:    1
  6301 ;; Hardware stack levels required when called:    5
  6302 ;; This function calls:
  6303 ;;		_Delay
  6304 ;; This function is called by:
  6305 ;;		_Update
  6306 ;;		_Clear595
  6307 ;; This function uses a non-reentrant model
  6308 ;;
  6309                           
  6310                           	psect	text38
  6311  0012C2                     __ptext38:
  6312                           	opt stack 0
  6313  0012C2                     _writeRegisters:
  6314                           	opt stack 22
  6315                           
  6316                           ;Shift595.c: 51: int val = 0;
  6317                           
  6318                           ;incstack = 0
  6319  0012C2  0E00               	movlw	0
  6320  0012C4  0100               	movlb	0	; () banked
  6321  0012C6  6FD2               	movwf	(writeRegisters@val+1)& (0+255),b
  6322  0012C8  0E00               	movlw	0
  6323  0012CA  6FD1               	movwf	writeRegisters@val& (0+255),b
  6324                           
  6325                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6326  0012CC  0E00               	movlw	0
  6327  0012CE  0100               	movlb	0	; () banked
  6328  0012D0  6FD4               	movwf	(writeRegisters@i+1)& (0+255),b
  6329  0012D2  0E17               	movlw	23
  6330  0012D4  6FD3               	movwf	writeRegisters@i& (0+255),b
  6331  0012D6                     l3884:
  6332                           
  6333                           ; BSR set to: 0
  6334  0012D6  0100               	movlb	0	; () banked
  6335  0012D8  BFD4               	btfsc	(writeRegisters@i+1)& (0+255),7,b
  6336  0012DA  D024               	goto	l747
  6337                           
  6338                           ; BSR set to: 0
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  6342                           
  6343                           ; BSR set to: 0
  6344  0012DC  9E8C               	bcf	3980,7,c	;volatile
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;Shift595.c: 55: val = registers[i];
  6348                           
  6349                           ; BSR set to: 0
  6350  0012DE  90D8               	bcf	status,0,c
  6351  0012E0  0100               	movlb	0	; () banked
  6352  0012E2  35D3               	rlcf	writeRegisters@i& (0+255),w,b
  6353  0012E4  6ED9               	movwf	fsr2l,c
  6354  0012E6  0100               	movlb	0	; () banked
  6355  0012E8  35D4               	rlcf	(writeRegisters@i+1)& (0+255),w,b
  6356  0012EA  6EDA               	movwf	fsr2h,c
  6357  0012EC  0E00               	movlw	low _registers
  6358  0012EE  26D9               	addwf	fsr2l,f,c
  6359  0012F0  0E01               	movlw	high _registers
  6360  0012F2  22DA               	addwfc	fsr2h,f,c
  6361  0012F4  CFDE F0D1          	movff	postinc2,writeRegisters@val
  6362  0012F8  CFDD F0D2          	movff	postdec2,writeRegisters@val+1
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;Shift595.c: 56: if (val == 1) {
  6366  0012FC  0100               	movlb	0	; () banked
  6367  0012FE  05D1               	decf	writeRegisters@val& (0+255),w,b
  6368  001300  0100               	movlb	0	; () banked
  6369  001302  11D2               	iorwf	(writeRegisters@val+1)& (0+255),w,b
  6370  001304  A4D8               	btfss	status,2,c
  6371  001306  D002               	goto	l3892
  6372                           
  6373                           ; BSR set to: 0
  6374                           
  6375                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  6376  001308  888C               	bsf	3980,4,c	;volatile
  6377                           
  6378                           ; BSR set to: 0
  6379                           ;Shift595.c: 58: } else if (val == 0) {
  6380  00130A  D006               	goto	l745
  6381  00130C                     l3892:
  6382                           
  6383                           ; BSR set to: 0
  6384  00130C  0100               	movlb	0	; () banked
  6385  00130E  51D1               	movf	writeRegisters@val& (0+255),w,b
  6386  001310  0100               	movlb	0	; () banked
  6387  001312  11D2               	iorwf	(writeRegisters@val+1)& (0+255),w,b
  6388  001314  B4D8               	btfsc	status,2,c
  6389                           
  6390                           ; BSR set to: 0
  6391                           
  6392                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  6393  001316  988C               	bcf	3980,4,c	;volatile
  6394  001318                     l745:
  6395                           
  6396                           ; BSR set to: 0
  6397  001318  8E8C               	bsf	3980,7,c	;volatile
  6398                           
  6399                           ; BSR set to: 0
  6400                           
  6401                           ; BSR set to: 0
  6402  00131A  0100               	movlb	0	; () banked
  6403  00131C  07D3               	decf	writeRegisters@i& (0+255),f,b
  6404  00131E  A0D8               	btfss	status,0,c
  6405  001320  07D4               	decf	(writeRegisters@i+1)& (0+255),f,b
  6406  001322  D7D9               	goto	l3884
  6407  001324                     l747:
  6408                           
  6409                           ; BSR set to: 0
  6410  001324  9E8C               	bcf	3980,7,c	;volatile
  6411                           
  6412                           ; BSR set to: 0
  6413                           ;Shift595.c: 67: Delay(1);
  6414                           
  6415                           ; BSR set to: 0
  6416  001326  0E01               	movlw	1
  6417  001328  6E1B               	movwf	Delay@wait,c
  6418  00132A  0E00               	movlw	0
  6419  00132C  6E1C               	movwf	Delay@wait+1,c
  6420  00132E  0E00               	movlw	0
  6421  001330  6E1D               	movwf	Delay@wait+2,c
  6422  001332  0E00               	movlw	0
  6423  001334  6E1E               	movwf	Delay@wait+3,c
  6424  001336  EC1E  F00C         	call	_Delay	;wreg free
  6425                           
  6426                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  6427  00133A  8C8C               	bsf	3980,6,c	;volatile
  6428                           
  6429                           ;Shift595.c: 69: Delay(1);
  6430  00133C  0E01               	movlw	1
  6431  00133E  6E1B               	movwf	Delay@wait,c
  6432  001340  0E00               	movlw	0
  6433  001342  6E1C               	movwf	Delay@wait+1,c
  6434  001344  0E00               	movlw	0
  6435  001346  6E1D               	movwf	Delay@wait+2,c
  6436  001348  0E00               	movlw	0
  6437  00134A  6E1E               	movwf	Delay@wait+3,c
  6438  00134C  EC1E  F00C         	call	_Delay	;wreg free
  6439                           
  6440                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  6441  001350  9C8C               	bcf	3980,6,c	;volatile
  6442  001352  0012               	return	
  6443  001354                     __end_of_writeRegisters:
  6444                           	opt stack 0
  6445                           tosu	equ	0xFFF
  6446                           tosh	equ	0xFFE
  6447                           tosl	equ	0xFFD
  6448                           pclath	equ	0xFFA
  6449                           tblptru	equ	0xFF8
  6450                           tblptrh	equ	0xFF7
  6451                           tblptrl	equ	0xFF6
  6452                           tablat	equ	0xFF5
  6453                           prodh	equ	0xFF4
  6454                           prodl	equ	0xFF3
  6455                           intcon	equ	0xFF2
  6456                           intcon2	equ	0xFF1
  6457                           postinc0	equ	0xFEE
  6458                           wreg	equ	0xFE8
  6459                           indf2	equ	0xFDF
  6460                           postinc2	equ	0xFDE
  6461                           postdec2	equ	0xFDD
  6462                           plusw2	equ	0xFDB
  6463                           fsr2h	equ	0xFDA
  6464                           fsr2l	equ	0xFD9
  6465                           status	equ	0xFD8
  6466                           
  6467 ;; *************** function _EnableSlavePower *****************
  6468 ;; Defined at:
  6469 ;;		line 34 in file "PDU.c"
  6470 ;; Parameters:    Size  Location     Type
  6471 ;;  slave           1    wreg     enum E6
  6472 ;;  onof            2    0[BANK0 ] int 
  6473 ;; Auto vars:     Size  Location     Type
  6474 ;;  slave           1    2[BANK0 ] enum E6
  6475 ;; Return value:  Size  Location     Type
  6476 ;;                  1    wreg      void 
  6477 ;; Registers used:
  6478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6479 ;; Tracked objects:
  6480 ;;		On entry : 0/0
  6481 ;;		On exit  : 0/0
  6482 ;;		Unchanged: 0/0
  6483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6484 ;;      Params:         0       2       0       0       0       0       0
  6485 ;;      Locals:         0       1       0       0       0       0       0
  6486 ;;      Temps:          0       0       0       0       0       0       0
  6487 ;;      Totals:         0       3       0       0       0       0       0
  6488 ;;Total ram usage:        3 bytes
  6489 ;; Hardware stack levels used:    1
  6490 ;; Hardware stack levels required when called:    5
  6491 ;; This function calls:
  6492 ;;		_SetPin595
  6493 ;; This function is called by:
  6494 ;;		_processPowerRequest
  6495 ;;		_PDUStartup
  6496 ;;		_FuseSystem
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           	psect	text39
  6501  000D2E                     __ptext39:
  6502                           	opt stack 0
  6503  000D2E                     _EnableSlavePower:
  6504                           	opt stack 23
  6505                           
  6506                           ;incstack = 0
  6507                           ;EnableSlavePower@slave stored from wreg
  6508  000D2E  0100               	movlb	0	; () banked
  6509  000D30  6FD3               	movwf	EnableSlavePower@slave& (0+255),b
  6510                           
  6511                           ;PDU.c: 35: switch (slave) {
  6512  000D32  D05C               	goto	l3956
  6513  000D34                     l3940:
  6514                           
  6515                           ;PDU.c: 37: SetPin595(2, 6, onof);
  6516  000D34  0E00               	movlw	0
  6517  000D36  6E1C               	movwf	SetPin595@Reg+1,c
  6518  000D38  0E02               	movlw	2
  6519  000D3A  6E1B               	movwf	SetPin595@Reg,c
  6520  000D3C  0E00               	movlw	0
  6521  000D3E  6E1E               	movwf	SetPin595@pin+1,c
  6522  000D40  0E06               	movlw	6
  6523  000D42  6E1D               	movwf	SetPin595@pin,c
  6524  000D44  C0D1  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6525  000D48  C0D2  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6526  000D4C  ECD2  F00B         	call	_SetPin595	;wreg free
  6527                           
  6528                           ;PDU.c: 38: break;
  6529  000D50  0012               	return	
  6530  000D52                     l3942:
  6531                           
  6532                           ;PDU.c: 40: SetPin595(1, 1, onof);
  6533  000D52  0E00               	movlw	0
  6534  000D54  6E1C               	movwf	SetPin595@Reg+1,c
  6535  000D56  0E01               	movlw	1
  6536  000D58  6E1B               	movwf	SetPin595@Reg,c
  6537  000D5A  0E00               	movlw	0
  6538  000D5C  6E1E               	movwf	SetPin595@pin+1,c
  6539  000D5E  0E01               	movlw	1
  6540  000D60  6E1D               	movwf	SetPin595@pin,c
  6541  000D62  C0D1  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6542  000D66  C0D2  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6543  000D6A  ECD2  F00B         	call	_SetPin595	;wreg free
  6544                           
  6545                           ;PDU.c: 41: break;
  6546  000D6E  0012               	return	
  6547  000D70                     l3944:
  6548                           
  6549                           ;PDU.c: 43: SetPin595(1, 6, onof);
  6550  000D70  0E00               	movlw	0
  6551  000D72  6E1C               	movwf	SetPin595@Reg+1,c
  6552  000D74  0E01               	movlw	1
  6553  000D76  6E1B               	movwf	SetPin595@Reg,c
  6554  000D78  0E00               	movlw	0
  6555  000D7A  6E1E               	movwf	SetPin595@pin+1,c
  6556  000D7C  0E06               	movlw	6
  6557  000D7E  6E1D               	movwf	SetPin595@pin,c
  6558  000D80  C0D1  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6559  000D84  C0D2  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6560  000D88  ECD2  F00B         	call	_SetPin595	;wreg free
  6561                           
  6562                           ;PDU.c: 44: MCSOn = onof;
  6563  000D8C  C0D1  F03A         	movff	EnableSlavePower@onof,_MCSOn
  6564                           
  6565                           ;PDU.c: 45: break;
  6566  000D90  0012               	return	
  6567  000D92                     l3948:
  6568                           
  6569                           ;PDU.c: 47: SetPin595(2, 1, onof);
  6570  000D92  0E00               	movlw	0
  6571  000D94  6E1C               	movwf	SetPin595@Reg+1,c
  6572  000D96  0E02               	movlw	2
  6573  000D98  6E1B               	movwf	SetPin595@Reg,c
  6574  000D9A  0E00               	movlw	0
  6575  000D9C  6E1E               	movwf	SetPin595@pin+1,c
  6576  000D9E  0E01               	movlw	1
  6577  000DA0  6E1D               	movwf	SetPin595@pin,c
  6578  000DA2  C0D1  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6579  000DA6  C0D2  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6580  000DAA  ECD2  F00B         	call	_SetPin595	;wreg free
  6581                           
  6582                           ;PDU.c: 48: break;
  6583  000DAE  0012               	return	
  6584  000DB0                     l3950:
  6585                           
  6586                           ;PDU.c: 50: SetPin595(3, 6, onof);
  6587  000DB0  0E00               	movlw	0
  6588  000DB2  6E1C               	movwf	SetPin595@Reg+1,c
  6589  000DB4  0E03               	movlw	3
  6590  000DB6  6E1B               	movwf	SetPin595@Reg,c
  6591  000DB8  0E00               	movlw	0
  6592  000DBA  6E1E               	movwf	SetPin595@pin+1,c
  6593  000DBC  0E06               	movlw	6
  6594  000DBE  6E1D               	movwf	SetPin595@pin,c
  6595  000DC0  C0D1  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6596  000DC4  C0D2  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6597  000DC8  ECD2  F00B         	call	_SetPin595	;wreg free
  6598                           
  6599                           ;PDU.c: 51: break;
  6600  000DCC  0012               	return	
  6601  000DCE                     l3952:
  6602                           
  6603                           ;PDU.c: 53: SetPin595(3, 1, onof);
  6604  000DCE  0E00               	movlw	0
  6605  000DD0  6E1C               	movwf	SetPin595@Reg+1,c
  6606  000DD2  0E03               	movlw	3
  6607  000DD4  6E1B               	movwf	SetPin595@Reg,c
  6608  000DD6  0E00               	movlw	0
  6609  000DD8  6E1E               	movwf	SetPin595@pin+1,c
  6610  000DDA  0E01               	movlw	1
  6611  000DDC  6E1D               	movwf	SetPin595@pin,c
  6612  000DDE  C0D1  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6613  000DE2  C0D2  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6614  000DE6  ECD2  F00B         	call	_SetPin595	;wreg free
  6615                           
  6616                           ;PDU.c: 55: }
  6617                           
  6618                           ;PDU.c: 54: break;
  6619  000DEA  0012               	return	
  6620  000DEC                     l3956:
  6621  000DEC  0100               	movlb	0	; () banked
  6622  000DEE  51D3               	movf	EnableSlavePower@slave& (0+255),w,b
  6623                           
  6624                           ; Switch size 1, requested type "space"
  6625                           ; Number of cases is 6, Range of values is 1 to 6
  6626                           ; switch strategies available:
  6627                           ; Name         Instructions Cycles
  6628                           ; simple_byte           19    10 (average)
  6629                           ;	Chosen strategy is simple_byte
  6630  000DF0  0A01               	xorlw	1	; case 1
  6631  000DF2  B4D8               	btfsc	status,2,c
  6632  000DF4  D7CE               	goto	l3948
  6633  000DF6  0A03               	xorlw	3	; case 2
  6634  000DF8  B4D8               	btfsc	status,2,c
  6635  000DFA  D7BA               	goto	l3944
  6636  000DFC  0A01               	xorlw	1	; case 3
  6637  000DFE  B4D8               	btfsc	status,2,c
  6638  000E00  D799               	goto	l3940
  6639  000E02  0A07               	xorlw	7	; case 4
  6640  000E04  B4D8               	btfsc	status,2,c
  6641  000E06  D7A5               	goto	l3942
  6642  000E08  0A01               	xorlw	1	; case 5
  6643  000E0A  B4D8               	btfsc	status,2,c
  6644  000E0C  D7D1               	goto	l3950
  6645  000E0E  0A03               	xorlw	3	; case 6
  6646  000E10  A4D8               	btfss	status,2,c
  6647  000E12  0012               	return	
  6648  000E14  D7DC               	goto	l3952
  6649  000E16                     __end_of_EnableSlavePower:
  6650                           	opt stack 0
  6651                           tosu	equ	0xFFF
  6652                           tosh	equ	0xFFE
  6653                           tosl	equ	0xFFD
  6654                           pclath	equ	0xFFA
  6655                           tblptru	equ	0xFF8
  6656                           tblptrh	equ	0xFF7
  6657                           tblptrl	equ	0xFF6
  6658                           tablat	equ	0xFF5
  6659                           prodh	equ	0xFF4
  6660                           prodl	equ	0xFF3
  6661                           intcon	equ	0xFF2
  6662                           intcon2	equ	0xFF1
  6663                           postinc0	equ	0xFEE
  6664                           wreg	equ	0xFE8
  6665                           indf2	equ	0xFDF
  6666                           postinc2	equ	0xFDE
  6667                           postdec2	equ	0xFDD
  6668                           plusw2	equ	0xFDB
  6669                           fsr2h	equ	0xFDA
  6670                           fsr2l	equ	0xFD9
  6671                           status	equ	0xFD8
  6672                           
  6673 ;; *************** function _SetPin595 *****************
  6674 ;; Defined at:
  6675 ;;		line 32 in file "Shift595.c"
  6676 ;; Parameters:    Size  Location     Type
  6677 ;;  Reg             2   26[COMRAM] int 
  6678 ;;  pin             2   28[COMRAM] int 
  6679 ;;  value           2   30[COMRAM] int 
  6680 ;; Auto vars:     Size  Location     Type
  6681 ;;		None
  6682 ;; Return value:  Size  Location     Type
  6683 ;;                  1    wreg      void 
  6684 ;; Registers used:
  6685 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6686 ;; Tracked objects:
  6687 ;;		On entry : 0/0
  6688 ;;		On exit  : 0/0
  6689 ;;		Unchanged: 0/0
  6690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6691 ;;      Params:         6       0       0       0       0       0       0
  6692 ;;      Locals:         0       0       0       0       0       0       0
  6693 ;;      Temps:          4       0       0       0       0       0       0
  6694 ;;      Totals:        10       0       0       0       0       0       0
  6695 ;;Total ram usage:       10 bytes
  6696 ;; Hardware stack levels used:    1
  6697 ;; Hardware stack levels required when called:    4
  6698 ;; This function calls:
  6699 ;;		Nothing
  6700 ;; This function is called by:
  6701 ;;		_EnableSlavePower
  6702 ;;		_ReadCurrent
  6703 ;; This function uses a non-reentrant model
  6704 ;;
  6705                           
  6706                           	psect	text40
  6707  0017A4                     __ptext40:
  6708                           	opt stack 0
  6709  0017A4                     _SetPin595:
  6710                           	opt stack 23
  6711                           
  6712                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
  6713                           
  6714                           ;incstack = 0
  6715  0017A4  0EF0               	movlw	240
  6716  0017A6  6E21               	movwf	??_SetPin595& (0+255),c
  6717  0017A8  0EFF               	movlw	255
  6718  0017AA  6E22               	movwf	(??_SetPin595+1)& (0+255),c
  6719  0017AC  C01B  F023         	movff	SetPin595@Reg,??_SetPin595+2
  6720  0017B0  C01C  F024         	movff	SetPin595@Reg+1,??_SetPin595+3
  6721  0017B4  90D8               	bcf	status,0,c
  6722  0017B6  3623               	rlcf	??_SetPin595+2,f,c
  6723  0017B8  3624               	rlcf	??_SetPin595+3,f,c
  6724  0017BA  90D8               	bcf	status,0,c
  6725  0017BC  3623               	rlcf	??_SetPin595+2,f,c
  6726  0017BE  3624               	rlcf	??_SetPin595+3,f,c
  6727  0017C0  90D8               	bcf	status,0,c
  6728  0017C2  3623               	rlcf	??_SetPin595+2,f,c
  6729  0017C4  3624               	rlcf	??_SetPin595+3,f,c
  6730  0017C6  501D               	movf	SetPin595@pin,w,c
  6731  0017C8  2623               	addwf	??_SetPin595+2,f,c
  6732  0017CA  501E               	movf	SetPin595@pin+1,w,c
  6733  0017CC  2224               	addwfc	??_SetPin595+3,f,c
  6734  0017CE  90D8               	bcf	status,0,c
  6735  0017D0  3623               	rlcf	??_SetPin595+2,f,c
  6736  0017D2  3624               	rlcf	??_SetPin595+3,f,c
  6737  0017D4  5021               	movf	??_SetPin595,w,c
  6738  0017D6  2623               	addwf	??_SetPin595+2,f,c
  6739  0017D8  5022               	movf	??_SetPin595+1,w,c
  6740  0017DA  2224               	addwfc	??_SetPin595+3,f,c
  6741  0017DC  0E00               	movlw	low _registers
  6742  0017DE  2423               	addwf	??_SetPin595+2,w,c
  6743  0017E0  6ED9               	movwf	fsr2l,c
  6744  0017E2  0E01               	movlw	high _registers
  6745  0017E4  2024               	addwfc	??_SetPin595+3,w,c
  6746  0017E6  6EDA               	movwf	fsr2h,c
  6747  0017E8  C01F  FFDE         	movff	SetPin595@value,postinc2
  6748  0017EC  C020  FFDD         	movff	SetPin595@value+1,postdec2
  6749  0017F0  0012               	return		;funcret
  6750  0017F2                     __end_of_SetPin595:
  6751                           	opt stack 0
  6752                           tosu	equ	0xFFF
  6753                           tosh	equ	0xFFE
  6754                           tosl	equ	0xFFD
  6755                           pclath	equ	0xFFA
  6756                           tblptru	equ	0xFF8
  6757                           tblptrh	equ	0xFF7
  6758                           tblptrl	equ	0xFF6
  6759                           tablat	equ	0xFF5
  6760                           prodh	equ	0xFF4
  6761                           prodl	equ	0xFF3
  6762                           intcon	equ	0xFF2
  6763                           intcon2	equ	0xFF1
  6764                           postinc0	equ	0xFEE
  6765                           wreg	equ	0xFE8
  6766                           indf2	equ	0xFDF
  6767                           postinc2	equ	0xFDE
  6768                           postdec2	equ	0xFDD
  6769                           plusw2	equ	0xFDB
  6770                           fsr2h	equ	0xFDA
  6771                           fsr2l	equ	0xFD9
  6772                           status	equ	0xFD8
  6773                           
  6774 ;; *************** function _ComputeStorageData *****************
  6775 ;; Defined at:
  6776 ;;		line 157 in file "PDU.c"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;		None
  6779 ;; Auto vars:     Size  Location     Type
  6780 ;;  i               2   29[COMRAM] int 
  6781 ;; Return value:  Size  Location     Type
  6782 ;;                  1    wreg      void 
  6783 ;; Registers used:
  6784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6785 ;; Tracked objects:
  6786 ;;		On entry : 0/0
  6787 ;;		On exit  : 0/0
  6788 ;;		Unchanged: 0/0
  6789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6790 ;;      Params:         0       0       0       0       0       0       0
  6791 ;;      Locals:         2       0       0       0       0       0       0
  6792 ;;      Temps:          2       0       0       0       0       0       0
  6793 ;;      Totals:         4       0       0       0       0       0       0
  6794 ;;Total ram usage:        4 bytes
  6795 ;; Hardware stack levels used:    1
  6796 ;; Hardware stack levels required when called:    5
  6797 ;; This function calls:
  6798 ;;		_DATAEE_ReadByte
  6799 ;; This function is called by:
  6800 ;;		_PDUStartup
  6801 ;;		_main
  6802 ;; This function uses a non-reentrant model
  6803 ;;
  6804                           
  6805                           	psect	text41
  6806  000E16                     __ptext41:
  6807                           	opt stack 0
  6808  000E16                     _ComputeStorageData:
  6809                           	opt stack 24
  6810                           
  6811                           ;PDU.c: 158: for (int i = 0; i < 12; i++) {
  6812                           
  6813                           ;incstack = 0
  6814  000E16  0E00               	movlw	0
  6815  000E18  6E1F               	movwf	ComputeStorageData@i+1,c
  6816  000E1A  0E00               	movlw	0
  6817  000E1C  6E1E               	movwf	ComputeStorageData@i,c
  6818  000E1E                     l4346:
  6819  000E1E  BE1F               	btfsc	ComputeStorageData@i+1,7,c
  6820  000E20  D006               	goto	l4350
  6821  000E22  501F               	movf	ComputeStorageData@i+1,w,c
  6822  000E24  E111               	bnz	l4356
  6823  000E26  0E0C               	movlw	12
  6824  000E28  5C1E               	subwf	ComputeStorageData@i,w,c
  6825  000E2A  B0D8               	btfsc	status,0,c
  6826  000E2C  D00D               	goto	l4356
  6827  000E2E                     l4350:
  6828                           
  6829                           ;PDU.c: 159: data[i] = DATAEE_ReadByte(i);
  6830  000E2E  0E84               	movlw	low _data
  6831  000E30  241E               	addwf	ComputeStorageData@i,w,c
  6832  000E32  6ED9               	movwf	fsr2l,c
  6833  000E34  0E00               	movlw	high _data
  6834  000E36  201F               	addwfc	ComputeStorageData@i+1,w,c
  6835  000E38  6EDA               	movwf	fsr2h,c
  6836  000E3A  501E               	movf	ComputeStorageData@i,w,c
  6837  000E3C  ECE9  F00D         	call	_DATAEE_ReadByte
  6838  000E40  6EDF               	movwf	indf2,c
  6839  000E42  4A1E               	infsnz	ComputeStorageData@i,f,c
  6840  000E44  2A1F               	incf	ComputeStorageData@i+1,f,c
  6841  000E46  D7EB               	goto	l4346
  6842  000E48                     l4356:
  6843                           
  6844                           ;PDU.c: 160: }
  6845                           ;PDU.c: 161: Currentcomp[0] = ((data[0] << 8) | data[1]);
  6846  000E48  0100               	movlb	0	; () banked
  6847  000E4A  5185               	movf	(_data+1)& (0+255),w,b
  6848  000E4C  C084  F01C         	movff	_data,??_ComputeStorageData
  6849  000E50  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  6850  000E52  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  6851  000E56  6A1C               	clrf	??_ComputeStorageData,c
  6852  000E58  101C               	iorwf	??_ComputeStorageData,w,c
  6853  000E5A  0100               	movlb	0	; () banked
  6854  000E5C  6F78               	movwf	_Currentcomp& (0+255),b
  6855  000E5E  501D               	movf	??_ComputeStorageData+1,w,c
  6856  000E60  0100               	movlb	0	; () banked
  6857  000E62  6F79               	movwf	(_Currentcomp+1)& (0+255),b
  6858                           
  6859                           ;PDU.c: 162: Currentcomp[1] = ((data[2] << 8) | data[3]);
  6860  000E64  0100               	movlb	0	; () banked
  6861  000E66  5187               	movf	(_data+3)& (0+255),w,b
  6862  000E68  C086  F01C         	movff	_data+2,??_ComputeStorageData
  6863  000E6C  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  6864  000E6E  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  6865  000E72  6A1C               	clrf	??_ComputeStorageData,c
  6866  000E74  101C               	iorwf	??_ComputeStorageData,w,c
  6867  000E76  0100               	movlb	0	; () banked
  6868  000E78  6F7A               	movwf	(_Currentcomp+2)& (0+255),b
  6869  000E7A  501D               	movf	??_ComputeStorageData+1,w,c
  6870  000E7C  0100               	movlb	0	; () banked
  6871  000E7E  6F7B               	movwf	(_Currentcomp+3)& (0+255),b
  6872                           
  6873                           ;PDU.c: 163: Currentcomp[2] = ((data[4] << 8) | data[5]);
  6874  000E80  0100               	movlb	0	; () banked
  6875  000E82  5189               	movf	(_data+5)& (0+255),w,b
  6876  000E84  C088  F01C         	movff	_data+4,??_ComputeStorageData
  6877  000E88  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  6878  000E8A  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  6879  000E8E  6A1C               	clrf	??_ComputeStorageData,c
  6880  000E90  101C               	iorwf	??_ComputeStorageData,w,c
  6881  000E92  0100               	movlb	0	; () banked
  6882  000E94  6F7C               	movwf	(_Currentcomp+4)& (0+255),b
  6883  000E96  501D               	movf	??_ComputeStorageData+1,w,c
  6884  000E98  0100               	movlb	0	; () banked
  6885  000E9A  6F7D               	movwf	(_Currentcomp+5)& (0+255),b
  6886                           
  6887                           ;PDU.c: 164: Currentcomp[3] = ((data[6] << 8) | data[7]);
  6888  000E9C  0100               	movlb	0	; () banked
  6889  000E9E  518B               	movf	(_data+7)& (0+255),w,b
  6890  000EA0  C08A  F01C         	movff	_data+6,??_ComputeStorageData
  6891  000EA4  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  6892  000EA6  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  6893  000EAA  6A1C               	clrf	??_ComputeStorageData,c
  6894  000EAC  101C               	iorwf	??_ComputeStorageData,w,c
  6895  000EAE  0100               	movlb	0	; () banked
  6896  000EB0  6F7E               	movwf	(_Currentcomp+6)& (0+255),b
  6897  000EB2  501D               	movf	??_ComputeStorageData+1,w,c
  6898  000EB4  0100               	movlb	0	; () banked
  6899  000EB6  6F7F               	movwf	(_Currentcomp+7)& (0+255),b
  6900                           
  6901                           ;PDU.c: 165: Currentcomp[4] = ((data[8] << 8) | data[9]);
  6902  000EB8  0100               	movlb	0	; () banked
  6903  000EBA  518D               	movf	(_data+9)& (0+255),w,b
  6904  000EBC  C08C  F01C         	movff	_data+8,??_ComputeStorageData
  6905  000EC0  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  6906  000EC2  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  6907  000EC6  6A1C               	clrf	??_ComputeStorageData,c
  6908  000EC8  101C               	iorwf	??_ComputeStorageData,w,c
  6909  000ECA  0100               	movlb	0	; () banked
  6910  000ECC  6F80               	movwf	(_Currentcomp+8)& (0+255),b
  6911  000ECE  501D               	movf	??_ComputeStorageData+1,w,c
  6912  000ED0  0100               	movlb	0	; () banked
  6913  000ED2  6F81               	movwf	(_Currentcomp+9)& (0+255),b
  6914                           
  6915                           ;PDU.c: 166: Currentcomp[5] = ((data[10] << 8) | data[11]);
  6916  000ED4  0100               	movlb	0	; () banked
  6917  000ED6  518F               	movf	(_data+11)& (0+255),w,b
  6918  000ED8  C08E  F01C         	movff	_data+10,??_ComputeStorageData
  6919  000EDC  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  6920  000EDE  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  6921  000EE2  6A1C               	clrf	??_ComputeStorageData,c
  6922  000EE4  101C               	iorwf	??_ComputeStorageData,w,c
  6923  000EE6  0100               	movlb	0	; () banked
  6924  000EE8  6F82               	movwf	(_Currentcomp+10)& (0+255),b
  6925  000EEA  501D               	movf	??_ComputeStorageData+1,w,c
  6926  000EEC  0100               	movlb	0	; () banked
  6927  000EEE  6F83               	movwf	(_Currentcomp+11)& (0+255),b
  6928                           
  6929                           ; BSR set to: 0
  6930  000EF0  0012               	return		;funcret
  6931  000EF2                     __end_of_ComputeStorageData:
  6932                           	opt stack 0
  6933                           tosu	equ	0xFFF
  6934                           tosh	equ	0xFFE
  6935                           tosl	equ	0xFFD
  6936                           pclath	equ	0xFFA
  6937                           tblptru	equ	0xFF8
  6938                           tblptrh	equ	0xFF7
  6939                           tblptrl	equ	0xFF6
  6940                           tablat	equ	0xFF5
  6941                           prodh	equ	0xFF4
  6942                           prodl	equ	0xFF3
  6943                           intcon	equ	0xFF2
  6944                           intcon2	equ	0xFF1
  6945                           postinc0	equ	0xFEE
  6946                           wreg	equ	0xFE8
  6947                           indf2	equ	0xFDF
  6948                           postinc2	equ	0xFDE
  6949                           postdec2	equ	0xFDD
  6950                           plusw2	equ	0xFDB
  6951                           fsr2h	equ	0xFDA
  6952                           fsr2l	equ	0xFD9
  6953                           status	equ	0xFD8
  6954                           
  6955 ;; *************** function _DATAEE_ReadByte *****************
  6956 ;; Defined at:
  6957 ;;		line 143 in file "mcc_generated_files/memory.c"
  6958 ;; Parameters:    Size  Location     Type
  6959 ;;  bAdd            1    wreg     unsigned char 
  6960 ;; Auto vars:     Size  Location     Type
  6961 ;;  bAdd            1   26[COMRAM] unsigned char 
  6962 ;; Return value:  Size  Location     Type
  6963 ;;                  1    wreg      unsigned char 
  6964 ;; Registers used:
  6965 ;;		wreg, status,2
  6966 ;; Tracked objects:
  6967 ;;		On entry : 0/0
  6968 ;;		On exit  : 0/0
  6969 ;;		Unchanged: 0/0
  6970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6971 ;;      Params:         0       0       0       0       0       0       0
  6972 ;;      Locals:         1       0       0       0       0       0       0
  6973 ;;      Temps:          0       0       0       0       0       0       0
  6974 ;;      Totals:         1       0       0       0       0       0       0
  6975 ;;Total ram usage:        1 bytes
  6976 ;; Hardware stack levels used:    1
  6977 ;; Hardware stack levels required when called:    4
  6978 ;; This function calls:
  6979 ;;		Nothing
  6980 ;; This function is called by:
  6981 ;;		_ComputeStorageData
  6982 ;; This function uses a non-reentrant model
  6983 ;;
  6984                           
  6985                           	psect	text42
  6986  001BD2                     __ptext42:
  6987                           	opt stack 0
  6988  001BD2                     _DATAEE_ReadByte:
  6989                           	opt stack 24
  6990                           
  6991                           ; BSR set to: 0
  6992                           ;incstack = 0
  6993                           ;DATAEE_ReadByte@bAdd stored from wreg
  6994  001BD2  6E1B               	movwf	DATAEE_ReadByte@bAdd,c
  6995                           
  6996                           ;memory.c: 145: EEADR = (bAdd & 0xFF);
  6997  001BD4  C01B  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  6998                           
  6999                           ;memory.c: 146: EECON1bits.CFGS = 0;
  7000  001BD8  9CA6               	bcf	4006,6,c	;volatile
  7001                           
  7002                           ;memory.c: 147: EECON1bits.EEPGD = 0;
  7003  001BDA  9EA6               	bcf	4006,7,c	;volatile
  7004                           
  7005                           ;memory.c: 148: EECON1bits.RD = 1;
  7006  001BDC  80A6               	bsf	4006,0,c	;volatile
  7007                           
  7008                           ;memory.c: 149: __nop();
  7009  001BDE  F000               	nop	
  7010                           
  7011                           ;memory.c: 150: __nop();
  7012  001BE0  F000               	nop	
  7013                           
  7014                           ;memory.c: 152: return (EEDATA);
  7015  001BE2  50A8               	movf	4008,w,c	;volatile
  7016  001BE4  0012               	return	
  7017  001BE6                     __end_of_DATAEE_ReadByte:
  7018                           	opt stack 0
  7019                           tosu	equ	0xFFF
  7020                           tosh	equ	0xFFE
  7021                           tosl	equ	0xFFD
  7022                           pclath	equ	0xFFA
  7023                           tblptru	equ	0xFF8
  7024                           tblptrh	equ	0xFF7
  7025                           tblptrl	equ	0xFF6
  7026                           tablat	equ	0xFF5
  7027                           prodh	equ	0xFF4
  7028                           prodl	equ	0xFF3
  7029                           intcon	equ	0xFF2
  7030                           intcon2	equ	0xFF1
  7031                           postinc0	equ	0xFEE
  7032                           wreg	equ	0xFE8
  7033                           indf2	equ	0xFDF
  7034                           postinc2	equ	0xFDE
  7035                           postdec2	equ	0xFDD
  7036                           plusw2	equ	0xFDB
  7037                           fsr2h	equ	0xFDA
  7038                           fsr2l	equ	0xFD9
  7039                           status	equ	0xFD8
  7040                           
  7041 ;; *************** function _CoolingStop *****************
  7042 ;; Defined at:
  7043 ;;		line 30 in file "CoolingControl.c"
  7044 ;; Parameters:    Size  Location     Type
  7045 ;;		None
  7046 ;; Auto vars:     Size  Location     Type
  7047 ;;		None
  7048 ;; Return value:  Size  Location     Type
  7049 ;;                  1    wreg      void 
  7050 ;; Registers used:
  7051 ;;		wreg, status,2, status,0, cstack
  7052 ;; Tracked objects:
  7053 ;;		On entry : 0/0
  7054 ;;		On exit  : 0/0
  7055 ;;		Unchanged: 0/0
  7056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7057 ;;      Params:         0       0       0       0       0       0       0
  7058 ;;      Locals:         0       0       0       0       0       0       0
  7059 ;;      Temps:          0       0       0       0       0       0       0
  7060 ;;      Totals:         0       0       0       0       0       0       0
  7061 ;;Total ram usage:        0 bytes
  7062 ;; Hardware stack levels used:    1
  7063 ;; Hardware stack levels required when called:    6
  7064 ;; This function calls:
  7065 ;;		_PWM4_LoadDutyValue
  7066 ;;		_PotClear
  7067 ;; This function is called by:
  7068 ;;		_main
  7069 ;; This function uses a non-reentrant model
  7070 ;;
  7071                           
  7072                           	psect	text43
  7073  001BE6                     __ptext43:
  7074                           	opt stack 0
  7075  001BE6                     _CoolingStop:
  7076                           	opt stack 24
  7077                           
  7078                           ;CoolingControl.c: 31: PotClear();
  7079                           
  7080                           ;incstack = 0
  7081  001BE6  ECE5  F007         	call	_PotClear	;wreg free
  7082                           
  7083                           ;CoolingControl.c: 32: PWM4_LoadDutyValue(0);
  7084  001BEA  0E00               	movlw	0
  7085  001BEC  6E1C               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  7086  001BEE  0E00               	movlw	0
  7087  001BF0  6E1B               	movwf	PWM4_LoadDutyValue@dutyValue,c
  7088  001BF2  ECEA  F00C         	call	_PWM4_LoadDutyValue	;wreg free
  7089  001BF6  0012               	return		;funcret
  7090  001BF8                     __end_of_CoolingStop:
  7091                           	opt stack 0
  7092                           tosu	equ	0xFFF
  7093                           tosh	equ	0xFFE
  7094                           tosl	equ	0xFFD
  7095                           pclath	equ	0xFFA
  7096                           tblptru	equ	0xFF8
  7097                           tblptrh	equ	0xFF7
  7098                           tblptrl	equ	0xFF6
  7099                           tablat	equ	0xFF5
  7100                           prodh	equ	0xFF4
  7101                           prodl	equ	0xFF3
  7102                           intcon	equ	0xFF2
  7103                           intcon2	equ	0xFF1
  7104                           postinc0	equ	0xFEE
  7105                           wreg	equ	0xFE8
  7106                           indf2	equ	0xFDF
  7107                           postinc2	equ	0xFDE
  7108                           postdec2	equ	0xFDD
  7109                           plusw2	equ	0xFDB
  7110                           fsr2h	equ	0xFDA
  7111                           fsr2l	equ	0xFD9
  7112                           status	equ	0xFD8
  7113                           
  7114 ;; *************** function _CoolingStart *****************
  7115 ;; Defined at:
  7116 ;;		line 19 in file "CoolingControl.c"
  7117 ;; Parameters:    Size  Location     Type
  7118 ;;		None
  7119 ;; Auto vars:     Size  Location     Type
  7120 ;;		None
  7121 ;; Return value:  Size  Location     Type
  7122 ;;                  1    wreg      void 
  7123 ;; Registers used:
  7124 ;;		wreg, status,2, status,0, cstack
  7125 ;; Tracked objects:
  7126 ;;		On entry : 0/0
  7127 ;;		On exit  : 0/0
  7128 ;;		Unchanged: 0/0
  7129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7130 ;;      Params:         0       0       0       0       0       0       0
  7131 ;;      Locals:         0       0       0       0       0       0       0
  7132 ;;      Temps:          0       0       0       0       0       0       0
  7133 ;;      Totals:         0       0       0       0       0       0       0
  7134 ;;Total ram usage:        0 bytes
  7135 ;; Hardware stack levels used:    1
  7136 ;; Hardware stack levels required when called:    6
  7137 ;; This function calls:
  7138 ;;		_PWM4_LoadDutyValue
  7139 ;;		_PotClear
  7140 ;;		_PotSetpoint
  7141 ;; This function is called by:
  7142 ;;		_main
  7143 ;; This function uses a non-reentrant model
  7144 ;;
  7145                           
  7146                           	psect	text44
  7147  001AF2                     __ptext44:
  7148                           	opt stack 0
  7149  001AF2                     _CoolingStart:
  7150                           	opt stack 24
  7151                           
  7152                           ;CoolingControl.c: 21: PotClear();
  7153                           
  7154                           ;incstack = 0
  7155  001AF2  ECE5  F007         	call	_PotClear	;wreg free
  7156                           
  7157                           ;CoolingControl.c: 22: PotSetpoint(40);
  7158  001AF6  0E00               	movlw	0
  7159  001AF8  0100               	movlb	0	; () banked
  7160  001AFA  6FD2               	movwf	(PotSetpoint@new_point+1)& (0+255),b
  7161  001AFC  0E28               	movlw	40
  7162  001AFE  6FD1               	movwf	PotSetpoint@new_point& (0+255),b
  7163  001B00  EC0D  F006         	call	_PotSetpoint	;wreg free
  7164                           
  7165                           ;CoolingControl.c: 23: PWM4_LoadDutyValue(1000);
  7166  001B04  0E03               	movlw	3
  7167  001B06  6E1C               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  7168  001B08  0EE8               	movlw	232
  7169  001B0A  6E1B               	movwf	PWM4_LoadDutyValue@dutyValue,c
  7170  001B0C  ECEA  F00C         	call	_PWM4_LoadDutyValue	;wreg free
  7171  001B10  0012               	return		;funcret
  7172  001B12                     __end_of_CoolingStart:
  7173                           	opt stack 0
  7174                           tosu	equ	0xFFF
  7175                           tosh	equ	0xFFE
  7176                           tosl	equ	0xFFD
  7177                           pclath	equ	0xFFA
  7178                           tblptru	equ	0xFF8
  7179                           tblptrh	equ	0xFF7
  7180                           tblptrl	equ	0xFF6
  7181                           tablat	equ	0xFF5
  7182                           prodh	equ	0xFF4
  7183                           prodl	equ	0xFF3
  7184                           intcon	equ	0xFF2
  7185                           intcon2	equ	0xFF1
  7186                           postinc0	equ	0xFEE
  7187                           wreg	equ	0xFE8
  7188                           indf2	equ	0xFDF
  7189                           postinc2	equ	0xFDE
  7190                           postdec2	equ	0xFDD
  7191                           plusw2	equ	0xFDB
  7192                           fsr2h	equ	0xFDA
  7193                           fsr2l	equ	0xFD9
  7194                           status	equ	0xFD8
  7195                           
  7196 ;; *************** function _PotSetpoint *****************
  7197 ;; Defined at:
  7198 ;;		line 21 in file "DigiPot.c"
  7199 ;; Parameters:    Size  Location     Type
  7200 ;;  new_point       2    0[BANK0 ] int 
  7201 ;; Auto vars:     Size  Location     Type
  7202 ;;  new_pos         2    8[BANK0 ] int 
  7203 ;;  x               2    6[BANK0 ] int 
  7204 ;;  set_point       2    4[BANK0 ] int 
  7205 ;; Return value:  Size  Location     Type
  7206 ;;                  1    wreg      void 
  7207 ;; Registers used:
  7208 ;;		wreg, status,2, status,0, cstack
  7209 ;; Tracked objects:
  7210 ;;		On entry : 0/0
  7211 ;;		On exit  : 0/0
  7212 ;;		Unchanged: 0/0
  7213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7214 ;;      Params:         0       2       0       0       0       0       0
  7215 ;;      Locals:         0       6       0       0       0       0       0
  7216 ;;      Temps:          0       2       0       0       0       0       0
  7217 ;;      Totals:         0      10       0       0       0       0       0
  7218 ;;Total ram usage:       10 bytes
  7219 ;; Hardware stack levels used:    1
  7220 ;; Hardware stack levels required when called:    5
  7221 ;; This function calls:
  7222 ;;		_Delay
  7223 ;; This function is called by:
  7224 ;;		_main
  7225 ;;		_CoolingStart
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           	psect	text45
  7230  000C1A                     __ptext45:
  7231                           	opt stack 0
  7232  000C1A                     _PotSetpoint:
  7233                           	opt stack 25
  7234                           
  7235                           ;DigiPot.c: 22: int set_point;
  7236                           ;DigiPot.c: 31: int new_pos = new_point;
  7237                           
  7238                           ;incstack = 0
  7239  000C1A  C0D1  F0D9         	movff	PotSetpoint@new_point,PotSetpoint@new_pos
  7240  000C1E  C0D2  F0DA         	movff	PotSetpoint@new_point+1,PotSetpoint@new_pos+1
  7241                           
  7242                           ;DigiPot.c: 35: LATB5 = 0;
  7243  000C22  9A8A               	bcf	3978,5,c	;volatile
  7244                           
  7245                           ;DigiPot.c: 38: if (new_pos > prev_pos) {
  7246  000C24  0100               	movlb	0	; () banked
  7247  000C26  51D9               	movf	PotSetpoint@new_pos& (0+255),w,b
  7248  000C28  5C27               	subwf	_prev_pos,w,c
  7249  000C2A  5028               	movf	_prev_pos+1,w,c
  7250  000C2C  0A80               	xorlw	128
  7251  000C2E  0100               	movlb	0	; () banked
  7252  000C30  6FD3               	movwf	??_PotSetpoint& (0+255),b
  7253  000C32  0100               	movlb	0	; () banked
  7254  000C34  51DA               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7255  000C36  0A80               	xorlw	128
  7256  000C38  0100               	movlb	0	; () banked
  7257  000C3A  59D3               	subwfb	??_PotSetpoint& (0+255),w,b
  7258  000C3C  B0D8               	btfsc	status,0,c
  7259  000C3E  D016               	goto	l924
  7260                           
  7261                           ; BSR set to: 0
  7262                           ;DigiPot.c: 40: LATB3 = 1;
  7263  000C40  868A               	bsf	3978,3,c	;volatile
  7264                           
  7265                           ; BSR set to: 0
  7266                           ;DigiPot.c: 41: set_point = new_pos - prev_pos;
  7267  000C42  C027  F0D3         	movff	_prev_pos,??_PotSetpoint
  7268  000C46  C028  F0D4         	movff	_prev_pos+1,??_PotSetpoint+1
  7269  000C4A  0100               	movlb	0	; () banked
  7270  000C4C  1FD3               	comf	??_PotSetpoint& (0+255),f,b
  7271  000C4E  1FD4               	comf	(??_PotSetpoint+1)& (0+255),f,b
  7272  000C50  4BD3               	infsnz	??_PotSetpoint& (0+255),f,b
  7273  000C52  2BD4               	incf	(??_PotSetpoint+1)& (0+255),f,b
  7274  000C54  0100               	movlb	0	; () banked
  7275  000C56  51D9               	movf	PotSetpoint@new_pos& (0+255),w,b
  7276  000C58  0100               	movlb	0	; () banked
  7277  000C5A  25D3               	addwf	??_PotSetpoint& (0+255),w,b
  7278  000C5C  0100               	movlb	0	; () banked
  7279  000C5E  6FD5               	movwf	PotSetpoint@set_point& (0+255),b
  7280  000C60  0100               	movlb	0	; () banked
  7281  000C62  51DA               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7282  000C64  0100               	movlb	0	; () banked
  7283  000C66  21D4               	addwfc	(??_PotSetpoint+1)& (0+255),w,b
  7284  000C68  0100               	movlb	0	; () banked
  7285  000C6A  6FD6               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  7286  000C6C                     l924:
  7287                           
  7288                           ; BSR set to: 0
  7289                           ;DigiPot.c: 42: }
  7290                           ;DigiPot.c: 43: if (new_pos < prev_pos) {
  7291  000C6C  5027               	movf	_prev_pos,w,c
  7292  000C6E  0100               	movlb	0	; () banked
  7293  000C70  5DD9               	subwf	PotSetpoint@new_pos& (0+255),w,b
  7294  000C72  0100               	movlb	0	; () banked
  7295  000C74  51DA               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7296  000C76  0A80               	xorlw	128
  7297  000C78  0100               	movlb	0	; () banked
  7298  000C7A  6FD3               	movwf	??_PotSetpoint& (0+255),b
  7299  000C7C  5028               	movf	_prev_pos+1,w,c
  7300  000C7E  0A80               	xorlw	128
  7301  000C80  0100               	movlb	0	; () banked
  7302  000C82  59D3               	subwfb	??_PotSetpoint& (0+255),w,b
  7303  000C84  B0D8               	btfsc	status,0,c
  7304  000C86  D014               	goto	l4370
  7305                           
  7306                           ; BSR set to: 0
  7307                           ;DigiPot.c: 45: LATB3 = 0;
  7308  000C88  968A               	bcf	3978,3,c	;volatile
  7309                           
  7310                           ; BSR set to: 0
  7311                           ;DigiPot.c: 46: set_point = prev_pos - new_pos;
  7312  000C8A  C0D9  F0D3         	movff	PotSetpoint@new_pos,??_PotSetpoint
  7313  000C8E  C0DA  F0D4         	movff	PotSetpoint@new_pos+1,??_PotSetpoint+1
  7314  000C92  0100               	movlb	0	; () banked
  7315  000C94  1FD3               	comf	??_PotSetpoint& (0+255),f,b
  7316  000C96  1FD4               	comf	(??_PotSetpoint+1)& (0+255),f,b
  7317  000C98  4BD3               	infsnz	??_PotSetpoint& (0+255),f,b
  7318  000C9A  2BD4               	incf	(??_PotSetpoint+1)& (0+255),f,b
  7319  000C9C  5027               	movf	_prev_pos,w,c
  7320  000C9E  0100               	movlb	0	; () banked
  7321  000CA0  25D3               	addwf	??_PotSetpoint& (0+255),w,b
  7322  000CA2  0100               	movlb	0	; () banked
  7323  000CA4  6FD5               	movwf	PotSetpoint@set_point& (0+255),b
  7324  000CA6  5028               	movf	_prev_pos+1,w,c
  7325  000CA8  0100               	movlb	0	; () banked
  7326  000CAA  21D4               	addwfc	(??_PotSetpoint+1)& (0+255),w,b
  7327  000CAC  0100               	movlb	0	; () banked
  7328  000CAE  6FD6               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  7329  000CB0                     l4370:
  7330                           
  7331                           ; BSR set to: 0
  7332                           ;DigiPot.c: 47: }
  7333                           ;DigiPot.c: 48: Delay(1);
  7334  000CB0  0E01               	movlw	1
  7335  000CB2  6E1B               	movwf	Delay@wait,c
  7336  000CB4  0E00               	movlw	0
  7337  000CB6  6E1C               	movwf	Delay@wait+1,c
  7338  000CB8  0E00               	movlw	0
  7339  000CBA  6E1D               	movwf	Delay@wait+2,c
  7340  000CBC  0E00               	movlw	0
  7341  000CBE  6E1E               	movwf	Delay@wait+3,c
  7342  000CC0  EC1E  F00C         	call	_Delay	;wreg free
  7343                           
  7344                           ;DigiPot.c: 50: int x;
  7345                           ;DigiPot.c: 52: for (x = 0; x < set_point; x++) {
  7346  000CC4  0E00               	movlw	0
  7347  000CC6  0100               	movlb	0	; () banked
  7348  000CC8  6FD8               	movwf	(PotSetpoint@x+1)& (0+255),b
  7349  000CCA  0E00               	movlw	0
  7350  000CCC  6FD7               	movwf	PotSetpoint@x& (0+255),b
  7351  000CCE  D019               	goto	l4380
  7352  000CD0                     l927:
  7353                           
  7354                           ; BSR set to: 0
  7355                           ;DigiPot.c: 53: LATB4 = 1;
  7356  000CD0  888A               	bsf	3978,4,c	;volatile
  7357                           
  7358                           ; BSR set to: 0
  7359                           ;DigiPot.c: 54: Delay(1);
  7360  000CD2  0E01               	movlw	1
  7361  000CD4  6E1B               	movwf	Delay@wait,c
  7362  000CD6  0E00               	movlw	0
  7363  000CD8  6E1C               	movwf	Delay@wait+1,c
  7364  000CDA  0E00               	movlw	0
  7365  000CDC  6E1D               	movwf	Delay@wait+2,c
  7366  000CDE  0E00               	movlw	0
  7367  000CE0  6E1E               	movwf	Delay@wait+3,c
  7368  000CE2  EC1E  F00C         	call	_Delay	;wreg free
  7369                           
  7370                           ;DigiPot.c: 55: LATB4 = 0;
  7371  000CE6  988A               	bcf	3978,4,c	;volatile
  7372                           
  7373                           ;DigiPot.c: 56: Delay(1);
  7374  000CE8  0E01               	movlw	1
  7375  000CEA  6E1B               	movwf	Delay@wait,c
  7376  000CEC  0E00               	movlw	0
  7377  000CEE  6E1C               	movwf	Delay@wait+1,c
  7378  000CF0  0E00               	movlw	0
  7379  000CF2  6E1D               	movwf	Delay@wait+2,c
  7380  000CF4  0E00               	movlw	0
  7381  000CF6  6E1E               	movwf	Delay@wait+3,c
  7382  000CF8  EC1E  F00C         	call	_Delay	;wreg free
  7383  000CFC  0100               	movlb	0	; () banked
  7384  000CFE  4BD7               	infsnz	PotSetpoint@x& (0+255),f,b
  7385  000D00  2BD8               	incf	(PotSetpoint@x+1)& (0+255),f,b
  7386  000D02                     l4380:
  7387                           
  7388                           ; BSR set to: 0
  7389  000D02  0100               	movlb	0	; () banked
  7390  000D04  51D5               	movf	PotSetpoint@set_point& (0+255),w,b
  7391  000D06  0100               	movlb	0	; () banked
  7392  000D08  5DD7               	subwf	PotSetpoint@x& (0+255),w,b
  7393  000D0A  0100               	movlb	0	; () banked
  7394  000D0C  51D8               	movf	(PotSetpoint@x+1)& (0+255),w,b
  7395  000D0E  0A80               	xorlw	128
  7396  000D10  0100               	movlb	0	; () banked
  7397  000D12  6FD3               	movwf	??_PotSetpoint& (0+255),b
  7398  000D14  0100               	movlb	0	; () banked
  7399  000D16  51D6               	movf	(PotSetpoint@set_point+1)& (0+255),w,b
  7400  000D18  0A80               	xorlw	128
  7401  000D1A  0100               	movlb	0	; () banked
  7402  000D1C  59D3               	subwfb	??_PotSetpoint& (0+255),w,b
  7403  000D1E  A0D8               	btfss	status,0,c
  7404  000D20  D7D7               	goto	l927
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;DigiPot.c: 57: }
  7408                           ;DigiPot.c: 59: LATB5 = 1;
  7409  000D22  8A8A               	bsf	3978,5,c	;volatile
  7410                           
  7411                           ;DigiPot.c: 60: prev_pos = new_pos;
  7412  000D24  C0D9  F027         	movff	PotSetpoint@new_pos,_prev_pos
  7413  000D28  C0DA  F028         	movff	PotSetpoint@new_pos+1,_prev_pos+1
  7414                           
  7415                           ; BSR set to: 0
  7416  000D2C  0012               	return		;funcret
  7417  000D2E                     __end_of_PotSetpoint:
  7418                           	opt stack 0
  7419                           tosu	equ	0xFFF
  7420                           tosh	equ	0xFFE
  7421                           tosl	equ	0xFFD
  7422                           pclath	equ	0xFFA
  7423                           tblptru	equ	0xFF8
  7424                           tblptrh	equ	0xFF7
  7425                           tblptrl	equ	0xFF6
  7426                           tablat	equ	0xFF5
  7427                           prodh	equ	0xFF4
  7428                           prodl	equ	0xFF3
  7429                           intcon	equ	0xFF2
  7430                           intcon2	equ	0xFF1
  7431                           postinc0	equ	0xFEE
  7432                           wreg	equ	0xFE8
  7433                           indf2	equ	0xFDF
  7434                           postinc2	equ	0xFDE
  7435                           postdec2	equ	0xFDD
  7436                           plusw2	equ	0xFDB
  7437                           fsr2h	equ	0xFDA
  7438                           fsr2l	equ	0xFD9
  7439                           status	equ	0xFD8
  7440                           
  7441 ;; *************** function _PotClear *****************
  7442 ;; Defined at:
  7443 ;;		line 66 in file "DigiPot.c"
  7444 ;; Parameters:    Size  Location     Type
  7445 ;;		None
  7446 ;; Auto vars:     Size  Location     Type
  7447 ;;  x               2    0[BANK0 ] int 
  7448 ;; Return value:  Size  Location     Type
  7449 ;;                  1    wreg      void 
  7450 ;; Registers used:
  7451 ;;		wreg, status,2, status,0, cstack
  7452 ;; Tracked objects:
  7453 ;;		On entry : 0/0
  7454 ;;		On exit  : 0/0
  7455 ;;		Unchanged: 0/0
  7456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7457 ;;      Params:         0       0       0       0       0       0       0
  7458 ;;      Locals:         0       2       0       0       0       0       0
  7459 ;;      Temps:          0       0       0       0       0       0       0
  7460 ;;      Totals:         0       2       0       0       0       0       0
  7461 ;;Total ram usage:        2 bytes
  7462 ;; Hardware stack levels used:    1
  7463 ;; Hardware stack levels required when called:    5
  7464 ;; This function calls:
  7465 ;;		_Delay
  7466 ;; This function is called by:
  7467 ;;		_CoolingStart
  7468 ;;		_CoolingStop
  7469 ;; This function uses a non-reentrant model
  7470 ;;
  7471                           
  7472                           	psect	text46
  7473  000FCA                     __ptext46:
  7474                           	opt stack 0
  7475  000FCA                     _PotClear:
  7476                           	opt stack 24
  7477                           
  7478                           ;DigiPot.c: 67: Delay(1);
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;incstack = 0
  7482  000FCA  0E01               	movlw	1
  7483  000FCC  6E1B               	movwf	Delay@wait,c
  7484  000FCE  0E00               	movlw	0
  7485  000FD0  6E1C               	movwf	Delay@wait+1,c
  7486  000FD2  0E00               	movlw	0
  7487  000FD4  6E1D               	movwf	Delay@wait+2,c
  7488  000FD6  0E00               	movlw	0
  7489  000FD8  6E1E               	movwf	Delay@wait+3,c
  7490  000FDA  EC1E  F00C         	call	_Delay	;wreg free
  7491                           
  7492                           ;DigiPot.c: 69: LATB5 = 0;
  7493  000FDE  9A8A               	bcf	3978,5,c	;volatile
  7494                           
  7495                           ;DigiPot.c: 70: Delay(1);
  7496  000FE0  0E01               	movlw	1
  7497  000FE2  6E1B               	movwf	Delay@wait,c
  7498  000FE4  0E00               	movlw	0
  7499  000FE6  6E1C               	movwf	Delay@wait+1,c
  7500  000FE8  0E00               	movlw	0
  7501  000FEA  6E1D               	movwf	Delay@wait+2,c
  7502  000FEC  0E00               	movlw	0
  7503  000FEE  6E1E               	movwf	Delay@wait+3,c
  7504  000FF0  EC1E  F00C         	call	_Delay	;wreg free
  7505                           
  7506                           ;DigiPot.c: 71: LATB3 = 0;
  7507  000FF4  968A               	bcf	3978,3,c	;volatile
  7508                           
  7509                           ;DigiPot.c: 72: Delay(1);
  7510  000FF6  0E01               	movlw	1
  7511  000FF8  6E1B               	movwf	Delay@wait,c
  7512  000FFA  0E00               	movlw	0
  7513  000FFC  6E1C               	movwf	Delay@wait+1,c
  7514  000FFE  0E00               	movlw	0
  7515  001000  6E1D               	movwf	Delay@wait+2,c
  7516  001002  0E00               	movlw	0
  7517  001004  6E1E               	movwf	Delay@wait+3,c
  7518  001006  EC1E  F00C         	call	_Delay	;wreg free
  7519                           
  7520                           ;DigiPot.c: 73: int x;
  7521                           ;DigiPot.c: 74: for (x = 0; x < 32; x++) {
  7522  00100A  0E00               	movlw	0
  7523  00100C  0100               	movlb	0	; () banked
  7524  00100E  6FD2               	movwf	(PotClear@x+1)& (0+255),b
  7525  001010  0E00               	movlw	0
  7526  001012  6FD1               	movwf	PotClear@x& (0+255),b
  7527                           
  7528                           ; BSR set to: 0
  7529  001014  0100               	movlb	0	; () banked
  7530  001016  BFD2               	btfsc	(PotClear@x+1)& (0+255),7,b
  7531  001018  D008               	goto	l932
  7532  00101A  0100               	movlb	0	; () banked
  7533  00101C  51D2               	movf	(PotClear@x+1)& (0+255),w,b
  7534  00101E  E125               	bnz	l933
  7535  001020  0E20               	movlw	32
  7536  001022  0100               	movlb	0	; () banked
  7537  001024  5DD1               	subwf	PotClear@x& (0+255),w,b
  7538  001026  B0D8               	btfsc	status,0,c
  7539  001028  D020               	goto	l933
  7540  00102A                     l932:
  7541                           
  7542                           ; BSR set to: 0
  7543                           ;DigiPot.c: 75: LATB4 = 1;
  7544  00102A  888A               	bsf	3978,4,c	;volatile
  7545                           
  7546                           ; BSR set to: 0
  7547                           ;DigiPot.c: 76: Delay(1);
  7548  00102C  0E01               	movlw	1
  7549  00102E  6E1B               	movwf	Delay@wait,c
  7550  001030  0E00               	movlw	0
  7551  001032  6E1C               	movwf	Delay@wait+1,c
  7552  001034  0E00               	movlw	0
  7553  001036  6E1D               	movwf	Delay@wait+2,c
  7554  001038  0E00               	movlw	0
  7555  00103A  6E1E               	movwf	Delay@wait+3,c
  7556  00103C  EC1E  F00C         	call	_Delay	;wreg free
  7557                           
  7558                           ;DigiPot.c: 77: LATB4 = 0;
  7559  001040  988A               	bcf	3978,4,c	;volatile
  7560                           
  7561                           ;DigiPot.c: 78: Delay(1);
  7562  001042  0E01               	movlw	1
  7563  001044  6E1B               	movwf	Delay@wait,c
  7564  001046  0E00               	movlw	0
  7565  001048  6E1C               	movwf	Delay@wait+1,c
  7566  00104A  0E00               	movlw	0
  7567  00104C  6E1D               	movwf	Delay@wait+2,c
  7568  00104E  0E00               	movlw	0
  7569  001050  6E1E               	movwf	Delay@wait+3,c
  7570  001052  EC1E  F00C         	call	_Delay	;wreg free
  7571  001056  0100               	movlb	0	; () banked
  7572  001058  4BD1               	infsnz	PotClear@x& (0+255),f,b
  7573  00105A  2BD2               	incf	(PotClear@x+1)& (0+255),f,b
  7574                           
  7575                           ; BSR set to: 0
  7576  00105C  0100               	movlb	0	; () banked
  7577  00105E  BFD2               	btfsc	(PotClear@x+1)& (0+255),7,b
  7578  001060  D7E4               	goto	l932
  7579  001062  0100               	movlb	0	; () banked
  7580  001064  51D2               	movf	(PotClear@x+1)& (0+255),w,b
  7581  001066  E101               	bnz	u3940
  7582  001068  D7DB               	goto	L1
  7583  00106A                     u3940:
  7584  00106A                     l933:
  7585                           
  7586                           ; BSR set to: 0
  7587                           ;DigiPot.c: 79: }
  7588                           ;DigiPot.c: 80: LATB4 = 1;
  7589  00106A  888A               	bsf	3978,4,c	;volatile
  7590                           
  7591                           ; BSR set to: 0
  7592                           ;DigiPot.c: 81: Delay(1);
  7593  00106C  0E01               	movlw	1
  7594  00106E  6E1B               	movwf	Delay@wait,c
  7595  001070  0E00               	movlw	0
  7596  001072  6E1C               	movwf	Delay@wait+1,c
  7597  001074  0E00               	movlw	0
  7598  001076  6E1D               	movwf	Delay@wait+2,c
  7599  001078  0E00               	movlw	0
  7600  00107A  6E1E               	movwf	Delay@wait+3,c
  7601  00107C  EC1E  F00C         	call	_Delay	;wreg free
  7602                           
  7603                           ;DigiPot.c: 83: LATB5 = 1;
  7604  001080  8A8A               	bsf	3978,5,c	;volatile
  7605                           
  7606                           ;DigiPot.c: 84: prev_pos = 0;
  7607  001082  0E00               	movlw	0
  7608  001084  6E28               	movwf	_prev_pos+1,c
  7609  001086  0E00               	movlw	0
  7610  001088  6E27               	movwf	_prev_pos,c
  7611                           
  7612                           ;DigiPot.c: 85: Delay(1);
  7613  00108A  0E01               	movlw	1
  7614  00108C  6E1B               	movwf	Delay@wait,c
  7615  00108E  0E00               	movlw	0
  7616  001090  6E1C               	movwf	Delay@wait+1,c
  7617  001092  0E00               	movlw	0
  7618  001094  6E1D               	movwf	Delay@wait+2,c
  7619  001096  0E00               	movlw	0
  7620  001098  6E1E               	movwf	Delay@wait+3,c
  7621  00109A  EC1E  F00C         	call	_Delay	;wreg free
  7622  00109E  0012               	return		;funcret
  7623  0010A0                     __end_of_PotClear:
  7624                           	opt stack 0
  7625                           tosu	equ	0xFFF
  7626                           tosh	equ	0xFFE
  7627                           tosl	equ	0xFFD
  7628                           pclath	equ	0xFFA
  7629                           tblptru	equ	0xFF8
  7630                           tblptrh	equ	0xFF7
  7631                           tblptrl	equ	0xFF6
  7632                           tablat	equ	0xFF5
  7633                           prodh	equ	0xFF4
  7634                           prodl	equ	0xFF3
  7635                           intcon	equ	0xFF2
  7636                           intcon2	equ	0xFF1
  7637                           postinc0	equ	0xFEE
  7638                           wreg	equ	0xFE8
  7639                           indf2	equ	0xFDF
  7640                           postinc2	equ	0xFDE
  7641                           postdec2	equ	0xFDD
  7642                           plusw2	equ	0xFDB
  7643                           fsr2h	equ	0xFDA
  7644                           fsr2l	equ	0xFD9
  7645                           status	equ	0xFD8
  7646                           
  7647 ;; *************** function _Delay *****************
  7648 ;; Defined at:
  7649 ;;		line 9 in file "Functions.c"
  7650 ;; Parameters:    Size  Location     Type
  7651 ;;  wait            4   26[COMRAM] long 
  7652 ;; Auto vars:     Size  Location     Type
  7653 ;;  i               4   31[COMRAM] long 
  7654 ;; Return value:  Size  Location     Type
  7655 ;;                  1    wreg      void 
  7656 ;; Registers used:
  7657 ;;		wreg, status,2, status,0
  7658 ;; Tracked objects:
  7659 ;;		On entry : 0/0
  7660 ;;		On exit  : 0/0
  7661 ;;		Unchanged: 0/0
  7662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7663 ;;      Params:         4       0       0       0       0       0       0
  7664 ;;      Locals:         4       0       0       0       0       0       0
  7665 ;;      Temps:          1       0       0       0       0       0       0
  7666 ;;      Totals:         9       0       0       0       0       0       0
  7667 ;;Total ram usage:        9 bytes
  7668 ;; Hardware stack levels used:    1
  7669 ;; Hardware stack levels required when called:    4
  7670 ;; This function calls:
  7671 ;;		Nothing
  7672 ;; This function is called by:
  7673 ;;		_respondECU
  7674 ;;		_StartUp595
  7675 ;;		_writeRegisters
  7676 ;;		_PotSetpoint
  7677 ;;		_PotClear
  7678 ;; This function uses a non-reentrant model
  7679 ;;
  7680                           
  7681                           	psect	text47
  7682  00183C                     __ptext47:
  7683                           	opt stack 0
  7684  00183C                     _Delay:
  7685                           	opt stack 24
  7686                           
  7687                           ;Functions.c: 10: long int i = 0;
  7688                           
  7689                           ;incstack = 0
  7690  00183C  0E00               	movlw	0
  7691  00183E  6E20               	movwf	Delay@i,c
  7692  001840  0E00               	movlw	0
  7693  001842  6E21               	movwf	Delay@i+1,c
  7694  001844  0E00               	movlw	0
  7695  001846  6E22               	movwf	Delay@i+2,c
  7696  001848  0E00               	movlw	0
  7697  00184A  6E23               	movwf	Delay@i+3,c
  7698                           
  7699                           ;Functions.c: 11: for (; wait > i; i++) {
  7700  00184C  D00D               	goto	l3784
  7701  00184E                     l3780:
  7702                           
  7703                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  7704  00184E  0E03               	movlw	3
  7705  001850  6E1F               	movwf	??_Delay& (0+255),c
  7706  001852  0E98               	movlw	152
  7707  001854                     u4287:
  7708  001854  2EE8               	decfsz	wreg,f,c
  7709  001856  D7FE               	goto	u4287
  7710  001858  2E1F               	decfsz	??_Delay& (0+255),f,c
  7711  00185A  D7FC               	goto	u4287
  7712  00185C  0E01               	movlw	1
  7713  00185E  2620               	addwf	Delay@i,f,c
  7714  001860  0E00               	movlw	0
  7715  001862  2221               	addwfc	Delay@i+1,f,c
  7716  001864  2222               	addwfc	Delay@i+2,f,c
  7717  001866  2223               	addwfc	Delay@i+3,f,c
  7718  001868                     l3784:
  7719  001868  501B               	movf	Delay@wait,w,c
  7720  00186A  5C20               	subwf	Delay@i,w,c
  7721  00186C  501C               	movf	Delay@wait+1,w,c
  7722  00186E  5821               	subwfb	Delay@i+1,w,c
  7723  001870  501D               	movf	Delay@wait+2,w,c
  7724  001872  5822               	subwfb	Delay@i+2,w,c
  7725  001874  5023               	movf	Delay@i+3,w,c
  7726  001876  0A80               	xorlw	128
  7727  001878  6E1F               	movwf	??_Delay& (0+255),c
  7728  00187A  501E               	movf	Delay@wait+3,w,c
  7729  00187C  0A80               	xorlw	128
  7730  00187E  581F               	subwfb	??_Delay& (0+255),w,c
  7731  001880  B0D8               	btfsc	status,0,c
  7732  001882  0012               	return	
  7733  001884  D7E4               	goto	l3780
  7734  001886                     __end_of_Delay:
  7735                           	opt stack 0
  7736                           tosu	equ	0xFFF
  7737                           tosh	equ	0xFFE
  7738                           tosl	equ	0xFFD
  7739                           pclath	equ	0xFFA
  7740                           tblptru	equ	0xFF8
  7741                           tblptrh	equ	0xFF7
  7742                           tblptrl	equ	0xFF6
  7743                           tablat	equ	0xFF5
  7744                           prodh	equ	0xFF4
  7745                           prodl	equ	0xFF3
  7746                           intcon	equ	0xFF2
  7747                           intcon2	equ	0xFF1
  7748                           postinc0	equ	0xFEE
  7749                           wreg	equ	0xFE8
  7750                           indf2	equ	0xFDF
  7751                           postinc2	equ	0xFDE
  7752                           postdec2	equ	0xFDD
  7753                           plusw2	equ	0xFDB
  7754                           fsr2h	equ	0xFDA
  7755                           fsr2l	equ	0xFD9
  7756                           status	equ	0xFD8
  7757                           
  7758 ;; *************** function _PWM4_LoadDutyValue *****************
  7759 ;; Defined at:
  7760 ;;		line 81 in file "mcc_generated_files/pwm4.c"
  7761 ;; Parameters:    Size  Location     Type
  7762 ;;  dutyValue       2   26[COMRAM] unsigned int 
  7763 ;; Auto vars:     Size  Location     Type
  7764 ;;		None
  7765 ;; Return value:  Size  Location     Type
  7766 ;;                  1    wreg      void 
  7767 ;; Registers used:
  7768 ;;		wreg, status,2, status,0
  7769 ;; Tracked objects:
  7770 ;;		On entry : 0/0
  7771 ;;		On exit  : 0/0
  7772 ;;		Unchanged: 0/0
  7773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7774 ;;      Params:         2       0       0       0       0       0       0
  7775 ;;      Locals:         0       0       0       0       0       0       0
  7776 ;;      Temps:          2       0       0       0       0       0       0
  7777 ;;      Totals:         4       0       0       0       0       0       0
  7778 ;;Total ram usage:        4 bytes
  7779 ;; Hardware stack levels used:    1
  7780 ;; Hardware stack levels required when called:    4
  7781 ;; This function calls:
  7782 ;;		Nothing
  7783 ;; This function is called by:
  7784 ;;		_main
  7785 ;;		_CoolingStart
  7786 ;;		_CoolingStop
  7787 ;; This function uses a non-reentrant model
  7788 ;;
  7789                           
  7790                           	psect	text48
  7791  0019D4                     __ptext48:
  7792                           	opt stack 0
  7793  0019D4                     _PWM4_LoadDutyValue:
  7794                           	opt stack 26
  7795                           
  7796                           ;pwm4.c: 84: CCPR2L = ((dutyValue & 0x03FC)>>2);
  7797                           
  7798                           ;incstack = 0
  7799  0019D4  C01B  F01D         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  7800  0019D8  C01C  F01E         	movff	PWM4_LoadDutyValue@dutyValue+1,??_PWM4_LoadDutyValue+1
  7801  0019DC  90D8               	bcf	status,0,c
  7802  0019DE  321E               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  7803  0019E0  321D               	rrcf	??_PWM4_LoadDutyValue,f,c
  7804  0019E2  90D8               	bcf	status,0,c
  7805  0019E4  321E               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  7806  0019E6  321D               	rrcf	??_PWM4_LoadDutyValue,f,c
  7807  0019E8  501D               	movf	??_PWM4_LoadDutyValue,w,c
  7808  0019EA  6E67               	movwf	3943,c	;volatile
  7809                           
  7810                           ;pwm4.c: 87: CCP2CON = (CCP2CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  7811  0019EC  C01B  F01D         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  7812  0019F0  0E03               	movlw	3
  7813  0019F2  161D               	andwf	??_PWM4_LoadDutyValue,f,c
  7814  0019F4  3A1D               	swapf	??_PWM4_LoadDutyValue,f,c
  7815  0019F6  0EF0               	movlw	240
  7816  0019F8  161D               	andwf	??_PWM4_LoadDutyValue,f,c
  7817  0019FA  5066               	movf	3942,w,c	;volatile
  7818  0019FC  0BCF               	andlw	207
  7819  0019FE  101D               	iorwf	??_PWM4_LoadDutyValue,w,c
  7820  001A00  6E66               	movwf	3942,c	;volatile
  7821  001A02  0012               	return		;funcret
  7822  001A04                     __end_of_PWM4_LoadDutyValue:
  7823                           	opt stack 0
  7824                           tosu	equ	0xFFF
  7825                           tosh	equ	0xFFE
  7826                           tosl	equ	0xFFD
  7827                           pclath	equ	0xFFA
  7828                           tblptru	equ	0xFF8
  7829                           tblptrh	equ	0xFF7
  7830                           tblptrl	equ	0xFF6
  7831                           tablat	equ	0xFF5
  7832                           prodh	equ	0xFF4
  7833                           prodl	equ	0xFF3
  7834                           intcon	equ	0xFF2
  7835                           intcon2	equ	0xFF1
  7836                           postinc0	equ	0xFEE
  7837                           wreg	equ	0xFE8
  7838                           indf2	equ	0xFDF
  7839                           postinc2	equ	0xFDE
  7840                           postdec2	equ	0xFDD
  7841                           plusw2	equ	0xFDB
  7842                           fsr2h	equ	0xFDA
  7843                           fsr2l	equ	0xFD9
  7844                           status	equ	0xFD8
  7845                           
  7846 ;; *************** function _CoolingCheck *****************
  7847 ;; Defined at:
  7848 ;;		line 212 in file "PDU.c"
  7849 ;; Parameters:    Size  Location     Type
  7850 ;;		None
  7851 ;; Auto vars:     Size  Location     Type
  7852 ;;		None
  7853 ;; Return value:  Size  Location     Type
  7854 ;;                  1    wreg      unsigned char 
  7855 ;; Registers used:
  7856 ;;		wreg, status,2
  7857 ;; Tracked objects:
  7858 ;;		On entry : 0/0
  7859 ;;		On exit  : 0/0
  7860 ;;		Unchanged: 0/0
  7861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7862 ;;      Params:         0       0       0       0       0       0       0
  7863 ;;      Locals:         0       0       0       0       0       0       0
  7864 ;;      Temps:          0       0       0       0       0       0       0
  7865 ;;      Totals:         0       0       0       0       0       0       0
  7866 ;;Total ram usage:        0 bytes
  7867 ;; Hardware stack levels used:    1
  7868 ;; Hardware stack levels required when called:    4
  7869 ;; This function calls:
  7870 ;;		Nothing
  7871 ;; This function is called by:
  7872 ;;		_main
  7873 ;; This function uses a non-reentrant model
  7874 ;;
  7875                           
  7876                           	psect	text49
  7877  001C2C                     __ptext49:
  7878                           	opt stack 0
  7879  001C2C                     _CoolingCheck:
  7880                           	opt stack 26
  7881                           
  7882                           ;PDU.c: 213: return MCSOn;
  7883                           
  7884                           ;incstack = 0
  7885  001C2C  503A               	movf	_MCSOn,w,c
  7886  001C2E  0012               	return	
  7887  001C30                     __end_of_CoolingCheck:
  7888                           	opt stack 0
  7889                           tosu	equ	0xFFF
  7890                           tosh	equ	0xFFE
  7891                           tosl	equ	0xFFD
  7892                           pclath	equ	0xFFA
  7893                           tblptru	equ	0xFF8
  7894                           tblptrh	equ	0xFF7
  7895                           tblptrl	equ	0xFF6
  7896                           tablat	equ	0xFF5
  7897                           prodh	equ	0xFF4
  7898                           prodl	equ	0xFF3
  7899                           intcon	equ	0xFF2
  7900                           intcon2	equ	0xFF1
  7901                           postinc0	equ	0xFEE
  7902                           wreg	equ	0xFE8
  7903                           indf2	equ	0xFDF
  7904                           postinc2	equ	0xFDE
  7905                           postdec2	equ	0xFDD
  7906                           plusw2	equ	0xFDB
  7907                           fsr2h	equ	0xFDA
  7908                           fsr2l	equ	0xFD9
  7909                           status	equ	0xFD8
  7910                           
  7911 ;; *************** function _INTERRUPT_InterruptManager *****************
  7912 ;; Defined at:
  7913 ;;		line 67 in file "mcc_generated_files/interrupt_manager.c"
  7914 ;; Parameters:    Size  Location     Type
  7915 ;;		None
  7916 ;; Auto vars:     Size  Location     Type
  7917 ;;		None
  7918 ;; Return value:  Size  Location     Type
  7919 ;;                  1    wreg      void 
  7920 ;; Registers used:
  7921 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7922 ;; Tracked objects:
  7923 ;;		On entry : 0/0
  7924 ;;		On exit  : 0/0
  7925 ;;		Unchanged: 0/0
  7926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7927 ;;      Params:         0       0       0       0       0       0       0
  7928 ;;      Locals:         0       0       0       0       0       0       0
  7929 ;;      Temps:         14       0       0       0       0       0       0
  7930 ;;      Totals:        14       0       0       0       0       0       0
  7931 ;;Total ram usage:       14 bytes
  7932 ;; Hardware stack levels used:    1
  7933 ;; Hardware stack levels required when called:    3
  7934 ;; This function calls:
  7935 ;;		_ADC_ISR
  7936 ;;		_EUSART1_Receive_ISR
  7937 ;;		_EUSART1_Transmit_ISR
  7938 ;;		_TMR1_ISR
  7939 ;; This function is called by:
  7940 ;;		Interrupt level 2
  7941 ;; This function uses a non-reentrant model
  7942 ;;
  7943                           
  7944                           	psect	intcode
  7945  000008                     __pintcode:
  7946                           	opt stack 0
  7947  000008                     _INTERRUPT_InterruptManager:
  7948                           	opt stack 21
  7949                           
  7950                           ;incstack = 0
  7951  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7952  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  7953  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  7954  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  7955  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  7956  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  7957  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  7958  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  7959  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  7960  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  7961  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  7962  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  7963  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  7964  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  7965  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  7966                           
  7967                           ;interrupt_manager.c: 70: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  7968  000042  BA9D               	btfsc	3997,5,c	;volatile
  7969  000044  AA9E               	btfss	3998,5,c	;volatile
  7970  000046  D003               	goto	i2l65
  7971                           
  7972                           ;interrupt_manager.c: 71: {
  7973                           ;interrupt_manager.c: 72: EUSART1_Receive_ISR();
  7974  000048  EC89  F00D         	call	_EUSART1_Receive_ISR	;wreg free
  7975                           
  7976                           ;interrupt_manager.c: 73: }
  7977  00004C  D011               	goto	i2l73
  7978  00004E                     i2l65:
  7979                           
  7980                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  7981  00004E  B89D               	btfsc	3997,4,c	;volatile
  7982  000050  A89E               	btfss	3998,4,c	;volatile
  7983  000052  D003               	goto	i2l67
  7984                           
  7985                           ;interrupt_manager.c: 75: {
  7986                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
  7987  000054  ECB9  F00C         	call	_EUSART1_Transmit_ISR	;wreg free
  7988                           
  7989                           ;interrupt_manager.c: 77: }
  7990  000058  D00B               	goto	i2l73
  7991  00005A                     i2l67:
  7992                           
  7993                           ;interrupt_manager.c: 78: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  7994  00005A  BC9D               	btfsc	3997,6,c	;volatile
  7995  00005C  AC9E               	btfss	3998,6,c	;volatile
  7996  00005E  D003               	goto	i2l69
  7997                           
  7998                           ;interrupt_manager.c: 79: {
  7999                           ;interrupt_manager.c: 80: ADC_ISR();
  8000  000060  EC18  F00E         	call	_ADC_ISR	;wreg free
  8001                           
  8002                           ;interrupt_manager.c: 81: }
  8003  000064  D005               	goto	i2l73
  8004  000066                     i2l69:
  8005                           
  8006                           ;interrupt_manager.c: 82: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  8007  000066  B09D               	btfsc	3997,0,c	;volatile
  8008  000068  A09E               	btfss	3998,0,c	;volatile
  8009  00006A  D002               	goto	i2l73
  8010                           
  8011                           ;interrupt_manager.c: 83: {
  8012                           ;interrupt_manager.c: 84: TMR1_ISR();
  8013  00006C  EC80  F00C         	call	_TMR1_ISR	;wreg free
  8014  000070                     i2l73:
  8015  000070  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  8016  000074  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  8017  000078  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  8018  00007C  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  8019  000080  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  8020  000084  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  8021  000088  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  8022  00008C  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  8023  000090  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  8024  000094  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  8025  000098  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  8026  00009C  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  8027  0000A0  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  8028  0000A4  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  8029  0000A8  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8030  0000AA  0011               	retfie		f
  8031  0000AC                     __end_of_INTERRUPT_InterruptManager:
  8032                           	opt stack 0
  8033                           tosu	equ	0xFFF
  8034                           tosh	equ	0xFFE
  8035                           tosl	equ	0xFFD
  8036                           pclatu	equ	0xFFB
  8037                           pclath	equ	0xFFA
  8038                           tblptru	equ	0xFF8
  8039                           tblptrh	equ	0xFF7
  8040                           tblptrl	equ	0xFF6
  8041                           tablat	equ	0xFF5
  8042                           prodh	equ	0xFF4
  8043                           prodl	equ	0xFF3
  8044                           intcon	equ	0xFF2
  8045                           intcon2	equ	0xFF1
  8046                           postinc0	equ	0xFEE
  8047                           fsr0h	equ	0xFEA
  8048                           fsr0l	equ	0xFE9
  8049                           wreg	equ	0xFE8
  8050                           fsr1h	equ	0xFE2
  8051                           fsr1l	equ	0xFE1
  8052                           indf2	equ	0xFDF
  8053                           postinc2	equ	0xFDE
  8054                           postdec2	equ	0xFDD
  8055                           plusw2	equ	0xFDB
  8056                           fsr2h	equ	0xFDA
  8057                           fsr2l	equ	0xFD9
  8058                           status	equ	0xFD8
  8059                           
  8060 ;; *************** function _TMR1_ISR *****************
  8061 ;; Defined at:
  8062 ;;		line 161 in file "mcc_generated_files/tmr1.c"
  8063 ;; Parameters:    Size  Location     Type
  8064 ;;		None
  8065 ;; Auto vars:     Size  Location     Type
  8066 ;;		None
  8067 ;; Return value:  Size  Location     Type
  8068 ;;                  2   53[None  ] int 
  8069 ;; Registers used:
  8070 ;;		wreg, status,2, status,0
  8071 ;; Tracked objects:
  8072 ;;		On entry : 0/0
  8073 ;;		On exit  : 0/0
  8074 ;;		Unchanged: 0/0
  8075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8076 ;;      Params:         0       0       0       0       0       0       0
  8077 ;;      Locals:         0       0       0       0       0       0       0
  8078 ;;      Temps:          0       0       0       0       0       0       0
  8079 ;;      Totals:         0       0       0       0       0       0       0
  8080 ;;Total ram usage:        0 bytes
  8081 ;; Hardware stack levels used:    1
  8082 ;; This function calls:
  8083 ;;		Nothing
  8084 ;; This function is called by:
  8085 ;;		_INTERRUPT_InterruptManager
  8086 ;; This function uses a non-reentrant model
  8087 ;;
  8088                           
  8089                           	psect	text51
  8090  001900                     __ptext51:
  8091                           	opt stack 0
  8092  001900                     _TMR1_ISR:
  8093                           	opt stack 23
  8094                           
  8095                           ;tmr1.c: 165: PIR1bits.TMR1IF = 0;
  8096                           
  8097                           ;incstack = 0
  8098  001900  909E               	bcf	3998,0,c	;volatile
  8099                           
  8100                           ;tmr1.c: 168: TMR1H = (timer1ReloadVal >> 8);
  8101  001902  5036               	movf	_timer1ReloadVal+1,w,c	;volatile
  8102  001904  6ECF               	movwf	4047,c	;volatile
  8103                           
  8104                           ;tmr1.c: 169: TMR1L = (uint8_t) timer1ReloadVal;
  8105  001906  C035  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  8106                           
  8107                           ;tmr1.c: 170: readwhat++;
  8108  00190A  4A42               	infsnz	_readwhat,f,c
  8109  00190C  2A43               	incf	_readwhat+1,f,c
  8110                           
  8111                           ;tmr1.c: 171: if(readwhat > 100)
  8112  00190E  BE43               	btfsc	_readwhat+1,7,c
  8113  001910  0012               	return	
  8114  001912  5043               	movf	_readwhat+1,w,c
  8115  001914  E104               	bnz	i2u96_40
  8116  001916  0E65               	movlw	101
  8117  001918  5C42               	subwf	_readwhat,w,c
  8118  00191A  A0D8               	btfss	status,0,c
  8119  00191C  0012               	return	
  8120  00191E                     i2u96_40:
  8121                           
  8122                           ;tmr1.c: 172: {
  8123                           ;tmr1.c: 173: readwhat = 1;
  8124  00191E  0E00               	movlw	0
  8125  001920  6E43               	movwf	_readwhat+1,c
  8126  001922  0E01               	movlw	1
  8127  001924  6E42               	movwf	_readwhat,c
  8128                           
  8129                           ;tmr1.c: 175: do { LATA4 = ~LATA4; } while(0);
  8130  001926  B889               	btfsc	3977,4,c	;volatile
  8131  001928  D002               	goto	i2u97_40
  8132  00192A  8889               	bsf	3977,4,c	;volatile
  8133  00192C  D001               	goto	i2l2274
  8134  00192E                     i2u97_40:
  8135  00192E  9889               	bcf	3977,4,c	;volatile
  8136  001930                     i2l2274:
  8137  001930  B689               	btfsc	3977,3,c	;volatile
  8138  001932  D002               	goto	i2u99_40
  8139  001934  8689               	bsf	3977,3,c	;volatile
  8140  001936  0012               	return	
  8141  001938                     i2u99_40:
  8142  001938  9689               	bcf	3977,3,c	;volatile
  8143  00193A  0012               	return	
  8144  00193C                     __end_of_TMR1_ISR:
  8145                           	opt stack 0
  8146                           tosu	equ	0xFFF
  8147                           tosh	equ	0xFFE
  8148                           tosl	equ	0xFFD
  8149                           pclatu	equ	0xFFB
  8150                           pclath	equ	0xFFA
  8151                           tblptru	equ	0xFF8
  8152                           tblptrh	equ	0xFF7
  8153                           tblptrl	equ	0xFF6
  8154                           tablat	equ	0xFF5
  8155                           prodh	equ	0xFF4
  8156                           prodl	equ	0xFF3
  8157                           intcon	equ	0xFF2
  8158                           intcon2	equ	0xFF1
  8159                           postinc0	equ	0xFEE
  8160                           fsr0h	equ	0xFEA
  8161                           fsr0l	equ	0xFE9
  8162                           wreg	equ	0xFE8
  8163                           fsr1h	equ	0xFE2
  8164                           fsr1l	equ	0xFE1
  8165                           indf2	equ	0xFDF
  8166                           postinc2	equ	0xFDE
  8167                           postdec2	equ	0xFDD
  8168                           plusw2	equ	0xFDB
  8169                           fsr2h	equ	0xFDA
  8170                           fsr2l	equ	0xFD9
  8171                           status	equ	0xFD8
  8172                           
  8173 ;; *************** function _EUSART1_Transmit_ISR *****************
  8174 ;; Defined at:
  8175 ;;		line 153 in file "UART.c"
  8176 ;; Parameters:    Size  Location     Type
  8177 ;;		None
  8178 ;; Auto vars:     Size  Location     Type
  8179 ;;		None
  8180 ;; Return value:  Size  Location     Type
  8181 ;;                  1    wreg      void 
  8182 ;; Registers used:
  8183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8184 ;; Tracked objects:
  8185 ;;		On entry : 0/0
  8186 ;;		On exit  : 0/0
  8187 ;;		Unchanged: 0/0
  8188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8189 ;;      Params:         0       0       0       0       0       0       0
  8190 ;;      Locals:         0       0       0       0       0       0       0
  8191 ;;      Temps:          0       0       0       0       0       0       0
  8192 ;;      Totals:         0       0       0       0       0       0       0
  8193 ;;Total ram usage:        0 bytes
  8194 ;; Hardware stack levels used:    1
  8195 ;; Hardware stack levels required when called:    2
  8196 ;; This function calls:
  8197 ;;		i2_UART_buff_get
  8198 ;;		i2_UART_buff_size
  8199 ;; This function is called by:
  8200 ;;		_INTERRUPT_InterruptManager
  8201 ;; This function uses a non-reentrant model
  8202 ;;
  8203                           
  8204                           	psect	text52
  8205  001972                     __ptext52:
  8206                           	opt stack 0
  8207  001972                     _EUSART1_Transmit_ISR:
  8208                           	opt stack 21
  8209                           
  8210                           ;UART.c: 154: if (UART_buff_size(&output_buffer) > 0) {
  8211                           
  8212                           ;incstack = 0
  8213  001972  0E00               	movlw	low _output_buffer
  8214  001974  6E01               	movwf	i2UART_buff_size@_this,c
  8215  001976  0E04               	movlw	high _output_buffer
  8216  001978  6E02               	movwf	i2UART_buff_size@_this+1,c
  8217  00197A  ECCA  F00D         	call	i2_UART_buff_size	;wreg free
  8218  00197E  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  8219  001980  D00D               	goto	i2l3462
  8220  001982  5002               	movf	?i2_UART_buff_size+1,w,c
  8221  001984  E103               	bnz	i2u256_40
  8222  001986  0401               	decf	?i2_UART_buff_size,w,c
  8223  001988  A0D8               	btfss	status,0,c
  8224  00198A  D008               	goto	i2l3462
  8225  00198C                     i2u256_40:
  8226                           
  8227                           ;UART.c: 155: TXREG1 = UART_buff_get(&output_buffer);
  8228  00198C  0E00               	movlw	low _output_buffer
  8229  00198E  6E07               	movwf	i2UART_buff_get@_this,c
  8230  001990  0E04               	movlw	high _output_buffer
  8231  001992  6E08               	movwf	i2UART_buff_get@_this+1,c
  8232  001994  ECAA  F009         	call	i2_UART_buff_get	;wreg free
  8233  001998  6EAD               	movwf	4013,c	;volatile
  8234                           
  8235                           ;UART.c: 156: } else {
  8236  00199A  0012               	return	
  8237  00199C                     i2l3462:
  8238                           
  8239                           ;UART.c: 157: Transmit_stall = 1;
  8240  00199C  0E01               	movlw	1
  8241  00199E  6E44               	movwf	_Transmit_stall,c
  8242                           
  8243                           ;UART.c: 158: PIE1bits.TX1IE = 0;
  8244  0019A0  989D               	bcf	3997,4,c	;volatile
  8245  0019A2  0012               	return	
  8246  0019A4                     __end_of_EUSART1_Transmit_ISR:
  8247                           	opt stack 0
  8248                           tosu	equ	0xFFF
  8249                           tosh	equ	0xFFE
  8250                           tosl	equ	0xFFD
  8251                           pclatu	equ	0xFFB
  8252                           pclath	equ	0xFFA
  8253                           tblptru	equ	0xFF8
  8254                           tblptrh	equ	0xFF7
  8255                           tblptrl	equ	0xFF6
  8256                           tablat	equ	0xFF5
  8257                           prodh	equ	0xFF4
  8258                           prodl	equ	0xFF3
  8259                           intcon	equ	0xFF2
  8260                           intcon2	equ	0xFF1
  8261                           postinc0	equ	0xFEE
  8262                           fsr0h	equ	0xFEA
  8263                           fsr0l	equ	0xFE9
  8264                           wreg	equ	0xFE8
  8265                           fsr1h	equ	0xFE2
  8266                           fsr1l	equ	0xFE1
  8267                           indf2	equ	0xFDF
  8268                           postinc2	equ	0xFDE
  8269                           postdec2	equ	0xFDD
  8270                           plusw2	equ	0xFDB
  8271                           fsr2h	equ	0xFDA
  8272                           fsr2l	equ	0xFD9
  8273                           status	equ	0xFD8
  8274                           
  8275 ;; *************** function i2_UART_buff_size *****************
  8276 ;; Defined at:
  8277 ;;		line 104 in file "UART.c"
  8278 ;; Parameters:    Size  Location     Type
  8279 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  8280 ;;		 -> output_buffer(206), input_buffer(206), 
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;		None
  8283 ;; Return value:  Size  Location     Type
  8284 ;;                  2    0[COMRAM] int 
  8285 ;; Registers used:
  8286 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8287 ;; Tracked objects:
  8288 ;;		On entry : 0/0
  8289 ;;		On exit  : 0/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8292 ;;      Params:         2       0       0       0       0       0       0
  8293 ;;      Locals:         0       0       0       0       0       0       0
  8294 ;;      Temps:          0       0       0       0       0       0       0
  8295 ;;      Totals:         2       0       0       0       0       0       0
  8296 ;;Total ram usage:        2 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; This function calls:
  8299 ;;		Nothing
  8300 ;; This function is called by:
  8301 ;;		_EUSART1_Transmit_ISR
  8302 ;; This function uses a non-reentrant model
  8303 ;;
  8304                           
  8305                           	psect	text53
  8306  001B94                     __ptext53:
  8307                           	opt stack 0
  8308  001B94                     i2_UART_buff_size:
  8309                           	opt stack 22
  8310                           
  8311                           ;UART.c: 105: return (_this->count);
  8312                           
  8313                           ;incstack = 0
  8314  001B94  EE20 F0CC          	lfsr	2,204
  8315  001B98  5001               	movf	i2UART_buff_size@_this,w,c
  8316  001B9A  26D9               	addwf	fsr2l,f,c
  8317  001B9C  5002               	movf	i2UART_buff_size@_this+1,w,c
  8318  001B9E  22DA               	addwfc	fsr2h,f,c
  8319  001BA0  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  8320  001BA4  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  8321  001BA8  0012               	return	
  8322  001BAA                     __end_ofi2_UART_buff_size:
  8323                           	opt stack 0
  8324                           tosu	equ	0xFFF
  8325                           tosh	equ	0xFFE
  8326                           tosl	equ	0xFFD
  8327                           pclatu	equ	0xFFB
  8328                           pclath	equ	0xFFA
  8329                           tblptru	equ	0xFF8
  8330                           tblptrh	equ	0xFF7
  8331                           tblptrl	equ	0xFF6
  8332                           tablat	equ	0xFF5
  8333                           prodh	equ	0xFF4
  8334                           prodl	equ	0xFF3
  8335                           intcon	equ	0xFF2
  8336                           intcon2	equ	0xFF1
  8337                           postinc0	equ	0xFEE
  8338                           fsr0h	equ	0xFEA
  8339                           fsr0l	equ	0xFE9
  8340                           wreg	equ	0xFE8
  8341                           fsr1h	equ	0xFE2
  8342                           fsr1l	equ	0xFE1
  8343                           indf2	equ	0xFDF
  8344                           postinc2	equ	0xFDE
  8345                           postdec2	equ	0xFDD
  8346                           plusw2	equ	0xFDB
  8347                           fsr2h	equ	0xFDA
  8348                           fsr2l	equ	0xFD9
  8349                           status	equ	0xFD8
  8350                           
  8351 ;; *************** function i2_UART_buff_get *****************
  8352 ;; Defined at:
  8353 ;;		line 83 in file "UART.c"
  8354 ;; Parameters:    Size  Location     Type
  8355 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  8356 ;;		 -> output_buffer(206), input_buffer(206), 
  8357 ;; Auto vars:     Size  Location     Type
  8358 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  8359 ;; Return value:  Size  Location     Type
  8360 ;;                  1    wreg      unsigned char 
  8361 ;; Registers used:
  8362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8363 ;; Tracked objects:
  8364 ;;		On entry : 0/0
  8365 ;;		On exit  : 0/0
  8366 ;;		Unchanged: 0/0
  8367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8368 ;;      Params:         2       0       0       0       0       0       0
  8369 ;;      Locals:         1       0       0       0       0       0       0
  8370 ;;      Temps:          2       0       0       0       0       0       0
  8371 ;;      Totals:         5       0       0       0       0       0       0
  8372 ;;Total ram usage:        5 bytes
  8373 ;; Hardware stack levels used:    1
  8374 ;; Hardware stack levels required when called:    1
  8375 ;; This function calls:
  8376 ;;		i2_UART_buff_modulo_inc
  8377 ;; This function is called by:
  8378 ;;		_EUSART1_Transmit_ISR
  8379 ;; This function uses a non-reentrant model
  8380 ;;
  8381                           
  8382                           	psect	text54
  8383  001354                     __ptext54:
  8384                           	opt stack 0
  8385  001354                     i2_UART_buff_get:
  8386                           	opt stack 21
  8387                           
  8388                           ;UART.c: 84: unsigned char c;
  8389                           ;UART.c: 85: if (_this->count > 0) {
  8390                           
  8391                           ;incstack = 0
  8392  001354  EE20 F0CC          	lfsr	2,204
  8393  001358  5007               	movf	i2UART_buff_get@_this,w,c
  8394  00135A  26D9               	addwf	fsr2l,f,c
  8395  00135C  5008               	movf	i2UART_buff_get@_this+1,w,c
  8396  00135E  22DA               	addwfc	fsr2h,f,c
  8397  001360  0E01               	movlw	1
  8398  001362  BEDB               	btfsc	plusw2,7,c
  8399  001364  D03C               	goto	i2l3432
  8400  001366  0E01               	movlw	1
  8401  001368  50DB               	movf	plusw2,w,c
  8402  00136A  E103               	bnz	i2u253_40
  8403  00136C  04DE               	decf	postinc2,w,c
  8404  00136E  A0D8               	btfss	status,0,c
  8405  001370  D036               	goto	i2l3432
  8406  001372                     i2u253_40:
  8407                           
  8408                           ;UART.c: 86: c = _this->buf[_this->tail];
  8409  001372  EE20 F0CA          	lfsr	2,202
  8410  001376  5007               	movf	i2UART_buff_get@_this,w,c
  8411  001378  26D9               	addwf	fsr2l,f,c
  8412  00137A  5008               	movf	i2UART_buff_get@_this+1,w,c
  8413  00137C  22DA               	addwfc	fsr2h,f,c
  8414  00137E  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  8415  001382  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  8416  001386  5009               	movf	??i2_UART_buff_get,w,c
  8417  001388  2407               	addwf	i2UART_buff_get@_this,w,c
  8418  00138A  6ED9               	movwf	fsr2l,c
  8419  00138C  500A               	movf	??i2_UART_buff_get+1,w,c
  8420  00138E  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  8421  001390  6EDA               	movwf	fsr2h,c
  8422  001392  50DF               	movf	indf2,w,c
  8423  001394  6E0B               	movwf	i2UART_buff_get@c,c
  8424                           
  8425                           ;UART.c: 87: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  8426  001396  EE20 F0CA          	lfsr	2,202
  8427  00139A  5007               	movf	i2UART_buff_get@_this,w,c
  8428  00139C  26D9               	addwf	fsr2l,f,c
  8429  00139E  5008               	movf	i2UART_buff_get@_this+1,w,c
  8430  0013A0  22DA               	addwfc	fsr2h,f,c
  8431  0013A2  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8432  0013A6  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8433  0013AA  0E00               	movlw	0
  8434  0013AC  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8435  0013AE  0EC8               	movlw	200
  8436  0013B0  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8437  0013B2  EC42  F00D         	call	i2_UART_buff_modulo_inc	;wreg free
  8438  0013B6  EE20 F0CA          	lfsr	2,202
  8439  0013BA  5007               	movf	i2UART_buff_get@_this,w,c
  8440  0013BC  26D9               	addwf	fsr2l,f,c
  8441  0013BE  5008               	movf	i2UART_buff_get@_this+1,w,c
  8442  0013C0  22DA               	addwfc	fsr2h,f,c
  8443  0013C2  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8444  0013C6  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8445                           
  8446                           ;UART.c: 88: --_this->count;
  8447  0013CA  EE20 F0CC          	lfsr	2,204
  8448  0013CE  5007               	movf	i2UART_buff_get@_this,w,c
  8449  0013D0  26D9               	addwf	fsr2l,f,c
  8450  0013D2  5008               	movf	i2UART_buff_get@_this+1,w,c
  8451  0013D4  22DA               	addwfc	fsr2h,f,c
  8452  0013D6  06DE               	decf	postinc2,f,c
  8453  0013D8  0E00               	movlw	0
  8454  0013DA  5ADD               	subwfb	postdec2,f,c
  8455                           
  8456                           ;UART.c: 89: } else {
  8457  0013DC  D002               	goto	i2l798
  8458  0013DE                     i2l3432:
  8459                           
  8460                           ;UART.c: 90: c = 0;
  8461  0013DE  0E00               	movlw	0
  8462  0013E0  6E0B               	movwf	i2UART_buff_get@c,c
  8463  0013E2                     i2l798:
  8464                           
  8465                           ;UART.c: 91: }
  8466                           ;UART.c: 92: return (c);
  8467  0013E2  500B               	movf	i2UART_buff_get@c,w,c
  8468  0013E4  0012               	return	
  8469  0013E6                     __end_ofi2_UART_buff_get:
  8470                           	opt stack 0
  8471                           tosu	equ	0xFFF
  8472                           tosh	equ	0xFFE
  8473                           tosl	equ	0xFFD
  8474                           pclatu	equ	0xFFB
  8475                           pclath	equ	0xFFA
  8476                           tblptru	equ	0xFF8
  8477                           tblptrh	equ	0xFF7
  8478                           tblptrl	equ	0xFF6
  8479                           tablat	equ	0xFF5
  8480                           prodh	equ	0xFF4
  8481                           prodl	equ	0xFF3
  8482                           intcon	equ	0xFF2
  8483                           intcon2	equ	0xFF1
  8484                           postinc0	equ	0xFEE
  8485                           fsr0h	equ	0xFEA
  8486                           fsr0l	equ	0xFE9
  8487                           wreg	equ	0xFE8
  8488                           fsr1h	equ	0xFE2
  8489                           fsr1l	equ	0xFE1
  8490                           indf2	equ	0xFDF
  8491                           postinc2	equ	0xFDE
  8492                           postdec2	equ	0xFDD
  8493                           plusw2	equ	0xFDB
  8494                           fsr2h	equ	0xFDA
  8495                           fsr2l	equ	0xFD9
  8496                           status	equ	0xFD8
  8497                           
  8498 ;; *************** function _EUSART1_Receive_ISR *****************
  8499 ;; Defined at:
  8500 ;;		line 141 in file "UART.c"
  8501 ;; Parameters:    Size  Location     Type
  8502 ;;		None
  8503 ;; Auto vars:     Size  Location     Type
  8504 ;;  data            1   11[COMRAM] unsigned char 
  8505 ;; Return value:  Size  Location     Type
  8506 ;;                  1    wreg      void 
  8507 ;; Registers used:
  8508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8509 ;; Tracked objects:
  8510 ;;		On entry : 0/0
  8511 ;;		On exit  : 0/0
  8512 ;;		Unchanged: 0/0
  8513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8514 ;;      Params:         0       0       0       0       0       0       0
  8515 ;;      Locals:         1       0       0       0       0       0       0
  8516 ;;      Temps:          0       0       0       0       0       0       0
  8517 ;;      Totals:         1       0       0       0       0       0       0
  8518 ;;Total ram usage:        1 bytes
  8519 ;; Hardware stack levels used:    1
  8520 ;; Hardware stack levels required when called:    2
  8521 ;; This function calls:
  8522 ;;		i2_UART_buff_put
  8523 ;; This function is called by:
  8524 ;;		_INTERRUPT_InterruptManager
  8525 ;; This function uses a non-reentrant model
  8526 ;;
  8527                           
  8528                           	psect	text55
  8529  001B12                     __ptext55:
  8530                           	opt stack 0
  8531  001B12                     _EUSART1_Receive_ISR:
  8532                           	opt stack 21
  8533                           
  8534                           ;UART.c: 142: if (1 == RC1STAbits.OERR) {
  8535                           
  8536                           ;incstack = 0
  8537  001B12  A2AB               	btfss	4011,1,c	;volatile
  8538  001B14  D002               	goto	i2l829
  8539                           
  8540                           ;UART.c: 145: RC1STAbits.CREN = 0;
  8541  001B16  98AB               	bcf	4011,4,c	;volatile
  8542                           
  8543                           ;UART.c: 146: RC1STAbits.CREN = 1;
  8544  001B18  88AB               	bsf	4011,4,c	;volatile
  8545  001B1A                     i2l829:
  8546                           
  8547                           ;UART.c: 147: }
  8548                           ;UART.c: 148: unsigned char data = RCREG1;
  8549  001B1A  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  8550                           
  8551                           ;UART.c: 149: UART_buff_put(&input_buffer, data);
  8552  001B1E  0E00               	movlw	low _input_buffer
  8553  001B20  6E07               	movwf	i2UART_buff_put@_this,c
  8554  001B22  0E03               	movlw	high _input_buffer
  8555  001B24  6E08               	movwf	i2UART_buff_put@_this+1,c
  8556  001B26  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  8557  001B2A  EC80  F005         	call	i2_UART_buff_put	;wreg free
  8558                           
  8559                           ;UART.c: 150: PIE1bits.RC1IE == 0;
  8560  001B2E  509D               	movf	3997,w,c	;volatile
  8561  001B30  0012               	return		;funcret
  8562  001B32                     __end_of_EUSART1_Receive_ISR:
  8563                           	opt stack 0
  8564                           tosu	equ	0xFFF
  8565                           tosh	equ	0xFFE
  8566                           tosl	equ	0xFFD
  8567                           pclatu	equ	0xFFB
  8568                           pclath	equ	0xFFA
  8569                           tblptru	equ	0xFF8
  8570                           tblptrh	equ	0xFF7
  8571                           tblptrl	equ	0xFF6
  8572                           tablat	equ	0xFF5
  8573                           prodh	equ	0xFF4
  8574                           prodl	equ	0xFF3
  8575                           intcon	equ	0xFF2
  8576                           intcon2	equ	0xFF1
  8577                           postinc0	equ	0xFEE
  8578                           fsr0h	equ	0xFEA
  8579                           fsr0l	equ	0xFE9
  8580                           wreg	equ	0xFE8
  8581                           fsr1h	equ	0xFE2
  8582                           fsr1l	equ	0xFE1
  8583                           indf2	equ	0xFDF
  8584                           postinc2	equ	0xFDE
  8585                           postdec2	equ	0xFDD
  8586                           plusw2	equ	0xFDB
  8587                           fsr2h	equ	0xFDA
  8588                           fsr2l	equ	0xFD9
  8589                           status	equ	0xFD8
  8590                           
  8591 ;; *************** function i2_UART_buff_put *****************
  8592 ;; Defined at:
  8593 ;;		line 70 in file "UART.c"
  8594 ;; Parameters:    Size  Location     Type
  8595 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  8596 ;;		 -> output_buffer(206), input_buffer(206), 
  8597 ;;  c               1    8[COMRAM] const unsigned char 
  8598 ;; Auto vars:     Size  Location     Type
  8599 ;;		None
  8600 ;; Return value:  Size  Location     Type
  8601 ;;                  1    wreg      void 
  8602 ;; Registers used:
  8603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8604 ;; Tracked objects:
  8605 ;;		On entry : 0/0
  8606 ;;		On exit  : 0/0
  8607 ;;		Unchanged: 0/0
  8608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8609 ;;      Params:         3       0       0       0       0       0       0
  8610 ;;      Locals:         0       0       0       0       0       0       0
  8611 ;;      Temps:          2       0       0       0       0       0       0
  8612 ;;      Totals:         5       0       0       0       0       0       0
  8613 ;;Total ram usage:        5 bytes
  8614 ;; Hardware stack levels used:    1
  8615 ;; Hardware stack levels required when called:    1
  8616 ;; This function calls:
  8617 ;;		i2_UART_buff_modulo_inc
  8618 ;; This function is called by:
  8619 ;;		_EUSART1_Receive_ISR
  8620 ;; This function uses a non-reentrant model
  8621 ;;
  8622                           
  8623                           	psect	text56
  8624  000B00                     __ptext56:
  8625                           	opt stack 0
  8626  000B00                     i2_UART_buff_put:
  8627                           	opt stack 21
  8628                           
  8629                           ;UART.c: 71: if (_this->count < 200) {
  8630                           
  8631                           ;incstack = 0
  8632  000B00  EE20 F0CC          	lfsr	2,204
  8633  000B04  5007               	movf	i2UART_buff_put@_this,w,c
  8634  000B06  26D9               	addwf	fsr2l,f,c
  8635  000B08  5008               	movf	i2UART_buff_put@_this+1,w,c
  8636  000B0A  22DA               	addwfc	fsr2h,f,c
  8637  000B0C  0E01               	movlw	1
  8638  000B0E  BEDB               	btfsc	plusw2,7,c
  8639  000B10  D007               	goto	i2l3412
  8640  000B12  0E01               	movlw	1
  8641  000B14  50DB               	movf	plusw2,w,c
  8642  000B16  E13A               	bnz	i2l3418
  8643  000B18  0EC8               	movlw	200
  8644  000B1A  5CDE               	subwf	postinc2,w,c
  8645  000B1C  B0D8               	btfsc	status,0,c
  8646  000B1E  D036               	goto	i2l3418
  8647  000B20                     i2l3412:
  8648                           
  8649                           ;UART.c: 72: _this->buf[_this->head] = c;
  8650  000B20  EE20 F0C8          	lfsr	2,200
  8651  000B24  5007               	movf	i2UART_buff_put@_this,w,c
  8652  000B26  26D9               	addwf	fsr2l,f,c
  8653  000B28  5008               	movf	i2UART_buff_put@_this+1,w,c
  8654  000B2A  22DA               	addwfc	fsr2h,f,c
  8655  000B2C  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8656  000B30  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8657  000B34  500A               	movf	??i2_UART_buff_put,w,c
  8658  000B36  2407               	addwf	i2UART_buff_put@_this,w,c
  8659  000B38  6ED9               	movwf	fsr2l,c
  8660  000B3A  500B               	movf	??i2_UART_buff_put+1,w,c
  8661  000B3C  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8662  000B3E  6EDA               	movwf	fsr2h,c
  8663  000B40  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8664                           
  8665                           ;UART.c: 73: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8666  000B44  EE20 F0C8          	lfsr	2,200
  8667  000B48  5007               	movf	i2UART_buff_put@_this,w,c
  8668  000B4A  26D9               	addwf	fsr2l,f,c
  8669  000B4C  5008               	movf	i2UART_buff_put@_this+1,w,c
  8670  000B4E  22DA               	addwfc	fsr2h,f,c
  8671  000B50  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8672  000B54  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8673  000B58  0E00               	movlw	0
  8674  000B5A  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8675  000B5C  0EC8               	movlw	200
  8676  000B5E  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8677  000B60  EC42  F00D         	call	i2_UART_buff_modulo_inc	;wreg free
  8678  000B64  EE20 F0C8          	lfsr	2,200
  8679  000B68  5007               	movf	i2UART_buff_put@_this,w,c
  8680  000B6A  26D9               	addwf	fsr2l,f,c
  8681  000B6C  5008               	movf	i2UART_buff_put@_this+1,w,c
  8682  000B6E  22DA               	addwfc	fsr2h,f,c
  8683  000B70  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8684  000B74  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8685                           
  8686                           ;UART.c: 74: ++_this->count;
  8687  000B78  EE20 F0CC          	lfsr	2,204
  8688  000B7C  5007               	movf	i2UART_buff_put@_this,w,c
  8689  000B7E  26D9               	addwf	fsr2l,f,c
  8690  000B80  5008               	movf	i2UART_buff_put@_this+1,w,c
  8691  000B82  22DA               	addwfc	fsr2h,f,c
  8692  000B84  2ADE               	incf	postinc2,f,c
  8693  000B86  0E00               	movlw	0
  8694  000B88  22DD               	addwfc	postdec2,f,c
  8695                           
  8696                           ;UART.c: 75: } else {
  8697  000B8A  0012               	return	
  8698  000B8C                     i2l3418:
  8699                           
  8700                           ;UART.c: 76: _this->buf[_this->head] = c;
  8701  000B8C  EE20 F0C8          	lfsr	2,200
  8702  000B90  5007               	movf	i2UART_buff_put@_this,w,c
  8703  000B92  26D9               	addwf	fsr2l,f,c
  8704  000B94  5008               	movf	i2UART_buff_put@_this+1,w,c
  8705  000B96  22DA               	addwfc	fsr2h,f,c
  8706  000B98  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8707  000B9C  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8708  000BA0  500A               	movf	??i2_UART_buff_put,w,c
  8709  000BA2  2407               	addwf	i2UART_buff_put@_this,w,c
  8710  000BA4  6ED9               	movwf	fsr2l,c
  8711  000BA6  500B               	movf	??i2_UART_buff_put+1,w,c
  8712  000BA8  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8713  000BAA  6EDA               	movwf	fsr2h,c
  8714  000BAC  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8715                           
  8716                           ;UART.c: 77: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8717  000BB0  EE20 F0C8          	lfsr	2,200
  8718  000BB4  5007               	movf	i2UART_buff_put@_this,w,c
  8719  000BB6  26D9               	addwf	fsr2l,f,c
  8720  000BB8  5008               	movf	i2UART_buff_put@_this+1,w,c
  8721  000BBA  22DA               	addwfc	fsr2h,f,c
  8722  000BBC  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8723  000BC0  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8724  000BC4  0E00               	movlw	0
  8725  000BC6  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8726  000BC8  0EC8               	movlw	200
  8727  000BCA  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8728  000BCC  EC42  F00D         	call	i2_UART_buff_modulo_inc	;wreg free
  8729  000BD0  EE20 F0C8          	lfsr	2,200
  8730  000BD4  5007               	movf	i2UART_buff_put@_this,w,c
  8731  000BD6  26D9               	addwf	fsr2l,f,c
  8732  000BD8  5008               	movf	i2UART_buff_put@_this+1,w,c
  8733  000BDA  22DA               	addwfc	fsr2h,f,c
  8734  000BDC  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8735  000BE0  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8736                           
  8737                           ;UART.c: 78: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  8738  000BE4  EE20 F0CA          	lfsr	2,202
  8739  000BE8  5007               	movf	i2UART_buff_put@_this,w,c
  8740  000BEA  26D9               	addwf	fsr2l,f,c
  8741  000BEC  5008               	movf	i2UART_buff_put@_this+1,w,c
  8742  000BEE  22DA               	addwfc	fsr2h,f,c
  8743  000BF0  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8744  000BF4  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8745  000BF8  0E00               	movlw	0
  8746  000BFA  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8747  000BFC  0EC8               	movlw	200
  8748  000BFE  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8749  000C00  EC42  F00D         	call	i2_UART_buff_modulo_inc	;wreg free
  8750  000C04  EE20 F0CA          	lfsr	2,202
  8751  000C08  5007               	movf	i2UART_buff_put@_this,w,c
  8752  000C0A  26D9               	addwf	fsr2l,f,c
  8753  000C0C  5008               	movf	i2UART_buff_put@_this+1,w,c
  8754  000C0E  22DA               	addwfc	fsr2h,f,c
  8755  000C10  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8756  000C14  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8757  000C18  0012               	return	
  8758  000C1A                     __end_ofi2_UART_buff_put:
  8759                           	opt stack 0
  8760                           tosu	equ	0xFFF
  8761                           tosh	equ	0xFFE
  8762                           tosl	equ	0xFFD
  8763                           pclatu	equ	0xFFB
  8764                           pclath	equ	0xFFA
  8765                           tblptru	equ	0xFF8
  8766                           tblptrh	equ	0xFF7
  8767                           tblptrl	equ	0xFF6
  8768                           tablat	equ	0xFF5
  8769                           prodh	equ	0xFF4
  8770                           prodl	equ	0xFF3
  8771                           intcon	equ	0xFF2
  8772                           intcon2	equ	0xFF1
  8773                           postinc0	equ	0xFEE
  8774                           fsr0h	equ	0xFEA
  8775                           fsr0l	equ	0xFE9
  8776                           wreg	equ	0xFE8
  8777                           fsr1h	equ	0xFE2
  8778                           fsr1l	equ	0xFE1
  8779                           indf2	equ	0xFDF
  8780                           postinc2	equ	0xFDE
  8781                           postdec2	equ	0xFDD
  8782                           plusw2	equ	0xFDB
  8783                           fsr2h	equ	0xFDA
  8784                           fsr2l	equ	0xFD9
  8785                           status	equ	0xFD8
  8786                           
  8787 ;; *************** function i2_UART_buff_modulo_inc *****************
  8788 ;; Defined at:
  8789 ;;		line 108 in file "UART.c"
  8790 ;; Parameters:    Size  Location     Type
  8791 ;;  value           2    0[COMRAM] const unsigned int 
  8792 ;;  modulus         2    2[COMRAM] const unsigned int 
  8793 ;; Auto vars:     Size  Location     Type
  8794 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  8795 ;; Return value:  Size  Location     Type
  8796 ;;                  2    0[COMRAM] unsigned int 
  8797 ;; Registers used:
  8798 ;;		wreg, status,2, status,0
  8799 ;; Tracked objects:
  8800 ;;		On entry : 0/0
  8801 ;;		On exit  : 0/0
  8802 ;;		Unchanged: 0/0
  8803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8804 ;;      Params:         4       0       0       0       0       0       0
  8805 ;;      Locals:         2       0       0       0       0       0       0
  8806 ;;      Temps:          0       0       0       0       0       0       0
  8807 ;;      Totals:         6       0       0       0       0       0       0
  8808 ;;Total ram usage:        6 bytes
  8809 ;; Hardware stack levels used:    1
  8810 ;; This function calls:
  8811 ;;		Nothing
  8812 ;; This function is called by:
  8813 ;;		i2_UART_buff_put
  8814 ;;		i2_UART_buff_get
  8815 ;; This function uses a non-reentrant model
  8816 ;;
  8817                           
  8818                           	psect	text57
  8819  001A84                     __ptext57:
  8820                           	opt stack 0
  8821  001A84                     i2_UART_buff_modulo_inc:
  8822                           	opt stack 21
  8823                           
  8824                           ;UART.c: 109: unsigned int my_value = value + 1;
  8825                           
  8826                           ;incstack = 0
  8827  001A84  0E01               	movlw	1
  8828  001A86  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  8829  001A88  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  8830  001A8A  0E00               	movlw	0
  8831  001A8C  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  8832  001A8E  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  8833                           
  8834                           ;UART.c: 110: if (my_value >= modulus) {
  8835  001A90  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  8836  001A92  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  8837  001A94  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  8838  001A96  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  8839  001A98  A0D8               	btfss	status,0,c
  8840  001A9A  D004               	goto	i2l3052
  8841                           
  8842                           ;UART.c: 111: my_value = 0;
  8843  001A9C  0E00               	movlw	0
  8844  001A9E  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  8845  001AA0  0E00               	movlw	0
  8846  001AA2  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  8847  001AA4                     i2l3052:
  8848                           
  8849                           ;UART.c: 112: }
  8850                           ;UART.c: 113: return (my_value);
  8851  001AA4  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  8852  001AA8  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  8853  001AAC  0012               	return	
  8854  001AAE                     __end_ofi2_UART_buff_modulo_inc:
  8855                           	opt stack 0
  8856                           tosu	equ	0xFFF
  8857                           tosh	equ	0xFFE
  8858                           tosl	equ	0xFFD
  8859                           pclatu	equ	0xFFB
  8860                           pclath	equ	0xFFA
  8861                           tblptru	equ	0xFF8
  8862                           tblptrh	equ	0xFF7
  8863                           tblptrl	equ	0xFF6
  8864                           tablat	equ	0xFF5
  8865                           prodh	equ	0xFF4
  8866                           prodl	equ	0xFF3
  8867                           intcon	equ	0xFF2
  8868                           intcon2	equ	0xFF1
  8869                           postinc0	equ	0xFEE
  8870                           fsr0h	equ	0xFEA
  8871                           fsr0l	equ	0xFE9
  8872                           wreg	equ	0xFE8
  8873                           fsr1h	equ	0xFE2
  8874                           fsr1l	equ	0xFE1
  8875                           indf2	equ	0xFDF
  8876                           postinc2	equ	0xFDE
  8877                           postdec2	equ	0xFDD
  8878                           plusw2	equ	0xFDB
  8879                           fsr2h	equ	0xFDA
  8880                           fsr2l	equ	0xFD9
  8881                           status	equ	0xFD8
  8882                           
  8883 ;; *************** function _ADC_ISR *****************
  8884 ;; Defined at:
  8885 ;;		line 130 in file "mcc_generated_files/adc.c"
  8886 ;; Parameters:    Size  Location     Type
  8887 ;;		None
  8888 ;; Auto vars:     Size  Location     Type
  8889 ;;		None
  8890 ;; Return value:  Size  Location     Type
  8891 ;;                  1    wreg      void 
  8892 ;; Registers used:
  8893 ;;		None
  8894 ;; Tracked objects:
  8895 ;;		On entry : 0/0
  8896 ;;		On exit  : 0/0
  8897 ;;		Unchanged: 0/0
  8898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8899 ;;      Params:         0       0       0       0       0       0       0
  8900 ;;      Locals:         0       0       0       0       0       0       0
  8901 ;;      Temps:          0       0       0       0       0       0       0
  8902 ;;      Totals:         0       0       0       0       0       0       0
  8903 ;;Total ram usage:        0 bytes
  8904 ;; Hardware stack levels used:    1
  8905 ;; This function calls:
  8906 ;;		Nothing
  8907 ;; This function is called by:
  8908 ;;		_INTERRUPT_InterruptManager
  8909 ;; This function uses a non-reentrant model
  8910 ;;
  8911                           
  8912                           	psect	text58
  8913  001C30                     __ptext58:
  8914                           	opt stack 0
  8915  001C30                     _ADC_ISR:
  8916                           	opt stack 23
  8917                           
  8918                           ;adc.c: 133: PIR1bits.ADIF = 0;
  8919                           
  8920                           ;incstack = 0
  8921  001C30  9C9E               	bcf	3998,6,c	;volatile
  8922  001C32  0012               	return		;funcret
  8923  001C34                     __end_of_ADC_ISR:
  8924                           	opt stack 0
  8925  0000                     tosu	equ	0xFFF
  8926                           tosh	equ	0xFFE
  8927                           tosl	equ	0xFFD
  8928                           pclatu	equ	0xFFB
  8929                           pclath	equ	0xFFA
  8930                           tblptru	equ	0xFF8
  8931                           tblptrh	equ	0xFF7
  8932                           tblptrl	equ	0xFF6
  8933                           tablat	equ	0xFF5
  8934                           prodh	equ	0xFF4
  8935                           prodl	equ	0xFF3
  8936                           intcon	equ	0xFF2
  8937                           intcon2	equ	0xFF1
  8938                           postinc0	equ	0xFEE
  8939                           fsr0h	equ	0xFEA
  8940                           fsr0l	equ	0xFE9
  8941                           wreg	equ	0xFE8
  8942                           fsr1h	equ	0xFE2
  8943                           fsr1l	equ	0xFE1
  8944                           indf2	equ	0xFDF
  8945                           postinc2	equ	0xFDE
  8946                           postdec2	equ	0xFDD
  8947                           plusw2	equ	0xFDB
  8948                           fsr2h	equ	0xFDA
  8949                           fsr2l	equ	0xFD9
  8950                           status	equ	0xFD8
  8951                           tosu	equ	0xFFF
  8952                           tosh	equ	0xFFE
  8953                           tosl	equ	0xFFD
  8954                           pclatu	equ	0xFFB
  8955                           pclath	equ	0xFFA
  8956                           tblptru	equ	0xFF8
  8957                           tblptrh	equ	0xFF7
  8958                           tblptrl	equ	0xFF6
  8959                           tablat	equ	0xFF5
  8960                           prodh	equ	0xFF4
  8961                           prodl	equ	0xFF3
  8962                           intcon	equ	0xFF2
  8963                           intcon2	equ	0xFF1
  8964                           postinc0	equ	0xFEE
  8965                           fsr0h	equ	0xFEA
  8966                           fsr0l	equ	0xFE9
  8967                           wreg	equ	0xFE8
  8968                           fsr1h	equ	0xFE2
  8969                           fsr1l	equ	0xFE1
  8970                           indf2	equ	0xFDF
  8971                           postinc2	equ	0xFDE
  8972                           postdec2	equ	0xFDD
  8973                           plusw2	equ	0xFDB
  8974                           fsr2h	equ	0xFDA
  8975                           fsr2l	equ	0xFD9
  8976                           status	equ	0xFD8
  8977                           
  8978                           	psect	text59
  8979  000000                     __ptext59:
  8980                           	opt stack 0
  8981                           tosu	equ	0xFFF
  8982                           tosh	equ	0xFFE
  8983                           tosl	equ	0xFFD
  8984                           pclatu	equ	0xFFB
  8985                           pclath	equ	0xFFA
  8986                           tblptru	equ	0xFF8
  8987                           tblptrh	equ	0xFF7
  8988                           tblptrl	equ	0xFF6
  8989                           tablat	equ	0xFF5
  8990                           prodh	equ	0xFF4
  8991                           prodl	equ	0xFF3
  8992                           intcon	equ	0xFF2
  8993                           intcon2	equ	0xFF1
  8994                           postinc0	equ	0xFEE
  8995                           fsr0h	equ	0xFEA
  8996                           fsr0l	equ	0xFE9
  8997                           wreg	equ	0xFE8
  8998                           fsr1h	equ	0xFE2
  8999                           fsr1l	equ	0xFE1
  9000                           indf2	equ	0xFDF
  9001                           postinc2	equ	0xFDE
  9002                           postdec2	equ	0xFDD
  9003                           plusw2	equ	0xFDB
  9004                           fsr2h	equ	0xFDA
  9005                           fsr2l	equ	0xFD9
  9006                           status	equ	0xFD8
  9007                           
  9008                           	psect	rparam
  9009  0000                     tosu	equ	0xFFF
  9010                           tosh	equ	0xFFE
  9011                           tosl	equ	0xFFD
  9012                           pclatu	equ	0xFFB
  9013                           pclath	equ	0xFFA
  9014                           tblptru	equ	0xFF8
  9015                           tblptrh	equ	0xFF7
  9016                           tblptrl	equ	0xFF6
  9017                           tablat	equ	0xFF5
  9018                           prodh	equ	0xFF4
  9019                           prodl	equ	0xFF3
  9020                           intcon	equ	0xFF2
  9021                           intcon2	equ	0xFF1
  9022                           postinc0	equ	0xFEE
  9023                           fsr0h	equ	0xFEA
  9024                           fsr0l	equ	0xFE9
  9025                           wreg	equ	0xFE8
  9026                           fsr1h	equ	0xFE2
  9027                           fsr1l	equ	0xFE1
  9028                           indf2	equ	0xFDF
  9029                           postinc2	equ	0xFDE
  9030                           postdec2	equ	0xFDD
  9031                           plusw2	equ	0xFDB
  9032                           fsr2h	equ	0xFDA
  9033                           fsr2l	equ	0xFD9
  9034                           status	equ	0xFD8
  9035                           
  9036                           	psect	temp
  9037  000045                     btemp:
  9038                           	opt stack 0
  9039  000045                     	ds	1
  9040  0000                     int$flags	set	btemp
  9041                           tosu	equ	0xFFF
  9042                           tosh	equ	0xFFE
  9043                           tosl	equ	0xFFD
  9044                           pclatu	equ	0xFFB
  9045                           pclath	equ	0xFFA
  9046                           tblptru	equ	0xFF8
  9047                           tblptrh	equ	0xFF7
  9048                           tblptrl	equ	0xFF6
  9049                           tablat	equ	0xFF5
  9050                           prodh	equ	0xFF4
  9051                           prodl	equ	0xFF3
  9052                           intcon	equ	0xFF2
  9053                           intcon2	equ	0xFF1
  9054                           postinc0	equ	0xFEE
  9055                           fsr0h	equ	0xFEA
  9056                           fsr0l	equ	0xFE9
  9057                           wreg	equ	0xFE8
  9058                           fsr1h	equ	0xFE2
  9059                           fsr1l	equ	0xFE1
  9060                           indf2	equ	0xFDF
  9061                           postinc2	equ	0xFDE
  9062                           postdec2	equ	0xFDD
  9063                           plusw2	equ	0xFDB
  9064                           fsr2h	equ	0xFDA
  9065                           fsr2l	equ	0xFD9
  9066                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         1008
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     36      68
    BANK0           160     26     139
    BANK1           256      0     254
    BANK2           256      0     200
    BANK3           256      0     206
    BANK4           256      0     206
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(COMRAM[3]), receiveData@holder_1381(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK2[200]), ring_buffer(BANK1[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK1[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 40
		 -> receiveArray(BANK0[40]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 40
		 -> NULL(NULL[0]), receiveArray(BANK0[40]), 


Critical Paths under _main in COMRAM

    _respondECU->_ToSend
    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _Send_put->_UART_buff_get
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _StartUp595->_Delay
    _writeRegisters->_Delay
    _EnableSlavePower->_SetPin595
    _ComputeStorageData->_DATAEE_ReadByte
    _PotSetpoint->_Delay
    _PotClear->_Delay

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _sendData->_FastTransfer_buffer_flush
    _ToSend->_FastTransfer_buffer_put
    _receiveData->_Send_put
    _Send_put->_UART_buff_put
    _Receive_get->_UART_buff_get
    _SYSTEM_Initialize->_begin
    _Update->_writeRegisters
    _StartUp595->_Clear595
    _Clear595->_writeRegisters
    _CoolingStop->_PotClear
    _CoolingStart->_PotSetpoint

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   63496
                                             21 BANK0      5     5      0
                 _ComputeStorageData
                       _CoolingCheck
                       _CoolingStart
                        _CoolingStop
                         _PDUStartup
                 _PWM4_LoadDutyValue
                        _PotSetpoint
                  _SYSTEM_Initialize
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   32042
                _processPowerRequest
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    8909
                              _Delay
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    5704
                                              4 BANK0      5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                              0 BANK0      4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1751
                                             34 COMRAM     2     0      2
                                              5 BANK0      1     1      0
            _FastTransfer_buffer_put
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     2     2      0
                                              0 BANK0      5     0      5
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0    5462
                                              3 BANK0     18    18      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                              2 BANK0      1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     3     0      3
                                              0 BANK0      2     2      0
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     4     2      2
                                              0 BANK0      1     1      0
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _processPowerRequest                                  2     0      2   17671
                                              4 BANK0      2     0      2
                   _EnableSlavePower
                             _Update
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2478
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM4_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (2) _begin                                               13     0     13    1463
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     599
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2    1015
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PDUStartup                                           0     0      0   20774
                 _ComputeStorageData
                   _EnableSlavePower
                         _StartUp595
                             _Update
 ---------------------------------------------------------------------------------
 (3) _Update                                               0     0      0    1621
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (2) _StartUp595                                           0     0      0    3174
                           _Clear595
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Clear595                                             2     2      0    1720
                                              4 BANK0      2     2      0
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (4) _writeRegisters                                       4     4      0    1621
                                              0 BANK0      4     4      0
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _EnableSlavePower                                     3     1      2   15818
                                              0 BANK0      3     1      2
                          _SetPin595
 ---------------------------------------------------------------------------------
 (4) _SetPin595                                           10     4      6   13953
                                             26 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _ComputeStorageData                                   4     4      0     161
                                             27 COMRAM     4     4      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      31
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CoolingStop                                          0     0      0    1892
                 _PWM4_LoadDutyValue
                           _PotClear
 ---------------------------------------------------------------------------------
 (1) _CoolingStart                                         0     0      0    3763
                 _PWM4_LoadDutyValue
                           _PotClear
                        _PotSetpoint
 ---------------------------------------------------------------------------------
 (1) _PotSetpoint                                         10     8      2    1871
                                              0 BANK0     10     8      2
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _PotClear                                             2     2      0    1522
                                              0 BANK0      2     2      0
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Delay                                                9     5      4    1454
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _PWM4_LoadDutyValue                                   4     2      2     370
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _CoolingCheck                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ComputeStorageData
     _DATAEE_ReadByte
   _CoolingCheck
   _CoolingStart
     _PWM4_LoadDutyValue
     _PotClear
       _Delay
     _PotSetpoint
       _Delay
   _CoolingStop
     _PWM4_LoadDutyValue
     _PotClear
       _Delay
   _PDUStartup
     _ComputeStorageData
       _DATAEE_ReadByte
     _EnableSlavePower
       _SetPin595
     _StartUp595
       _Clear595
         _writeRegisters
           _Delay
       _Delay
     _Update
       _writeRegisters
         _Delay
   _PWM4_LoadDutyValue
   _PotSetpoint
     _Delay
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM4_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
     _TMR2_Initialize
       _TMR2_StartTimer
     _begin
       ___awdiv
   _updateComms
     _processPowerRequest
       _EnableSlavePower
         _SetPin595
       _Update
         _writeRegisters
           _Delay
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _respondECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
       _sendData
         Absolute function(Fake) *
         _CRC8 *
         _FastTransfer_buffer_flush *
           _memset
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C8       8       78.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      FE       6       99.2%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1A      8B       4       86.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     24      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     431       9        0.0%
DATA                 0      0     431      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Oct 07 00:27:41 2016

      __end_of_FastTransfer_buffer_flush 163A                   i2_UART_buff_modulo_inc 1A84  
                          ??_CoolingStop 0024                           ??_CoolingCheck 001B  
                           _rx_array_inx 0040                             ___awdiv@sign 0020  
                         ??_CoolingStart 0024                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                                      l408 1168  
                                    l480 1824                                      l745 1318  
                                    l747 1324                                      l932 102A  
                                    l924 0C6C                                      l933 106A  
                                    l927 0CD0                                      l798 12BC  
                           __CFG_CPB$OFF 000000                                      _PR2 000FBB  
                           __CFG_CPD$OFF 000000                          _timer1ReloadVal 0035  
                        __end_of_ADC_ISR 1C34     FastTransfer_buffer_flush@clearBuffer 00D3  
                        _TMR2_Initialize 1BAA                          _PWM4_Initialize 1BBE  
                                    prod 000FF3                                      tosl 000FFD  
                                    wreg 000FE8            i2UART_buff_modulo_inc@modulus 0003  
                           __CFG_LVP$OFF 000000                                     l4000 18BE  
                                   l4020 13FA                                     l4032 1420  
                                   l4034 1428                                     l4026 140A  
                                   l4052 1460                                     l4044 1448  
                                   l4036 142C                                     l4300 10E0  
                                   l4204 03A6                                     l4302 10F0  
                                   l4230 04C8                                     l4222 0460  
                                   l4206 03AC                                     l4150 010E  
                                   l4048 1452                                     l4312 1130  
                                   l4232 04E2                                     l4224 047A  
                                   l4208 03C0                                     l4314 1140  
                                   l4306 1108                                     l4234 04FC  
                                   l4226 0494                                     l4170 01D4  
                                   l4146 00E0                                     l4154 0112  
                                   l4308 1118                                     l4236 054A  
                                   l4228 04AE                                     l4350 0E2E  
                                   l4318 1158                                     l4270 0658  
                                   l4262 05F0                                     l4238 0566  
                                   l4190 0270                                     l4182 0216  
                                   l4166 01B6                                     l3800 1A1E  
                                   l4272 0672                                     l4264 060A  
                                   l4248 0572                                     l4168 01CE  
                                   l4370 0CB0                                     l4346 0E1E  
                                   l3810 0A6E                                     l4274 068C  
                                   l4266 0624                                     l4186 0248  
                                   l4178 020E                                     l4380 0D02  
                                   l4356 0E48                                     l3804 09FE  
                                   l4276 06DA                                     l4268 063E  
                                   l4436 196C                                     l4294 10B8  
                                   l3830 17F8                                     l4278 06F6  
                                   l4198 030C                                     l4286 0702  
                                   l4606 11B8                                     l4296 10C8  
                                   l3824 12B6                                     l4624 11F6  
                                   l4616 11DA                                     l3780 184E  
                                   l3940 0D34                                     l3836 180E  
                                   l3844 182A                                     l3950 0DB0  
                                   l3942 0D52                                     l3846 1830  
                                   l3774 1A7A                                     l3790 1A50  
                                   l3784 1868                                     l3952 0DCE  
                                   l3944 0D70                     receiveData@crcHolder 00E0  
                                   l3866 0730                                     l3970 08FC  
                                   l3948 0D92                                     l3956 0DEC  
                                   l3892 130C                                     l3884 12D6  
                                   l3796 1A0E                                     l3980 096E  
                                   l3972 0916                                     l3990 1890  
                                   l3974 0932                                     l3966 08C6  
                                   l3984 09AA                                     l3976 093E  
                                   l3968 08E0                                     l3978 0968  
                                   _CRC8 17F2                                     _LATA 000F89  
                                   u3110 1248                                     _LATB 000F8A  
                                   _LATC 000F8B                                     _LATD 000F8C  
                                   _LATE 000F8D                                     u3150 0FB4  
                                   u3171 072E                                     u3308 0992  
                                   u3238 08B0                                     u3408 00BA  
                                   u3248 08CA                                     u3409 00CE  
                                   u3258 08E4                                     u3508 0186  
                                   u3428 00EA                                     u3268 0900  
                                   u3509 019A                                     u3429 00FE  
                                   u3278 091A                                     u3528 01BA  
                                   u3448 0116                                     u3288 0942  
                                   u3449 012A                                     u3708 04E6  
                                   u3468 0134                                     u3469 0148  
                                   u3718 0500                                     u3558 021A  
                                   u4287 1854                                     u3591 02B0  
                                   u3559 022E                                     u3808 0676  
                                   u3728 054E                                     u3648 044A  
                                   u3568 024C                                     u3488 0152  
                                   u3569 0260                                     u3489 0166  
                                   u3818 0690                                     u3658 0464  
                                   u3498 016C                                     u3499 0180  
                                   u3940 106A                                     u3828 06DE  
                                   u3748 05DA                                     u3668 047E  
                                   u3758 05F4                                     u3678 0498  
                                   u3768 060E                                     u3688 04B2  
                                   u3960 1958                                     u3778 0628  
                                   u3698 04CC                                     u3788 0642  
                                   u3798 065C                                     i2l73 0070  
                                   i2l65 004E                                     i2l67 005A  
                                   i2l69 0066                                     _TMR2 000FBC  
                                   _WPUB 000F61                                     _data 0084  
                                   _main 116E                 __end_of_EnableSlavePower 0E16  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     btemp 0045  
                          __CFG_BORV$190 000000                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 0894                                     start 00AC  
                          __CFG_IESO$OFF 000000                             ___param_bank 000010  
         i2UART_buff_modulo_inc@my_value 0005                                    ?_CRC8 001B  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 1C14  
                     crcBufS_put@address 001D                                    ?_main 0001  
                        __end_of___awdiv 146A                                    _EEADR 000FA9  
                                  _ANSB3 0079CB                                    _ANSB4 0079CC  
                        _TMR1_StartTimer 1C28                                    _ANSD7 0079DF  
                        ___awdiv@divisor 001D                                    _T1CON 000FCD  
                                  _T2CON 000FBA                                    _LATB0 007C50  
                                  _LATA3 007C4B                                    _LATA4 007C4C  
                                  _LATB3 007C53                                    _LATB4 007C54  
                                  _LATB5 007C55                                    _LATD4 007C64  
                                  _LATD5 007C65                                    _LATD6 007C66  
                                  _LATD7 007C67                           __CFG_DEBUG$OFF 000000  
                            ?_PDUStartup 0001                                    i2l829 1B1A  
                                  _MCSOn 003A                          ___awdiv@counter 001F  
                                  i2l798 13E2                       _PWM4_LoadDutyValue 19D4  
                                  _TMR1H 000FCF                                    _TMR1L 000FCE  
                    __end_of_CoolingStop 1BF8                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
                                  _Delay 183C                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                     _EUSART1_Transmit_ISR 1972  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                         ??_writeRegisters 0024  
                       __end_of_TMR1_ISR 193C                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                                  _begin 16FA                          _DATAEE_ReadByte 1BD2  
                         __CFG_EBTRB$OFF 000000                                    _group 0025  
                    ?_PWM4_LoadDutyValue 001B                       __CFG_MCLRE$EXTMCLR 000000  
                                  main@i 00E8                                    main@j 00E6  
                __end_of_TMR1_Initialize 1AF2                                    pclath 000FFA  
                                  tablat 000FF5                            ??_Receive_get 0025  
                                  plusw2 000FDB                           begin@stuffpeek 00DC  
                   __size_of_crcBufS_put 00D8                                    status 000FD8  
                       __end_of_Clear595 18C4                           __CFG_HFOFST$ON 000000  
                        _TMR2_StartTimer 1C24                             ?_receiveData 0001  
                         __CFG_PBADEN$ON 000000                     PotSetpoint@new_point 00D1  
                           __end_of_CRC8 183C                          __initialization 155A  
             __end_of_EUSART1_Initialize 1900                             __end_of_main 122A  
                             _CurrentADC 006C                     ??_PWM4_LoadDutyValue 001D  
                             ToSend@what 0023                                   ??_CRC8 001E  
                __end_of_PWM4_Initialize 1BD2                  __end_of_TMR2_Initialize 1BBE  
                              ??_ADC_ISR 0001              ?_INTERRUPT_InterruptManager 0001  
                   PotSetpoint@set_point 00D5                                   ??_main 0025  
                       __end_of_PotClear 10A0                            __activetblptr 000002  
                       __end_of_Send_put 19D4                __size_ofi2_UART_buff_size 0016  
                                 ?_Delay 001B                    ?_EUSART1_Transmit_ISR 0001  
          FastTransfer_buffer_put@towhat 00D4                                   ?_begin 00D1  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                                   _EEDATA 000FA8  
                                 _CCPR2H 000F68                                   _CCPR2L 000F67  
                                 _EECON2 000FA7                         ___awdiv@dividend 001B  
                                 _ANSELA 000F38                                   _ANSELB 000F39  
                                 _ANSELC 000F3A                                   _ANSELD 000F3B  
                                 _ANSELE 000F3C                                   _T1GCON 000FCC  
                   __end_of_CoolingCheck 1C30                          i2_UART_buff_get 1354  
                                 _RC1STA 000FAB                          i2_UART_buff_put 0B00  
                                 i2l3052 1AA4                                   Delay@i 0020  
                                 i2l2274 1930                                   i2l3412 0B20  
                         __CFG_WDTEN$OFF 000000                                   i2l3432 13DE  
                                 i2l3418 0B8C                                   i2l3462 199C  
            UART_buff_modulo_inc@modulus 001D                                   _TABLAT 000FF5  
                                 _RCREG1 000FAE                                   _OSCCON 000FD3  
            __end_of_processPowerRequest 116E                                   _SPBRG1 000FAF  
                   __end_of_CoolingStart 1B12                                   _TX1STA 000FAC  
                                 _TRISB3 007C9B                                   _TRISB4 007C9C  
                                 _TRISB5 007C9D                                   _TXREG1 000FAD  
                    __size_of_PDUStartup 005E                           __CFG_XINST$OFF 000000  
                                 _ToSend 1AAE                            ??_PotSetpoint 00D3  
                    __end_of_Receive_get 1C06                             _CCPTMRS1bits 000F48  
            ??_FastTransfer_buffer_flush 0023                                   _Update 1C1E  
                     __size_of_SetPin595 004E                            _output_buffer 0400  
                __end_of_TMR1_StartTimer 1C2C                                ??___awdiv 001F  
                              CRC8@tempI 0020                           __CFG_STVREN$ON 000000  
                            _CoolingStop 1BE6                                   _memset 1A04  
                                 clear_0 1560                                   clear_1 156C  
                                 clear_2 1578                                   clear_3 1584  
                                 clear_4 1590                                   clear_5 159C  
                       ___awdiv@quotient 0021                                   main@UP 00EA  
                                 _rx_len 0041                         __end_of_sendData 09DE  
                __end_of_DATAEE_ReadByte 1BE6                             __pdataCOMRAM 0042  
                          Send_put@_data 00D3                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 018E                               _StartUp595 163A  
           __end_of_UART_buff_modulo_inc 1A84                  __end_of_TMR2_StartTimer 1C28  
          __size_of_INTERRUPT_Initialize 000A                         ?_TMR1_Initialize 0001  
                      _SYSTEM_Initialize 14E4                               __accesstop 0060  
                __end_of__initialization 15C0                       ?_SYSTEM_Initialize 0001  
                          ___rparam_used 000001                  ?i2_UART_buff_modulo_inc 0001  
                           ?_updateComms 0001                            __end_of_Delay 1886  
                         __pcstackCOMRAM 0001                      ??_SYSTEM_Initialize 0025  
                       crcBufS_put@_this 001B                            __end_of_begin 1754  
                              ?_TMR1_ISR 0001   __end_of_FastTransfer_buffer_modulo_inc 1A5A  
__size_of_FastTransfer_buffer_modulo_inc 002A           _FastTransfer_buffer_modulo_inc 1A30  
                       ?_TMR2_Initialize 0001                         ?_PWM4_Initialize 0001  
           FastTransfer_buffer_put@_this 00D1                              ToSend@where 00D6  
                    __end_of_PotSetpoint 0D2E              __size_of_ComputeStorageData 00DC  
            PWM4_LoadDutyValue@dutyValue 001B                       UART_buff_get@_this 0021  
                            _Currentcomp 0078                    __end_of_UART_buff_get 12C2  
                 ??_EUSART1_Transmit_ISR 000C                    __end_of_UART_buff_put 0B00  
                              ?_Clear595 0001                                  ??_Delay 001F  
                __end_ofi2_UART_buff_get 13E6                  __end_ofi2_UART_buff_put 0C1A  
            __end_of_EUSART1_Receive_ISR 1B32                _FastTransfer_buffer_flush 15CE  
                                CRC8@crc 0021                                  CRC8@len 001D  
                                CRC8@sum 001E                                  ??_begin 0023  
                      __end_of_SetPin595 17F2                __end_of_SYSTEM_Initialize 155A  
                 receiveData@holder_1381 00DD                      _addressErrorCounter 0090  
                             __pbssBANK0 0060                               __pbssBANK1 0100  
                             __pbssBANK2 0200                               __pbssBANK3 0300  
                             __pbssBANK4 0400                          __CFG_PLLCFG$OFF 000000  
                            _Receive_get 1BF8           __end_ofi2_UART_buff_modulo_inc 1AAE  
                      begin@givenAddress 00D4                        ?_EnableSlavePower 00D1  
                __size_of_UART_buff_init 001E                  __size_of_UART_buff_size 0016  
                              ?_PotClear 0001                                ?_Send_put 0001  
                     ??_EnableSlavePower 0025                     __size_of_receiveData 0656  
                                ?_ToSend 0023                       __CFG_CCP2MX$PORTC1 000000  
                                ?_Update 0001                         ?_TMR1_StartTimer 0001  
                             ??_TMR1_ISR 0001                       __CFG_CCP3MX$PORTB5 000000  
    FastTransfer_buffer_modulo_inc@value 001B                                  _CCP2CON 000F66  
                                _ADC_ISR 1C30                                  ?_memset 001B  
                             _crc_buffer 00C0                  __size_of_ADC_Initialize 0018  
                       ?_DATAEE_ReadByte 0001                             ??_PDUStartup 0025  
                     UART_buff_put@_this 0021                               ??_Clear595 0024  
                       i2_UART_buff_size 1B94              i2UART_buff_modulo_inc@value 0001  
                  __size_of_CoolingCheck 0004                                  _OSCCON2 000FD2  
                                _TBLPTRH 000FF7                                  _TBLPTRL 000FF6  
                                _TBLPTRU 000FF8                              ?_StartUp595 0001  
                      _Receive_available 1B68             UART_buff_modulo_inc@my_value 001F  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                                  i2u96_40 191E  
                                i2u97_40 192E                                  i2u99_40 1938  
                    sendData@whereToSend 00D6                      _receiveArrayAddress 0029  
                  __size_of_CoolingStart 0020                         ?_TMR2_StartTimer 0001  
                     ?_Receive_available 001D                               begin@error 00D5  
                    ??_Receive_available 001F                                ?_sendData 0001  
                                _Current 0060                        _alignErrorCounter 0092  
                        __CFG_PWRTEN$OFF 000000                               ??_PotClear 0024  
                             ??_Send_put 0025                                  __Hparam 0000  
                                __Lparam 0000                       __end_of_PDUStartup 16FA  
                        __size_of_ToSend 0022                              _PotSetpoint 0C1A  
                              _AKNAKsend 0039                          __size_of_Update 0006  
                                ___awdiv 13E6                     _UART_buff_modulo_inc 1A5A  
                                _calc_CS 003B                             _CoolingCheck 1C2C  
                                __pcinit 155A                          __size_of_memset 002C  
                                __ramtop 0600                         i2UART_buff_get@c 000B  
                                __ptext0 116E                                  __ptext1 193C  
                                __ptext2 1754                                  __ptext3 0894  
                                __ptext4 0EF2                                  __ptext5 15CE  
                                __ptext6 1AAE                                  __ptext7 0706  
                                __ptext8 1A30                                  __ptext9 00B0  
                           _CoolingStart 1AF2                         i2UART_buff_put@c 0009  
                              _T1CONbits 000FCD                    _OSCILLATOR_Initialize 1C06  
              __end_of_Receive_available 1B7E                                _T2CONbits 000FBA  
                _FastTransfer_buffer_put 0706                       _EUSART1_Initialize 18C4  
                       ?i2_UART_buff_get 0007                 ??_PIN_MANAGER_Initialize 001B  
                              Clear595@i 00D5                         ?i2_UART_buff_put 0007  
                          ??_crcBufS_put 0020               __size_of_SYSTEM_Initialize 0076  
                   end_of_initialization 15C0                                Delay@wait 001B  
                    ?_EUSART1_Initialize 0001                                  memset@c 001D  
                                memset@n 001F                                  memset@p 0021  
                          __Lmediumconst 0000                               ??_sendData 00D5  
                  ?_UART_buff_modulo_inc 001B                     __size_of_updateComms 0036  
                                postdec2 000FDD                      __size_of_StartUp595 0062  
                                postinc0 000FEE                                  postinc2 000FDE  
                             _respondECU 1754              __size_of_PWM4_LoadDutyValue 0030  
                           ?_CoolingStop 0001                         begin@stufftosend 00D6  
                           SetPin595@Reg 001B                     ??_EUSART1_Initialize 0025  
                           SetPin595@pin 001D                   _dataAdressErrorCounter 0096  
                             _rx_address 003F                                _TRISCbits 000F94  
                              _TRISDbits 000F95                             begin@maxSize 00D3  
     __size_of_FastTransfer_buffer_flush 006C                    i2UART_buff_size@_this 0001  
                         _UART_buff_init 1B32                           _UART_buff_size 1B7E  
                __size_of_writeRegisters 0092                      __end_of_crcBufS_put 0FCA  
                          _moduleAddress 003D             __size_of_processPowerRequest 00CE  
                         __end_of_ToSend 1AD0             __end_of_INTERRUPT_Initialize 1C1E  
                         __end_of_Update 1C24                          _crcErrorCounter 0094  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 1C34  
                      __size_of_TMR1_ISR 003C                           _ADC_Initialize 1B50  
              ??_FastTransfer_buffer_put 0021                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_memset 1A30                        crcBufS_put@status 001F  
                           receiveData@r 00E4               __size_of_Receive_available 0016  
                           receiveData@u 00E2                      start_initialization 155A  
        __size_of_PIN_MANAGER_Initialize 007A                    EnableSlavePower@slave 00D3  
                      __size_of_Clear595 003E                                PotClear@x 00D1  
                 __end_of_UART_buff_init 1B50                           UART_buff_get@c 00D1  
                 __end_of_UART_buff_size 1B94                             ?_Receive_get 0001  
                              _SetPin595 17A4                           UART_buff_put@c 0023  
                    DATAEE_ReadByte@bAdd 001B                 __end_ofi2_UART_buff_size 1BAA  
                               ??_ToSend 0025                   ??_UART_buff_modulo_inc 001F  
               __size_of_TMR1_Initialize 0022                                 CRC8@data 001B  
                               ??_Update 0024                        __size_of_PotClear 00D6  
                      __size_of_Send_put 0030                              ?_respondECU 0001  
                 __end_of_ADC_Initialize 1B68               __end_of_ComputeStorageData 0EF2  
                               ?_ADC_ISR 0001                                 ??_memset 0021  
              __size_of_EnableSlavePower 00E8                              __pbssCOMRAM 0025  
          __size_of_EUSART1_Transmit_ISR 0032                            __pcstackBANK0 00D1  
                           ??_StartUp595 0024                 __size_of_PWM4_Initialize 0014  
               __size_of_TMR2_Initialize 0014                             _Receive_peek 000000  
                    UART_buff_init@_this 0023                              _crcBufS_put 0EF2  
                        ?_UART_buff_init 0023                          ?_UART_buff_size 001B  
           __size_of_EUSART1_Receive_ISR 0020                               ?_SetPin595 001B  
                          ??_receiveData 00D4                               sendData@CS 00D7  
                 __size_of_UART_buff_get 0098                   __size_of_UART_buff_put 0122  
                 _PIN_MANAGER_Initialize 146A                        __size_of_sendData 014A  
                           ?_PotSetpoint 00D1                                __pintcode 0008  
                               ?___awdiv 001B                       __end_of_StartUp595 169C  
                        ?_ADC_Initialize 0001             ??_INTERRUPT_InterruptManager 000D  
                   i2UART_buff_get@_this 0007                     __size_of_CoolingStop 0012  
                               _BAUD1CON 000FB8                 __size_of_TMR1_StartTimer 0004  
                         __size_of_Delay 004A                           __size_of_begin 005A  
               __size_of_DATAEE_ReadByte 0014                      __size_of_respondECU 0050  
                   _INTERRUPT_Initialize 1C14                             _receiveArray 0098  
            processPowerRequest@powerSet 00D5                                 _LATCbits 000F8B  
                         _writeRegisters 12C2                      UART_buff_size@_this 001B  
                              _registers 0100                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D                 __size_of_TMR2_StartTimer 0004  
    __size_of_INTERRUPT_InterruptManager 00A4                                 i2u253_40 1372  
                               i2u256_40 198C                                 _PIR1bits 000F9E  
                    begin@stuffavailable 00DA                                 _RCONbits 000FD0  
                       __CFG_WDTPS$32768 000000                      __end_of_receiveData 0706  
                               _TMR1_ISR 1900           FastTransfer_buffer_flush@_this 00D1  
                           PotSetpoint@x 00D7                             _input_buffer 0300  
                              _rx_buffer 0200                        ??_TMR1_Initialize 001B  
                       __size_of_ADC_ISR 0004                               _ADCON0bits 000FC2  
                             _ADCON2bits 000FC0                     i2UART_buff_put@_this 0007  
                               _Clear595 1886                            _UART_buff_get 122A  
                          _UART_buff_put 09DE                      _processPowerRequest 10A0  
               ??i2_UART_buff_modulo_inc 0005                              _INTCON2bits 000FF1  
                  ?_INTERRUPT_Initialize 0001                        _sendStructAddress 002B  
                 __end_of_writeRegisters 1354                       PotSetpoint@new_pos 00D9  
                            ??_SetPin595 0021                     EnableSlavePower@onof 00D1  
               __size_ofi2_UART_buff_get 0092                        ??_TMR2_Initialize 001B  
                      ??_PWM4_Initialize 001B                 __size_ofi2_UART_buff_put 011A  
                             _EECON1bits 000FA6                            ??_updateComms 0025  
                   __size_of_Receive_get 000E                                 _PotClear 0FCA  
                               __Hrparam 0000                                 _Send_put 19A4  
             __end_of_PWM4_LoadDutyValue 1A04                                 __Lrparam 0000  
                   ?_processPowerRequest 00D5                       __CFG_BOREN$SBORDIS 000000  
                      __CFG_P2BMX$PORTD2 000000                  ??_OSCILLATOR_Initialize 001B  
                       __size_of___awdiv 0084              __size_of_EUSART1_Initialize 003C  
                    begin@stufftoreceive 00D8                         _EnableSlavePower 0D2E  
                             _ANSELCbits 000F3A                           ?_UART_buff_get 0021  
                         ?_UART_buff_put 0021                              CRC8@extract 001F  
                              sendData@i 00D8                                 __ptext10 19A4  
                               __ptext11 09DE                                 __ptext20 16FA  
                               __ptext12 1BF8                                 __ptext21 13E6  
                               __ptext13 122A                               _T1GCONbits 000FCC  
                               __ptext30 18C4                                 __ptext22 1BAA  
                               __ptext14 1A5A                                 __ptext31 1B32  
                               __ptext23 1C24                                 __ptext15 1B68  
                               __ptext40 17A4                                 __ptext32 1A04  
                               __ptext24 1AD0                                 __ptext16 1B7E  
                               __ptext41 0E16                                 __ptext33 1B50  
                               __ptext25 1C28                                 __ptext17 17F2  
                               __ptext42 1BD2                                 __ptext34 169C  
                               __ptext26 1BBE                                 __ptext18 10A0  
                               __ptext51 1900                                 __ptext43 1BE6  
                               __ptext35 1C1E                                 __ptext27 146A  
                               __ptext19 14E4                                 __ptext52 1972  
                               __ptext44 1AF2                                 __ptext36 163A  
                               __ptext28 1C06                                 __ptext53 1B94  
                               __ptext45 0C1A                                 __ptext37 1886  
                               __ptext29 1C14                                 __ptext54 1354  
                               __ptext46 0FCA                                 __ptext38 12C2  
                               __ptext55 1B12                                 __ptext47 183C  
                               __ptext39 0D2E                                 __ptext56 0B00  
                               __ptext48 19D4                                 __ptext57 1A84  
                               __ptext49 1C2C                                 __ptext58 1C30  
                               __ptext59 0000                        ??_TMR1_StartTimer 001B  
                          __size_of_CRC8 004A                                 begin@ptr 00D1  
                EUSART1_Receive_ISR@data 000C                          ?_writeRegisters 0001  
                          _returnAddress 003E                            __size_of_main 00BC  
                            _receiveData 00B0                                 _readwhat 0042  
                         _Transmit_stall 0044                                 _sendData 0894  
                      ??_DATAEE_ReadByte 001B                        ?i2_UART_buff_size 0001  
                  ??_processPowerRequest 0025                               _RC1STAbits 000FAB  
                               _prev_pos 0027                             ??_respondECU 0025  
                     ??i2_UART_buff_size 0003                        writeRegisters@val 00D1  
                               int$flags 0045                             _serial_write 0033  
                      ??_TMR2_StartTimer 001B                      __end_of_updateComms 1972  
     __end_of_INTERRUPT_InterruptManager 00AC               _INTERRUPT_InterruptManager 0008  
                   __size_of_PotSetpoint 0114                      _EUSART1_Receive_ISR 1B12  
                      receiveData@holder 00DA                               _INTCONbits 000FF2  
                    ComputeStorageData@i 001E                UART_buff_modulo_inc@value 001B  
                       ??_UART_buff_init 0025                         ??_UART_buff_size 001D  
                     _ComputeStorageData 0E16                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 002D  
        __size_ofi2_UART_buff_modulo_inc 002A                             ?_crcBufS_put 001B  
                               intlevel2 0000                       __end_of_respondECU 17A4  
                   ?_EUSART1_Receive_ISR 0001   FastTransfer_buffer_modulo_inc@my_value 001F  
         FastTransfer_buffer_put@towhere 00D3                      ?_ComputeStorageData 0001  
                ?_PIN_MANAGER_Initialize 0001                           SetPin595@value 001F  
           __end_of_EUSART1_Transmit_ISR 19A4                              _ring_buffer 0130  
                       ??_ADC_Initialize 001B               ?_FastTransfer_buffer_flush 00D1  
                      ??i2_UART_buff_get 0009                              _serial_peek 002F  
                            _serial_read 0031                        ??i2_UART_buff_put 000A  
               ?_FastTransfer_buffer_put 00D1            __size_of_UART_buff_modulo_inc 002A  
                          ?_CoolingCheck 0001                          ??_UART_buff_get 0023  
                        ??_UART_buff_put 00D1                     ??_ComputeStorageData 001C  
                          ?_CoolingStart 0001    FastTransfer_buffer_modulo_inc@modulus 001D  
                             _PDUStartup 169C                receiveData@crcHolder_1382 00E1  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 003C  
                        writeRegisters@i 00D3                    ??_EUSART1_Receive_ISR 000C  
         __end_of_PIN_MANAGER_Initialize 14E4         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B            updateComms@previousPowerState 0037  
                      __CFG_FOSC$INTIO67 000000                          _TMR1_Initialize 1AD0  
                            _updateComms 193C  
