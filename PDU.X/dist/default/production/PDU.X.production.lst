

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Thu Oct 06 01:24:30 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    70                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    71  0000                     
    72                           	psect	idataCOMRAM
    73  0024F0                     __pidataCOMRAM:
    74                           	opt stack 0
    75                           
    76                           ;initializer for _readwhat
    77  0024F0  0001               	dw	1
    78                           
    79                           ;initializer for _Transmit_stall
    80  0024F2  01                 	db	1
    81  0000                     _ANSELA	set	3896
    82  0000                     _ANSELB	set	3897
    83  0000                     _ANSELC	set	3898
    84  0000                     _ANSELCbits	set	3898
    85  0000                     _ANSELD	set	3899
    86  0000                     _ANSELDbits	set	3899
    87  0000                     _ANSELE	set	3900
    88  0000                     _CCPTMRS1bits	set	3912
    89  0000                     _ANSB3	set	31179
    90  0000                     _ANSB4	set	31180
    91  0000                     _ANSD7	set	31199
    92  0000                     _ADCON0	set	4034
    93  0000                     _ADCON0bits	set	4034
    94  0000                     _ADCON1	set	4033
    95  0000                     _ADCON2	set	4032
    96  0000                     _ADCON2bits	set	4032
    97  0000                     _ADRESH	set	4036
    98  0000                     _ADRESL	set	4035
    99  0000                     _BAUD1CON	set	4024
   100  0000                     _CCP2CON	set	3942
   101  0000                     _CCPR2H	set	3944
   102  0000                     _CCPR2L	set	3943
   103  0000                     _EEADR	set	4009
   104  0000                     _EECON1bits	set	4006
   105  0000                     _EECON2	set	4007
   106  0000                     _EEDATA	set	4008
   107  0000                     _INTCON2bits	set	4081
   108  0000                     _INTCONbits	set	4082
   109  0000                     _IPR1bits	set	3999
   110  0000                     _LATA	set	3977
   111  0000                     _LATB	set	3978
   112  0000                     _LATC	set	3979
   113  0000                     _LATCbits	set	3979
   114  0000                     _LATD	set	3980
   115  0000                     _LATE	set	3981
   116  0000                     _OSCCON	set	4051
   117  0000                     _OSCCON2	set	4050
   118  0000                     _OSCTUNE	set	3995
   119  0000                     _PIE1bits	set	3997
   120  0000                     _PIR1bits	set	3998
   121  0000                     _PR2	set	4027
   122  0000                     _RC1STA	set	4011
   123  0000                     _RC1STAbits	set	4011
   124  0000                     _RCONbits	set	4048
   125  0000                     _RCREG1	set	4014
   126  0000                     _SPBRG1	set	4015
   127  0000                     _SPBRGH1	set	4016
   128  0000                     _T1CON	set	4045
   129  0000                     _T1CONbits	set	4045
   130  0000                     _T1GCON	set	4044
   131  0000                     _T1GCONbits	set	4044
   132  0000                     _T2CON	set	4026
   133  0000                     _T2CONbits	set	4026
   134  0000                     _TABLAT	set	4085
   135  0000                     _TBLPTRH	set	4087
   136  0000                     _TBLPTRL	set	4086
   137  0000                     _TBLPTRU	set	4088
   138  0000                     _TMR1H	set	4047
   139  0000                     _TMR1L	set	4046
   140  0000                     _TMR2	set	4028
   141  0000                     _TRISA	set	3986
   142  0000                     _TRISB	set	3987
   143  0000                     _TRISC	set	3988
   144  0000                     _TRISCbits	set	3988
   145  0000                     _TRISD	set	3989
   146  0000                     _TRISDbits	set	3989
   147  0000                     _TRISE	set	3990
   148  0000                     _TX1STA	set	4012
   149  0000                     _TXREG1	set	4013
   150  0000                     _WPUB	set	3937
   151  0000                     _LATA3	set	31819
   152  0000                     _LATB0	set	31824
   153  0000                     _LATB3	set	31827
   154  0000                     _LATB4	set	31828
   155  0000                     _LATB5	set	31829
   156  0000                     _LATD4	set	31844
   157  0000                     _LATD5	set	31845
   158  0000                     _LATD6	set	31846
   159  0000                     _LATD7	set	31847
   160  0000                     _TRISB3	set	31899
   161  0000                     _TRISB4	set	31900
   162  0000                     _TRISB5	set	31901
   163                           
   164                           ; #config settings
   165  0000                     
   166                           	psect	cinit
   167  001E1E                     __pcinit:
   168                           	opt stack 0
   169  001E1E                     start_initialization:
   170                           	opt stack 0
   171  001E1E                     __initialization:
   172                           	opt stack 0
   173                           
   174                           ; Clear objects allocated to BANK4 (206 bytes)
   175  001E1E  EE04  F000         	lfsr	0,__pbssBANK4
   176  001E22  0ECE               	movlw	206
   177  001E24                     clear_0:
   178  001E24  6AEE               	clrf	postinc0,c
   179  001E26  06E8               	decf	wreg,f,c
   180  001E28  E1FD               	bnz	clear_0
   181                           
   182                           ; Clear objects allocated to BANK3 (206 bytes)
   183  001E2A  EE03  F000         	lfsr	0,__pbssBANK3
   184  001E2E  0ECE               	movlw	206
   185  001E30                     clear_1:
   186  001E30  6AEE               	clrf	postinc0,c
   187  001E32  06E8               	decf	wreg,f,c
   188  001E34  E1FD               	bnz	clear_1
   189                           
   190                           ; Clear objects allocated to BANK2 (200 bytes)
   191  001E36  EE02  F000         	lfsr	0,__pbssBANK2
   192  001E3A  0EC8               	movlw	200
   193  001E3C                     clear_2:
   194  001E3C  6AEE               	clrf	postinc0,c
   195  001E3E  06E8               	decf	wreg,f,c
   196  001E40  E1FD               	bnz	clear_2
   197                           
   198                           ; Clear objects allocated to BANK1 (254 bytes)
   199  001E42  EE01  F000         	lfsr	0,__pbssBANK1
   200  001E46  0EFE               	movlw	254
   201  001E48                     clear_3:
   202  001E48  6AEE               	clrf	postinc0,c
   203  001E4A  06E8               	decf	wreg,f,c
   204  001E4C  E1FD               	bnz	clear_3
   205                           
   206                           ; Clear objects allocated to BANK0 (114 bytes)
   207  001E4E  EE00  F060         	lfsr	0,__pbssBANK0
   208  001E52  0E72               	movlw	114
   209  001E54                     clear_4:
   210  001E54  6AEE               	clrf	postinc0,c
   211  001E56  06E8               	decf	wreg,f,c
   212  001E58  E1FD               	bnz	clear_4
   213                           
   214                           ; Clear objects allocated to COMRAM (28 bytes)
   215  001E5A  EE00  F024         	lfsr	0,__pbssCOMRAM
   216  001E5E  0E1C               	movlw	28
   217  001E60                     clear_5:
   218  001E60  6AEE               	clrf	postinc0,c
   219  001E62  06E8               	decf	wreg,f,c
   220  001E64  E1FD               	bnz	clear_5
   221                           
   222                           ; Initialize objects allocated to COMRAM (3 bytes)
   223                           ; load TBLPTR registers with __pidataCOMRAM
   224  001E66  0EF0               	movlw	low __pidataCOMRAM
   225  001E68  6EF6               	movwf	tblptrl,c
   226  001E6A  0E24               	movlw	high __pidataCOMRAM
   227  001E6C  6EF7               	movwf	tblptrh,c
   228  001E6E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   229  001E70  6EF8               	movwf	tblptru,c
   230  001E72  0009               	tblrd		*+	;fetch initializer
   231  001E74  CFF5 F040          	movff	tablat,__pdataCOMRAM
   232  001E78  0009               	tblrd		*+	;fetch initializer
   233  001E7A  CFF5 F041          	movff	tablat,__pdataCOMRAM+1
   234  001E7E  0009               	tblrd		*+	;fetch initializer
   235  001E80  CFF5 F042          	movff	tablat,__pdataCOMRAM+2
   236  001E84                     end_of_initialization:
   237                           	opt stack 0
   238  001E84                     __end_of__initialization:
   239                           	opt stack 0
   240  001E84  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   241  001E86  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   242  001E88  0E00               	movlw	low (__Lmediumconst shr (0+16))
   243  001E8A  6EF8               	movwf	tblptru,c
   244  001E8C  0100               	movlb	0
   245  001E8E  EF24  F012         	goto	_main	;jump to C main() function
   246                           tblptru	equ	0xFF8
   247                           tblptrh	equ	0xFF7
   248                           tblptrl	equ	0xFF6
   249                           tablat	equ	0xFF5
   250                           postinc0	equ	0xFEE
   251                           wreg	equ	0xFE8
   252                           
   253                           	psect	bssCOMRAM
   254  000024                     __pbssCOMRAM:
   255                           	opt stack 0
   256  000024                     _data:
   257                           	opt stack 0
   258  000024                     	ds	12
   259  000030                     _alignErrorCounter:
   260                           	opt stack 0
   261  000030                     	ds	2
   262  000032                     _crcErrorCounter:
   263                           	opt stack 0
   264  000032                     	ds	2
   265  000034                     _prev_pos:
   266                           	opt stack 0
   267  000034                     	ds	2
   268  000036                     _sendStructAddress:
   269                           	opt stack 0
   270  000036                     	ds	2
   271  000038                     _serial_write:
   272                           	opt stack 0
   273  000038                     	ds	2
   274  00003A                     _timer1ReloadVal:
   275                           	opt stack 0
   276  00003A                     	ds	2
   277  00003C                     updateComms@previousPowerState:
   278                           	opt stack 0
   279  00003C                     	ds	2
   280  00003E                     _MCSOn:
   281                           	opt stack 0
   282  00003E                     	ds	1
   283  00003F                     _moduleAddress:
   284                           	opt stack 0
   285  00003F                     	ds	1
   286                           tblptru	equ	0xFF8
   287                           tblptrh	equ	0xFF7
   288                           tblptrl	equ	0xFF6
   289                           tablat	equ	0xFF5
   290                           postinc0	equ	0xFEE
   291                           wreg	equ	0xFE8
   292                           
   293                           	psect	dataCOMRAM
   294  000040                     __pdataCOMRAM:
   295                           	opt stack 0
   296  000040                     _readwhat:
   297                           	opt stack 0
   298  000040                     	ds	2
   299  000042                     _Transmit_stall:
   300                           	opt stack 0
   301  000042                     	ds	1
   302                           tblptru	equ	0xFF8
   303                           tblptrh	equ	0xFF7
   304                           tblptrl	equ	0xFF6
   305                           tablat	equ	0xFF5
   306                           postinc0	equ	0xFEE
   307                           wreg	equ	0xFE8
   308                           
   309                           	psect	bssBANK0
   310  000060                     __pbssBANK0:
   311                           	opt stack 0
   312  000060                     _Current:
   313                           	opt stack 0
   314  000060                     	ds	12
   315  00006C                     _CurrentADC:
   316                           	opt stack 0
   317  00006C                     	ds	12
   318  000078                     _Currentcomp:
   319                           	opt stack 0
   320  000078                     	ds	12
   321  000084                     _addressErrorCounter:
   322                           	opt stack 0
   323  000084                     	ds	2
   324  000086                     _dataAdressErrorCounter:
   325                           	opt stack 0
   326  000086                     	ds	2
   327  000088                     _group:
   328                           	opt stack 0
   329  000088                     	ds	2
   330  00008A                     _receiveArrayAddress:
   331                           	opt stack 0
   332  00008A                     	ds	2
   333  00008C                     _serial_available:
   334                           	opt stack 0
   335  00008C                     	ds	2
   336  00008E                     _serial_peek:
   337                           	opt stack 0
   338  00008E                     	ds	2
   339  000090                     _serial_read:
   340                           	opt stack 0
   341  000090                     	ds	2
   342  000092                     _AKNAKsend:
   343                           	opt stack 0
   344  000092                     	ds	1
   345  000093                     _calc_CS:
   346                           	opt stack 0
   347  000093                     	ds	1
   348  000094                     _maxDataAddress:
   349                           	opt stack 0
   350  000094                     	ds	1
   351  000095                     _returnAddress:
   352                           	opt stack 0
   353  000095                     	ds	1
   354  000096                     _rx_address:
   355                           	opt stack 0
   356  000096                     	ds	1
   357  000097                     _rx_array_inx:
   358                           	opt stack 0
   359  000097                     	ds	1
   360  000098                     _rx_len:
   361                           	opt stack 0
   362  000098                     	ds	1
   363  000099                     _receiveArray:
   364                           	opt stack 0
   365  000099                     	ds	40
   366  0000C1                     _crc_buffer:
   367                           	opt stack 0
   368  0000C1                     	ds	17
   369                           tblptru	equ	0xFF8
   370                           tblptrh	equ	0xFF7
   371                           tblptrl	equ	0xFF6
   372                           tablat	equ	0xFF5
   373                           postinc0	equ	0xFEE
   374                           wreg	equ	0xFE8
   375                           
   376                           	psect	bssBANK1
   377  000100                     __pbssBANK1:
   378                           	opt stack 0
   379  000100                     _registers:
   380                           	opt stack 0
   381  000100                     	ds	48
   382  000130                     _ring_buffer:
   383                           	opt stack 0
   384  000130                     	ds	206
   385                           tblptru	equ	0xFF8
   386                           tblptrh	equ	0xFF7
   387                           tblptrl	equ	0xFF6
   388                           tablat	equ	0xFF5
   389                           postinc0	equ	0xFEE
   390                           wreg	equ	0xFE8
   391                           
   392                           	psect	bssBANK2
   393  000200                     __pbssBANK2:
   394                           	opt stack 0
   395  000200                     _rx_buffer:
   396                           	opt stack 0
   397  000200                     	ds	200
   398                           tblptru	equ	0xFF8
   399                           tblptrh	equ	0xFF7
   400                           tblptrl	equ	0xFF6
   401                           tablat	equ	0xFF5
   402                           postinc0	equ	0xFEE
   403                           wreg	equ	0xFE8
   404                           
   405                           	psect	bssBANK3
   406  000300                     __pbssBANK3:
   407                           	opt stack 0
   408  000300                     _input_buffer:
   409                           	opt stack 0
   410  000300                     	ds	206
   411                           tblptru	equ	0xFF8
   412                           tblptrh	equ	0xFF7
   413                           tblptrl	equ	0xFF6
   414                           tablat	equ	0xFF5
   415                           postinc0	equ	0xFEE
   416                           wreg	equ	0xFE8
   417                           
   418                           	psect	bssBANK4
   419  000400                     __pbssBANK4:
   420                           	opt stack 0
   421  000400                     _output_buffer:
   422                           	opt stack 0
   423  000400                     	ds	206
   424                           tblptru	equ	0xFF8
   425                           tblptrh	equ	0xFF7
   426                           tblptrl	equ	0xFF6
   427                           tablat	equ	0xFF5
   428                           postinc0	equ	0xFEE
   429                           wreg	equ	0xFE8
   430                           
   431                           	psect	cstackBANK0
   432  0000D2                     __pcstackBANK0:
   433                           	opt stack 0
   434  0000D2                     ?_FastTransfer_buffer_modulo_inc:
   435                           	opt stack 0
   436  0000D2                     ?_UART_buff_modulo_inc:
   437                           	opt stack 0
   438  0000D2                     ?_UART_buff_size:
   439                           	opt stack 0
   440  0000D2                     ?___awdiv:
   441                           	opt stack 0
   442  0000D2                     CRC8@data:
   443                           	opt stack 0
   444  0000D2                     FastTransfer_buffer_modulo_inc@value:
   445                           	opt stack 0
   446  0000D2                     crcBufS_put@_this:
   447                           	opt stack 0
   448  0000D2                     crcBufS_status_put@_this:
   449                           	opt stack 0
   450  0000D2                     crcBufS_get@_this:
   451                           	opt stack 0
   452  0000D2                     UART_buff_size@_this:
   453                           	opt stack 0
   454  0000D2                     UART_buff_modulo_inc@value:
   455                           	opt stack 0
   456  0000D2                     UART_buff_peek@_this:
   457                           	opt stack 0
   458  0000D2                     ___awdiv@dividend:
   459                           	opt stack 0
   460  0000D2                     memset@p1:
   461                           	opt stack 0
   462  0000D2                     Delay@wait:
   463                           	opt stack 0
   464                           
   465                           ; 4 bytes @ 0x0
   466  0000D2                     	ds	2
   467  0000D4                     ??_UART_buff_peek:
   468  0000D4                     ?_Receive_available:
   469                           	opt stack 0
   470  0000D4                     CRC8@len:
   471                           	opt stack 0
   472  0000D4                     crcBufS_put@address:
   473                           	opt stack 0
   474  0000D4                     crcBufS_status_put@time:
   475                           	opt stack 0
   476  0000D4                     crcBufS_get@time:
   477                           	opt stack 0
   478  0000D4                     FastTransfer_buffer_modulo_inc@modulus:
   479                           	opt stack 0
   480  0000D4                     UART_buff_modulo_inc@modulus:
   481                           	opt stack 0
   482  0000D4                     ___awdiv@divisor:
   483                           	opt stack 0
   484  0000D4                     memset@c:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x2
   488  0000D4                     	ds	1
   489  0000D5                     CRC8@sum:
   490                           	opt stack 0
   491  0000D5                     crcBufS_put@oldCRC:
   492                           	opt stack 0
   493  0000D5                     crcBufS_status_put@status:
   494                           	opt stack 0
   495  0000D5                     crcBufS_get@space:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x3
   499  0000D5                     	ds	1
   500  0000D6                     ??_Delay:
   501  0000D6                     ??_crcBufS_get:
   502  0000D6                     ??_crcBufS_status_put:
   503  0000D6                     CRC8@extract:
   504                           	opt stack 0
   505  0000D6                     crcBufS_put@status:
   506                           	opt stack 0
   507  0000D6                     ___awdiv@counter:
   508                           	opt stack 0
   509  0000D6                     FastTransfer_buffer_modulo_inc@my_value:
   510                           	opt stack 0
   511  0000D6                     UART_buff_modulo_inc@my_value:
   512                           	opt stack 0
   513  0000D6                     memset@n:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x4
   517  0000D6                     	ds	1
   518  0000D7                     ??_crcBufS_put:
   519  0000D7                     CRC8@tempI:
   520                           	opt stack 0
   521  0000D7                     ___awdiv@sign:
   522                           	opt stack 0
   523  0000D7                     Delay@i:
   524                           	opt stack 0
   525                           
   526                           ; 4 bytes @ 0x5
   527  0000D7                     	ds	1
   528  0000D8                     CRC8@crc:
   529                           	opt stack 0
   530  0000D8                     FastTransfer_buffer_put@_this:
   531                           	opt stack 0
   532  0000D8                     UART_buff_put@_this:
   533                           	opt stack 0
   534  0000D8                     UART_buff_get@_this:
   535                           	opt stack 0
   536  0000D8                     ___awdiv@quotient:
   537                           	opt stack 0
   538  0000D8                     memset@p:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x6
   542  0000D8                     	ds	2
   543  0000DA                     ??_UART_buff_get:
   544  0000DA                     FastTransfer_buffer_put@towhere:
   545                           	opt stack 0
   546  0000DA                     UART_buff_put@c:
   547                           	opt stack 0
   548  0000DA                     begin@ptr:
   549                           	opt stack 0
   550  0000DA                     FastTransfer_buffer_flush@_this:
   551                           	opt stack 0
   552  0000DA                     crcBufS_status_put@wantedTime:
   553                           	opt stack 0
   554  0000DA                     UART_buff_init@_this:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x8
   558  0000DA                     	ds	1
   559  0000DB                     ??_UART_buff_put:
   560  0000DB                     FastTransfer_buffer_put@towhat:
   561                           	opt stack 0
   562                           
   563                           ; 2 bytes @ 0x9
   564  0000DB                     	ds	1
   565  0000DC                     begin@maxSize:
   566                           	opt stack 0
   567  0000DC                     UART_buff_get@c:
   568                           	opt stack 0
   569  0000DC                     FastTransfer_buffer_flush@clearBuffer:
   570                           	opt stack 0
   571  0000DC                     crcBufS_get@wantedTime:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0xA
   575  0000DC                     	ds	1
   576  0000DD                     ??_FastTransfer_buffer_put:
   577  0000DD                     begin@givenAddress:
   578                           	opt stack 0
   579  0000DD                     Send_put@_data:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0xB
   583  0000DD                     	ds	1
   584  0000DE                     ??_sendData:
   585  0000DE                     begin@error:
   586                           	opt stack 0
   587  0000DE                     CRCcheck@SentCRC:
   588                           	opt stack 0
   589                           
   590                           ; 1 bytes @ 0xC
   591  0000DE                     	ds	1
   592  0000DF                     sendData@whereToSend:
   593                           	opt stack 0
   594  0000DF                     CRCcheck@calculatedCRC:
   595                           	opt stack 0
   596  0000DF                     begin@stufftosend:
   597                           	opt stack 0
   598  0000DF                     ToSend@what:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0xD
   602  0000DF                     	ds	1
   603  0000E0                     sendData@CS:
   604                           	opt stack 0
   605  0000E0                     CRCcheck@arrayHolder:
   606                           	opt stack 0
   607                           
   608                           ; 3 bytes @ 0xE
   609  0000E0                     	ds	1
   610  0000E1                     ToSend@where:
   611                           	opt stack 0
   612  0000E1                     begin@stufftoreceive:
   613                           	opt stack 0
   614  0000E1                     sendData@i:
   615                           	opt stack 0
   616                           
   617                           ; 2 bytes @ 0xF
   618  0000E1                     	ds	2
   619  0000E3                     begin@stuffavailable:
   620                           	opt stack 0
   621  0000E3                     CRCcheck@rt:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x11
   625  0000E3                     	ds	2
   626  0000E5                     ??_receiveData:
   627  0000E5                     begin@stuffpeek:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x13
   631  0000E5                     	ds	2
   632  0000E7                     
   633                           ; 1 bytes @ 0x15
   634  0000E7                     	ds	4
   635  0000EB                     receiveData@holder:
   636                           	opt stack 0
   637                           
   638                           ; 3 bytes @ 0x19
   639  0000EB                     	ds	3
   640  0000EE                     receiveData@holder_1410:
   641                           	opt stack 0
   642                           
   643                           ; 3 bytes @ 0x1C
   644  0000EE                     	ds	3
   645  0000F1                     receiveData@crcHolder:
   646                           	opt stack 0
   647                           
   648                           ; 1 bytes @ 0x1F
   649  0000F1                     	ds	1
   650  0000F2                     receiveData@crcHolder_1411:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0x20
   654  0000F2                     	ds	1
   655  0000F3                     receiveData@u:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x21
   659  0000F3                     	ds	2
   660  0000F5                     receiveData@r:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x23
   664  0000F5                     	ds	2
   665  0000F7                     main@j:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x25
   669  0000F7                     	ds	2
   670                           tblptru	equ	0xFF8
   671                           tblptrh	equ	0xFF7
   672                           tblptrl	equ	0xFF6
   673                           tablat	equ	0xFF5
   674                           postinc0	equ	0xFEE
   675                           wreg	equ	0xFE8
   676                           
   677                           	psect	cstackCOMRAM
   678  000001                     __pcstackCOMRAM:
   679                           	opt stack 0
   680  000001                     ?_ADC_GetConversion:
   681                           	opt stack 0
   682  000001                     ?___wmul:
   683                           	opt stack 0
   684  000001                     ?i2_UART_buff_size:
   685                           	opt stack 0
   686  000001                     ?i2_UART_buff_modulo_inc:
   687                           	opt stack 0
   688  000001                     SetPin595@Reg:
   689                           	opt stack 0
   690  000001                     ___wmul@multiplier:
   691                           	opt stack 0
   692  000001                     i2UART_buff_size@_this:
   693                           	opt stack 0
   694  000001                     i2UART_buff_modulo_inc@value:
   695                           	opt stack 0
   696  000001                     i2Delay@wait:
   697                           	opt stack 0
   698                           
   699                           ; 4 bytes @ 0x0
   700  000001                     	ds	2
   701  000003                     ??_ADC_GetConversion:
   702  000003                     SetPin595@pin:
   703                           	opt stack 0
   704  000003                     ___wmul@multiplicand:
   705                           	opt stack 0
   706  000003                     i2UART_buff_modulo_inc@modulus:
   707                           	opt stack 0
   708                           
   709                           ; 2 bytes @ 0x2
   710  000003                     	ds	2
   711  000005                     ??i2_Delay:
   712  000005                     ADC_GetConversion@channel:
   713                           	opt stack 0
   714  000005                     SetPin595@value:
   715                           	opt stack 0
   716  000005                     ___wmul@product:
   717                           	opt stack 0
   718  000005                     i2UART_buff_modulo_inc@my_value:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x4
   722  000005                     	ds	1
   723  000006                     i2Delay@i:
   724                           	opt stack 0
   725                           
   726                           ; 4 bytes @ 0x5
   727  000006                     	ds	1
   728  000007                     ??_SetPin595:
   729  000007                     i2UART_buff_put@_this:
   730                           	opt stack 0
   731  000007                     i2UART_buff_get@_this:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0x6
   735  000007                     	ds	2
   736  000009                     ??i2_UART_buff_get:
   737  000009                     i2UART_buff_put@c:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0x8
   741  000009                     	ds	1
   742  00000A                     ??i2_UART_buff_put:
   743  00000A                     writeRegisters@val:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x9
   747  00000A                     	ds	1
   748  00000B                     i2UART_buff_get@c:
   749                           	opt stack 0
   750  00000B                     EnableSlavePower@onof:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0xA
   754  00000B                     	ds	1
   755  00000C                     EUSART1_Receive_ISR@data:
   756                           	opt stack 0
   757  00000C                     writeRegisters@i:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0xB
   761  00000C                     	ds	1
   762  00000D                     EnableSlavePower@slave:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0xC
   766  00000D                     	ds	1
   767  00000E                     ??_FuseSystem:
   768  00000E                     ReadCurrent@gather:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0xD
   772  00000E                     	ds	4
   773  000012                     FuseSystem@i:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0x11
   777  000012                     	ds	2
   778  000014                     FuseSystem@i_1550:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x13
   782  000014                     	ds	2
   783  000016                     ??_INTERRUPT_InterruptManager:
   784                           
   785                           ; 1 bytes @ 0x15
   786  000016                     	ds	14
   787                           tblptru	equ	0xFF8
   788                           tblptrh	equ	0xFF7
   789                           tblptrl	equ	0xFF6
   790                           tablat	equ	0xFF5
   791                           postinc0	equ	0xFEE
   792                           wreg	equ	0xFE8
   793                           
   794 ;;
   795 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   796 ;;
   797 ;; *************** function _main *****************
   798 ;; Defined at:
   799 ;;		line 11 in file "main.c"
   800 ;; Parameters:    Size  Location     Type
   801 ;;		None
   802 ;; Auto vars:     Size  Location     Type
   803 ;;  j               2   37[BANK0 ] int 
   804 ;; Return value:  Size  Location     Type
   805 ;;                  1    wreg      void 
   806 ;; Registers used:
   807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   808 ;; Tracked objects:
   809 ;;		On entry : 0/0
   810 ;;		On exit  : 0/0
   811 ;;		Unchanged: 0/0
   812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   813 ;;      Params:         0       0       0       0       0       0       0
   814 ;;      Locals:         0       2       0       0       0       0       0
   815 ;;      Temps:          0       0       0       0       0       0       0
   816 ;;      Totals:         0       2       0       0       0       0       0
   817 ;;Total ram usage:        2 bytes
   818 ;; Hardware stack levels required when called:   12
   819 ;; This function calls:
   820 ;;		_SYSTEM_Initialize
   821 ;;		_updateComms
   822 ;; This function is called by:
   823 ;;		Startup code after reset
   824 ;; This function uses a non-reentrant model
   825 ;;
   826                           
   827                           	psect	text0
   828  002448                     __ptext0:
   829                           	opt stack 0
   830  002448                     _main:
   831                           	opt stack 19
   832                           
   833                           ;main.c: 13: SYSTEM_Initialize();
   834                           
   835                           ;incstack = 0
   836  002448  ECEA  F00F         	call	_SYSTEM_Initialize	;wreg free
   837                           
   838                           ;main.c: 33: (INTCONbits.GIE = 1);
   839  00244C  8EF2               	bsf	intcon,7,c	;volatile
   840                           
   841                           ;main.c: 36: (INTCONbits.PEIE = 1);
   842  00244E  8CF2               	bsf	intcon,6,c	;volatile
   843                           
   844                           ;main.c: 58: LATCbits.LATC5 = 0;
   845  002450  9A8B               	bcf	3979,5,c	;volatile
   846                           
   847                           ;main.c: 63: int j = 1;
   848  002452  0E00               	movlw	0
   849  002454  0100               	movlb	0	; () banked
   850  002456  6FF8               	movwf	(main@j+1)& (0+255),b
   851  002458  0E01               	movlw	1
   852  00245A  6FF7               	movwf	main@j& (0+255),b
   853  00245C                     l4412:
   854                           
   855                           ;main.c: 65: updateComms();
   856  00245C  ECB1  F011         	call	_updateComms	;wreg free
   857  002460  D7FD               	goto	l4412
   858  002462                     __end_of_main:
   859                           	opt stack 0
   860                           tblptru	equ	0xFF8
   861                           tblptrh	equ	0xFF7
   862                           tblptrl	equ	0xFF6
   863                           tablat	equ	0xFF5
   864                           intcon	equ	0xFF2
   865                           postinc0	equ	0xFEE
   866                           wreg	equ	0xFE8
   867                           
   868 ;; *************** function _updateComms *****************
   869 ;; Defined at:
   870 ;;		line 21 in file "Communications.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;		None
   873 ;; Auto vars:     Size  Location     Type
   874 ;;		None
   875 ;; Return value:  Size  Location     Type
   876 ;;                  1    wreg      void 
   877 ;; Registers used:
   878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   879 ;; Tracked objects:
   880 ;;		On entry : 0/0
   881 ;;		On exit  : 0/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   884 ;;      Params:         0       0       0       0       0       0       0
   885 ;;      Locals:         0       0       0       0       0       0       0
   886 ;;      Temps:          0       0       0       0       0       0       0
   887 ;;      Totals:         0       0       0       0       0       0       0
   888 ;;Total ram usage:        0 bytes
   889 ;; Hardware stack levels used:    1
   890 ;; Hardware stack levels required when called:   11
   891 ;; This function calls:
   892 ;;		_receiveData
   893 ;;		_respondECU
   894 ;; This function is called by:
   895 ;;		_main
   896 ;; This function uses a non-reentrant model
   897 ;;
   898                           
   899                           	psect	text1
   900  002362                     __ptext1:
   901                           	opt stack 0
   902  002362                     _updateComms:
   903                           	opt stack 19
   904                           
   905                           ;Communications.c: 22: if (receiveData()) {
   906                           
   907                           ;incstack = 0
   908  002362  EC58  F000         	call	_receiveData	;wreg free
   909  002366  0900               	iorlw	0
   910  002368  B4D8               	btfsc	status,2,c
   911  00236A  0012               	return	
   912                           
   913                           ;Communications.c: 23: static int previousPowerState;
   914                           ;Communications.c: 24: if (previousPowerState != receiveArray[1]) {
   915  00236C  503C               	movf	updateComms@previousPowerState,w,c
   916  00236E  0100               	movlb	0	; () banked
   917  002370  199B               	xorwf	(_receiveArray+2)& (0+255),w,b	;volatile
   918  002372  E105               	bnz	u4040
   919  002374  503D               	movf	updateComms@previousPowerState+1,w,c
   920  002376  0100               	movlb	0	; () banked
   921  002378  199C               	xorwf	(_receiveArray+3)& (0+255),w,b	;volatile
   922  00237A  B4D8               	btfsc	status,2,c
   923  00237C  D004               	goto	l4350
   924  00237E                     u4040:
   925                           
   926                           ; BSR set to: 0
   927                           ;Communications.c: 25: previousPowerState = receiveArray[1];
   928  00237E  C09B  F03C         	movff	_receiveArray+2,updateComms@previousPowerState	;volatile
   929  002382  C09C  F03D         	movff	_receiveArray+3,updateComms@previousPowerState+1	;volatile
   930  002386                     l4350:
   931                           
   932                           ; BSR set to: 0
   933                           ;Communications.c: 27: }
   934                           ;Communications.c: 28: respondECU();
   935  002386  EC98  F010         	call	_respondECU	;wreg free
   936  00238A  0012               	return	
   937  00238C                     __end_of_updateComms:
   938                           	opt stack 0
   939                           tblptru	equ	0xFF8
   940                           tblptrh	equ	0xFF7
   941                           tblptrl	equ	0xFF6
   942                           tablat	equ	0xFF5
   943                           intcon	equ	0xFF2
   944                           postinc0	equ	0xFEE
   945                           wreg	equ	0xFE8
   946                           status	equ	0xFD8
   947                           
   948 ;; *************** function _respondECU *****************
   949 ;; Defined at:
   950 ;;		line 48 in file "Communications.c"
   951 ;; Parameters:    Size  Location     Type
   952 ;;		None
   953 ;; Auto vars:     Size  Location     Type
   954 ;;		None
   955 ;; Return value:  Size  Location     Type
   956 ;;                  1    wreg      void 
   957 ;; Registers used:
   958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   964 ;;      Params:         0       0       0       0       0       0       0
   965 ;;      Locals:         0       0       0       0       0       0       0
   966 ;;      Temps:          0       0       0       0       0       0       0
   967 ;;      Totals:         0       0       0       0       0       0       0
   968 ;;Total ram usage:        0 bytes
   969 ;; Hardware stack levels used:    1
   970 ;; Hardware stack levels required when called:   10
   971 ;; This function calls:
   972 ;;		_Delay
   973 ;;		_ToSend
   974 ;;		_sendData
   975 ;; This function is called by:
   976 ;;		_updateComms
   977 ;; This function uses a non-reentrant model
   978 ;;
   979                           
   980                           	psect	text2
   981  002130                     __ptext2:
   982                           	opt stack 0
   983  002130                     _respondECU:
   984                           	opt stack 19
   985                           
   986                           ;Communications.c: 49: LATCbits.LATC5 = 1;
   987                           
   988                           ;incstack = 0
   989  002130  8A8B               	bsf	3979,5,c	;volatile
   990                           
   991                           ;Communications.c: 50: ToSend(0, 5);
   992  002132  0E00               	movlw	0
   993  002134  0100               	movlb	0	; () banked
   994  002136  6FE0               	movwf	(ToSend@what+1)& (0+255),b
   995  002138  0E05               	movlw	5
   996  00213A  6FDF               	movwf	ToSend@what& (0+255),b
   997  00213C  0E00               	movlw	0
   998  00213E  EC02  F012         	call	_ToSend
   999                           
  1000                           ;Communications.c: 52: Delay(5);
  1001  002142  0E05               	movlw	5
  1002  002144  0100               	movlb	0	; () banked
  1003  002146  6FD2               	movwf	Delay@wait& (0+255),b
  1004  002148  0E00               	movlw	0
  1005  00214A  6FD3               	movwf	(Delay@wait+1)& (0+255),b
  1006  00214C  0E00               	movlw	0
  1007  00214E  6FD4               	movwf	(Delay@wait+2)& (0+255),b
  1008  002150  0E00               	movlw	0
  1009  002152  6FD5               	movwf	(Delay@wait+3)& (0+255),b
  1010  002154  ECB8  F00F         	call	_Delay	;wreg free
  1011                           
  1012                           ;Communications.c: 53: sendData(1);
  1013  002158  0E01               	movlw	1
  1014  00215A  EC83  F009         	call	_sendData
  1015                           
  1016                           ;Communications.c: 54: Delay(3);
  1017  00215E  0E03               	movlw	3
  1018  002160  0100               	movlb	0	; () banked
  1019  002162  6FD2               	movwf	Delay@wait& (0+255),b
  1020  002164  0E00               	movlw	0
  1021  002166  6FD3               	movwf	(Delay@wait+1)& (0+255),b
  1022  002168  0E00               	movlw	0
  1023  00216A  6FD4               	movwf	(Delay@wait+2)& (0+255),b
  1024  00216C  0E00               	movlw	0
  1025  00216E  6FD5               	movwf	(Delay@wait+3)& (0+255),b
  1026  002170  ECB8  F00F         	call	_Delay	;wreg free
  1027                           
  1028                           ;Communications.c: 55: LATCbits.LATC5 = 0;
  1029  002174  9A8B               	bcf	3979,5,c	;volatile
  1030  002176  0012               	return		;funcret
  1031  002178                     __end_of_respondECU:
  1032                           	opt stack 0
  1033                           tblptru	equ	0xFF8
  1034                           tblptrh	equ	0xFF7
  1035                           tblptrl	equ	0xFF6
  1036                           tablat	equ	0xFF5
  1037                           intcon	equ	0xFF2
  1038                           postinc0	equ	0xFEE
  1039                           wreg	equ	0xFE8
  1040                           status	equ	0xFD8
  1041                           
  1042 ;; *************** function _sendData *****************
  1043 ;; Defined at:
  1044 ;;		line 53 in file "FastTransfer.c"
  1045 ;; Parameters:    Size  Location     Type
  1046 ;;  whereToSend     1    wreg     unsigned char 
  1047 ;; Auto vars:     Size  Location     Type
  1048 ;;  whereToSend     1   13[BANK0 ] unsigned char 
  1049 ;;  i               2   15[BANK0 ] int 
  1050 ;;  CS              1   14[BANK0 ] unsigned char 
  1051 ;; Return value:  Size  Location     Type
  1052 ;;                  1    wreg      void 
  1053 ;; Registers used:
  1054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1055 ;; Tracked objects:
  1056 ;;		On entry : 0/0
  1057 ;;		On exit  : 0/0
  1058 ;;		Unchanged: 0/0
  1059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1060 ;;      Params:         0       0       0       0       0       0       0
  1061 ;;      Locals:         0       4       0       0       0       0       0
  1062 ;;      Temps:          0       1       0       0       0       0       0
  1063 ;;      Totals:         0       5       0       0       0       0       0
  1064 ;;Total ram usage:        5 bytes
  1065 ;; Hardware stack levels used:    1
  1066 ;; Hardware stack levels required when called:    9
  1067 ;; This function calls:
  1068 ;;		Absolute function
  1069 ;;		_CRC8
  1070 ;;		_FastTransfer_buffer_flush
  1071 ;;		_Send_put
  1072 ;;		_crcBufS_put
  1073 ;; This function is called by:
  1074 ;;		_respondECU
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           	psect	text3
  1079  001306                     __ptext3:
  1080                           	opt stack 0
  1081  001306                     _sendData:
  1082                           	opt stack 19
  1083                           
  1084                           ;incstack = 0
  1085                           ;sendData@whereToSend stored from wreg
  1086  001306  0100               	movlb	0	; () banked
  1087  001308  6FDF               	movwf	sendData@whereToSend& (0+255),b
  1088                           
  1089                           ;FastTransfer.c: 56: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  1090  00130A  C036  F0D2         	movff	_sendStructAddress,CRC8@data
  1091  00130E  C037  F0D3         	movff	_sendStructAddress+1,CRC8@data+1
  1092  001312  C1FC  F0D4         	movff	_ring_buffer+204,CRC8@len
  1093  001316  EC81  F00F         	call	_CRC8	;wreg free
  1094  00131A  0100               	movlb	0	; () banked
  1095  00131C  6FE0               	movwf	sendData@CS& (0+255),b
  1096                           
  1097                           ; BSR set to: 0
  1098                           ;FastTransfer.c: 58: serial_write(0x06);
  1099  00131E  D801               	call	u3278
  1100  001320  D00B               	goto	l3968
  1101  001322                     u3278:
  1102  001322  0005               	push	
  1103  001324  6EFA               	movwf	pclath,c
  1104  001326  5038               	movf	_serial_write,w,c
  1105  001328  6EFD               	movwf	tosl,c
  1106  00132A  5039               	movf	_serial_write+1,w,c
  1107  00132C  6EFE               	movwf	tosh,c
  1108  00132E  50F8               	movf	tblptru,w,c
  1109  001330  6EFF               	movwf	tosu,c
  1110  001332  50FA               	movf	pclath,w,c
  1111  001334  0E06               	movlw	6
  1112  001336  0012               	return		;indir
  1113  001338                     l3968:
  1114                           
  1115                           ;FastTransfer.c: 59: serial_write(0x85);
  1116  001338  D801               	call	u3288
  1117  00133A  D00B               	goto	l3970
  1118  00133C                     u3288:
  1119  00133C  0005               	push	
  1120  00133E  6EFA               	movwf	pclath,c
  1121  001340  5038               	movf	_serial_write,w,c
  1122  001342  6EFD               	movwf	tosl,c
  1123  001344  5039               	movf	_serial_write+1,w,c
  1124  001346  6EFE               	movwf	tosh,c
  1125  001348  50F8               	movf	tblptru,w,c
  1126  00134A  6EFF               	movwf	tosu,c
  1127  00134C  50FA               	movf	pclath,w,c
  1128  00134E  0E85               	movlw	133
  1129  001350  0012               	return		;indir
  1130  001352                     l3970:
  1131                           
  1132                           ;FastTransfer.c: 60: serial_write(whereToSend);
  1133  001352  D801               	call	u3298
  1134  001354  D00C               	goto	l3972
  1135  001356                     u3298:
  1136  001356  0005               	push	
  1137  001358  6EFA               	movwf	pclath,c
  1138  00135A  5038               	movf	_serial_write,w,c
  1139  00135C  6EFD               	movwf	tosl,c
  1140  00135E  5039               	movf	_serial_write+1,w,c
  1141  001360  6EFE               	movwf	tosh,c
  1142  001362  50F8               	movf	tblptru,w,c
  1143  001364  6EFF               	movwf	tosu,c
  1144  001366  50FA               	movf	pclath,w,c
  1145  001368  0100               	movlb	0	; () banked
  1146  00136A  51DF               	movf	sendData@whereToSend& (0+255),w,b
  1147  00136C  0012               	return		;indir
  1148  00136E                     l3972:
  1149                           
  1150                           ;FastTransfer.c: 61: serial_write(moduleAddress);
  1151  00136E  D801               	call	u3308
  1152  001370  D00B               	goto	l3974
  1153  001372                     u3308:
  1154  001372  0005               	push	
  1155  001374  6EFA               	movwf	pclath,c
  1156  001376  5038               	movf	_serial_write,w,c
  1157  001378  6EFD               	movwf	tosl,c
  1158  00137A  5039               	movf	_serial_write+1,w,c
  1159  00137C  6EFE               	movwf	tosh,c
  1160  00137E  50F8               	movf	tblptru,w,c
  1161  001380  6EFF               	movwf	tosu,c
  1162  001382  50FA               	movf	pclath,w,c
  1163  001384  503F               	movf	_moduleAddress,w,c
  1164  001386  0012               	return		;indir
  1165  001388                     l3974:
  1166                           
  1167                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1168  001388  D801               	call	u3318
  1169  00138A  D00C               	goto	l3976
  1170  00138C                     u3318:
  1171  00138C  0005               	push	
  1172  00138E  6EFA               	movwf	pclath,c
  1173  001390  5038               	movf	_serial_write,w,c
  1174  001392  6EFD               	movwf	tosl,c
  1175  001394  5039               	movf	_serial_write+1,w,c
  1176  001396  6EFE               	movwf	tosh,c
  1177  001398  50F8               	movf	tblptru,w,c
  1178  00139A  6EFF               	movwf	tosu,c
  1179  00139C  50FA               	movf	pclath,w,c
  1180  00139E  0101               	movlb	1	; () banked
  1181  0013A0  51FC               	movf	(_ring_buffer+204)& (0+255),w,b
  1182  0013A2  0012               	return		;indir
  1183  0013A4                     l3976:
  1184                           
  1185                           ;FastTransfer.c: 66: int i;
  1186                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1187  0013A4  0E00               	movlw	0
  1188  0013A6  0100               	movlb	0	; () banked
  1189  0013A8  6FE2               	movwf	(sendData@i+1)& (0+255),b
  1190  0013AA  0E00               	movlw	0
  1191  0013AC  6FE1               	movwf	sendData@i& (0+255),b
  1192  0013AE  D018               	goto	l3982
  1193  0013B0                     l3978:
  1194                           
  1195                           ; BSR set to: 0
  1196                           ;FastTransfer.c: 68: serial_write(*(sendStructAddress + i));
  1197  0013B0  D801               	call	u3328
  1198  0013B2  D013               	goto	l3980
  1199  0013B4                     u3328:
  1200  0013B4  0005               	push	
  1201  0013B6  6EFA               	movwf	pclath,c
  1202  0013B8  5038               	movf	_serial_write,w,c
  1203  0013BA  6EFD               	movwf	tosl,c
  1204  0013BC  5039               	movf	_serial_write+1,w,c
  1205  0013BE  6EFE               	movwf	tosh,c
  1206  0013C0  50F8               	movf	tblptru,w,c
  1207  0013C2  6EFF               	movwf	tosu,c
  1208  0013C4  50FA               	movf	pclath,w,c
  1209  0013C6  0100               	movlb	0	; () banked
  1210  0013C8  51E1               	movf	sendData@i& (0+255),w,b
  1211  0013CA  2436               	addwf	_sendStructAddress,w,c
  1212  0013CC  6ED9               	movwf	fsr2l,c
  1213  0013CE  0100               	movlb	0	; () banked
  1214  0013D0  51E2               	movf	(sendData@i+1)& (0+255),w,b
  1215  0013D2  2037               	addwfc	_sendStructAddress+1,w,c
  1216  0013D4  6EDA               	movwf	fsr2h,c
  1217  0013D6  50DF               	movf	indf2,w,c
  1218  0013D8  0012               	return		;indir
  1219  0013DA                     l3980:
  1220  0013DA  0100               	movlb	0	; () banked
  1221  0013DC  4BE1               	infsnz	sendData@i& (0+255),f,b
  1222  0013DE  2BE2               	incf	(sendData@i+1)& (0+255),f,b
  1223  0013E0                     l3982:
  1224                           
  1225                           ; BSR set to: 0
  1226  0013E0  0101               	movlb	1	; () banked
  1227  0013E2  51FC               	movf	(_ring_buffer+204)& (0+255),w,b
  1228  0013E4  0100               	movlb	0	; () banked
  1229  0013E6  5DE1               	subwf	sendData@i& (0+255),w,b
  1230  0013E8  0100               	movlb	0	; () banked
  1231  0013EA  51E2               	movf	(sendData@i+1)& (0+255),w,b
  1232  0013EC  0A80               	xorlw	128
  1233  0013EE  0100               	movlb	0	; () banked
  1234  0013F0  6FDE               	movwf	??_sendData& (0+255),b
  1235  0013F2  0101               	movlb	1	; () banked
  1236  0013F4  51FD               	movf	(_ring_buffer+205)& (0+255),w,b
  1237  0013F6  0A80               	xorlw	128
  1238  0013F8  0100               	movlb	0	; () banked
  1239  0013FA  59DE               	subwfb	??_sendData& (0+255),w,b
  1240  0013FC  A0D8               	btfss	status,0,c
  1241  0013FE  D7D8               	goto	l3978
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;FastTransfer.c: 69: }
  1245                           ;FastTransfer.c: 72: serial_write(CS);
  1246                           
  1247                           ; BSR set to: 0
  1248  001400  D801               	call	u3348
  1249  001402  D00C               	goto	l3986
  1250  001404                     u3348:
  1251  001404  0005               	push	
  1252  001406  6EFA               	movwf	pclath,c
  1253  001408  5038               	movf	_serial_write,w,c
  1254  00140A  6EFD               	movwf	tosl,c
  1255  00140C  5039               	movf	_serial_write+1,w,c
  1256  00140E  6EFE               	movwf	tosh,c
  1257  001410  50F8               	movf	tblptru,w,c
  1258  001412  6EFF               	movwf	tosu,c
  1259  001414  50FA               	movf	pclath,w,c
  1260  001416  0100               	movlb	0	; () banked
  1261  001418  51E0               	movf	sendData@CS& (0+255),w,b
  1262  00141A  0012               	return		;indir
  1263  00141C                     l3986:
  1264                           
  1265                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1266  00141C  0EC1               	movlw	low _crc_buffer
  1267  00141E  0100               	movlb	0	; () banked
  1268  001420  6FD2               	movwf	crcBufS_put@_this& (0+255),b
  1269  001422  0E00               	movlw	high _crc_buffer
  1270  001424  0100               	movlb	0	; () banked
  1271  001426  6FD3               	movwf	(crcBufS_put@_this+1)& (0+255),b
  1272  001428  C0DF  F0D4         	movff	sendData@whereToSend,crcBufS_put@address
  1273  00142C  C0E0  F0D5         	movff	sendData@CS,crcBufS_put@oldCRC
  1274  001430  0E00               	movlw	0
  1275  001432  0100               	movlb	0	; () banked
  1276  001434  6FD6               	movwf	crcBufS_put@status& (0+255),b
  1277  001436  EC94  F00C         	call	_crcBufS_put
  1278                           
  1279                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  1280  00143A  0E30               	movlw	low _ring_buffer
  1281  00143C  0100               	movlb	0	; () banked
  1282  00143E  6FDA               	movwf	FastTransfer_buffer_flush@_this& (0+255),b
  1283  001440  0E01               	movlw	high _ring_buffer
  1284  001442  0100               	movlb	0	; () banked
  1285  001444  6FDB               	movwf	(FastTransfer_buffer_flush@_this+1)& (0+255),b
  1286  001446  0E00               	movlw	0
  1287  001448  0100               	movlb	0	; () banked
  1288  00144A  6FDD               	movwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),b
  1289  00144C  0E01               	movlw	1
  1290  00144E  6FDC               	movwf	FastTransfer_buffer_flush@clearBuffer& (0+255),b
  1291  001450  EC49  F00F         	call	_FastTransfer_buffer_flush	;wreg free
  1292  001454  0012               	return		;funcret
  1293  001456                     __end_of_sendData:
  1294                           	opt stack 0
  1295                           tosu	equ	0xFFF
  1296                           tosh	equ	0xFFE
  1297                           tosl	equ	0xFFD
  1298                           pclath	equ	0xFFA
  1299                           tblptru	equ	0xFF8
  1300                           tblptrh	equ	0xFF7
  1301                           tblptrl	equ	0xFF6
  1302                           tablat	equ	0xFF5
  1303                           intcon	equ	0xFF2
  1304                           postinc0	equ	0xFEE
  1305                           wreg	equ	0xFE8
  1306                           indf2	equ	0xFDF
  1307                           fsr2h	equ	0xFDA
  1308                           fsr2l	equ	0xFD9
  1309                           status	equ	0xFD8
  1310                           
  1311 ;; *************** function _crcBufS_put *****************
  1312 ;; Defined at:
  1313 ;;		line 321 in file "FastTransfer.c"
  1314 ;; Parameters:    Size  Location     Type
  1315 ;;  _this           2    0[BANK0 ] PTR struct crcBufS
  1316 ;;		 -> crc_buffer(17), 
  1317 ;;  address         1    2[BANK0 ] unsigned char 
  1318 ;;  oldCRC          1    3[BANK0 ] unsigned char 
  1319 ;;  status          1    4[BANK0 ] unsigned char 
  1320 ;; Auto vars:     Size  Location     Type
  1321 ;;		None
  1322 ;; Return value:  Size  Location     Type
  1323 ;;                  1    wreg      void 
  1324 ;; Registers used:
  1325 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1326 ;; Tracked objects:
  1327 ;;		On entry : 0/0
  1328 ;;		On exit  : 0/0
  1329 ;;		Unchanged: 0/0
  1330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1331 ;;      Params:         0       5       0       0       0       0       0
  1332 ;;      Locals:         0       0       0       0       0       0       0
  1333 ;;      Temps:          0       2       0       0       0       0       0
  1334 ;;      Totals:         0       7       0       0       0       0       0
  1335 ;;Total ram usage:        7 bytes
  1336 ;; Hardware stack levels used:    1
  1337 ;; Hardware stack levels required when called:    6
  1338 ;; This function calls:
  1339 ;;		Nothing
  1340 ;; This function is called by:
  1341 ;;		_sendData
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text4
  1346  001928                     __ptext4:
  1347                           	opt stack 0
  1348  001928                     _crcBufS_put:
  1349                           	opt stack 21
  1350                           
  1351                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  1352                           
  1353                           ;incstack = 0
  1354  001928  0100               	movlb	0	; () banked
  1355  00192A  EE20 F00F          	lfsr	2,15
  1356  00192E  51D2               	movf	crcBufS_put@_this& (0+255),w,b
  1357  001930  26D9               	addwf	fsr2l,f,c
  1358  001932  51D3               	movf	(crcBufS_put@_this+1)& (0+255),w,b
  1359  001934  22DA               	addwfc	fsr2h,f,c
  1360  001936  CFDE F0D7          	movff	postinc2,??_crcBufS_put
  1361  00193A  CFDD F0D8          	movff	postdec2,??_crcBufS_put+1
  1362  00193E  0100               	movlb	0	; () banked
  1363  001940  51D7               	movf	??_crcBufS_put& (0+255),w,b
  1364  001942  0100               	movlb	0	; () banked
  1365  001944  25D2               	addwf	crcBufS_put@_this& (0+255),w,b
  1366  001946  6ED9               	movwf	fsr2l,c
  1367  001948  0100               	movlb	0	; () banked
  1368  00194A  51D8               	movf	(??_crcBufS_put+1)& (0+255),w,b
  1369  00194C  0100               	movlb	0	; () banked
  1370  00194E  21D3               	addwfc	(crcBufS_put@_this+1)& (0+255),w,b
  1371  001950  6EDA               	movwf	fsr2h,c
  1372  001952  C0D4  FFDF         	movff	crcBufS_put@address,indf2
  1373                           
  1374                           ;FastTransfer.c: 323: _this->head++;
  1375  001956  0100               	movlb	0	; () banked
  1376  001958  EE20 F00F          	lfsr	2,15
  1377  00195C  51D2               	movf	crcBufS_put@_this& (0+255),w,b
  1378  00195E  26D9               	addwf	fsr2l,f,c
  1379  001960  51D3               	movf	(crcBufS_put@_this+1)& (0+255),w,b
  1380  001962  22DA               	addwfc	fsr2h,f,c
  1381  001964  2ADE               	incf	postinc2,f,c
  1382  001966  0E00               	movlw	0
  1383  001968  22DD               	addwfc	postdec2,f,c
  1384                           
  1385                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  1386  00196A  0100               	movlb	0	; () banked
  1387  00196C  EE20 F00F          	lfsr	2,15
  1388  001970  51D2               	movf	crcBufS_put@_this& (0+255),w,b
  1389  001972  26D9               	addwf	fsr2l,f,c
  1390  001974  51D3               	movf	(crcBufS_put@_this+1)& (0+255),w,b
  1391  001976  22DA               	addwfc	fsr2h,f,c
  1392  001978  CFDE F0D7          	movff	postinc2,??_crcBufS_put
  1393  00197C  CFDD F0D8          	movff	postdec2,??_crcBufS_put+1
  1394  001980  0100               	movlb	0	; () banked
  1395  001982  51D7               	movf	??_crcBufS_put& (0+255),w,b
  1396  001984  0100               	movlb	0	; () banked
  1397  001986  25D2               	addwf	crcBufS_put@_this& (0+255),w,b
  1398  001988  6ED9               	movwf	fsr2l,c
  1399  00198A  0100               	movlb	0	; () banked
  1400  00198C  51D8               	movf	(??_crcBufS_put+1)& (0+255),w,b
  1401  00198E  0100               	movlb	0	; () banked
  1402  001990  21D3               	addwfc	(crcBufS_put@_this+1)& (0+255),w,b
  1403  001992  6EDA               	movwf	fsr2h,c
  1404  001994  C0D5  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1405                           
  1406                           ;FastTransfer.c: 325: _this->head++;
  1407  001998  0100               	movlb	0	; () banked
  1408  00199A  EE20 F00F          	lfsr	2,15
  1409  00199E  51D2               	movf	crcBufS_put@_this& (0+255),w,b
  1410  0019A0  26D9               	addwf	fsr2l,f,c
  1411  0019A2  51D3               	movf	(crcBufS_put@_this+1)& (0+255),w,b
  1412  0019A4  22DA               	addwfc	fsr2h,f,c
  1413  0019A6  2ADE               	incf	postinc2,f,c
  1414  0019A8  0E00               	movlw	0
  1415  0019AA  22DD               	addwfc	postdec2,f,c
  1416                           
  1417                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  1418  0019AC  0100               	movlb	0	; () banked
  1419  0019AE  EE20 F00F          	lfsr	2,15
  1420  0019B2  51D2               	movf	crcBufS_put@_this& (0+255),w,b
  1421  0019B4  26D9               	addwf	fsr2l,f,c
  1422  0019B6  51D3               	movf	(crcBufS_put@_this+1)& (0+255),w,b
  1423  0019B8  22DA               	addwfc	fsr2h,f,c
  1424  0019BA  CFDE F0D7          	movff	postinc2,??_crcBufS_put
  1425  0019BE  CFDD F0D8          	movff	postdec2,??_crcBufS_put+1
  1426  0019C2  0100               	movlb	0	; () banked
  1427  0019C4  51D7               	movf	??_crcBufS_put& (0+255),w,b
  1428  0019C6  0100               	movlb	0	; () banked
  1429  0019C8  25D2               	addwf	crcBufS_put@_this& (0+255),w,b
  1430  0019CA  6ED9               	movwf	fsr2l,c
  1431  0019CC  0100               	movlb	0	; () banked
  1432  0019CE  51D8               	movf	(??_crcBufS_put+1)& (0+255),w,b
  1433  0019D0  0100               	movlb	0	; () banked
  1434  0019D2  21D3               	addwfc	(crcBufS_put@_this+1)& (0+255),w,b
  1435  0019D4  6EDA               	movwf	fsr2h,c
  1436  0019D6  C0D6  FFDF         	movff	crcBufS_put@status,indf2
  1437                           
  1438                           ;FastTransfer.c: 327: _this->head++;
  1439  0019DA  0100               	movlb	0	; () banked
  1440  0019DC  EE20 F00F          	lfsr	2,15
  1441  0019E0  51D2               	movf	crcBufS_put@_this& (0+255),w,b
  1442  0019E2  26D9               	addwf	fsr2l,f,c
  1443  0019E4  51D3               	movf	(crcBufS_put@_this+1)& (0+255),w,b
  1444  0019E6  22DA               	addwfc	fsr2h,f,c
  1445  0019E8  2ADE               	incf	postinc2,f,c
  1446  0019EA  0E00               	movlw	0
  1447  0019EC  22DD               	addwfc	postdec2,f,c
  1448                           
  1449                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  1450  0019EE  0100               	movlb	0	; () banked
  1451  0019F0  EE20 F00F          	lfsr	2,15
  1452  0019F4  51D2               	movf	crcBufS_put@_this& (0+255),w,b
  1453  0019F6  26D9               	addwf	fsr2l,f,c
  1454  0019F8  51D3               	movf	(crcBufS_put@_this+1)& (0+255),w,b
  1455  0019FA  22DA               	addwfc	fsr2h,f,c
  1456  0019FC  0E01               	movlw	1
  1457  0019FE  BEDB               	btfsc	plusw2,7,c
  1458  001A00  0012               	return	
  1459  001A02  0E01               	movlw	1
  1460  001A04  50DB               	movf	plusw2,w,c
  1461  001A06  E104               	bnz	u3170
  1462  001A08  0E0F               	movlw	15
  1463  001A0A  5CDE               	subwf	postinc2,w,c
  1464  001A0C  A0D8               	btfss	status,0,c
  1465  001A0E  0012               	return	
  1466  001A10                     u3170:
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;FastTransfer.c: 329: _this->head = 0;
  1470  001A10  0100               	movlb	0	; () banked
  1471  001A12  EE20 F00F          	lfsr	2,15
  1472  001A16  51D2               	movf	crcBufS_put@_this& (0+255),w,b
  1473  001A18  26D9               	addwf	fsr2l,f,c
  1474  001A1A  51D3               	movf	(crcBufS_put@_this+1)& (0+255),w,b
  1475  001A1C  22DA               	addwfc	fsr2h,f,c
  1476  001A1E  0E00               	movlw	0
  1477  001A20  6EDE               	movwf	postinc2,c
  1478  001A22  0E00               	movlw	0
  1479  001A24  6EDD               	movwf	postdec2,c
  1480  001A26  0012               	return	
  1481  001A28                     __end_of_crcBufS_put:
  1482                           	opt stack 0
  1483                           tosu	equ	0xFFF
  1484                           tosh	equ	0xFFE
  1485                           tosl	equ	0xFFD
  1486                           pclath	equ	0xFFA
  1487                           tblptru	equ	0xFF8
  1488                           tblptrh	equ	0xFF7
  1489                           tblptrl	equ	0xFF6
  1490                           tablat	equ	0xFF5
  1491                           intcon	equ	0xFF2
  1492                           postinc0	equ	0xFEE
  1493                           wreg	equ	0xFE8
  1494                           indf2	equ	0xFDF
  1495                           postinc2	equ	0xFDE
  1496                           postdec2	equ	0xFDD
  1497                           plusw2	equ	0xFDB
  1498                           fsr2h	equ	0xFDA
  1499                           fsr2l	equ	0xFD9
  1500                           status	equ	0xFD8
  1501                           
  1502 ;; *************** function _FastTransfer_buffer_flush *****************
  1503 ;; Defined at:
  1504 ;;		line 261 in file "FastTransfer.c"
  1505 ;; Parameters:    Size  Location     Type
  1506 ;;  _this           2    8[BANK0 ] PTR struct ringBufS
  1507 ;;		 -> ring_buffer(206), 
  1508 ;;  clearBuffer     2   10[BANK0 ] const int 
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;		None
  1511 ;; Return value:  Size  Location     Type
  1512 ;;                  1    wreg      void 
  1513 ;; Registers used:
  1514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1520 ;;      Params:         0       4       0       0       0       0       0
  1521 ;;      Locals:         0       0       0       0       0       0       0
  1522 ;;      Temps:          0       0       0       0       0       0       0
  1523 ;;      Totals:         0       4       0       0       0       0       0
  1524 ;;Total ram usage:        4 bytes
  1525 ;; Hardware stack levels used:    1
  1526 ;; Hardware stack levels required when called:    7
  1527 ;; This function calls:
  1528 ;;		_memset
  1529 ;; This function is called by:
  1530 ;;		_sendData
  1531 ;; This function uses a non-reentrant model
  1532 ;;
  1533                           
  1534                           	psect	text5
  1535  001E92                     __ptext5:
  1536                           	opt stack 0
  1537  001E92                     _FastTransfer_buffer_flush:
  1538                           	opt stack 20
  1539                           
  1540                           ;FastTransfer.c: 262: _this->count = 0;
  1541                           
  1542                           ; BSR set to: 0
  1543                           ;incstack = 0
  1544  001E92  0100               	movlb	0	; () banked
  1545  001E94  EE20 F0CC          	lfsr	2,204
  1546  001E98  51DA               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1547  001E9A  26D9               	addwf	fsr2l,f,c
  1548  001E9C  51DB               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1549  001E9E  22DA               	addwfc	fsr2h,f,c
  1550  001EA0  0E00               	movlw	0
  1551  001EA2  6EDE               	movwf	postinc2,c
  1552  001EA4  0E00               	movlw	0
  1553  001EA6  6EDD               	movwf	postdec2,c
  1554                           
  1555                           ;FastTransfer.c: 263: _this->head = 0;
  1556  001EA8  0100               	movlb	0	; () banked
  1557  001EAA  EE20 F0C8          	lfsr	2,200
  1558  001EAE  51DA               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1559  001EB0  26D9               	addwf	fsr2l,f,c
  1560  001EB2  51DB               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1561  001EB4  22DA               	addwfc	fsr2h,f,c
  1562  001EB6  0E00               	movlw	0
  1563  001EB8  6EDE               	movwf	postinc2,c
  1564  001EBA  0E00               	movlw	0
  1565  001EBC  6EDD               	movwf	postdec2,c
  1566                           
  1567                           ;FastTransfer.c: 264: _this->tail = 0;
  1568  001EBE  0100               	movlb	0	; () banked
  1569  001EC0  EE20 F0CA          	lfsr	2,202
  1570  001EC4  51DA               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1571  001EC6  26D9               	addwf	fsr2l,f,c
  1572  001EC8  51DB               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1573  001ECA  22DA               	addwfc	fsr2h,f,c
  1574  001ECC  0E00               	movlw	0
  1575  001ECE  6EDE               	movwf	postinc2,c
  1576  001ED0  0E00               	movlw	0
  1577  001ED2  6EDD               	movwf	postdec2,c
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;FastTransfer.c: 265: if (clearBuffer) {
  1581  001ED4  0100               	movlb	0	; () banked
  1582  001ED6  51DC               	movf	FastTransfer_buffer_flush@clearBuffer& (0+255),w,b
  1583  001ED8  0100               	movlb	0	; () banked
  1584  001EDA  11DD               	iorwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),w,b
  1585  001EDC  B4D8               	btfsc	status,2,c
  1586  001EDE  0012               	return	
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  1590  001EE0  C0DA  F0D2         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1591  001EE4  C0DB  F0D3         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1592  001EE8  0E00               	movlw	0
  1593  001EEA  0100               	movlb	0	; () banked
  1594  001EEC  6FD5               	movwf	(memset@c+1)& (0+255),b
  1595  001EEE  0E00               	movlw	0
  1596  001EF0  6FD4               	movwf	memset@c& (0+255),b
  1597  001EF2  0E00               	movlw	0
  1598  001EF4  0100               	movlb	0	; () banked
  1599  001EF6  6FD7               	movwf	(memset@n+1)& (0+255),b
  1600  001EF8  0EC8               	movlw	200
  1601  001EFA  6FD6               	movwf	memset@n& (0+255),b
  1602  001EFC  EC36  F011         	call	_memset	;wreg free
  1603  001F00  0012               	return	
  1604  001F02                     __end_of_FastTransfer_buffer_flush:
  1605                           	opt stack 0
  1606                           tosu	equ	0xFFF
  1607                           tosh	equ	0xFFE
  1608                           tosl	equ	0xFFD
  1609                           pclath	equ	0xFFA
  1610                           tblptru	equ	0xFF8
  1611                           tblptrh	equ	0xFF7
  1612                           tblptrl	equ	0xFF6
  1613                           tablat	equ	0xFF5
  1614                           intcon	equ	0xFF2
  1615                           postinc0	equ	0xFEE
  1616                           wreg	equ	0xFE8
  1617                           indf2	equ	0xFDF
  1618                           postinc2	equ	0xFDE
  1619                           postdec2	equ	0xFDD
  1620                           plusw2	equ	0xFDB
  1621                           fsr2h	equ	0xFDA
  1622                           fsr2l	equ	0xFD9
  1623                           status	equ	0xFD8
  1624                           
  1625 ;; *************** function _ToSend *****************
  1626 ;; Defined at:
  1627 ;;		line 216 in file "FastTransfer.c"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;  where           1    wreg     unsigned char 
  1630 ;;  what            2   13[BANK0 ] unsigned int 
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;  where           1   15[BANK0 ] unsigned char 
  1633 ;; Return value:  Size  Location     Type
  1634 ;;                  1    wreg      void 
  1635 ;; Registers used:
  1636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1637 ;; Tracked objects:
  1638 ;;		On entry : 0/0
  1639 ;;		On exit  : 0/0
  1640 ;;		Unchanged: 0/0
  1641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1642 ;;      Params:         0       2       0       0       0       0       0
  1643 ;;      Locals:         0       1       0       0       0       0       0
  1644 ;;      Temps:          0       0       0       0       0       0       0
  1645 ;;      Totals:         0       3       0       0       0       0       0
  1646 ;;Total ram usage:        3 bytes
  1647 ;; Hardware stack levels used:    1
  1648 ;; Hardware stack levels required when called:    8
  1649 ;; This function calls:
  1650 ;;		_FastTransfer_buffer_put
  1651 ;; This function is called by:
  1652 ;;		_respondECU
  1653 ;; This function uses a non-reentrant model
  1654 ;;
  1655                           
  1656                           	psect	text6
  1657  002404                     __ptext6:
  1658                           	opt stack 0
  1659  002404                     _ToSend:
  1660                           	opt stack 20
  1661                           
  1662                           ;incstack = 0
  1663                           ;ToSend@where stored from wreg
  1664  002404  0100               	movlb	0	; () banked
  1665  002406  6FE1               	movwf	ToSend@where& (0+255),b
  1666                           
  1667                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  1668  002408  0E30               	movlw	low _ring_buffer
  1669  00240A  0100               	movlb	0	; () banked
  1670  00240C  6FD8               	movwf	FastTransfer_buffer_put@_this& (0+255),b
  1671  00240E  0E01               	movlw	high _ring_buffer
  1672  002410  0100               	movlb	0	; () banked
  1673  002412  6FD9               	movwf	(FastTransfer_buffer_put@_this+1)& (0+255),b
  1674  002414  C0E1  F0DA         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  1675  002418  C0DF  F0DB         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  1676  00241C  C0E0  F0DC         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  1677  002420  EC3D  F007         	call	_FastTransfer_buffer_put	;wreg free
  1678  002424  0012               	return		;funcret
  1679  002426                     __end_of_ToSend:
  1680                           	opt stack 0
  1681                           tosu	equ	0xFFF
  1682                           tosh	equ	0xFFE
  1683                           tosl	equ	0xFFD
  1684                           pclath	equ	0xFFA
  1685                           tblptru	equ	0xFF8
  1686                           tblptrh	equ	0xFF7
  1687                           tblptrl	equ	0xFF6
  1688                           tablat	equ	0xFF5
  1689                           intcon	equ	0xFF2
  1690                           postinc0	equ	0xFEE
  1691                           wreg	equ	0xFE8
  1692                           indf2	equ	0xFDF
  1693                           postinc2	equ	0xFDE
  1694                           postdec2	equ	0xFDD
  1695                           plusw2	equ	0xFDB
  1696                           fsr2h	equ	0xFDA
  1697                           fsr2l	equ	0xFD9
  1698                           status	equ	0xFD8
  1699                           
  1700 ;; *************** function _FastTransfer_buffer_put *****************
  1701 ;; Defined at:
  1702 ;;		line 223 in file "FastTransfer.c"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;  _this           2    6[BANK0 ] PTR struct ringBufS
  1705 ;;		 -> ring_buffer(206), 
  1706 ;;  towhere         1    8[BANK0 ] unsigned char 
  1707 ;;  towhat          2    9[BANK0 ] unsigned int 
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;		None
  1710 ;; Return value:  Size  Location     Type
  1711 ;;                  1    wreg      void 
  1712 ;; Registers used:
  1713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1719 ;;      Params:         0       5       0       0       0       0       0
  1720 ;;      Locals:         0       0       0       0       0       0       0
  1721 ;;      Temps:          0       2       0       0       0       0       0
  1722 ;;      Totals:         0       7       0       0       0       0       0
  1723 ;;Total ram usage:        7 bytes
  1724 ;; Hardware stack levels used:    1
  1725 ;; Hardware stack levels required when called:    7
  1726 ;; This function calls:
  1727 ;;		_FastTransfer_buffer_modulo_inc
  1728 ;; This function is called by:
  1729 ;;		_ToSend
  1730 ;; This function uses a non-reentrant model
  1731 ;;
  1732                           
  1733                           	psect	text7
  1734  000E7A                     __ptext7:
  1735                           	opt stack 0
  1736  000E7A                     _FastTransfer_buffer_put:
  1737                           	opt stack 20
  1738                           
  1739                           ;FastTransfer.c: 225: group.integer = towhat;
  1740                           
  1741                           ;incstack = 0
  1742  000E7A  C0DB  F088         	movff	FastTransfer_buffer_put@towhat,_group
  1743  000E7E  C0DC  F089         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  1744                           
  1745                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  1746  000E82  0100               	movlb	0	; () banked
  1747  000E84  EE20 F0CC          	lfsr	2,204
  1748  000E88  51D8               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1749  000E8A  26D9               	addwf	fsr2l,f,c
  1750  000E8C  51D9               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1751  000E8E  22DA               	addwfc	fsr2h,f,c
  1752  000E90  0E01               	movlw	1
  1753  000E92  BEDB               	btfsc	plusw2,7,c
  1754  000E94  D007               	goto	l3880
  1755  000E96  0E01               	movlw	1
  1756  000E98  50DB               	movf	plusw2,w,c
  1757  000E9A  E103               	bnz	u3191
  1758  000E9C  0EC5               	movlw	197
  1759  000E9E  5CDE               	subwf	postinc2,w,c
  1760  000EA0  B0D8               	btfsc	status,0,c
  1761  000EA2                     u3191:
  1762  000EA2  0012               	return	
  1763  000EA4                     l3880:
  1764                           
  1765                           ; BSR set to: 0
  1766                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  1767  000EA4  0100               	movlb	0	; () banked
  1768  000EA6  EE20 F0C8          	lfsr	2,200
  1769  000EAA  51D8               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1770  000EAC  26D9               	addwf	fsr2l,f,c
  1771  000EAE  51D9               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1772  000EB0  22DA               	addwfc	fsr2h,f,c
  1773  000EB2  CFDE F0DD          	movff	postinc2,??_FastTransfer_buffer_put
  1774  000EB6  CFDD F0DE          	movff	postdec2,??_FastTransfer_buffer_put+1
  1775  000EBA  0100               	movlb	0	; () banked
  1776  000EBC  51DD               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1777  000EBE  0100               	movlb	0	; () banked
  1778  000EC0  25D8               	addwf	FastTransfer_buffer_put@_this& (0+255),w,b
  1779  000EC2  6ED9               	movwf	fsr2l,c
  1780  000EC4  0100               	movlb	0	; () banked
  1781  000EC6  51DE               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1782  000EC8  0100               	movlb	0	; () banked
  1783  000ECA  21D9               	addwfc	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1784  000ECC  6EDA               	movwf	fsr2h,c
  1785  000ECE  C0DA  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  1786                           
  1787                           ; BSR set to: 0
  1788                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1789  000ED2  0100               	movlb	0	; () banked
  1790  000ED4  EE20 F0C8          	lfsr	2,200
  1791  000ED8  51D8               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1792  000EDA  26D9               	addwf	fsr2l,f,c
  1793  000EDC  51D9               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1794  000EDE  22DA               	addwfc	fsr2h,f,c
  1795  000EE0  CFDE F0D2          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1796  000EE4  CFDD F0D3          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1797  000EE8  0E00               	movlw	0
  1798  000EEA  0100               	movlb	0	; () banked
  1799  000EEC  6FD5               	movwf	(FastTransfer_buffer_modulo_inc@modulus+1)& (0+255),b
  1800  000EEE  0EC8               	movlw	200
  1801  000EF0  6FD4               	movwf	FastTransfer_buffer_modulo_inc@modulus& (0+255),b
  1802  000EF2  ECDE  F010         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1803  000EF6  0100               	movlb	0	; () banked
  1804  000EF8  EE20 F0C8          	lfsr	2,200
  1805  000EFC  51D8               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1806  000EFE  26D9               	addwf	fsr2l,f,c
  1807  000F00  51D9               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1808  000F02  22DA               	addwfc	fsr2h,f,c
  1809  000F04  0100               	movlb	0	; () banked
  1810  000F06  C0D2  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1811  000F0A  0100               	movlb	0	; () banked
  1812  000F0C  C0D3  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1813                           
  1814                           ; BSR set to: 0
  1815                           ;FastTransfer.c: 230: ++_this->count;
  1816  000F10  0100               	movlb	0	; () banked
  1817  000F12  EE20 F0CC          	lfsr	2,204
  1818  000F16  51D8               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1819  000F18  26D9               	addwf	fsr2l,f,c
  1820  000F1A  51D9               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1821  000F1C  22DA               	addwfc	fsr2h,f,c
  1822  000F1E  2ADE               	incf	postinc2,f,c
  1823  000F20  0E00               	movlw	0
  1824  000F22  22DD               	addwfc	postdec2,f,c
  1825                           
  1826                           ; BSR set to: 0
  1827                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  1828  000F24  0100               	movlb	0	; () banked
  1829  000F26  EE20 F0C8          	lfsr	2,200
  1830  000F2A  51D8               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1831  000F2C  26D9               	addwf	fsr2l,f,c
  1832  000F2E  51D9               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1833  000F30  22DA               	addwfc	fsr2h,f,c
  1834  000F32  CFDE F0DD          	movff	postinc2,??_FastTransfer_buffer_put
  1835  000F36  CFDD F0DE          	movff	postdec2,??_FastTransfer_buffer_put+1
  1836  000F3A  0100               	movlb	0	; () banked
  1837  000F3C  51DD               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1838  000F3E  0100               	movlb	0	; () banked
  1839  000F40  25D8               	addwf	FastTransfer_buffer_put@_this& (0+255),w,b
  1840  000F42  6ED9               	movwf	fsr2l,c
  1841  000F44  0100               	movlb	0	; () banked
  1842  000F46  51DE               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1843  000F48  0100               	movlb	0	; () banked
  1844  000F4A  21D9               	addwfc	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1845  000F4C  6EDA               	movwf	fsr2h,c
  1846  000F4E  C088  FFDF         	movff	_group,indf2
  1847                           
  1848                           ; BSR set to: 0
  1849                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1850  000F52  0100               	movlb	0	; () banked
  1851  000F54  EE20 F0C8          	lfsr	2,200
  1852  000F58  51D8               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1853  000F5A  26D9               	addwf	fsr2l,f,c
  1854  000F5C  51D9               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1855  000F5E  22DA               	addwfc	fsr2h,f,c
  1856  000F60  CFDE F0D2          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1857  000F64  CFDD F0D3          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1858  000F68  0E00               	movlw	0
  1859  000F6A  0100               	movlb	0	; () banked
  1860  000F6C  6FD5               	movwf	(FastTransfer_buffer_modulo_inc@modulus+1)& (0+255),b
  1861  000F6E  0EC8               	movlw	200
  1862  000F70  6FD4               	movwf	FastTransfer_buffer_modulo_inc@modulus& (0+255),b
  1863  000F72  ECDE  F010         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1864  000F76  0100               	movlb	0	; () banked
  1865  000F78  EE20 F0C8          	lfsr	2,200
  1866  000F7C  51D8               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1867  000F7E  26D9               	addwf	fsr2l,f,c
  1868  000F80  51D9               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1869  000F82  22DA               	addwfc	fsr2h,f,c
  1870  000F84  0100               	movlb	0	; () banked
  1871  000F86  C0D2  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1872  000F8A  0100               	movlb	0	; () banked
  1873  000F8C  C0D3  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1874                           
  1875                           ;FastTransfer.c: 233: ++_this->count;
  1876  000F90  0100               	movlb	0	; () banked
  1877  000F92  EE20 F0CC          	lfsr	2,204
  1878  000F96  51D8               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1879  000F98  26D9               	addwf	fsr2l,f,c
  1880  000F9A  51D9               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1881  000F9C  22DA               	addwfc	fsr2h,f,c
  1882  000F9E  2ADE               	incf	postinc2,f,c
  1883  000FA0  0E00               	movlw	0
  1884  000FA2  22DD               	addwfc	postdec2,f,c
  1885                           
  1886                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  1887  000FA4  0100               	movlb	0	; () banked
  1888  000FA6  EE20 F0C8          	lfsr	2,200
  1889  000FAA  51D8               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1890  000FAC  26D9               	addwf	fsr2l,f,c
  1891  000FAE  51D9               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1892  000FB0  22DA               	addwfc	fsr2h,f,c
  1893  000FB2  CFDE F0DD          	movff	postinc2,??_FastTransfer_buffer_put
  1894  000FB6  CFDD F0DE          	movff	postdec2,??_FastTransfer_buffer_put+1
  1895  000FBA  0100               	movlb	0	; () banked
  1896  000FBC  51DD               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1897  000FBE  0100               	movlb	0	; () banked
  1898  000FC0  25D8               	addwf	FastTransfer_buffer_put@_this& (0+255),w,b
  1899  000FC2  6ED9               	movwf	fsr2l,c
  1900  000FC4  0100               	movlb	0	; () banked
  1901  000FC6  51DE               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1902  000FC8  0100               	movlb	0	; () banked
  1903  000FCA  21D9               	addwfc	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1904  000FCC  6EDA               	movwf	fsr2h,c
  1905  000FCE  C089  FFDF         	movff	_group+1,indf2
  1906                           
  1907                           ; BSR set to: 0
  1908                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1909  000FD2  0100               	movlb	0	; () banked
  1910  000FD4  EE20 F0C8          	lfsr	2,200
  1911  000FD8  51D8               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1912  000FDA  26D9               	addwf	fsr2l,f,c
  1913  000FDC  51D9               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1914  000FDE  22DA               	addwfc	fsr2h,f,c
  1915  000FE0  CFDE F0D2          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1916  000FE4  CFDD F0D3          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1917  000FE8  0E00               	movlw	0
  1918  000FEA  0100               	movlb	0	; () banked
  1919  000FEC  6FD5               	movwf	(FastTransfer_buffer_modulo_inc@modulus+1)& (0+255),b
  1920  000FEE  0EC8               	movlw	200
  1921  000FF0  6FD4               	movwf	FastTransfer_buffer_modulo_inc@modulus& (0+255),b
  1922  000FF2  ECDE  F010         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1923  000FF6  0100               	movlb	0	; () banked
  1924  000FF8  EE20 F0C8          	lfsr	2,200
  1925  000FFC  51D8               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1926  000FFE  26D9               	addwf	fsr2l,f,c
  1927  001000  51D9               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1928  001002  22DA               	addwfc	fsr2h,f,c
  1929  001004  0100               	movlb	0	; () banked
  1930  001006  C0D2  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1931  00100A  0100               	movlb	0	; () banked
  1932  00100C  C0D3  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;FastTransfer.c: 236: ++_this->count;
  1936  001010  0100               	movlb	0	; () banked
  1937  001012  EE20 F0CC          	lfsr	2,204
  1938  001016  51D8               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1939  001018  26D9               	addwf	fsr2l,f,c
  1940  00101A  51D9               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1941  00101C  22DA               	addwfc	fsr2h,f,c
  1942  00101E  2ADE               	incf	postinc2,f,c
  1943  001020  0E00               	movlw	0
  1944  001022  22DD               	addwfc	postdec2,f,c
  1945  001024  0012               	return	
  1946  001026                     __end_of_FastTransfer_buffer_put:
  1947                           	opt stack 0
  1948                           tosu	equ	0xFFF
  1949                           tosh	equ	0xFFE
  1950                           tosl	equ	0xFFD
  1951                           pclath	equ	0xFFA
  1952                           tblptru	equ	0xFF8
  1953                           tblptrh	equ	0xFF7
  1954                           tblptrl	equ	0xFF6
  1955                           tablat	equ	0xFF5
  1956                           intcon	equ	0xFF2
  1957                           postinc0	equ	0xFEE
  1958                           wreg	equ	0xFE8
  1959                           indf2	equ	0xFDF
  1960                           postinc2	equ	0xFDE
  1961                           postdec2	equ	0xFDD
  1962                           plusw2	equ	0xFDB
  1963                           fsr2h	equ	0xFDA
  1964                           fsr2l	equ	0xFD9
  1965                           status	equ	0xFD8
  1966                           
  1967 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  1968 ;; Defined at:
  1969 ;;		line 273 in file "FastTransfer.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;  value           2    0[BANK0 ] const unsigned int 
  1972 ;;  modulus         2    2[BANK0 ] const unsigned int 
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;  my_value        2    4[BANK0 ] unsigned int 
  1975 ;; Return value:  Size  Location     Type
  1976 ;;                  2    0[BANK0 ] unsigned int 
  1977 ;; Registers used:
  1978 ;;		wreg, status,2, status,0
  1979 ;; Tracked objects:
  1980 ;;		On entry : 0/0
  1981 ;;		On exit  : 0/0
  1982 ;;		Unchanged: 0/0
  1983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1984 ;;      Params:         0       4       0       0       0       0       0
  1985 ;;      Locals:         0       2       0       0       0       0       0
  1986 ;;      Temps:          0       0       0       0       0       0       0
  1987 ;;      Totals:         0       6       0       0       0       0       0
  1988 ;;Total ram usage:        6 bytes
  1989 ;; Hardware stack levels used:    1
  1990 ;; Hardware stack levels required when called:    6
  1991 ;; This function calls:
  1992 ;;		Nothing
  1993 ;; This function is called by:
  1994 ;;		_FastTransfer_buffer_put
  1995 ;;		_FastTransfer_buffer_get
  1996 ;; This function uses a non-reentrant model
  1997 ;;
  1998                           
  1999                           	psect	text8
  2000  0021BC                     __ptext8:
  2001                           	opt stack 0
  2002  0021BC                     _FastTransfer_buffer_modulo_inc:
  2003                           	opt stack 20
  2004                           
  2005                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;incstack = 0
  2009  0021BC  0E01               	movlw	1
  2010  0021BE  0100               	movlb	0	; () banked
  2011  0021C0  25D2               	addwf	FastTransfer_buffer_modulo_inc@value& (0+255),w,b
  2012  0021C2  0100               	movlb	0	; () banked
  2013  0021C4  6FD6               	movwf	FastTransfer_buffer_modulo_inc@my_value& (0+255),b
  2014  0021C6  0E00               	movlw	0
  2015  0021C8  0100               	movlb	0	; () banked
  2016  0021CA  21D3               	addwfc	(FastTransfer_buffer_modulo_inc@value+1)& (0+255),w,b
  2017  0021CC  0100               	movlb	0	; () banked
  2018  0021CE  6FD7               	movwf	(FastTransfer_buffer_modulo_inc@my_value+1)& (0+255),b
  2019                           
  2020                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  2021  0021D0  0100               	movlb	0	; () banked
  2022  0021D2  51D4               	movf	FastTransfer_buffer_modulo_inc@modulus& (0+255),w,b
  2023  0021D4  0100               	movlb	0	; () banked
  2024  0021D6  5DD6               	subwf	FastTransfer_buffer_modulo_inc@my_value& (0+255),w,b
  2025  0021D8  0100               	movlb	0	; () banked
  2026  0021DA  51D5               	movf	(FastTransfer_buffer_modulo_inc@modulus+1)& (0+255),w,b
  2027  0021DC  0100               	movlb	0	; () banked
  2028  0021DE  59D7               	subwfb	(FastTransfer_buffer_modulo_inc@my_value+1)& (0+255),w,b
  2029  0021E0  A0D8               	btfss	status,0,c
  2030  0021E2  D005               	goto	l3800
  2031                           
  2032                           ; BSR set to: 0
  2033                           ;FastTransfer.c: 276: my_value = 0;
  2034  0021E4  0E00               	movlw	0
  2035  0021E6  0100               	movlb	0	; () banked
  2036  0021E8  6FD7               	movwf	(FastTransfer_buffer_modulo_inc@my_value+1)& (0+255),b
  2037  0021EA  0E00               	movlw	0
  2038  0021EC  6FD6               	movwf	FastTransfer_buffer_modulo_inc@my_value& (0+255),b
  2039  0021EE                     l3800:
  2040                           
  2041                           ; BSR set to: 0
  2042                           ;FastTransfer.c: 277: }
  2043                           ;FastTransfer.c: 278: return (my_value);
  2044  0021EE  C0D6  F0D2         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  2045  0021F2  C0D7  F0D3         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  2046  0021F6  0012               	return	
  2047  0021F8                     __end_of_FastTransfer_buffer_modulo_inc:
  2048                           	opt stack 0
  2049                           tosu	equ	0xFFF
  2050                           tosh	equ	0xFFE
  2051                           tosl	equ	0xFFD
  2052                           pclath	equ	0xFFA
  2053                           tblptru	equ	0xFF8
  2054                           tblptrh	equ	0xFF7
  2055                           tblptrl	equ	0xFF6
  2056                           tablat	equ	0xFF5
  2057                           intcon	equ	0xFF2
  2058                           postinc0	equ	0xFEE
  2059                           wreg	equ	0xFE8
  2060                           indf2	equ	0xFDF
  2061                           postinc2	equ	0xFDE
  2062                           postdec2	equ	0xFDD
  2063                           plusw2	equ	0xFDB
  2064                           fsr2h	equ	0xFDA
  2065                           fsr2l	equ	0xFD9
  2066                           status	equ	0xFD8
  2067                           
  2068 ;; *************** function _Delay *****************
  2069 ;; Defined at:
  2070 ;;		line 9 in file "Functions.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;  wait            4    0[BANK0 ] long 
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;  i               4    5[BANK0 ] long 
  2075 ;; Return value:  Size  Location     Type
  2076 ;;                  1    wreg      void 
  2077 ;; Registers used:
  2078 ;;		wreg, status,2, status,0
  2079 ;; Tracked objects:
  2080 ;;		On entry : 0/0
  2081 ;;		On exit  : 0/0
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2084 ;;      Params:         0       4       0       0       0       0       0
  2085 ;;      Locals:         0       4       0       0       0       0       0
  2086 ;;      Temps:          0       1       0       0       0       0       0
  2087 ;;      Totals:         0       9       0       0       0       0       0
  2088 ;;Total ram usage:        9 bytes
  2089 ;; Hardware stack levels used:    1
  2090 ;; Hardware stack levels required when called:    6
  2091 ;; This function calls:
  2092 ;;		Nothing
  2093 ;; This function is called by:
  2094 ;;		_respondECU
  2095 ;;		_StartUp595
  2096 ;;		_PotSetpoint
  2097 ;;		_PotClear
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           	psect	text9
  2102  001F70                     __ptext9:
  2103                           	opt stack 0
  2104  001F70                     _Delay:
  2105                           	opt stack 22
  2106                           
  2107                           ;Functions.c: 10: long int i = 0;
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;incstack = 0
  2111  001F70  0E00               	movlw	0
  2112  001F72  0100               	movlb	0	; () banked
  2113  001F74  6FD7               	movwf	Delay@i& (0+255),b
  2114  001F76  0E00               	movlw	0
  2115  001F78  6FD8               	movwf	(Delay@i+1)& (0+255),b
  2116  001F7A  0E00               	movlw	0
  2117  001F7C  6FD9               	movwf	(Delay@i+2)& (0+255),b
  2118  001F7E  0E00               	movlw	0
  2119  001F80  6FDA               	movwf	(Delay@i+3)& (0+255),b
  2120                           
  2121                           ;Functions.c: 11: for (; wait > i; i++) {
  2122  001F82  D00F               	goto	l3962
  2123  001F84                     l3958:
  2124                           
  2125                           ; BSR set to: 0
  2126                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  2127  001F84  0E03               	movlw	3
  2128  001F86  0100               	movlb	0	; () banked
  2129  001F88  6FD6               	movwf	??_Delay& (0+255),b
  2130  001F8A  0E98               	movlw	152
  2131  001F8C                     u4157:
  2132  001F8C  2EE8               	decfsz	wreg,f,c
  2133  001F8E  D7FE               	goto	u4157
  2134  001F90  2FD6               	decfsz	??_Delay& (0+255),f,b
  2135  001F92  D7FC               	goto	u4157
  2136  001F94  0E01               	movlw	1
  2137  001F96  0100               	movlb	0	; () banked
  2138  001F98  27D7               	addwf	Delay@i& (0+255),f,b
  2139  001F9A  0E00               	movlw	0
  2140  001F9C  23D8               	addwfc	(Delay@i+1)& (0+255),f,b
  2141  001F9E  23D9               	addwfc	(Delay@i+2)& (0+255),f,b
  2142  001FA0  23DA               	addwfc	(Delay@i+3)& (0+255),f,b
  2143  001FA2                     l3962:
  2144                           
  2145                           ; BSR set to: 0
  2146  001FA2  0100               	movlb	0	; () banked
  2147  001FA4  51D2               	movf	Delay@wait& (0+255),w,b
  2148  001FA6  0100               	movlb	0	; () banked
  2149  001FA8  5DD7               	subwf	Delay@i& (0+255),w,b
  2150  001FAA  0100               	movlb	0	; () banked
  2151  001FAC  51D3               	movf	(Delay@wait+1)& (0+255),w,b
  2152  001FAE  0100               	movlb	0	; () banked
  2153  001FB0  59D8               	subwfb	(Delay@i+1)& (0+255),w,b
  2154  001FB2  0100               	movlb	0	; () banked
  2155  001FB4  51D4               	movf	(Delay@wait+2)& (0+255),w,b
  2156  001FB6  0100               	movlb	0	; () banked
  2157  001FB8  59D9               	subwfb	(Delay@i+2)& (0+255),w,b
  2158  001FBA  0100               	movlb	0	; () banked
  2159  001FBC  51DA               	movf	(Delay@i+3)& (0+255),w,b
  2160  001FBE  0A80               	xorlw	128
  2161  001FC0  0100               	movlb	0	; () banked
  2162  001FC2  6FD6               	movwf	??_Delay& (0+255),b
  2163  001FC4  0100               	movlb	0	; () banked
  2164  001FC6  51D5               	movf	(Delay@wait+3)& (0+255),w,b
  2165  001FC8  0A80               	xorlw	128
  2166  001FCA  0100               	movlb	0	; () banked
  2167  001FCC  59D6               	subwfb	??_Delay& (0+255),w,b
  2168  001FCE  B0D8               	btfsc	status,0,c
  2169  001FD0  0012               	return	
  2170  001FD2  D7D8               	goto	l3958
  2171  001FD4                     __end_of_Delay:
  2172                           	opt stack 0
  2173                           tosu	equ	0xFFF
  2174                           tosh	equ	0xFFE
  2175                           tosl	equ	0xFFD
  2176                           pclath	equ	0xFFA
  2177                           tblptru	equ	0xFF8
  2178                           tblptrh	equ	0xFF7
  2179                           tblptrl	equ	0xFF6
  2180                           tablat	equ	0xFF5
  2181                           intcon	equ	0xFF2
  2182                           postinc0	equ	0xFEE
  2183                           wreg	equ	0xFE8
  2184                           indf2	equ	0xFDF
  2185                           postinc2	equ	0xFDE
  2186                           postdec2	equ	0xFDD
  2187                           plusw2	equ	0xFDB
  2188                           fsr2h	equ	0xFDA
  2189                           fsr2l	equ	0xFD9
  2190                           status	equ	0xFD8
  2191                           
  2192 ;; *************** function _receiveData *****************
  2193 ;; Defined at:
  2194 ;;		line 82 in file "FastTransfer.c"
  2195 ;; Parameters:    Size  Location     Type
  2196 ;;		None
  2197 ;; Auto vars:     Size  Location     Type
  2198 ;;  holder          3   28[BANK0 ] unsigned char [3]
  2199 ;;  crcHolder       1   32[BANK0 ] unsigned char 
  2200 ;;  holder          3   25[BANK0 ] unsigned char [3]
  2201 ;;  crcHolder       1   31[BANK0 ] unsigned char 
  2202 ;;  u               2   33[BANK0 ] int 
  2203 ;;  r               2   35[BANK0 ] int 
  2204 ;; Return value:  Size  Location     Type
  2205 ;;                  1    wreg      unsigned char 
  2206 ;; Registers used:
  2207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2208 ;; Tracked objects:
  2209 ;;		On entry : 0/0
  2210 ;;		On exit  : 0/0
  2211 ;;		Unchanged: 0/0
  2212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2213 ;;      Params:         0       0       0       0       0       0       0
  2214 ;;      Locals:         0      12       0       0       0       0       0
  2215 ;;      Temps:          0       6       0       0       0       0       0
  2216 ;;      Totals:         0      18       0       0       0       0       0
  2217 ;;Total ram usage:       18 bytes
  2218 ;; Hardware stack levels used:    1
  2219 ;; Hardware stack levels required when called:   10
  2220 ;; This function calls:
  2221 ;;		Absolute function
  2222 ;;		_CRC8
  2223 ;;		_CRCcheck
  2224 ;;		_Receive_available
  2225 ;;		_Receive_get
  2226 ;;		_Receive_peek
  2227 ;;		_Send_put
  2228 ;; This function is called by:
  2229 ;;		_updateComms
  2230 ;; This function uses a non-reentrant model
  2231 ;;
  2232                           
  2233                           	psect	text10
  2234  0000B0                     __ptext10:
  2235                           	opt stack 0
  2236  0000B0                     _receiveData:
  2237                           	opt stack 19
  2238                           
  2239                           ;FastTransfer.c: 85: if (rx_len == 0) {
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;incstack = 0
  2243  0000B0  0100               	movlb	0	; () banked
  2244  0000B2  5198               	movf	_rx_len& (0+255),w,b
  2245  0000B4  0100               	movlb	0	; () banked
  2246  0000B6  A4D8               	btfss	status,2,c
  2247  0000B8  D0BF               	goto	l4196
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2251  0000BA  D801               	call	u3558
  2252  0000BC  D00B               	goto	u3559
  2253  0000BE                     u3558:
  2254  0000BE  0005               	push	
  2255  0000C0  0100               	movlb	0	; () banked
  2256  0000C2  6EFA               	movwf	pclath,c
  2257  0000C4  518C               	movf	_serial_available& (0+255),w,b
  2258  0000C6  6EFD               	movwf	tosl,c
  2259  0000C8  518D               	movf	(_serial_available+1)& (0+255),w,b
  2260  0000CA  6EFE               	movwf	tosh,c
  2261  0000CC  50F8               	movf	tblptru,w,c
  2262  0000CE  6EFF               	movwf	tosu,c
  2263  0000D0  50FA               	movf	pclath,w,c
  2264  0000D2  0012               	return		;indir
  2265  0000D4                     u3559:
  2266  0000D4  0100               	movlb	0	; () banked
  2267  0000D6  BFD5               	btfsc	(?_Receive_available+1)& (0+255),7,b
  2268  0000D8  D0AF               	goto	l4196
  2269  0000DA  0100               	movlb	0	; () banked
  2270  0000DC  51D5               	movf	(?_Receive_available+1)& (0+255),w,b
  2271  0000DE  E122               	bnz	l4172
  2272  0000E0  0E05               	movlw	5
  2273  0000E2  0100               	movlb	0	; () banked
  2274  0000E4  5DD4               	subwf	?_Receive_available& (0+255),w,b
  2275  0000E6  B0D8               	btfsc	status,0,c
  2276  0000E8  D01D               	goto	l4172
  2277  0000EA  D0A6               	goto	l4196
  2278  0000EC                     l4164:
  2279                           
  2280                           ;FastTransfer.c: 93: alignErrorCounter++;
  2281  0000EC  4A30               	infsnz	_alignErrorCounter,f,c
  2282  0000EE  2A31               	incf	_alignErrorCounter+1,f,c
  2283                           
  2284                           ;FastTransfer.c: 94: if (serial_available() < 5)
  2285  0000F0  D801               	call	u3578
  2286  0000F2  D00B               	goto	u3579
  2287  0000F4                     u3578:
  2288  0000F4  0005               	push	
  2289  0000F6  0100               	movlb	0	; () banked
  2290  0000F8  6EFA               	movwf	pclath,c
  2291  0000FA  518C               	movf	_serial_available& (0+255),w,b
  2292  0000FC  6EFD               	movwf	tosl,c
  2293  0000FE  518D               	movf	(_serial_available+1)& (0+255),w,b
  2294  000100  6EFE               	movwf	tosh,c
  2295  000102  50F8               	movf	tblptru,w,c
  2296  000104  6EFF               	movwf	tosu,c
  2297  000106  50FA               	movf	pclath,w,c
  2298  000108  0012               	return		;indir
  2299  00010A                     u3579:
  2300  00010A  0100               	movlb	0	; () banked
  2301  00010C  BFD5               	btfsc	(?_Receive_available+1)& (0+255),7,b
  2302  00010E  D008               	goto	l4168
  2303  000110  0100               	movlb	0	; () banked
  2304  000112  51D5               	movf	(?_Receive_available+1)& (0+255),w,b
  2305  000114  E107               	bnz	l4172
  2306  000116  0E05               	movlw	5
  2307  000118  0100               	movlb	0	; () banked
  2308  00011A  5DD4               	subwf	?_Receive_available& (0+255),w,b
  2309  00011C  B0D8               	btfsc	status,0,c
  2310  00011E  D002               	goto	l4172
  2311  000120                     l4168:
  2312                           
  2313                           ; BSR set to: 0
  2314                           ;FastTransfer.c: 95: return 0;
  2315  000120  0E00               	movlw	0
  2316                           
  2317                           ; BSR set to: 0
  2318  000122  0012               	return	
  2319  000124                     l4172:
  2320                           
  2321                           ; BSR set to: 0
  2322  000124  D801               	call	u3598
  2323  000126  D00B               	goto	u3599
  2324  000128                     u3598:
  2325  000128  0005               	push	
  2326  00012A  0100               	movlb	0	; () banked
  2327  00012C  6EFA               	movwf	pclath,c
  2328  00012E  5190               	movf	_serial_read& (0+255),w,b
  2329  000130  6EFD               	movwf	tosl,c
  2330  000132  5191               	movf	(_serial_read+1)& (0+255),w,b
  2331  000134  6EFE               	movwf	tosh,c
  2332  000136  50F8               	movf	tblptru,w,c
  2333  000138  6EFF               	movwf	tosu,c
  2334  00013A  50FA               	movf	pclath,w,c
  2335  00013C  0012               	return		;indir
  2336  00013E                     u3599:
  2337  00013E  0A06               	xorlw	6
  2338  000140  A4D8               	btfss	status,2,c
  2339  000142  D7D4               	goto	l4164
  2340                           
  2341                           ;FastTransfer.c: 96: }
  2342                           ;FastTransfer.c: 97: if (serial_read() == 0x85) {
  2343  000144  D801               	call	u3618
  2344  000146  D00B               	goto	u3619
  2345  000148                     u3618:
  2346  000148  0005               	push	
  2347  00014A  0100               	movlb	0	; () banked
  2348  00014C  6EFA               	movwf	pclath,c
  2349  00014E  5190               	movf	_serial_read& (0+255),w,b
  2350  000150  6EFD               	movwf	tosl,c
  2351  000152  5191               	movf	(_serial_read+1)& (0+255),w,b
  2352  000154  6EFE               	movwf	tosh,c
  2353  000156  50F8               	movf	tblptru,w,c
  2354  000158  6EFF               	movwf	tosu,c
  2355  00015A  50FA               	movf	pclath,w,c
  2356  00015C  0012               	return		;indir
  2357  00015E                     u3619:
  2358  00015E  0A85               	xorlw	133
  2359  000160  A4D8               	btfss	status,2,c
  2360  000162  D06A               	goto	l4196
  2361                           
  2362                           ;FastTransfer.c: 98: rx_address = serial_read();
  2363  000164  D801               	call	u3638
  2364  000166  D00B               	goto	u3639
  2365  000168                     u3638:
  2366  000168  0005               	push	
  2367  00016A  0100               	movlb	0	; () banked
  2368  00016C  6EFA               	movwf	pclath,c
  2369  00016E  5190               	movf	_serial_read& (0+255),w,b
  2370  000170  6EFD               	movwf	tosl,c
  2371  000172  5191               	movf	(_serial_read+1)& (0+255),w,b
  2372  000174  6EFE               	movwf	tosh,c
  2373  000176  50F8               	movf	tblptru,w,c
  2374  000178  6EFF               	movwf	tosu,c
  2375  00017A  50FA               	movf	pclath,w,c
  2376  00017C  0012               	return		;indir
  2377  00017E                     u3639:
  2378  00017E  0100               	movlb	0	; () banked
  2379  000180  6F96               	movwf	_rx_address& (0+255),b
  2380                           
  2381                           ;FastTransfer.c: 99: returnAddress = serial_read();
  2382  000182  D801               	call	u3648
  2383  000184  D00B               	goto	u3649
  2384  000186                     u3648:
  2385  000186  0005               	push	
  2386  000188  0100               	movlb	0	; () banked
  2387  00018A  6EFA               	movwf	pclath,c
  2388  00018C  5190               	movf	_serial_read& (0+255),w,b
  2389  00018E  6EFD               	movwf	tosl,c
  2390  000190  5191               	movf	(_serial_read+1)& (0+255),w,b
  2391  000192  6EFE               	movwf	tosh,c
  2392  000194  50F8               	movf	tblptru,w,c
  2393  000196  6EFF               	movwf	tosu,c
  2394  000198  50FA               	movf	pclath,w,c
  2395  00019A  0012               	return		;indir
  2396  00019C                     u3649:
  2397  00019C  0100               	movlb	0	; () banked
  2398  00019E  6F95               	movwf	_returnAddress& (0+255),b
  2399                           
  2400                           ;FastTransfer.c: 100: rx_len = serial_read();
  2401  0001A0  D801               	call	u3658
  2402  0001A2  D00B               	goto	u3659
  2403  0001A4                     u3658:
  2404  0001A4  0005               	push	
  2405  0001A6  0100               	movlb	0	; () banked
  2406  0001A8  6EFA               	movwf	pclath,c
  2407  0001AA  5190               	movf	_serial_read& (0+255),w,b
  2408  0001AC  6EFD               	movwf	tosl,c
  2409  0001AE  5191               	movf	(_serial_read+1)& (0+255),w,b
  2410  0001B0  6EFE               	movwf	tosh,c
  2411  0001B2  50F8               	movf	tblptru,w,c
  2412  0001B4  6EFF               	movwf	tosu,c
  2413  0001B6  50FA               	movf	pclath,w,c
  2414  0001B8  0012               	return		;indir
  2415  0001BA                     u3659:
  2416  0001BA  0100               	movlb	0	; () banked
  2417  0001BC  6F98               	movwf	_rx_len& (0+255),b
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;FastTransfer.c: 102: if (rx_address != moduleAddress) {
  2421  0001BE  503F               	movf	_moduleAddress,w,c
  2422  0001C0  0100               	movlb	0	; () banked
  2423  0001C2  1996               	xorwf	_rx_address& (0+255),w,b
  2424  0001C4  B4D8               	btfsc	status,2,c
  2425  0001C6  D038               	goto	l4196
  2426                           
  2427                           ; BSR set to: 0
  2428                           ;FastTransfer.c: 103: addressErrorCounter++;
  2429  0001C8  0100               	movlb	0	; () banked
  2430  0001CA  4B84               	infsnz	_addressErrorCounter& (0+255),f,b
  2431  0001CC  2B85               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;FastTransfer.c: 106: int u;
  2435                           ;FastTransfer.c: 107: for (u = 0; u <= (rx_len + 1); u++) {
  2436  0001CE  0E00               	movlw	0
  2437  0001D0  0100               	movlb	0	; () banked
  2438  0001D2  6FF4               	movwf	(receiveData@u+1)& (0+255),b
  2439  0001D4  0E00               	movlw	0
  2440  0001D6  6FF3               	movwf	receiveData@u& (0+255),b
  2441  0001D8  D010               	goto	l4188
  2442  0001DA                     l4184:
  2443                           
  2444                           ; BSR set to: 0
  2445                           ;FastTransfer.c: 108: serial_read();
  2446  0001DA  D801               	call	u3678
  2447  0001DC  D00B               	goto	l4186
  2448  0001DE                     u3678:
  2449  0001DE  0005               	push	
  2450  0001E0  0100               	movlb	0	; () banked
  2451  0001E2  6EFA               	movwf	pclath,c
  2452  0001E4  5190               	movf	_serial_read& (0+255),w,b
  2453  0001E6  6EFD               	movwf	tosl,c
  2454  0001E8  5191               	movf	(_serial_read+1)& (0+255),w,b
  2455  0001EA  6EFE               	movwf	tosh,c
  2456  0001EC  50F8               	movf	tblptru,w,c
  2457  0001EE  6EFF               	movwf	tosu,c
  2458  0001F0  50FA               	movf	pclath,w,c
  2459  0001F2  0012               	return		;indir
  2460  0001F4                     l4186:
  2461  0001F4  0100               	movlb	0	; () banked
  2462  0001F6  4BF3               	infsnz	receiveData@u& (0+255),f,b
  2463  0001F8  2BF4               	incf	(receiveData@u+1)& (0+255),f,b
  2464  0001FA                     l4188:
  2465                           
  2466                           ; BSR set to: 0
  2467  0001FA  0100               	movlb	0	; () banked
  2468  0001FC  5198               	movf	_rx_len& (0+255),w,b
  2469  0001FE  0100               	movlb	0	; () banked
  2470  000200  6FE5               	movwf	??_receiveData& (0+255),b
  2471  000202  6BE6               	clrf	(??_receiveData+1)& (0+255),b
  2472  000204  0E01               	movlw	1
  2473  000206  0100               	movlb	0	; () banked
  2474  000208  27E5               	addwf	??_receiveData& (0+255),f,b
  2475  00020A  0E00               	movlw	0
  2476  00020C  23E6               	addwfc	(??_receiveData+1)& (0+255),f,b
  2477  00020E  0100               	movlb	0	; () banked
  2478  000210  51F3               	movf	receiveData@u& (0+255),w,b
  2479  000212  0100               	movlb	0	; () banked
  2480  000214  5DE5               	subwf	??_receiveData& (0+255),w,b
  2481  000216  0100               	movlb	0	; () banked
  2482  000218  51E6               	movf	(??_receiveData+1)& (0+255),w,b
  2483  00021A  0A80               	xorlw	128
  2484  00021C  0100               	movlb	0	; () banked
  2485  00021E  6FE7               	movwf	(??_receiveData+2)& (0+255),b
  2486  000220  0100               	movlb	0	; () banked
  2487  000222  51F4               	movf	(receiveData@u+1)& (0+255),w,b
  2488  000224  0A80               	xorlw	128
  2489  000226  0100               	movlb	0	; () banked
  2490  000228  59E7               	subwfb	(??_receiveData+2)& (0+255),w,b
  2491  00022A  B0D8               	btfsc	status,0,c
  2492  00022C  D7D6               	goto	l4184
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;FastTransfer.c: 109: }
  2496                           ;FastTransfer.c: 110: rx_len = 0;
  2497                           
  2498                           ; BSR set to: 0
  2499  00022E  0E00               	movlw	0
  2500  000230  0100               	movlb	0	; () banked
  2501  000232  6F98               	movwf	_rx_len& (0+255),b
  2502                           
  2503                           ; BSR set to: 0
  2504                           ;FastTransfer.c: 111: return 0;
  2505  000234  0E00               	movlw	0
  2506                           
  2507                           ; BSR set to: 0
  2508  000236  0012               	return	
  2509  000238                     l4196:
  2510                           
  2511                           ;FastTransfer.c: 112: }
  2512                           ;FastTransfer.c: 114: }
  2513                           ;FastTransfer.c: 115: }
  2514                           ;FastTransfer.c: 116: }
  2515                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2516  000238  0100               	movlb	0	; () banked
  2517  00023A  5198               	movf	_rx_len& (0+255),w,b
  2518  00023C  0100               	movlb	0	; () banked
  2519  00023E  B4D8               	btfsc	status,2,c
  2520  000240  D2D2               	goto	l4320
  2521                           
  2522                           ; BSR set to: 0
  2523                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2524  000242  0100               	movlb	0	; () banked
  2525  000244  5197               	movf	_rx_array_inx& (0+255),w,b
  2526  000246  0100               	movlb	0	; () banked
  2527  000248  A4D8               	btfss	status,2,c
  2528  00024A  D04D               	goto	l4220
  2529  00024C                     l4202:
  2530                           
  2531                           ; BSR set to: 0
  2532  00024C  D801               	call	u3718
  2533  00024E  D00B               	goto	u3719
  2534  000250                     u3718:
  2535  000250  0005               	push	
  2536  000252  0100               	movlb	0	; () banked
  2537  000254  6EFA               	movwf	pclath,c
  2538  000256  518C               	movf	_serial_available& (0+255),w,b
  2539  000258  6EFD               	movwf	tosl,c
  2540  00025A  518D               	movf	(_serial_available+1)& (0+255),w,b
  2541  00025C  6EFE               	movwf	tosh,c
  2542  00025E  50F8               	movf	tblptru,w,c
  2543  000260  6EFF               	movwf	tosu,c
  2544  000262  50FA               	movf	pclath,w,c
  2545  000264  0012               	return		;indir
  2546  000266                     u3719:
  2547  000266  0100               	movlb	0	; () banked
  2548  000268  BFD5               	btfsc	(?_Receive_available+1)& (0+255),7,b
  2549  00026A  D7F0               	goto	l4202
  2550  00026C  0100               	movlb	0	; () banked
  2551  00026E  51D5               	movf	(?_Receive_available+1)& (0+255),w,b
  2552  000270  E104               	bnz	l4204
  2553  000272  0100               	movlb	0	; () banked
  2554  000274  05D4               	decf	?_Receive_available& (0+255),w,b
  2555  000276  A0D8               	btfss	status,0,c
  2556  000278  D7E9               	goto	l4202
  2557  00027A                     l4204:
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2561  00027A  D801               	call	u3738
  2562  00027C  D00B               	goto	u3739
  2563  00027E                     u3738:
  2564  00027E  0005               	push	
  2565  000280  0100               	movlb	0	; () banked
  2566  000282  6EFA               	movwf	pclath,c
  2567  000284  518E               	movf	_serial_peek& (0+255),w,b
  2568  000286  6EFD               	movwf	tosl,c
  2569  000288  518F               	movf	(_serial_peek+1)& (0+255),w,b
  2570  00028A  6EFE               	movwf	tosh,c
  2571  00028C  50F8               	movf	tblptru,w,c
  2572  00028E  6EFF               	movwf	tosu,c
  2573  000290  50FA               	movf	pclath,w,c
  2574  000292  0012               	return		;indir
  2575  000294                     u3739:
  2576  000294  0AFF               	xorlw	255
  2577  000296  A4D8               	btfss	status,2,c
  2578  000298  D026               	goto	l4220
  2579                           
  2580                           ;FastTransfer.c: 125: CRCcheck();
  2581  00029A  EC13  F008         	call	_CRCcheck	;wreg free
  2582                           
  2583                           ;FastTransfer.c: 126: rx_len = 0;
  2584  00029E  0E00               	movlw	0
  2585  0002A0  0100               	movlb	0	; () banked
  2586  0002A2  6F98               	movwf	_rx_len& (0+255),b
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2590  0002A4  0E00               	movlw	0
  2591  0002A6  0100               	movlb	0	; () banked
  2592  0002A8  6F97               	movwf	_rx_array_inx& (0+255),b
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;FastTransfer.c: 128: return 0;
  2596  0002AA  0E00               	movlw	0
  2597                           
  2598                           ; BSR set to: 0
  2599  0002AC  0012               	return	
  2600  0002AE                     l4216:
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2604  0002AE  D801               	call	u3758
  2605  0002B0  D00B               	goto	u3759
  2606  0002B2                     u3758:
  2607  0002B2  0005               	push	
  2608  0002B4  0100               	movlb	0	; () banked
  2609  0002B6  6EFA               	movwf	pclath,c
  2610  0002B8  5190               	movf	_serial_read& (0+255),w,b
  2611  0002BA  6EFD               	movwf	tosl,c
  2612  0002BC  5191               	movf	(_serial_read+1)& (0+255),w,b
  2613  0002BE  6EFE               	movwf	tosh,c
  2614  0002C0  50F8               	movf	tblptru,w,c
  2615  0002C2  6EFF               	movwf	tosu,c
  2616  0002C4  50FA               	movf	pclath,w,c
  2617  0002C6  0012               	return		;indir
  2618  0002C8                     u3759:
  2619  0002C8  0100               	movlb	0	; () banked
  2620  0002CA  6FE5               	movwf	??_receiveData& (0+255),b
  2621  0002CC  0100               	movlb	0	; () banked
  2622  0002CE  5197               	movf	_rx_array_inx& (0+255),w,b
  2623  0002D0  0D01               	mullw	1
  2624  0002D2  0E00               	movlw	low _rx_buffer
  2625  0002D4  24F3               	addwf	prodl,w,c
  2626  0002D6  6ED9               	movwf	fsr2l,c
  2627  0002D8  0E02               	movlw	high _rx_buffer
  2628  0002DA  20F4               	addwfc	prodh,w,c
  2629  0002DC  6EDA               	movwf	fsr2h,c
  2630  0002DE  C0E5  FFDF         	movff	??_receiveData,indf2
  2631                           
  2632                           ; BSR set to: 0
  2633  0002E2  0100               	movlb	0	; () banked
  2634  0002E4  2B97               	incf	_rx_array_inx& (0+255),f,b
  2635  0002E6                     l4220:
  2636  0002E6  D801               	call	u3768
  2637  0002E8  D00B               	goto	u3769
  2638  0002EA                     u3768:
  2639  0002EA  0005               	push	
  2640  0002EC  0100               	movlb	0	; () banked
  2641  0002EE  6EFA               	movwf	pclath,c
  2642  0002F0  518C               	movf	_serial_available& (0+255),w,b
  2643  0002F2  6EFD               	movwf	tosl,c
  2644  0002F4  518D               	movf	(_serial_available+1)& (0+255),w,b
  2645  0002F6  6EFE               	movwf	tosh,c
  2646  0002F8  50F8               	movf	tblptru,w,c
  2647  0002FA  6EFF               	movwf	tosu,c
  2648  0002FC  50FA               	movf	pclath,w,c
  2649  0002FE  0012               	return		;indir
  2650  000300                     u3769:
  2651  000300  0100               	movlb	0	; () banked
  2652  000302  51D4               	movf	?_Receive_available& (0+255),w,b
  2653  000304  0100               	movlb	0	; () banked
  2654  000306  11D5               	iorwf	(?_Receive_available+1)& (0+255),w,b
  2655  000308  B4D8               	btfsc	status,2,c
  2656  00030A  D006               	goto	l4224
  2657                           
  2658                           ; BSR set to: 0
  2659  00030C  0100               	movlb	0	; () banked
  2660  00030E  5197               	movf	_rx_array_inx& (0+255),w,b
  2661  000310  0100               	movlb	0	; () banked
  2662  000312  5D98               	subwf	_rx_len& (0+255),w,b
  2663  000314  B0D8               	btfsc	status,0,c
  2664  000316  D7CB               	goto	l4216
  2665  000318                     l4224:
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;FastTransfer.c: 135: }
  2669                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2670  000318  0100               	movlb	0	; () banked
  2671  00031A  5198               	movf	_rx_len& (0+255),w,b
  2672  00031C  0100               	movlb	0	; () banked
  2673  00031E  6FE5               	movwf	??_receiveData& (0+255),b
  2674  000320  6BE6               	clrf	(??_receiveData+1)& (0+255),b
  2675  000322  0EFF               	movlw	255
  2676  000324  0100               	movlb	0	; () banked
  2677  000326  6FE7               	movwf	(??_receiveData+2)& (0+255),b
  2678  000328  0EFF               	movlw	255
  2679  00032A  0100               	movlb	0	; () banked
  2680  00032C  6FE8               	movwf	(??_receiveData+3)& (0+255),b
  2681  00032E  0100               	movlb	0	; () banked
  2682  000330  5197               	movf	_rx_array_inx& (0+255),w,b
  2683  000332  0100               	movlb	0	; () banked
  2684  000334  6FE9               	movwf	(??_receiveData+4)& (0+255),b
  2685  000336  6BEA               	clrf	(??_receiveData+5)& (0+255),b
  2686  000338  0100               	movlb	0	; () banked
  2687  00033A  51E7               	movf	(??_receiveData+2)& (0+255),w,b
  2688  00033C  0100               	movlb	0	; () banked
  2689  00033E  27E9               	addwf	(??_receiveData+4)& (0+255),f,b
  2690  000340  0100               	movlb	0	; () banked
  2691  000342  51E8               	movf	(??_receiveData+3)& (0+255),w,b
  2692  000344  0100               	movlb	0	; () banked
  2693  000346  23EA               	addwfc	(??_receiveData+5)& (0+255),f,b
  2694  000348  0100               	movlb	0	; () banked
  2695  00034A  51E5               	movf	??_receiveData& (0+255),w,b
  2696  00034C  0100               	movlb	0	; () banked
  2697  00034E  19E9               	xorwf	(??_receiveData+4)& (0+255),w,b
  2698  000350  E105               	bnz	u3791
  2699  000352  0100               	movlb	0	; () banked
  2700  000354  51E6               	movf	(??_receiveData+1)& (0+255),w,b
  2701  000356  0100               	movlb	0	; () banked
  2702  000358  19EA               	xorwf	(??_receiveData+5)& (0+255),w,b
  2703  00035A  A4D8               	btfss	status,2,c
  2704  00035C                     u3791:
  2705  00035C  D244               	goto	l4320
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2709  00035E  0E00               	movlw	low _rx_buffer
  2710  000360  0100               	movlb	0	; () banked
  2711  000362  6FD2               	movwf	CRC8@data& (0+255),b
  2712  000364  0E02               	movlw	high _rx_buffer
  2713  000366  0100               	movlb	0	; () banked
  2714  000368  6FD3               	movwf	(CRC8@data+1)& (0+255),b
  2715  00036A  C098  F0D4         	movff	_rx_len,CRC8@len
  2716  00036E  EC81  F00F         	call	_CRC8	;wreg free
  2717  000372  0100               	movlb	0	; () banked
  2718  000374  6F93               	movwf	_calc_CS& (0+255),b
  2719                           
  2720                           ; BSR set to: 0
  2721                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2722  000376  0EFF               	movlw	255
  2723  000378  0100               	movlb	0	; () banked
  2724  00037A  6FE5               	movwf	??_receiveData& (0+255),b
  2725  00037C  0EFF               	movlw	255
  2726  00037E  0100               	movlb	0	; () banked
  2727  000380  6FE6               	movwf	(??_receiveData+1)& (0+255),b
  2728  000382  0100               	movlb	0	; () banked
  2729  000384  5197               	movf	_rx_array_inx& (0+255),w,b
  2730  000386  0100               	movlb	0	; () banked
  2731  000388  6FE7               	movwf	(??_receiveData+2)& (0+255),b
  2732  00038A  6BE8               	clrf	(??_receiveData+3)& (0+255),b
  2733  00038C  0100               	movlb	0	; () banked
  2734  00038E  51E5               	movf	??_receiveData& (0+255),w,b
  2735  000390  0100               	movlb	0	; () banked
  2736  000392  27E7               	addwf	(??_receiveData+2)& (0+255),f,b
  2737  000394  0100               	movlb	0	; () banked
  2738  000396  51E6               	movf	(??_receiveData+1)& (0+255),w,b
  2739  000398  0100               	movlb	0	; () banked
  2740  00039A  23E8               	addwfc	(??_receiveData+3)& (0+255),f,b
  2741  00039C  0E00               	movlw	low _rx_buffer
  2742  00039E  0100               	movlb	0	; () banked
  2743  0003A0  25E7               	addwf	(??_receiveData+2)& (0+255),w,b
  2744  0003A2  6ED9               	movwf	fsr2l,c
  2745  0003A4  0E02               	movlw	high _rx_buffer
  2746  0003A6  0100               	movlb	0	; () banked
  2747  0003A8  21E8               	addwfc	(??_receiveData+3)& (0+255),w,b
  2748  0003AA  6EDA               	movwf	fsr2h,c
  2749  0003AC  0100               	movlb	0	; () banked
  2750  0003AE  5193               	movf	_calc_CS& (0+255),w,b
  2751  0003B0  18DE               	xorwf	postinc2,w,c
  2752  0003B2  A4D8               	btfss	status,2,c
  2753  0003B4  D148               	goto	l4282
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;FastTransfer.c: 147: int r;
  2757                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2758  0003B6  0E00               	movlw	0
  2759  0003B8  0100               	movlb	0	; () banked
  2760  0003BA  6FF6               	movwf	(receiveData@r+1)& (0+255),b
  2761  0003BC  0E00               	movlw	0
  2762  0003BE  6FF5               	movwf	receiveData@r& (0+255),b
  2763  0003C0  D05F               	goto	l4242
  2764  0003C2                     l4232:
  2765                           
  2766                           ; BSR set to: 0
  2767                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2768  0003C2  0E00               	movlw	low _rx_buffer
  2769  0003C4  0100               	movlb	0	; () banked
  2770  0003C6  25F5               	addwf	receiveData@r& (0+255),w,b
  2771  0003C8  6ED9               	movwf	fsr2l,c
  2772  0003CA  0E02               	movlw	high _rx_buffer
  2773  0003CC  0100               	movlb	0	; () banked
  2774  0003CE  21F6               	addwfc	(receiveData@r+1)& (0+255),w,b
  2775  0003D0  6EDA               	movwf	fsr2h,c
  2776  0003D2  0100               	movlb	0	; () banked
  2777  0003D4  5194               	movf	_maxDataAddress& (0+255),w,b
  2778  0003D6  5CDE               	subwf	postinc2,w,c
  2779  0003D8  B0D8               	btfsc	status,0,c
  2780  0003DA  D045               	goto	l4238
  2781                           
  2782                           ; BSR set to: 0
  2783                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2784  0003DC  0E01               	movlw	1
  2785  0003DE  0100               	movlb	0	; () banked
  2786  0003E0  25F5               	addwf	receiveData@r& (0+255),w,b
  2787  0003E2  0100               	movlb	0	; () banked
  2788  0003E4  6FE5               	movwf	??_receiveData& (0+255),b
  2789  0003E6  0E00               	movlw	0
  2790  0003E8  0100               	movlb	0	; () banked
  2791  0003EA  21F6               	addwfc	(receiveData@r+1)& (0+255),w,b
  2792  0003EC  0100               	movlb	0	; () banked
  2793  0003EE  6FE6               	movwf	(??_receiveData+1)& (0+255),b
  2794  0003F0  0E00               	movlw	low _rx_buffer
  2795  0003F2  0100               	movlb	0	; () banked
  2796  0003F4  25E5               	addwf	??_receiveData& (0+255),w,b
  2797  0003F6  6ED9               	movwf	fsr2l,c
  2798  0003F8  0E02               	movlw	high _rx_buffer
  2799  0003FA  0100               	movlb	0	; () banked
  2800  0003FC  21E6               	addwfc	(??_receiveData+1)& (0+255),w,b
  2801  0003FE  6EDA               	movwf	fsr2h,c
  2802  000400  50DF               	movf	indf2,w,c
  2803  000402  0100               	movlb	0	; () banked
  2804  000404  6F88               	movwf	_group& (0+255),b
  2805                           
  2806                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2807  000406  0E02               	movlw	2
  2808  000408  0100               	movlb	0	; () banked
  2809  00040A  25F5               	addwf	receiveData@r& (0+255),w,b
  2810  00040C  0100               	movlb	0	; () banked
  2811  00040E  6FE5               	movwf	??_receiveData& (0+255),b
  2812  000410  0E00               	movlw	0
  2813  000412  0100               	movlb	0	; () banked
  2814  000414  21F6               	addwfc	(receiveData@r+1)& (0+255),w,b
  2815  000416  0100               	movlb	0	; () banked
  2816  000418  6FE6               	movwf	(??_receiveData+1)& (0+255),b
  2817  00041A  0E00               	movlw	low _rx_buffer
  2818  00041C  0100               	movlb	0	; () banked
  2819  00041E  25E5               	addwf	??_receiveData& (0+255),w,b
  2820  000420  6ED9               	movwf	fsr2l,c
  2821  000422  0E02               	movlw	high _rx_buffer
  2822  000424  0100               	movlb	0	; () banked
  2823  000426  21E6               	addwfc	(??_receiveData+1)& (0+255),w,b
  2824  000428  6EDA               	movwf	fsr2h,c
  2825  00042A  50DF               	movf	indf2,w,c
  2826  00042C  0100               	movlb	0	; () banked
  2827  00042E  6F89               	movwf	(_group+1)& (0+255),b
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2831  000430  0E00               	movlw	low _rx_buffer
  2832  000432  0100               	movlb	0	; () banked
  2833  000434  25F5               	addwf	receiveData@r& (0+255),w,b
  2834  000436  6ED9               	movwf	fsr2l,c
  2835  000438  0E02               	movlw	high _rx_buffer
  2836  00043A  0100               	movlb	0	; () banked
  2837  00043C  21F6               	addwfc	(receiveData@r+1)& (0+255),w,b
  2838  00043E  6EDA               	movwf	fsr2h,c
  2839  000440  50DF               	movf	indf2,w,c
  2840  000442  0100               	movlb	0	; () banked
  2841  000444  6FE5               	movwf	??_receiveData& (0+255),b
  2842  000446  0100               	movlb	0	; () banked
  2843  000448  51E5               	movf	??_receiveData& (0+255),w,b
  2844  00044A  0D02               	mullw	2
  2845  00044C  50F3               	movf	prodl,w,c
  2846  00044E  0100               	movlb	0	; () banked
  2847  000450  258A               	addwf	_receiveArrayAddress& (0+255),w,b
  2848  000452  6ED9               	movwf	fsr2l,c
  2849  000454  50F4               	movf	prodh,w,c
  2850  000456  0100               	movlb	0	; () banked
  2851  000458  218B               	addwfc	(_receiveArrayAddress+1)& (0+255),w,b
  2852  00045A  6EDA               	movwf	fsr2h,c
  2853  00045C  C088  FFDE         	movff	_group,postinc2
  2854  000460  C089  FFDD         	movff	_group+1,postdec2
  2855                           
  2856                           ;FastTransfer.c: 153: } else {
  2857  000464  D003               	goto	l4240
  2858  000466                     l4238:
  2859                           
  2860                           ; BSR set to: 0
  2861                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2862  000466  0100               	movlb	0	; () banked
  2863  000468  4B86               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2864  00046A  2B87               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2865  00046C                     l4240:
  2866                           
  2867                           ; BSR set to: 0
  2868  00046C  0E03               	movlw	3
  2869  00046E  0100               	movlb	0	; () banked
  2870  000470  25F5               	addwf	receiveData@r& (0+255),w,b
  2871  000472  0100               	movlb	0	; () banked
  2872  000474  6FF5               	movwf	receiveData@r& (0+255),b
  2873  000476  0E00               	movlw	0
  2874  000478  0100               	movlb	0	; () banked
  2875  00047A  21F6               	addwfc	(receiveData@r+1)& (0+255),w,b
  2876  00047C  0100               	movlb	0	; () banked
  2877  00047E  6FF6               	movwf	(receiveData@r+1)& (0+255),b
  2878  000480                     l4242:
  2879                           
  2880                           ; BSR set to: 0
  2881  000480  0100               	movlb	0	; () banked
  2882  000482  5198               	movf	_rx_len& (0+255),w,b
  2883  000484  0100               	movlb	0	; () banked
  2884  000486  6FE5               	movwf	??_receiveData& (0+255),b
  2885  000488  6BE6               	clrf	(??_receiveData+1)& (0+255),b
  2886  00048A  0100               	movlb	0	; () banked
  2887  00048C  51E5               	movf	??_receiveData& (0+255),w,b
  2888  00048E  0100               	movlb	0	; () banked
  2889  000490  5DF5               	subwf	receiveData@r& (0+255),w,b
  2890  000492  0100               	movlb	0	; () banked
  2891  000494  51F6               	movf	(receiveData@r+1)& (0+255),w,b
  2892  000496  0A80               	xorlw	128
  2893  000498  0100               	movlb	0	; () banked
  2894  00049A  6FE7               	movwf	(??_receiveData+2)& (0+255),b
  2895  00049C  0100               	movlb	0	; () banked
  2896  00049E  51E6               	movf	(??_receiveData+1)& (0+255),w,b
  2897  0004A0  0A80               	xorlw	128
  2898  0004A2  0100               	movlb	0	; () banked
  2899  0004A4  59E7               	subwfb	(??_receiveData+2)& (0+255),w,b
  2900  0004A6  A0D8               	btfss	status,0,c
  2901  0004A8  D78C               	goto	l4232
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;FastTransfer.c: 155: }
  2905                           ;FastTransfer.c: 156: }
  2906                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2907                           
  2908                           ; BSR set to: 0
  2909  0004AA  0100               	movlb	0	; () banked
  2910  0004AC  5192               	movf	_AKNAKsend& (0+255),w,b
  2911  0004AE  B4D8               	btfsc	status,2,c
  2912  0004B0  D0C2               	goto	l4272
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;FastTransfer.c: 160: unsigned char holder[3];
  2916                           ;FastTransfer.c: 161: holder[0] = 255;
  2917  0004B2  0100               	movlb	0	; () banked
  2918  0004B4  69EB               	setf	receiveData@holder& (0+255),b
  2919                           
  2920                           ; BSR set to: 0
  2921                           ;FastTransfer.c: 162: holder[1] = 1;
  2922  0004B6  0E01               	movlw	1
  2923  0004B8  0100               	movlb	0	; () banked
  2924  0004BA  6FEC               	movwf	(receiveData@holder+1)& (0+255),b
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  2928  0004BC  0EFF               	movlw	255
  2929  0004BE  0100               	movlb	0	; () banked
  2930  0004C0  6FE5               	movwf	??_receiveData& (0+255),b
  2931  0004C2  0EFF               	movlw	255
  2932  0004C4  0100               	movlb	0	; () banked
  2933  0004C6  6FE6               	movwf	(??_receiveData+1)& (0+255),b
  2934  0004C8  0100               	movlb	0	; () banked
  2935  0004CA  5197               	movf	_rx_array_inx& (0+255),w,b
  2936  0004CC  0100               	movlb	0	; () banked
  2937  0004CE  6FE7               	movwf	(??_receiveData+2)& (0+255),b
  2938  0004D0  6BE8               	clrf	(??_receiveData+3)& (0+255),b
  2939  0004D2  0100               	movlb	0	; () banked
  2940  0004D4  51E5               	movf	??_receiveData& (0+255),w,b
  2941  0004D6  0100               	movlb	0	; () banked
  2942  0004D8  27E7               	addwf	(??_receiveData+2)& (0+255),f,b
  2943  0004DA  0100               	movlb	0	; () banked
  2944  0004DC  51E6               	movf	(??_receiveData+1)& (0+255),w,b
  2945  0004DE  0100               	movlb	0	; () banked
  2946  0004E0  23E8               	addwfc	(??_receiveData+3)& (0+255),f,b
  2947  0004E2  0E00               	movlw	low _rx_buffer
  2948  0004E4  0100               	movlb	0	; () banked
  2949  0004E6  25E7               	addwf	(??_receiveData+2)& (0+255),w,b
  2950  0004E8  6ED9               	movwf	fsr2l,c
  2951  0004EA  0E02               	movlw	high _rx_buffer
  2952  0004EC  0100               	movlb	0	; () banked
  2953  0004EE  21E8               	addwfc	(??_receiveData+3)& (0+255),w,b
  2954  0004F0  6EDA               	movwf	fsr2h,c
  2955  0004F2  50DF               	movf	indf2,w,c
  2956  0004F4  0100               	movlb	0	; () banked
  2957  0004F6  6FED               	movwf	(receiveData@holder+2)& (0+255),b
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;FastTransfer.c: 164: unsigned char crcHolder = CRC8(holder, 3);
  2961  0004F8  0EEB               	movlw	low receiveData@holder
  2962  0004FA  0100               	movlb	0	; () banked
  2963  0004FC  6FD2               	movwf	CRC8@data& (0+255),b
  2964  0004FE  0E00               	movlw	high receiveData@holder
  2965  000500  0100               	movlb	0	; () banked
  2966  000502  6FD3               	movwf	(CRC8@data+1)& (0+255),b
  2967  000504  0E03               	movlw	3
  2968  000506  0100               	movlb	0	; () banked
  2969  000508  6FD4               	movwf	CRC8@len& (0+255),b
  2970  00050A  EC81  F00F         	call	_CRC8	;wreg free
  2971  00050E  0100               	movlb	0	; () banked
  2972  000510  6FF1               	movwf	receiveData@crcHolder& (0+255),b
  2973                           
  2974                           ; BSR set to: 0
  2975                           ;FastTransfer.c: 165: serial_write(0x06);
  2976  000512  D801               	call	u3848
  2977  000514  D00B               	goto	l4256
  2978  000516                     u3848:
  2979  000516  0005               	push	
  2980  000518  6EFA               	movwf	pclath,c
  2981  00051A  5038               	movf	_serial_write,w,c
  2982  00051C  6EFD               	movwf	tosl,c
  2983  00051E  5039               	movf	_serial_write+1,w,c
  2984  000520  6EFE               	movwf	tosh,c
  2985  000522  50F8               	movf	tblptru,w,c
  2986  000524  6EFF               	movwf	tosu,c
  2987  000526  50FA               	movf	pclath,w,c
  2988  000528  0E06               	movlw	6
  2989  00052A  0012               	return		;indir
  2990  00052C                     l4256:
  2991                           
  2992                           ;FastTransfer.c: 166: serial_write(0x85);
  2993  00052C  D801               	call	u3858
  2994  00052E  D00B               	goto	l4258
  2995  000530                     u3858:
  2996  000530  0005               	push	
  2997  000532  6EFA               	movwf	pclath,c
  2998  000534  5038               	movf	_serial_write,w,c
  2999  000536  6EFD               	movwf	tosl,c
  3000  000538  5039               	movf	_serial_write+1,w,c
  3001  00053A  6EFE               	movwf	tosh,c
  3002  00053C  50F8               	movf	tblptru,w,c
  3003  00053E  6EFF               	movwf	tosu,c
  3004  000540  50FA               	movf	pclath,w,c
  3005  000542  0E85               	movlw	133
  3006  000544  0012               	return		;indir
  3007  000546                     l4258:
  3008                           
  3009                           ;FastTransfer.c: 167: serial_write(returnAddress);
  3010  000546  D801               	call	u3868
  3011  000548  D00C               	goto	l4260
  3012  00054A                     u3868:
  3013  00054A  0005               	push	
  3014  00054C  6EFA               	movwf	pclath,c
  3015  00054E  5038               	movf	_serial_write,w,c
  3016  000550  6EFD               	movwf	tosl,c
  3017  000552  5039               	movf	_serial_write+1,w,c
  3018  000554  6EFE               	movwf	tosh,c
  3019  000556  50F8               	movf	tblptru,w,c
  3020  000558  6EFF               	movwf	tosu,c
  3021  00055A  50FA               	movf	pclath,w,c
  3022  00055C  0100               	movlb	0	; () banked
  3023  00055E  5195               	movf	_returnAddress& (0+255),w,b
  3024  000560  0012               	return		;indir
  3025  000562                     l4260:
  3026                           
  3027                           ;FastTransfer.c: 168: serial_write(moduleAddress);
  3028  000562  D801               	call	u3878
  3029  000564  D00B               	goto	l4262
  3030  000566                     u3878:
  3031  000566  0005               	push	
  3032  000568  6EFA               	movwf	pclath,c
  3033  00056A  5038               	movf	_serial_write,w,c
  3034  00056C  6EFD               	movwf	tosl,c
  3035  00056E  5039               	movf	_serial_write+1,w,c
  3036  000570  6EFE               	movwf	tosh,c
  3037  000572  50F8               	movf	tblptru,w,c
  3038  000574  6EFF               	movwf	tosu,c
  3039  000576  50FA               	movf	pclath,w,c
  3040  000578  503F               	movf	_moduleAddress,w,c
  3041  00057A  0012               	return		;indir
  3042  00057C                     l4262:
  3043                           
  3044                           ;FastTransfer.c: 169: serial_write(3);
  3045  00057C  D801               	call	u3888
  3046  00057E  D00B               	goto	l4264
  3047  000580                     u3888:
  3048  000580  0005               	push	
  3049  000582  6EFA               	movwf	pclath,c
  3050  000584  5038               	movf	_serial_write,w,c
  3051  000586  6EFD               	movwf	tosl,c
  3052  000588  5039               	movf	_serial_write+1,w,c
  3053  00058A  6EFE               	movwf	tosh,c
  3054  00058C  50F8               	movf	tblptru,w,c
  3055  00058E  6EFF               	movwf	tosu,c
  3056  000590  50FA               	movf	pclath,w,c
  3057  000592  0E03               	movlw	3
  3058  000594  0012               	return		;indir
  3059  000596                     l4264:
  3060                           
  3061                           ;FastTransfer.c: 170: serial_write(255);
  3062  000596  D801               	call	u3898
  3063  000598  D00B               	goto	l4266
  3064  00059A                     u3898:
  3065  00059A  0005               	push	
  3066  00059C  6EFA               	movwf	pclath,c
  3067  00059E  5038               	movf	_serial_write,w,c
  3068  0005A0  6EFD               	movwf	tosl,c
  3069  0005A2  5039               	movf	_serial_write+1,w,c
  3070  0005A4  6EFE               	movwf	tosh,c
  3071  0005A6  50F8               	movf	tblptru,w,c
  3072  0005A8  6EFF               	movwf	tosu,c
  3073  0005AA  50FA               	movf	pclath,w,c
  3074  0005AC  0EFF               	movlw	255
  3075  0005AE  0012               	return		;indir
  3076  0005B0                     l4266:
  3077                           
  3078                           ;FastTransfer.c: 171: serial_write(1);
  3079  0005B0  D801               	call	u3908
  3080  0005B2  D00B               	goto	l4268
  3081  0005B4                     u3908:
  3082  0005B4  0005               	push	
  3083  0005B6  6EFA               	movwf	pclath,c
  3084  0005B8  5038               	movf	_serial_write,w,c
  3085  0005BA  6EFD               	movwf	tosl,c
  3086  0005BC  5039               	movf	_serial_write+1,w,c
  3087  0005BE  6EFE               	movwf	tosh,c
  3088  0005C0  50F8               	movf	tblptru,w,c
  3089  0005C2  6EFF               	movwf	tosu,c
  3090  0005C4  50FA               	movf	pclath,w,c
  3091  0005C6  0E01               	movlw	1
  3092  0005C8  0012               	return		;indir
  3093  0005CA                     l4268:
  3094                           
  3095                           ;FastTransfer.c: 172: serial_write(rx_buffer[rx_array_inx - 1]);
  3096  0005CA  D801               	call	u3918
  3097  0005CC  D026               	goto	l4270
  3098  0005CE                     u3918:
  3099  0005CE  0005               	push	
  3100  0005D0  6EFA               	movwf	pclath,c
  3101  0005D2  5038               	movf	_serial_write,w,c
  3102  0005D4  6EFD               	movwf	tosl,c
  3103  0005D6  5039               	movf	_serial_write+1,w,c
  3104  0005D8  6EFE               	movwf	tosh,c
  3105  0005DA  50F8               	movf	tblptru,w,c
  3106  0005DC  6EFF               	movwf	tosu,c
  3107  0005DE  50FA               	movf	pclath,w,c
  3108  0005E0  0EFF               	movlw	255
  3109  0005E2  0100               	movlb	0	; () banked
  3110  0005E4  6FE5               	movwf	??_receiveData& (0+255),b
  3111  0005E6  0EFF               	movlw	255
  3112  0005E8  0100               	movlb	0	; () banked
  3113  0005EA  6FE6               	movwf	(??_receiveData+1)& (0+255),b
  3114  0005EC  0100               	movlb	0	; () banked
  3115  0005EE  5197               	movf	_rx_array_inx& (0+255),w,b
  3116  0005F0  0100               	movlb	0	; () banked
  3117  0005F2  6FE7               	movwf	(??_receiveData+2)& (0+255),b
  3118  0005F4  6BE8               	clrf	(??_receiveData+3)& (0+255),b
  3119  0005F6  0100               	movlb	0	; () banked
  3120  0005F8  51E5               	movf	??_receiveData& (0+255),w,b
  3121  0005FA  0100               	movlb	0	; () banked
  3122  0005FC  27E7               	addwf	(??_receiveData+2)& (0+255),f,b
  3123  0005FE  0100               	movlb	0	; () banked
  3124  000600  51E6               	movf	(??_receiveData+1)& (0+255),w,b
  3125  000602  0100               	movlb	0	; () banked
  3126  000604  23E8               	addwfc	(??_receiveData+3)& (0+255),f,b
  3127  000606  0E00               	movlw	low _rx_buffer
  3128  000608  0100               	movlb	0	; () banked
  3129  00060A  25E7               	addwf	(??_receiveData+2)& (0+255),w,b
  3130  00060C  6ED9               	movwf	fsr2l,c
  3131  00060E  0E02               	movlw	high _rx_buffer
  3132  000610  0100               	movlb	0	; () banked
  3133  000612  21E8               	addwfc	(??_receiveData+3)& (0+255),w,b
  3134  000614  6EDA               	movwf	fsr2h,c
  3135  000616  50DF               	movf	indf2,w,c
  3136  000618  0012               	return		;indir
  3137  00061A                     l4270:
  3138                           
  3139                           ;FastTransfer.c: 173: serial_write(crcHolder);
  3140  00061A  D801               	call	u3928
  3141  00061C  D00C               	goto	l4272
  3142  00061E                     u3928:
  3143  00061E  0005               	push	
  3144  000620  6EFA               	movwf	pclath,c
  3145  000622  5038               	movf	_serial_write,w,c
  3146  000624  6EFD               	movwf	tosl,c
  3147  000626  5039               	movf	_serial_write+1,w,c
  3148  000628  6EFE               	movwf	tosh,c
  3149  00062A  50F8               	movf	tblptru,w,c
  3150  00062C  6EFF               	movwf	tosu,c
  3151  00062E  50FA               	movf	pclath,w,c
  3152  000630  0100               	movlb	0	; () banked
  3153  000632  51F1               	movf	receiveData@crcHolder& (0+255),w,b
  3154  000634  0012               	return		;indir
  3155  000636                     l4272:
  3156                           
  3157                           ;FastTransfer.c: 174: }
  3158                           ;FastTransfer.c: 178: rx_len = 0;
  3159  000636  0E00               	movlw	0
  3160  000638  0100               	movlb	0	; () banked
  3161  00063A  6F98               	movwf	_rx_len& (0+255),b
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;FastTransfer.c: 179: rx_array_inx = 0;
  3165  00063C  0E00               	movlw	0
  3166  00063E  0100               	movlb	0	; () banked
  3167  000640  6F97               	movwf	_rx_array_inx& (0+255),b
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;FastTransfer.c: 180: return 1;
  3171  000642  0E01               	movlw	1
  3172                           
  3173                           ; BSR set to: 0
  3174  000644  0012               	return	
  3175  000646                     l4282:
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;FastTransfer.c: 182: crcErrorCounter++;
  3179  000646  4A32               	infsnz	_crcErrorCounter,f,c
  3180  000648  2A33               	incf	_crcErrorCounter+1,f,c
  3181                           
  3182                           ; BSR set to: 0
  3183                           ;FastTransfer.c: 184: if (AKNAKsend) {
  3184  00064A  0100               	movlb	0	; () banked
  3185  00064C  5192               	movf	_AKNAKsend& (0+255),w,b
  3186  00064E  B4D8               	btfsc	status,2,c
  3187  000650  D0C2               	goto	l4312
  3188                           
  3189                           ; BSR set to: 0
  3190                           ;FastTransfer.c: 185: unsigned char holder[3];
  3191                           ;FastTransfer.c: 186: holder[0] = 255;
  3192  000652  0100               	movlb	0	; () banked
  3193  000654  69EE               	setf	receiveData@holder_1410& (0+255),b
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;FastTransfer.c: 187: holder[1] = 2;
  3197  000656  0E02               	movlw	2
  3198  000658  0100               	movlb	0	; () banked
  3199  00065A  6FEF               	movwf	(receiveData@holder_1410+1)& (0+255),b
  3200                           
  3201                           ; BSR set to: 0
  3202                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  3203  00065C  0EFF               	movlw	255
  3204  00065E  0100               	movlb	0	; () banked
  3205  000660  6FE5               	movwf	??_receiveData& (0+255),b
  3206  000662  0EFF               	movlw	255
  3207  000664  0100               	movlb	0	; () banked
  3208  000666  6FE6               	movwf	(??_receiveData+1)& (0+255),b
  3209  000668  0100               	movlb	0	; () banked
  3210  00066A  5197               	movf	_rx_array_inx& (0+255),w,b
  3211  00066C  0100               	movlb	0	; () banked
  3212  00066E  6FE7               	movwf	(??_receiveData+2)& (0+255),b
  3213  000670  6BE8               	clrf	(??_receiveData+3)& (0+255),b
  3214  000672  0100               	movlb	0	; () banked
  3215  000674  51E5               	movf	??_receiveData& (0+255),w,b
  3216  000676  0100               	movlb	0	; () banked
  3217  000678  27E7               	addwf	(??_receiveData+2)& (0+255),f,b
  3218  00067A  0100               	movlb	0	; () banked
  3219  00067C  51E6               	movf	(??_receiveData+1)& (0+255),w,b
  3220  00067E  0100               	movlb	0	; () banked
  3221  000680  23E8               	addwfc	(??_receiveData+3)& (0+255),f,b
  3222  000682  0E00               	movlw	low _rx_buffer
  3223  000684  0100               	movlb	0	; () banked
  3224  000686  25E7               	addwf	(??_receiveData+2)& (0+255),w,b
  3225  000688  6ED9               	movwf	fsr2l,c
  3226  00068A  0E02               	movlw	high _rx_buffer
  3227  00068C  0100               	movlb	0	; () banked
  3228  00068E  21E8               	addwfc	(??_receiveData+3)& (0+255),w,b
  3229  000690  6EDA               	movwf	fsr2h,c
  3230  000692  50DF               	movf	indf2,w,c
  3231  000694  0100               	movlb	0	; () banked
  3232  000696  6FF0               	movwf	(receiveData@holder_1410+2)& (0+255),b
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;FastTransfer.c: 189: unsigned char crcHolder = CRC8(holder, 3);
  3236  000698  0EEE               	movlw	low receiveData@holder_1410
  3237  00069A  0100               	movlb	0	; () banked
  3238  00069C  6FD2               	movwf	CRC8@data& (0+255),b
  3239  00069E  0E00               	movlw	high receiveData@holder_1410
  3240  0006A0  0100               	movlb	0	; () banked
  3241  0006A2  6FD3               	movwf	(CRC8@data+1)& (0+255),b
  3242  0006A4  0E03               	movlw	3
  3243  0006A6  0100               	movlb	0	; () banked
  3244  0006A8  6FD4               	movwf	CRC8@len& (0+255),b
  3245  0006AA  EC81  F00F         	call	_CRC8
  3246  0006AE  0100               	movlb	0	; () banked
  3247  0006B0  6FF2               	movwf	receiveData@crcHolder_1411& (0+255),b
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;FastTransfer.c: 190: serial_write(0x06);
  3251  0006B2  D801               	call	u3948
  3252  0006B4  D00B               	goto	l4296
  3253  0006B6                     u3948:
  3254  0006B6  0005               	push	
  3255  0006B8  6EFA               	movwf	pclath,c
  3256  0006BA  5038               	movf	_serial_write,w,c
  3257  0006BC  6EFD               	movwf	tosl,c
  3258  0006BE  5039               	movf	_serial_write+1,w,c
  3259  0006C0  6EFE               	movwf	tosh,c
  3260  0006C2  50F8               	movf	tblptru,w,c
  3261  0006C4  6EFF               	movwf	tosu,c
  3262  0006C6  50FA               	movf	pclath,w,c
  3263  0006C8  0E06               	movlw	6
  3264  0006CA  0012               	return		;indir
  3265  0006CC                     l4296:
  3266                           
  3267                           ;FastTransfer.c: 191: serial_write(0x85);
  3268  0006CC  D801               	call	u3958
  3269  0006CE  D00B               	goto	l4298
  3270  0006D0                     u3958:
  3271  0006D0  0005               	push	
  3272  0006D2  6EFA               	movwf	pclath,c
  3273  0006D4  5038               	movf	_serial_write,w,c
  3274  0006D6  6EFD               	movwf	tosl,c
  3275  0006D8  5039               	movf	_serial_write+1,w,c
  3276  0006DA  6EFE               	movwf	tosh,c
  3277  0006DC  50F8               	movf	tblptru,w,c
  3278  0006DE  6EFF               	movwf	tosu,c
  3279  0006E0  50FA               	movf	pclath,w,c
  3280  0006E2  0E85               	movlw	133
  3281  0006E4  0012               	return		;indir
  3282  0006E6                     l4298:
  3283                           
  3284                           ;FastTransfer.c: 192: serial_write(returnAddress);
  3285  0006E6  D801               	call	u3968
  3286  0006E8  D00C               	goto	l4300
  3287  0006EA                     u3968:
  3288  0006EA  0005               	push	
  3289  0006EC  6EFA               	movwf	pclath,c
  3290  0006EE  5038               	movf	_serial_write,w,c
  3291  0006F0  6EFD               	movwf	tosl,c
  3292  0006F2  5039               	movf	_serial_write+1,w,c
  3293  0006F4  6EFE               	movwf	tosh,c
  3294  0006F6  50F8               	movf	tblptru,w,c
  3295  0006F8  6EFF               	movwf	tosu,c
  3296  0006FA  50FA               	movf	pclath,w,c
  3297  0006FC  0100               	movlb	0	; () banked
  3298  0006FE  5195               	movf	_returnAddress& (0+255),w,b
  3299  000700  0012               	return		;indir
  3300  000702                     l4300:
  3301                           
  3302                           ;FastTransfer.c: 193: serial_write(moduleAddress);
  3303  000702  D801               	call	u3978
  3304  000704  D00B               	goto	l4302
  3305  000706                     u3978:
  3306  000706  0005               	push	
  3307  000708  6EFA               	movwf	pclath,c
  3308  00070A  5038               	movf	_serial_write,w,c
  3309  00070C  6EFD               	movwf	tosl,c
  3310  00070E  5039               	movf	_serial_write+1,w,c
  3311  000710  6EFE               	movwf	tosh,c
  3312  000712  50F8               	movf	tblptru,w,c
  3313  000714  6EFF               	movwf	tosu,c
  3314  000716  50FA               	movf	pclath,w,c
  3315  000718  503F               	movf	_moduleAddress,w,c
  3316  00071A  0012               	return		;indir
  3317  00071C                     l4302:
  3318                           
  3319                           ;FastTransfer.c: 194: serial_write(3);
  3320  00071C  D801               	call	u3988
  3321  00071E  D00B               	goto	l4304
  3322  000720                     u3988:
  3323  000720  0005               	push	
  3324  000722  6EFA               	movwf	pclath,c
  3325  000724  5038               	movf	_serial_write,w,c
  3326  000726  6EFD               	movwf	tosl,c
  3327  000728  5039               	movf	_serial_write+1,w,c
  3328  00072A  6EFE               	movwf	tosh,c
  3329  00072C  50F8               	movf	tblptru,w,c
  3330  00072E  6EFF               	movwf	tosu,c
  3331  000730  50FA               	movf	pclath,w,c
  3332  000732  0E03               	movlw	3
  3333  000734  0012               	return		;indir
  3334  000736                     l4304:
  3335                           
  3336                           ;FastTransfer.c: 195: serial_write(255);
  3337  000736  D801               	call	u3998
  3338  000738  D00B               	goto	l4306
  3339  00073A                     u3998:
  3340  00073A  0005               	push	
  3341  00073C  6EFA               	movwf	pclath,c
  3342  00073E  5038               	movf	_serial_write,w,c
  3343  000740  6EFD               	movwf	tosl,c
  3344  000742  5039               	movf	_serial_write+1,w,c
  3345  000744  6EFE               	movwf	tosh,c
  3346  000746  50F8               	movf	tblptru,w,c
  3347  000748  6EFF               	movwf	tosu,c
  3348  00074A  50FA               	movf	pclath,w,c
  3349  00074C  0EFF               	movlw	255
  3350  00074E  0012               	return		;indir
  3351  000750                     l4306:
  3352                           
  3353                           ;FastTransfer.c: 196: serial_write(2);
  3354  000750  D801               	call	u4008
  3355  000752  D00B               	goto	l4308
  3356  000754                     u4008:
  3357  000754  0005               	push	
  3358  000756  6EFA               	movwf	pclath,c
  3359  000758  5038               	movf	_serial_write,w,c
  3360  00075A  6EFD               	movwf	tosl,c
  3361  00075C  5039               	movf	_serial_write+1,w,c
  3362  00075E  6EFE               	movwf	tosh,c
  3363  000760  50F8               	movf	tblptru,w,c
  3364  000762  6EFF               	movwf	tosu,c
  3365  000764  50FA               	movf	pclath,w,c
  3366  000766  0E02               	movlw	2
  3367  000768  0012               	return		;indir
  3368  00076A                     l4308:
  3369                           
  3370                           ;FastTransfer.c: 197: serial_write(rx_buffer[rx_array_inx - 1]);
  3371  00076A  D801               	call	u4018
  3372  00076C  D026               	goto	l4310
  3373  00076E                     u4018:
  3374  00076E  0005               	push	
  3375  000770  6EFA               	movwf	pclath,c
  3376  000772  5038               	movf	_serial_write,w,c
  3377  000774  6EFD               	movwf	tosl,c
  3378  000776  5039               	movf	_serial_write+1,w,c
  3379  000778  6EFE               	movwf	tosh,c
  3380  00077A  50F8               	movf	tblptru,w,c
  3381  00077C  6EFF               	movwf	tosu,c
  3382  00077E  50FA               	movf	pclath,w,c
  3383  000780  0EFF               	movlw	255
  3384  000782  0100               	movlb	0	; () banked
  3385  000784  6FE5               	movwf	??_receiveData& (0+255),b
  3386  000786  0EFF               	movlw	255
  3387  000788  0100               	movlb	0	; () banked
  3388  00078A  6FE6               	movwf	(??_receiveData+1)& (0+255),b
  3389  00078C  0100               	movlb	0	; () banked
  3390  00078E  5197               	movf	_rx_array_inx& (0+255),w,b
  3391  000790  0100               	movlb	0	; () banked
  3392  000792  6FE7               	movwf	(??_receiveData+2)& (0+255),b
  3393  000794  6BE8               	clrf	(??_receiveData+3)& (0+255),b
  3394  000796  0100               	movlb	0	; () banked
  3395  000798  51E5               	movf	??_receiveData& (0+255),w,b
  3396  00079A  0100               	movlb	0	; () banked
  3397  00079C  27E7               	addwf	(??_receiveData+2)& (0+255),f,b
  3398  00079E  0100               	movlb	0	; () banked
  3399  0007A0  51E6               	movf	(??_receiveData+1)& (0+255),w,b
  3400  0007A2  0100               	movlb	0	; () banked
  3401  0007A4  23E8               	addwfc	(??_receiveData+3)& (0+255),f,b
  3402  0007A6  0E00               	movlw	low _rx_buffer
  3403  0007A8  0100               	movlb	0	; () banked
  3404  0007AA  25E7               	addwf	(??_receiveData+2)& (0+255),w,b
  3405  0007AC  6ED9               	movwf	fsr2l,c
  3406  0007AE  0E02               	movlw	high _rx_buffer
  3407  0007B0  0100               	movlb	0	; () banked
  3408  0007B2  21E8               	addwfc	(??_receiveData+3)& (0+255),w,b
  3409  0007B4  6EDA               	movwf	fsr2h,c
  3410  0007B6  50DF               	movf	indf2,w,c
  3411  0007B8  0012               	return		;indir
  3412  0007BA                     l4310:
  3413                           
  3414                           ;FastTransfer.c: 198: serial_write(crcHolder);
  3415  0007BA  D801               	call	u4028
  3416  0007BC  D00C               	goto	l4312
  3417  0007BE                     u4028:
  3418  0007BE  0005               	push	
  3419  0007C0  6EFA               	movwf	pclath,c
  3420  0007C2  5038               	movf	_serial_write,w,c
  3421  0007C4  6EFD               	movwf	tosl,c
  3422  0007C6  5039               	movf	_serial_write+1,w,c
  3423  0007C8  6EFE               	movwf	tosh,c
  3424  0007CA  50F8               	movf	tblptru,w,c
  3425  0007CC  6EFF               	movwf	tosu,c
  3426  0007CE  50FA               	movf	pclath,w,c
  3427  0007D0  0100               	movlb	0	; () banked
  3428  0007D2  51F2               	movf	receiveData@crcHolder_1411& (0+255),w,b
  3429  0007D4  0012               	return		;indir
  3430  0007D6                     l4312:
  3431                           
  3432                           ;FastTransfer.c: 199: }
  3433                           ;FastTransfer.c: 202: rx_len = 0;
  3434  0007D6  0E00               	movlw	0
  3435  0007D8  0100               	movlb	0	; () banked
  3436  0007DA  6F98               	movwf	_rx_len& (0+255),b
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3440  0007DC  0E00               	movlw	0
  3441  0007DE  0100               	movlb	0	; () banked
  3442  0007E0  6F97               	movwf	_rx_array_inx& (0+255),b
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;FastTransfer.c: 204: return 0;
  3446  0007E2  0E00               	movlw	0
  3447                           
  3448                           ; BSR set to: 0
  3449  0007E4  0012               	return	
  3450  0007E6                     l4320:
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;FastTransfer.c: 205: }
  3454                           ;FastTransfer.c: 206: }
  3455                           ;FastTransfer.c: 207: }
  3456                           ;FastTransfer.c: 210: return 0;
  3457  0007E6  0E00               	movlw	0
  3458  0007E8  0012               	return	
  3459  0007EA                     __end_of_receiveData:
  3460                           	opt stack 0
  3461                           tosu	equ	0xFFF
  3462                           tosh	equ	0xFFE
  3463                           tosl	equ	0xFFD
  3464                           pclath	equ	0xFFA
  3465                           tblptru	equ	0xFF8
  3466                           tblptrh	equ	0xFF7
  3467                           tblptrl	equ	0xFF6
  3468                           tablat	equ	0xFF5
  3469                           prodh	equ	0xFF4
  3470                           prodl	equ	0xFF3
  3471                           intcon	equ	0xFF2
  3472                           postinc0	equ	0xFEE
  3473                           wreg	equ	0xFE8
  3474                           indf2	equ	0xFDF
  3475                           postinc2	equ	0xFDE
  3476                           postdec2	equ	0xFDD
  3477                           plusw2	equ	0xFDB
  3478                           fsr2h	equ	0xFDA
  3479                           fsr2l	equ	0xFD9
  3480                           status	equ	0xFD8
  3481                           
  3482 ;; *************** function _Send_put *****************
  3483 ;; Defined at:
  3484 ;;		line 132 in file "UART.c"
  3485 ;; Parameters:    Size  Location     Type
  3486 ;;  _data           1    wreg     unsigned char 
  3487 ;; Auto vars:     Size  Location     Type
  3488 ;;  _data           1   11[BANK0 ] unsigned char 
  3489 ;; Return value:  Size  Location     Type
  3490 ;;                  1    wreg      void 
  3491 ;; Registers used:
  3492 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3493 ;; Tracked objects:
  3494 ;;		On entry : 0/0
  3495 ;;		On exit  : 0/0
  3496 ;;		Unchanged: 0/0
  3497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3498 ;;      Params:         0       0       0       0       0       0       0
  3499 ;;      Locals:         0       1       0       0       0       0       0
  3500 ;;      Temps:          0       0       0       0       0       0       0
  3501 ;;      Totals:         0       1       0       0       0       0       0
  3502 ;;Total ram usage:        1 bytes
  3503 ;; Hardware stack levels used:    1
  3504 ;; Hardware stack levels required when called:    8
  3505 ;; This function calls:
  3506 ;;		_UART_buff_get
  3507 ;;		_UART_buff_put
  3508 ;; This function is called by:
  3509 ;;		_SYSTEM_Initialize
  3510 ;;		_putch
  3511 ;;		_sendData
  3512 ;;		_receiveData
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           	psect	text11
  3517  002234                     __ptext11:
  3518                           	opt stack 0
  3519  002234                     _Send_put:
  3520                           	opt stack 19
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;incstack = 0
  3524                           ;Send_put@_data stored from wreg
  3525  002234  0100               	movlb	0	; () banked
  3526  002236  6FDD               	movwf	Send_put@_data& (0+255),b
  3527                           
  3528                           ;UART.c: 133: UART_buff_put(&output_buffer, _data);
  3529  002238  0E00               	movlw	low _output_buffer
  3530  00223A  0100               	movlb	0	; () banked
  3531  00223C  6FD8               	movwf	UART_buff_put@_this& (0+255),b
  3532  00223E  0E04               	movlw	high _output_buffer
  3533  002240  0100               	movlb	0	; () banked
  3534  002242  6FD9               	movwf	(UART_buff_put@_this+1)& (0+255),b
  3535  002244  C0DD  F0DA         	movff	Send_put@_data,UART_buff_put@c
  3536  002248  EC2B  F00A         	call	_UART_buff_put
  3537                           
  3538                           ;UART.c: 134: if (Transmit_stall == 1) {
  3539  00224C  0442               	decf	_Transmit_stall,w,c
  3540  00224E  A4D8               	btfss	status,2,c
  3541  002250  0012               	return	
  3542                           
  3543                           ;UART.c: 135: Transmit_stall = 0;
  3544  002252  0E00               	movlw	0
  3545  002254  6E42               	movwf	_Transmit_stall,c
  3546                           
  3547                           ;UART.c: 136: TXREG1 = UART_buff_get(&output_buffer);
  3548  002256  0E00               	movlw	low _output_buffer
  3549  002258  0100               	movlb	0	; () banked
  3550  00225A  6FD8               	movwf	UART_buff_get@_this& (0+255),b
  3551  00225C  0E04               	movlw	high _output_buffer
  3552  00225E  0100               	movlb	0	; () banked
  3553  002260  6FD9               	movwf	(UART_buff_get@_this+1)& (0+255),b
  3554  002262  ECE5  F00D         	call	_UART_buff_get	;wreg free
  3555  002266  6EAD               	movwf	4013,c	;volatile
  3556                           
  3557                           ;UART.c: 137: PIE1bits.TX1IE = 1;
  3558  002268  889D               	bsf	3997,4,c	;volatile
  3559  00226A  0012               	return	
  3560  00226C                     __end_of_Send_put:
  3561                           	opt stack 0
  3562                           tosu	equ	0xFFF
  3563                           tosh	equ	0xFFE
  3564                           tosl	equ	0xFFD
  3565                           pclath	equ	0xFFA
  3566                           tblptru	equ	0xFF8
  3567                           tblptrh	equ	0xFF7
  3568                           tblptrl	equ	0xFF6
  3569                           tablat	equ	0xFF5
  3570                           prodh	equ	0xFF4
  3571                           prodl	equ	0xFF3
  3572                           intcon	equ	0xFF2
  3573                           postinc0	equ	0xFEE
  3574                           wreg	equ	0xFE8
  3575                           indf2	equ	0xFDF
  3576                           postinc2	equ	0xFDE
  3577                           postdec2	equ	0xFDD
  3578                           plusw2	equ	0xFDB
  3579                           fsr2h	equ	0xFDA
  3580                           fsr2l	equ	0xFD9
  3581                           status	equ	0xFD8
  3582                           
  3583 ;; *************** function _UART_buff_put *****************
  3584 ;; Defined at:
  3585 ;;		line 70 in file "UART.c"
  3586 ;; Parameters:    Size  Location     Type
  3587 ;;  _this           2    6[BANK0 ] PTR struct UART_ring_buf
  3588 ;;		 -> output_buffer(206), input_buffer(206), 
  3589 ;;  c               1    8[BANK0 ] const unsigned char 
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;		None
  3592 ;; Return value:  Size  Location     Type
  3593 ;;                  1    wreg      void 
  3594 ;; Registers used:
  3595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3596 ;; Tracked objects:
  3597 ;;		On entry : 0/0
  3598 ;;		On exit  : 0/0
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3601 ;;      Params:         0       3       0       0       0       0       0
  3602 ;;      Locals:         0       0       0       0       0       0       0
  3603 ;;      Temps:          0       2       0       0       0       0       0
  3604 ;;      Totals:         0       5       0       0       0       0       0
  3605 ;;Total ram usage:        5 bytes
  3606 ;; Hardware stack levels used:    1
  3607 ;; Hardware stack levels required when called:    7
  3608 ;; This function calls:
  3609 ;;		_UART_buff_modulo_inc
  3610 ;; This function is called by:
  3611 ;;		_Send_put
  3612 ;; This function uses a non-reentrant model
  3613 ;;
  3614                           
  3615                           	psect	text12
  3616  001456                     __ptext12:
  3617                           	opt stack 0
  3618  001456                     _UART_buff_put:
  3619                           	opt stack 19
  3620                           
  3621                           ;UART.c: 71: if (_this->count < 200) {
  3622                           
  3623                           ;incstack = 0
  3624  001456  0100               	movlb	0	; () banked
  3625  001458  EE20 F0CC          	lfsr	2,204
  3626  00145C  51D8               	movf	UART_buff_put@_this& (0+255),w,b
  3627  00145E  26D9               	addwf	fsr2l,f,c
  3628  001460  51D9               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3629  001462  22DA               	addwfc	fsr2h,f,c
  3630  001464  0E01               	movlw	1
  3631  001466  BEDB               	btfsc	plusw2,7,c
  3632  001468  D007               	goto	l3814
  3633  00146A  0E01               	movlw	1
  3634  00146C  50DB               	movf	plusw2,w,c
  3635  00146E  E145               	bnz	l3820
  3636  001470  0EC8               	movlw	200
  3637  001472  5CDE               	subwf	postinc2,w,c
  3638  001474  B0D8               	btfsc	status,0,c
  3639  001476  D041               	goto	l3820
  3640  001478                     l3814:
  3641                           
  3642                           ; BSR set to: 0
  3643                           ;UART.c: 72: _this->buf[_this->head] = c;
  3644  001478  0100               	movlb	0	; () banked
  3645  00147A  EE20 F0C8          	lfsr	2,200
  3646  00147E  51D8               	movf	UART_buff_put@_this& (0+255),w,b
  3647  001480  26D9               	addwf	fsr2l,f,c
  3648  001482  51D9               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3649  001484  22DA               	addwfc	fsr2h,f,c
  3650  001486  CFDE F0DB          	movff	postinc2,??_UART_buff_put
  3651  00148A  CFDD F0DC          	movff	postdec2,??_UART_buff_put+1
  3652  00148E  0100               	movlb	0	; () banked
  3653  001490  51DB               	movf	??_UART_buff_put& (0+255),w,b
  3654  001492  0100               	movlb	0	; () banked
  3655  001494  25D8               	addwf	UART_buff_put@_this& (0+255),w,b
  3656  001496  6ED9               	movwf	fsr2l,c
  3657  001498  0100               	movlb	0	; () banked
  3658  00149A  51DC               	movf	(??_UART_buff_put+1)& (0+255),w,b
  3659  00149C  0100               	movlb	0	; () banked
  3660  00149E  21D9               	addwfc	(UART_buff_put@_this+1)& (0+255),w,b
  3661  0014A0  6EDA               	movwf	fsr2h,c
  3662  0014A2  C0DA  FFDF         	movff	UART_buff_put@c,indf2
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;UART.c: 73: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3666  0014A6  0100               	movlb	0	; () banked
  3667  0014A8  EE20 F0C8          	lfsr	2,200
  3668  0014AC  51D8               	movf	UART_buff_put@_this& (0+255),w,b
  3669  0014AE  26D9               	addwf	fsr2l,f,c
  3670  0014B0  51D9               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3671  0014B2  22DA               	addwfc	fsr2h,f,c
  3672  0014B4  CFDE F0D2          	movff	postinc2,UART_buff_modulo_inc@value
  3673  0014B8  CFDD F0D3          	movff	postdec2,UART_buff_modulo_inc@value+1
  3674  0014BC  0E00               	movlw	0
  3675  0014BE  0100               	movlb	0	; () banked
  3676  0014C0  6FD5               	movwf	(UART_buff_modulo_inc@modulus+1)& (0+255),b
  3677  0014C2  0EC8               	movlw	200
  3678  0014C4  6FD4               	movwf	UART_buff_modulo_inc@modulus& (0+255),b
  3679  0014C6  ECFC  F010         	call	_UART_buff_modulo_inc	;wreg free
  3680  0014CA  0100               	movlb	0	; () banked
  3681  0014CC  EE20 F0C8          	lfsr	2,200
  3682  0014D0  51D8               	movf	UART_buff_put@_this& (0+255),w,b
  3683  0014D2  26D9               	addwf	fsr2l,f,c
  3684  0014D4  51D9               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3685  0014D6  22DA               	addwfc	fsr2h,f,c
  3686  0014D8  0100               	movlb	0	; () banked
  3687  0014DA  C0D2  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3688  0014DE  0100               	movlb	0	; () banked
  3689  0014E0  C0D3  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;UART.c: 74: ++_this->count;
  3693  0014E4  0100               	movlb	0	; () banked
  3694  0014E6  EE20 F0CC          	lfsr	2,204
  3695  0014EA  51D8               	movf	UART_buff_put@_this& (0+255),w,b
  3696  0014EC  26D9               	addwf	fsr2l,f,c
  3697  0014EE  51D9               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3698  0014F0  22DA               	addwfc	fsr2h,f,c
  3699  0014F2  2ADE               	incf	postinc2,f,c
  3700  0014F4  0E00               	movlw	0
  3701  0014F6  22DD               	addwfc	postdec2,f,c
  3702                           
  3703                           ;UART.c: 75: } else {
  3704  0014F8  0012               	return	
  3705  0014FA                     l3820:
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;UART.c: 76: _this->buf[_this->head] = c;
  3709  0014FA  0100               	movlb	0	; () banked
  3710  0014FC  EE20 F0C8          	lfsr	2,200
  3711  001500  51D8               	movf	UART_buff_put@_this& (0+255),w,b
  3712  001502  26D9               	addwf	fsr2l,f,c
  3713  001504  51D9               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3714  001506  22DA               	addwfc	fsr2h,f,c
  3715  001508  CFDE F0DB          	movff	postinc2,??_UART_buff_put
  3716  00150C  CFDD F0DC          	movff	postdec2,??_UART_buff_put+1
  3717  001510  0100               	movlb	0	; () banked
  3718  001512  51DB               	movf	??_UART_buff_put& (0+255),w,b
  3719  001514  0100               	movlb	0	; () banked
  3720  001516  25D8               	addwf	UART_buff_put@_this& (0+255),w,b
  3721  001518  6ED9               	movwf	fsr2l,c
  3722  00151A  0100               	movlb	0	; () banked
  3723  00151C  51DC               	movf	(??_UART_buff_put+1)& (0+255),w,b
  3724  00151E  0100               	movlb	0	; () banked
  3725  001520  21D9               	addwfc	(UART_buff_put@_this+1)& (0+255),w,b
  3726  001522  6EDA               	movwf	fsr2h,c
  3727  001524  C0DA  FFDF         	movff	UART_buff_put@c,indf2
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;UART.c: 77: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3731  001528  0100               	movlb	0	; () banked
  3732  00152A  EE20 F0C8          	lfsr	2,200
  3733  00152E  51D8               	movf	UART_buff_put@_this& (0+255),w,b
  3734  001530  26D9               	addwf	fsr2l,f,c
  3735  001532  51D9               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3736  001534  22DA               	addwfc	fsr2h,f,c
  3737  001536  CFDE F0D2          	movff	postinc2,UART_buff_modulo_inc@value
  3738  00153A  CFDD F0D3          	movff	postdec2,UART_buff_modulo_inc@value+1
  3739  00153E  0E00               	movlw	0
  3740  001540  0100               	movlb	0	; () banked
  3741  001542  6FD5               	movwf	(UART_buff_modulo_inc@modulus+1)& (0+255),b
  3742  001544  0EC8               	movlw	200
  3743  001546  6FD4               	movwf	UART_buff_modulo_inc@modulus& (0+255),b
  3744  001548  ECFC  F010         	call	_UART_buff_modulo_inc	;wreg free
  3745  00154C  0100               	movlb	0	; () banked
  3746  00154E  EE20 F0C8          	lfsr	2,200
  3747  001552  51D8               	movf	UART_buff_put@_this& (0+255),w,b
  3748  001554  26D9               	addwf	fsr2l,f,c
  3749  001556  51D9               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3750  001558  22DA               	addwfc	fsr2h,f,c
  3751  00155A  0100               	movlb	0	; () banked
  3752  00155C  C0D2  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3753  001560  0100               	movlb	0	; () banked
  3754  001562  C0D3  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;UART.c: 78: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3758  001566  0100               	movlb	0	; () banked
  3759  001568  EE20 F0CA          	lfsr	2,202
  3760  00156C  51D8               	movf	UART_buff_put@_this& (0+255),w,b
  3761  00156E  26D9               	addwf	fsr2l,f,c
  3762  001570  51D9               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3763  001572  22DA               	addwfc	fsr2h,f,c
  3764  001574  CFDE F0D2          	movff	postinc2,UART_buff_modulo_inc@value
  3765  001578  CFDD F0D3          	movff	postdec2,UART_buff_modulo_inc@value+1
  3766  00157C  0E00               	movlw	0
  3767  00157E  0100               	movlb	0	; () banked
  3768  001580  6FD5               	movwf	(UART_buff_modulo_inc@modulus+1)& (0+255),b
  3769  001582  0EC8               	movlw	200
  3770  001584  6FD4               	movwf	UART_buff_modulo_inc@modulus& (0+255),b
  3771  001586  ECFC  F010         	call	_UART_buff_modulo_inc	;wreg free
  3772  00158A  0100               	movlb	0	; () banked
  3773  00158C  EE20 F0CA          	lfsr	2,202
  3774  001590  51D8               	movf	UART_buff_put@_this& (0+255),w,b
  3775  001592  26D9               	addwf	fsr2l,f,c
  3776  001594  51D9               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3777  001596  22DA               	addwfc	fsr2h,f,c
  3778  001598  0100               	movlb	0	; () banked
  3779  00159A  C0D2  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3780  00159E  0100               	movlb	0	; () banked
  3781  0015A0  C0D3  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3782  0015A4  0012               	return	
  3783  0015A6                     __end_of_UART_buff_put:
  3784                           	opt stack 0
  3785                           tosu	equ	0xFFF
  3786                           tosh	equ	0xFFE
  3787                           tosl	equ	0xFFD
  3788                           pclath	equ	0xFFA
  3789                           tblptru	equ	0xFF8
  3790                           tblptrh	equ	0xFF7
  3791                           tblptrl	equ	0xFF6
  3792                           tablat	equ	0xFF5
  3793                           prodh	equ	0xFF4
  3794                           prodl	equ	0xFF3
  3795                           intcon	equ	0xFF2
  3796                           postinc0	equ	0xFEE
  3797                           wreg	equ	0xFE8
  3798                           indf2	equ	0xFDF
  3799                           postinc2	equ	0xFDE
  3800                           postdec2	equ	0xFDD
  3801                           plusw2	equ	0xFDB
  3802                           fsr2h	equ	0xFDA
  3803                           fsr2l	equ	0xFD9
  3804                           status	equ	0xFD8
  3805                           
  3806 ;; *************** function _Receive_peek *****************
  3807 ;; Defined at:
  3808 ;;		line 120 in file "UART.c"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;		None
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;		None
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  1    wreg      unsigned char 
  3815 ;; Registers used:
  3816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3822 ;;      Params:         0       0       0       0       0       0       0
  3823 ;;      Locals:         0       0       0       0       0       0       0
  3824 ;;      Temps:          0       0       0       0       0       0       0
  3825 ;;      Totals:         0       0       0       0       0       0       0
  3826 ;;Total ram usage:        0 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:    7
  3829 ;; This function calls:
  3830 ;;		_UART_buff_peek
  3831 ;; This function is called by:
  3832 ;;		_SYSTEM_Initialize
  3833 ;;		_receiveData
  3834 ;; This function uses a non-reentrant model
  3835 ;;
  3836                           
  3837                           	psect	text13
  3838  0024AA                     __ptext13:
  3839                           	opt stack 0
  3840  0024AA                     _Receive_peek:
  3841                           	opt stack 21
  3842                           
  3843                           ;UART.c: 121: return UART_buff_peek(&input_buffer);
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;incstack = 0
  3847  0024AA  0E00               	movlw	low _input_buffer
  3848  0024AC  0100               	movlb	0	; () banked
  3849  0024AE  6FD2               	movwf	UART_buff_peek@_this& (0+255),b
  3850  0024B0  0E03               	movlw	high _input_buffer
  3851  0024B2  0100               	movlb	0	; () banked
  3852  0024B4  6FD3               	movwf	(UART_buff_peek@_this+1)& (0+255),b
  3853  0024B6  EC9A  F011         	call	_UART_buff_peek	;wreg free
  3854  0024BA  0012               	return	
  3855  0024BC                     __end_of_Receive_peek:
  3856                           	opt stack 0
  3857                           tosu	equ	0xFFF
  3858                           tosh	equ	0xFFE
  3859                           tosl	equ	0xFFD
  3860                           pclath	equ	0xFFA
  3861                           tblptru	equ	0xFF8
  3862                           tblptrh	equ	0xFF7
  3863                           tblptrl	equ	0xFF6
  3864                           tablat	equ	0xFF5
  3865                           prodh	equ	0xFF4
  3866                           prodl	equ	0xFF3
  3867                           intcon	equ	0xFF2
  3868                           postinc0	equ	0xFEE
  3869                           wreg	equ	0xFE8
  3870                           indf2	equ	0xFDF
  3871                           postinc2	equ	0xFDE
  3872                           postdec2	equ	0xFDD
  3873                           plusw2	equ	0xFDB
  3874                           fsr2h	equ	0xFDA
  3875                           fsr2l	equ	0xFD9
  3876                           status	equ	0xFD8
  3877                           
  3878 ;; *************** function _UART_buff_peek *****************
  3879 ;; Defined at:
  3880 ;;		line 116 in file "UART.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;  _this           2    0[BANK0 ] PTR struct UART_ring_buf
  3883 ;;		 -> input_buffer(206), 
  3884 ;; Auto vars:     Size  Location     Type
  3885 ;;		None
  3886 ;; Return value:  Size  Location     Type
  3887 ;;                  1    wreg      unsigned char 
  3888 ;; Registers used:
  3889 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3890 ;; Tracked objects:
  3891 ;;		On entry : 0/0
  3892 ;;		On exit  : 0/0
  3893 ;;		Unchanged: 0/0
  3894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3895 ;;      Params:         0       2       0       0       0       0       0
  3896 ;;      Locals:         0       0       0       0       0       0       0
  3897 ;;      Temps:          0       2       0       0       0       0       0
  3898 ;;      Totals:         0       4       0       0       0       0       0
  3899 ;;Total ram usage:        4 bytes
  3900 ;; Hardware stack levels used:    1
  3901 ;; Hardware stack levels required when called:    6
  3902 ;; This function calls:
  3903 ;;		Nothing
  3904 ;; This function is called by:
  3905 ;;		_Receive_peek
  3906 ;; This function uses a non-reentrant model
  3907 ;;
  3908                           
  3909                           	psect	text14
  3910  002334                     __ptext14:
  3911                           	opt stack 0
  3912  002334                     _UART_buff_peek:
  3913                           	opt stack 21
  3914                           
  3915                           ;UART.c: 117: return _this->buf[_this->tail];
  3916                           
  3917                           ;incstack = 0
  3918  002334  0100               	movlb	0	; () banked
  3919  002336  EE20 F0CA          	lfsr	2,202
  3920  00233A  51D2               	movf	UART_buff_peek@_this& (0+255),w,b
  3921  00233C  26D9               	addwf	fsr2l,f,c
  3922  00233E  51D3               	movf	(UART_buff_peek@_this+1)& (0+255),w,b
  3923  002340  22DA               	addwfc	fsr2h,f,c
  3924  002342  CFDE F0D4          	movff	postinc2,??_UART_buff_peek
  3925  002346  CFDD F0D5          	movff	postdec2,??_UART_buff_peek+1
  3926  00234A  0100               	movlb	0	; () banked
  3927  00234C  51D4               	movf	??_UART_buff_peek& (0+255),w,b
  3928  00234E  0100               	movlb	0	; () banked
  3929  002350  25D2               	addwf	UART_buff_peek@_this& (0+255),w,b
  3930  002352  6ED9               	movwf	fsr2l,c
  3931  002354  0100               	movlb	0	; () banked
  3932  002356  51D5               	movf	(??_UART_buff_peek+1)& (0+255),w,b
  3933  002358  0100               	movlb	0	; () banked
  3934  00235A  21D3               	addwfc	(UART_buff_peek@_this+1)& (0+255),w,b
  3935  00235C  6EDA               	movwf	fsr2h,c
  3936  00235E  50DF               	movf	indf2,w,c
  3937  002360  0012               	return	
  3938  002362                     __end_of_UART_buff_peek:
  3939                           	opt stack 0
  3940                           tosu	equ	0xFFF
  3941                           tosh	equ	0xFFE
  3942                           tosl	equ	0xFFD
  3943                           pclath	equ	0xFFA
  3944                           tblptru	equ	0xFF8
  3945                           tblptrh	equ	0xFF7
  3946                           tblptrl	equ	0xFF6
  3947                           tablat	equ	0xFF5
  3948                           prodh	equ	0xFF4
  3949                           prodl	equ	0xFF3
  3950                           intcon	equ	0xFF2
  3951                           postinc0	equ	0xFEE
  3952                           wreg	equ	0xFE8
  3953                           indf2	equ	0xFDF
  3954                           postinc2	equ	0xFDE
  3955                           postdec2	equ	0xFDD
  3956                           plusw2	equ	0xFDB
  3957                           fsr2h	equ	0xFDA
  3958                           fsr2l	equ	0xFD9
  3959                           status	equ	0xFD8
  3960                           
  3961 ;; *************** function _CRCcheck *****************
  3962 ;; Defined at:
  3963 ;;		line 373 in file "FastTransfer.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;		None
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;  rt              2   17[BANK0 ] int 
  3968 ;;  arrayHolder     3   14[BANK0 ] unsigned char [3]
  3969 ;;  calculatedCR    1   13[BANK0 ] unsigned char 
  3970 ;;  SentCRC         1   12[BANK0 ] unsigned char 
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  1    wreg      void 
  3973 ;; Registers used:
  3974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3980 ;;      Params:         0       0       0       0       0       0       0
  3981 ;;      Locals:         0       7       0       0       0       0       0
  3982 ;;      Temps:          0       0       0       0       0       0       0
  3983 ;;      Totals:         0       7       0       0       0       0       0
  3984 ;;Total ram usage:        7 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; Hardware stack levels required when called:    9
  3987 ;; This function calls:
  3988 ;;		Absolute function
  3989 ;;		_CRC8
  3990 ;;		_Receive_available
  3991 ;;		_Receive_get
  3992 ;;		_crcBufS_get
  3993 ;;		_crcBufS_status_put
  3994 ;; This function is called by:
  3995 ;;		_receiveData
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           	psect	text15
  4000  001026                     __ptext15:
  4001                           	opt stack 0
  4002  001026                     _CRCcheck:
  4003                           	opt stack 19
  4004  001026                     l3992:
  4005  001026  D801               	call	u3358
  4006  001028  D00B               	goto	u3359
  4007  00102A                     u3358:
  4008  00102A  0005               	push	
  4009  00102C  0100               	movlb	0	; () banked
  4010  00102E  6EFA               	movwf	pclath,c
  4011  001030  518C               	movf	_serial_available& (0+255),w,b
  4012  001032  6EFD               	movwf	tosl,c
  4013  001034  518D               	movf	(_serial_available+1)& (0+255),w,b
  4014  001036  6EFE               	movwf	tosh,c
  4015  001038  50F8               	movf	tblptru,w,c
  4016  00103A  6EFF               	movwf	tosu,c
  4017  00103C  50FA               	movf	pclath,w,c
  4018  00103E  0012               	return		;indir
  4019  001040                     u3359:
  4020  001040  0100               	movlb	0	; () banked
  4021  001042  BFD5               	btfsc	(?_Receive_available+1)& (0+255),7,b
  4022  001044  D7F0               	goto	l3992
  4023  001046  0100               	movlb	0	; () banked
  4024  001048  51D5               	movf	(?_Receive_available+1)& (0+255),w,b
  4025  00104A  E105               	bnz	l3994
  4026  00104C  0E04               	movlw	4
  4027  00104E  0100               	movlb	0	; () banked
  4028  001050  5DD4               	subwf	?_Receive_available& (0+255),w,b
  4029  001052  A0D8               	btfss	status,0,c
  4030  001054  D7E8               	goto	l3992
  4031  001056                     l3994:
  4032                           
  4033                           ; BSR set to: 0
  4034                           ;FastTransfer.c: 377: unsigned char arrayHolder[3];
  4035                           ;FastTransfer.c: 378: arrayHolder[0] = serial_read();
  4036  001056  D801               	call	u3378
  4037  001058  D00B               	goto	u3379
  4038  00105A                     u3378:
  4039  00105A  0005               	push	
  4040  00105C  0100               	movlb	0	; () banked
  4041  00105E  6EFA               	movwf	pclath,c
  4042  001060  5190               	movf	_serial_read& (0+255),w,b
  4043  001062  6EFD               	movwf	tosl,c
  4044  001064  5191               	movf	(_serial_read+1)& (0+255),w,b
  4045  001066  6EFE               	movwf	tosh,c
  4046  001068  50F8               	movf	tblptru,w,c
  4047  00106A  6EFF               	movwf	tosu,c
  4048  00106C  50FA               	movf	pclath,w,c
  4049  00106E  0012               	return		;indir
  4050  001070                     u3379:
  4051  001070  0100               	movlb	0	; () banked
  4052  001072  6FE0               	movwf	CRCcheck@arrayHolder& (0+255),b
  4053                           
  4054                           ;FastTransfer.c: 379: arrayHolder[1] = serial_read();
  4055  001074  D801               	call	u3388
  4056  001076  D00B               	goto	u3389
  4057  001078                     u3388:
  4058  001078  0005               	push	
  4059  00107A  0100               	movlb	0	; () banked
  4060  00107C  6EFA               	movwf	pclath,c
  4061  00107E  5190               	movf	_serial_read& (0+255),w,b
  4062  001080  6EFD               	movwf	tosl,c
  4063  001082  5191               	movf	(_serial_read+1)& (0+255),w,b
  4064  001084  6EFE               	movwf	tosh,c
  4065  001086  50F8               	movf	tblptru,w,c
  4066  001088  6EFF               	movwf	tosu,c
  4067  00108A  50FA               	movf	pclath,w,c
  4068  00108C  0012               	return		;indir
  4069  00108E                     u3389:
  4070  00108E  0100               	movlb	0	; () banked
  4071  001090  6FE1               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  4072                           
  4073                           ;FastTransfer.c: 380: arrayHolder[2] = serial_read();
  4074  001092  D801               	call	u3398
  4075  001094  D00B               	goto	u3399
  4076  001096                     u3398:
  4077  001096  0005               	push	
  4078  001098  0100               	movlb	0	; () banked
  4079  00109A  6EFA               	movwf	pclath,c
  4080  00109C  5190               	movf	_serial_read& (0+255),w,b
  4081  00109E  6EFD               	movwf	tosl,c
  4082  0010A0  5191               	movf	(_serial_read+1)& (0+255),w,b
  4083  0010A2  6EFE               	movwf	tosh,c
  4084  0010A4  50F8               	movf	tblptru,w,c
  4085  0010A6  6EFF               	movwf	tosu,c
  4086  0010A8  50FA               	movf	pclath,w,c
  4087  0010AA  0012               	return		;indir
  4088  0010AC                     u3399:
  4089  0010AC  0100               	movlb	0	; () banked
  4090  0010AE  6FE2               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  4091                           
  4092                           ;FastTransfer.c: 381: unsigned char SentCRC = serial_read();
  4093  0010B0  D801               	call	u3408
  4094  0010B2  D00B               	goto	u3409
  4095  0010B4                     u3408:
  4096  0010B4  0005               	push	
  4097  0010B6  0100               	movlb	0	; () banked
  4098  0010B8  6EFA               	movwf	pclath,c
  4099  0010BA  5190               	movf	_serial_read& (0+255),w,b
  4100  0010BC  6EFD               	movwf	tosl,c
  4101  0010BE  5191               	movf	(_serial_read+1)& (0+255),w,b
  4102  0010C0  6EFE               	movwf	tosh,c
  4103  0010C2  50F8               	movf	tblptru,w,c
  4104  0010C4  6EFF               	movwf	tosu,c
  4105  0010C6  50FA               	movf	pclath,w,c
  4106  0010C8  0012               	return		;indir
  4107  0010CA                     u3409:
  4108  0010CA  0100               	movlb	0	; () banked
  4109  0010CC  6FDE               	movwf	CRCcheck@SentCRC& (0+255),b
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;FastTransfer.c: 382: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  4113  0010CE  0EE0               	movlw	low CRCcheck@arrayHolder
  4114  0010D0  0100               	movlb	0	; () banked
  4115  0010D2  6FD2               	movwf	CRC8@data& (0+255),b
  4116  0010D4  0E00               	movlw	high CRCcheck@arrayHolder
  4117  0010D6  0100               	movlb	0	; () banked
  4118  0010D8  6FD3               	movwf	(CRC8@data+1)& (0+255),b
  4119  0010DA  0E03               	movlw	3
  4120  0010DC  0100               	movlb	0	; () banked
  4121  0010DE  6FD4               	movwf	CRC8@len& (0+255),b
  4122  0010E0  EC81  F00F         	call	_CRC8	;wreg free
  4123  0010E4  0100               	movlb	0	; () banked
  4124  0010E6  6FDF               	movwf	CRCcheck@calculatedCRC& (0+255),b
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;FastTransfer.c: 385: if (SentCRC == calculatedCRC) {
  4128  0010E8  0100               	movlb	0	; () banked
  4129  0010EA  51DF               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  4130  0010EC  0100               	movlb	0	; () banked
  4131  0010EE  19DE               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  4132  0010F0  A4D8               	btfss	status,2,c
  4133  0010F2  D05B               	goto	l4024
  4134                           
  4135                           ; BSR set to: 0
  4136                           ;FastTransfer.c: 387: int rt;
  4137                           ;FastTransfer.c: 388: for (rt = 0; rt < 5; rt++) {
  4138  0010F4  0E00               	movlw	0
  4139  0010F6  0100               	movlb	0	; () banked
  4140  0010F8  6FE4               	movwf	(CRCcheck@rt+1)& (0+255),b
  4141  0010FA  0E00               	movlw	0
  4142  0010FC  6FE3               	movwf	CRCcheck@rt& (0+255),b
  4143  0010FE                     l4002:
  4144                           
  4145                           ; BSR set to: 0
  4146  0010FE  0100               	movlb	0	; () banked
  4147  001100  BFE4               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  4148  001102  D008               	goto	l4006
  4149  001104  0100               	movlb	0	; () banked
  4150  001106  51E4               	movf	(CRCcheck@rt+1)& (0+255),w,b
  4151  001108  E153               	bnz	l582
  4152  00110A  0E05               	movlw	5
  4153  00110C  0100               	movlb	0	; () banked
  4154  00110E  5DE3               	subwf	CRCcheck@rt& (0+255),w,b
  4155  001110  B0D8               	btfsc	status,0,c
  4156  001112  0012               	return	
  4157  001114                     l4006:
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  4161  001114  0EC1               	movlw	low _crc_buffer
  4162  001116  0100               	movlb	0	; () banked
  4163  001118  6FD2               	movwf	crcBufS_get@_this& (0+255),b
  4164  00111A  0E00               	movlw	high _crc_buffer
  4165  00111C  0100               	movlb	0	; () banked
  4166  00111E  6FD3               	movwf	(crcBufS_get@_this+1)& (0+255),b
  4167  001120  C0E3  F0D4         	movff	CRCcheck@rt,crcBufS_get@time
  4168  001124  0E00               	movlw	0
  4169  001126  0100               	movlb	0	; () banked
  4170  001128  6FD5               	movwf	crcBufS_get@space& (0+255),b
  4171  00112A  ECD3  F00A         	call	_crcBufS_get	;wreg free
  4172  00112E  0100               	movlb	0	; () banked
  4173  001130  1995               	xorwf	_returnAddress& (0+255),w,b
  4174  001132  A4D8               	btfss	status,2,c
  4175  001134  D036               	goto	l4020
  4176                           
  4177                           ; BSR set to: 0
  4178                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  4179  001136  0EC1               	movlw	low _crc_buffer
  4180  001138  0100               	movlb	0	; () banked
  4181  00113A  6FD2               	movwf	crcBufS_get@_this& (0+255),b
  4182  00113C  0E00               	movlw	high _crc_buffer
  4183  00113E  0100               	movlb	0	; () banked
  4184  001140  6FD3               	movwf	(crcBufS_get@_this+1)& (0+255),b
  4185  001142  C0E3  F0D4         	movff	CRCcheck@rt,crcBufS_get@time
  4186  001146  0E01               	movlw	1
  4187  001148  0100               	movlb	0	; () banked
  4188  00114A  6FD5               	movwf	crcBufS_get@space& (0+255),b
  4189  00114C  ECD3  F00A         	call	_crcBufS_get	;wreg free
  4190  001150  0100               	movlb	0	; () banked
  4191  001152  19E2               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  4192  001154  A4D8               	btfss	status,2,c
  4193  001156  D025               	goto	l4020
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  4197  001158  0100               	movlb	0	; () banked
  4198  00115A  05E1               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4199  00115C  A4D8               	btfss	status,2,c
  4200  00115E  D00E               	goto	l4016
  4201                           
  4202                           ; BSR set to: 0
  4203                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  4204  001160  0EC1               	movlw	low _crc_buffer
  4205  001162  0100               	movlb	0	; () banked
  4206  001164  6FD2               	movwf	crcBufS_status_put@_this& (0+255),b
  4207  001166  0E00               	movlw	high _crc_buffer
  4208  001168  0100               	movlb	0	; () banked
  4209  00116A  6FD3               	movwf	(crcBufS_status_put@_this+1)& (0+255),b
  4210  00116C  C0E3  F0D4         	movff	CRCcheck@rt,crcBufS_status_put@time
  4211  001170  0E01               	movlw	1
  4212  001172  0100               	movlb	0	; () banked
  4213  001174  6FD5               	movwf	crcBufS_status_put@status& (0+255),b
  4214  001176  EC74  F00B         	call	_crcBufS_status_put	;wreg free
  4215                           
  4216                           ;FastTransfer.c: 393: break;
  4217  00117A  0012               	return	
  4218  00117C                     l4016:
  4219  00117C  0E02               	movlw	2
  4220  00117E  0100               	movlb	0	; () banked
  4221  001180  19E1               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4222  001182  A4D8               	btfss	status,2,c
  4223  001184  D00E               	goto	l4020
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  4227  001186  0EC1               	movlw	low _crc_buffer
  4228  001188  0100               	movlb	0	; () banked
  4229  00118A  6FD2               	movwf	crcBufS_status_put@_this& (0+255),b
  4230  00118C  0E00               	movlw	high _crc_buffer
  4231  00118E  0100               	movlb	0	; () banked
  4232  001190  6FD3               	movwf	(crcBufS_status_put@_this+1)& (0+255),b
  4233  001192  C0E3  F0D4         	movff	CRCcheck@rt,crcBufS_status_put@time
  4234  001196  0E02               	movlw	2
  4235  001198  0100               	movlb	0	; () banked
  4236  00119A  6FD5               	movwf	crcBufS_status_put@status& (0+255),b
  4237  00119C  EC74  F00B         	call	_crcBufS_status_put	;wreg free
  4238                           
  4239                           ;FastTransfer.c: 396: break;
  4240  0011A0  0012               	return	
  4241  0011A2                     l4020:
  4242  0011A2  0100               	movlb	0	; () banked
  4243  0011A4  4BE3               	infsnz	CRCcheck@rt& (0+255),f,b
  4244  0011A6  2BE4               	incf	(CRCcheck@rt+1)& (0+255),f,b
  4245  0011A8  D7AA               	goto	l4002
  4246  0011AA                     l4024:
  4247                           
  4248                           ; BSR set to: 0
  4249                           ;FastTransfer.c: 402: crcErrorCounter++;
  4250  0011AA  4A32               	infsnz	_crcErrorCounter,f,c
  4251  0011AC  2A33               	incf	_crcErrorCounter+1,f,c
  4252  0011AE  0012               	return	
  4253  0011B0                     l582:
  4254  0011B0  0012               	return		;funcret
  4255  0011B2                     __end_of_CRCcheck:
  4256                           	opt stack 0
  4257                           tosu	equ	0xFFF
  4258                           tosh	equ	0xFFE
  4259                           tosl	equ	0xFFD
  4260                           pclath	equ	0xFFA
  4261                           tblptru	equ	0xFF8
  4262                           tblptrh	equ	0xFF7
  4263                           tblptrl	equ	0xFF6
  4264                           tablat	equ	0xFF5
  4265                           prodh	equ	0xFF4
  4266                           prodl	equ	0xFF3
  4267                           intcon	equ	0xFF2
  4268                           postinc0	equ	0xFEE
  4269                           wreg	equ	0xFE8
  4270                           indf2	equ	0xFDF
  4271                           postinc2	equ	0xFDE
  4272                           postdec2	equ	0xFDD
  4273                           plusw2	equ	0xFDB
  4274                           fsr2h	equ	0xFDA
  4275                           fsr2l	equ	0xFD9
  4276                           status	equ	0xFD8
  4277                           
  4278 ;; *************** function _crcBufS_status_put *****************
  4279 ;; Defined at:
  4280 ;;		line 336 in file "FastTransfer.c"
  4281 ;; Parameters:    Size  Location     Type
  4282 ;;  _this           2    0[BANK0 ] PTR struct crcBufS
  4283 ;;		 -> crc_buffer(17), 
  4284 ;;  time            1    2[BANK0 ] unsigned char 
  4285 ;;  status          1    3[BANK0 ] unsigned char 
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;  wantedTime      2    8[BANK0 ] int 
  4288 ;; Return value:  Size  Location     Type
  4289 ;;                  1    wreg      void 
  4290 ;; Registers used:
  4291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4292 ;; Tracked objects:
  4293 ;;		On entry : 0/0
  4294 ;;		On exit  : 0/0
  4295 ;;		Unchanged: 0/0
  4296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4297 ;;      Params:         0       4       0       0       0       0       0
  4298 ;;      Locals:         0       2       0       0       0       0       0
  4299 ;;      Temps:          0       4       0       0       0       0       0
  4300 ;;      Totals:         0      10       0       0       0       0       0
  4301 ;;Total ram usage:       10 bytes
  4302 ;; Hardware stack levels used:    1
  4303 ;; Hardware stack levels required when called:    6
  4304 ;; This function calls:
  4305 ;;		Nothing
  4306 ;; This function is called by:
  4307 ;;		_CRCcheck
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text16
  4312  0016E8                     __ptext16:
  4313                           	opt stack 0
  4314  0016E8                     _crcBufS_status_put:
  4315                           	opt stack 21
  4316                           
  4317                           ;FastTransfer.c: 337: if (time >= 5) {
  4318                           
  4319                           ;incstack = 0
  4320  0016E8  0E04               	movlw	4
  4321  0016EA  0100               	movlb	0	; () banked
  4322  0016EC  65D4               	cpfsgt	crcBufS_status_put@time& (0+255),b
  4323  0016EE  D003               	goto	l3922
  4324                           
  4325                           ; BSR set to: 0
  4326                           ;FastTransfer.c: 338: time = 5 - 1;
  4327  0016F0  0E04               	movlw	4
  4328  0016F2  0100               	movlb	0	; () banked
  4329  0016F4  6FD4               	movwf	crcBufS_status_put@time& (0+255),b
  4330  0016F6                     l3922:
  4331                           
  4332                           ; BSR set to: 0
  4333                           ;FastTransfer.c: 339: }
  4334                           ;FastTransfer.c: 340: time = time + 1;
  4335  0016F6  0100               	movlb	0	; () banked
  4336  0016F8  29D4               	incf	crcBufS_status_put@time& (0+255),w,b
  4337  0016FA  0100               	movlb	0	; () banked
  4338  0016FC  6FD4               	movwf	crcBufS_status_put@time& (0+255),b
  4339                           
  4340                           ; BSR set to: 0
  4341                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  4342  0016FE  0100               	movlb	0	; () banked
  4343  001700  51D4               	movf	crcBufS_status_put@time& (0+255),w,b
  4344  001702  0D03               	mullw	3
  4345  001704  CFF3 F0DA          	movff	prodl,crcBufS_status_put@wantedTime
  4346  001708  CFF4 F0DB          	movff	prodh,crcBufS_status_put@wantedTime+1
  4347                           
  4348                           ; BSR set to: 0
  4349                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  4350  00170C  0100               	movlb	0	; () banked
  4351  00170E  EE20 F00F          	lfsr	2,15
  4352  001712  51D2               	movf	crcBufS_status_put@_this& (0+255),w,b
  4353  001714  26D9               	addwf	fsr2l,f,c
  4354  001716  51D3               	movf	(crcBufS_status_put@_this+1)& (0+255),w,b
  4355  001718  22DA               	addwfc	fsr2h,f,c
  4356  00171A  0100               	movlb	0	; () banked
  4357  00171C  51DA               	movf	crcBufS_status_put@wantedTime& (0+255),w,b
  4358  00171E  5CDE               	subwf	postinc2,w,c
  4359  001720  50DE               	movf	postinc2,w,c
  4360  001722  0A80               	xorlw	128
  4361  001724  0100               	movlb	0	; () banked
  4362  001726  6FD8               	movwf	(??_crcBufS_status_put+2)& (0+255),b
  4363  001728  0100               	movlb	0	; () banked
  4364  00172A  51DB               	movf	(crcBufS_status_put@wantedTime+1)& (0+255),w,b
  4365  00172C  0A80               	xorlw	128
  4366  00172E  0100               	movlb	0	; () banked
  4367  001730  59D8               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,b
  4368  001732  B0D8               	btfsc	status,0,c
  4369  001734  D03E               	goto	l3930
  4370                           
  4371                           ; BSR set to: 0
  4372                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4373  001736  0100               	movlb	0	; () banked
  4374  001738  EE20 F00F          	lfsr	2,15
  4375  00173C  51D2               	movf	crcBufS_status_put@_this& (0+255),w,b
  4376  00173E  26D9               	addwf	fsr2l,f,c
  4377  001740  51D3               	movf	(crcBufS_status_put@_this+1)& (0+255),w,b
  4378  001742  22DA               	addwfc	fsr2h,f,c
  4379  001744  CFDE F0D6          	movff	postinc2,??_crcBufS_status_put
  4380  001748  CFDD F0D7          	movff	postdec2,??_crcBufS_status_put+1
  4381  00174C  0100               	movlb	0	; () banked
  4382  00174E  1FD6               	comf	??_crcBufS_status_put& (0+255),f,b
  4383  001750  1FD7               	comf	(??_crcBufS_status_put+1)& (0+255),f,b
  4384  001752  4BD6               	infsnz	??_crcBufS_status_put& (0+255),f,b
  4385  001754  2BD7               	incf	(??_crcBufS_status_put+1)& (0+255),f,b
  4386  001756  0100               	movlb	0	; () banked
  4387  001758  51DA               	movf	crcBufS_status_put@wantedTime& (0+255),w,b
  4388  00175A  0100               	movlb	0	; () banked
  4389  00175C  27D6               	addwf	??_crcBufS_status_put& (0+255),f,b
  4390  00175E  0100               	movlb	0	; () banked
  4391  001760  51DB               	movf	(crcBufS_status_put@wantedTime+1)& (0+255),w,b
  4392  001762  0100               	movlb	0	; () banked
  4393  001764  23D7               	addwfc	(??_crcBufS_status_put+1)& (0+255),f,b
  4394  001766  0100               	movlb	0	; () banked
  4395  001768  1FD6               	comf	??_crcBufS_status_put& (0+255),f,b
  4396  00176A  1FD7               	comf	(??_crcBufS_status_put+1)& (0+255),f,b
  4397  00176C  4BD6               	infsnz	??_crcBufS_status_put& (0+255),f,b
  4398  00176E  2BD7               	incf	(??_crcBufS_status_put+1)& (0+255),f,b
  4399  001770  0E0F               	movlw	15
  4400  001772  0100               	movlb	0	; () banked
  4401  001774  25D6               	addwf	??_crcBufS_status_put& (0+255),w,b
  4402  001776  0100               	movlb	0	; () banked
  4403  001778  6FDA               	movwf	crcBufS_status_put@wantedTime& (0+255),b
  4404  00177A  0E00               	movlw	0
  4405  00177C  0100               	movlb	0	; () banked
  4406  00177E  21D7               	addwfc	(??_crcBufS_status_put+1)& (0+255),w,b
  4407  001780  0100               	movlb	0	; () banked
  4408  001782  6FDB               	movwf	(crcBufS_status_put@wantedTime+1)& (0+255),b
  4409                           
  4410                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  4411  001784  0E02               	movlw	2
  4412  001786  0100               	movlb	0	; () banked
  4413  001788  25DA               	addwf	crcBufS_status_put@wantedTime& (0+255),w,b
  4414  00178A  0100               	movlb	0	; () banked
  4415  00178C  6FD6               	movwf	??_crcBufS_status_put& (0+255),b
  4416  00178E  0E00               	movlw	0
  4417  001790  0100               	movlb	0	; () banked
  4418  001792  21DB               	addwfc	(crcBufS_status_put@wantedTime+1)& (0+255),w,b
  4419  001794  0100               	movlb	0	; () banked
  4420  001796  6FD7               	movwf	(??_crcBufS_status_put+1)& (0+255),b
  4421  001798  0100               	movlb	0	; () banked
  4422  00179A  51D6               	movf	??_crcBufS_status_put& (0+255),w,b
  4423  00179C  0100               	movlb	0	; () banked
  4424  00179E  25D2               	addwf	crcBufS_status_put@_this& (0+255),w,b
  4425  0017A0  6ED9               	movwf	fsr2l,c
  4426  0017A2  0100               	movlb	0	; () banked
  4427  0017A4  51D7               	movf	(??_crcBufS_status_put+1)& (0+255),w,b
  4428  0017A6  0100               	movlb	0	; () banked
  4429  0017A8  21D3               	addwfc	(crcBufS_status_put@_this+1)& (0+255),w,b
  4430  0017AA  6EDA               	movwf	fsr2h,c
  4431  0017AC  C0D5  FFDF         	movff	crcBufS_status_put@status,indf2
  4432                           
  4433                           ;FastTransfer.c: 345: } else {
  4434  0017B0  0012               	return	
  4435  0017B2                     l3930:
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  4439  0017B2  0100               	movlb	0	; () banked
  4440  0017B4  EE20 F00F          	lfsr	2,15
  4441  0017B8  51D2               	movf	crcBufS_status_put@_this& (0+255),w,b
  4442  0017BA  26D9               	addwf	fsr2l,f,c
  4443  0017BC  51D3               	movf	(crcBufS_status_put@_this+1)& (0+255),w,b
  4444  0017BE  22DA               	addwfc	fsr2h,f,c
  4445  0017C0  CFDE F0D6          	movff	postinc2,??_crcBufS_status_put
  4446  0017C4  CFDD F0D7          	movff	postdec2,??_crcBufS_status_put+1
  4447  0017C8  C0DA  F0D8         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4448  0017CC  C0DB  F0D9         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4449  0017D0  0100               	movlb	0	; () banked
  4450  0017D2  1FD8               	comf	(??_crcBufS_status_put+2)& (0+255),f,b
  4451  0017D4  1FD9               	comf	(??_crcBufS_status_put+3)& (0+255),f,b
  4452  0017D6  4BD8               	infsnz	(??_crcBufS_status_put+2)& (0+255),f,b
  4453  0017D8  2BD9               	incf	(??_crcBufS_status_put+3)& (0+255),f,b
  4454  0017DA  0100               	movlb	0	; () banked
  4455  0017DC  51D6               	movf	??_crcBufS_status_put& (0+255),w,b
  4456  0017DE  0100               	movlb	0	; () banked
  4457  0017E0  27D8               	addwf	(??_crcBufS_status_put+2)& (0+255),f,b
  4458  0017E2  0100               	movlb	0	; () banked
  4459  0017E4  51D7               	movf	(??_crcBufS_status_put+1)& (0+255),w,b
  4460  0017E6  0100               	movlb	0	; () banked
  4461  0017E8  23D9               	addwfc	(??_crcBufS_status_put+3)& (0+255),f,b
  4462  0017EA  0E02               	movlw	2
  4463  0017EC  0100               	movlb	0	; () banked
  4464  0017EE  27D8               	addwf	(??_crcBufS_status_put+2)& (0+255),f,b
  4465  0017F0  0E00               	movlw	0
  4466  0017F2  23D9               	addwfc	(??_crcBufS_status_put+3)& (0+255),f,b
  4467  0017F4  0100               	movlb	0	; () banked
  4468  0017F6  51D8               	movf	(??_crcBufS_status_put+2)& (0+255),w,b
  4469  0017F8  0100               	movlb	0	; () banked
  4470  0017FA  25D2               	addwf	crcBufS_status_put@_this& (0+255),w,b
  4471  0017FC  6ED9               	movwf	fsr2l,c
  4472  0017FE  0100               	movlb	0	; () banked
  4473  001800  51D9               	movf	(??_crcBufS_status_put+3)& (0+255),w,b
  4474  001802  0100               	movlb	0	; () banked
  4475  001804  21D3               	addwfc	(crcBufS_status_put@_this+1)& (0+255),w,b
  4476  001806  6EDA               	movwf	fsr2h,c
  4477  001808  C0D5  FFDF         	movff	crcBufS_status_put@status,indf2
  4478  00180C  0012               	return	
  4479  00180E                     __end_of_crcBufS_status_put:
  4480                           	opt stack 0
  4481                           tosu	equ	0xFFF
  4482                           tosh	equ	0xFFE
  4483                           tosl	equ	0xFFD
  4484                           pclath	equ	0xFFA
  4485                           tblptru	equ	0xFF8
  4486                           tblptrh	equ	0xFF7
  4487                           tblptrl	equ	0xFF6
  4488                           tablat	equ	0xFF5
  4489                           prodh	equ	0xFF4
  4490                           prodl	equ	0xFF3
  4491                           intcon	equ	0xFF2
  4492                           postinc0	equ	0xFEE
  4493                           wreg	equ	0xFE8
  4494                           indf2	equ	0xFDF
  4495                           postinc2	equ	0xFDE
  4496                           postdec2	equ	0xFDD
  4497                           plusw2	equ	0xFDB
  4498                           fsr2h	equ	0xFDA
  4499                           fsr2l	equ	0xFD9
  4500                           status	equ	0xFD8
  4501                           
  4502 ;; *************** function _crcBufS_get *****************
  4503 ;; Defined at:
  4504 ;;		line 353 in file "FastTransfer.c"
  4505 ;; Parameters:    Size  Location     Type
  4506 ;;  _this           2    0[BANK0 ] PTR struct crcBufS
  4507 ;;		 -> crc_buffer(17), 
  4508 ;;  time            1    2[BANK0 ] unsigned char 
  4509 ;;  space           1    3[BANK0 ] unsigned char 
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;  wantedTime      2   10[BANK0 ] int 
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  1    wreg      unsigned char 
  4514 ;; Registers used:
  4515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4521 ;;      Params:         0       4       0       0       0       0       0
  4522 ;;      Locals:         0       2       0       0       0       0       0
  4523 ;;      Temps:          0       6       0       0       0       0       0
  4524 ;;      Totals:         0      12       0       0       0       0       0
  4525 ;;Total ram usage:       12 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    6
  4528 ;; This function calls:
  4529 ;;		Nothing
  4530 ;; This function is called by:
  4531 ;;		_CRCcheck
  4532 ;;		_AKNAK
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           	psect	text17
  4537  0015A6                     __ptext17:
  4538                           	opt stack 0
  4539  0015A6                     _crcBufS_get:
  4540                           	opt stack 21
  4541                           
  4542                           ;FastTransfer.c: 354: if (time >= 5) {
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;incstack = 0
  4546  0015A6  0E04               	movlw	4
  4547  0015A8  0100               	movlb	0	; () banked
  4548  0015AA  65D4               	cpfsgt	crcBufS_get@time& (0+255),b
  4549  0015AC  D003               	goto	l3898
  4550                           
  4551                           ; BSR set to: 0
  4552                           ;FastTransfer.c: 355: time = 5 - 1;
  4553  0015AE  0E04               	movlw	4
  4554  0015B0  0100               	movlb	0	; () banked
  4555  0015B2  6FD4               	movwf	crcBufS_get@time& (0+255),b
  4556  0015B4                     l3898:
  4557                           
  4558                           ; BSR set to: 0
  4559                           ;FastTransfer.c: 356: }
  4560                           ;FastTransfer.c: 357: if (space >= 3) {
  4561  0015B4  0E02               	movlw	2
  4562  0015B6  0100               	movlb	0	; () banked
  4563  0015B8  65D5               	cpfsgt	crcBufS_get@space& (0+255),b
  4564  0015BA  D003               	goto	l3902
  4565                           
  4566                           ; BSR set to: 0
  4567                           ;FastTransfer.c: 358: space = 3 - 1;
  4568  0015BC  0E02               	movlw	2
  4569  0015BE  0100               	movlb	0	; () banked
  4570  0015C0  6FD5               	movwf	crcBufS_get@space& (0+255),b
  4571  0015C2                     l3902:
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;FastTransfer.c: 359: }
  4575                           ;FastTransfer.c: 360: time = time + 1;
  4576  0015C2  0100               	movlb	0	; () banked
  4577  0015C4  29D4               	incf	crcBufS_get@time& (0+255),w,b
  4578  0015C6  0100               	movlb	0	; () banked
  4579  0015C8  6FD4               	movwf	crcBufS_get@time& (0+255),b
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  4583  0015CA  0100               	movlb	0	; () banked
  4584  0015CC  51D4               	movf	crcBufS_get@time& (0+255),w,b
  4585  0015CE  0D03               	mullw	3
  4586  0015D0  CFF3 F0DC          	movff	prodl,crcBufS_get@wantedTime
  4587  0015D4  CFF4 F0DD          	movff	prodh,crcBufS_get@wantedTime+1
  4588                           
  4589                           ; BSR set to: 0
  4590                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  4591  0015D8  0100               	movlb	0	; () banked
  4592  0015DA  EE20 F00F          	lfsr	2,15
  4593  0015DE  51D2               	movf	crcBufS_get@_this& (0+255),w,b
  4594  0015E0  26D9               	addwf	fsr2l,f,c
  4595  0015E2  51D3               	movf	(crcBufS_get@_this+1)& (0+255),w,b
  4596  0015E4  22DA               	addwfc	fsr2h,f,c
  4597  0015E6  0100               	movlb	0	; () banked
  4598  0015E8  51DC               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4599  0015EA  5CDE               	subwf	postinc2,w,c
  4600  0015EC  50DE               	movf	postinc2,w,c
  4601  0015EE  0A80               	xorlw	128
  4602  0015F0  0100               	movlb	0	; () banked
  4603  0015F2  6FD8               	movwf	(??_crcBufS_get+2)& (0+255),b
  4604  0015F4  0100               	movlb	0	; () banked
  4605  0015F6  51DD               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4606  0015F8  0A80               	xorlw	128
  4607  0015FA  0100               	movlb	0	; () banked
  4608  0015FC  59D8               	subwfb	(??_crcBufS_get+2)& (0+255),w,b
  4609  0015FE  B0D8               	btfsc	status,0,c
  4610  001600  D03E               	goto	l3914
  4611                           
  4612                           ; BSR set to: 0
  4613                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4614  001602  0100               	movlb	0	; () banked
  4615  001604  EE20 F00F          	lfsr	2,15
  4616  001608  51D2               	movf	crcBufS_get@_this& (0+255),w,b
  4617  00160A  26D9               	addwf	fsr2l,f,c
  4618  00160C  51D3               	movf	(crcBufS_get@_this+1)& (0+255),w,b
  4619  00160E  22DA               	addwfc	fsr2h,f,c
  4620  001610  CFDE F0D6          	movff	postinc2,??_crcBufS_get
  4621  001614  CFDD F0D7          	movff	postdec2,??_crcBufS_get+1
  4622  001618  0100               	movlb	0	; () banked
  4623  00161A  1FD6               	comf	??_crcBufS_get& (0+255),f,b
  4624  00161C  1FD7               	comf	(??_crcBufS_get+1)& (0+255),f,b
  4625  00161E  4BD6               	infsnz	??_crcBufS_get& (0+255),f,b
  4626  001620  2BD7               	incf	(??_crcBufS_get+1)& (0+255),f,b
  4627  001622  0100               	movlb	0	; () banked
  4628  001624  51DC               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4629  001626  0100               	movlb	0	; () banked
  4630  001628  27D6               	addwf	??_crcBufS_get& (0+255),f,b
  4631  00162A  0100               	movlb	0	; () banked
  4632  00162C  51DD               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4633  00162E  0100               	movlb	0	; () banked
  4634  001630  23D7               	addwfc	(??_crcBufS_get+1)& (0+255),f,b
  4635  001632  0100               	movlb	0	; () banked
  4636  001634  1FD6               	comf	??_crcBufS_get& (0+255),f,b
  4637  001636  1FD7               	comf	(??_crcBufS_get+1)& (0+255),f,b
  4638  001638  4BD6               	infsnz	??_crcBufS_get& (0+255),f,b
  4639  00163A  2BD7               	incf	(??_crcBufS_get+1)& (0+255),f,b
  4640  00163C  0E0F               	movlw	15
  4641  00163E  0100               	movlb	0	; () banked
  4642  001640  25D6               	addwf	??_crcBufS_get& (0+255),w,b
  4643  001642  0100               	movlb	0	; () banked
  4644  001644  6FDC               	movwf	crcBufS_get@wantedTime& (0+255),b
  4645  001646  0E00               	movlw	0
  4646  001648  0100               	movlb	0	; () banked
  4647  00164A  21D7               	addwfc	(??_crcBufS_get+1)& (0+255),w,b
  4648  00164C  0100               	movlb	0	; () banked
  4649  00164E  6FDD               	movwf	(crcBufS_get@wantedTime+1)& (0+255),b
  4650                           
  4651                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  4652  001650  0100               	movlb	0	; () banked
  4653  001652  51D5               	movf	crcBufS_get@space& (0+255),w,b
  4654  001654  0100               	movlb	0	; () banked
  4655  001656  25DC               	addwf	crcBufS_get@wantedTime& (0+255),w,b
  4656  001658  0100               	movlb	0	; () banked
  4657  00165A  6FD6               	movwf	??_crcBufS_get& (0+255),b
  4658  00165C  0E00               	movlw	0
  4659  00165E  0100               	movlb	0	; () banked
  4660  001660  21DD               	addwfc	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4661  001662  0100               	movlb	0	; () banked
  4662  001664  6FD7               	movwf	(??_crcBufS_get+1)& (0+255),b
  4663  001666  0100               	movlb	0	; () banked
  4664  001668  51D6               	movf	??_crcBufS_get& (0+255),w,b
  4665  00166A  0100               	movlb	0	; () banked
  4666  00166C  25D2               	addwf	crcBufS_get@_this& (0+255),w,b
  4667  00166E  6ED9               	movwf	fsr2l,c
  4668  001670  0100               	movlb	0	; () banked
  4669  001672  51D7               	movf	(??_crcBufS_get+1)& (0+255),w,b
  4670  001674  0100               	movlb	0	; () banked
  4671  001676  21D3               	addwfc	(crcBufS_get@_this+1)& (0+255),w,b
  4672  001678  6EDA               	movwf	fsr2h,c
  4673  00167A  50DF               	movf	indf2,w,c
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;FastTransfer.c: 365: } else {
  4677                           
  4678                           ; BSR set to: 0
  4679  00167C  0012               	return	
  4680  00167E                     l3914:
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  4684  00167E  0100               	movlb	0	; () banked
  4685  001680  EE20 F00F          	lfsr	2,15
  4686  001684  51D2               	movf	crcBufS_get@_this& (0+255),w,b
  4687  001686  26D9               	addwf	fsr2l,f,c
  4688  001688  51D3               	movf	(crcBufS_get@_this+1)& (0+255),w,b
  4689  00168A  22DA               	addwfc	fsr2h,f,c
  4690  00168C  CFDE F0D6          	movff	postinc2,??_crcBufS_get
  4691  001690  CFDD F0D7          	movff	postdec2,??_crcBufS_get+1
  4692  001694  C0DC  F0D8         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4693  001698  C0DD  F0D9         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4694  00169C  0100               	movlb	0	; () banked
  4695  00169E  1FD8               	comf	(??_crcBufS_get+2)& (0+255),f,b
  4696  0016A0  1FD9               	comf	(??_crcBufS_get+3)& (0+255),f,b
  4697  0016A2  4BD8               	infsnz	(??_crcBufS_get+2)& (0+255),f,b
  4698  0016A4  2BD9               	incf	(??_crcBufS_get+3)& (0+255),f,b
  4699  0016A6  0100               	movlb	0	; () banked
  4700  0016A8  51D5               	movf	crcBufS_get@space& (0+255),w,b
  4701  0016AA  0100               	movlb	0	; () banked
  4702  0016AC  6FDA               	movwf	(??_crcBufS_get+4)& (0+255),b
  4703  0016AE  6BDB               	clrf	(??_crcBufS_get+5)& (0+255),b
  4704  0016B0  0100               	movlb	0	; () banked
  4705  0016B2  51D8               	movf	(??_crcBufS_get+2)& (0+255),w,b
  4706  0016B4  0100               	movlb	0	; () banked
  4707  0016B6  27DA               	addwf	(??_crcBufS_get+4)& (0+255),f,b
  4708  0016B8  0100               	movlb	0	; () banked
  4709  0016BA  51D9               	movf	(??_crcBufS_get+3)& (0+255),w,b
  4710  0016BC  0100               	movlb	0	; () banked
  4711  0016BE  23DB               	addwfc	(??_crcBufS_get+5)& (0+255),f,b
  4712  0016C0  0100               	movlb	0	; () banked
  4713  0016C2  51D6               	movf	??_crcBufS_get& (0+255),w,b
  4714  0016C4  0100               	movlb	0	; () banked
  4715  0016C6  27DA               	addwf	(??_crcBufS_get+4)& (0+255),f,b
  4716  0016C8  0100               	movlb	0	; () banked
  4717  0016CA  51D7               	movf	(??_crcBufS_get+1)& (0+255),w,b
  4718  0016CC  0100               	movlb	0	; () banked
  4719  0016CE  23DB               	addwfc	(??_crcBufS_get+5)& (0+255),f,b
  4720  0016D0  0100               	movlb	0	; () banked
  4721  0016D2  51DA               	movf	(??_crcBufS_get+4)& (0+255),w,b
  4722  0016D4  0100               	movlb	0	; () banked
  4723  0016D6  25D2               	addwf	crcBufS_get@_this& (0+255),w,b
  4724  0016D8  6ED9               	movwf	fsr2l,c
  4725  0016DA  0100               	movlb	0	; () banked
  4726  0016DC  51DB               	movf	(??_crcBufS_get+5)& (0+255),w,b
  4727  0016DE  0100               	movlb	0	; () banked
  4728  0016E0  21D3               	addwfc	(crcBufS_get@_this+1)& (0+255),w,b
  4729  0016E2  6EDA               	movwf	fsr2h,c
  4730  0016E4  50DF               	movf	indf2,w,c
  4731                           
  4732                           ; BSR set to: 0
  4733  0016E6  0012               	return	
  4734  0016E8                     __end_of_crcBufS_get:
  4735                           	opt stack 0
  4736                           tosu	equ	0xFFF
  4737                           tosh	equ	0xFFE
  4738                           tosl	equ	0xFFD
  4739                           pclath	equ	0xFFA
  4740                           tblptru	equ	0xFF8
  4741                           tblptrh	equ	0xFF7
  4742                           tblptrl	equ	0xFF6
  4743                           tablat	equ	0xFF5
  4744                           prodh	equ	0xFF4
  4745                           prodl	equ	0xFF3
  4746                           intcon	equ	0xFF2
  4747                           postinc0	equ	0xFEE
  4748                           wreg	equ	0xFE8
  4749                           indf2	equ	0xFDF
  4750                           postinc2	equ	0xFDE
  4751                           postdec2	equ	0xFDD
  4752                           plusw2	equ	0xFDB
  4753                           fsr2h	equ	0xFDA
  4754                           fsr2l	equ	0xFD9
  4755                           status	equ	0xFD8
  4756                           
  4757 ;; *************** function _Receive_get *****************
  4758 ;; Defined at:
  4759 ;;		line 128 in file "UART.c"
  4760 ;; Parameters:    Size  Location     Type
  4761 ;;		None
  4762 ;; Auto vars:     Size  Location     Type
  4763 ;;		None
  4764 ;; Return value:  Size  Location     Type
  4765 ;;                  1    wreg      unsigned char 
  4766 ;; Registers used:
  4767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4768 ;; Tracked objects:
  4769 ;;		On entry : 0/0
  4770 ;;		On exit  : 0/0
  4771 ;;		Unchanged: 0/0
  4772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4773 ;;      Params:         0       0       0       0       0       0       0
  4774 ;;      Locals:         0       0       0       0       0       0       0
  4775 ;;      Temps:          0       0       0       0       0       0       0
  4776 ;;      Totals:         0       0       0       0       0       0       0
  4777 ;;Total ram usage:        0 bytes
  4778 ;; Hardware stack levels used:    1
  4779 ;; Hardware stack levels required when called:    8
  4780 ;; This function calls:
  4781 ;;		_UART_buff_get
  4782 ;; This function is called by:
  4783 ;;		_SYSTEM_Initialize
  4784 ;;		_getch
  4785 ;;		_CRCcheck
  4786 ;;		_receiveData
  4787 ;; This function uses a non-reentrant model
  4788 ;;
  4789                           
  4790                           	psect	text18
  4791  0024BC                     __ptext18:
  4792                           	opt stack 0
  4793  0024BC                     _Receive_get:
  4794                           	opt stack 20
  4795                           
  4796                           ;UART.c: 129: return UART_buff_get(&input_buffer);
  4797                           
  4798                           ; BSR set to: 0
  4799                           ;incstack = 0
  4800  0024BC  0E00               	movlw	low _input_buffer
  4801  0024BE  0100               	movlb	0	; () banked
  4802  0024C0  6FD8               	movwf	UART_buff_get@_this& (0+255),b
  4803  0024C2  0E03               	movlw	high _input_buffer
  4804  0024C4  0100               	movlb	0	; () banked
  4805  0024C6  6FD9               	movwf	(UART_buff_get@_this+1)& (0+255),b
  4806  0024C8  ECE5  F00D         	call	_UART_buff_get	;wreg free
  4807  0024CC  0012               	return	
  4808  0024CE                     __end_of_Receive_get:
  4809                           	opt stack 0
  4810                           tosu	equ	0xFFF
  4811                           tosh	equ	0xFFE
  4812                           tosl	equ	0xFFD
  4813                           pclath	equ	0xFFA
  4814                           tblptru	equ	0xFF8
  4815                           tblptrh	equ	0xFF7
  4816                           tblptrl	equ	0xFF6
  4817                           tablat	equ	0xFF5
  4818                           prodh	equ	0xFF4
  4819                           prodl	equ	0xFF3
  4820                           intcon	equ	0xFF2
  4821                           postinc0	equ	0xFEE
  4822                           wreg	equ	0xFE8
  4823                           indf2	equ	0xFDF
  4824                           postinc2	equ	0xFDE
  4825                           postdec2	equ	0xFDD
  4826                           plusw2	equ	0xFDB
  4827                           fsr2h	equ	0xFDA
  4828                           fsr2l	equ	0xFD9
  4829                           status	equ	0xFD8
  4830                           
  4831 ;; *************** function _UART_buff_get *****************
  4832 ;; Defined at:
  4833 ;;		line 83 in file "UART.c"
  4834 ;; Parameters:    Size  Location     Type
  4835 ;;  _this           2    6[BANK0 ] PTR struct UART_ring_buf
  4836 ;;		 -> output_buffer(206), input_buffer(206), 
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;  c               1   10[BANK0 ] unsigned char 
  4839 ;; Return value:  Size  Location     Type
  4840 ;;                  1    wreg      unsigned char 
  4841 ;; Registers used:
  4842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4843 ;; Tracked objects:
  4844 ;;		On entry : 0/0
  4845 ;;		On exit  : 0/0
  4846 ;;		Unchanged: 0/0
  4847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4848 ;;      Params:         0       2       0       0       0       0       0
  4849 ;;      Locals:         0       1       0       0       0       0       0
  4850 ;;      Temps:          0       2       0       0       0       0       0
  4851 ;;      Totals:         0       5       0       0       0       0       0
  4852 ;;Total ram usage:        5 bytes
  4853 ;; Hardware stack levels used:    1
  4854 ;; Hardware stack levels required when called:    7
  4855 ;; This function calls:
  4856 ;;		_UART_buff_modulo_inc
  4857 ;; This function is called by:
  4858 ;;		_Receive_get
  4859 ;;		_Send_put
  4860 ;; This function uses a non-reentrant model
  4861 ;;
  4862                           
  4863                           	psect	text19
  4864  001BCA                     __ptext19:
  4865                           	opt stack 0
  4866  001BCA                     _UART_buff_get:
  4867                           	opt stack 19
  4868                           
  4869                           ;UART.c: 84: unsigned char c;
  4870                           ;UART.c: 85: if (_this->count > 0) {
  4871                           
  4872                           ;incstack = 0
  4873  001BCA  0100               	movlb	0	; () banked
  4874  001BCC  EE20 F0CC          	lfsr	2,204
  4875  001BD0  51D8               	movf	UART_buff_get@_this& (0+255),w,b
  4876  001BD2  26D9               	addwf	fsr2l,f,c
  4877  001BD4  51D9               	movf	(UART_buff_get@_this+1)& (0+255),w,b
  4878  001BD6  22DA               	addwfc	fsr2h,f,c
  4879  001BD8  0E01               	movlw	1
  4880  001BDA  BEDB               	btfsc	plusw2,7,c
  4881  001BDC  D048               	goto	l3834
  4882  001BDE  0E01               	movlw	1
  4883  001BE0  50DB               	movf	plusw2,w,c
  4884  001BE2  E103               	bnz	u3130
  4885  001BE4  04DE               	decf	postinc2,w,c
  4886  001BE6  A0D8               	btfss	status,0,c
  4887  001BE8  D042               	goto	l3834
  4888  001BEA                     u3130:
  4889                           
  4890                           ; BSR set to: 0
  4891                           ;UART.c: 86: c = _this->buf[_this->tail];
  4892  001BEA  0100               	movlb	0	; () banked
  4893  001BEC  EE20 F0CA          	lfsr	2,202
  4894  001BF0  51D8               	movf	UART_buff_get@_this& (0+255),w,b
  4895  001BF2  26D9               	addwf	fsr2l,f,c
  4896  001BF4  51D9               	movf	(UART_buff_get@_this+1)& (0+255),w,b
  4897  001BF6  22DA               	addwfc	fsr2h,f,c
  4898  001BF8  CFDE F0DA          	movff	postinc2,??_UART_buff_get
  4899  001BFC  CFDD F0DB          	movff	postdec2,??_UART_buff_get+1
  4900  001C00  0100               	movlb	0	; () banked
  4901  001C02  51DA               	movf	??_UART_buff_get& (0+255),w,b
  4902  001C04  0100               	movlb	0	; () banked
  4903  001C06  25D8               	addwf	UART_buff_get@_this& (0+255),w,b
  4904  001C08  6ED9               	movwf	fsr2l,c
  4905  001C0A  0100               	movlb	0	; () banked
  4906  001C0C  51DB               	movf	(??_UART_buff_get+1)& (0+255),w,b
  4907  001C0E  0100               	movlb	0	; () banked
  4908  001C10  21D9               	addwfc	(UART_buff_get@_this+1)& (0+255),w,b
  4909  001C12  6EDA               	movwf	fsr2h,c
  4910  001C14  50DF               	movf	indf2,w,c
  4911  001C16  0100               	movlb	0	; () banked
  4912  001C18  6FDC               	movwf	UART_buff_get@c& (0+255),b
  4913                           
  4914                           ; BSR set to: 0
  4915                           ;UART.c: 87: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4916  001C1A  0100               	movlb	0	; () banked
  4917  001C1C  EE20 F0CA          	lfsr	2,202
  4918  001C20  51D8               	movf	UART_buff_get@_this& (0+255),w,b
  4919  001C22  26D9               	addwf	fsr2l,f,c
  4920  001C24  51D9               	movf	(UART_buff_get@_this+1)& (0+255),w,b
  4921  001C26  22DA               	addwfc	fsr2h,f,c
  4922  001C28  CFDE F0D2          	movff	postinc2,UART_buff_modulo_inc@value
  4923  001C2C  CFDD F0D3          	movff	postdec2,UART_buff_modulo_inc@value+1
  4924  001C30  0E00               	movlw	0
  4925  001C32  0100               	movlb	0	; () banked
  4926  001C34  6FD5               	movwf	(UART_buff_modulo_inc@modulus+1)& (0+255),b
  4927  001C36  0EC8               	movlw	200
  4928  001C38  6FD4               	movwf	UART_buff_modulo_inc@modulus& (0+255),b
  4929  001C3A  ECFC  F010         	call	_UART_buff_modulo_inc	;wreg free
  4930  001C3E  0100               	movlb	0	; () banked
  4931  001C40  EE20 F0CA          	lfsr	2,202
  4932  001C44  51D8               	movf	UART_buff_get@_this& (0+255),w,b
  4933  001C46  26D9               	addwf	fsr2l,f,c
  4934  001C48  51D9               	movf	(UART_buff_get@_this+1)& (0+255),w,b
  4935  001C4A  22DA               	addwfc	fsr2h,f,c
  4936  001C4C  0100               	movlb	0	; () banked
  4937  001C4E  C0D2  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4938  001C52  0100               	movlb	0	; () banked
  4939  001C54  C0D3  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;UART.c: 88: --_this->count;
  4943  001C58  0100               	movlb	0	; () banked
  4944  001C5A  EE20 F0CC          	lfsr	2,204
  4945  001C5E  51D8               	movf	UART_buff_get@_this& (0+255),w,b
  4946  001C60  26D9               	addwf	fsr2l,f,c
  4947  001C62  51D9               	movf	(UART_buff_get@_this+1)& (0+255),w,b
  4948  001C64  22DA               	addwfc	fsr2h,f,c
  4949  001C66  06DE               	decf	postinc2,f,c
  4950  001C68  0E00               	movlw	0
  4951  001C6A  5ADD               	subwfb	postdec2,f,c
  4952                           
  4953                           ;UART.c: 89: } else {
  4954  001C6C  D003               	goto	l793
  4955  001C6E                     l3834:
  4956                           
  4957                           ; BSR set to: 0
  4958                           ;UART.c: 90: c = 0;
  4959  001C6E  0E00               	movlw	0
  4960  001C70  0100               	movlb	0	; () banked
  4961  001C72  6FDC               	movwf	UART_buff_get@c& (0+255),b
  4962  001C74                     l793:
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;UART.c: 91: }
  4966                           ;UART.c: 92: return (c);
  4967  001C74  0100               	movlb	0	; () banked
  4968  001C76  51DC               	movf	UART_buff_get@c& (0+255),w,b
  4969  001C78  0012               	return	
  4970  001C7A                     __end_of_UART_buff_get:
  4971                           	opt stack 0
  4972                           tosu	equ	0xFFF
  4973                           tosh	equ	0xFFE
  4974                           tosl	equ	0xFFD
  4975                           pclath	equ	0xFFA
  4976                           tblptru	equ	0xFF8
  4977                           tblptrh	equ	0xFF7
  4978                           tblptrl	equ	0xFF6
  4979                           tablat	equ	0xFF5
  4980                           prodh	equ	0xFF4
  4981                           prodl	equ	0xFF3
  4982                           intcon	equ	0xFF2
  4983                           postinc0	equ	0xFEE
  4984                           wreg	equ	0xFE8
  4985                           indf2	equ	0xFDF
  4986                           postinc2	equ	0xFDE
  4987                           postdec2	equ	0xFDD
  4988                           plusw2	equ	0xFDB
  4989                           fsr2h	equ	0xFDA
  4990                           fsr2l	equ	0xFD9
  4991                           status	equ	0xFD8
  4992                           
  4993 ;; *************** function _UART_buff_modulo_inc *****************
  4994 ;; Defined at:
  4995 ;;		line 108 in file "UART.c"
  4996 ;; Parameters:    Size  Location     Type
  4997 ;;  value           2    0[BANK0 ] const unsigned int 
  4998 ;;  modulus         2    2[BANK0 ] const unsigned int 
  4999 ;; Auto vars:     Size  Location     Type
  5000 ;;  my_value        2    4[BANK0 ] unsigned int 
  5001 ;; Return value:  Size  Location     Type
  5002 ;;                  2    0[BANK0 ] unsigned int 
  5003 ;; Registers used:
  5004 ;;		wreg, status,2, status,0
  5005 ;; Tracked objects:
  5006 ;;		On entry : 0/0
  5007 ;;		On exit  : 0/0
  5008 ;;		Unchanged: 0/0
  5009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5010 ;;      Params:         0       4       0       0       0       0       0
  5011 ;;      Locals:         0       2       0       0       0       0       0
  5012 ;;      Temps:          0       0       0       0       0       0       0
  5013 ;;      Totals:         0       6       0       0       0       0       0
  5014 ;;Total ram usage:        6 bytes
  5015 ;; Hardware stack levels used:    1
  5016 ;; Hardware stack levels required when called:    6
  5017 ;; This function calls:
  5018 ;;		Nothing
  5019 ;; This function is called by:
  5020 ;;		_UART_buff_put
  5021 ;;		_UART_buff_get
  5022 ;; This function uses a non-reentrant model
  5023 ;;
  5024                           
  5025                           	psect	text20
  5026  0021F8                     __ptext20:
  5027                           	opt stack 0
  5028  0021F8                     _UART_buff_modulo_inc:
  5029                           	opt stack 19
  5030                           
  5031                           ;UART.c: 109: unsigned int my_value = value + 1;
  5032                           
  5033                           ; BSR set to: 0
  5034                           ;incstack = 0
  5035  0021F8  0E01               	movlw	1
  5036  0021FA  0100               	movlb	0	; () banked
  5037  0021FC  25D2               	addwf	UART_buff_modulo_inc@value& (0+255),w,b
  5038  0021FE  0100               	movlb	0	; () banked
  5039  002200  6FD6               	movwf	UART_buff_modulo_inc@my_value& (0+255),b
  5040  002202  0E00               	movlw	0
  5041  002204  0100               	movlb	0	; () banked
  5042  002206  21D3               	addwfc	(UART_buff_modulo_inc@value+1)& (0+255),w,b
  5043  002208  0100               	movlb	0	; () banked
  5044  00220A  6FD7               	movwf	(UART_buff_modulo_inc@my_value+1)& (0+255),b
  5045                           
  5046                           ;UART.c: 110: if (my_value >= modulus) {
  5047  00220C  0100               	movlb	0	; () banked
  5048  00220E  51D4               	movf	UART_buff_modulo_inc@modulus& (0+255),w,b
  5049  002210  0100               	movlb	0	; () banked
  5050  002212  5DD6               	subwf	UART_buff_modulo_inc@my_value& (0+255),w,b
  5051  002214  0100               	movlb	0	; () banked
  5052  002216  51D5               	movf	(UART_buff_modulo_inc@modulus+1)& (0+255),w,b
  5053  002218  0100               	movlb	0	; () banked
  5054  00221A  59D7               	subwfb	(UART_buff_modulo_inc@my_value+1)& (0+255),w,b
  5055  00221C  A0D8               	btfss	status,0,c
  5056  00221E  D005               	goto	l3792
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;UART.c: 111: my_value = 0;
  5060  002220  0E00               	movlw	0
  5061  002222  0100               	movlb	0	; () banked
  5062  002224  6FD7               	movwf	(UART_buff_modulo_inc@my_value+1)& (0+255),b
  5063  002226  0E00               	movlw	0
  5064  002228  6FD6               	movwf	UART_buff_modulo_inc@my_value& (0+255),b
  5065  00222A                     l3792:
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;UART.c: 112: }
  5069                           ;UART.c: 113: return (my_value);
  5070  00222A  C0D6  F0D2         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  5071  00222E  C0D7  F0D3         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  5072  002232  0012               	return	
  5073  002234                     __end_of_UART_buff_modulo_inc:
  5074                           	opt stack 0
  5075                           tosu	equ	0xFFF
  5076                           tosh	equ	0xFFE
  5077                           tosl	equ	0xFFD
  5078                           pclath	equ	0xFFA
  5079                           tblptru	equ	0xFF8
  5080                           tblptrh	equ	0xFF7
  5081                           tblptrl	equ	0xFF6
  5082                           tablat	equ	0xFF5
  5083                           prodh	equ	0xFF4
  5084                           prodl	equ	0xFF3
  5085                           intcon	equ	0xFF2
  5086                           postinc0	equ	0xFEE
  5087                           wreg	equ	0xFE8
  5088                           indf2	equ	0xFDF
  5089                           postinc2	equ	0xFDE
  5090                           postdec2	equ	0xFDD
  5091                           plusw2	equ	0xFDB
  5092                           fsr2h	equ	0xFDA
  5093                           fsr2l	equ	0xFD9
  5094                           status	equ	0xFD8
  5095                           
  5096 ;; *************** function _Receive_available *****************
  5097 ;; Defined at:
  5098 ;;		line 124 in file "UART.c"
  5099 ;; Parameters:    Size  Location     Type
  5100 ;;		None
  5101 ;; Auto vars:     Size  Location     Type
  5102 ;;		None
  5103 ;; Return value:  Size  Location     Type
  5104 ;;                  2    2[BANK0 ] int 
  5105 ;; Registers used:
  5106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5107 ;; Tracked objects:
  5108 ;;		On entry : 0/0
  5109 ;;		On exit  : 0/0
  5110 ;;		Unchanged: 0/0
  5111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5112 ;;      Params:         0       2       0       0       0       0       0
  5113 ;;      Locals:         0       0       0       0       0       0       0
  5114 ;;      Temps:          0       0       0       0       0       0       0
  5115 ;;      Totals:         0       2       0       0       0       0       0
  5116 ;;Total ram usage:        2 bytes
  5117 ;; Hardware stack levels used:    1
  5118 ;; Hardware stack levels required when called:    7
  5119 ;; This function calls:
  5120 ;;		_UART_buff_size
  5121 ;; This function is called by:
  5122 ;;		_SYSTEM_Initialize
  5123 ;;		_CRCcheck
  5124 ;;		_receiveData
  5125 ;; This function uses a non-reentrant model
  5126 ;;
  5127                           
  5128                           	psect	text21
  5129  002462                     __ptext21:
  5130                           	opt stack 0
  5131  002462                     _Receive_available:
  5132                           	opt stack 21
  5133                           
  5134                           ;UART.c: 125: return UART_buff_size(&input_buffer);
  5135                           
  5136                           ; BSR set to: 0
  5137                           ;incstack = 0
  5138  002462  0E00               	movlw	low _input_buffer
  5139  002464  0100               	movlb	0	; () banked
  5140  002466  6FD2               	movwf	UART_buff_size@_this& (0+255),b
  5141  002468  0E03               	movlw	high _input_buffer
  5142  00246A  0100               	movlb	0	; () banked
  5143  00246C  6FD3               	movwf	(UART_buff_size@_this+1)& (0+255),b
  5144  00246E  EC3E  F012         	call	_UART_buff_size	;wreg free
  5145  002472  C0D2  F0D4         	movff	?_UART_buff_size,?_Receive_available
  5146  002476  C0D3  F0D5         	movff	?_UART_buff_size+1,?_Receive_available+1
  5147  00247A  0012               	return	
  5148  00247C                     __end_of_Receive_available:
  5149                           	opt stack 0
  5150                           tosu	equ	0xFFF
  5151                           tosh	equ	0xFFE
  5152                           tosl	equ	0xFFD
  5153                           pclath	equ	0xFFA
  5154                           tblptru	equ	0xFF8
  5155                           tblptrh	equ	0xFF7
  5156                           tblptrl	equ	0xFF6
  5157                           tablat	equ	0xFF5
  5158                           prodh	equ	0xFF4
  5159                           prodl	equ	0xFF3
  5160                           intcon	equ	0xFF2
  5161                           postinc0	equ	0xFEE
  5162                           wreg	equ	0xFE8
  5163                           indf2	equ	0xFDF
  5164                           postinc2	equ	0xFDE
  5165                           postdec2	equ	0xFDD
  5166                           plusw2	equ	0xFDB
  5167                           fsr2h	equ	0xFDA
  5168                           fsr2l	equ	0xFD9
  5169                           status	equ	0xFD8
  5170                           
  5171 ;; *************** function _UART_buff_size *****************
  5172 ;; Defined at:
  5173 ;;		line 104 in file "UART.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;  _this           2    0[BANK0 ] PTR struct UART_ring_buf
  5176 ;;		 -> output_buffer(206), input_buffer(206), 
  5177 ;; Auto vars:     Size  Location     Type
  5178 ;;		None
  5179 ;; Return value:  Size  Location     Type
  5180 ;;                  2    0[BANK0 ] int 
  5181 ;; Registers used:
  5182 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5183 ;; Tracked objects:
  5184 ;;		On entry : 0/0
  5185 ;;		On exit  : 0/0
  5186 ;;		Unchanged: 0/0
  5187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5188 ;;      Params:         0       2       0       0       0       0       0
  5189 ;;      Locals:         0       0       0       0       0       0       0
  5190 ;;      Temps:          0       0       0       0       0       0       0
  5191 ;;      Totals:         0       2       0       0       0       0       0
  5192 ;;Total ram usage:        2 bytes
  5193 ;; Hardware stack levels used:    1
  5194 ;; Hardware stack levels required when called:    6
  5195 ;; This function calls:
  5196 ;;		Nothing
  5197 ;; This function is called by:
  5198 ;;		_Receive_available
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           	psect	text22
  5203  00247C                     __ptext22:
  5204                           	opt stack 0
  5205  00247C                     _UART_buff_size:
  5206                           	opt stack 21
  5207                           
  5208                           ;UART.c: 105: return (_this->count);
  5209                           
  5210                           ;incstack = 0
  5211  00247C  0100               	movlb	0	; () banked
  5212  00247E  EE20 F0CC          	lfsr	2,204
  5213  002482  51D2               	movf	UART_buff_size@_this& (0+255),w,b
  5214  002484  26D9               	addwf	fsr2l,f,c
  5215  002486  51D3               	movf	(UART_buff_size@_this+1)& (0+255),w,b
  5216  002488  22DA               	addwfc	fsr2h,f,c
  5217  00248A  CFDE F0D2          	movff	postinc2,?_UART_buff_size
  5218  00248E  CFDD F0D3          	movff	postdec2,?_UART_buff_size+1
  5219  002492  0012               	return	
  5220  002494                     __end_of_UART_buff_size:
  5221                           	opt stack 0
  5222                           tosu	equ	0xFFF
  5223                           tosh	equ	0xFFE
  5224                           tosl	equ	0xFFD
  5225                           pclath	equ	0xFFA
  5226                           tblptru	equ	0xFF8
  5227                           tblptrh	equ	0xFF7
  5228                           tblptrl	equ	0xFF6
  5229                           tablat	equ	0xFF5
  5230                           prodh	equ	0xFF4
  5231                           prodl	equ	0xFF3
  5232                           intcon	equ	0xFF2
  5233                           postinc0	equ	0xFEE
  5234                           wreg	equ	0xFE8
  5235                           indf2	equ	0xFDF
  5236                           postinc2	equ	0xFDE
  5237                           postdec2	equ	0xFDD
  5238                           plusw2	equ	0xFDB
  5239                           fsr2h	equ	0xFDA
  5240                           fsr2l	equ	0xFD9
  5241                           status	equ	0xFD8
  5242                           
  5243 ;; *************** function _CRC8 *****************
  5244 ;; Defined at:
  5245 ;;		line 34 in file "FastTransfer.c"
  5246 ;; Parameters:    Size  Location     Type
  5247 ;;  data            2    0[BANK0 ] PTR const unsigned char 
  5248 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_1410(3), receiveData@holder(3), 
  5249 ;;		 -> rx_buffer(200), ring_buffer(206), 
  5250 ;;  len             1    2[BANK0 ] unsigned char 
  5251 ;; Auto vars:     Size  Location     Type
  5252 ;;  sum             1    3[BANK0 ] unsigned char 
  5253 ;;  tempI           1    5[BANK0 ] unsigned char 
  5254 ;;  extract         1    4[BANK0 ] unsigned char 
  5255 ;;  crc             1    6[BANK0 ] unsigned char 
  5256 ;; Return value:  Size  Location     Type
  5257 ;;                  1    wreg      unsigned char 
  5258 ;; Registers used:
  5259 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5260 ;; Tracked objects:
  5261 ;;		On entry : 0/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5265 ;;      Params:         0       3       0       0       0       0       0
  5266 ;;      Locals:         0       4       0       0       0       0       0
  5267 ;;      Temps:          0       0       0       0       0       0       0
  5268 ;;      Totals:         0       7       0       0       0       0       0
  5269 ;;Total ram usage:        7 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; Hardware stack levels required when called:    6
  5272 ;; This function calls:
  5273 ;;		Nothing
  5274 ;; This function is called by:
  5275 ;;		_sendData
  5276 ;;		_receiveData
  5277 ;;		_CRCcheck
  5278 ;; This function uses a non-reentrant model
  5279 ;;
  5280                           
  5281                           	psect	text23
  5282  001F02                     __ptext23:
  5283                           	opt stack 0
  5284  001F02                     _CRC8:
  5285                           	opt stack 21
  5286                           
  5287                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;incstack = 0
  5291  001F02  0E00               	movlw	0
  5292  001F04  0100               	movlb	0	; () banked
  5293  001F06  6FD8               	movwf	CRC8@crc& (0+255),b
  5294                           
  5295                           ;FastTransfer.c: 36: while (len--) {
  5296  001F08  D02A               	goto	l3860
  5297  001F0A                     l3844:
  5298                           
  5299                           ; BSR set to: 0
  5300                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  5301  001F0A  C0D2  FFD9         	movff	CRC8@data,fsr2l
  5302  001F0E  C0D3  FFDA         	movff	CRC8@data+1,fsr2h
  5303  001F12  50DF               	movf	indf2,w,c
  5304  001F14  0100               	movlb	0	; () banked
  5305  001F16  6FD6               	movwf	CRC8@extract& (0+255),b
  5306                           
  5307                           ; BSR set to: 0
  5308  001F18  0100               	movlb	0	; () banked
  5309  001F1A  4BD2               	infsnz	CRC8@data& (0+255),f,b
  5310  001F1C  2BD3               	incf	(CRC8@data+1)& (0+255),f,b
  5311                           
  5312                           ; BSR set to: 0
  5313                           ;FastTransfer.c: 38: unsigned char tempI;
  5314                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  5315  001F1E  0E08               	movlw	8
  5316  001F20  0100               	movlb	0	; () banked
  5317  001F22  6FD7               	movwf	CRC8@tempI& (0+255),b
  5318  001F24  D017               	goto	l3858
  5319  001F26                     l3850:
  5320                           
  5321                           ; BSR set to: 0
  5322                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  5323  001F26  0100               	movlb	0	; () banked
  5324  001F28  51D8               	movf	CRC8@crc& (0+255),w,b
  5325  001F2A  0100               	movlb	0	; () banked
  5326  001F2C  19D6               	xorwf	CRC8@extract& (0+255),w,b
  5327  001F2E  0B01               	andlw	1
  5328  001F30  0100               	movlb	0	; () banked
  5329  001F32  6FD5               	movwf	CRC8@sum& (0+255),b
  5330                           
  5331                           ;FastTransfer.c: 41: crc >>= 1;
  5332  001F34  0100               	movlb	0	; () banked
  5333  001F36  90D8               	bcf	status,0,c
  5334  001F38  33D8               	rrcf	CRC8@crc& (0+255),f,b
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;FastTransfer.c: 42: if (sum) {
  5338  001F3A  0100               	movlb	0	; () banked
  5339  001F3C  51D5               	movf	CRC8@sum& (0+255),w,b
  5340  001F3E  0100               	movlb	0	; () banked
  5341  001F40  B4D8               	btfsc	status,2,c
  5342  001F42  D003               	goto	l468
  5343                           
  5344                           ; BSR set to: 0
  5345                           ;FastTransfer.c: 43: crc ^= 0x8C;
  5346  001F44  0E8C               	movlw	140
  5347  001F46  0100               	movlb	0	; () banked
  5348  001F48  1BD8               	xorwf	CRC8@crc& (0+255),f,b
  5349  001F4A                     l468:
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;FastTransfer.c: 44: }
  5353                           ;FastTransfer.c: 45: extract >>= 1;
  5354  001F4A  0100               	movlb	0	; () banked
  5355  001F4C  90D8               	bcf	status,0,c
  5356  001F4E  33D6               	rrcf	CRC8@extract& (0+255),f,b
  5357                           
  5358                           ; BSR set to: 0
  5359  001F50  0100               	movlb	0	; () banked
  5360  001F52  07D7               	decf	CRC8@tempI& (0+255),f,b
  5361  001F54                     l3858:
  5362                           
  5363                           ; BSR set to: 0
  5364  001F54  0100               	movlb	0	; () banked
  5365  001F56  51D7               	movf	CRC8@tempI& (0+255),w,b
  5366  001F58  0100               	movlb	0	; () banked
  5367  001F5A  A4D8               	btfss	status,2,c
  5368  001F5C  D7E4               	goto	l3850
  5369  001F5E                     l3860:
  5370                           
  5371                           ; BSR set to: 0
  5372  001F5E  0100               	movlb	0	; () banked
  5373  001F60  07D4               	decf	CRC8@len& (0+255),f,b
  5374  001F62  0100               	movlb	0	; () banked
  5375  001F64  29D4               	incf	CRC8@len& (0+255),w,b
  5376  001F66  A4D8               	btfss	status,2,c
  5377  001F68  D7D0               	goto	l3844
  5378                           
  5379                           ; BSR set to: 0
  5380                           ;FastTransfer.c: 46: }
  5381                           ;FastTransfer.c: 47: }
  5382                           ;FastTransfer.c: 48: return crc;
  5383                           
  5384                           ; BSR set to: 0
  5385  001F6A  0100               	movlb	0	; () banked
  5386  001F6C  51D8               	movf	CRC8@crc& (0+255),w,b
  5387  001F6E  0012               	return	
  5388  001F70                     __end_of_CRC8:
  5389                           	opt stack 0
  5390                           tosu	equ	0xFFF
  5391                           tosh	equ	0xFFE
  5392                           tosl	equ	0xFFD
  5393                           pclath	equ	0xFFA
  5394                           tblptru	equ	0xFF8
  5395                           tblptrh	equ	0xFF7
  5396                           tblptrl	equ	0xFF6
  5397                           tablat	equ	0xFF5
  5398                           prodh	equ	0xFF4
  5399                           prodl	equ	0xFF3
  5400                           intcon	equ	0xFF2
  5401                           postinc0	equ	0xFEE
  5402                           wreg	equ	0xFE8
  5403                           indf2	equ	0xFDF
  5404                           postinc2	equ	0xFDE
  5405                           postdec2	equ	0xFDD
  5406                           plusw2	equ	0xFDB
  5407                           fsr2h	equ	0xFDA
  5408                           fsr2l	equ	0xFD9
  5409                           status	equ	0xFD8
  5410                           
  5411 ;; *************** function _SYSTEM_Initialize *****************
  5412 ;; Defined at:
  5413 ;;		line 113 in file "mcc_generated_files/mcc.c"
  5414 ;; Parameters:    Size  Location     Type
  5415 ;;		None
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;		None
  5418 ;; Return value:  Size  Location     Type
  5419 ;;                  1    wreg      void 
  5420 ;; Registers used:
  5421 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5422 ;; Tracked objects:
  5423 ;;		On entry : 0/0
  5424 ;;		On exit  : 0/0
  5425 ;;		Unchanged: 0/0
  5426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5427 ;;      Params:         0       0       0       0       0       0       0
  5428 ;;      Locals:         0       0       0       0       0       0       0
  5429 ;;      Temps:          0       0       0       0       0       0       0
  5430 ;;      Totals:         0       0       0       0       0       0       0
  5431 ;;Total ram usage:        0 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; Hardware stack levels required when called:    9
  5434 ;; This function calls:
  5435 ;;		_EUSART1_Initialize
  5436 ;;		_INTERRUPT_Initialize
  5437 ;;		_OSCILLATOR_Initialize
  5438 ;;		_PIN_MANAGER_Initialize
  5439 ;;		_begin
  5440 ;; This function is called by:
  5441 ;;		_main
  5442 ;; This function uses a non-reentrant model
  5443 ;;
  5444                           
  5445                           	psect	text24
  5446  001FD4                     __ptext24:
  5447                           	opt stack 0
  5448  001FD4                     _SYSTEM_Initialize:
  5449                           	opt stack 21
  5450                           
  5451                           ;mcc.c: 114: OSCILLATOR_Initialize();
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;incstack = 0
  5455  001FD4  EC67  F012         	call	_OSCILLATOR_Initialize	;wreg free
  5456                           
  5457                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  5458  001FD8  EC3D  F00E         	call	_PIN_MANAGER_Initialize	;wreg free
  5459                           
  5460                           ;mcc.c: 116: INTERRUPT_Initialize();
  5461  001FDC  EC6E  F012         	call	_INTERRUPT_Initialize	;wreg free
  5462                           
  5463                           ;mcc.c: 117: EUSART1_Initialize();
  5464  001FE0  ECBC  F010         	call	_EUSART1_Initialize	;wreg free
  5465                           
  5466                           ;mcc.c: 118: begin(receiveArray, sizeof (receiveArray), 5, 0, Send_put, Receive_get, Rec
      +                          eive_available, Receive_peek);
  5467  001FE4  0E99               	movlw	low _receiveArray
  5468  001FE6  0100               	movlb	0	; () banked
  5469  001FE8  6FDA               	movwf	begin@ptr& (0+255),b
  5470  001FEA  0E00               	movlw	high _receiveArray
  5471  001FEC  0100               	movlb	0	; () banked
  5472  001FEE  6FDB               	movwf	(begin@ptr+1)& (0+255),b
  5473  001FF0  0E28               	movlw	40
  5474  001FF2  0100               	movlb	0	; () banked
  5475  001FF4  6FDC               	movwf	begin@maxSize& (0+255),b
  5476  001FF6  0E05               	movlw	5
  5477  001FF8  0100               	movlb	0	; () banked
  5478  001FFA  6FDD               	movwf	begin@givenAddress& (0+255),b
  5479  001FFC  0E00               	movlw	0
  5480  001FFE  0100               	movlb	0	; () banked
  5481  002000  6FDE               	movwf	begin@error& (0+255),b
  5482  002002  0E34               	movlw	low _Send_put
  5483  002004  0100               	movlb	0	; () banked
  5484  002006  6FDF               	movwf	begin@stufftosend& (0+255),b
  5485  002008  0E22               	movlw	high _Send_put
  5486  00200A  0100               	movlb	0	; () banked
  5487  00200C  6FE0               	movwf	(begin@stufftosend+1)& (0+255),b
  5488  00200E  0EBC               	movlw	low _Receive_get
  5489  002010  0100               	movlb	0	; () banked
  5490  002012  6FE1               	movwf	begin@stufftoreceive& (0+255),b
  5491  002014  0E24               	movlw	high _Receive_get
  5492  002016  0100               	movlb	0	; () banked
  5493  002018  6FE2               	movwf	(begin@stufftoreceive+1)& (0+255),b
  5494  00201A  0E62               	movlw	low _Receive_available
  5495  00201C  0100               	movlb	0	; () banked
  5496  00201E  6FE3               	movwf	begin@stuffavailable& (0+255),b
  5497  002020  0E24               	movlw	high _Receive_available
  5498  002022  0100               	movlb	0	; () banked
  5499  002024  6FE4               	movwf	(begin@stuffavailable+1)& (0+255),b
  5500  002026  0EAA               	movlw	low _Receive_peek
  5501  002028  0100               	movlb	0	; () banked
  5502  00202A  6FE5               	movwf	begin@stuffpeek& (0+255),b
  5503  00202C  0E24               	movlw	high _Receive_peek
  5504  00202E  0100               	movlb	0	; () banked
  5505  002030  6FE6               	movwf	(begin@stuffpeek+1)& (0+255),b
  5506  002032  EC1C  F010         	call	_begin	;wreg free
  5507  002036  0012               	return		;funcret
  5508  002038                     __end_of_SYSTEM_Initialize:
  5509                           	opt stack 0
  5510                           tosu	equ	0xFFF
  5511                           tosh	equ	0xFFE
  5512                           tosl	equ	0xFFD
  5513                           pclath	equ	0xFFA
  5514                           tblptru	equ	0xFF8
  5515                           tblptrh	equ	0xFF7
  5516                           tblptrl	equ	0xFF6
  5517                           tablat	equ	0xFF5
  5518                           prodh	equ	0xFF4
  5519                           prodl	equ	0xFF3
  5520                           intcon	equ	0xFF2
  5521                           postinc0	equ	0xFEE
  5522                           wreg	equ	0xFE8
  5523                           indf2	equ	0xFDF
  5524                           postinc2	equ	0xFDE
  5525                           postdec2	equ	0xFDD
  5526                           plusw2	equ	0xFDB
  5527                           fsr2h	equ	0xFDA
  5528                           fsr2l	equ	0xFD9
  5529                           status	equ	0xFD8
  5530                           
  5531 ;; *************** function _begin *****************
  5532 ;; Defined at:
  5533 ;;		line 18 in file "FastTransfer.c"
  5534 ;; Parameters:    Size  Location     Type
  5535 ;;  ptr             2    8[BANK0 ] PTR volatile int 
  5536 ;;		 -> receiveArray(40), 
  5537 ;;  maxSize         1   10[BANK0 ] unsigned char 
  5538 ;;  givenAddress    1   11[BANK0 ] unsigned char 
  5539 ;;  error           1   12[BANK0 ] unsigned char 
  5540 ;;  stufftosend     2   13[BANK0 ] PTR FTN(unsigned char ,)
  5541 ;;		 -> Send_put(1), 
  5542 ;;  stufftorecei    2   15[BANK0 ] PTR FTN()unsigned char 
  5543 ;;		 -> Receive_get(1), 
  5544 ;;  stuffavailab    2   17[BANK0 ] PTR FTN()int 
  5545 ;;		 -> Receive_available(2), 
  5546 ;;  stuffpeek       2   19[BANK0 ] PTR FTN()unsigned char 
  5547 ;;		 -> Receive_peek(1), 
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;		None
  5550 ;; Return value:  Size  Location     Type
  5551 ;;                  1    wreg      void 
  5552 ;; Registers used:
  5553 ;;		wreg, status,2, status,0, cstack
  5554 ;; Tracked objects:
  5555 ;;		On entry : 0/0
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5559 ;;      Params:         0      13       0       0       0       0       0
  5560 ;;      Locals:         0       0       0       0       0       0       0
  5561 ;;      Temps:          0       0       0       0       0       0       0
  5562 ;;      Totals:         0      13       0       0       0       0       0
  5563 ;;Total ram usage:       13 bytes
  5564 ;; Hardware stack levels used:    1
  5565 ;; Hardware stack levels required when called:    7
  5566 ;; This function calls:
  5567 ;;		___awdiv
  5568 ;; This function is called by:
  5569 ;;		_SYSTEM_Initialize
  5570 ;; This function uses a non-reentrant model
  5571 ;;
  5572                           
  5573                           	psect	text25
  5574  002038                     __ptext25:
  5575                           	opt stack 0
  5576  002038                     _begin:
  5577                           	opt stack 22
  5578                           
  5579                           ;FastTransfer.c: 19: receiveArrayAddress = ptr;
  5580                           
  5581                           ;incstack = 0
  5582  002038  C0DA  F08A         	movff	begin@ptr,_receiveArrayAddress
  5583  00203C  C0DB  F08B         	movff	begin@ptr+1,_receiveArrayAddress+1
  5584                           
  5585                           ;FastTransfer.c: 20: moduleAddress = givenAddress;
  5586  002040  C0DD  F03F         	movff	begin@givenAddress,_moduleAddress
  5587                           
  5588                           ;FastTransfer.c: 21: serial_write = stufftosend;
  5589  002044  C0DF  F038         	movff	begin@stufftosend,_serial_write
  5590  002048  C0E0  F039         	movff	begin@stufftosend+1,_serial_write+1
  5591                           
  5592                           ;FastTransfer.c: 22: serial_available = stuffavailable;
  5593  00204C  C0E3  F08C         	movff	begin@stuffavailable,_serial_available
  5594  002050  C0E4  F08D         	movff	begin@stuffavailable+1,_serial_available+1
  5595                           
  5596                           ;FastTransfer.c: 23: serial_peek = stuffpeek;
  5597  002054  C0E5  F08E         	movff	begin@stuffpeek,_serial_peek
  5598  002058  C0E6  F08F         	movff	begin@stuffpeek+1,_serial_peek+1
  5599                           
  5600                           ;FastTransfer.c: 24: serial_read = stufftoreceive;
  5601  00205C  C0E1  F090         	movff	begin@stufftoreceive,_serial_read
  5602  002060  C0E2  F091         	movff	begin@stufftoreceive+1,_serial_read+1
  5603                           
  5604                           ;FastTransfer.c: 25: maxDataAddress = maxSize / 2;
  5605  002064  C0DC  F0D2         	movff	begin@maxSize,___awdiv@dividend
  5606  002068  0100               	movlb	0	; () banked
  5607  00206A  6BD3               	clrf	(___awdiv@dividend+1)& (0+255),b
  5608  00206C  0E00               	movlw	0
  5609  00206E  0100               	movlb	0	; () banked
  5610  002070  6FD5               	movwf	(___awdiv@divisor+1)& (0+255),b
  5611  002072  0E02               	movlw	2
  5612  002074  6FD4               	movwf	___awdiv@divisor& (0+255),b
  5613  002076  EC86  F00D         	call	___awdiv	;wreg free
  5614  00207A  0100               	movlb	0	; () banked
  5615  00207C  51D2               	movf	?___awdiv& (0+255),w,b
  5616  00207E  0100               	movlb	0	; () banked
  5617  002080  6F94               	movwf	_maxDataAddress& (0+255),b
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;FastTransfer.c: 26: sendStructAddress = (unsigned char*) & ring_buffer;
  5621  002082  0E30               	movlw	low _ring_buffer
  5622  002084  6E36               	movwf	_sendStructAddress,c
  5623  002086  0E01               	movlw	high _ring_buffer
  5624  002088  6E37               	movwf	_sendStructAddress+1,c
  5625                           
  5626                           ; BSR set to: 0
  5627                           ;FastTransfer.c: 27: AKNAKsend = error;
  5628  00208A  C0DE  F092         	movff	begin@error,_AKNAKsend
  5629                           
  5630                           ; BSR set to: 0
  5631                           ;FastTransfer.c: 28: alignErrorCounter = 0;
  5632  00208E  0E00               	movlw	0
  5633  002090  6E31               	movwf	_alignErrorCounter+1,c
  5634  002092  0E00               	movlw	0
  5635  002094  6E30               	movwf	_alignErrorCounter,c
  5636                           
  5637                           ; BSR set to: 0
  5638  002096  0012               	return		;funcret
  5639  002098                     __end_of_begin:
  5640                           	opt stack 0
  5641                           tosu	equ	0xFFF
  5642                           tosh	equ	0xFFE
  5643                           tosl	equ	0xFFD
  5644                           pclath	equ	0xFFA
  5645                           tblptru	equ	0xFF8
  5646                           tblptrh	equ	0xFF7
  5647                           tblptrl	equ	0xFF6
  5648                           tablat	equ	0xFF5
  5649                           prodh	equ	0xFF4
  5650                           prodl	equ	0xFF3
  5651                           intcon	equ	0xFF2
  5652                           postinc0	equ	0xFEE
  5653                           wreg	equ	0xFE8
  5654                           indf2	equ	0xFDF
  5655                           postinc2	equ	0xFDE
  5656                           postdec2	equ	0xFDD
  5657                           plusw2	equ	0xFDB
  5658                           fsr2h	equ	0xFDA
  5659                           fsr2l	equ	0xFD9
  5660                           status	equ	0xFD8
  5661                           
  5662 ;; *************** function ___awdiv *****************
  5663 ;; Defined at:
  5664 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  5665 ;; Parameters:    Size  Location     Type
  5666 ;;  dividend        2    0[BANK0 ] int 
  5667 ;;  divisor         2    2[BANK0 ] int 
  5668 ;; Auto vars:     Size  Location     Type
  5669 ;;  quotient        2    6[BANK0 ] int 
  5670 ;;  sign            1    5[BANK0 ] unsigned char 
  5671 ;;  counter         1    4[BANK0 ] unsigned char 
  5672 ;; Return value:  Size  Location     Type
  5673 ;;                  2    0[BANK0 ] int 
  5674 ;; Registers used:
  5675 ;;		wreg, status,2, status,0
  5676 ;; Tracked objects:
  5677 ;;		On entry : 0/0
  5678 ;;		On exit  : 0/0
  5679 ;;		Unchanged: 0/0
  5680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5681 ;;      Params:         0       4       0       0       0       0       0
  5682 ;;      Locals:         0       4       0       0       0       0       0
  5683 ;;      Temps:          0       0       0       0       0       0       0
  5684 ;;      Totals:         0       8       0       0       0       0       0
  5685 ;;Total ram usage:        8 bytes
  5686 ;; Hardware stack levels used:    1
  5687 ;; Hardware stack levels required when called:    6
  5688 ;; This function calls:
  5689 ;;		Nothing
  5690 ;; This function is called by:
  5691 ;;		_begin
  5692 ;; This function uses a non-reentrant model
  5693 ;;
  5694                           
  5695                           	psect	text26
  5696  001B0C                     __ptext26:
  5697                           	opt stack 0
  5698  001B0C                     ___awdiv:
  5699                           	opt stack 22
  5700                           
  5701                           ; BSR set to: 0
  5702                           ;incstack = 0
  5703  001B0C  0E00               	movlw	0
  5704  001B0E  0100               	movlb	0	; () banked
  5705  001B10  6FD7               	movwf	___awdiv@sign& (0+255),b
  5706                           
  5707                           ; BSR set to: 0
  5708  001B12  0100               	movlb	0	; () banked
  5709  001B14  AFD5               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5710  001B16  D008               	goto	l4040
  5711                           
  5712                           ; BSR set to: 0
  5713  001B18  0100               	movlb	0	; () banked
  5714  001B1A  6DD4               	negf	___awdiv@divisor& (0+255),b
  5715  001B1C  1FD5               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5716  001B1E  B0D8               	btfsc	status,0,c
  5717  001B20  2BD5               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5718                           
  5719                           ; BSR set to: 0
  5720  001B22  0E01               	movlw	1
  5721  001B24  0100               	movlb	0	; () banked
  5722  001B26  6FD7               	movwf	___awdiv@sign& (0+255),b
  5723  001B28                     l4040:
  5724                           
  5725                           ; BSR set to: 0
  5726  001B28  0100               	movlb	0	; () banked
  5727  001B2A  AFD3               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5728  001B2C  D008               	goto	l4046
  5729                           
  5730                           ; BSR set to: 0
  5731  001B2E  0100               	movlb	0	; () banked
  5732  001B30  6DD2               	negf	___awdiv@dividend& (0+255),b
  5733  001B32  1FD3               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5734  001B34  B0D8               	btfsc	status,0,c
  5735  001B36  2BD3               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5736                           
  5737                           ; BSR set to: 0
  5738  001B38  0E01               	movlw	1
  5739  001B3A  0100               	movlb	0	; () banked
  5740  001B3C  1BD7               	xorwf	___awdiv@sign& (0+255),f,b
  5741  001B3E                     l4046:
  5742                           
  5743                           ; BSR set to: 0
  5744  001B3E  0E00               	movlw	0
  5745  001B40  0100               	movlb	0	; () banked
  5746  001B42  6FD9               	movwf	(___awdiv@quotient+1)& (0+255),b
  5747  001B44  0E00               	movlw	0
  5748  001B46  6FD8               	movwf	___awdiv@quotient& (0+255),b
  5749                           
  5750                           ; BSR set to: 0
  5751  001B48  0100               	movlb	0	; () banked
  5752  001B4A  51D4               	movf	___awdiv@divisor& (0+255),w,b
  5753  001B4C  0100               	movlb	0	; () banked
  5754  001B4E  11D5               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5755  001B50  B4D8               	btfsc	status,2,c
  5756  001B52  D02C               	goto	l4068
  5757                           
  5758                           ; BSR set to: 0
  5759  001B54  0E01               	movlw	1
  5760  001B56  0100               	movlb	0	; () banked
  5761  001B58  6FD6               	movwf	___awdiv@counter& (0+255),b
  5762  001B5A  D006               	goto	l4054
  5763  001B5C                     l4052:
  5764                           
  5765                           ; BSR set to: 0
  5766  001B5C  0100               	movlb	0	; () banked
  5767  001B5E  90D8               	bcf	status,0,c
  5768  001B60  37D4               	rlcf	___awdiv@divisor& (0+255),f,b
  5769  001B62  37D5               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5770  001B64  0100               	movlb	0	; () banked
  5771  001B66  2BD6               	incf	___awdiv@counter& (0+255),f,b
  5772  001B68                     l4054:
  5773                           
  5774                           ; BSR set to: 0
  5775  001B68  0100               	movlb	0	; () banked
  5776  001B6A  AFD5               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5777  001B6C  D7F7               	goto	l4052
  5778  001B6E                     l4056:
  5779                           
  5780                           ; BSR set to: 0
  5781  001B6E  0100               	movlb	0	; () banked
  5782  001B70  90D8               	bcf	status,0,c
  5783  001B72  37D8               	rlcf	___awdiv@quotient& (0+255),f,b
  5784  001B74  37D9               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5785                           
  5786                           ; BSR set to: 0
  5787  001B76  0100               	movlb	0	; () banked
  5788  001B78  51D4               	movf	___awdiv@divisor& (0+255),w,b
  5789  001B7A  0100               	movlb	0	; () banked
  5790  001B7C  5DD2               	subwf	___awdiv@dividend& (0+255),w,b
  5791  001B7E  0100               	movlb	0	; () banked
  5792  001B80  51D5               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5793  001B82  0100               	movlb	0	; () banked
  5794  001B84  59D3               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5795  001B86  A0D8               	btfss	status,0,c
  5796  001B88  D00A               	goto	l4064
  5797                           
  5798                           ; BSR set to: 0
  5799  001B8A  0100               	movlb	0	; () banked
  5800  001B8C  51D4               	movf	___awdiv@divisor& (0+255),w,b
  5801  001B8E  0100               	movlb	0	; () banked
  5802  001B90  5FD2               	subwf	___awdiv@dividend& (0+255),f,b
  5803  001B92  0100               	movlb	0	; () banked
  5804  001B94  51D5               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5805  001B96  0100               	movlb	0	; () banked
  5806  001B98  5BD3               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5807                           
  5808                           ; BSR set to: 0
  5809  001B9A  0100               	movlb	0	; () banked
  5810  001B9C  81D8               	bsf	___awdiv@quotient& (0+255),0,b
  5811  001B9E                     l4064:
  5812                           
  5813                           ; BSR set to: 0
  5814  001B9E  0100               	movlb	0	; () banked
  5815  001BA0  90D8               	bcf	status,0,c
  5816  001BA2  33D5               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5817  001BA4  33D4               	rrcf	___awdiv@divisor& (0+255),f,b
  5818                           
  5819                           ; BSR set to: 0
  5820  001BA6  0100               	movlb	0	; () banked
  5821  001BA8  2FD6               	decfsz	___awdiv@counter& (0+255),f,b
  5822  001BAA  D7E1               	goto	l4056
  5823  001BAC                     l4068:
  5824                           
  5825                           ; BSR set to: 0
  5826  001BAC  0100               	movlb	0	; () banked
  5827  001BAE  51D7               	movf	___awdiv@sign& (0+255),w,b
  5828  001BB0  0100               	movlb	0	; () banked
  5829  001BB2  B4D8               	btfsc	status,2,c
  5830  001BB4  D005               	goto	l4072
  5831                           
  5832                           ; BSR set to: 0
  5833  001BB6  0100               	movlb	0	; () banked
  5834  001BB8  6DD8               	negf	___awdiv@quotient& (0+255),b
  5835  001BBA  1FD9               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5836  001BBC  B0D8               	btfsc	status,0,c
  5837  001BBE  2BD9               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5838  001BC0                     l4072:
  5839                           
  5840                           ; BSR set to: 0
  5841  001BC0  C0D8  F0D2         	movff	___awdiv@quotient,?___awdiv
  5842  001BC4  C0D9  F0D3         	movff	___awdiv@quotient+1,?___awdiv+1
  5843  001BC8  0012               	return	
  5844  001BCA                     __end_of___awdiv:
  5845                           	opt stack 0
  5846                           tosu	equ	0xFFF
  5847                           tosh	equ	0xFFE
  5848                           tosl	equ	0xFFD
  5849                           pclath	equ	0xFFA
  5850                           tblptru	equ	0xFF8
  5851                           tblptrh	equ	0xFF7
  5852                           tblptrl	equ	0xFF6
  5853                           tablat	equ	0xFF5
  5854                           prodh	equ	0xFF4
  5855                           prodl	equ	0xFF3
  5856                           intcon	equ	0xFF2
  5857                           postinc0	equ	0xFEE
  5858                           wreg	equ	0xFE8
  5859                           indf2	equ	0xFDF
  5860                           postinc2	equ	0xFDE
  5861                           postdec2	equ	0xFDD
  5862                           plusw2	equ	0xFDB
  5863                           fsr2h	equ	0xFDA
  5864                           fsr2l	equ	0xFD9
  5865                           status	equ	0xFD8
  5866                           
  5867 ;; *************** function _PIN_MANAGER_Initialize *****************
  5868 ;; Defined at:
  5869 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  5870 ;; Parameters:    Size  Location     Type
  5871 ;;		None
  5872 ;; Auto vars:     Size  Location     Type
  5873 ;;		None
  5874 ;; Return value:  Size  Location     Type
  5875 ;;                  1    wreg      void 
  5876 ;; Registers used:
  5877 ;;		wreg, status,2
  5878 ;; Tracked objects:
  5879 ;;		On entry : 0/0
  5880 ;;		On exit  : 0/0
  5881 ;;		Unchanged: 0/0
  5882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5883 ;;      Params:         0       0       0       0       0       0       0
  5884 ;;      Locals:         0       0       0       0       0       0       0
  5885 ;;      Temps:          0       0       0       0       0       0       0
  5886 ;;      Totals:         0       0       0       0       0       0       0
  5887 ;;Total ram usage:        0 bytes
  5888 ;; Hardware stack levels used:    1
  5889 ;; Hardware stack levels required when called:    6
  5890 ;; This function calls:
  5891 ;;		Nothing
  5892 ;; This function is called by:
  5893 ;;		_SYSTEM_Initialize
  5894 ;; This function uses a non-reentrant model
  5895 ;;
  5896                           
  5897                           	psect	text27
  5898  001C7A                     __ptext27:
  5899                           	opt stack 0
  5900  001C7A                     _PIN_MANAGER_Initialize:
  5901                           	opt stack 23
  5902                           
  5903                           ;pin_manager.c: 52: LATA = 0x00;
  5904                           
  5905                           ; BSR set to: 0
  5906                           ;incstack = 0
  5907  001C7A  0E00               	movlw	0
  5908  001C7C  6E89               	movwf	3977,c	;volatile
  5909                           
  5910                           ;pin_manager.c: 53: TRISA = 0xF7;
  5911  001C7E  0EF7               	movlw	247
  5912  001C80  6E92               	movwf	3986,c	;volatile
  5913                           
  5914                           ;pin_manager.c: 54: ANSELA = 0x27;
  5915  001C82  0E27               	movlw	39
  5916  001C84  010F               	movlb	15	; () banked
  5917  001C86  6F38               	movwf	56,b	;volatile
  5918                           
  5919                           ;pin_manager.c: 56: LATB = 0x01;
  5920  001C88  0E01               	movlw	1
  5921  001C8A  6E8A               	movwf	3978,c	;volatile
  5922                           
  5923                           ;pin_manager.c: 57: TRISB = 0xFE;
  5924  001C8C  0EFE               	movlw	254
  5925  001C8E  6E93               	movwf	3987,c	;volatile
  5926                           
  5927                           ;pin_manager.c: 58: ANSELB = 0x3E;
  5928  001C90  0E3E               	movlw	62
  5929  001C92  010F               	movlb	15	; () banked
  5930  001C94  6F39               	movwf	57,b	;volatile
  5931                           
  5932                           ;pin_manager.c: 59: WPUB = 0x00;
  5933  001C96  0E00               	movlw	0
  5934  001C98  6E61               	movwf	3937,c	;volatile
  5935                           
  5936                           ;pin_manager.c: 61: LATC = 0x00;
  5937  001C9A  0E00               	movlw	0
  5938  001C9C  6E8B               	movwf	3979,c	;volatile
  5939                           
  5940                           ;pin_manager.c: 62: TRISC = 0xDF;
  5941  001C9E  0EDF               	movlw	223
  5942  001CA0  6E94               	movwf	3988,c	;volatile
  5943                           
  5944                           ;pin_manager.c: 63: ANSELC = 0x1C;
  5945  001CA2  0E1C               	movlw	28
  5946  001CA4  010F               	movlb	15	; () banked
  5947  001CA6  6F3A               	movwf	58,b	;volatile
  5948                           
  5949                           ;pin_manager.c: 65: LATD = 0x00;
  5950  001CA8  0E00               	movlw	0
  5951  001CAA  6E8C               	movwf	3980,c	;volatile
  5952                           
  5953                           ;pin_manager.c: 66: TRISD = 0x0F;
  5954  001CAC  0E0F               	movlw	15
  5955  001CAE  6E95               	movwf	3989,c	;volatile
  5956                           
  5957                           ;pin_manager.c: 67: ANSELD = 0x0F;
  5958  001CB0  0E0F               	movlw	15
  5959  001CB2  010F               	movlb	15	; () banked
  5960  001CB4  6F3B               	movwf	59,b	;volatile
  5961                           
  5962                           ;pin_manager.c: 69: LATE = 0x00;
  5963  001CB6  0E00               	movlw	0
  5964  001CB8  6E8D               	movwf	3981,c	;volatile
  5965                           
  5966                           ;pin_manager.c: 70: TRISE = 0x07;
  5967  001CBA  0E07               	movlw	7
  5968  001CBC  6E96               	movwf	3990,c	;volatile
  5969                           
  5970                           ;pin_manager.c: 71: ANSELE = 0x07;
  5971  001CBE  0E07               	movlw	7
  5972  001CC0  010F               	movlb	15	; () banked
  5973  001CC2  6F3C               	movwf	60,b	;volatile
  5974                           
  5975                           ; BSR set to: 15
  5976                           ;pin_manager.c: 72: TRISCbits.RC6 = 1;
  5977  001CC4  8C94               	bsf	3988,6,c	;volatile
  5978                           
  5979                           ; BSR set to: 15
  5980                           ;pin_manager.c: 73: TRISCbits.RC7 = 1;
  5981  001CC6  8E94               	bsf	3988,7,c	;volatile
  5982                           
  5983                           ; BSR set to: 15
  5984                           ;pin_manager.c: 74: TRISCbits.RC5 = 1;
  5985  001CC8  8A94               	bsf	3988,5,c	;volatile
  5986                           
  5987                           ; BSR set to: 15
  5988                           ;pin_manager.c: 75: TRISCbits.RC1 = 0;
  5989  001CCA  9294               	bcf	3988,1,c	;volatile
  5990                           
  5991                           ; BSR set to: 15
  5992                           ;pin_manager.c: 76: LATCbits.LATC5 = 1;
  5993  001CCC  8A8B               	bsf	3979,5,c	;volatile
  5994                           
  5995                           ; BSR set to: 15
  5996                           ;pin_manager.c: 77: LATCbits.LATC6 = 1;
  5997  001CCE  8C8B               	bsf	3979,6,c	;volatile
  5998                           
  5999                           ; BSR set to: 15
  6000                           ;pin_manager.c: 78: LATCbits.LATC7 = 1;
  6001  001CD0  8E8B               	bsf	3979,7,c	;volatile
  6002                           
  6003                           ; BSR set to: 15
  6004                           ;pin_manager.c: 79: ANSELCbits.ANSC5 =0;
  6005  001CD2  010F               	movlb	15	; () banked
  6006  001CD4  9B3A               	bcf	58,5,b	;volatile
  6007                           
  6008                           ; BSR set to: 15
  6009                           ;pin_manager.c: 80: ANSELCbits.ANSC6 =0;
  6010  001CD6  010F               	movlb	15	; () banked
  6011  001CD8  9D3A               	bcf	58,6,b	;volatile
  6012                           
  6013                           ; BSR set to: 15
  6014                           ;pin_manager.c: 81: ANSELCbits.ANSC7 =0;
  6015  001CDA  010F               	movlb	15	; () banked
  6016  001CDC  9F3A               	bcf	58,7,b	;volatile
  6017                           
  6018                           ; BSR set to: 15
  6019                           ;pin_manager.c: 83: INTCON2bits.nRBPU = 0x01;
  6020  001CDE  8EF1               	bsf	intcon2,7,c	;volatile
  6021                           
  6022                           ; BSR set to: 15
  6023                           
  6024                           ; BSR set to: 15
  6025                           
  6026                           ;pin_manager.c: 85: do { TRISB4 = 0; } while(0);
  6027  001CE0  9893               	bcf	3987,4,c	;volatile
  6028                           
  6029                           ; BSR set to: 15
  6030                           
  6031                           ; BSR set to: 15
  6032                           
  6033                           ;pin_manager.c: 86: do { TRISB3 = 0; } while(0);
  6034                           
  6035                           ; BSR set to: 15
  6036  001CE2  9693               	bcf	3987,3,c	;volatile
  6037                           
  6038                           ; BSR set to: 15
  6039                           
  6040                           ; BSR set to: 15
  6041                           
  6042                           ;pin_manager.c: 87: do { TRISB5 = 0; } while(0);
  6043                           
  6044                           ; BSR set to: 15
  6045  001CE4  9A93               	bcf	3987,5,c	;volatile
  6046                           
  6047                           ; BSR set to: 15
  6048                           ;pin_manager.c: 89: TRISDbits.RD1 = 0;
  6049                           
  6050                           ; BSR set to: 15
  6051  001CE6  9295               	bcf	3989,1,c	;volatile
  6052                           
  6053                           ; BSR set to: 15
  6054                           ;pin_manager.c: 91: TRISCbits.TRISC4 = 0;
  6055  001CE8  9894               	bcf	3988,4,c	;volatile
  6056                           
  6057                           ; BSR set to: 15
  6058                           
  6059                           ; BSR set to: 15
  6060                           
  6061                           ;pin_manager.c: 93: do { ANSB3 = 0; } while(0);
  6062  001CEA  010F               	movlb	15	; () banked
  6063  001CEC  9739               	bcf	57,3,b	;volatile
  6064                           
  6065                           ; BSR set to: 15
  6066                           
  6067                           ; BSR set to: 15
  6068                           
  6069                           ;pin_manager.c: 94: do { ANSD7 = 0; } while(0);
  6070                           
  6071                           ; BSR set to: 15
  6072  001CEE  010F               	movlb	15	; () banked
  6073  001CF0  9F3B               	bcf	59,7,b	;volatile
  6074                           
  6075                           ; BSR set to: 15
  6076                           
  6077                           ; BSR set to: 15
  6078                           
  6079                           ;pin_manager.c: 95: do { ANSB4 = 0; } while(0);
  6080                           
  6081                           ; BSR set to: 15
  6082  001CF2  010F               	movlb	15	; () banked
  6083  001CF4  9939               	bcf	57,4,b	;volatile
  6084                           
  6085                           ; BSR set to: 15
  6086                           ;pin_manager.c: 97: ANSELCbits.ANSC4 = 1;
  6087                           
  6088                           ; BSR set to: 15
  6089  001CF6  010F               	movlb	15	; () banked
  6090  001CF8  893A               	bsf	58,4,b	;volatile
  6091                           
  6092                           ; BSR set to: 15
  6093                           ;pin_manager.c: 98: ANSELDbits.ANSD3 = 1;
  6094  001CFA  010F               	movlb	15	; () banked
  6095  001CFC  873B               	bsf	59,3,b	;volatile
  6096                           
  6097                           ; BSR set to: 15
  6098                           ;pin_manager.c: 99: ANSELDbits.ANSD2 = 1;
  6099  001CFE  010F               	movlb	15	; () banked
  6100  001D00  853B               	bsf	59,2,b	;volatile
  6101                           
  6102                           ; BSR set to: 15
  6103                           ;pin_manager.c: 100: TRISCbits.RC4 = 1;
  6104  001D02  8894               	bsf	3988,4,c	;volatile
  6105                           
  6106                           ; BSR set to: 15
  6107                           ;pin_manager.c: 101: TRISDbits.RD3 = 1;
  6108  001D04  8695               	bsf	3989,3,c	;volatile
  6109                           
  6110                           ; BSR set to: 15
  6111                           ;pin_manager.c: 102: TRISDbits.RD2 = 1;
  6112  001D06  8495               	bsf	3989,2,c	;volatile
  6113                           
  6114                           ; BSR set to: 15
  6115                           ;pin_manager.c: 104: TRISCbits.TRISC6 = 0;
  6116  001D08  9C94               	bcf	3988,6,c	;volatile
  6117                           
  6118                           ; BSR set to: 15
  6119                           ;pin_manager.c: 105: TRISCbits.TRISC7 = 1;
  6120  001D0A  8E94               	bsf	3988,7,c	;volatile
  6121                           
  6122                           ; BSR set to: 15
  6123  001D0C  0012               	return		;funcret
  6124  001D0E                     __end_of_PIN_MANAGER_Initialize:
  6125                           	opt stack 0
  6126                           tosu	equ	0xFFF
  6127                           tosh	equ	0xFFE
  6128                           tosl	equ	0xFFD
  6129                           pclath	equ	0xFFA
  6130                           tblptru	equ	0xFF8
  6131                           tblptrh	equ	0xFF7
  6132                           tblptrl	equ	0xFF6
  6133                           tablat	equ	0xFF5
  6134                           prodh	equ	0xFF4
  6135                           prodl	equ	0xFF3
  6136                           intcon	equ	0xFF2
  6137                           intcon2	equ	0xFF1
  6138                           postinc0	equ	0xFEE
  6139                           wreg	equ	0xFE8
  6140                           indf2	equ	0xFDF
  6141                           postinc2	equ	0xFDE
  6142                           postdec2	equ	0xFDD
  6143                           plusw2	equ	0xFDB
  6144                           fsr2h	equ	0xFDA
  6145                           fsr2l	equ	0xFD9
  6146                           status	equ	0xFD8
  6147                           
  6148 ;; *************** function _OSCILLATOR_Initialize *****************
  6149 ;; Defined at:
  6150 ;;		line 126 in file "mcc_generated_files/mcc.c"
  6151 ;; Parameters:    Size  Location     Type
  6152 ;;		None
  6153 ;; Auto vars:     Size  Location     Type
  6154 ;;		None
  6155 ;; Return value:  Size  Location     Type
  6156 ;;                  1    wreg      void 
  6157 ;; Registers used:
  6158 ;;		wreg, status,2
  6159 ;; Tracked objects:
  6160 ;;		On entry : 0/0
  6161 ;;		On exit  : 0/0
  6162 ;;		Unchanged: 0/0
  6163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6164 ;;      Params:         0       0       0       0       0       0       0
  6165 ;;      Locals:         0       0       0       0       0       0       0
  6166 ;;      Temps:          0       0       0       0       0       0       0
  6167 ;;      Totals:         0       0       0       0       0       0       0
  6168 ;;Total ram usage:        0 bytes
  6169 ;; Hardware stack levels used:    1
  6170 ;; Hardware stack levels required when called:    6
  6171 ;; This function calls:
  6172 ;;		Nothing
  6173 ;; This function is called by:
  6174 ;;		_SYSTEM_Initialize
  6175 ;; This function uses a non-reentrant model
  6176 ;;
  6177                           
  6178                           	psect	text28
  6179  0024CE                     __ptext28:
  6180                           	opt stack 0
  6181  0024CE                     _OSCILLATOR_Initialize:
  6182                           	opt stack 23
  6183                           
  6184                           ;mcc.c: 128: OSCCON = 0x72;
  6185                           
  6186                           ; BSR set to: 15
  6187                           ;incstack = 0
  6188  0024CE  0E72               	movlw	114
  6189  0024D0  6ED3               	movwf	4051,c	;volatile
  6190                           
  6191                           ;mcc.c: 130: OSCCON2 = 0x04;
  6192  0024D2  0E04               	movlw	4
  6193  0024D4  6ED2               	movwf	4050,c	;volatile
  6194                           
  6195                           ;mcc.c: 132: OSCTUNE = 0x00;
  6196  0024D6  0E00               	movlw	0
  6197  0024D8  6E9B               	movwf	3995,c	;volatile
  6198  0024DA  0012               	return		;funcret
  6199  0024DC                     __end_of_OSCILLATOR_Initialize:
  6200                           	opt stack 0
  6201                           tosu	equ	0xFFF
  6202                           tosh	equ	0xFFE
  6203                           tosl	equ	0xFFD
  6204                           pclath	equ	0xFFA
  6205                           tblptru	equ	0xFF8
  6206                           tblptrh	equ	0xFF7
  6207                           tblptrl	equ	0xFF6
  6208                           tablat	equ	0xFF5
  6209                           prodh	equ	0xFF4
  6210                           prodl	equ	0xFF3
  6211                           intcon	equ	0xFF2
  6212                           intcon2	equ	0xFF1
  6213                           postinc0	equ	0xFEE
  6214                           wreg	equ	0xFE8
  6215                           indf2	equ	0xFDF
  6216                           postinc2	equ	0xFDE
  6217                           postdec2	equ	0xFDD
  6218                           plusw2	equ	0xFDB
  6219                           fsr2h	equ	0xFDA
  6220                           fsr2l	equ	0xFD9
  6221                           status	equ	0xFD8
  6222                           
  6223 ;; *************** function _INTERRUPT_Initialize *****************
  6224 ;; Defined at:
  6225 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;		None
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;		None
  6230 ;; Return value:  Size  Location     Type
  6231 ;;                  1    wreg      void 
  6232 ;; Registers used:
  6233 ;;		None
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6239 ;;      Params:         0       0       0       0       0       0       0
  6240 ;;      Locals:         0       0       0       0       0       0       0
  6241 ;;      Temps:          0       0       0       0       0       0       0
  6242 ;;      Totals:         0       0       0       0       0       0       0
  6243 ;;Total ram usage:        0 bytes
  6244 ;; Hardware stack levels used:    1
  6245 ;; Hardware stack levels required when called:    6
  6246 ;; This function calls:
  6247 ;;		Nothing
  6248 ;; This function is called by:
  6249 ;;		_SYSTEM_Initialize
  6250 ;; This function uses a non-reentrant model
  6251 ;;
  6252                           
  6253                           	psect	text29
  6254  0024DC                     __ptext29:
  6255                           	opt stack 0
  6256  0024DC                     _INTERRUPT_Initialize:
  6257                           	opt stack 23
  6258                           
  6259                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  6260                           
  6261                           ;incstack = 0
  6262  0024DC  9ED0               	bcf	4048,7,c	;volatile
  6263                           
  6264                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  6265  0024DE  9A9F               	bcf	3999,5,c	;volatile
  6266                           
  6267                           ;interrupt_manager.c: 62: IPR1bits.TX1IP = 0;
  6268  0024E0  989F               	bcf	3999,4,c	;volatile
  6269                           
  6270                           ;interrupt_manager.c: 64: IPR1bits.ADIP = 0;
  6271  0024E2  9C9F               	bcf	3999,6,c	;volatile
  6272  0024E4  0012               	return		;funcret
  6273  0024E6                     __end_of_INTERRUPT_Initialize:
  6274                           	opt stack 0
  6275                           tosu	equ	0xFFF
  6276                           tosh	equ	0xFFE
  6277                           tosl	equ	0xFFD
  6278                           pclath	equ	0xFFA
  6279                           tblptru	equ	0xFF8
  6280                           tblptrh	equ	0xFF7
  6281                           tblptrl	equ	0xFF6
  6282                           tablat	equ	0xFF5
  6283                           prodh	equ	0xFF4
  6284                           prodl	equ	0xFF3
  6285                           intcon	equ	0xFF2
  6286                           intcon2	equ	0xFF1
  6287                           postinc0	equ	0xFEE
  6288                           wreg	equ	0xFE8
  6289                           indf2	equ	0xFDF
  6290                           postinc2	equ	0xFDE
  6291                           postdec2	equ	0xFDD
  6292                           plusw2	equ	0xFDB
  6293                           fsr2h	equ	0xFDA
  6294                           fsr2l	equ	0xFD9
  6295                           status	equ	0xFD8
  6296                           
  6297 ;; *************** function _EUSART1_Initialize *****************
  6298 ;; Defined at:
  6299 ;;		line 23 in file "UART.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;		None
  6302 ;; Auto vars:     Size  Location     Type
  6303 ;;		None
  6304 ;; Return value:  Size  Location     Type
  6305 ;;                  1    wreg      void 
  6306 ;; Registers used:
  6307 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6308 ;; Tracked objects:
  6309 ;;		On entry : 0/0
  6310 ;;		On exit  : 0/0
  6311 ;;		Unchanged: 0/0
  6312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6313 ;;      Params:         0       0       0       0       0       0       0
  6314 ;;      Locals:         0       0       0       0       0       0       0
  6315 ;;      Temps:          0       0       0       0       0       0       0
  6316 ;;      Totals:         0       0       0       0       0       0       0
  6317 ;;Total ram usage:        0 bytes
  6318 ;; Hardware stack levels used:    1
  6319 ;; Hardware stack levels required when called:    8
  6320 ;; This function calls:
  6321 ;;		_UART_buff_init
  6322 ;; This function is called by:
  6323 ;;		_SYSTEM_Initialize
  6324 ;; This function uses a non-reentrant model
  6325 ;;
  6326                           
  6327                           	psect	text30
  6328  002178                     __ptext30:
  6329                           	opt stack 0
  6330  002178                     _EUSART1_Initialize:
  6331                           	opt stack 21
  6332                           
  6333                           ;UART.c: 25: PIE1bits.RC1IE = 0;
  6334                           
  6335                           ;incstack = 0
  6336  002178  9A9D               	bcf	3997,5,c	;volatile
  6337                           
  6338                           ;UART.c: 26: PIE1bits.TX1IE = 0;
  6339  00217A  989D               	bcf	3997,4,c	;volatile
  6340                           
  6341                           ;UART.c: 31: BAUD1CON = 0x48;
  6342  00217C  0E48               	movlw	72
  6343  00217E  6EB8               	movwf	4024,c	;volatile
  6344                           
  6345                           ;UART.c: 34: RC1STA = 0x98;
  6346  002180  0E98               	movlw	152
  6347  002182  6EAB               	movwf	4011,c	;volatile
  6348                           
  6349                           ;UART.c: 37: TX1STA = 0x26;
  6350  002184  0E26               	movlw	38
  6351  002186  6EAC               	movwf	4012,c	;volatile
  6352                           
  6353                           ;UART.c: 40: SPBRG1 = (((16000000/38400)/4)-1);
  6354  002188  0E67               	movlw	103
  6355  00218A  6EAF               	movwf	4015,c	;volatile
  6356                           
  6357                           ;UART.c: 43: SPBRGH1 = 0x00;
  6358  00218C  0E00               	movlw	0
  6359  00218E  6EB0               	movwf	4016,c	;volatile
  6360                           
  6361                           ;UART.c: 46: TXREG1 = 0x00;
  6362  002190  0E00               	movlw	0
  6363  002192  6EAD               	movwf	4013,c	;volatile
  6364                           
  6365                           ;UART.c: 49: RCREG1 = 0x00;
  6366  002194  0E00               	movlw	0
  6367  002196  6EAE               	movwf	4014,c	;volatile
  6368                           
  6369                           ;UART.c: 51: UART_buff_init(&input_buffer);
  6370  002198  0E00               	movlw	low _input_buffer
  6371  00219A  0100               	movlb	0	; () banked
  6372  00219C  6FDA               	movwf	UART_buff_init@_this& (0+255),b
  6373  00219E  0E03               	movlw	high _input_buffer
  6374  0021A0  0100               	movlb	0	; () banked
  6375  0021A2  6FDB               	movwf	(UART_buff_init@_this+1)& (0+255),b
  6376  0021A4  EC13  F012         	call	_UART_buff_init	;wreg free
  6377                           
  6378                           ;UART.c: 52: UART_buff_init(&output_buffer);
  6379  0021A8  0E00               	movlw	low _output_buffer
  6380  0021AA  0100               	movlb	0	; () banked
  6381  0021AC  6FDA               	movwf	UART_buff_init@_this& (0+255),b
  6382  0021AE  0E04               	movlw	high _output_buffer
  6383  0021B0  0100               	movlb	0	; () banked
  6384  0021B2  6FDB               	movwf	(UART_buff_init@_this+1)& (0+255),b
  6385  0021B4  EC13  F012         	call	_UART_buff_init	;wreg free
  6386                           
  6387                           ;UART.c: 54: PIE1bits.RC1IE = 1;
  6388  0021B8  8A9D               	bsf	3997,5,c	;volatile
  6389  0021BA  0012               	return		;funcret
  6390  0021BC                     __end_of_EUSART1_Initialize:
  6391                           	opt stack 0
  6392                           tosu	equ	0xFFF
  6393                           tosh	equ	0xFFE
  6394                           tosl	equ	0xFFD
  6395                           pclath	equ	0xFFA
  6396                           tblptru	equ	0xFF8
  6397                           tblptrh	equ	0xFF7
  6398                           tblptrl	equ	0xFF6
  6399                           tablat	equ	0xFF5
  6400                           prodh	equ	0xFF4
  6401                           prodl	equ	0xFF3
  6402                           intcon	equ	0xFF2
  6403                           intcon2	equ	0xFF1
  6404                           postinc0	equ	0xFEE
  6405                           wreg	equ	0xFE8
  6406                           indf2	equ	0xFDF
  6407                           postinc2	equ	0xFDE
  6408                           postdec2	equ	0xFDD
  6409                           plusw2	equ	0xFDB
  6410                           fsr2h	equ	0xFDA
  6411                           fsr2l	equ	0xFD9
  6412                           status	equ	0xFD8
  6413                           
  6414 ;; *************** function _UART_buff_init *****************
  6415 ;; Defined at:
  6416 ;;		line 58 in file "UART.c"
  6417 ;; Parameters:    Size  Location     Type
  6418 ;;  _this           2    8[BANK0 ] PTR struct UART_ring_buf
  6419 ;;		 -> output_buffer(206), input_buffer(206), 
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;		None
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  1    wreg      void 
  6424 ;; Registers used:
  6425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6431 ;;      Params:         0       2       0       0       0       0       0
  6432 ;;      Locals:         0       0       0       0       0       0       0
  6433 ;;      Temps:          0       0       0       0       0       0       0
  6434 ;;      Totals:         0       2       0       0       0       0       0
  6435 ;;Total ram usage:        2 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    7
  6438 ;; This function calls:
  6439 ;;		_memset
  6440 ;; This function is called by:
  6441 ;;		_EUSART1_Initialize
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           	psect	text31
  6446  002426                     __ptext31:
  6447                           	opt stack 0
  6448  002426                     _UART_buff_init:
  6449                           	opt stack 21
  6450                           
  6451                           ;UART.c: 67: memset(_this, 0, sizeof (*_this));
  6452                           
  6453                           ;incstack = 0
  6454  002426  C0DA  F0D2         	movff	UART_buff_init@_this,memset@p1
  6455  00242A  C0DB  F0D3         	movff	UART_buff_init@_this+1,memset@p1+1
  6456  00242E  0E00               	movlw	0
  6457  002430  0100               	movlb	0	; () banked
  6458  002432  6FD5               	movwf	(memset@c+1)& (0+255),b
  6459  002434  0E00               	movlw	0
  6460  002436  6FD4               	movwf	memset@c& (0+255),b
  6461  002438  0E00               	movlw	0
  6462  00243A  0100               	movlb	0	; () banked
  6463  00243C  6FD7               	movwf	(memset@n+1)& (0+255),b
  6464  00243E  0ECE               	movlw	206
  6465  002440  6FD6               	movwf	memset@n& (0+255),b
  6466  002442  EC36  F011         	call	_memset	;wreg free
  6467  002446  0012               	return		;funcret
  6468  002448                     __end_of_UART_buff_init:
  6469                           	opt stack 0
  6470                           tosu	equ	0xFFF
  6471                           tosh	equ	0xFFE
  6472                           tosl	equ	0xFFD
  6473                           pclath	equ	0xFFA
  6474                           tblptru	equ	0xFF8
  6475                           tblptrh	equ	0xFF7
  6476                           tblptrl	equ	0xFF6
  6477                           tablat	equ	0xFF5
  6478                           prodh	equ	0xFF4
  6479                           prodl	equ	0xFF3
  6480                           intcon	equ	0xFF2
  6481                           intcon2	equ	0xFF1
  6482                           postinc0	equ	0xFEE
  6483                           wreg	equ	0xFE8
  6484                           indf2	equ	0xFDF
  6485                           postinc2	equ	0xFDE
  6486                           postdec2	equ	0xFDD
  6487                           plusw2	equ	0xFDB
  6488                           fsr2h	equ	0xFDA
  6489                           fsr2l	equ	0xFD9
  6490                           status	equ	0xFD8
  6491                           
  6492 ;; *************** function _memset *****************
  6493 ;; Defined at:
  6494 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  6495 ;; Parameters:    Size  Location     Type
  6496 ;;  p1              2    0[BANK0 ] PTR void 
  6497 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  6498 ;;  c               2    2[BANK0 ] int 
  6499 ;;  n               2    4[BANK0 ] unsigned int 
  6500 ;; Auto vars:     Size  Location     Type
  6501 ;;  p               2    6[BANK0 ] PTR unsigned char 
  6502 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  6503 ;; Return value:  Size  Location     Type
  6504 ;;                  2    0[BANK0 ] PTR void 
  6505 ;; Registers used:
  6506 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6507 ;; Tracked objects:
  6508 ;;		On entry : 0/0
  6509 ;;		On exit  : 0/0
  6510 ;;		Unchanged: 0/0
  6511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6512 ;;      Params:         0       6       0       0       0       0       0
  6513 ;;      Locals:         0       2       0       0       0       0       0
  6514 ;;      Temps:          0       0       0       0       0       0       0
  6515 ;;      Totals:         0       8       0       0       0       0       0
  6516 ;;Total ram usage:        8 bytes
  6517 ;; Hardware stack levels used:    1
  6518 ;; Hardware stack levels required when called:    6
  6519 ;; This function calls:
  6520 ;;		Nothing
  6521 ;; This function is called by:
  6522 ;;		_FastTransfer_buffer_flush
  6523 ;;		_UART_buff_init
  6524 ;;		_UART_buff_flush
  6525 ;; This function uses a non-reentrant model
  6526 ;;
  6527                           
  6528                           	psect	text32
  6529  00226C                     __ptext32:
  6530                           	opt stack 0
  6531  00226C                     _memset:
  6532                           	opt stack 20
  6533                           
  6534                           ;incstack = 0
  6535  00226C  C0D2  F0D8         	movff	memset@p1,memset@p
  6536  002270  C0D3  F0D9         	movff	memset@p1+1,memset@p+1
  6537  002274  D009               	goto	l3810
  6538  002276                     l3806:
  6539  002276  C0D8  FFD9         	movff	memset@p,fsr2l
  6540  00227A  C0D9  FFDA         	movff	memset@p+1,fsr2h
  6541  00227E  C0D4  FFDF         	movff	memset@c,indf2
  6542  002282  0100               	movlb	0	; () banked
  6543  002284  4BD8               	infsnz	memset@p& (0+255),f,b
  6544  002286  2BD9               	incf	(memset@p+1)& (0+255),f,b
  6545  002288                     l3810:
  6546  002288  0100               	movlb	0	; () banked
  6547  00228A  07D6               	decf	memset@n& (0+255),f,b
  6548  00228C  A0D8               	btfss	status,0,c
  6549  00228E  07D7               	decf	(memset@n+1)& (0+255),f,b
  6550  002290  0100               	movlb	0	; () banked
  6551  002292  29D6               	incf	memset@n& (0+255),w,b
  6552  002294  E1F0               	bnz	l3806
  6553  002296  0100               	movlb	0	; () banked
  6554  002298  29D7               	incf	(memset@n+1)& (0+255),w,b
  6555  00229A  B4D8               	btfsc	status,2,c
  6556  00229C  0012               	return	
  6557  00229E  D7EB               	goto	l3806
  6558  0022A0                     __end_of_memset:
  6559                           	opt stack 0
  6560                           tosu	equ	0xFFF
  6561                           tosh	equ	0xFFE
  6562                           tosl	equ	0xFFD
  6563                           pclath	equ	0xFFA
  6564                           tblptru	equ	0xFF8
  6565                           tblptrh	equ	0xFF7
  6566                           tblptrl	equ	0xFF6
  6567                           tablat	equ	0xFF5
  6568                           prodh	equ	0xFF4
  6569                           prodl	equ	0xFF3
  6570                           intcon	equ	0xFF2
  6571                           intcon2	equ	0xFF1
  6572                           postinc0	equ	0xFEE
  6573                           wreg	equ	0xFE8
  6574                           indf2	equ	0xFDF
  6575                           postinc2	equ	0xFDE
  6576                           postdec2	equ	0xFDD
  6577                           plusw2	equ	0xFDB
  6578                           fsr2h	equ	0xFDA
  6579                           fsr2l	equ	0xFD9
  6580                           status	equ	0xFD8
  6581                           
  6582 ;; *************** function _INTERRUPT_InterruptManager *****************
  6583 ;; Defined at:
  6584 ;;		line 67 in file "mcc_generated_files/interrupt_manager.c"
  6585 ;; Parameters:    Size  Location     Type
  6586 ;;		None
  6587 ;; Auto vars:     Size  Location     Type
  6588 ;;		None
  6589 ;; Return value:  Size  Location     Type
  6590 ;;                  1    wreg      void 
  6591 ;; Registers used:
  6592 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6593 ;; Tracked objects:
  6594 ;;		On entry : 0/0
  6595 ;;		On exit  : 0/0
  6596 ;;		Unchanged: 0/0
  6597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6598 ;;      Params:         0       0       0       0       0       0       0
  6599 ;;      Locals:         0       0       0       0       0       0       0
  6600 ;;      Temps:         14       0       0       0       0       0       0
  6601 ;;      Totals:        14       0       0       0       0       0       0
  6602 ;;Total ram usage:       14 bytes
  6603 ;; Hardware stack levels used:    1
  6604 ;; Hardware stack levels required when called:    5
  6605 ;; This function calls:
  6606 ;;		_ADC_ISR
  6607 ;;		_EUSART1_Receive_ISR
  6608 ;;		_EUSART1_Transmit_ISR
  6609 ;;		_TMR1_ISR
  6610 ;; This function is called by:
  6611 ;;		Interrupt level 2
  6612 ;; This function uses a non-reentrant model
  6613 ;;
  6614                           
  6615                           	psect	intcode
  6616  000008                     __pintcode:
  6617                           	opt stack 0
  6618  000008                     _INTERRUPT_InterruptManager:
  6619                           	opt stack 19
  6620                           
  6621                           ; BSR set to: 0
  6622                           ;incstack = 0
  6623  000008  8243               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6624  00000A  CFFA F016          	movff	pclath,??_INTERRUPT_InterruptManager
  6625  00000E  CFFB F017          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6626  000012  CFE9 F018          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6627  000016  CFEA F019          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6628  00001A  CFE1 F01A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6629  00001E  CFE2 F01B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6630  000022  CFD9 F01C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6631  000026  CFDA F01D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6632  00002A  CFF3 F01E          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6633  00002E  CFF4 F01F          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6634  000032  CFF6 F020          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6635  000036  CFF7 F021          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6636  00003A  CFF8 F022          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6637  00003E  CFF5 F023          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6638                           
  6639                           ;interrupt_manager.c: 70: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  6640  000042  BA9D               	btfsc	3997,5,c	;volatile
  6641  000044  AA9E               	btfss	3998,5,c	;volatile
  6642  000046  D003               	goto	i2l65
  6643                           
  6644                           ;interrupt_manager.c: 71: {
  6645                           ;interrupt_manager.c: 72: EUSART1_Receive_ISR();
  6646  000048  ECDB  F011         	call	_EUSART1_Receive_ISR	;wreg free
  6647                           
  6648                           ;interrupt_manager.c: 73: }
  6649  00004C  D011               	goto	i2l73
  6650  00004E                     i2l65:
  6651                           
  6652                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  6653  00004E  B89D               	btfsc	3997,4,c	;volatile
  6654  000050  A89E               	btfss	3998,4,c	;volatile
  6655  000052  D003               	goto	i2l67
  6656                           
  6657                           ;interrupt_manager.c: 75: {
  6658                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
  6659  000054  EC69  F011         	call	_EUSART1_Transmit_ISR	;wreg free
  6660                           
  6661                           ;interrupt_manager.c: 77: }
  6662  000058  D00B               	goto	i2l73
  6663  00005A                     i2l67:
  6664                           
  6665                           ;interrupt_manager.c: 78: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  6666  00005A  BC9D               	btfsc	3997,6,c	;volatile
  6667  00005C  AC9E               	btfss	3998,6,c	;volatile
  6668  00005E  D003               	goto	i2l69
  6669                           
  6670                           ;interrupt_manager.c: 79: {
  6671                           ;interrupt_manager.c: 80: ADC_ISR();
  6672  000060  EC76  F012         	call	_ADC_ISR	;wreg free
  6673                           
  6674                           ;interrupt_manager.c: 81: }
  6675  000064  D005               	goto	i2l73
  6676  000066                     i2l69:
  6677                           
  6678                           ;interrupt_manager.c: 82: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  6679  000066  B09D               	btfsc	3997,0,c	;volatile
  6680  000068  A09E               	btfss	3998,0,c	;volatile
  6681  00006A  D002               	goto	i2l73
  6682                           
  6683                           ;interrupt_manager.c: 83: {
  6684                           ;interrupt_manager.c: 84: TMR1_ISR();
  6685  00006C  EC50  F011         	call	_TMR1_ISR	;wreg free
  6686  000070                     i2l73:
  6687  000070  C023  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6688  000074  C022  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6689  000078  C021  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6690  00007C  C020  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6691  000080  C01F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6692  000084  C01E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6693  000088  C01D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6694  00008C  C01C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6695  000090  C01B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6696  000094  C01A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6697  000098  C019  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6698  00009C  C018  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6699  0000A0  C017  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6700  0000A4  C016  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6701  0000A8  9243               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6702  0000AA  0011               	retfie		f
  6703  0000AC                     __end_of_INTERRUPT_InterruptManager:
  6704                           	opt stack 0
  6705                           tosu	equ	0xFFF
  6706                           tosh	equ	0xFFE
  6707                           tosl	equ	0xFFD
  6708                           pclatu	equ	0xFFB
  6709                           pclath	equ	0xFFA
  6710                           tblptru	equ	0xFF8
  6711                           tblptrh	equ	0xFF7
  6712                           tblptrl	equ	0xFF6
  6713                           tablat	equ	0xFF5
  6714                           prodh	equ	0xFF4
  6715                           prodl	equ	0xFF3
  6716                           intcon	equ	0xFF2
  6717                           intcon2	equ	0xFF1
  6718                           postinc0	equ	0xFEE
  6719                           fsr0h	equ	0xFEA
  6720                           fsr0l	equ	0xFE9
  6721                           wreg	equ	0xFE8
  6722                           fsr1h	equ	0xFE2
  6723                           fsr1l	equ	0xFE1
  6724                           indf2	equ	0xFDF
  6725                           postinc2	equ	0xFDE
  6726                           postdec2	equ	0xFDD
  6727                           plusw2	equ	0xFDB
  6728                           fsr2h	equ	0xFDA
  6729                           fsr2l	equ	0xFD9
  6730                           status	equ	0xFD8
  6731                           
  6732 ;; *************** function _TMR1_ISR *****************
  6733 ;; Defined at:
  6734 ;;		line 161 in file "mcc_generated_files/tmr1.c"
  6735 ;; Parameters:    Size  Location     Type
  6736 ;;		None
  6737 ;; Auto vars:     Size  Location     Type
  6738 ;;		None
  6739 ;; Return value:  Size  Location     Type
  6740 ;;                  2   53[None  ] int 
  6741 ;; Registers used:
  6742 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6743 ;; Tracked objects:
  6744 ;;		On entry : 0/0
  6745 ;;		On exit  : 0/0
  6746 ;;		Unchanged: 0/0
  6747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6748 ;;      Params:         0       0       0       0       0       0       0
  6749 ;;      Locals:         0       0       0       0       0       0       0
  6750 ;;      Temps:          0       0       0       0       0       0       0
  6751 ;;      Totals:         0       0       0       0       0       0       0
  6752 ;;Total ram usage:        0 bytes
  6753 ;; Hardware stack levels used:    1
  6754 ;; Hardware stack levels required when called:    4
  6755 ;; This function calls:
  6756 ;;		_FuseSystem
  6757 ;;		_ReadCurrent
  6758 ;; This function is called by:
  6759 ;;		_INTERRUPT_InterruptManager
  6760 ;; This function uses a non-reentrant model
  6761 ;;
  6762                           
  6763                           	psect	text34
  6764  0022A0                     __ptext34:
  6765                           	opt stack 0
  6766  0022A0                     _TMR1_ISR:
  6767                           	opt stack 19
  6768                           
  6769                           ;tmr1.c: 165: PIR1bits.TMR1IF = 0;
  6770                           
  6771                           ;incstack = 0
  6772  0022A0  909E               	bcf	3998,0,c	;volatile
  6773                           
  6774                           ;tmr1.c: 168: TMR1H = (timer1ReloadVal >> 8);
  6775  0022A2  503B               	movf	_timer1ReloadVal+1,w,c	;volatile
  6776  0022A4  6ECF               	movwf	4047,c	;volatile
  6777                           
  6778                           ;tmr1.c: 169: TMR1L = (uint8_t) timer1ReloadVal;
  6779  0022A6  C03A  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  6780                           
  6781                           ;tmr1.c: 170: readwhat++;
  6782  0022AA  4A40               	infsnz	_readwhat,f,c
  6783  0022AC  2A41               	incf	_readwhat+1,f,c
  6784                           
  6785                           ;tmr1.c: 171: if(readwhat > 7)
  6786  0022AE  BE41               	btfsc	_readwhat+1,7,c
  6787  0022B0  D00C               	goto	i2l3526
  6788  0022B2  5041               	movf	_readwhat+1,w,c
  6789  0022B4  E104               	bnz	i2u279_40
  6790  0022B6  0E08               	movlw	8
  6791  0022B8  5C40               	subwf	_readwhat,w,c
  6792  0022BA  A0D8               	btfss	status,0,c
  6793  0022BC  D006               	goto	i2l3526
  6794  0022BE                     i2u279_40:
  6795                           
  6796                           ;tmr1.c: 172: {
  6797                           ;tmr1.c: 173: readwhat = 1;
  6798  0022BE  0E00               	movlw	0
  6799  0022C0  6E41               	movwf	_readwhat+1,c
  6800  0022C2  0E01               	movlw	1
  6801  0022C4  6E40               	movwf	_readwhat,c
  6802                           
  6803                           ;tmr1.c: 174: FuseSystem();
  6804  0022C6  ECD9  F008         	call	_FuseSystem	;wreg free
  6805  0022CA                     i2l3526:
  6806                           
  6807                           ;tmr1.c: 175: }
  6808                           ;tmr1.c: 176: ReadCurrent(readwhat);
  6809  0022CA  5040               	movf	_readwhat,w,c
  6810  0022CC  ECF5  F003         	call	_ReadCurrent
  6811  0022D0  0012               	return		;funcret
  6812  0022D2                     __end_of_TMR1_ISR:
  6813                           	opt stack 0
  6814                           tosu	equ	0xFFF
  6815                           tosh	equ	0xFFE
  6816                           tosl	equ	0xFFD
  6817                           pclatu	equ	0xFFB
  6818                           pclath	equ	0xFFA
  6819                           tblptru	equ	0xFF8
  6820                           tblptrh	equ	0xFF7
  6821                           tblptrl	equ	0xFF6
  6822                           tablat	equ	0xFF5
  6823                           prodh	equ	0xFF4
  6824                           prodl	equ	0xFF3
  6825                           intcon	equ	0xFF2
  6826                           intcon2	equ	0xFF1
  6827                           postinc0	equ	0xFEE
  6828                           fsr0h	equ	0xFEA
  6829                           fsr0l	equ	0xFE9
  6830                           wreg	equ	0xFE8
  6831                           fsr1h	equ	0xFE2
  6832                           fsr1l	equ	0xFE1
  6833                           indf2	equ	0xFDF
  6834                           postinc2	equ	0xFDE
  6835                           postdec2	equ	0xFDD
  6836                           plusw2	equ	0xFDB
  6837                           fsr2h	equ	0xFDA
  6838                           fsr2l	equ	0xFD9
  6839                           status	equ	0xFD8
  6840                           
  6841 ;; *************** function _ReadCurrent *****************
  6842 ;; Defined at:
  6843 ;;		line 60 in file "PDU.c"
  6844 ;; Parameters:    Size  Location     Type
  6845 ;;  gather          1    wreg     unsigned char 
  6846 ;; Auto vars:     Size  Location     Type
  6847 ;;  gather          1   13[COMRAM] unsigned char 
  6848 ;; Return value:  Size  Location     Type
  6849 ;;                  1    wreg      void 
  6850 ;; Registers used:
  6851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6852 ;; Tracked objects:
  6853 ;;		On entry : 0/0
  6854 ;;		On exit  : 0/0
  6855 ;;		Unchanged: 0/0
  6856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6857 ;;      Params:         0       0       0       0       0       0       0
  6858 ;;      Locals:         1       0       0       0       0       0       0
  6859 ;;      Temps:          0       0       0       0       0       0       0
  6860 ;;      Totals:         1       0       0       0       0       0       0
  6861 ;;Total ram usage:        1 bytes
  6862 ;; Hardware stack levels used:    1
  6863 ;; Hardware stack levels required when called:    3
  6864 ;; This function calls:
  6865 ;;		_ADC_GetConversion
  6866 ;;		_SetPin595
  6867 ;;		_Update
  6868 ;; This function is called by:
  6869 ;;		_TMR1_ISR
  6870 ;; This function uses a non-reentrant model
  6871 ;;
  6872                           
  6873                           	psect	text35
  6874  0007EA                     __ptext35:
  6875                           	opt stack 0
  6876  0007EA                     _ReadCurrent:
  6877                           	opt stack 19
  6878                           
  6879                           ;incstack = 0
  6880                           ;ReadCurrent@gather stored from wreg
  6881  0007EA  6E0E               	movwf	ReadCurrent@gather,c
  6882                           
  6883                           ;PDU.c: 61: if (gather == 1) {
  6884  0007EC  040E               	decf	ReadCurrent@gather,w,c
  6885  0007EE  A4D8               	btfss	status,2,c
  6886  0007F0  D088               	goto	i2l3262
  6887                           
  6888                           ;PDU.c: 63: SetPin595(1, 4, ON);
  6889  0007F2  0E00               	movlw	0
  6890  0007F4  6E02               	movwf	SetPin595@Reg+1,c
  6891  0007F6  0E01               	movlw	1
  6892  0007F8  6E01               	movwf	SetPin595@Reg,c
  6893  0007FA  0E00               	movlw	0
  6894  0007FC  6E04               	movwf	SetPin595@pin+1,c
  6895  0007FE  0E04               	movlw	4
  6896  000800  6E03               	movwf	SetPin595@pin,c
  6897  000802  0E00               	movlw	0
  6898  000804  6E06               	movwf	SetPin595@value+1,c
  6899  000806  0E01               	movlw	1
  6900  000808  6E05               	movwf	SetPin595@value,c
  6901  00080A  EC4C  F010         	call	_SetPin595	;wreg free
  6902                           
  6903                           ;PDU.c: 64: SetPin595(1, 3, OFF);
  6904  00080E  0E00               	movlw	0
  6905  000810  6E02               	movwf	SetPin595@Reg+1,c
  6906  000812  0E01               	movlw	1
  6907  000814  6E01               	movwf	SetPin595@Reg,c
  6908  000816  0E00               	movlw	0
  6909  000818  6E04               	movwf	SetPin595@pin+1,c
  6910  00081A  0E03               	movlw	3
  6911  00081C  6E03               	movwf	SetPin595@pin,c
  6912  00081E  0E00               	movlw	0
  6913  000820  6E06               	movwf	SetPin595@value+1,c
  6914  000822  0E00               	movlw	0
  6915  000824  6E05               	movwf	SetPin595@value,c
  6916  000826  EC4C  F010         	call	_SetPin595	;wreg free
  6917                           
  6918                           ;PDU.c: 65: SetPin595(1, 2, OFF);
  6919  00082A  0E00               	movlw	0
  6920  00082C  6E02               	movwf	SetPin595@Reg+1,c
  6921  00082E  0E01               	movlw	1
  6922  000830  6E01               	movwf	SetPin595@Reg,c
  6923  000832  0E00               	movlw	0
  6924  000834  6E04               	movwf	SetPin595@pin+1,c
  6925  000836  0E02               	movlw	2
  6926  000838  6E03               	movwf	SetPin595@pin,c
  6927  00083A  0E00               	movlw	0
  6928  00083C  6E06               	movwf	SetPin595@value+1,c
  6929  00083E  0E00               	movlw	0
  6930  000840  6E05               	movwf	SetPin595@value,c
  6931  000842  EC4C  F010         	call	_SetPin595	;wreg free
  6932                           
  6933                           ;PDU.c: 66: SetPin595(2, 4, OFF);
  6934  000846  0E00               	movlw	0
  6935  000848  6E02               	movwf	SetPin595@Reg+1,c
  6936  00084A  0E02               	movlw	2
  6937  00084C  6E01               	movwf	SetPin595@Reg,c
  6938  00084E  0E00               	movlw	0
  6939  000850  6E04               	movwf	SetPin595@pin+1,c
  6940  000852  0E04               	movlw	4
  6941  000854  6E03               	movwf	SetPin595@pin,c
  6942  000856  0E00               	movlw	0
  6943  000858  6E06               	movwf	SetPin595@value+1,c
  6944  00085A  0E00               	movlw	0
  6945  00085C  6E05               	movwf	SetPin595@value,c
  6946  00085E  EC4C  F010         	call	_SetPin595	;wreg free
  6947                           
  6948                           ;PDU.c: 67: SetPin595(2, 3, OFF);
  6949  000862  0E00               	movlw	0
  6950  000864  6E02               	movwf	SetPin595@Reg+1,c
  6951  000866  0E02               	movlw	2
  6952  000868  6E01               	movwf	SetPin595@Reg,c
  6953  00086A  0E00               	movlw	0
  6954  00086C  6E04               	movwf	SetPin595@pin+1,c
  6955  00086E  0E03               	movlw	3
  6956  000870  6E03               	movwf	SetPin595@pin,c
  6957  000872  0E00               	movlw	0
  6958  000874  6E06               	movwf	SetPin595@value+1,c
  6959  000876  0E00               	movlw	0
  6960  000878  6E05               	movwf	SetPin595@value,c
  6961  00087A  EC4C  F010         	call	_SetPin595	;wreg free
  6962                           
  6963                           ;PDU.c: 68: SetPin595(2, 2, OFF);
  6964  00087E  0E00               	movlw	0
  6965  000880  6E02               	movwf	SetPin595@Reg+1,c
  6966  000882  0E02               	movlw	2
  6967  000884  6E01               	movwf	SetPin595@Reg,c
  6968  000886  0E00               	movlw	0
  6969  000888  6E04               	movwf	SetPin595@pin+1,c
  6970  00088A  0E02               	movlw	2
  6971  00088C  6E03               	movwf	SetPin595@pin,c
  6972  00088E  0E00               	movlw	0
  6973  000890  6E06               	movwf	SetPin595@value+1,c
  6974  000892  0E00               	movlw	0
  6975  000894  6E05               	movwf	SetPin595@value,c
  6976  000896  EC4C  F010         	call	_SetPin595	;wreg free
  6977                           
  6978                           ;PDU.c: 69: SetPin595(3, 4, OFF);
  6979  00089A  0E00               	movlw	0
  6980  00089C  6E02               	movwf	SetPin595@Reg+1,c
  6981  00089E  0E03               	movlw	3
  6982  0008A0  6E01               	movwf	SetPin595@Reg,c
  6983  0008A2  0E00               	movlw	0
  6984  0008A4  6E04               	movwf	SetPin595@pin+1,c
  6985  0008A6  0E04               	movlw	4
  6986  0008A8  6E03               	movwf	SetPin595@pin,c
  6987  0008AA  0E00               	movlw	0
  6988  0008AC  6E06               	movwf	SetPin595@value+1,c
  6989  0008AE  0E00               	movlw	0
  6990  0008B0  6E05               	movwf	SetPin595@value,c
  6991  0008B2  EC4C  F010         	call	_SetPin595	;wreg free
  6992                           
  6993                           ;PDU.c: 70: SetPin595(3, 3, OFF);
  6994  0008B6  0E00               	movlw	0
  6995  0008B8  6E02               	movwf	SetPin595@Reg+1,c
  6996  0008BA  0E03               	movlw	3
  6997  0008BC  6E01               	movwf	SetPin595@Reg,c
  6998  0008BE  0E00               	movlw	0
  6999  0008C0  6E04               	movwf	SetPin595@pin+1,c
  7000  0008C2  0E03               	movlw	3
  7001  0008C4  6E03               	movwf	SetPin595@pin,c
  7002  0008C6  0E00               	movlw	0
  7003  0008C8  6E06               	movwf	SetPin595@value+1,c
  7004  0008CA  0E00               	movlw	0
  7005  0008CC  6E05               	movwf	SetPin595@value,c
  7006  0008CE  EC4C  F010         	call	_SetPin595	;wreg free
  7007                           
  7008                           ;PDU.c: 71: SetPin595(3, 2, OFF);
  7009  0008D2  0E00               	movlw	0
  7010  0008D4  6E02               	movwf	SetPin595@Reg+1,c
  7011  0008D6  0E03               	movlw	3
  7012  0008D8  6E01               	movwf	SetPin595@Reg,c
  7013  0008DA  0E00               	movlw	0
  7014  0008DC  6E04               	movwf	SetPin595@pin+1,c
  7015  0008DE  0E02               	movlw	2
  7016  0008E0  6E03               	movwf	SetPin595@pin,c
  7017  0008E2  0E00               	movlw	0
  7018  0008E4  6E06               	movwf	SetPin595@value+1,c
  7019  0008E6  0E00               	movlw	0
  7020  0008E8  6E05               	movwf	SetPin595@value,c
  7021  0008EA  EC4C  F010         	call	_SetPin595	;wreg free
  7022                           
  7023                           ;PDU.c: 72: Update();
  7024  0008EE  EC73  F012         	call	_Update	;wreg free
  7025                           
  7026                           ;PDU.c: 73: CurrentADC[5] = ADC_GetConversion(U10Multisense);
  7027  0008F2  0E17               	movlw	23
  7028  0008F4  EC82  F011         	call	_ADC_GetConversion
  7029  0008F8  C001  F076         	movff	?_ADC_GetConversion,_CurrentADC+10
  7030  0008FC  C002  F077         	movff	?_ADC_GetConversion+1,_CurrentADC+11
  7031                           
  7032                           ;PDU.c: 75: }
  7033  000900  0012               	return	
  7034  000902                     i2l3262:
  7035                           
  7036                           ;PDU.c: 76: else if(gather == 2){
  7037  000902  0E02               	movlw	2
  7038  000904  180E               	xorwf	ReadCurrent@gather,w,c
  7039  000906  A4D8               	btfss	status,2,c
  7040  000908  D088               	goto	i2l3268
  7041                           
  7042                           ;PDU.c: 78: SetPin595(1, 4, OFF);
  7043  00090A  0E00               	movlw	0
  7044  00090C  6E02               	movwf	SetPin595@Reg+1,c
  7045  00090E  0E01               	movlw	1
  7046  000910  6E01               	movwf	SetPin595@Reg,c
  7047  000912  0E00               	movlw	0
  7048  000914  6E04               	movwf	SetPin595@pin+1,c
  7049  000916  0E04               	movlw	4
  7050  000918  6E03               	movwf	SetPin595@pin,c
  7051  00091A  0E00               	movlw	0
  7052  00091C  6E06               	movwf	SetPin595@value+1,c
  7053  00091E  0E00               	movlw	0
  7054  000920  6E05               	movwf	SetPin595@value,c
  7055  000922  EC4C  F010         	call	_SetPin595	;wreg free
  7056                           
  7057                           ;PDU.c: 79: SetPin595(1, 3, OFF);
  7058  000926  0E00               	movlw	0
  7059  000928  6E02               	movwf	SetPin595@Reg+1,c
  7060  00092A  0E01               	movlw	1
  7061  00092C  6E01               	movwf	SetPin595@Reg,c
  7062  00092E  0E00               	movlw	0
  7063  000930  6E04               	movwf	SetPin595@pin+1,c
  7064  000932  0E03               	movlw	3
  7065  000934  6E03               	movwf	SetPin595@pin,c
  7066  000936  0E00               	movlw	0
  7067  000938  6E06               	movwf	SetPin595@value+1,c
  7068  00093A  0E00               	movlw	0
  7069  00093C  6E05               	movwf	SetPin595@value,c
  7070  00093E  EC4C  F010         	call	_SetPin595	;wreg free
  7071                           
  7072                           ;PDU.c: 80: SetPin595(1, 2, OFF);
  7073  000942  0E00               	movlw	0
  7074  000944  6E02               	movwf	SetPin595@Reg+1,c
  7075  000946  0E01               	movlw	1
  7076  000948  6E01               	movwf	SetPin595@Reg,c
  7077  00094A  0E00               	movlw	0
  7078  00094C  6E04               	movwf	SetPin595@pin+1,c
  7079  00094E  0E02               	movlw	2
  7080  000950  6E03               	movwf	SetPin595@pin,c
  7081  000952  0E00               	movlw	0
  7082  000954  6E06               	movwf	SetPin595@value+1,c
  7083  000956  0E00               	movlw	0
  7084  000958  6E05               	movwf	SetPin595@value,c
  7085  00095A  EC4C  F010         	call	_SetPin595	;wreg free
  7086                           
  7087                           ;PDU.c: 81: SetPin595(2, 4, ON);
  7088  00095E  0E00               	movlw	0
  7089  000960  6E02               	movwf	SetPin595@Reg+1,c
  7090  000962  0E02               	movlw	2
  7091  000964  6E01               	movwf	SetPin595@Reg,c
  7092  000966  0E00               	movlw	0
  7093  000968  6E04               	movwf	SetPin595@pin+1,c
  7094  00096A  0E04               	movlw	4
  7095  00096C  6E03               	movwf	SetPin595@pin,c
  7096  00096E  0E00               	movlw	0
  7097  000970  6E06               	movwf	SetPin595@value+1,c
  7098  000972  0E01               	movlw	1
  7099  000974  6E05               	movwf	SetPin595@value,c
  7100  000976  EC4C  F010         	call	_SetPin595	;wreg free
  7101                           
  7102                           ;PDU.c: 82: SetPin595(2, 3, ON);
  7103  00097A  0E00               	movlw	0
  7104  00097C  6E02               	movwf	SetPin595@Reg+1,c
  7105  00097E  0E02               	movlw	2
  7106  000980  6E01               	movwf	SetPin595@Reg,c
  7107  000982  0E00               	movlw	0
  7108  000984  6E04               	movwf	SetPin595@pin+1,c
  7109  000986  0E03               	movlw	3
  7110  000988  6E03               	movwf	SetPin595@pin,c
  7111  00098A  0E00               	movlw	0
  7112  00098C  6E06               	movwf	SetPin595@value+1,c
  7113  00098E  0E01               	movlw	1
  7114  000990  6E05               	movwf	SetPin595@value,c
  7115  000992  EC4C  F010         	call	_SetPin595	;wreg free
  7116                           
  7117                           ;PDU.c: 83: SetPin595(2, 2, OFF);
  7118  000996  0E00               	movlw	0
  7119  000998  6E02               	movwf	SetPin595@Reg+1,c
  7120  00099A  0E02               	movlw	2
  7121  00099C  6E01               	movwf	SetPin595@Reg,c
  7122  00099E  0E00               	movlw	0
  7123  0009A0  6E04               	movwf	SetPin595@pin+1,c
  7124  0009A2  0E02               	movlw	2
  7125  0009A4  6E03               	movwf	SetPin595@pin,c
  7126  0009A6  0E00               	movlw	0
  7127  0009A8  6E06               	movwf	SetPin595@value+1,c
  7128  0009AA  0E00               	movlw	0
  7129  0009AC  6E05               	movwf	SetPin595@value,c
  7130  0009AE  EC4C  F010         	call	_SetPin595	;wreg free
  7131                           
  7132                           ;PDU.c: 84: SetPin595(3, 4, OFF);
  7133  0009B2  0E00               	movlw	0
  7134  0009B4  6E02               	movwf	SetPin595@Reg+1,c
  7135  0009B6  0E03               	movlw	3
  7136  0009B8  6E01               	movwf	SetPin595@Reg,c
  7137  0009BA  0E00               	movlw	0
  7138  0009BC  6E04               	movwf	SetPin595@pin+1,c
  7139  0009BE  0E04               	movlw	4
  7140  0009C0  6E03               	movwf	SetPin595@pin,c
  7141  0009C2  0E00               	movlw	0
  7142  0009C4  6E06               	movwf	SetPin595@value+1,c
  7143  0009C6  0E00               	movlw	0
  7144  0009C8  6E05               	movwf	SetPin595@value,c
  7145  0009CA  EC4C  F010         	call	_SetPin595	;wreg free
  7146                           
  7147                           ;PDU.c: 85: SetPin595(3, 3, OFF);
  7148  0009CE  0E00               	movlw	0
  7149  0009D0  6E02               	movwf	SetPin595@Reg+1,c
  7150  0009D2  0E03               	movlw	3
  7151  0009D4  6E01               	movwf	SetPin595@Reg,c
  7152  0009D6  0E00               	movlw	0
  7153  0009D8  6E04               	movwf	SetPin595@pin+1,c
  7154  0009DA  0E03               	movlw	3
  7155  0009DC  6E03               	movwf	SetPin595@pin,c
  7156  0009DE  0E00               	movlw	0
  7157  0009E0  6E06               	movwf	SetPin595@value+1,c
  7158  0009E2  0E00               	movlw	0
  7159  0009E4  6E05               	movwf	SetPin595@value,c
  7160  0009E6  EC4C  F010         	call	_SetPin595	;wreg free
  7161                           
  7162                           ;PDU.c: 86: SetPin595(3, 2, OFF);
  7163  0009EA  0E00               	movlw	0
  7164  0009EC  6E02               	movwf	SetPin595@Reg+1,c
  7165  0009EE  0E03               	movlw	3
  7166  0009F0  6E01               	movwf	SetPin595@Reg,c
  7167  0009F2  0E00               	movlw	0
  7168  0009F4  6E04               	movwf	SetPin595@pin+1,c
  7169  0009F6  0E02               	movlw	2
  7170  0009F8  6E03               	movwf	SetPin595@pin,c
  7171  0009FA  0E00               	movlw	0
  7172  0009FC  6E06               	movwf	SetPin595@value+1,c
  7173  0009FE  0E00               	movlw	0
  7174  000A00  6E05               	movwf	SetPin595@value,c
  7175  000A02  EC4C  F010         	call	_SetPin595	;wreg free
  7176                           
  7177                           ;PDU.c: 87: Update();
  7178  000A06  EC73  F012         	call	_Update	;wreg free
  7179                           
  7180                           ;PDU.c: 88: CurrentADC[2] = ADC_GetConversion(U8Multisense);
  7181  000A0A  0E16               	movlw	22
  7182  000A0C  EC82  F011         	call	_ADC_GetConversion
  7183  000A10  C001  F070         	movff	?_ADC_GetConversion,_CurrentADC+4
  7184  000A14  C002  F071         	movff	?_ADC_GetConversion+1,_CurrentADC+5
  7185                           
  7186                           ;PDU.c: 90: }
  7187  000A18  0012               	return	
  7188  000A1A                     i2l3268:
  7189                           
  7190                           ;PDU.c: 91: else if(gather == 3){
  7191  000A1A  0E03               	movlw	3
  7192  000A1C  180E               	xorwf	ReadCurrent@gather,w,c
  7193  000A1E  A4D8               	btfss	status,2,c
  7194  000A20  D088               	goto	i2l3274
  7195                           
  7196                           ;PDU.c: 93: SetPin595(1, 4, OFF);
  7197  000A22  0E00               	movlw	0
  7198  000A24  6E02               	movwf	SetPin595@Reg+1,c
  7199  000A26  0E01               	movlw	1
  7200  000A28  6E01               	movwf	SetPin595@Reg,c
  7201  000A2A  0E00               	movlw	0
  7202  000A2C  6E04               	movwf	SetPin595@pin+1,c
  7203  000A2E  0E04               	movlw	4
  7204  000A30  6E03               	movwf	SetPin595@pin,c
  7205  000A32  0E00               	movlw	0
  7206  000A34  6E06               	movwf	SetPin595@value+1,c
  7207  000A36  0E00               	movlw	0
  7208  000A38  6E05               	movwf	SetPin595@value,c
  7209  000A3A  EC4C  F010         	call	_SetPin595	;wreg free
  7210                           
  7211                           ;PDU.c: 94: SetPin595(1, 3, OFF);
  7212  000A3E  0E00               	movlw	0
  7213  000A40  6E02               	movwf	SetPin595@Reg+1,c
  7214  000A42  0E01               	movlw	1
  7215  000A44  6E01               	movwf	SetPin595@Reg,c
  7216  000A46  0E00               	movlw	0
  7217  000A48  6E04               	movwf	SetPin595@pin+1,c
  7218  000A4A  0E03               	movlw	3
  7219  000A4C  6E03               	movwf	SetPin595@pin,c
  7220  000A4E  0E00               	movlw	0
  7221  000A50  6E06               	movwf	SetPin595@value+1,c
  7222  000A52  0E00               	movlw	0
  7223  000A54  6E05               	movwf	SetPin595@value,c
  7224  000A56  EC4C  F010         	call	_SetPin595	;wreg free
  7225                           
  7226                           ;PDU.c: 95: SetPin595(1, 2, OFF);
  7227  000A5A  0E00               	movlw	0
  7228  000A5C  6E02               	movwf	SetPin595@Reg+1,c
  7229  000A5E  0E01               	movlw	1
  7230  000A60  6E01               	movwf	SetPin595@Reg,c
  7231  000A62  0E00               	movlw	0
  7232  000A64  6E04               	movwf	SetPin595@pin+1,c
  7233  000A66  0E02               	movlw	2
  7234  000A68  6E03               	movwf	SetPin595@pin,c
  7235  000A6A  0E00               	movlw	0
  7236  000A6C  6E06               	movwf	SetPin595@value+1,c
  7237  000A6E  0E00               	movlw	0
  7238  000A70  6E05               	movwf	SetPin595@value,c
  7239  000A72  EC4C  F010         	call	_SetPin595	;wreg free
  7240                           
  7241                           ;PDU.c: 96: SetPin595(2, 4, OFF);
  7242  000A76  0E00               	movlw	0
  7243  000A78  6E02               	movwf	SetPin595@Reg+1,c
  7244  000A7A  0E02               	movlw	2
  7245  000A7C  6E01               	movwf	SetPin595@Reg,c
  7246  000A7E  0E00               	movlw	0
  7247  000A80  6E04               	movwf	SetPin595@pin+1,c
  7248  000A82  0E04               	movlw	4
  7249  000A84  6E03               	movwf	SetPin595@pin,c
  7250  000A86  0E00               	movlw	0
  7251  000A88  6E06               	movwf	SetPin595@value+1,c
  7252  000A8A  0E00               	movlw	0
  7253  000A8C  6E05               	movwf	SetPin595@value,c
  7254  000A8E  EC4C  F010         	call	_SetPin595	;wreg free
  7255                           
  7256                           ;PDU.c: 97: SetPin595(2, 3, OFF);
  7257  000A92  0E00               	movlw	0
  7258  000A94  6E02               	movwf	SetPin595@Reg+1,c
  7259  000A96  0E02               	movlw	2
  7260  000A98  6E01               	movwf	SetPin595@Reg,c
  7261  000A9A  0E00               	movlw	0
  7262  000A9C  6E04               	movwf	SetPin595@pin+1,c
  7263  000A9E  0E03               	movlw	3
  7264  000AA0  6E03               	movwf	SetPin595@pin,c
  7265  000AA2  0E00               	movlw	0
  7266  000AA4  6E06               	movwf	SetPin595@value+1,c
  7267  000AA6  0E00               	movlw	0
  7268  000AA8  6E05               	movwf	SetPin595@value,c
  7269  000AAA  EC4C  F010         	call	_SetPin595	;wreg free
  7270                           
  7271                           ;PDU.c: 98: SetPin595(2, 2, OFF);
  7272  000AAE  0E00               	movlw	0
  7273  000AB0  6E02               	movwf	SetPin595@Reg+1,c
  7274  000AB2  0E02               	movlw	2
  7275  000AB4  6E01               	movwf	SetPin595@Reg,c
  7276  000AB6  0E00               	movlw	0
  7277  000AB8  6E04               	movwf	SetPin595@pin+1,c
  7278  000ABA  0E02               	movlw	2
  7279  000ABC  6E03               	movwf	SetPin595@pin,c
  7280  000ABE  0E00               	movlw	0
  7281  000AC0  6E06               	movwf	SetPin595@value+1,c
  7282  000AC2  0E00               	movlw	0
  7283  000AC4  6E05               	movwf	SetPin595@value,c
  7284  000AC6  EC4C  F010         	call	_SetPin595	;wreg free
  7285                           
  7286                           ;PDU.c: 99: SetPin595(3, 4, ON);
  7287  000ACA  0E00               	movlw	0
  7288  000ACC  6E02               	movwf	SetPin595@Reg+1,c
  7289  000ACE  0E03               	movlw	3
  7290  000AD0  6E01               	movwf	SetPin595@Reg,c
  7291  000AD2  0E00               	movlw	0
  7292  000AD4  6E04               	movwf	SetPin595@pin+1,c
  7293  000AD6  0E04               	movlw	4
  7294  000AD8  6E03               	movwf	SetPin595@pin,c
  7295  000ADA  0E00               	movlw	0
  7296  000ADC  6E06               	movwf	SetPin595@value+1,c
  7297  000ADE  0E01               	movlw	1
  7298  000AE0  6E05               	movwf	SetPin595@value,c
  7299  000AE2  EC4C  F010         	call	_SetPin595	;wreg free
  7300                           
  7301                           ;PDU.c: 100: SetPin595(3, 3, OFF);
  7302  000AE6  0E00               	movlw	0
  7303  000AE8  6E02               	movwf	SetPin595@Reg+1,c
  7304  000AEA  0E03               	movlw	3
  7305  000AEC  6E01               	movwf	SetPin595@Reg,c
  7306  000AEE  0E00               	movlw	0
  7307  000AF0  6E04               	movwf	SetPin595@pin+1,c
  7308  000AF2  0E03               	movlw	3
  7309  000AF4  6E03               	movwf	SetPin595@pin,c
  7310  000AF6  0E00               	movlw	0
  7311  000AF8  6E06               	movwf	SetPin595@value+1,c
  7312  000AFA  0E00               	movlw	0
  7313  000AFC  6E05               	movwf	SetPin595@value,c
  7314  000AFE  EC4C  F010         	call	_SetPin595	;wreg free
  7315                           
  7316                           ;PDU.c: 101: SetPin595(3, 2, OFF);
  7317  000B02  0E00               	movlw	0
  7318  000B04  6E02               	movwf	SetPin595@Reg+1,c
  7319  000B06  0E03               	movlw	3
  7320  000B08  6E01               	movwf	SetPin595@Reg,c
  7321  000B0A  0E00               	movlw	0
  7322  000B0C  6E04               	movwf	SetPin595@pin+1,c
  7323  000B0E  0E02               	movlw	2
  7324  000B10  6E03               	movwf	SetPin595@pin,c
  7325  000B12  0E00               	movlw	0
  7326  000B14  6E06               	movwf	SetPin595@value+1,c
  7327  000B16  0E00               	movlw	0
  7328  000B18  6E05               	movwf	SetPin595@value,c
  7329  000B1A  EC4C  F010         	call	_SetPin595	;wreg free
  7330                           
  7331                           ;PDU.c: 102: Update();
  7332  000B1E  EC73  F012         	call	_Update	;wreg free
  7333                           
  7334                           ;PDU.c: 103: CurrentADC[1] = ADC_GetConversion(U5Multisense);
  7335  000B22  0E10               	movlw	16
  7336  000B24  EC82  F011         	call	_ADC_GetConversion
  7337  000B28  C001  F06E         	movff	?_ADC_GetConversion,_CurrentADC+2
  7338  000B2C  C002  F06F         	movff	?_ADC_GetConversion+1,_CurrentADC+3
  7339                           
  7340                           ;PDU.c: 105: }
  7341  000B30  0012               	return	
  7342  000B32                     i2l3274:
  7343                           
  7344                           ;PDU.c: 106: else if(gather == 4){
  7345  000B32  0E04               	movlw	4
  7346  000B34  180E               	xorwf	ReadCurrent@gather,w,c
  7347  000B36  A4D8               	btfss	status,2,c
  7348  000B38  D088               	goto	i2l3280
  7349                           
  7350                           ;PDU.c: 108: SetPin595(1, 4, ON);
  7351  000B3A  0E00               	movlw	0
  7352  000B3C  6E02               	movwf	SetPin595@Reg+1,c
  7353  000B3E  0E01               	movlw	1
  7354  000B40  6E01               	movwf	SetPin595@Reg,c
  7355  000B42  0E00               	movlw	0
  7356  000B44  6E04               	movwf	SetPin595@pin+1,c
  7357  000B46  0E04               	movlw	4
  7358  000B48  6E03               	movwf	SetPin595@pin,c
  7359  000B4A  0E00               	movlw	0
  7360  000B4C  6E06               	movwf	SetPin595@value+1,c
  7361  000B4E  0E01               	movlw	1
  7362  000B50  6E05               	movwf	SetPin595@value,c
  7363  000B52  EC4C  F010         	call	_SetPin595	;wreg free
  7364                           
  7365                           ;PDU.c: 109: SetPin595(1, 3, ON);
  7366  000B56  0E00               	movlw	0
  7367  000B58  6E02               	movwf	SetPin595@Reg+1,c
  7368  000B5A  0E01               	movlw	1
  7369  000B5C  6E01               	movwf	SetPin595@Reg,c
  7370  000B5E  0E00               	movlw	0
  7371  000B60  6E04               	movwf	SetPin595@pin+1,c
  7372  000B62  0E03               	movlw	3
  7373  000B64  6E03               	movwf	SetPin595@pin,c
  7374  000B66  0E00               	movlw	0
  7375  000B68  6E06               	movwf	SetPin595@value+1,c
  7376  000B6A  0E01               	movlw	1
  7377  000B6C  6E05               	movwf	SetPin595@value,c
  7378  000B6E  EC4C  F010         	call	_SetPin595	;wreg free
  7379                           
  7380                           ;PDU.c: 110: SetPin595(1, 2, OFF);
  7381  000B72  0E00               	movlw	0
  7382  000B74  6E02               	movwf	SetPin595@Reg+1,c
  7383  000B76  0E01               	movlw	1
  7384  000B78  6E01               	movwf	SetPin595@Reg,c
  7385  000B7A  0E00               	movlw	0
  7386  000B7C  6E04               	movwf	SetPin595@pin+1,c
  7387  000B7E  0E02               	movlw	2
  7388  000B80  6E03               	movwf	SetPin595@pin,c
  7389  000B82  0E00               	movlw	0
  7390  000B84  6E06               	movwf	SetPin595@value+1,c
  7391  000B86  0E00               	movlw	0
  7392  000B88  6E05               	movwf	SetPin595@value,c
  7393  000B8A  EC4C  F010         	call	_SetPin595	;wreg free
  7394                           
  7395                           ;PDU.c: 111: SetPin595(2, 4, OFF);
  7396  000B8E  0E00               	movlw	0
  7397  000B90  6E02               	movwf	SetPin595@Reg+1,c
  7398  000B92  0E02               	movlw	2
  7399  000B94  6E01               	movwf	SetPin595@Reg,c
  7400  000B96  0E00               	movlw	0
  7401  000B98  6E04               	movwf	SetPin595@pin+1,c
  7402  000B9A  0E04               	movlw	4
  7403  000B9C  6E03               	movwf	SetPin595@pin,c
  7404  000B9E  0E00               	movlw	0
  7405  000BA0  6E06               	movwf	SetPin595@value+1,c
  7406  000BA2  0E00               	movlw	0
  7407  000BA4  6E05               	movwf	SetPin595@value,c
  7408  000BA6  EC4C  F010         	call	_SetPin595	;wreg free
  7409                           
  7410                           ;PDU.c: 112: SetPin595(2, 3, OFF);
  7411  000BAA  0E00               	movlw	0
  7412  000BAC  6E02               	movwf	SetPin595@Reg+1,c
  7413  000BAE  0E02               	movlw	2
  7414  000BB0  6E01               	movwf	SetPin595@Reg,c
  7415  000BB2  0E00               	movlw	0
  7416  000BB4  6E04               	movwf	SetPin595@pin+1,c
  7417  000BB6  0E03               	movlw	3
  7418  000BB8  6E03               	movwf	SetPin595@pin,c
  7419  000BBA  0E00               	movlw	0
  7420  000BBC  6E06               	movwf	SetPin595@value+1,c
  7421  000BBE  0E00               	movlw	0
  7422  000BC0  6E05               	movwf	SetPin595@value,c
  7423  000BC2  EC4C  F010         	call	_SetPin595	;wreg free
  7424                           
  7425                           ;PDU.c: 113: SetPin595(2, 2, OFF);
  7426  000BC6  0E00               	movlw	0
  7427  000BC8  6E02               	movwf	SetPin595@Reg+1,c
  7428  000BCA  0E02               	movlw	2
  7429  000BCC  6E01               	movwf	SetPin595@Reg,c
  7430  000BCE  0E00               	movlw	0
  7431  000BD0  6E04               	movwf	SetPin595@pin+1,c
  7432  000BD2  0E02               	movlw	2
  7433  000BD4  6E03               	movwf	SetPin595@pin,c
  7434  000BD6  0E00               	movlw	0
  7435  000BD8  6E06               	movwf	SetPin595@value+1,c
  7436  000BDA  0E00               	movlw	0
  7437  000BDC  6E05               	movwf	SetPin595@value,c
  7438  000BDE  EC4C  F010         	call	_SetPin595	;wreg free
  7439                           
  7440                           ;PDU.c: 114: SetPin595(3, 4, OFF);
  7441  000BE2  0E00               	movlw	0
  7442  000BE4  6E02               	movwf	SetPin595@Reg+1,c
  7443  000BE6  0E03               	movlw	3
  7444  000BE8  6E01               	movwf	SetPin595@Reg,c
  7445  000BEA  0E00               	movlw	0
  7446  000BEC  6E04               	movwf	SetPin595@pin+1,c
  7447  000BEE  0E04               	movlw	4
  7448  000BF0  6E03               	movwf	SetPin595@pin,c
  7449  000BF2  0E00               	movlw	0
  7450  000BF4  6E06               	movwf	SetPin595@value+1,c
  7451  000BF6  0E00               	movlw	0
  7452  000BF8  6E05               	movwf	SetPin595@value,c
  7453  000BFA  EC4C  F010         	call	_SetPin595	;wreg free
  7454                           
  7455                           ;PDU.c: 115: SetPin595(3, 3, OFF);
  7456  000BFE  0E00               	movlw	0
  7457  000C00  6E02               	movwf	SetPin595@Reg+1,c
  7458  000C02  0E03               	movlw	3
  7459  000C04  6E01               	movwf	SetPin595@Reg,c
  7460  000C06  0E00               	movlw	0
  7461  000C08  6E04               	movwf	SetPin595@pin+1,c
  7462  000C0A  0E03               	movlw	3
  7463  000C0C  6E03               	movwf	SetPin595@pin,c
  7464  000C0E  0E00               	movlw	0
  7465  000C10  6E06               	movwf	SetPin595@value+1,c
  7466  000C12  0E00               	movlw	0
  7467  000C14  6E05               	movwf	SetPin595@value,c
  7468  000C16  EC4C  F010         	call	_SetPin595	;wreg free
  7469                           
  7470                           ;PDU.c: 116: SetPin595(3, 2, OFF);
  7471  000C1A  0E00               	movlw	0
  7472  000C1C  6E02               	movwf	SetPin595@Reg+1,c
  7473  000C1E  0E03               	movlw	3
  7474  000C20  6E01               	movwf	SetPin595@Reg,c
  7475  000C22  0E00               	movlw	0
  7476  000C24  6E04               	movwf	SetPin595@pin+1,c
  7477  000C26  0E02               	movlw	2
  7478  000C28  6E03               	movwf	SetPin595@pin,c
  7479  000C2A  0E00               	movlw	0
  7480  000C2C  6E06               	movwf	SetPin595@value+1,c
  7481  000C2E  0E00               	movlw	0
  7482  000C30  6E05               	movwf	SetPin595@value,c
  7483  000C32  EC4C  F010         	call	_SetPin595	;wreg free
  7484                           
  7485                           ;PDU.c: 117: Update();
  7486  000C36  EC73  F012         	call	_Update	;wreg free
  7487                           
  7488                           ;PDU.c: 118: CurrentADC[4] = ADC_GetConversion(U10Multisense);
  7489  000C3A  0E17               	movlw	23
  7490  000C3C  EC82  F011         	call	_ADC_GetConversion
  7491  000C40  C001  F074         	movff	?_ADC_GetConversion,_CurrentADC+8
  7492  000C44  C002  F075         	movff	?_ADC_GetConversion+1,_CurrentADC+9
  7493                           
  7494                           ;PDU.c: 120: }
  7495  000C48  0012               	return	
  7496  000C4A                     i2l3280:
  7497                           
  7498                           ;PDU.c: 121: else if(gather == 5){
  7499  000C4A  0E05               	movlw	5
  7500  000C4C  180E               	xorwf	ReadCurrent@gather,w,c
  7501  000C4E  A4D8               	btfss	status,2,c
  7502  000C50  D088               	goto	i2l3286
  7503                           
  7504                           ;PDU.c: 123: SetPin595(1, 4, OFF);
  7505  000C52  0E00               	movlw	0
  7506  000C54  6E02               	movwf	SetPin595@Reg+1,c
  7507  000C56  0E01               	movlw	1
  7508  000C58  6E01               	movwf	SetPin595@Reg,c
  7509  000C5A  0E00               	movlw	0
  7510  000C5C  6E04               	movwf	SetPin595@pin+1,c
  7511  000C5E  0E04               	movlw	4
  7512  000C60  6E03               	movwf	SetPin595@pin,c
  7513  000C62  0E00               	movlw	0
  7514  000C64  6E06               	movwf	SetPin595@value+1,c
  7515  000C66  0E00               	movlw	0
  7516  000C68  6E05               	movwf	SetPin595@value,c
  7517  000C6A  EC4C  F010         	call	_SetPin595	;wreg free
  7518                           
  7519                           ;PDU.c: 124: SetPin595(1, 3, OFF);
  7520  000C6E  0E00               	movlw	0
  7521  000C70  6E02               	movwf	SetPin595@Reg+1,c
  7522  000C72  0E01               	movlw	1
  7523  000C74  6E01               	movwf	SetPin595@Reg,c
  7524  000C76  0E00               	movlw	0
  7525  000C78  6E04               	movwf	SetPin595@pin+1,c
  7526  000C7A  0E03               	movlw	3
  7527  000C7C  6E03               	movwf	SetPin595@pin,c
  7528  000C7E  0E00               	movlw	0
  7529  000C80  6E06               	movwf	SetPin595@value+1,c
  7530  000C82  0E00               	movlw	0
  7531  000C84  6E05               	movwf	SetPin595@value,c
  7532  000C86  EC4C  F010         	call	_SetPin595	;wreg free
  7533                           
  7534                           ;PDU.c: 125: SetPin595(1, 2, OFF);
  7535  000C8A  0E00               	movlw	0
  7536  000C8C  6E02               	movwf	SetPin595@Reg+1,c
  7537  000C8E  0E01               	movlw	1
  7538  000C90  6E01               	movwf	SetPin595@Reg,c
  7539  000C92  0E00               	movlw	0
  7540  000C94  6E04               	movwf	SetPin595@pin+1,c
  7541  000C96  0E02               	movlw	2
  7542  000C98  6E03               	movwf	SetPin595@pin,c
  7543  000C9A  0E00               	movlw	0
  7544  000C9C  6E06               	movwf	SetPin595@value+1,c
  7545  000C9E  0E00               	movlw	0
  7546  000CA0  6E05               	movwf	SetPin595@value,c
  7547  000CA2  EC4C  F010         	call	_SetPin595	;wreg free
  7548                           
  7549                           ;PDU.c: 126: SetPin595(2, 4, ON);
  7550  000CA6  0E00               	movlw	0
  7551  000CA8  6E02               	movwf	SetPin595@Reg+1,c
  7552  000CAA  0E02               	movlw	2
  7553  000CAC  6E01               	movwf	SetPin595@Reg,c
  7554  000CAE  0E00               	movlw	0
  7555  000CB0  6E04               	movwf	SetPin595@pin+1,c
  7556  000CB2  0E04               	movlw	4
  7557  000CB4  6E03               	movwf	SetPin595@pin,c
  7558  000CB6  0E00               	movlw	0
  7559  000CB8  6E06               	movwf	SetPin595@value+1,c
  7560  000CBA  0E01               	movlw	1
  7561  000CBC  6E05               	movwf	SetPin595@value,c
  7562  000CBE  EC4C  F010         	call	_SetPin595	;wreg free
  7563                           
  7564                           ;PDU.c: 127: SetPin595(2, 3, OFF);
  7565  000CC2  0E00               	movlw	0
  7566  000CC4  6E02               	movwf	SetPin595@Reg+1,c
  7567  000CC6  0E02               	movlw	2
  7568  000CC8  6E01               	movwf	SetPin595@Reg,c
  7569  000CCA  0E00               	movlw	0
  7570  000CCC  6E04               	movwf	SetPin595@pin+1,c
  7571  000CCE  0E03               	movlw	3
  7572  000CD0  6E03               	movwf	SetPin595@pin,c
  7573  000CD2  0E00               	movlw	0
  7574  000CD4  6E06               	movwf	SetPin595@value+1,c
  7575  000CD6  0E00               	movlw	0
  7576  000CD8  6E05               	movwf	SetPin595@value,c
  7577  000CDA  EC4C  F010         	call	_SetPin595	;wreg free
  7578                           
  7579                           ;PDU.c: 128: SetPin595(2, 2, OFF);
  7580  000CDE  0E00               	movlw	0
  7581  000CE0  6E02               	movwf	SetPin595@Reg+1,c
  7582  000CE2  0E02               	movlw	2
  7583  000CE4  6E01               	movwf	SetPin595@Reg,c
  7584  000CE6  0E00               	movlw	0
  7585  000CE8  6E04               	movwf	SetPin595@pin+1,c
  7586  000CEA  0E02               	movlw	2
  7587  000CEC  6E03               	movwf	SetPin595@pin,c
  7588  000CEE  0E00               	movlw	0
  7589  000CF0  6E06               	movwf	SetPin595@value+1,c
  7590  000CF2  0E00               	movlw	0
  7591  000CF4  6E05               	movwf	SetPin595@value,c
  7592  000CF6  EC4C  F010         	call	_SetPin595	;wreg free
  7593                           
  7594                           ;PDU.c: 129: SetPin595(3, 4, OFF);
  7595  000CFA  0E00               	movlw	0
  7596  000CFC  6E02               	movwf	SetPin595@Reg+1,c
  7597  000CFE  0E03               	movlw	3
  7598  000D00  6E01               	movwf	SetPin595@Reg,c
  7599  000D02  0E00               	movlw	0
  7600  000D04  6E04               	movwf	SetPin595@pin+1,c
  7601  000D06  0E04               	movlw	4
  7602  000D08  6E03               	movwf	SetPin595@pin,c
  7603  000D0A  0E00               	movlw	0
  7604  000D0C  6E06               	movwf	SetPin595@value+1,c
  7605  000D0E  0E00               	movlw	0
  7606  000D10  6E05               	movwf	SetPin595@value,c
  7607  000D12  EC4C  F010         	call	_SetPin595	;wreg free
  7608                           
  7609                           ;PDU.c: 130: SetPin595(3, 3, OFF);
  7610  000D16  0E00               	movlw	0
  7611  000D18  6E02               	movwf	SetPin595@Reg+1,c
  7612  000D1A  0E03               	movlw	3
  7613  000D1C  6E01               	movwf	SetPin595@Reg,c
  7614  000D1E  0E00               	movlw	0
  7615  000D20  6E04               	movwf	SetPin595@pin+1,c
  7616  000D22  0E03               	movlw	3
  7617  000D24  6E03               	movwf	SetPin595@pin,c
  7618  000D26  0E00               	movlw	0
  7619  000D28  6E06               	movwf	SetPin595@value+1,c
  7620  000D2A  0E00               	movlw	0
  7621  000D2C  6E05               	movwf	SetPin595@value,c
  7622  000D2E  EC4C  F010         	call	_SetPin595	;wreg free
  7623                           
  7624                           ;PDU.c: 131: SetPin595(3, 2, OFF);
  7625  000D32  0E00               	movlw	0
  7626  000D34  6E02               	movwf	SetPin595@Reg+1,c
  7627  000D36  0E03               	movlw	3
  7628  000D38  6E01               	movwf	SetPin595@Reg,c
  7629  000D3A  0E00               	movlw	0
  7630  000D3C  6E04               	movwf	SetPin595@pin+1,c
  7631  000D3E  0E02               	movlw	2
  7632  000D40  6E03               	movwf	SetPin595@pin,c
  7633  000D42  0E00               	movlw	0
  7634  000D44  6E06               	movwf	SetPin595@value+1,c
  7635  000D46  0E00               	movlw	0
  7636  000D48  6E05               	movwf	SetPin595@value,c
  7637  000D4A  EC4C  F010         	call	_SetPin595	;wreg free
  7638                           
  7639                           ;PDU.c: 132: Update();
  7640  000D4E  EC73  F012         	call	_Update	;wreg free
  7641                           
  7642                           ;PDU.c: 133: CurrentADC[3] = ADC_GetConversion(U8Multisense);
  7643  000D52  0E16               	movlw	22
  7644  000D54  EC82  F011         	call	_ADC_GetConversion
  7645  000D58  C001  F072         	movff	?_ADC_GetConversion,_CurrentADC+6
  7646  000D5C  C002  F073         	movff	?_ADC_GetConversion+1,_CurrentADC+7
  7647                           
  7648                           ;PDU.c: 135: }
  7649  000D60  0012               	return	
  7650  000D62                     i2l3286:
  7651                           
  7652                           ;PDU.c: 136: else if(gather == 6){
  7653  000D62  0E06               	movlw	6
  7654  000D64  180E               	xorwf	ReadCurrent@gather,w,c
  7655  000D66  A4D8               	btfss	status,2,c
  7656  000D68  0012               	return	
  7657                           
  7658                           ;PDU.c: 138: SetPin595(1, 4, OFF);
  7659  000D6A  0E00               	movlw	0
  7660  000D6C  6E02               	movwf	SetPin595@Reg+1,c
  7661  000D6E  0E01               	movlw	1
  7662  000D70  6E01               	movwf	SetPin595@Reg,c
  7663  000D72  0E00               	movlw	0
  7664  000D74  6E04               	movwf	SetPin595@pin+1,c
  7665  000D76  0E04               	movlw	4
  7666  000D78  6E03               	movwf	SetPin595@pin,c
  7667  000D7A  0E00               	movlw	0
  7668  000D7C  6E06               	movwf	SetPin595@value+1,c
  7669  000D7E  0E00               	movlw	0
  7670  000D80  6E05               	movwf	SetPin595@value,c
  7671  000D82  EC4C  F010         	call	_SetPin595	;wreg free
  7672                           
  7673                           ;PDU.c: 139: SetPin595(1, 3, OFF);
  7674  000D86  0E00               	movlw	0
  7675  000D88  6E02               	movwf	SetPin595@Reg+1,c
  7676  000D8A  0E01               	movlw	1
  7677  000D8C  6E01               	movwf	SetPin595@Reg,c
  7678  000D8E  0E00               	movlw	0
  7679  000D90  6E04               	movwf	SetPin595@pin+1,c
  7680  000D92  0E03               	movlw	3
  7681  000D94  6E03               	movwf	SetPin595@pin,c
  7682  000D96  0E00               	movlw	0
  7683  000D98  6E06               	movwf	SetPin595@value+1,c
  7684  000D9A  0E00               	movlw	0
  7685  000D9C  6E05               	movwf	SetPin595@value,c
  7686  000D9E  EC4C  F010         	call	_SetPin595	;wreg free
  7687                           
  7688                           ;PDU.c: 140: SetPin595(1, 2, OFF);
  7689  000DA2  0E00               	movlw	0
  7690  000DA4  6E02               	movwf	SetPin595@Reg+1,c
  7691  000DA6  0E01               	movlw	1
  7692  000DA8  6E01               	movwf	SetPin595@Reg,c
  7693  000DAA  0E00               	movlw	0
  7694  000DAC  6E04               	movwf	SetPin595@pin+1,c
  7695  000DAE  0E02               	movlw	2
  7696  000DB0  6E03               	movwf	SetPin595@pin,c
  7697  000DB2  0E00               	movlw	0
  7698  000DB4  6E06               	movwf	SetPin595@value+1,c
  7699  000DB6  0E00               	movlw	0
  7700  000DB8  6E05               	movwf	SetPin595@value,c
  7701  000DBA  EC4C  F010         	call	_SetPin595	;wreg free
  7702                           
  7703                           ;PDU.c: 141: SetPin595(2, 4, OFF);
  7704  000DBE  0E00               	movlw	0
  7705  000DC0  6E02               	movwf	SetPin595@Reg+1,c
  7706  000DC2  0E02               	movlw	2
  7707  000DC4  6E01               	movwf	SetPin595@Reg,c
  7708  000DC6  0E00               	movlw	0
  7709  000DC8  6E04               	movwf	SetPin595@pin+1,c
  7710  000DCA  0E04               	movlw	4
  7711  000DCC  6E03               	movwf	SetPin595@pin,c
  7712  000DCE  0E00               	movlw	0
  7713  000DD0  6E06               	movwf	SetPin595@value+1,c
  7714  000DD2  0E00               	movlw	0
  7715  000DD4  6E05               	movwf	SetPin595@value,c
  7716  000DD6  EC4C  F010         	call	_SetPin595	;wreg free
  7717                           
  7718                           ;PDU.c: 142: SetPin595(2, 3, OFF);
  7719  000DDA  0E00               	movlw	0
  7720  000DDC  6E02               	movwf	SetPin595@Reg+1,c
  7721  000DDE  0E02               	movlw	2
  7722  000DE0  6E01               	movwf	SetPin595@Reg,c
  7723  000DE2  0E00               	movlw	0
  7724  000DE4  6E04               	movwf	SetPin595@pin+1,c
  7725  000DE6  0E03               	movlw	3
  7726  000DE8  6E03               	movwf	SetPin595@pin,c
  7727  000DEA  0E00               	movlw	0
  7728  000DEC  6E06               	movwf	SetPin595@value+1,c
  7729  000DEE  0E00               	movlw	0
  7730  000DF0  6E05               	movwf	SetPin595@value,c
  7731  000DF2  EC4C  F010         	call	_SetPin595	;wreg free
  7732                           
  7733                           ;PDU.c: 143: SetPin595(2, 2, OFF);
  7734  000DF6  0E00               	movlw	0
  7735  000DF8  6E02               	movwf	SetPin595@Reg+1,c
  7736  000DFA  0E02               	movlw	2
  7737  000DFC  6E01               	movwf	SetPin595@Reg,c
  7738  000DFE  0E00               	movlw	0
  7739  000E00  6E04               	movwf	SetPin595@pin+1,c
  7740  000E02  0E02               	movlw	2
  7741  000E04  6E03               	movwf	SetPin595@pin,c
  7742  000E06  0E00               	movlw	0
  7743  000E08  6E06               	movwf	SetPin595@value+1,c
  7744  000E0A  0E00               	movlw	0
  7745  000E0C  6E05               	movwf	SetPin595@value,c
  7746  000E0E  EC4C  F010         	call	_SetPin595	;wreg free
  7747                           
  7748                           ;PDU.c: 144: SetPin595(3, 4, ON);
  7749  000E12  0E00               	movlw	0
  7750  000E14  6E02               	movwf	SetPin595@Reg+1,c
  7751  000E16  0E03               	movlw	3
  7752  000E18  6E01               	movwf	SetPin595@Reg,c
  7753  000E1A  0E00               	movlw	0
  7754  000E1C  6E04               	movwf	SetPin595@pin+1,c
  7755  000E1E  0E04               	movlw	4
  7756  000E20  6E03               	movwf	SetPin595@pin,c
  7757  000E22  0E00               	movlw	0
  7758  000E24  6E06               	movwf	SetPin595@value+1,c
  7759  000E26  0E01               	movlw	1
  7760  000E28  6E05               	movwf	SetPin595@value,c
  7761  000E2A  EC4C  F010         	call	_SetPin595	;wreg free
  7762                           
  7763                           ;PDU.c: 145: SetPin595(3, 3, ON);
  7764  000E2E  0E00               	movlw	0
  7765  000E30  6E02               	movwf	SetPin595@Reg+1,c
  7766  000E32  0E03               	movlw	3
  7767  000E34  6E01               	movwf	SetPin595@Reg,c
  7768  000E36  0E00               	movlw	0
  7769  000E38  6E04               	movwf	SetPin595@pin+1,c
  7770  000E3A  0E03               	movlw	3
  7771  000E3C  6E03               	movwf	SetPin595@pin,c
  7772  000E3E  0E00               	movlw	0
  7773  000E40  6E06               	movwf	SetPin595@value+1,c
  7774  000E42  0E01               	movlw	1
  7775  000E44  6E05               	movwf	SetPin595@value,c
  7776  000E46  EC4C  F010         	call	_SetPin595	;wreg free
  7777                           
  7778                           ;PDU.c: 146: SetPin595(3, 2, OFF);
  7779  000E4A  0E00               	movlw	0
  7780  000E4C  6E02               	movwf	SetPin595@Reg+1,c
  7781  000E4E  0E03               	movlw	3
  7782  000E50  6E01               	movwf	SetPin595@Reg,c
  7783  000E52  0E00               	movlw	0
  7784  000E54  6E04               	movwf	SetPin595@pin+1,c
  7785  000E56  0E02               	movlw	2
  7786  000E58  6E03               	movwf	SetPin595@pin,c
  7787  000E5A  0E00               	movlw	0
  7788  000E5C  6E06               	movwf	SetPin595@value+1,c
  7789  000E5E  0E00               	movlw	0
  7790  000E60  6E05               	movwf	SetPin595@value,c
  7791  000E62  EC4C  F010         	call	_SetPin595	;wreg free
  7792                           
  7793                           ;PDU.c: 147: Update();
  7794  000E66  EC73  F012         	call	_Update	;wreg free
  7795                           
  7796                           ;PDU.c: 148: CurrentADC[0] = ADC_GetConversion(U5Multisense);
  7797  000E6A  0E10               	movlw	16
  7798  000E6C  EC82  F011         	call	_ADC_GetConversion
  7799  000E70  C001  F06C         	movff	?_ADC_GetConversion,_CurrentADC
  7800  000E74  C002  F06D         	movff	?_ADC_GetConversion+1,_CurrentADC+1
  7801  000E78  0012               	return	
  7802  000E7A                     __end_of_ReadCurrent:
  7803                           	opt stack 0
  7804                           tosu	equ	0xFFF
  7805                           tosh	equ	0xFFE
  7806                           tosl	equ	0xFFD
  7807                           pclatu	equ	0xFFB
  7808                           pclath	equ	0xFFA
  7809                           tblptru	equ	0xFF8
  7810                           tblptrh	equ	0xFF7
  7811                           tblptrl	equ	0xFF6
  7812                           tablat	equ	0xFF5
  7813                           prodh	equ	0xFF4
  7814                           prodl	equ	0xFF3
  7815                           intcon	equ	0xFF2
  7816                           intcon2	equ	0xFF1
  7817                           postinc0	equ	0xFEE
  7818                           fsr0h	equ	0xFEA
  7819                           fsr0l	equ	0xFE9
  7820                           wreg	equ	0xFE8
  7821                           fsr1h	equ	0xFE2
  7822                           fsr1l	equ	0xFE1
  7823                           indf2	equ	0xFDF
  7824                           postinc2	equ	0xFDE
  7825                           postdec2	equ	0xFDD
  7826                           plusw2	equ	0xFDB
  7827                           fsr2h	equ	0xFDA
  7828                           fsr2l	equ	0xFD9
  7829                           status	equ	0xFD8
  7830                           
  7831 ;; *************** function _Update *****************
  7832 ;; Defined at:
  7833 ;;		line 208 in file "PDU.c"
  7834 ;; Parameters:    Size  Location     Type
  7835 ;;		None
  7836 ;; Auto vars:     Size  Location     Type
  7837 ;;		None
  7838 ;; Return value:  Size  Location     Type
  7839 ;;                  1    wreg      void 
  7840 ;; Registers used:
  7841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7842 ;; Tracked objects:
  7843 ;;		On entry : 0/0
  7844 ;;		On exit  : 0/0
  7845 ;;		Unchanged: 0/0
  7846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7847 ;;      Params:         0       0       0       0       0       0       0
  7848 ;;      Locals:         0       0       0       0       0       0       0
  7849 ;;      Temps:          0       0       0       0       0       0       0
  7850 ;;      Totals:         0       0       0       0       0       0       0
  7851 ;;Total ram usage:        0 bytes
  7852 ;; Hardware stack levels used:    1
  7853 ;; Hardware stack levels required when called:    2
  7854 ;; This function calls:
  7855 ;;		_writeRegisters
  7856 ;; This function is called by:
  7857 ;;		_ReadCurrent
  7858 ;;		_processPowerRequest
  7859 ;;		_PDUStartup
  7860 ;; This function uses a non-reentrant model
  7861 ;;
  7862                           
  7863                           	psect	text36
  7864  0024E6                     __ptext36:
  7865                           	opt stack 0
  7866  0024E6                     _Update:
  7867                           	opt stack 19
  7868                           
  7869                           ;PDU.c: 209: writeRegisters();
  7870                           
  7871                           ;incstack = 0
  7872  0024E6  ECD0  F00E         	call	_writeRegisters	;wreg free
  7873  0024EA  0012               	return		;funcret
  7874  0024EC                     __end_of_Update:
  7875                           	opt stack 0
  7876                           tosu	equ	0xFFF
  7877                           tosh	equ	0xFFE
  7878                           tosl	equ	0xFFD
  7879                           pclatu	equ	0xFFB
  7880                           pclath	equ	0xFFA
  7881                           tblptru	equ	0xFF8
  7882                           tblptrh	equ	0xFF7
  7883                           tblptrl	equ	0xFF6
  7884                           tablat	equ	0xFF5
  7885                           prodh	equ	0xFF4
  7886                           prodl	equ	0xFF3
  7887                           intcon	equ	0xFF2
  7888                           intcon2	equ	0xFF1
  7889                           postinc0	equ	0xFEE
  7890                           fsr0h	equ	0xFEA
  7891                           fsr0l	equ	0xFE9
  7892                           wreg	equ	0xFE8
  7893                           fsr1h	equ	0xFE2
  7894                           fsr1l	equ	0xFE1
  7895                           indf2	equ	0xFDF
  7896                           postinc2	equ	0xFDE
  7897                           postdec2	equ	0xFDD
  7898                           plusw2	equ	0xFDB
  7899                           fsr2h	equ	0xFDA
  7900                           fsr2l	equ	0xFD9
  7901                           status	equ	0xFD8
  7902                           
  7903 ;; *************** function _writeRegisters *****************
  7904 ;; Defined at:
  7905 ;;		line 50 in file "Shift595.c"
  7906 ;; Parameters:    Size  Location     Type
  7907 ;;		None
  7908 ;; Auto vars:     Size  Location     Type
  7909 ;;  i               2   11[COMRAM] int 
  7910 ;;  val             2    9[COMRAM] int 
  7911 ;; Return value:  Size  Location     Type
  7912 ;;                  1    wreg      void 
  7913 ;; Registers used:
  7914 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7915 ;; Tracked objects:
  7916 ;;		On entry : 0/0
  7917 ;;		On exit  : 0/0
  7918 ;;		Unchanged: 0/0
  7919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7920 ;;      Params:         0       0       0       0       0       0       0
  7921 ;;      Locals:         4       0       0       0       0       0       0
  7922 ;;      Temps:          0       0       0       0       0       0       0
  7923 ;;      Totals:         4       0       0       0       0       0       0
  7924 ;;Total ram usage:        4 bytes
  7925 ;; Hardware stack levels used:    1
  7926 ;; Hardware stack levels required when called:    1
  7927 ;; This function calls:
  7928 ;;		i2_Delay
  7929 ;; This function is called by:
  7930 ;;		_Update
  7931 ;;		_Clear595
  7932 ;; This function uses a non-reentrant model
  7933 ;;
  7934                           
  7935                           	psect	text37
  7936  001DA0                     __ptext37:
  7937                           	opt stack 0
  7938  001DA0                     _writeRegisters:
  7939                           	opt stack 19
  7940                           
  7941                           ;Shift595.c: 51: int val = 0;
  7942                           
  7943                           ;incstack = 0
  7944  001DA0  0E00               	movlw	0
  7945  001DA2  6E0B               	movwf	writeRegisters@val+1,c
  7946  001DA4  0E00               	movlw	0
  7947  001DA6  6E0A               	movwf	writeRegisters@val,c
  7948                           
  7949                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  7950  001DA8  0E00               	movlw	0
  7951  001DAA  6E0D               	movwf	writeRegisters@i+1,c
  7952  001DAC  0E17               	movlw	23
  7953  001DAE  6E0C               	movwf	writeRegisters@i,c
  7954  001DB0                     i2l2920:
  7955  001DB0  BE0D               	btfsc	writeRegisters@i+1,7,c
  7956  001DB2  D01D               	goto	i2l740
  7957                           
  7958                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  7959  001DB4  9E8C               	bcf	3980,7,c	;volatile
  7960                           
  7961                           ;Shift595.c: 55: val = registers[i];
  7962  001DB6  90D8               	bcf	status,0,c
  7963  001DB8  340C               	rlcf	writeRegisters@i,w,c
  7964  001DBA  6ED9               	movwf	fsr2l,c
  7965  001DBC  340D               	rlcf	writeRegisters@i+1,w,c
  7966  001DBE  6EDA               	movwf	fsr2h,c
  7967  001DC0  0E00               	movlw	low _registers
  7968  001DC2  26D9               	addwf	fsr2l,f,c
  7969  001DC4  0E01               	movlw	high _registers
  7970  001DC6  22DA               	addwfc	fsr2h,f,c
  7971  001DC8  CFDE F00A          	movff	postinc2,writeRegisters@val
  7972  001DCC  CFDD F00B          	movff	postdec2,writeRegisters@val+1
  7973                           
  7974                           ;Shift595.c: 56: if (val == 1) {
  7975  001DD0  040A               	decf	writeRegisters@val,w,c
  7976  001DD2  100B               	iorwf	writeRegisters@val+1,w,c
  7977  001DD4  A4D8               	btfss	status,2,c
  7978  001DD6  D002               	goto	i2l2928
  7979                           
  7980                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  7981  001DD8  888C               	bsf	3980,4,c	;volatile
  7982                           
  7983                           ;Shift595.c: 58: } else if (val == 0) {
  7984  001DDA  D004               	goto	i2l738
  7985  001DDC                     i2l2928:
  7986  001DDC  500A               	movf	writeRegisters@val,w,c
  7987  001DDE  100B               	iorwf	writeRegisters@val+1,w,c
  7988  001DE0  B4D8               	btfsc	status,2,c
  7989                           
  7990                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  7991  001DE2  988C               	bcf	3980,4,c	;volatile
  7992  001DE4                     i2l738:
  7993  001DE4  8E8C               	bsf	3980,7,c	;volatile
  7994  001DE6  060C               	decf	writeRegisters@i,f,c
  7995  001DE8  A0D8               	btfss	status,0,c
  7996  001DEA  060D               	decf	writeRegisters@i+1,f,c
  7997  001DEC  D7E1               	goto	i2l2920
  7998  001DEE                     i2l740:
  7999  001DEE  9E8C               	bcf	3980,7,c	;volatile
  8000                           
  8001                           ;Shift595.c: 67: Delay(1);
  8002  001DF0  0E01               	movlw	1
  8003  001DF2  6E01               	movwf	i2Delay@wait,c
  8004  001DF4  0E00               	movlw	0
  8005  001DF6  6E02               	movwf	i2Delay@wait+1,c
  8006  001DF8  0E00               	movlw	0
  8007  001DFA  6E03               	movwf	i2Delay@wait+2,c
  8008  001DFC  0E00               	movlw	0
  8009  001DFE  6E04               	movwf	i2Delay@wait+3,c
  8010  001E00  EC73  F010         	call	i2_Delay	;wreg free
  8011                           
  8012                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  8013  001E04  8C8C               	bsf	3980,6,c	;volatile
  8014                           
  8015                           ;Shift595.c: 69: Delay(1);
  8016  001E06  0E01               	movlw	1
  8017  001E08  6E01               	movwf	i2Delay@wait,c
  8018  001E0A  0E00               	movlw	0
  8019  001E0C  6E02               	movwf	i2Delay@wait+1,c
  8020  001E0E  0E00               	movlw	0
  8021  001E10  6E03               	movwf	i2Delay@wait+2,c
  8022  001E12  0E00               	movlw	0
  8023  001E14  6E04               	movwf	i2Delay@wait+3,c
  8024  001E16  EC73  F010         	call	i2_Delay	;wreg free
  8025                           
  8026                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  8027  001E1A  9C8C               	bcf	3980,6,c	;volatile
  8028  001E1C  0012               	return	
  8029  001E1E                     __end_of_writeRegisters:
  8030                           	opt stack 0
  8031                           tosu	equ	0xFFF
  8032                           tosh	equ	0xFFE
  8033                           tosl	equ	0xFFD
  8034                           pclatu	equ	0xFFB
  8035                           pclath	equ	0xFFA
  8036                           tblptru	equ	0xFF8
  8037                           tblptrh	equ	0xFF7
  8038                           tblptrl	equ	0xFF6
  8039                           tablat	equ	0xFF5
  8040                           prodh	equ	0xFF4
  8041                           prodl	equ	0xFF3
  8042                           intcon	equ	0xFF2
  8043                           intcon2	equ	0xFF1
  8044                           postinc0	equ	0xFEE
  8045                           fsr0h	equ	0xFEA
  8046                           fsr0l	equ	0xFE9
  8047                           wreg	equ	0xFE8
  8048                           fsr1h	equ	0xFE2
  8049                           fsr1l	equ	0xFE1
  8050                           indf2	equ	0xFDF
  8051                           postinc2	equ	0xFDE
  8052                           postdec2	equ	0xFDD
  8053                           plusw2	equ	0xFDB
  8054                           fsr2h	equ	0xFDA
  8055                           fsr2l	equ	0xFD9
  8056                           status	equ	0xFD8
  8057                           
  8058 ;; *************** function i2_Delay *****************
  8059 ;; Defined at:
  8060 ;;		line 9 in file "Functions.c"
  8061 ;; Parameters:    Size  Location     Type
  8062 ;;  wait            4    0[COMRAM] long 
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;  Delay           4    5[COMRAM] long 
  8065 ;; Return value:  Size  Location     Type
  8066 ;;                  1    wreg      void 
  8067 ;; Registers used:
  8068 ;;		wreg, status,2, status,0
  8069 ;; Tracked objects:
  8070 ;;		On entry : 0/0
  8071 ;;		On exit  : 0/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8074 ;;      Params:         4       0       0       0       0       0       0
  8075 ;;      Locals:         4       0       0       0       0       0       0
  8076 ;;      Temps:          1       0       0       0       0       0       0
  8077 ;;      Totals:         9       0       0       0       0       0       0
  8078 ;;Total ram usage:        9 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; This function calls:
  8081 ;;		Nothing
  8082 ;; This function is called by:
  8083 ;;		_writeRegisters
  8084 ;; This function uses a non-reentrant model
  8085 ;;
  8086                           
  8087                           	psect	text38
  8088  0020E6                     __ptext38:
  8089                           	opt stack 0
  8090  0020E6                     i2_Delay:
  8091                           	opt stack 19
  8092                           
  8093                           ;Functions.c: 10: long int i = 0;
  8094                           
  8095                           ;incstack = 0
  8096  0020E6  0E00               	movlw	0
  8097  0020E8  6E06               	movwf	i2Delay@i,c
  8098  0020EA  0E00               	movlw	0
  8099  0020EC  6E07               	movwf	i2Delay@i+1,c
  8100  0020EE  0E00               	movlw	0
  8101  0020F0  6E08               	movwf	i2Delay@i+2,c
  8102  0020F2  0E00               	movlw	0
  8103  0020F4  6E09               	movwf	i2Delay@i+3,c
  8104                           
  8105                           ;Functions.c: 11: for (; wait > i; i++) {
  8106  0020F6  D00D               	goto	i2l2824
  8107  0020F8                     i2l2820:
  8108                           
  8109                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  8110  0020F8  0E03               	movlw	3
  8111  0020FA  6E05               	movwf	??i2_Delay& (0+255),c
  8112  0020FC  0E98               	movlw	152
  8113  0020FE                     i2u416_47:
  8114  0020FE  2EE8               	decfsz	wreg,f,c
  8115  002100  D7FE               	goto	i2u416_47
  8116  002102  2E05               	decfsz	??i2_Delay& (0+255),f,c
  8117  002104  D7FC               	goto	i2u416_47
  8118  002106  0E01               	movlw	1
  8119  002108  2606               	addwf	i2Delay@i,f,c
  8120  00210A  0E00               	movlw	0
  8121  00210C  2207               	addwfc	i2Delay@i+1,f,c
  8122  00210E  2208               	addwfc	i2Delay@i+2,f,c
  8123  002110  2209               	addwfc	i2Delay@i+3,f,c
  8124  002112                     i2l2824:
  8125  002112  5001               	movf	i2Delay@wait,w,c
  8126  002114  5C06               	subwf	i2Delay@i,w,c
  8127  002116  5002               	movf	i2Delay@wait+1,w,c
  8128  002118  5807               	subwfb	i2Delay@i+1,w,c
  8129  00211A  5003               	movf	i2Delay@wait+2,w,c
  8130  00211C  5808               	subwfb	i2Delay@i+2,w,c
  8131  00211E  5009               	movf	i2Delay@i+3,w,c
  8132  002120  0A80               	xorlw	128
  8133  002122  6E05               	movwf	??i2_Delay& (0+255),c
  8134  002124  5004               	movf	i2Delay@wait+3,w,c
  8135  002126  0A80               	xorlw	128
  8136  002128  5805               	subwfb	??i2_Delay& (0+255),w,c
  8137  00212A  B0D8               	btfsc	status,0,c
  8138  00212C  0012               	return	
  8139  00212E  D7E4               	goto	i2l2820
  8140  002130                     __end_ofi2_Delay:
  8141                           	opt stack 0
  8142                           tosu	equ	0xFFF
  8143                           tosh	equ	0xFFE
  8144                           tosl	equ	0xFFD
  8145                           pclatu	equ	0xFFB
  8146                           pclath	equ	0xFFA
  8147                           tblptru	equ	0xFF8
  8148                           tblptrh	equ	0xFF7
  8149                           tblptrl	equ	0xFF6
  8150                           tablat	equ	0xFF5
  8151                           prodh	equ	0xFF4
  8152                           prodl	equ	0xFF3
  8153                           intcon	equ	0xFF2
  8154                           intcon2	equ	0xFF1
  8155                           postinc0	equ	0xFEE
  8156                           fsr0h	equ	0xFEA
  8157                           fsr0l	equ	0xFE9
  8158                           wreg	equ	0xFE8
  8159                           fsr1h	equ	0xFE2
  8160                           fsr1l	equ	0xFE1
  8161                           indf2	equ	0xFDF
  8162                           postinc2	equ	0xFDE
  8163                           postdec2	equ	0xFDD
  8164                           plusw2	equ	0xFDB
  8165                           fsr2h	equ	0xFDA
  8166                           fsr2l	equ	0xFD9
  8167                           status	equ	0xFD8
  8168                           
  8169 ;; *************** function _ADC_GetConversion *****************
  8170 ;; Defined at:
  8171 ;;		line 109 in file "mcc_generated_files/adc.c"
  8172 ;; Parameters:    Size  Location     Type
  8173 ;;  channel         1    wreg     enum E7738
  8174 ;; Auto vars:     Size  Location     Type
  8175 ;;  channel         1    4[COMRAM] enum E7738
  8176 ;; Return value:  Size  Location     Type
  8177 ;;                  2    0[COMRAM] unsigned int 
  8178 ;; Registers used:
  8179 ;;		wreg, status,2, status,0
  8180 ;; Tracked objects:
  8181 ;;		On entry : 0/0
  8182 ;;		On exit  : 0/0
  8183 ;;		Unchanged: 0/0
  8184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8185 ;;      Params:         2       0       0       0       0       0       0
  8186 ;;      Locals:         1       0       0       0       0       0       0
  8187 ;;      Temps:          2       0       0       0       0       0       0
  8188 ;;      Totals:         5       0       0       0       0       0       0
  8189 ;;Total ram usage:        5 bytes
  8190 ;; Hardware stack levels used:    1
  8191 ;; This function calls:
  8192 ;;		Nothing
  8193 ;; This function is called by:
  8194 ;;		_ReadCurrent
  8195 ;; This function uses a non-reentrant model
  8196 ;;
  8197                           
  8198                           	psect	text39
  8199  002304                     __ptext39:
  8200                           	opt stack 0
  8201  002304                     _ADC_GetConversion:
  8202                           	opt stack 21
  8203                           
  8204                           ;incstack = 0
  8205                           ;ADC_GetConversion@channel stored from wreg
  8206  002304  6E05               	movwf	ADC_GetConversion@channel,c
  8207                           
  8208                           ;adc.c: 112: ADCON0bits.CHS = channel;
  8209  002306  C005  F003         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  8210  00230A  4603               	rlncf	??_ADC_GetConversion,f,c
  8211  00230C  4603               	rlncf	??_ADC_GetConversion,f,c
  8212  00230E  50C2               	movf	4034,w,c	;volatile
  8213  002310  1803               	xorwf	??_ADC_GetConversion,w,c
  8214  002312  0B83               	andlw	-125
  8215  002314  1803               	xorwf	??_ADC_GetConversion,w,c
  8216  002316  6EC2               	movwf	4034,c	;volatile
  8217                           
  8218                           ;adc.c: 115: ADCON0bits.ADON = 1;
  8219  002318  80C2               	bsf	4034,0,c	;volatile
  8220                           
  8221                           ;adc.c: 119: ADCON0bits.GO_nDONE = 1;
  8222  00231A  82C2               	bsf	4034,1,c	;volatile
  8223  00231C                     i2l31:
  8224  00231C  B2C2               	btfsc	4034,1,c	;volatile
  8225  00231E  D7FE               	goto	i2l31
  8226                           
  8227                           ;adc.c: 124: }
  8228                           ;adc.c: 127: return ((ADRESH << 8) + ADRESL);
  8229  002320  50C4               	movf	4036,w,c	;volatile
  8230  002322  6E04               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  8231  002324  6A03               	clrf	??_ADC_GetConversion& (0+255),c
  8232  002326  50C3               	movf	4035,w,c	;volatile
  8233  002328  2403               	addwf	??_ADC_GetConversion,w,c
  8234  00232A  6E01               	movwf	?_ADC_GetConversion,c
  8235  00232C  0E00               	movlw	0
  8236  00232E  2004               	addwfc	??_ADC_GetConversion+1,w,c
  8237  002330  6E02               	movwf	?_ADC_GetConversion+1,c
  8238  002332  0012               	return	
  8239  002334                     __end_of_ADC_GetConversion:
  8240                           	opt stack 0
  8241                           tosu	equ	0xFFF
  8242                           tosh	equ	0xFFE
  8243                           tosl	equ	0xFFD
  8244                           pclatu	equ	0xFFB
  8245                           pclath	equ	0xFFA
  8246                           tblptru	equ	0xFF8
  8247                           tblptrh	equ	0xFF7
  8248                           tblptrl	equ	0xFF6
  8249                           tablat	equ	0xFF5
  8250                           prodh	equ	0xFF4
  8251                           prodl	equ	0xFF3
  8252                           intcon	equ	0xFF2
  8253                           intcon2	equ	0xFF1
  8254                           postinc0	equ	0xFEE
  8255                           fsr0h	equ	0xFEA
  8256                           fsr0l	equ	0xFE9
  8257                           wreg	equ	0xFE8
  8258                           fsr1h	equ	0xFE2
  8259                           fsr1l	equ	0xFE1
  8260                           indf2	equ	0xFDF
  8261                           postinc2	equ	0xFDE
  8262                           postdec2	equ	0xFDD
  8263                           plusw2	equ	0xFDB
  8264                           fsr2h	equ	0xFDA
  8265                           fsr2l	equ	0xFD9
  8266                           status	equ	0xFD8
  8267                           
  8268 ;; *************** function _FuseSystem *****************
  8269 ;; Defined at:
  8270 ;;		line 172 in file "PDU.c"
  8271 ;; Parameters:    Size  Location     Type
  8272 ;;		None
  8273 ;; Auto vars:     Size  Location     Type
  8274 ;;  i               2   19[COMRAM] int 
  8275 ;;  i               2   17[COMRAM] int 
  8276 ;; Return value:  Size  Location     Type
  8277 ;;                  1    wreg      void 
  8278 ;; Registers used:
  8279 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8280 ;; Tracked objects:
  8281 ;;		On entry : 0/0
  8282 ;;		On exit  : 0/0
  8283 ;;		Unchanged: 0/0
  8284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8285 ;;      Params:         0       0       0       0       0       0       0
  8286 ;;      Locals:         4       0       0       0       0       0       0
  8287 ;;      Temps:          4       0       0       0       0       0       0
  8288 ;;      Totals:         8       0       0       0       0       0       0
  8289 ;;Total ram usage:        8 bytes
  8290 ;; Hardware stack levels used:    1
  8291 ;; Hardware stack levels required when called:    2
  8292 ;; This function calls:
  8293 ;;		_EnableSlavePower
  8294 ;;		___wmul
  8295 ;; This function is called by:
  8296 ;;		_TMR1_ISR
  8297 ;; This function uses a non-reentrant model
  8298 ;;
  8299                           
  8300                           	psect	text40
  8301  0011B2                     __ptext40:
  8302                           	opt stack 0
  8303  0011B2                     _FuseSystem:
  8304                           	opt stack 20
  8305                           
  8306                           ;PDU.c: 174: for (int i = 0; i < 6; i++) {
  8307                           
  8308                           ;incstack = 0
  8309  0011B2  0E00               	movlw	0
  8310  0011B4  6E13               	movwf	FuseSystem@i+1,c
  8311  0011B6  0E00               	movlw	0
  8312  0011B8  6E12               	movwf	FuseSystem@i,c
  8313  0011BA                     i2l3214:
  8314  0011BA  BE13               	btfsc	FuseSystem@i+1,7,c
  8315  0011BC  D006               	goto	i2l3218
  8316  0011BE  5013               	movf	FuseSystem@i+1,w,c
  8317  0011C0  E127               	bnz	i2l3224
  8318  0011C2  0E06               	movlw	6
  8319  0011C4  5C12               	subwf	FuseSystem@i,w,c
  8320  0011C6  B0D8               	btfsc	status,0,c
  8321  0011C8  D023               	goto	i2l3224
  8322  0011CA                     i2l3218:
  8323                           
  8324                           ;PDU.c: 175: Current[i] = CurrentADC[i]*48;
  8325  0011CA  90D8               	bcf	status,0,c
  8326  0011CC  3412               	rlcf	FuseSystem@i,w,c
  8327  0011CE  6ED9               	movwf	fsr2l,c
  8328  0011D0  3413               	rlcf	FuseSystem@i+1,w,c
  8329  0011D2  6EDA               	movwf	fsr2h,c
  8330  0011D4  0E6C               	movlw	low _CurrentADC
  8331  0011D6  26D9               	addwf	fsr2l,f,c
  8332  0011D8  0E00               	movlw	high _CurrentADC
  8333  0011DA  22DA               	addwfc	fsr2h,f,c
  8334  0011DC  CFDE F001          	movff	postinc2,___wmul@multiplier
  8335  0011E0  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  8336  0011E4  0E00               	movlw	0
  8337  0011E6  6E04               	movwf	___wmul@multiplicand+1,c
  8338  0011E8  0E30               	movlw	48
  8339  0011EA  6E03               	movwf	___wmul@multiplicand,c
  8340  0011EC  ECEF  F011         	call	___wmul	;wreg free
  8341  0011F0  90D8               	bcf	status,0,c
  8342  0011F2  3412               	rlcf	FuseSystem@i,w,c
  8343  0011F4  6ED9               	movwf	fsr2l,c
  8344  0011F6  3413               	rlcf	FuseSystem@i+1,w,c
  8345  0011F8  6EDA               	movwf	fsr2h,c
  8346  0011FA  0E60               	movlw	low _Current
  8347  0011FC  26D9               	addwf	fsr2l,f,c
  8348  0011FE  0E00               	movlw	high _Current
  8349  001200  22DA               	addwfc	fsr2h,f,c
  8350  001202  C001  FFDE         	movff	?___wmul,postinc2
  8351  001206  C002  FFDD         	movff	?___wmul+1,postdec2
  8352  00120A  4A12               	infsnz	FuseSystem@i,f,c
  8353  00120C  2A13               	incf	FuseSystem@i+1,f,c
  8354  00120E  D7D5               	goto	i2l3214
  8355  001210                     i2l3224:
  8356                           
  8357                           ;PDU.c: 178: }
  8358                           ;PDU.c: 180: for (int i = 0; i < 6; i++) {
  8359  001210  0E00               	movlw	0
  8360  001212  6E15               	movwf	FuseSystem@i_1550+1,c
  8361  001214  0E00               	movlw	0
  8362  001216  6E14               	movwf	FuseSystem@i_1550,c
  8363  001218  BE15               	btfsc	FuseSystem@i_1550+1,7,c
  8364  00121A  D008               	goto	i2l3230
  8365  00121C  5015               	movf	FuseSystem@i_1550+1,w,c
  8366  00121E  E105               	bnz	i2u215_40
  8367  001220  0E06               	movlw	6
  8368  001222  5C14               	subwf	FuseSystem@i_1550,w,c
  8369  001224  B0D8               	btfsc	status,0,c
  8370  001226  0012               	return	
  8371  001228  D001               	goto	i2l3230
  8372  00122A                     i2u215_40:
  8373  00122A  0012               	return	
  8374  00122C                     i2l3230:
  8375                           
  8376                           ;PDU.c: 181: if (Current[i] > Currentcomp[i]) {
  8377  00122C  90D8               	bcf	status,0,c
  8378  00122E  3414               	rlcf	FuseSystem@i_1550,w,c
  8379  001230  6ED9               	movwf	fsr2l,c
  8380  001232  3415               	rlcf	FuseSystem@i_1550+1,w,c
  8381  001234  6EDA               	movwf	fsr2h,c
  8382  001236  0E60               	movlw	low _Current
  8383  001238  26D9               	addwf	fsr2l,f,c
  8384  00123A  0E00               	movlw	high _Current
  8385  00123C  22DA               	addwfc	fsr2h,f,c
  8386  00123E  90D8               	bcf	status,0,c
  8387  001240  3414               	rlcf	FuseSystem@i_1550,w,c
  8388  001242  6EE1               	movwf	fsr1l,c
  8389  001244  3415               	rlcf	FuseSystem@i_1550+1,w,c
  8390  001246  6EE2               	movwf	fsr1h,c
  8391  001248  0E78               	movlw	low _Currentcomp
  8392  00124A  26E1               	addwf	fsr1l,f,c
  8393  00124C  0E00               	movlw	high _Currentcomp
  8394  00124E  22E2               	addwfc	fsr1h,f,c
  8395  001250  50DE               	movf	postinc2,w,c
  8396  001252  5CE6               	subwf	postinc1,w,c
  8397  001254  50DE               	movf	postinc2,w,c
  8398  001256  58E6               	subwfb	postinc1,w,c
  8399  001258  B0D8               	btfsc	status,0,c
  8400  00125A  D04D               	goto	i2l3248
  8401                           
  8402                           ;PDU.c: 183: do { LATA3 = 1; } while(0);
  8403  00125C  8689               	bsf	3977,3,c	;volatile
  8404                           
  8405                           ;PDU.c: 184: switch(i){
  8406  00125E  D030               	goto	i2l3246
  8407  001260                     i2l3232:
  8408                           
  8409                           ;PDU.c: 186: EnableSlavePower(AUX, 0);
  8410  001260  0E00               	movlw	0
  8411  001262  6E0C               	movwf	EnableSlavePower@onof+1,c
  8412  001264  0E00               	movlw	0
  8413  001266  6E0B               	movwf	EnableSlavePower@onof,c
  8414  001268  0E06               	movlw	6
  8415  00126A  EC14  F00D         	call	_EnableSlavePower
  8416                           
  8417                           ;PDU.c: 187: break;
  8418  00126E  D043               	goto	i2l3248
  8419  001270                     i2l3234:
  8420                           
  8421                           ;PDU.c: 189: EnableSlavePower(TSS, 0);
  8422  001270  0E00               	movlw	0
  8423  001272  6E0C               	movwf	EnableSlavePower@onof+1,c
  8424  001274  0E00               	movlw	0
  8425  001276  6E0B               	movwf	EnableSlavePower@onof,c
  8426  001278  0E05               	movlw	5
  8427  00127A  EC14  F00D         	call	_EnableSlavePower
  8428                           
  8429                           ;PDU.c: 190: break;
  8430  00127E  D03B               	goto	i2l3248
  8431  001280                     i2l3236:
  8432                           
  8433                           ;PDU.c: 192: EnableSlavePower(SAS, 0);
  8434  001280  0E00               	movlw	0
  8435  001282  6E0C               	movwf	EnableSlavePower@onof+1,c
  8436  001284  0E00               	movlw	0
  8437  001286  6E0B               	movwf	EnableSlavePower@onof,c
  8438  001288  0E03               	movlw	3
  8439  00128A  EC14  F00D         	call	_EnableSlavePower
  8440                           
  8441                           ;PDU.c: 193: break;
  8442  00128E  D033               	goto	i2l3248
  8443  001290                     i2l3238:
  8444                           
  8445                           ;PDU.c: 195: EnableSlavePower(DDS, 0);
  8446  001290  0E00               	movlw	0
  8447  001292  6E0C               	movwf	EnableSlavePower@onof+1,c
  8448  001294  0E00               	movlw	0
  8449  001296  6E0B               	movwf	EnableSlavePower@onof,c
  8450  001298  0E01               	movlw	1
  8451  00129A  EC14  F00D         	call	_EnableSlavePower
  8452                           
  8453                           ;PDU.c: 196: break;
  8454  00129E  D02B               	goto	i2l3248
  8455  0012A0                     i2l3240:
  8456                           
  8457                           ;PDU.c: 198: EnableSlavePower(BMM, 0);
  8458  0012A0  0E00               	movlw	0
  8459  0012A2  6E0C               	movwf	EnableSlavePower@onof+1,c
  8460  0012A4  0E00               	movlw	0
  8461  0012A6  6E0B               	movwf	EnableSlavePower@onof,c
  8462  0012A8  0E04               	movlw	4
  8463  0012AA  EC14  F00D         	call	_EnableSlavePower
  8464                           
  8465                           ;PDU.c: 199: break;
  8466  0012AE  D023               	goto	i2l3248
  8467  0012B0                     i2l3242:
  8468                           
  8469                           ;PDU.c: 201: EnableSlavePower(MCS, 0);
  8470  0012B0  0E00               	movlw	0
  8471  0012B2  6E0C               	movwf	EnableSlavePower@onof+1,c
  8472  0012B4  0E00               	movlw	0
  8473  0012B6  6E0B               	movwf	EnableSlavePower@onof,c
  8474  0012B8  0E02               	movlw	2
  8475  0012BA  EC14  F00D         	call	_EnableSlavePower
  8476                           
  8477                           ;PDU.c: 203: }
  8478                           
  8479                           ;PDU.c: 202: break;
  8480  0012BE  D01B               	goto	i2l3248
  8481  0012C0                     i2l3246:
  8482  0012C0  C014  F00E         	movff	FuseSystem@i_1550,??_FuseSystem
  8483  0012C4  C015  F00F         	movff	FuseSystem@i_1550+1,??_FuseSystem+1
  8484                           
  8485                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8486                           ; Switch size 1, requested type "space"
  8487                           ; Number of cases is 1, Range of values is 0 to 0
  8488                           ; switch strategies available:
  8489                           ; Name         Instructions Cycles
  8490                           ; simple_byte            4     3 (average)
  8491                           ;	Chosen strategy is simple_byte
  8492  0012C8  500F               	movf	??_FuseSystem+1,w,c
  8493  0012CA  0A00               	xorlw	0	; case 0
  8494  0012CC  A4D8               	btfss	status,2,c
  8495  0012CE  D013               	goto	i2l3248
  8496                           
  8497                           ; Switch size 1, requested type "space"
  8498                           ; Number of cases is 6, Range of values is 0 to 5
  8499                           ; switch strategies available:
  8500                           ; Name         Instructions Cycles
  8501                           ; simple_byte           19    10 (average)
  8502                           ;	Chosen strategy is simple_byte
  8503  0012D0  500E               	movf	??_FuseSystem,w,c
  8504  0012D2  0A00               	xorlw	0	; case 0
  8505  0012D4  B4D8               	btfsc	status,2,c
  8506  0012D6  D7C4               	goto	i2l3232
  8507  0012D8  0A01               	xorlw	1	; case 1
  8508  0012DA  B4D8               	btfsc	status,2,c
  8509  0012DC  D7C9               	goto	i2l3234
  8510  0012DE  0A03               	xorlw	3	; case 2
  8511  0012E0  B4D8               	btfsc	status,2,c
  8512  0012E2  D7CE               	goto	i2l3236
  8513  0012E4  0A01               	xorlw	1	; case 3
  8514  0012E6  B4D8               	btfsc	status,2,c
  8515  0012E8  D7D3               	goto	i2l3238
  8516  0012EA  0A07               	xorlw	7	; case 4
  8517  0012EC  B4D8               	btfsc	status,2,c
  8518  0012EE  D7D8               	goto	i2l3240
  8519  0012F0  0A01               	xorlw	1	; case 5
  8520  0012F2  B4D8               	btfsc	status,2,c
  8521  0012F4  D7DD               	goto	i2l3242
  8522  0012F6                     i2l3248:
  8523  0012F6  4A14               	infsnz	FuseSystem@i_1550,f,c
  8524  0012F8  2A15               	incf	FuseSystem@i_1550+1,f,c
  8525  0012FA  BE15               	btfsc	FuseSystem@i_1550+1,7,c
  8526  0012FC  D797               	goto	i2l3230
  8527  0012FE  5015               	movf	FuseSystem@i_1550+1,w,c
  8528  001300  E101               	bnz	i2l677
  8529  001302  D78E               	goto	L1
  8530  001304                     i2l677:
  8531  001304  0012               	return		;funcret
  8532  001306                     __end_of_FuseSystem:
  8533                           	opt stack 0
  8534                           tosu	equ	0xFFF
  8535                           tosh	equ	0xFFE
  8536                           tosl	equ	0xFFD
  8537                           pclatu	equ	0xFFB
  8538                           pclath	equ	0xFFA
  8539                           tblptru	equ	0xFF8
  8540                           tblptrh	equ	0xFF7
  8541                           tblptrl	equ	0xFF6
  8542                           tablat	equ	0xFF5
  8543                           prodh	equ	0xFF4
  8544                           prodl	equ	0xFF3
  8545                           intcon	equ	0xFF2
  8546                           intcon2	equ	0xFF1
  8547                           postinc0	equ	0xFEE
  8548                           fsr0h	equ	0xFEA
  8549                           fsr0l	equ	0xFE9
  8550                           wreg	equ	0xFE8
  8551                           postinc1	equ	0xFE6
  8552                           fsr1h	equ	0xFE2
  8553                           fsr1l	equ	0xFE1
  8554                           indf2	equ	0xFDF
  8555                           postinc2	equ	0xFDE
  8556                           postdec2	equ	0xFDD
  8557                           plusw2	equ	0xFDB
  8558                           fsr2h	equ	0xFDA
  8559                           fsr2l	equ	0xFD9
  8560                           status	equ	0xFD8
  8561                           
  8562 ;; *************** function ___wmul *****************
  8563 ;; Defined at:
  8564 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  8565 ;; Parameters:    Size  Location     Type
  8566 ;;  multiplier      2    0[COMRAM] unsigned int 
  8567 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8568 ;; Auto vars:     Size  Location     Type
  8569 ;;  product         2    4[COMRAM] unsigned int 
  8570 ;; Return value:  Size  Location     Type
  8571 ;;                  2    0[COMRAM] unsigned int 
  8572 ;; Registers used:
  8573 ;;		wreg, status,2, status,0, prodl, prodh
  8574 ;; Tracked objects:
  8575 ;;		On entry : 0/0
  8576 ;;		On exit  : 0/0
  8577 ;;		Unchanged: 0/0
  8578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8579 ;;      Params:         4       0       0       0       0       0       0
  8580 ;;      Locals:         2       0       0       0       0       0       0
  8581 ;;      Temps:          0       0       0       0       0       0       0
  8582 ;;      Totals:         6       0       0       0       0       0       0
  8583 ;;Total ram usage:        6 bytes
  8584 ;; Hardware stack levels used:    1
  8585 ;; This function calls:
  8586 ;;		Nothing
  8587 ;; This function is called by:
  8588 ;;		_FuseSystem
  8589 ;; This function uses a non-reentrant model
  8590 ;;
  8591                           
  8592                           	psect	text41
  8593  0023DE                     __ptext41:
  8594                           	opt stack 0
  8595  0023DE                     ___wmul:
  8596                           	opt stack 21
  8597                           
  8598                           ;incstack = 0
  8599  0023DE  5001               	movf	___wmul@multiplier,w,c
  8600  0023E0  0203               	mulwf	___wmul@multiplicand,c
  8601  0023E2  CFF3 F005          	movff	prodl,___wmul@product
  8602  0023E6  CFF4 F006          	movff	prodh,___wmul@product+1
  8603  0023EA  5001               	movf	___wmul@multiplier,w,c
  8604  0023EC  0204               	mulwf	___wmul@multiplicand+1,c
  8605  0023EE  50F3               	movf	prodl,w,c
  8606  0023F0  2606               	addwf	___wmul@product+1,f,c
  8607  0023F2  5002               	movf	___wmul@multiplier+1,w,c
  8608  0023F4  0203               	mulwf	___wmul@multiplicand,c
  8609  0023F6  50F3               	movf	prodl,w,c
  8610  0023F8  2606               	addwf	___wmul@product+1,f,c
  8611  0023FA  C005  F001         	movff	___wmul@product,?___wmul
  8612  0023FE  C006  F002         	movff	___wmul@product+1,?___wmul+1
  8613  002402  0012               	return	
  8614  002404                     __end_of___wmul:
  8615                           	opt stack 0
  8616                           tosu	equ	0xFFF
  8617                           tosh	equ	0xFFE
  8618                           tosl	equ	0xFFD
  8619                           pclatu	equ	0xFFB
  8620                           pclath	equ	0xFFA
  8621                           tblptru	equ	0xFF8
  8622                           tblptrh	equ	0xFF7
  8623                           tblptrl	equ	0xFF6
  8624                           tablat	equ	0xFF5
  8625                           prodh	equ	0xFF4
  8626                           prodl	equ	0xFF3
  8627                           intcon	equ	0xFF2
  8628                           intcon2	equ	0xFF1
  8629                           postinc0	equ	0xFEE
  8630                           fsr0h	equ	0xFEA
  8631                           fsr0l	equ	0xFE9
  8632                           wreg	equ	0xFE8
  8633                           postinc1	equ	0xFE6
  8634                           fsr1h	equ	0xFE2
  8635                           fsr1l	equ	0xFE1
  8636                           indf2	equ	0xFDF
  8637                           postinc2	equ	0xFDE
  8638                           postdec2	equ	0xFDD
  8639                           plusw2	equ	0xFDB
  8640                           fsr2h	equ	0xFDA
  8641                           fsr2l	equ	0xFD9
  8642                           status	equ	0xFD8
  8643                           
  8644 ;; *************** function _EnableSlavePower *****************
  8645 ;; Defined at:
  8646 ;;		line 34 in file "PDU.c"
  8647 ;; Parameters:    Size  Location     Type
  8648 ;;  slave           1    wreg     enum E6
  8649 ;;  onof            2   10[COMRAM] int 
  8650 ;; Auto vars:     Size  Location     Type
  8651 ;;  slave           1   12[COMRAM] enum E6
  8652 ;; Return value:  Size  Location     Type
  8653 ;;                  1    wreg      void 
  8654 ;; Registers used:
  8655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8656 ;; Tracked objects:
  8657 ;;		On entry : 0/0
  8658 ;;		On exit  : 0/0
  8659 ;;		Unchanged: 0/0
  8660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8661 ;;      Params:         2       0       0       0       0       0       0
  8662 ;;      Locals:         1       0       0       0       0       0       0
  8663 ;;      Temps:          0       0       0       0       0       0       0
  8664 ;;      Totals:         3       0       0       0       0       0       0
  8665 ;;Total ram usage:        3 bytes
  8666 ;; Hardware stack levels used:    1
  8667 ;; Hardware stack levels required when called:    1
  8668 ;; This function calls:
  8669 ;;		_SetPin595
  8670 ;; This function is called by:
  8671 ;;		_FuseSystem
  8672 ;;		_processPowerRequest
  8673 ;;		_PDUStartup
  8674 ;; This function uses a non-reentrant model
  8675 ;;
  8676                           
  8677                           	psect	text42
  8678  001A28                     __ptext42:
  8679                           	opt stack 0
  8680  001A28                     _EnableSlavePower:
  8681                           	opt stack 20
  8682                           
  8683                           ;incstack = 0
  8684                           ;EnableSlavePower@slave stored from wreg
  8685  001A28  6E0D               	movwf	EnableSlavePower@slave,c
  8686                           
  8687                           ;PDU.c: 35: switch (slave) {
  8688  001A2A  D05C               	goto	i2l2990
  8689  001A2C                     i2l2974:
  8690                           
  8691                           ;PDU.c: 37: SetPin595(2, 6, onof);
  8692  001A2C  0E00               	movlw	0
  8693  001A2E  6E02               	movwf	SetPin595@Reg+1,c
  8694  001A30  0E02               	movlw	2
  8695  001A32  6E01               	movwf	SetPin595@Reg,c
  8696  001A34  0E00               	movlw	0
  8697  001A36  6E04               	movwf	SetPin595@pin+1,c
  8698  001A38  0E06               	movlw	6
  8699  001A3A  6E03               	movwf	SetPin595@pin,c
  8700  001A3C  C00B  F005         	movff	EnableSlavePower@onof,SetPin595@value
  8701  001A40  C00C  F006         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  8702  001A44  EC4C  F010         	call	_SetPin595	;wreg free
  8703                           
  8704                           ;PDU.c: 38: break;
  8705  001A48  0012               	return	
  8706  001A4A                     i2l2976:
  8707                           
  8708                           ;PDU.c: 40: SetPin595(1, 1, onof);
  8709  001A4A  0E00               	movlw	0
  8710  001A4C  6E02               	movwf	SetPin595@Reg+1,c
  8711  001A4E  0E01               	movlw	1
  8712  001A50  6E01               	movwf	SetPin595@Reg,c
  8713  001A52  0E00               	movlw	0
  8714  001A54  6E04               	movwf	SetPin595@pin+1,c
  8715  001A56  0E01               	movlw	1
  8716  001A58  6E03               	movwf	SetPin595@pin,c
  8717  001A5A  C00B  F005         	movff	EnableSlavePower@onof,SetPin595@value
  8718  001A5E  C00C  F006         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  8719  001A62  EC4C  F010         	call	_SetPin595	;wreg free
  8720                           
  8721                           ;PDU.c: 41: break;
  8722  001A66  0012               	return	
  8723  001A68                     i2l2978:
  8724                           
  8725                           ;PDU.c: 43: SetPin595(1, 6, onof);
  8726  001A68  0E00               	movlw	0
  8727  001A6A  6E02               	movwf	SetPin595@Reg+1,c
  8728  001A6C  0E01               	movlw	1
  8729  001A6E  6E01               	movwf	SetPin595@Reg,c
  8730  001A70  0E00               	movlw	0
  8731  001A72  6E04               	movwf	SetPin595@pin+1,c
  8732  001A74  0E06               	movlw	6
  8733  001A76  6E03               	movwf	SetPin595@pin,c
  8734  001A78  C00B  F005         	movff	EnableSlavePower@onof,SetPin595@value
  8735  001A7C  C00C  F006         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  8736  001A80  EC4C  F010         	call	_SetPin595	;wreg free
  8737                           
  8738                           ;PDU.c: 44: MCSOn = onof;
  8739  001A84  C00B  F03E         	movff	EnableSlavePower@onof,_MCSOn
  8740                           
  8741                           ;PDU.c: 45: break;
  8742  001A88  0012               	return	
  8743  001A8A                     i2l2982:
  8744                           
  8745                           ;PDU.c: 47: SetPin595(2, 1, onof);
  8746  001A8A  0E00               	movlw	0
  8747  001A8C  6E02               	movwf	SetPin595@Reg+1,c
  8748  001A8E  0E02               	movlw	2
  8749  001A90  6E01               	movwf	SetPin595@Reg,c
  8750  001A92  0E00               	movlw	0
  8751  001A94  6E04               	movwf	SetPin595@pin+1,c
  8752  001A96  0E01               	movlw	1
  8753  001A98  6E03               	movwf	SetPin595@pin,c
  8754  001A9A  C00B  F005         	movff	EnableSlavePower@onof,SetPin595@value
  8755  001A9E  C00C  F006         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  8756  001AA2  EC4C  F010         	call	_SetPin595	;wreg free
  8757                           
  8758                           ;PDU.c: 48: break;
  8759  001AA6  0012               	return	
  8760  001AA8                     i2l2984:
  8761                           
  8762                           ;PDU.c: 50: SetPin595(3, 6, onof);
  8763  001AA8  0E00               	movlw	0
  8764  001AAA  6E02               	movwf	SetPin595@Reg+1,c
  8765  001AAC  0E03               	movlw	3
  8766  001AAE  6E01               	movwf	SetPin595@Reg,c
  8767  001AB0  0E00               	movlw	0
  8768  001AB2  6E04               	movwf	SetPin595@pin+1,c
  8769  001AB4  0E06               	movlw	6
  8770  001AB6  6E03               	movwf	SetPin595@pin,c
  8771  001AB8  C00B  F005         	movff	EnableSlavePower@onof,SetPin595@value
  8772  001ABC  C00C  F006         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  8773  001AC0  EC4C  F010         	call	_SetPin595	;wreg free
  8774                           
  8775                           ;PDU.c: 51: break;
  8776  001AC4  0012               	return	
  8777  001AC6                     i2l2986:
  8778                           
  8779                           ;PDU.c: 53: SetPin595(3, 1, onof);
  8780  001AC6  0E00               	movlw	0
  8781  001AC8  6E02               	movwf	SetPin595@Reg+1,c
  8782  001ACA  0E03               	movlw	3
  8783  001ACC  6E01               	movwf	SetPin595@Reg,c
  8784  001ACE  0E00               	movlw	0
  8785  001AD0  6E04               	movwf	SetPin595@pin+1,c
  8786  001AD2  0E01               	movlw	1
  8787  001AD4  6E03               	movwf	SetPin595@pin,c
  8788  001AD6  C00B  F005         	movff	EnableSlavePower@onof,SetPin595@value
  8789  001ADA  C00C  F006         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  8790  001ADE  EC4C  F010         	call	_SetPin595	;wreg free
  8791                           
  8792                           ;PDU.c: 55: }
  8793                           
  8794                           ;PDU.c: 54: break;
  8795  001AE2  0012               	return	
  8796  001AE4                     i2l2990:
  8797  001AE4  500D               	movf	EnableSlavePower@slave,w,c
  8798                           
  8799                           ; Switch size 1, requested type "space"
  8800                           ; Number of cases is 6, Range of values is 1 to 6
  8801                           ; switch strategies available:
  8802                           ; Name         Instructions Cycles
  8803                           ; simple_byte           19    10 (average)
  8804                           ;	Chosen strategy is simple_byte
  8805  001AE6  0A01               	xorlw	1	; case 1
  8806  001AE8  B4D8               	btfsc	status,2,c
  8807  001AEA  D7CF               	goto	i2l2982
  8808  001AEC  0A03               	xorlw	3	; case 2
  8809  001AEE  B4D8               	btfsc	status,2,c
  8810  001AF0  D7BB               	goto	i2l2978
  8811  001AF2  0A01               	xorlw	1	; case 3
  8812  001AF4  B4D8               	btfsc	status,2,c
  8813  001AF6  D79A               	goto	i2l2974
  8814  001AF8  0A07               	xorlw	7	; case 4
  8815  001AFA  B4D8               	btfsc	status,2,c
  8816  001AFC  D7A6               	goto	i2l2976
  8817  001AFE  0A01               	xorlw	1	; case 5
  8818  001B00  B4D8               	btfsc	status,2,c
  8819  001B02  D7D2               	goto	i2l2984
  8820  001B04  0A03               	xorlw	3	; case 6
  8821  001B06  A4D8               	btfss	status,2,c
  8822  001B08  0012               	return	
  8823  001B0A  D7DD               	goto	i2l2986
  8824  001B0C                     __end_of_EnableSlavePower:
  8825                           	opt stack 0
  8826                           tosu	equ	0xFFF
  8827                           tosh	equ	0xFFE
  8828                           tosl	equ	0xFFD
  8829                           pclatu	equ	0xFFB
  8830                           pclath	equ	0xFFA
  8831                           tblptru	equ	0xFF8
  8832                           tblptrh	equ	0xFF7
  8833                           tblptrl	equ	0xFF6
  8834                           tablat	equ	0xFF5
  8835                           prodh	equ	0xFF4
  8836                           prodl	equ	0xFF3
  8837                           intcon	equ	0xFF2
  8838                           intcon2	equ	0xFF1
  8839                           postinc0	equ	0xFEE
  8840                           fsr0h	equ	0xFEA
  8841                           fsr0l	equ	0xFE9
  8842                           wreg	equ	0xFE8
  8843                           postinc1	equ	0xFE6
  8844                           fsr1h	equ	0xFE2
  8845                           fsr1l	equ	0xFE1
  8846                           indf2	equ	0xFDF
  8847                           postinc2	equ	0xFDE
  8848                           postdec2	equ	0xFDD
  8849                           plusw2	equ	0xFDB
  8850                           fsr2h	equ	0xFDA
  8851                           fsr2l	equ	0xFD9
  8852                           status	equ	0xFD8
  8853                           
  8854 ;; *************** function _SetPin595 *****************
  8855 ;; Defined at:
  8856 ;;		line 32 in file "Shift595.c"
  8857 ;; Parameters:    Size  Location     Type
  8858 ;;  Reg             2    0[COMRAM] int 
  8859 ;;  pin             2    2[COMRAM] int 
  8860 ;;  value           2    4[COMRAM] int 
  8861 ;; Auto vars:     Size  Location     Type
  8862 ;;		None
  8863 ;; Return value:  Size  Location     Type
  8864 ;;                  1    wreg      void 
  8865 ;; Registers used:
  8866 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8867 ;; Tracked objects:
  8868 ;;		On entry : 0/0
  8869 ;;		On exit  : 0/0
  8870 ;;		Unchanged: 0/0
  8871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8872 ;;      Params:         6       0       0       0       0       0       0
  8873 ;;      Locals:         0       0       0       0       0       0       0
  8874 ;;      Temps:          4       0       0       0       0       0       0
  8875 ;;      Totals:        10       0       0       0       0       0       0
  8876 ;;Total ram usage:       10 bytes
  8877 ;; Hardware stack levels used:    1
  8878 ;; This function calls:
  8879 ;;		Nothing
  8880 ;; This function is called by:
  8881 ;;		_EnableSlavePower
  8882 ;;		_ReadCurrent
  8883 ;; This function uses a non-reentrant model
  8884 ;;
  8885                           
  8886                           	psect	text43
  8887  002098                     __ptext43:
  8888                           	opt stack 0
  8889  002098                     _SetPin595:
  8890                           	opt stack 21
  8891                           
  8892                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
  8893                           
  8894                           ;incstack = 0
  8895  002098  0EF0               	movlw	240
  8896  00209A  6E07               	movwf	??_SetPin595& (0+255),c
  8897  00209C  0EFF               	movlw	255
  8898  00209E  6E08               	movwf	(??_SetPin595+1)& (0+255),c
  8899  0020A0  C001  F009         	movff	SetPin595@Reg,??_SetPin595+2
  8900  0020A4  C002  F00A         	movff	SetPin595@Reg+1,??_SetPin595+3
  8901  0020A8  90D8               	bcf	status,0,c
  8902  0020AA  3609               	rlcf	??_SetPin595+2,f,c
  8903  0020AC  360A               	rlcf	??_SetPin595+3,f,c
  8904  0020AE  90D8               	bcf	status,0,c
  8905  0020B0  3609               	rlcf	??_SetPin595+2,f,c
  8906  0020B2  360A               	rlcf	??_SetPin595+3,f,c
  8907  0020B4  90D8               	bcf	status,0,c
  8908  0020B6  3609               	rlcf	??_SetPin595+2,f,c
  8909  0020B8  360A               	rlcf	??_SetPin595+3,f,c
  8910  0020BA  5003               	movf	SetPin595@pin,w,c
  8911  0020BC  2609               	addwf	??_SetPin595+2,f,c
  8912  0020BE  5004               	movf	SetPin595@pin+1,w,c
  8913  0020C0  220A               	addwfc	??_SetPin595+3,f,c
  8914  0020C2  90D8               	bcf	status,0,c
  8915  0020C4  3609               	rlcf	??_SetPin595+2,f,c
  8916  0020C6  360A               	rlcf	??_SetPin595+3,f,c
  8917  0020C8  5007               	movf	??_SetPin595,w,c
  8918  0020CA  2609               	addwf	??_SetPin595+2,f,c
  8919  0020CC  5008               	movf	??_SetPin595+1,w,c
  8920  0020CE  220A               	addwfc	??_SetPin595+3,f,c
  8921  0020D0  0E00               	movlw	low _registers
  8922  0020D2  2409               	addwf	??_SetPin595+2,w,c
  8923  0020D4  6ED9               	movwf	fsr2l,c
  8924  0020D6  0E01               	movlw	high _registers
  8925  0020D8  200A               	addwfc	??_SetPin595+3,w,c
  8926  0020DA  6EDA               	movwf	fsr2h,c
  8927  0020DC  C005  FFDE         	movff	SetPin595@value,postinc2
  8928  0020E0  C006  FFDD         	movff	SetPin595@value+1,postdec2
  8929  0020E4  0012               	return		;funcret
  8930  0020E6                     __end_of_SetPin595:
  8931                           	opt stack 0
  8932                           tosu	equ	0xFFF
  8933                           tosh	equ	0xFFE
  8934                           tosl	equ	0xFFD
  8935                           pclatu	equ	0xFFB
  8936                           pclath	equ	0xFFA
  8937                           tblptru	equ	0xFF8
  8938                           tblptrh	equ	0xFF7
  8939                           tblptrl	equ	0xFF6
  8940                           tablat	equ	0xFF5
  8941                           prodh	equ	0xFF4
  8942                           prodl	equ	0xFF3
  8943                           intcon	equ	0xFF2
  8944                           intcon2	equ	0xFF1
  8945                           postinc0	equ	0xFEE
  8946                           fsr0h	equ	0xFEA
  8947                           fsr0l	equ	0xFE9
  8948                           wreg	equ	0xFE8
  8949                           postinc1	equ	0xFE6
  8950                           fsr1h	equ	0xFE2
  8951                           fsr1l	equ	0xFE1
  8952                           indf2	equ	0xFDF
  8953                           postinc2	equ	0xFDE
  8954                           postdec2	equ	0xFDD
  8955                           plusw2	equ	0xFDB
  8956                           fsr2h	equ	0xFDA
  8957                           fsr2l	equ	0xFD9
  8958                           status	equ	0xFD8
  8959                           
  8960 ;; *************** function _EUSART1_Transmit_ISR *****************
  8961 ;; Defined at:
  8962 ;;		line 153 in file "UART.c"
  8963 ;; Parameters:    Size  Location     Type
  8964 ;;		None
  8965 ;; Auto vars:     Size  Location     Type
  8966 ;;		None
  8967 ;; Return value:  Size  Location     Type
  8968 ;;                  1    wreg      void 
  8969 ;; Registers used:
  8970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8971 ;; Tracked objects:
  8972 ;;		On entry : 0/0
  8973 ;;		On exit  : 0/0
  8974 ;;		Unchanged: 0/0
  8975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8976 ;;      Params:         0       0       0       0       0       0       0
  8977 ;;      Locals:         0       0       0       0       0       0       0
  8978 ;;      Temps:          0       0       0       0       0       0       0
  8979 ;;      Totals:         0       0       0       0       0       0       0
  8980 ;;Total ram usage:        0 bytes
  8981 ;; Hardware stack levels used:    1
  8982 ;; Hardware stack levels required when called:    2
  8983 ;; This function calls:
  8984 ;;		i2_UART_buff_get
  8985 ;;		i2_UART_buff_size
  8986 ;; This function is called by:
  8987 ;;		_INTERRUPT_InterruptManager
  8988 ;; This function uses a non-reentrant model
  8989 ;;
  8990                           
  8991                           	psect	text44
  8992  0022D2                     __ptext44:
  8993                           	opt stack 0
  8994  0022D2                     _EUSART1_Transmit_ISR:
  8995                           	opt stack 21
  8996                           
  8997                           ;UART.c: 154: if (UART_buff_size(&output_buffer) > 0) {
  8998                           
  8999                           ;incstack = 0
  9000  0022D2  0E00               	movlw	low _output_buffer
  9001  0022D4  6E01               	movwf	i2UART_buff_size@_this,c
  9002  0022D6  0E04               	movlw	high _output_buffer
  9003  0022D8  6E02               	movwf	i2UART_buff_size@_this+1,c
  9004  0022DA  EC4A  F012         	call	i2_UART_buff_size	;wreg free
  9005  0022DE  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  9006  0022E0  D00D               	goto	i2l3508
  9007  0022E2  5002               	movf	?i2_UART_buff_size+1,w,c
  9008  0022E4  E103               	bnz	i2u278_40
  9009  0022E6  0401               	decf	?i2_UART_buff_size,w,c
  9010  0022E8  A0D8               	btfss	status,0,c
  9011  0022EA  D008               	goto	i2l3508
  9012  0022EC                     i2u278_40:
  9013                           
  9014                           ;UART.c: 155: TXREG1 = UART_buff_get(&output_buffer);
  9015  0022EC  0E00               	movlw	low _output_buffer
  9016  0022EE  6E07               	movwf	i2UART_buff_get@_this,c
  9017  0022F0  0E04               	movlw	high _output_buffer
  9018  0022F2  6E08               	movwf	i2UART_buff_get@_this+1,c
  9019  0022F4  EC87  F00E         	call	i2_UART_buff_get	;wreg free
  9020  0022F8  6EAD               	movwf	4013,c	;volatile
  9021                           
  9022                           ;UART.c: 156: } else {
  9023  0022FA  0012               	return	
  9024  0022FC                     i2l3508:
  9025                           
  9026                           ;UART.c: 157: Transmit_stall = 1;
  9027  0022FC  0E01               	movlw	1
  9028  0022FE  6E42               	movwf	_Transmit_stall,c
  9029                           
  9030                           ;UART.c: 158: PIE1bits.TX1IE = 0;
  9031  002300  989D               	bcf	3997,4,c	;volatile
  9032  002302  0012               	return	
  9033  002304                     __end_of_EUSART1_Transmit_ISR:
  9034                           	opt stack 0
  9035                           tosu	equ	0xFFF
  9036                           tosh	equ	0xFFE
  9037                           tosl	equ	0xFFD
  9038                           pclatu	equ	0xFFB
  9039                           pclath	equ	0xFFA
  9040                           tblptru	equ	0xFF8
  9041                           tblptrh	equ	0xFF7
  9042                           tblptrl	equ	0xFF6
  9043                           tablat	equ	0xFF5
  9044                           prodh	equ	0xFF4
  9045                           prodl	equ	0xFF3
  9046                           intcon	equ	0xFF2
  9047                           intcon2	equ	0xFF1
  9048                           postinc0	equ	0xFEE
  9049                           fsr0h	equ	0xFEA
  9050                           fsr0l	equ	0xFE9
  9051                           wreg	equ	0xFE8
  9052                           postinc1	equ	0xFE6
  9053                           fsr1h	equ	0xFE2
  9054                           fsr1l	equ	0xFE1
  9055                           indf2	equ	0xFDF
  9056                           postinc2	equ	0xFDE
  9057                           postdec2	equ	0xFDD
  9058                           plusw2	equ	0xFDB
  9059                           fsr2h	equ	0xFDA
  9060                           fsr2l	equ	0xFD9
  9061                           status	equ	0xFD8
  9062                           
  9063 ;; *************** function i2_UART_buff_size *****************
  9064 ;; Defined at:
  9065 ;;		line 104 in file "UART.c"
  9066 ;; Parameters:    Size  Location     Type
  9067 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  9068 ;;		 -> output_buffer(206), input_buffer(206), 
  9069 ;; Auto vars:     Size  Location     Type
  9070 ;;		None
  9071 ;; Return value:  Size  Location     Type
  9072 ;;                  2    0[COMRAM] int 
  9073 ;; Registers used:
  9074 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9075 ;; Tracked objects:
  9076 ;;		On entry : 0/0
  9077 ;;		On exit  : 0/0
  9078 ;;		Unchanged: 0/0
  9079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9080 ;;      Params:         2       0       0       0       0       0       0
  9081 ;;      Locals:         0       0       0       0       0       0       0
  9082 ;;      Temps:          0       0       0       0       0       0       0
  9083 ;;      Totals:         2       0       0       0       0       0       0
  9084 ;;Total ram usage:        2 bytes
  9085 ;; Hardware stack levels used:    1
  9086 ;; This function calls:
  9087 ;;		Nothing
  9088 ;; This function is called by:
  9089 ;;		_EUSART1_Transmit_ISR
  9090 ;; This function uses a non-reentrant model
  9091 ;;
  9092                           
  9093                           	psect	text45
  9094  002494                     __ptext45:
  9095                           	opt stack 0
  9096  002494                     i2_UART_buff_size:
  9097                           	opt stack 22
  9098                           
  9099                           ;UART.c: 105: return (_this->count);
  9100                           
  9101                           ;incstack = 0
  9102  002494  EE20 F0CC          	lfsr	2,204
  9103  002498  5001               	movf	i2UART_buff_size@_this,w,c
  9104  00249A  26D9               	addwf	fsr2l,f,c
  9105  00249C  5002               	movf	i2UART_buff_size@_this+1,w,c
  9106  00249E  22DA               	addwfc	fsr2h,f,c
  9107  0024A0  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  9108  0024A4  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  9109  0024A8  0012               	return	
  9110  0024AA                     __end_ofi2_UART_buff_size:
  9111                           	opt stack 0
  9112                           tosu	equ	0xFFF
  9113                           tosh	equ	0xFFE
  9114                           tosl	equ	0xFFD
  9115                           pclatu	equ	0xFFB
  9116                           pclath	equ	0xFFA
  9117                           tblptru	equ	0xFF8
  9118                           tblptrh	equ	0xFF7
  9119                           tblptrl	equ	0xFF6
  9120                           tablat	equ	0xFF5
  9121                           prodh	equ	0xFF4
  9122                           prodl	equ	0xFF3
  9123                           intcon	equ	0xFF2
  9124                           intcon2	equ	0xFF1
  9125                           postinc0	equ	0xFEE
  9126                           fsr0h	equ	0xFEA
  9127                           fsr0l	equ	0xFE9
  9128                           wreg	equ	0xFE8
  9129                           postinc1	equ	0xFE6
  9130                           fsr1h	equ	0xFE2
  9131                           fsr1l	equ	0xFE1
  9132                           indf2	equ	0xFDF
  9133                           postinc2	equ	0xFDE
  9134                           postdec2	equ	0xFDD
  9135                           plusw2	equ	0xFDB
  9136                           fsr2h	equ	0xFDA
  9137                           fsr2l	equ	0xFD9
  9138                           status	equ	0xFD8
  9139                           
  9140 ;; *************** function i2_UART_buff_get *****************
  9141 ;; Defined at:
  9142 ;;		line 83 in file "UART.c"
  9143 ;; Parameters:    Size  Location     Type
  9144 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  9145 ;;		 -> output_buffer(206), input_buffer(206), 
  9146 ;; Auto vars:     Size  Location     Type
  9147 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  9148 ;; Return value:  Size  Location     Type
  9149 ;;                  1    wreg      unsigned char 
  9150 ;; Registers used:
  9151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9152 ;; Tracked objects:
  9153 ;;		On entry : 0/0
  9154 ;;		On exit  : 0/0
  9155 ;;		Unchanged: 0/0
  9156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9157 ;;      Params:         2       0       0       0       0       0       0
  9158 ;;      Locals:         1       0       0       0       0       0       0
  9159 ;;      Temps:          2       0       0       0       0       0       0
  9160 ;;      Totals:         5       0       0       0       0       0       0
  9161 ;;Total ram usage:        5 bytes
  9162 ;; Hardware stack levels used:    1
  9163 ;; Hardware stack levels required when called:    1
  9164 ;; This function calls:
  9165 ;;		i2_UART_buff_modulo_inc
  9166 ;; This function is called by:
  9167 ;;		_EUSART1_Transmit_ISR
  9168 ;; This function uses a non-reentrant model
  9169 ;;
  9170                           
  9171                           	psect	text46
  9172  001D0E                     __ptext46:
  9173                           	opt stack 0
  9174  001D0E                     i2_UART_buff_get:
  9175                           	opt stack 21
  9176                           
  9177                           ;UART.c: 84: unsigned char c;
  9178                           ;UART.c: 85: if (_this->count > 0) {
  9179                           
  9180                           ;incstack = 0
  9181  001D0E  EE20 F0CC          	lfsr	2,204
  9182  001D12  5007               	movf	i2UART_buff_get@_this,w,c
  9183  001D14  26D9               	addwf	fsr2l,f,c
  9184  001D16  5008               	movf	i2UART_buff_get@_this+1,w,c
  9185  001D18  22DA               	addwfc	fsr2h,f,c
  9186  001D1A  0E01               	movlw	1
  9187  001D1C  BEDB               	btfsc	plusw2,7,c
  9188  001D1E  D03C               	goto	i2l3492
  9189  001D20  0E01               	movlw	1
  9190  001D22  50DB               	movf	plusw2,w,c
  9191  001D24  E103               	bnz	i2u274_40
  9192  001D26  04DE               	decf	postinc2,w,c
  9193  001D28  A0D8               	btfss	status,0,c
  9194  001D2A  D036               	goto	i2l3492
  9195  001D2C                     i2u274_40:
  9196                           
  9197                           ;UART.c: 86: c = _this->buf[_this->tail];
  9198  001D2C  EE20 F0CA          	lfsr	2,202
  9199  001D30  5007               	movf	i2UART_buff_get@_this,w,c
  9200  001D32  26D9               	addwf	fsr2l,f,c
  9201  001D34  5008               	movf	i2UART_buff_get@_this+1,w,c
  9202  001D36  22DA               	addwfc	fsr2h,f,c
  9203  001D38  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  9204  001D3C  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  9205  001D40  5009               	movf	??i2_UART_buff_get,w,c
  9206  001D42  2407               	addwf	i2UART_buff_get@_this,w,c
  9207  001D44  6ED9               	movwf	fsr2l,c
  9208  001D46  500A               	movf	??i2_UART_buff_get+1,w,c
  9209  001D48  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  9210  001D4A  6EDA               	movwf	fsr2h,c
  9211  001D4C  50DF               	movf	indf2,w,c
  9212  001D4E  6E0B               	movwf	i2UART_buff_get@c,c
  9213                           
  9214                           ;UART.c: 87: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  9215  001D50  EE20 F0CA          	lfsr	2,202
  9216  001D54  5007               	movf	i2UART_buff_get@_this,w,c
  9217  001D56  26D9               	addwf	fsr2l,f,c
  9218  001D58  5008               	movf	i2UART_buff_get@_this+1,w,c
  9219  001D5A  22DA               	addwfc	fsr2h,f,c
  9220  001D5C  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  9221  001D60  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  9222  001D64  0E00               	movlw	0
  9223  001D66  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  9224  001D68  0EC8               	movlw	200
  9225  001D6A  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  9226  001D6C  ECC6  F011         	call	i2_UART_buff_modulo_inc	;wreg free
  9227  001D70  EE20 F0CA          	lfsr	2,202
  9228  001D74  5007               	movf	i2UART_buff_get@_this,w,c
  9229  001D76  26D9               	addwf	fsr2l,f,c
  9230  001D78  5008               	movf	i2UART_buff_get@_this+1,w,c
  9231  001D7A  22DA               	addwfc	fsr2h,f,c
  9232  001D7C  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  9233  001D80  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  9234                           
  9235                           ;UART.c: 88: --_this->count;
  9236  001D84  EE20 F0CC          	lfsr	2,204
  9237  001D88  5007               	movf	i2UART_buff_get@_this,w,c
  9238  001D8A  26D9               	addwf	fsr2l,f,c
  9239  001D8C  5008               	movf	i2UART_buff_get@_this+1,w,c
  9240  001D8E  22DA               	addwfc	fsr2h,f,c
  9241  001D90  06DE               	decf	postinc2,f,c
  9242  001D92  0E00               	movlw	0
  9243  001D94  5ADD               	subwfb	postdec2,f,c
  9244                           
  9245                           ;UART.c: 89: } else {
  9246  001D96  D002               	goto	i2l793
  9247  001D98                     i2l3492:
  9248                           
  9249                           ;UART.c: 90: c = 0;
  9250  001D98  0E00               	movlw	0
  9251  001D9A  6E0B               	movwf	i2UART_buff_get@c,c
  9252  001D9C                     i2l793:
  9253                           
  9254                           ;UART.c: 91: }
  9255                           ;UART.c: 92: return (c);
  9256  001D9C  500B               	movf	i2UART_buff_get@c,w,c
  9257  001D9E  0012               	return	
  9258  001DA0                     __end_ofi2_UART_buff_get:
  9259                           	opt stack 0
  9260                           tosu	equ	0xFFF
  9261                           tosh	equ	0xFFE
  9262                           tosl	equ	0xFFD
  9263                           pclatu	equ	0xFFB
  9264                           pclath	equ	0xFFA
  9265                           tblptru	equ	0xFF8
  9266                           tblptrh	equ	0xFF7
  9267                           tblptrl	equ	0xFF6
  9268                           tablat	equ	0xFF5
  9269                           prodh	equ	0xFF4
  9270                           prodl	equ	0xFF3
  9271                           intcon	equ	0xFF2
  9272                           intcon2	equ	0xFF1
  9273                           postinc0	equ	0xFEE
  9274                           fsr0h	equ	0xFEA
  9275                           fsr0l	equ	0xFE9
  9276                           wreg	equ	0xFE8
  9277                           postinc1	equ	0xFE6
  9278                           fsr1h	equ	0xFE2
  9279                           fsr1l	equ	0xFE1
  9280                           indf2	equ	0xFDF
  9281                           postinc2	equ	0xFDE
  9282                           postdec2	equ	0xFDD
  9283                           plusw2	equ	0xFDB
  9284                           fsr2h	equ	0xFDA
  9285                           fsr2l	equ	0xFD9
  9286                           status	equ	0xFD8
  9287                           
  9288 ;; *************** function _EUSART1_Receive_ISR *****************
  9289 ;; Defined at:
  9290 ;;		line 141 in file "UART.c"
  9291 ;; Parameters:    Size  Location     Type
  9292 ;;		None
  9293 ;; Auto vars:     Size  Location     Type
  9294 ;;  data            1   11[COMRAM] unsigned char 
  9295 ;; Return value:  Size  Location     Type
  9296 ;;                  1    wreg      void 
  9297 ;; Registers used:
  9298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9299 ;; Tracked objects:
  9300 ;;		On entry : 0/0
  9301 ;;		On exit  : 0/0
  9302 ;;		Unchanged: 0/0
  9303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9304 ;;      Params:         0       0       0       0       0       0       0
  9305 ;;      Locals:         1       0       0       0       0       0       0
  9306 ;;      Temps:          0       0       0       0       0       0       0
  9307 ;;      Totals:         1       0       0       0       0       0       0
  9308 ;;Total ram usage:        1 bytes
  9309 ;; Hardware stack levels used:    1
  9310 ;; Hardware stack levels required when called:    2
  9311 ;; This function calls:
  9312 ;;		i2_UART_buff_put
  9313 ;; This function is called by:
  9314 ;;		_INTERRUPT_InterruptManager
  9315 ;; This function uses a non-reentrant model
  9316 ;;
  9317                           
  9318                           	psect	text47
  9319  0023B6                     __ptext47:
  9320                           	opt stack 0
  9321  0023B6                     _EUSART1_Receive_ISR:
  9322                           	opt stack 21
  9323                           
  9324                           ;incstack = 0
  9325                           ;UART.c: 142: do { LATA3 = ~LATA3; } while(0);
  9326  0023B6  B689               	btfsc	3977,3,c	;volatile
  9327  0023B8  D002               	goto	i2u275_40
  9328  0023BA  8689               	bsf	3977,3,c	;volatile
  9329  0023BC  D001               	goto	i2l825
  9330  0023BE                     i2u275_40:
  9331  0023BE  9689               	bcf	3977,3,c	;volatile
  9332  0023C0                     i2l825:
  9333                           
  9334                           ;UART.c: 143: if (1 == RC1STAbits.OERR) {
  9335  0023C0  A2AB               	btfss	4011,1,c	;volatile
  9336  0023C2  D002               	goto	i2l826
  9337                           
  9338                           ;UART.c: 146: RC1STAbits.CREN = 0;
  9339  0023C4  98AB               	bcf	4011,4,c	;volatile
  9340                           
  9341                           ;UART.c: 147: RC1STAbits.CREN = 1;
  9342  0023C6  88AB               	bsf	4011,4,c	;volatile
  9343  0023C8                     i2l826:
  9344                           
  9345                           ;UART.c: 148: }
  9346                           ;UART.c: 149: unsigned char data = RCREG1;
  9347  0023C8  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  9348                           
  9349                           ;UART.c: 150: UART_buff_put(&input_buffer, data);
  9350  0023CC  0E00               	movlw	low _input_buffer
  9351  0023CE  6E07               	movwf	i2UART_buff_put@_this,c
  9352  0023D0  0E03               	movlw	high _input_buffer
  9353  0023D2  6E08               	movwf	i2UART_buff_put@_this+1,c
  9354  0023D4  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  9355  0023D8  EC07  F00C         	call	i2_UART_buff_put	;wreg free
  9356  0023DC  0012               	return		;funcret
  9357  0023DE                     __end_of_EUSART1_Receive_ISR:
  9358                           	opt stack 0
  9359                           tosu	equ	0xFFF
  9360                           tosh	equ	0xFFE
  9361                           tosl	equ	0xFFD
  9362                           pclatu	equ	0xFFB
  9363                           pclath	equ	0xFFA
  9364                           tblptru	equ	0xFF8
  9365                           tblptrh	equ	0xFF7
  9366                           tblptrl	equ	0xFF6
  9367                           tablat	equ	0xFF5
  9368                           prodh	equ	0xFF4
  9369                           prodl	equ	0xFF3
  9370                           intcon	equ	0xFF2
  9371                           intcon2	equ	0xFF1
  9372                           postinc0	equ	0xFEE
  9373                           fsr0h	equ	0xFEA
  9374                           fsr0l	equ	0xFE9
  9375                           wreg	equ	0xFE8
  9376                           postinc1	equ	0xFE6
  9377                           fsr1h	equ	0xFE2
  9378                           fsr1l	equ	0xFE1
  9379                           indf2	equ	0xFDF
  9380                           postinc2	equ	0xFDE
  9381                           postdec2	equ	0xFDD
  9382                           plusw2	equ	0xFDB
  9383                           fsr2h	equ	0xFDA
  9384                           fsr2l	equ	0xFD9
  9385                           status	equ	0xFD8
  9386                           
  9387 ;; *************** function i2_UART_buff_put *****************
  9388 ;; Defined at:
  9389 ;;		line 70 in file "UART.c"
  9390 ;; Parameters:    Size  Location     Type
  9391 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  9392 ;;		 -> output_buffer(206), input_buffer(206), 
  9393 ;;  c               1    8[COMRAM] const unsigned char 
  9394 ;; Auto vars:     Size  Location     Type
  9395 ;;		None
  9396 ;; Return value:  Size  Location     Type
  9397 ;;                  1    wreg      void 
  9398 ;; Registers used:
  9399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9400 ;; Tracked objects:
  9401 ;;		On entry : 0/0
  9402 ;;		On exit  : 0/0
  9403 ;;		Unchanged: 0/0
  9404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9405 ;;      Params:         3       0       0       0       0       0       0
  9406 ;;      Locals:         0       0       0       0       0       0       0
  9407 ;;      Temps:          2       0       0       0       0       0       0
  9408 ;;      Totals:         5       0       0       0       0       0       0
  9409 ;;Total ram usage:        5 bytes
  9410 ;; Hardware stack levels used:    1
  9411 ;; Hardware stack levels required when called:    1
  9412 ;; This function calls:
  9413 ;;		i2_UART_buff_modulo_inc
  9414 ;; This function is called by:
  9415 ;;		_EUSART1_Receive_ISR
  9416 ;; This function uses a non-reentrant model
  9417 ;;
  9418                           
  9419                           	psect	text48
  9420  00180E                     __ptext48:
  9421                           	opt stack 0
  9422  00180E                     i2_UART_buff_put:
  9423                           	opt stack 21
  9424                           
  9425                           ;UART.c: 71: if (_this->count < 200) {
  9426                           
  9427                           ;incstack = 0
  9428  00180E  EE20 F0CC          	lfsr	2,204
  9429  001812  5007               	movf	i2UART_buff_put@_this,w,c
  9430  001814  26D9               	addwf	fsr2l,f,c
  9431  001816  5008               	movf	i2UART_buff_put@_this+1,w,c
  9432  001818  22DA               	addwfc	fsr2h,f,c
  9433  00181A  0E01               	movlw	1
  9434  00181C  BEDB               	btfsc	plusw2,7,c
  9435  00181E  D007               	goto	i2l3472
  9436  001820  0E01               	movlw	1
  9437  001822  50DB               	movf	plusw2,w,c
  9438  001824  E13A               	bnz	i2l3478
  9439  001826  0EC8               	movlw	200
  9440  001828  5CDE               	subwf	postinc2,w,c
  9441  00182A  B0D8               	btfsc	status,0,c
  9442  00182C  D036               	goto	i2l3478
  9443  00182E                     i2l3472:
  9444                           
  9445                           ;UART.c: 72: _this->buf[_this->head] = c;
  9446  00182E  EE20 F0C8          	lfsr	2,200
  9447  001832  5007               	movf	i2UART_buff_put@_this,w,c
  9448  001834  26D9               	addwf	fsr2l,f,c
  9449  001836  5008               	movf	i2UART_buff_put@_this+1,w,c
  9450  001838  22DA               	addwfc	fsr2h,f,c
  9451  00183A  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  9452  00183E  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  9453  001842  500A               	movf	??i2_UART_buff_put,w,c
  9454  001844  2407               	addwf	i2UART_buff_put@_this,w,c
  9455  001846  6ED9               	movwf	fsr2l,c
  9456  001848  500B               	movf	??i2_UART_buff_put+1,w,c
  9457  00184A  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  9458  00184C  6EDA               	movwf	fsr2h,c
  9459  00184E  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  9460                           
  9461                           ;UART.c: 73: _this->head = UART_buff_modulo_inc(_this->head, 200);
  9462  001852  EE20 F0C8          	lfsr	2,200
  9463  001856  5007               	movf	i2UART_buff_put@_this,w,c
  9464  001858  26D9               	addwf	fsr2l,f,c
  9465  00185A  5008               	movf	i2UART_buff_put@_this+1,w,c
  9466  00185C  22DA               	addwfc	fsr2h,f,c
  9467  00185E  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  9468  001862  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  9469  001866  0E00               	movlw	0
  9470  001868  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  9471  00186A  0EC8               	movlw	200
  9472  00186C  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  9473  00186E  ECC6  F011         	call	i2_UART_buff_modulo_inc	;wreg free
  9474  001872  EE20 F0C8          	lfsr	2,200
  9475  001876  5007               	movf	i2UART_buff_put@_this,w,c
  9476  001878  26D9               	addwf	fsr2l,f,c
  9477  00187A  5008               	movf	i2UART_buff_put@_this+1,w,c
  9478  00187C  22DA               	addwfc	fsr2h,f,c
  9479  00187E  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  9480  001882  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  9481                           
  9482                           ;UART.c: 74: ++_this->count;
  9483  001886  EE20 F0CC          	lfsr	2,204
  9484  00188A  5007               	movf	i2UART_buff_put@_this,w,c
  9485  00188C  26D9               	addwf	fsr2l,f,c
  9486  00188E  5008               	movf	i2UART_buff_put@_this+1,w,c
  9487  001890  22DA               	addwfc	fsr2h,f,c
  9488  001892  2ADE               	incf	postinc2,f,c
  9489  001894  0E00               	movlw	0
  9490  001896  22DD               	addwfc	postdec2,f,c
  9491                           
  9492                           ;UART.c: 75: } else {
  9493  001898  0012               	return	
  9494  00189A                     i2l3478:
  9495                           
  9496                           ;UART.c: 76: _this->buf[_this->head] = c;
  9497  00189A  EE20 F0C8          	lfsr	2,200
  9498  00189E  5007               	movf	i2UART_buff_put@_this,w,c
  9499  0018A0  26D9               	addwf	fsr2l,f,c
  9500  0018A2  5008               	movf	i2UART_buff_put@_this+1,w,c
  9501  0018A4  22DA               	addwfc	fsr2h,f,c
  9502  0018A6  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  9503  0018AA  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  9504  0018AE  500A               	movf	??i2_UART_buff_put,w,c
  9505  0018B0  2407               	addwf	i2UART_buff_put@_this,w,c
  9506  0018B2  6ED9               	movwf	fsr2l,c
  9507  0018B4  500B               	movf	??i2_UART_buff_put+1,w,c
  9508  0018B6  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  9509  0018B8  6EDA               	movwf	fsr2h,c
  9510  0018BA  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  9511                           
  9512                           ;UART.c: 77: _this->head = UART_buff_modulo_inc(_this->head, 200);
  9513  0018BE  EE20 F0C8          	lfsr	2,200
  9514  0018C2  5007               	movf	i2UART_buff_put@_this,w,c
  9515  0018C4  26D9               	addwf	fsr2l,f,c
  9516  0018C6  5008               	movf	i2UART_buff_put@_this+1,w,c
  9517  0018C8  22DA               	addwfc	fsr2h,f,c
  9518  0018CA  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  9519  0018CE  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  9520  0018D2  0E00               	movlw	0
  9521  0018D4  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  9522  0018D6  0EC8               	movlw	200
  9523  0018D8  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  9524  0018DA  ECC6  F011         	call	i2_UART_buff_modulo_inc	;wreg free
  9525  0018DE  EE20 F0C8          	lfsr	2,200
  9526  0018E2  5007               	movf	i2UART_buff_put@_this,w,c
  9527  0018E4  26D9               	addwf	fsr2l,f,c
  9528  0018E6  5008               	movf	i2UART_buff_put@_this+1,w,c
  9529  0018E8  22DA               	addwfc	fsr2h,f,c
  9530  0018EA  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  9531  0018EE  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  9532                           
  9533                           ;UART.c: 78: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  9534  0018F2  EE20 F0CA          	lfsr	2,202
  9535  0018F6  5007               	movf	i2UART_buff_put@_this,w,c
  9536  0018F8  26D9               	addwf	fsr2l,f,c
  9537  0018FA  5008               	movf	i2UART_buff_put@_this+1,w,c
  9538  0018FC  22DA               	addwfc	fsr2h,f,c
  9539  0018FE  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  9540  001902  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  9541  001906  0E00               	movlw	0
  9542  001908  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  9543  00190A  0EC8               	movlw	200
  9544  00190C  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  9545  00190E  ECC6  F011         	call	i2_UART_buff_modulo_inc	;wreg free
  9546  001912  EE20 F0CA          	lfsr	2,202
  9547  001916  5007               	movf	i2UART_buff_put@_this,w,c
  9548  001918  26D9               	addwf	fsr2l,f,c
  9549  00191A  5008               	movf	i2UART_buff_put@_this+1,w,c
  9550  00191C  22DA               	addwfc	fsr2h,f,c
  9551  00191E  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  9552  001922  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  9553  001926  0012               	return	
  9554  001928                     __end_ofi2_UART_buff_put:
  9555                           	opt stack 0
  9556                           tosu	equ	0xFFF
  9557                           tosh	equ	0xFFE
  9558                           tosl	equ	0xFFD
  9559                           pclatu	equ	0xFFB
  9560                           pclath	equ	0xFFA
  9561                           tblptru	equ	0xFF8
  9562                           tblptrh	equ	0xFF7
  9563                           tblptrl	equ	0xFF6
  9564                           tablat	equ	0xFF5
  9565                           prodh	equ	0xFF4
  9566                           prodl	equ	0xFF3
  9567                           intcon	equ	0xFF2
  9568                           intcon2	equ	0xFF1
  9569                           postinc0	equ	0xFEE
  9570                           fsr0h	equ	0xFEA
  9571                           fsr0l	equ	0xFE9
  9572                           wreg	equ	0xFE8
  9573                           postinc1	equ	0xFE6
  9574                           fsr1h	equ	0xFE2
  9575                           fsr1l	equ	0xFE1
  9576                           indf2	equ	0xFDF
  9577                           postinc2	equ	0xFDE
  9578                           postdec2	equ	0xFDD
  9579                           plusw2	equ	0xFDB
  9580                           fsr2h	equ	0xFDA
  9581                           fsr2l	equ	0xFD9
  9582                           status	equ	0xFD8
  9583                           
  9584 ;; *************** function i2_UART_buff_modulo_inc *****************
  9585 ;; Defined at:
  9586 ;;		line 108 in file "UART.c"
  9587 ;; Parameters:    Size  Location     Type
  9588 ;;  value           2    0[COMRAM] const unsigned int 
  9589 ;;  modulus         2    2[COMRAM] const unsigned int 
  9590 ;; Auto vars:     Size  Location     Type
  9591 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  9592 ;; Return value:  Size  Location     Type
  9593 ;;                  2    0[COMRAM] unsigned int 
  9594 ;; Registers used:
  9595 ;;		wreg, status,2, status,0
  9596 ;; Tracked objects:
  9597 ;;		On entry : 0/0
  9598 ;;		On exit  : 0/0
  9599 ;;		Unchanged: 0/0
  9600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9601 ;;      Params:         4       0       0       0       0       0       0
  9602 ;;      Locals:         2       0       0       0       0       0       0
  9603 ;;      Temps:          0       0       0       0       0       0       0
  9604 ;;      Totals:         6       0       0       0       0       0       0
  9605 ;;Total ram usage:        6 bytes
  9606 ;; Hardware stack levels used:    1
  9607 ;; This function calls:
  9608 ;;		Nothing
  9609 ;; This function is called by:
  9610 ;;		i2_UART_buff_put
  9611 ;;		i2_UART_buff_get
  9612 ;; This function uses a non-reentrant model
  9613 ;;
  9614                           
  9615                           	psect	text49
  9616  00238C                     __ptext49:
  9617                           	opt stack 0
  9618  00238C                     i2_UART_buff_modulo_inc:
  9619                           	opt stack 21
  9620                           
  9621                           ;UART.c: 109: unsigned int my_value = value + 1;
  9622                           
  9623                           ;incstack = 0
  9624  00238C  0E01               	movlw	1
  9625  00238E  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  9626  002390  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  9627  002392  0E00               	movlw	0
  9628  002394  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  9629  002396  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  9630                           
  9631                           ;UART.c: 110: if (my_value >= modulus) {
  9632  002398  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  9633  00239A  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  9634  00239C  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  9635  00239E  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  9636  0023A0  A0D8               	btfss	status,0,c
  9637  0023A2  D004               	goto	i2l3126
  9638                           
  9639                           ;UART.c: 111: my_value = 0;
  9640  0023A4  0E00               	movlw	0
  9641  0023A6  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  9642  0023A8  0E00               	movlw	0
  9643  0023AA  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  9644  0023AC                     i2l3126:
  9645                           
  9646                           ;UART.c: 112: }
  9647                           ;UART.c: 113: return (my_value);
  9648  0023AC  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  9649  0023B0  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  9650  0023B4  0012               	return	
  9651  0023B6                     __end_ofi2_UART_buff_modulo_inc:
  9652                           	opt stack 0
  9653                           tosu	equ	0xFFF
  9654                           tosh	equ	0xFFE
  9655                           tosl	equ	0xFFD
  9656                           pclatu	equ	0xFFB
  9657                           pclath	equ	0xFFA
  9658                           tblptru	equ	0xFF8
  9659                           tblptrh	equ	0xFF7
  9660                           tblptrl	equ	0xFF6
  9661                           tablat	equ	0xFF5
  9662                           prodh	equ	0xFF4
  9663                           prodl	equ	0xFF3
  9664                           intcon	equ	0xFF2
  9665                           intcon2	equ	0xFF1
  9666                           postinc0	equ	0xFEE
  9667                           fsr0h	equ	0xFEA
  9668                           fsr0l	equ	0xFE9
  9669                           wreg	equ	0xFE8
  9670                           postinc1	equ	0xFE6
  9671                           fsr1h	equ	0xFE2
  9672                           fsr1l	equ	0xFE1
  9673                           indf2	equ	0xFDF
  9674                           postinc2	equ	0xFDE
  9675                           postdec2	equ	0xFDD
  9676                           plusw2	equ	0xFDB
  9677                           fsr2h	equ	0xFDA
  9678                           fsr2l	equ	0xFD9
  9679                           status	equ	0xFD8
  9680                           
  9681 ;; *************** function _ADC_ISR *****************
  9682 ;; Defined at:
  9683 ;;		line 130 in file "mcc_generated_files/adc.c"
  9684 ;; Parameters:    Size  Location     Type
  9685 ;;		None
  9686 ;; Auto vars:     Size  Location     Type
  9687 ;;		None
  9688 ;; Return value:  Size  Location     Type
  9689 ;;                  1    wreg      void 
  9690 ;; Registers used:
  9691 ;;		None
  9692 ;; Tracked objects:
  9693 ;;		On entry : 0/0
  9694 ;;		On exit  : 0/0
  9695 ;;		Unchanged: 0/0
  9696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9697 ;;      Params:         0       0       0       0       0       0       0
  9698 ;;      Locals:         0       0       0       0       0       0       0
  9699 ;;      Temps:          0       0       0       0       0       0       0
  9700 ;;      Totals:         0       0       0       0       0       0       0
  9701 ;;Total ram usage:        0 bytes
  9702 ;; Hardware stack levels used:    1
  9703 ;; This function calls:
  9704 ;;		Nothing
  9705 ;; This function is called by:
  9706 ;;		_INTERRUPT_InterruptManager
  9707 ;; This function uses a non-reentrant model
  9708 ;;
  9709                           
  9710                           	psect	text50
  9711  0024EC                     __ptext50:
  9712                           	opt stack 0
  9713  0024EC                     _ADC_ISR:
  9714                           	opt stack 23
  9715                           
  9716                           ;adc.c: 133: PIR1bits.ADIF = 0;
  9717                           
  9718                           ;incstack = 0
  9719  0024EC  9C9E               	bcf	3998,6,c	;volatile
  9720  0024EE  0012               	return		;funcret
  9721  0024F0                     __end_of_ADC_ISR:
  9722                           	opt stack 0
  9723  0000                     tosu	equ	0xFFF
  9724                           tosh	equ	0xFFE
  9725                           tosl	equ	0xFFD
  9726                           pclatu	equ	0xFFB
  9727                           pclath	equ	0xFFA
  9728                           tblptru	equ	0xFF8
  9729                           tblptrh	equ	0xFF7
  9730                           tblptrl	equ	0xFF6
  9731                           tablat	equ	0xFF5
  9732                           prodh	equ	0xFF4
  9733                           prodl	equ	0xFF3
  9734                           intcon	equ	0xFF2
  9735                           intcon2	equ	0xFF1
  9736                           postinc0	equ	0xFEE
  9737                           fsr0h	equ	0xFEA
  9738                           fsr0l	equ	0xFE9
  9739                           wreg	equ	0xFE8
  9740                           postinc1	equ	0xFE6
  9741                           fsr1h	equ	0xFE2
  9742                           fsr1l	equ	0xFE1
  9743                           indf2	equ	0xFDF
  9744                           postinc2	equ	0xFDE
  9745                           postdec2	equ	0xFDD
  9746                           plusw2	equ	0xFDB
  9747                           fsr2h	equ	0xFDA
  9748                           fsr2l	equ	0xFD9
  9749                           status	equ	0xFD8
  9750                           tosu	equ	0xFFF
  9751                           tosh	equ	0xFFE
  9752                           tosl	equ	0xFFD
  9753                           pclatu	equ	0xFFB
  9754                           pclath	equ	0xFFA
  9755                           tblptru	equ	0xFF8
  9756                           tblptrh	equ	0xFF7
  9757                           tblptrl	equ	0xFF6
  9758                           tablat	equ	0xFF5
  9759                           prodh	equ	0xFF4
  9760                           prodl	equ	0xFF3
  9761                           intcon	equ	0xFF2
  9762                           intcon2	equ	0xFF1
  9763                           postinc0	equ	0xFEE
  9764                           fsr0h	equ	0xFEA
  9765                           fsr0l	equ	0xFE9
  9766                           wreg	equ	0xFE8
  9767                           postinc1	equ	0xFE6
  9768                           fsr1h	equ	0xFE2
  9769                           fsr1l	equ	0xFE1
  9770                           indf2	equ	0xFDF
  9771                           postinc2	equ	0xFDE
  9772                           postdec2	equ	0xFDD
  9773                           plusw2	equ	0xFDB
  9774                           fsr2h	equ	0xFDA
  9775                           fsr2l	equ	0xFD9
  9776                           status	equ	0xFD8
  9777                           
  9778                           	psect	text51
  9779  000000                     __ptext51:
  9780                           	opt stack 0
  9781                           tosu	equ	0xFFF
  9782                           tosh	equ	0xFFE
  9783                           tosl	equ	0xFFD
  9784                           pclatu	equ	0xFFB
  9785                           pclath	equ	0xFFA
  9786                           tblptru	equ	0xFF8
  9787                           tblptrh	equ	0xFF7
  9788                           tblptrl	equ	0xFF6
  9789                           tablat	equ	0xFF5
  9790                           prodh	equ	0xFF4
  9791                           prodl	equ	0xFF3
  9792                           intcon	equ	0xFF2
  9793                           intcon2	equ	0xFF1
  9794                           postinc0	equ	0xFEE
  9795                           fsr0h	equ	0xFEA
  9796                           fsr0l	equ	0xFE9
  9797                           wreg	equ	0xFE8
  9798                           postinc1	equ	0xFE6
  9799                           fsr1h	equ	0xFE2
  9800                           fsr1l	equ	0xFE1
  9801                           indf2	equ	0xFDF
  9802                           postinc2	equ	0xFDE
  9803                           postdec2	equ	0xFDD
  9804                           plusw2	equ	0xFDB
  9805                           fsr2h	equ	0xFDA
  9806                           fsr2l	equ	0xFD9
  9807                           status	equ	0xFD8
  9808                           
  9809                           	psect	rparam
  9810  0000                     tosu	equ	0xFFF
  9811                           tosh	equ	0xFFE
  9812                           tosl	equ	0xFFD
  9813                           pclatu	equ	0xFFB
  9814                           pclath	equ	0xFFA
  9815                           tblptru	equ	0xFF8
  9816                           tblptrh	equ	0xFF7
  9817                           tblptrl	equ	0xFF6
  9818                           tablat	equ	0xFF5
  9819                           prodh	equ	0xFF4
  9820                           prodl	equ	0xFF3
  9821                           intcon	equ	0xFF2
  9822                           intcon2	equ	0xFF1
  9823                           postinc0	equ	0xFEE
  9824                           fsr0h	equ	0xFEA
  9825                           fsr0l	equ	0xFE9
  9826                           wreg	equ	0xFE8
  9827                           postinc1	equ	0xFE6
  9828                           fsr1h	equ	0xFE2
  9829                           fsr1l	equ	0xFE1
  9830                           indf2	equ	0xFDF
  9831                           postinc2	equ	0xFDE
  9832                           postdec2	equ	0xFDD
  9833                           plusw2	equ	0xFDB
  9834                           fsr2h	equ	0xFDA
  9835                           fsr2l	equ	0xFD9
  9836                           status	equ	0xFD8
  9837                           
  9838                           	psect	temp
  9839  000043                     btemp:
  9840                           	opt stack 0
  9841  000043                     	ds	1
  9842  0000                     int$flags	set	btemp
  9843                           tosu	equ	0xFFF
  9844                           tosh	equ	0xFFE
  9845                           tosl	equ	0xFFD
  9846                           pclatu	equ	0xFFB
  9847                           pclath	equ	0xFFA
  9848                           tblptru	equ	0xFF8
  9849                           tblptrh	equ	0xFF7
  9850                           tblptrl	equ	0xFF6
  9851                           tablat	equ	0xFF5
  9852                           prodh	equ	0xFF4
  9853                           prodl	equ	0xFF3
  9854                           intcon	equ	0xFF2
  9855                           intcon2	equ	0xFF1
  9856                           postinc0	equ	0xFEE
  9857                           fsr0h	equ	0xFEA
  9858                           fsr0l	equ	0xFE9
  9859                           wreg	equ	0xFE8
  9860                           postinc1	equ	0xFE6
  9861                           fsr1h	equ	0xFE2
  9862                           fsr1l	equ	0xFE1
  9863                           indf2	equ	0xFDF
  9864                           postinc2	equ	0xFDE
  9865                           postdec2	equ	0xFDD
  9866                           plusw2	equ	0xFDB
  9867                           fsr2h	equ	0xFDA
  9868                           fsr2l	equ	0xFD9
  9869                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         1008
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     35      66
    BANK0           160     39     153
    BANK1           256      0     254
    BANK2           256      0     200
    BANK3           256      0     206
    BANK4           256      0     206
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK3[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1410(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK2[200]), ring_buffer(BANK1[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK1[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 40
		 -> receiveArray(BANK0[40]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 40
		 -> NULL(NULL[0]), receiveArray(BANK0[40]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR1_ISR->_FuseSystem
    _Update->_writeRegisters
    _writeRegisters->i2_Delay
    _FuseSystem->_EnableSlavePower
    _EnableSlavePower->_SetPin595
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _sendData->_FastTransfer_buffer_flush
    _sendData->_Send_put
    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _receiveData->_CRCcheck
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _CRCcheck->_crcBufS_get
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _SYSTEM_Initialize->_begin
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   21958
                                             37 BANK0      2     2      0
                  _SYSTEM_Initialize
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   19477
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    8762
                              _Delay
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    5704
                                             12 BANK0      5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                              0 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                              8 BANK0      4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1674
                                             13 BANK0      3     1      2
            _FastTransfer_buffer_put
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                              6 BANK0      7     2      5
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Delay                                                9     5      4    1384
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0   10715
                                             19 BANK0     18    18      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                             11 BANK0      1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                              6 BANK0      5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                             12 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                              0 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                              0 BANK0     12     8      4
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                              6 BANK0      5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                              2 BANK0      2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                              0 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2478
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (2) _begin                                               13     0     13    1463
                                              8 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     599
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2    1015
                                              8 BANK0      2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0   26756
                                             21 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0   25547
                         _FuseSystem
                        _ReadCurrent
 ---------------------------------------------------------------------------------
 (9) _ReadCurrent                                          1     1      0   11952
                                             13 COMRAM     1     1      0
                  _ADC_GetConversion
                          _SetPin595
                             _Update
 ---------------------------------------------------------------------------------
 (10) _Update                                              0     0      0     212
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (11) _writeRegisters                                      4     4      0     212
                                              9 COMRAM     4     4      0
                            i2_Delay
 ---------------------------------------------------------------------------------
 (12) i2_Delay                                             9     5      4      98
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (10) _ADC_GetConversion                                   5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (9) _FuseSystem                                           8     8      0   13595
                                             13 COMRAM     8     8      0
                   _EnableSlavePower
                             ___wmul
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) _EnableSlavePower                                    3     1      2   13106
                                             10 COMRAM     3     1      2
                          _SetPin595
 ---------------------------------------------------------------------------------
 (10) _SetPin595                                          10     4      6   11586
                                              0 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _begin
       ___awdiv
   _updateComms
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _respondECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
       _sendData
         Absolute function(Fake) *
         _CRC8 *
         _FastTransfer_buffer_flush *
           _memset
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR1_ISR
     _FuseSystem
       _EnableSlavePower
         _SetPin595
       ___wmul
     _ReadCurrent
       _ADC_GetConversion
       _SetPin595
       _Update
         _writeRegisters
           i2_Delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C8       8       78.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      FE       6       99.2%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     27      99       4       95.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     23      42       1       70.2%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     43D       9        0.0%
DATA                 0      0     43D      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Thu Oct 06 01:24:30 2016

      __end_of_FastTransfer_buffer_flush 1F02                   i2_UART_buff_modulo_inc 238C  
                           _rx_array_inx 0097                             ___awdiv@sign 00D7  
                    ___wmul@multiplicand 0003                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                                      l468 1F4A  
                                    l582 11B0                                      l793 1C74  
                           __CFG_CPB$OFF 000000                                      _PR2 000FBB  
                           __CFG_CPD$OFF 000000                          _timer1ReloadVal 003A  
                        __end_of_ADC_ISR 24F0     FastTransfer_buffer_flush@clearBuffer 00DC  
                                    prod 000FF3                                      tosl 000FFD  
                                    wreg 000FE8            i2UART_buff_modulo_inc@modulus 0003  
                           __CFG_LVP$OFF 000000                                     l4002 10FE  
                                   l4020 11A2                                     l4006 1114  
                                   l4040 1B28                                     l4016 117C  
                                   l4024 11AA                                     l4202 024C  
                                   l4052 1B5C                                     l4300 0702  
                                   l4204 027A                                     l4220 02E6  
                                   l4054 1B68                                     l4046 1B3E  
                                   l4310 07BA                                     l4302 071C  
                                   l4072 1BC0                                     l4064 1B9E  
                                   l4056 1B6E                                     l4304 0736  
                                   l4312 07D6                                     l4240 046C  
                                   l4232 03C2                                     l4224 0318  
                                   l4216 02AE                                     l4320 07E6  
                                   l4306 0750                                     l4242 0480  
                                   l4068 1BAC                                     l4308 076A  
                                   l4260 0562                                     l4164 00EC  
                                   l4172 0124                                     l4412 245C  
                                   l4270 061A                                     l4262 057C  
                                   l4238 0466                                     l4350 2386  
                                   l4264 0596                                     l4256 052C  
                                   l4272 0636                                     l4184 01DA  
                                   l4168 0120                                     l3800 21EE  
                                   l3810 2288                                     l4266 05B0  
                                   l4258 0546                                     l4282 0646  
                                   l4186 01F4                                     l3820 14FA  
                                   l4268 05CA                                     l4188 01FA  
                                   l4196 0238                                     l3806 2276  
                                   l3902 15C2                                     l3814 1478  
                                   l4296 06CC                                     l3850 1F26  
                                   l3834 1C6E                                     l3914 167E  
                                   l3930 17B2                                     l3922 16F6  
                                   l4298 06E6                                     l3844 1F0A  
                                   l3860 1F5E                                     l3792 222A  
                                   l3880 0EA4                     receiveData@crcHolder 00F1  
                                   l3858 1F54                                     l3962 1FA2  
                                   l3970 1352                                     l3980 13DA  
                                   l3972 136E                                     l3958 1F84  
                                   l3982 13E0                                     l3974 1388  
                                   l3992 1026                                     l3976 13A4  
                                   l3968 1338                                     l3898 15B4  
                                   l3994 1056                                     l3986 141C  
                                   l3978 13B0                                     _CRC8 1F02  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     _LATD 000F8C  
                                   _LATE 000F8D                                     u3130 1BEA  
                                   u4008 0754                                     u4040 237E  
                                   u4018 076E                                     u3170 1A10  
                                   u4028 07BE                                     u3308 1372  
                                   u3318 138C                                     u3191 0EA2  
                                   u3408 10B4                                     u3328 13B4  
                                   u3409 10CA                                     u3348 1404  
                                   u4157 1F8C                                     u3358 102A  
                                   u3278 1322                                     u3359 1040  
                                   u3288 133C                                     u3378 105A  
                                   u3618 0148                                     u3298 1356  
                                   u3379 1070                                     u3619 015E  
                                   u3388 1078                                     u3389 108E  
                                   u3398 1096                                     u3718 0250  
                                   u3638 0168                                     u3558 00BE  
                                   u3399 10AC                                     u3719 0266  
                                   u3639 017E                                     u3559 00D4  
                                   u3648 0186                                     u3649 019C  
                                   u3738 027E                                     u3658 01A4  
                                   u3578 00F4                                     u3739 0294  
                                   u3659 01BA                                     u3579 010A  
                                   u3908 05B4                                     u3918 05CE  
                                   u3758 02B2                                     u3678 01DE  
                                   u3598 0128                                     i2l31 231C  
                                   u3791 035C                                     u3759 02C8  
                                   u3599 013E                                     u3928 061E  
                                   u3848 0516                                     u3768 02EA  
                                   u3769 0300                                     u3858 0530  
                                   u3948 06B6                                     u3868 054A  
                                   u3958 06D0                                     u3878 0566  
                                   u3968 06EA                                     u3888 0580  
                                   i2l73 0070                                     i2l65 004E  
                                   u3978 0706                                     u3898 059A  
                                   i2l67 005A                                     u3988 0720  
                                   i2l69 0066                                     u3998 073A  
                                   _TMR2 000FBC                                     _WPUB 000F61  
                        __end_ofi2_Delay 2130                                     _data 0024  
                                   _main 2448                 __end_of_EnableSlavePower 1B0C  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     btemp 0043  
                          __CFG_BORV$190 000000                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 1026                                     start 00AC  
                          __CFG_IESO$OFF 000000                             ___param_bank 000010  
                          ??_ReadCurrent 000E           i2UART_buff_modulo_inc@my_value 0005  
                                  ?_CRC8 00D2                         __end_of_CRCcheck 11B2  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 24DC  
                     crcBufS_put@address 00D4                                    ?_main 0001  
                        __end_of___awdiv 1BCA                                    _EEADR 000FA9  
                                  _ANSB3 0079CB                                    _ANSB4 0079CC  
                                  _ANSD7 0079DF                          ___awdiv@divisor 00D4  
                                  _T1CON 000FCD                                    _T2CON 000FBA  
                                  _LATB0 007C50                                    _LATA3 007C4B  
                                  _LATB3 007C53                                    _LATB4 007C54  
                                  _LATB5 007C55                                    _LATD4 007C64  
                                  _LATD5 007C65                                    _LATD6 007C66  
                                  _LATD7 007C67                           __CFG_DEBUG$OFF 000000  
                                  i2l740 1DEE                                    i2l825 23C0  
                                  i2l826 23C8                                    i2l738 1DE4  
                                  i2l677 1304                                    _MCSOn 003E  
                                  i2l793 1D9C                          ___awdiv@counter 00D6  
                                  _TMR1H 000FCF                                    _TMR1L 000FCE  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96                                    _Delay 1F70  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 22D2                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                       ??_writeRegisters 000A                         __end_of_TMR1_ISR 22D2  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _begin 2038  
                         __CFG_EBTRB$OFF 000000                                    _group 0088  
                     __CFG_MCLRE$EXTMCLR 000000                                    main@j 00F7  
                                  pclath 000FFA                                    tablat 000FF5  
                          ??_Receive_get 00DD                     __size_of_crcBufS_get 0142  
                                  plusw2 000FDB                           begin@stuffpeek 00E5  
                   __size_of_crcBufS_put 0100                                    status 000FD8  
                         __CFG_HFOFST$ON 000000                             ?_receiveData 0001  
                         __CFG_PBADEN$ON 000000                             __end_of_CRC8 1F70  
                        CRCcheck@SentCRC 00DE                          __initialization 1E1E  
             __end_of_EUSART1_Initialize 21BC                             __end_of_main 2462  
                             _CurrentADC 006C                               ToSend@what 00DF  
                                 ??_CRC8 00D5                                ??_ADC_ISR 0001  
            ?_INTERRUPT_InterruptManager 0001                               _FuseSystem 11B2  
                                 ??_main 00F7                      __end_of_ReadCurrent 0E7A  
                          __activetblptr 000002                         __end_of_Send_put 226C  
              __size_ofi2_UART_buff_size 0016                                   ?_Delay 00D2  
                  ?_EUSART1_Transmit_ISR 0001            FastTransfer_buffer_put@towhat 00DB  
                          ?_Receive_peek 0001                                   ?_begin 00DA  
                              ??i2_Delay 0005                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                                   _ADCON2 000FC0  
                            FuseSystem@i 0012                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                                   _EEDATA 000FA8  
                                 _CCPR2H 000F68                                   _CCPR2L 000F67  
                                 _EECON2 000FA7                         ___awdiv@dividend 00D2  
                                 _ANSELA 000F38                                   _ANSELB 000F39  
                                 _ANSELC 000F3A                                   _ANSELD 000F3B  
                                 _ANSELE 000F3C                                   _T1GCON 000FCC  
                        i2_UART_buff_get 1D0E                                   _RC1STA 000FAB  
                        i2_UART_buff_put 180E                                   Delay@i 00D7  
                                 i2l3126 23AC                                   i2l3230 122C  
                                 i2l3214 11BA                                   i2l3240 12A0  
                                 i2l3232 1260                                   i2l3224 1210  
                                 i2l3242 12B0                                   i2l3234 1270  
                                 i2l3218 11CA                                   i2l3236 1280  
                                 i2l3238 1290                                   i2l3246 12C0  
                                 i2l3262 0902                           __CFG_WDTEN$OFF 000000  
                                 i2l3248 12F6                                   i2l3280 0C4A  
                                 i2l3274 0B32                                   i2l3508 22FC  
                                 i2l2820 20F8                                   i2l3268 0A1A  
                                 i2l3286 0D62                                   i2l3526 22CA  
                                 i2l3472 182E                                   i2l2824 2112  
                                 i2l2920 1DB0              UART_buff_modulo_inc@modulus 00D4  
                                 i2l3492 1D98                                   i2l3478 189A  
                                 i2l2928 1DDC                                   i2l2982 1A8A  
                                 i2l2974 1A2C                                   i2l2990 1AE4  
                                 i2l2984 1AA8                                   i2l2976 1A4A  
                                 i2l2986 1AC6                                   i2l2978 1A68  
                                 _TABLAT 000FF5                                   _RCREG1 000FAE  
                                 _OSCCON 000FD3                                   _SPBRG1 000FAF  
                                 _TX1STA 000FAC                                   _TRISB3 007C9B  
                                 _TRISB4 007C9C                                   _TRISB5 007C9D  
                                 _TXREG1 000FAD                           __CFG_XINST$OFF 000000  
                                 _ToSend 2404                      __end_of_Receive_get 24CE  
                       crcBufS_get@_this 00D2                             _CCPTMRS1bits 000F48  
            ??_FastTransfer_buffer_flush 00DE                                   _Update 24E6  
                     __size_of_SetPin595 004E                            _output_buffer 0400  
                       crcBufS_get@space 00D5                                   ___wmul 23DE  
                              ??___awdiv 00D6                                CRC8@tempI 00D7  
                         __CFG_STVREN$ON 000000                                   _memset 226C  
                                 clear_0 1E24                                   clear_1 1E30  
                                 clear_2 1E3C                                   clear_3 1E48  
                                 clear_4 1E54                                   clear_5 1E60  
                       ___awdiv@quotient 00D8                                   _rx_len 0098  
                       __end_of_sendData 1456                             __pdataCOMRAM 0040  
                          Send_put@_data 00DD                           ??_Receive_peek 00D6  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8         __size_of_FastTransfer_buffer_put 01AC  
               ADC_GetConversion@channel 0005             __end_of_UART_buff_modulo_inc 2234  
          __size_of_INTERRUPT_Initialize 000A                        ReadCurrent@gather 000E  
                      _SYSTEM_Initialize 1FD4                               __accesstop 0060  
                __end_of__initialization 1E84                                ?_CRCcheck 0001  
                     ?_SYSTEM_Initialize 0001                            ___rparam_used 000001  
                ?i2_UART_buff_modulo_inc 0001                             ?_updateComms 0001  
                          __end_of_Delay 1FD4                           __pcstackCOMRAM 0001  
                     _crcBufS_status_put 16E8                      ??_SYSTEM_Initialize 00E7  
                       crcBufS_put@_this 00D2                              _ReadCurrent 07EA  
                          __end_of_begin 2098                                ?_TMR1_ISR 0001  
 __end_of_FastTransfer_buffer_modulo_inc 21F8  __size_of_FastTransfer_buffer_modulo_inc 003C  
         _FastTransfer_buffer_modulo_inc 21BC             FastTransfer_buffer_put@_this 00D8  
                            ToSend@where 00E1                              ?_FuseSystem 0001  
                     UART_buff_get@_this 00D8                      ?_crcBufS_status_put 00D2  
                            _Currentcomp 0078                    __end_of_UART_buff_get 1C7A  
                 ??_EUSART1_Transmit_ISR 000C                    __end_of_UART_buff_put 15A6  
                                ??_Delay 00D6                  __end_ofi2_UART_buff_get 1DA0  
                __end_ofi2_UART_buff_put 1928              __end_of_EUSART1_Receive_ISR 23DE  
              _FastTransfer_buffer_flush 1E92                                  CRC8@crc 00D8  
                                CRC8@len 00D4                                  CRC8@sum 00D5  
                                ??_begin 00E7                        __end_of_SetPin595 20E6  
              __end_of_SYSTEM_Initialize 2038                   receiveData@holder_1410 00EE  
                    _addressErrorCounter 0084                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                        __CFG_PLLCFG$OFF 000000                              _Receive_get 24BC  
                             ??_CRCcheck 00DE                     ??_crcBufS_status_put 00D6  
         __end_ofi2_UART_buff_modulo_inc 23B6                        begin@givenAddress 00DD  
                      ?_EnableSlavePower 000B                  __size_of_UART_buff_init 0022  
                __size_of_UART_buff_peek 002E                  __size_of_UART_buff_size 0018  
                              ?_Send_put 0001                       ??_EnableSlavePower 000D  
                   __size_of_receiveData 073A                                  ?_ToSend 00DF  
                     __CFG_CCP2MX$PORTC1 000000                                  ?_Update 0001  
                                ?___wmul 0001                               ??_TMR1_ISR 0016  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 00D2  
                                _CCP2CON 000F66                                  _ADC_ISR 24EC  
                                ?_memset 00D2                               _crc_buffer 00C1  
                     UART_buff_put@_this 00D8                         i2_UART_buff_size 2494  
            i2UART_buff_modulo_inc@value 0001                                  _OSCCON2 000FD2  
                                _TBLPTRH 000FF7                                  _TBLPTRL 000FF6  
                                _TBLPTRU 000FF8                        _Receive_available 2462  
           UART_buff_modulo_inc@my_value 00D6                        __CFG_PRICLKEN$OFF 000000  
                                _OSCTUNE 000F9B                                  _SPBRGH1 000FB0  
                    sendData@whereToSend 00DF                      _receiveArrayAddress 008A  
                                i2_Delay 20E6                       ?_Receive_available 00D4  
                             begin@error 00DE                      __size_of_FuseSystem 0154  
                    ??_Receive_available 00D6                                ?_sendData 0001  
                                _Current 0060                        _alignErrorCounter 0030  
                        __CFG_PWRTEN$OFF 000000                               ??_Send_put 00DD  
                                __Hparam 0000                                  __Lparam 0000  
                        __size_of_ToSend 0022                     __end_of_Receive_peek 24BC  
                              _AKNAKsend 0092                          __size_of_Update 0006  
                                ___awdiv 1B0C                     _UART_buff_modulo_inc 21F8  
                        __size_of___wmul 0026                                  _calc_CS 0093  
                                __pcinit 1E1E                          __size_of_memset 0034  
                                __ramtop 0600                         i2UART_buff_get@c 000B  
                                __ptext0 2448                                  __ptext1 2362  
                                __ptext2 2130                                  __ptext3 1306  
                                __ptext4 1928                                  __ptext5 1E92  
                                __ptext6 2404                                  __ptext7 0E7A  
                                __ptext8 21BC                                  __ptext9 1F70  
                       i2UART_buff_put@c 0009                                _T1CONbits 000FCD  
                  _OSCILLATOR_Initialize 24CE                __end_of_Receive_available 247C  
                              _T2CONbits 000FBA                  _FastTransfer_buffer_put 0E7A  
                  CRCcheck@calculatedCRC 00DF                       _EUSART1_Initialize 2178  
                       ?i2_UART_buff_get 0007                 ??_PIN_MANAGER_Initialize 00D2  
                       ?i2_UART_buff_put 0007             crcBufS_status_put@wantedTime 00DA  
                          ??_crcBufS_get 00D6                            ??_crcBufS_put 00D7  
             __size_of_SYSTEM_Initialize 0064                     end_of_initialization 1E84  
                              Delay@wait 00D2                      ?_EUSART1_Initialize 0001  
                                memset@c 00D4                                  memset@n 00D6  
                                memset@p 00D8                            __Lmediumconst 0000  
                             ??_sendData 00DE                    ?_UART_buff_modulo_inc 00D2  
                   __size_of_updateComms 002A                                  postdec2 000FDD  
                                postinc0 000FEE                                  postinc1 000FE6  
                                postinc2 000FDE                               _respondECU 2130  
                       begin@stufftosend 00DF                      CRCcheck@arrayHolder 00E0  
                           SetPin595@Reg 0001                     ??_EUSART1_Initialize 00DC  
                           SetPin595@pin 0003                   _dataAdressErrorCounter 0086  
                             _rx_address 0096                                _TRISCbits 000F94  
                              _TRISDbits 000F95                         FuseSystem@i_1550 0014  
                           begin@maxSize 00DC       __size_of_FastTransfer_buffer_flush 0070  
                  i2UART_buff_size@_this 0001                           _UART_buff_init 2426  
                         _UART_buff_peek 2334                           _UART_buff_size 247C  
                    __end_of_crcBufS_get 16E8                  __size_of_writeRegisters 007E  
                    __end_of_crcBufS_put 1A28                        __size_of_CRCcheck 018C  
                          _moduleAddress 003F                               CRCcheck@rt 00E3  
                           ?_ReadCurrent 0001                           __end_of_ToSend 2426  
           __end_of_INTERRUPT_Initialize 24E6                           __end_of_Update 24EC  
                        _crcErrorCounter 0032                           __end_of___wmul 2404  
                      crcBufS_put@oldCRC 00D5                            __pidataCOMRAM 24F0  
                           ??_FuseSystem 000E                        __size_of_TMR1_ISR 0032  
              ??_FastTransfer_buffer_put 00DD                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_memset 22A0                        crcBufS_put@status 00D6  
                           receiveData@r 00F5               __size_of_Receive_available 001A  
                           receiveData@u 00F3                      start_initialization 1E1E  
        __size_of_PIN_MANAGER_Initialize 0094                    crcBufS_get@wantedTime 00DC  
                  EnableSlavePower@slave 000D                   __end_of_UART_buff_init 2448  
                 __end_of_UART_buff_peek 2362                           UART_buff_get@c 00DC  
                 __end_of_UART_buff_size 2494                             ?_Receive_get 0001  
                              _SetPin595 2098                           UART_buff_put@c 00DA  
                  __size_of_Receive_peek 0012                       __end_of_FuseSystem 1306  
               __end_ofi2_UART_buff_size 24AA                                 ??_ToSend 00E1  
                 ??_UART_buff_modulo_inc 00D6                                 CRC8@data 00D2  
                               ??_Update 000E                          crcBufS_get@time 00D4  
                      __size_of_Send_put 0038                              ?_respondECU 0001  
                               ??___wmul 0005                                 ?_ADC_ISR 0001  
                               ??_memset 00D8                __size_of_EnableSlavePower 00E4  
                            __pbssCOMRAM 0024            __size_of_EUSART1_Transmit_ISR 0032  
                          __pcstackBANK0 00D2                                 ?i2_Delay 0001  
                           _Receive_peek 24AA                      UART_buff_init@_this 00DA  
                            _crcBufS_get 15A6                      UART_buff_peek@_this 00D2  
                            _crcBufS_put 1928                          ?_UART_buff_init 00DA  
                        ?_UART_buff_peek 00D2                          ?_UART_buff_size 00D2  
           __size_of_EUSART1_Receive_ISR 0028                               ?_SetPin595 0001  
                          ??_receiveData 00E5              __size_of_crcBufS_status_put 0126  
                             sendData@CS 00E0                   __size_of_UART_buff_get 00B0  
                 __size_of_UART_buff_put 0150                   _PIN_MANAGER_Initialize 1C7A  
                      __size_of_sendData 0150                                __pintcode 0008  
                               ?___awdiv 00D2             ??_INTERRUPT_InterruptManager 0016  
                   i2UART_buff_get@_this 0007                                 _BAUD1CON 000FB8  
                         __size_of_Delay 0064                           __size_of_begin 0060  
                    __size_of_respondECU 0048                     _INTERRUPT_Initialize 24DC  
                           _receiveArray 0099                                 _CRCcheck 1026  
                         ___wmul@product 0005                                 _LATCbits 000F8B  
                         _writeRegisters 1DA0                      UART_buff_size@_this 00D2  
                              _registers 0100                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D                                 i2Delay@i 0006  
                               i2u215_40 122A      __size_of_INTERRUPT_InterruptManager 00A4  
                               i2u416_47 20FE                                 _PIR1bits 000F9E  
                               i2u274_40 1D2C                                 i2u275_40 23BE  
                               i2u278_40 22EC                                 i2u279_40 22BE  
                    begin@stuffavailable 00E3                                 _RCONbits 000FD0  
                       __CFG_WDTPS$32768 000000                      __end_of_receiveData 07EA  
                               _TMR1_ISR 22A0           FastTransfer_buffer_flush@_this 00DA  
                           _input_buffer 0300                     __size_of_ReadCurrent 0690  
                              _rx_buffer 0200                         __size_of_ADC_ISR 0004  
                             _ADCON0bits 000FC2                               _ADCON2bits 000FC0  
                      ___wmul@multiplier 0001                     i2UART_buff_put@_this 0007  
                          _UART_buff_get 1BCA                            _UART_buff_put 1456  
               ??i2_UART_buff_modulo_inc 0005                              _INTCON2bits 000FF1  
                       __size_ofi2_Delay 004A                    ?_INTERRUPT_Initialize 0001  
                      _sendStructAddress 0036                   __end_of_writeRegisters 1E1E  
                            ??_SetPin595 0007                     EnableSlavePower@onof 000B  
               __size_ofi2_UART_buff_get 0092                 __size_ofi2_UART_buff_put 011A  
                             _EECON1bits 000FA6                            ??_updateComms 00F7  
                   __size_of_Receive_get 0012                                 __Hrparam 0000  
                               _Send_put 2234                                 __Lrparam 0000  
                      _ADC_GetConversion 2304                       __CFG_BOREN$SBORDIS 000000  
                      __CFG_P2BMX$PORTD2 000000                  ??_OSCILLATOR_Initialize 00D2  
                     ?_ADC_GetConversion 0001                         __size_of___awdiv 00BE  
            __size_of_EUSART1_Initialize 0044                      begin@stufftoreceive 00E1  
                       _EnableSlavePower 1A28                               _ANSELCbits 000F3A  
                             _ANSELDbits 000F3B                           ?_UART_buff_get 00D8  
                         ?_UART_buff_put 00D8                              CRC8@extract 00D6  
                    ??_ADC_GetConversion 0003                                sendData@i 00E1  
               crcBufS_status_put@status 00D5                                 __ptext10 00B0  
                               __ptext11 2234                                 __ptext20 21F8  
                               __ptext12 1456                                 __ptext21 2462  
                               __ptext13 24AA                               _T1GCONbits 000FCC  
                               __ptext30 2178                                 __ptext22 247C  
                               __ptext14 2334                                 __ptext31 2426  
                               __ptext23 1F02                                 __ptext15 1026  
                               __ptext40 11B2                                 __ptext32 226C  
                               __ptext24 1FD4                                 __ptext16 16E8  
                               __ptext41 23DE                                 __ptext25 2038  
                               __ptext17 15A6                                 __ptext50 24EC  
                               __ptext42 1A28                                 __ptext34 22A0  
                               __ptext26 1B0C                                 __ptext18 24BC  
                               __ptext51 0000                                 __ptext43 2098  
                               __ptext35 07EA                                 __ptext27 1C7A  
                               __ptext19 1BCA                                 __ptext44 22D2  
                               __ptext36 24E6                                 __ptext28 24CE  
                               __ptext45 2494                                 __ptext37 1DA0  
                               __ptext29 24DC                                 __ptext46 1D0E  
                               __ptext38 20E6                                 __ptext47 23B6  
                               __ptext39 2304                                 __ptext48 180E  
                               __ptext49 238C                            __size_of_CRC8 006E  
                               begin@ptr 00DA                              i2Delay@wait 0001  
                EUSART1_Receive_ISR@data 000C                          ?_writeRegisters 0001  
                          _returnAddress 0095                            __size_of_main 001A  
                            _receiveData 00B0                                 _readwhat 0040  
                         _Transmit_stall 0042                                 _sendData 1306  
              __end_of_ADC_GetConversion 2334                        ?i2_UART_buff_size 0001  
                             _RC1STAbits 000FAB                                 _prev_pos 0034  
                           ??_respondECU 00E3                       ??i2_UART_buff_size 0003  
                      writeRegisters@val 000A                                 int$flags 0043  
                           _serial_write 0038                      __end_of_updateComms 238C  
     __end_of_INTERRUPT_InterruptManager 00AC               _INTERRUPT_InterruptManager 0008  
                    _EUSART1_Receive_ISR 23B6                        receiveData@holder 00EB  
                             _INTCONbits 000FF2                UART_buff_modulo_inc@value 00D2  
                       ??_UART_buff_init 00DC                         ??_UART_buff_peek 00D4  
                       ??_UART_buff_size 00D4                   ??_INTERRUPT_Initialize 00D2  
                               memset@p1 00D2                         _serial_available 008C  
        __size_ofi2_UART_buff_modulo_inc 002A                             ?_crcBufS_get 00D2  
                           ?_crcBufS_put 00D2                                 intlevel2 0000  
                crcBufS_status_put@_this 00D2                       __end_of_respondECU 2178  
                   ?_EUSART1_Receive_ISR 0001   FastTransfer_buffer_modulo_inc@my_value 00D6  
         FastTransfer_buffer_put@towhere 00DA                  ?_PIN_MANAGER_Initialize 0001  
                         SetPin595@value 0005             __end_of_EUSART1_Transmit_ISR 2304  
                            _ring_buffer 0130               ?_FastTransfer_buffer_flush 00DA  
                      ??i2_UART_buff_get 0009                              _serial_peek 008E  
                            _serial_read 0090                        ??i2_UART_buff_put 000A  
               ?_FastTransfer_buffer_put 00D8            __size_of_UART_buff_modulo_inc 003C  
                        ??_UART_buff_get 00DA                          ??_UART_buff_put 00DB  
  FastTransfer_buffer_modulo_inc@modulus 00D4                   crcBufS_status_put@time 00D4  
              receiveData@crcHolder_1411 00F2                        __CFG_T3CMX$PORTC0 000000  
                         _maxDataAddress 0094                          writeRegisters@i 000C  
             __end_of_crcBufS_status_put 180E                    ??_EUSART1_Receive_ISR 000C  
         __end_of_PIN_MANAGER_Initialize 1D0E         ??_FastTransfer_buffer_modulo_inc 00D6  
        ?_FastTransfer_buffer_modulo_inc 00D2            updateComms@previousPowerState 003C  
                      __CFG_FOSC$INTIO67 000000               __size_of_ADC_GetConversion 0030  
                            _updateComms 2362  
