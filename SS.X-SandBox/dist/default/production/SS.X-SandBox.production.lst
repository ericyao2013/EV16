

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Mar 26 01:00:44 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           ; Version 1.40
    61                           ; Generated 01/12/2016 GMT
    62                           ; 
    63                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F45K22 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     
    95 ;; Function _Receive_peek is unused but had its address taken
    96  0000                     
    97                           	psect	idataCOMRAM
    98  000EFC                     __pidataCOMRAM:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _Transmit_stall
   102  000EFC  01                 	db	1
   103                           
   104                           	psect	idataBANK0
   105  000EF2                     __pidataBANK0:
   106                           	opt stack 0
   107                           
   108                           ;initializer for _COBS_DECODE_DST_BUF_LEN_MAX
   109  000EF2  001E               	dw	30
   110                           
   111                           ;initializer for _COBS_ENCODE_DST_BUF_LEN_MAX
   112  000EF4  001E               	dw	30
   113  0000                     _ANSELA	set	3896
   114  0000                     _ANSELB	set	3897
   115  0000                     _ANSELC	set	3898
   116  0000                     _ANSELD	set	3899
   117  0000                     _ANSELE	set	3900
   118  0000                     _BAUD1CON	set	4024
   119  0000                     _INTCONbits	set	4082
   120  0000                     _IPR1bits	set	3999
   121  0000                     _IPR2bits	set	4002
   122  0000                     _LATAbits	set	3977
   123  0000                     _LATDbits	set	3980
   124  0000                     _OSCCON	set	4051
   125  0000                     _OSCCON2	set	4050
   126  0000                     _OSCTUNE	set	3995
   127  0000                     _PIE1bits	set	3997
   128  0000                     _PIR1bits	set	3998
   129  0000                     _PORTAbits	set	3968
   130  0000                     _PORTCbits	set	3970
   131  0000                     _PORTDbits	set	3971
   132  0000                     _RC1STA	set	4011
   133  0000                     _RC1STAbits	set	4011
   134  0000                     _RCONbits	set	4048
   135  0000                     _RCREG1	set	4014
   136  0000                     _SPBRG1	set	4015
   137  0000                     _SPBRGH1	set	4016
   138  0000                     _T0CON	set	4053
   139  0000                     _T0CONbits	set	4053
   140  0000                     _TMR0H	set	4055
   141  0000                     _TMR0L	set	4054
   142  0000                     _TRISAbits	set	3986
   143  0000                     _TRISCbits	set	3988
   144  0000                     _TRISDbits	set	3989
   145  0000                     _TX1STA	set	4012
   146  0000                     _TXREG1	set	4013
   147                           
   148                           ; #config settings
   149  0000                     
   150                           	psect	cinit
   151  000ABC                     __pcinit:
   152                           	opt stack 0
   153  000ABC                     start_initialization:
   154                           	opt stack 0
   155  000ABC                     __initialization:
   156                           	opt stack 0
   157                           
   158                           ; Initialize objects allocated to BANK0 (4 bytes)
   159                           ; load TBLPTR registers with __pidataBANK0
   160  000ABC  0EF2               	movlw	low __pidataBANK0
   161  000ABE  6EF6               	movwf	tblptrl,c
   162  000AC0  0E0E               	movlw	high __pidataBANK0
   163  000AC2  6EF7               	movwf	tblptrh,c
   164  000AC4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   165  000AC6  6EF8               	movwf	tblptru,c
   166  000AC8  EE00  F0C1         	lfsr	0,__pdataBANK0
   167  000ACC  EE10 F004          	lfsr	1,4
   168  000AD0                     copy_data0:
   169  000AD0  0009               	tblrd		*+
   170  000AD2  CFF5 FFEE          	movff	tablat,postinc0
   171  000AD6  50E5               	movf	postdec1,w,c
   172  000AD8  50E1               	movf	fsr1l,w,c
   173  000ADA  E1FA               	bnz	copy_data0
   174                           
   175                           ; Initialize objects allocated to COMRAM (1 bytes)
   176                           ; load TBLPTR registers with __pidataCOMRAM
   177  000ADC  0EFC               	movlw	low __pidataCOMRAM
   178  000ADE  6EF6               	movwf	tblptrl,c
   179  000AE0  0E0E               	movlw	high __pidataCOMRAM
   180  000AE2  6EF7               	movwf	tblptrh,c
   181  000AE4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   182  000AE6  6EF8               	movwf	tblptru,c
   183  000AE8  0009               	tblrd		*+	;fetch initializer
   184  000AEA  CFF5 F044          	movff	tablat,__pdataCOMRAM
   185                           
   186                           ; Clear objects allocated to BANK4 (200 bytes)
   187  000AEE  EE04  F000         	lfsr	0,__pbssBANK4
   188  000AF2  0EC8               	movlw	200
   189  000AF4                     clear_0:
   190  000AF4  6AEE               	clrf	postinc0,c
   191  000AF6  06E8               	decf	wreg,f,c
   192  000AF8  E1FD               	bnz	clear_0
   193                           
   194                           ; Clear objects allocated to BANK3 (206 bytes)
   195  000AFA  EE03  F000         	lfsr	0,__pbssBANK3
   196  000AFE  0ECE               	movlw	206
   197  000B00                     clear_1:
   198  000B00  6AEE               	clrf	postinc0,c
   199  000B02  06E8               	decf	wreg,f,c
   200  000B04  E1FD               	bnz	clear_1
   201                           
   202                           ; Clear objects allocated to BANK2 (206 bytes)
   203  000B06  EE02  F000         	lfsr	0,__pbssBANK2
   204  000B0A  0ECE               	movlw	206
   205  000B0C                     clear_2:
   206  000B0C  6AEE               	clrf	postinc0,c
   207  000B0E  06E8               	decf	wreg,f,c
   208  000B10  E1FD               	bnz	clear_2
   209                           
   210                           ; Clear objects allocated to BANK1 (236 bytes)
   211  000B12  EE01  F000         	lfsr	0,__pbssBANK1
   212  000B16  0EEC               	movlw	236
   213  000B18                     clear_3:
   214  000B18  6AEE               	clrf	postinc0,c
   215  000B1A  06E8               	decf	wreg,f,c
   216  000B1C  E1FD               	bnz	clear_3
   217                           
   218                           ; Clear objects allocated to BANK0 (71 bytes)
   219  000B1E  EE00  F060         	lfsr	0,__pbssBANK0
   220  000B22  0E47               	movlw	71
   221  000B24                     clear_4:
   222  000B24  6AEE               	clrf	postinc0,c
   223  000B26  06E8               	decf	wreg,f,c
   224  000B28  E1FD               	bnz	clear_4
   225                           
   226                           ; Clear objects allocated to COMRAM (30 bytes)
   227  000B2A  EE00  F026         	lfsr	0,__pbssCOMRAM
   228  000B2E  0E1E               	movlw	30
   229  000B30                     clear_5:
   230  000B30  6AEE               	clrf	postinc0,c
   231  000B32  06E8               	decf	wreg,f,c
   232  000B34  E1FD               	bnz	clear_5
   233  000B36                     end_of_initialization:
   234                           	opt stack 0
   235  000B36                     __end_of__initialization:
   236                           	opt stack 0
   237  000B36  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   238  000B38  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   239  000B3A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   240  000B3C  6EF8               	movwf	tblptru,c
   241  000B3E  0100               	movlb	0
   242  000B40  EF1C  F007         	goto	_main	;jump to C main() function
   243                           tblptru	equ	0xFF8
   244                           tblptrh	equ	0xFF7
   245                           tblptrl	equ	0xFF6
   246                           tablat	equ	0xFF5
   247                           postinc0	equ	0xFEE
   248                           wreg	equ	0xFE8
   249                           postdec1	equ	0xFE5
   250                           fsr1l	equ	0xFE1
   251                           
   252                           	psect	bssCOMRAM
   253  000026                     __pbssCOMRAM:
   254                           	opt stack 0
   255  000026                     _alignErrorCounter:
   256                           	opt stack 0
   257  000026                     	ds	2
   258  000028                     _crcErrorCounter:
   259                           	opt stack 0
   260  000028                     	ds	2
   261  00002A                     _group:
   262                           	opt stack 0
   263  00002A                     	ds	2
   264  00002C                     _receiveArrayAddress:
   265                           	opt stack 0
   266  00002C                     	ds	2
   267  00002E                     _sendStructAddress:
   268                           	opt stack 0
   269  00002E                     	ds	2
   270  000030                     _serial_available:
   271                           	opt stack 0
   272  000030                     	ds	2
   273  000032                     _serial_peek:
   274                           	opt stack 0
   275  000032                     	ds	2
   276  000034                     _serial_read:
   277                           	opt stack 0
   278  000034                     	ds	2
   279  000036                     _serial_write:
   280                           	opt stack 0
   281  000036                     	ds	2
   282  000038                     _timer0ReloadVal16bit:
   283                           	opt stack 0
   284  000038                     	ds	2
   285  00003A                     _AKNAKsend:
   286                           	opt stack 0
   287  00003A                     	ds	1
   288  00003B                     _ByteHigh:
   289                           	opt stack 0
   290  00003B                     	ds	1
   291  00003C                     _ByteLow:
   292                           	opt stack 0
   293  00003C                     	ds	1
   294  00003D                     _calc_CS:
   295                           	opt stack 0
   296  00003D                     	ds	1
   297  00003E                     _maxDataAddress:
   298                           	opt stack 0
   299  00003E                     	ds	1
   300  00003F                     _moduleAddress:
   301                           	opt stack 0
   302  00003F                     	ds	1
   303  000040                     _returnAddress:
   304                           	opt stack 0
   305  000040                     	ds	1
   306  000041                     _rx_address:
   307                           	opt stack 0
   308  000041                     	ds	1
   309  000042                     _rx_array_inx:
   310                           	opt stack 0
   311  000042                     	ds	1
   312  000043                     _rx_len:
   313                           	opt stack 0
   314  000043                     	ds	1
   315                           tblptru	equ	0xFF8
   316                           tblptrh	equ	0xFF7
   317                           tblptrl	equ	0xFF6
   318                           tablat	equ	0xFF5
   319                           postinc0	equ	0xFEE
   320                           wreg	equ	0xFE8
   321                           postdec1	equ	0xFE5
   322                           fsr1l	equ	0xFE1
   323                           
   324                           	psect	dataCOMRAM
   325  000044                     __pdataCOMRAM:
   326                           	opt stack 0
   327  000044                     _Transmit_stall:
   328                           	opt stack 0
   329  000044                     	ds	1
   330                           tblptru	equ	0xFF8
   331                           tblptrh	equ	0xFF7
   332                           tblptrl	equ	0xFF6
   333                           tablat	equ	0xFF5
   334                           postinc0	equ	0xFEE
   335                           wreg	equ	0xFE8
   336                           postdec1	equ	0xFE5
   337                           fsr1l	equ	0xFE1
   338                           
   339                           	psect	bssBANK0
   340  000060                     __pbssBANK0:
   341                           	opt stack 0
   342  000060                     _time:
   343                           	opt stack 0
   344  000060                     	ds	4
   345  000064                     cobs_decode@F198:
   346                           	opt stack 0
   347  000064                     	ds	3
   348  000067                     cobs_encode@F186:
   349                           	opt stack 0
   350  000067                     	ds	3
   351  00006A                     _addressErrorCounter:
   352                           	opt stack 0
   353  00006A                     	ds	2
   354  00006C                     _dataAdressErrorCounter:
   355                           	opt stack 0
   356  00006C                     	ds	2
   357  00006E                     _ProcessArray:
   358                           	opt stack 0
   359  00006E                     	ds	30
   360  00008C                     _crc_buffer:
   361                           	opt stack 0
   362  00008C                     	ds	17
   363  00009D                     _receiveArray:
   364                           	opt stack 0
   365  00009D                     	ds	10
   366                           tblptru	equ	0xFF8
   367                           tblptrh	equ	0xFF7
   368                           tblptrl	equ	0xFF6
   369                           tablat	equ	0xFF5
   370                           postinc0	equ	0xFEE
   371                           wreg	equ	0xFE8
   372                           postdec1	equ	0xFE5
   373                           fsr1l	equ	0xFE1
   374                           
   375                           	psect	dataBANK0
   376  0000C1                     __pdataBANK0:
   377                           	opt stack 0
   378  0000C1                     _COBS_DECODE_DST_BUF_LEN_MAX:
   379                           	opt stack 0
   380  0000C1                     	ds	2
   381  0000C3                     _COBS_ENCODE_DST_BUF_LEN_MAX:
   382                           	opt stack 0
   383  0000C3                     	ds	2
   384                           tblptru	equ	0xFF8
   385                           tblptrh	equ	0xFF7
   386                           tblptrl	equ	0xFF6
   387                           tablat	equ	0xFF5
   388                           postinc0	equ	0xFEE
   389                           wreg	equ	0xFE8
   390                           postdec1	equ	0xFE5
   391                           fsr1l	equ	0xFE1
   392                           
   393                           	psect	bssBANK1
   394  000100                     __pbssBANK1:
   395                           	opt stack 0
   396  000100                     _input_buffer:
   397                           	opt stack 0
   398  000100                     	ds	206
   399  0001CE                     _ReciveArray:
   400                           	opt stack 0
   401  0001CE                     	ds	30
   402                           tblptru	equ	0xFF8
   403                           tblptrh	equ	0xFF7
   404                           tblptrl	equ	0xFF6
   405                           tablat	equ	0xFF5
   406                           postinc0	equ	0xFEE
   407                           wreg	equ	0xFE8
   408                           postdec1	equ	0xFE5
   409                           fsr1l	equ	0xFE1
   410                           
   411                           	psect	bssBANK2
   412  000200                     __pbssBANK2:
   413                           	opt stack 0
   414  000200                     _output_buffer:
   415                           	opt stack 0
   416  000200                     	ds	206
   417                           tblptru	equ	0xFF8
   418                           tblptrh	equ	0xFF7
   419                           tblptrl	equ	0xFF6
   420                           tablat	equ	0xFF5
   421                           postinc0	equ	0xFEE
   422                           wreg	equ	0xFE8
   423                           postdec1	equ	0xFE5
   424                           fsr1l	equ	0xFE1
   425                           
   426                           	psect	bssBANK3
   427  000300                     __pbssBANK3:
   428                           	opt stack 0
   429  000300                     _ring_buffer:
   430                           	opt stack 0
   431  000300                     	ds	206
   432                           tblptru	equ	0xFF8
   433                           tblptrh	equ	0xFF7
   434                           tblptrl	equ	0xFF6
   435                           tablat	equ	0xFF5
   436                           postinc0	equ	0xFEE
   437                           wreg	equ	0xFE8
   438                           postdec1	equ	0xFE5
   439                           fsr1l	equ	0xFE1
   440                           
   441                           	psect	bssBANK4
   442  000400                     __pbssBANK4:
   443                           	opt stack 0
   444  000400                     _rx_buffer:
   445                           	opt stack 0
   446  000400                     	ds	200
   447                           tblptru	equ	0xFF8
   448                           tblptrh	equ	0xFF7
   449                           tblptrl	equ	0xFF6
   450                           tablat	equ	0xFF5
   451                           postinc0	equ	0xFEE
   452                           wreg	equ	0xFE8
   453                           postdec1	equ	0xFE5
   454                           fsr1l	equ	0xFE1
   455                           
   456                           	psect	cstackBANK5
   457  000500                     __pcstackBANK5:
   458                           	opt stack 0
   459  000500                     sendData@COBSArray:
   460                           	opt stack 0
   461                           
   462                           ; 30 bytes @ 0x0
   463  000500                     	ds	30
   464  00051E                     sendData@SendArray:
   465                           	opt stack 0
   466                           
   467                           ; 30 bytes @ 0x1E
   468  00051E                     	ds	30
   469  00053C                     sendData@whereToSend:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x3C
   473  00053C                     	ds	1
   474  00053D                     sendData@DataLenth:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0x3D
   478  00053D                     	ds	1
   479  00053E                     sendData@CS:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x3E
   483  00053E                     	ds	1
   484  00053F                     sendData@result:
   485                           	opt stack 0
   486                           
   487                           ; 3 bytes @ 0x3F
   488  00053F                     	ds	3
   489  000542                     sendData@i:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x42
   493  000542                     	ds	2
   494  000544                     sendData@count:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x44
   498  000544                     	ds	2
   499                           tblptru	equ	0xFF8
   500                           tblptrh	equ	0xFF7
   501                           tblptrl	equ	0xFF6
   502                           tablat	equ	0xFF5
   503                           postinc0	equ	0xFEE
   504                           wreg	equ	0xFE8
   505                           postdec1	equ	0xFE5
   506                           fsr1l	equ	0xFE1
   507                           
   508                           	psect	cstackBANK0
   509  0000A7                     __pcstackBANK0:
   510                           	opt stack 0
   511  0000A7                     Send_put@_data:
   512                           	opt stack 0
   513  0000A7                     begin@ptr:
   514                           	opt stack 0
   515  0000A7                     cobs_encode@src_end_ptr:
   516                           	opt stack 0
   517  0000A7                     cobs_decode@src_end_ptr:
   518                           	opt stack 0
   519                           
   520                           ; 2 bytes @ 0x0
   521  0000A7                     	ds	2
   522  0000A9                     begin@maxSize:
   523                           	opt stack 0
   524  0000A9                     cobs_encode@src_byte:
   525                           	opt stack 0
   526  0000A9                     cobs_decode@dst_buf_end_ptr:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x2
   530  0000A9                     	ds	1
   531  0000AA                     begin@givenAddress:
   532                           	opt stack 0
   533  0000AA                     cobs_encode@dst_buf_end_ptr:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x3
   537  0000AA                     	ds	1
   538  0000AB                     begin@error:
   539                           	opt stack 0
   540  0000AB                     cobs_decode@src_byte:
   541                           	opt stack 0
   542                           
   543                           ; 1 bytes @ 0x4
   544  0000AB                     	ds	1
   545  0000AC                     cobs_encode@search_len:
   546                           	opt stack 0
   547  0000AC                     cobs_decode@i:
   548                           	opt stack 0
   549  0000AC                     begin@stufftosend:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x5
   553  0000AC                     	ds	1
   554  0000AD                     cobs_encode@dst_code_write_ptr:
   555                           	opt stack 0
   556  0000AD                     cobs_decode@remaining_bytes:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x6
   560  0000AD                     	ds	1
   561  0000AE                     begin@stufftoreceive:
   562                           	opt stack 0
   563                           
   564                           ; 2 bytes @ 0x7
   565  0000AE                     	ds	1
   566  0000AF                     cobs_encode@dst_write_ptr:
   567                           	opt stack 0
   568  0000AF                     cobs_decode@dst_write_ptr:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x8
   572  0000AF                     	ds	1
   573  0000B0                     begin@stuffavailable:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x9
   577  0000B0                     	ds	1
   578  0000B1                     cobs_decode@len_code:
   579                           	opt stack 0
   580  0000B1                     cobs_encode@result:
   581                           	opt stack 0
   582                           
   583                           ; 3 bytes @ 0xA
   584  0000B1                     	ds	1
   585  0000B2                     begin@stuffpeek:
   586                           	opt stack 0
   587  0000B2                     cobs_decode@result:
   588                           	opt stack 0
   589                           
   590                           ; 3 bytes @ 0xB
   591  0000B2                     	ds	2
   592  0000B4                     sendData@ComandByte:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0xD
   596  0000B4                     	ds	1
   597  0000B5                     ??_receiveData:
   598  0000B5                     sendData@DataTable:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0xE
   602  0000B5                     	ds	1
   603  0000B6                     sendData@DataTableIndex:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0xF
   607  0000B6                     	ds	1
   608  0000B7                     ??_sendData:
   609                           
   610                           ; 1 bytes @ 0x10
   611  0000B7                     	ds	3
   612  0000BA                     receiveData@CS:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x13
   616  0000BA                     	ds	1
   617  0000BB                     receiveData@result:
   618                           	opt stack 0
   619                           
   620                           ; 3 bytes @ 0x14
   621  0000BB                     	ds	3
   622  0000BE                     receiveData@i:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x17
   626  0000BE                     	ds	2
   627  0000C0                     receiveData@Data:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x19
   631  0000C0                     	ds	1
   632                           tblptru	equ	0xFF8
   633                           tblptrh	equ	0xFF7
   634                           tblptrl	equ	0xFF6
   635                           tablat	equ	0xFF5
   636                           postinc0	equ	0xFEE
   637                           wreg	equ	0xFE8
   638                           postdec1	equ	0xFE5
   639                           fsr1l	equ	0xFE1
   640                           
   641                           	psect	cstackCOMRAM
   642  000001                     __pcstackCOMRAM:
   643                           	opt stack 0
   644  000001                     ?i2_UART_buff_size:
   645                           	opt stack 0
   646  000001                     ?i2_UART_buff_modulo_inc:
   647                           	opt stack 0
   648  000001                     i2UART_buff_size@_this:
   649                           	opt stack 0
   650  000001                     i2UART_buff_modulo_inc@value:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0x0
   654  000001                     	ds	2
   655  000003                     i2UART_buff_modulo_inc@modulus:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x2
   659  000003                     	ds	2
   660  000005                     i2UART_buff_modulo_inc@my_value:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x4
   664  000005                     	ds	2
   665  000007                     i2UART_buff_put@_this:
   666                           	opt stack 0
   667  000007                     i2UART_buff_get@_this:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0x6
   671  000007                     	ds	2
   672  000009                     ??i2_UART_buff_get:
   673  000009                     i2UART_buff_put@c:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0x8
   677  000009                     	ds	1
   678  00000A                     ??i2_UART_buff_put:
   679                           
   680                           ; 1 bytes @ 0x9
   681  00000A                     	ds	1
   682  00000B                     i2UART_buff_get@c:
   683                           	opt stack 0
   684                           
   685                           ; 1 bytes @ 0xA
   686  00000B                     	ds	1
   687  00000C                     EUSART1_Receive_ISR@data:
   688                           	opt stack 0
   689                           
   690                           ; 1 bytes @ 0xB
   691  00000C                     	ds	1
   692  00000D                     ??_INTERRUPT_InterruptManager:
   693                           
   694                           ; 1 bytes @ 0xC
   695  00000D                     	ds	14
   696  00001B                     ??_ReadFaults:
   697  00001B                     ?_UART_buff_modulo_inc:
   698                           	opt stack 0
   699  00001B                     ?_UART_buff_size:
   700                           	opt stack 0
   701  00001B                     ?_cobs_encode:
   702                           	opt stack 0
   703  00001B                     ?_cobs_decode:
   704                           	opt stack 0
   705  00001B                     GetFaults@num:
   706                           	opt stack 0
   707  00001B                     CRC8@data:
   708                           	opt stack 0
   709  00001B                     UART_buff_size@_this:
   710                           	opt stack 0
   711  00001B                     UART_buff_modulo_inc@value:
   712                           	opt stack 0
   713  00001B                     Delay@wait:
   714                           	opt stack 0
   715  00001B                     cobs_encode@dst_buf_ptr:
   716                           	opt stack 0
   717  00001B                     cobs_decode@dst_buf_ptr:
   718                           	opt stack 0
   719  00001B                     memset@p1:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x1A
   723  00001B                     	ds	2
   724  00001D                     ??_Delay:
   725  00001D                     ?_Receive_available:
   726                           	opt stack 0
   727  00001D                     CRC8@len:
   728                           	opt stack 0
   729  00001D                     UART_buff_modulo_inc@modulus:
   730                           	opt stack 0
   731  00001D                     cobs_encode@dst_buf_len:
   732                           	opt stack 0
   733  00001D                     cobs_decode@dst_buf_len:
   734                           	opt stack 0
   735  00001D                     memset@c:
   736                           	opt stack 0
   737                           
   738                           ; 2 bytes @ 0x1C
   739  00001D                     	ds	1
   740  00001E                     CRC8@sum:
   741                           	opt stack 0
   742  00001E                     Delay@x:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0x1D
   746  00001E                     	ds	1
   747  00001F                     CRC8@extract:
   748                           	opt stack 0
   749  00001F                     UART_buff_modulo_inc@my_value:
   750                           	opt stack 0
   751  00001F                     cobs_encode@src_ptr:
   752                           	opt stack 0
   753  00001F                     cobs_decode@src_ptr:
   754                           	opt stack 0
   755  00001F                     memset@n:
   756                           	opt stack 0
   757                           
   758                           ; 2 bytes @ 0x1E
   759  00001F                     	ds	1
   760  000020                     CRC8@tempI:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0x1F
   764  000020                     	ds	1
   765  000021                     CRC8@crc:
   766                           	opt stack 0
   767  000021                     UART_buff_put@_this:
   768                           	opt stack 0
   769  000021                     UART_buff_get@_this:
   770                           	opt stack 0
   771  000021                     cobs_encode@src_len:
   772                           	opt stack 0
   773  000021                     cobs_decode@src_len:
   774                           	opt stack 0
   775  000021                     memset@p:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0x20
   779  000021                     	ds	2
   780  000023                     ??_cobs_encode:
   781  000023                     ??_cobs_decode:
   782  000023                     ??_UART_buff_get:
   783  000023                     UART_buff_put@c:
   784                           	opt stack 0
   785  000023                     UART_buff_init@_this:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0x22
   789  000023                     	ds	1
   790  000024                     ??_UART_buff_put:
   791                           
   792                           ; 1 bytes @ 0x23
   793  000024                     	ds	1
   794  000025                     UART_buff_get@c:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0x24
   798  000025                     	ds	1
   799  000026                     tblptru	equ	0xFF8
   800                           tblptrh	equ	0xFF7
   801                           tblptrl	equ	0xFF6
   802                           tablat	equ	0xFF5
   803                           postinc0	equ	0xFEE
   804                           wreg	equ	0xFE8
   805                           postdec1	equ	0xFE5
   806                           fsr1l	equ	0xFE1
   807                           
   808                           ; 1 bytes @ 0x25
   809 ;;
   810 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   811 ;;
   812 ;; *************** function _main *****************
   813 ;; Defined at:
   814 ;;		line 23 in file "Main.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;		None
   819 ;; Return value:  Size  Location     Type
   820 ;;                  1    wreg      void 
   821 ;; Registers used:
   822 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   828 ;;      Params:         0       0       0       0       0       0       0
   829 ;;      Locals:         0       0       0       0       0       0       0
   830 ;;      Temps:          0       0       0       0       0       0       0
   831 ;;      Totals:         0       0       0       0       0       0       0
   832 ;;Total ram usage:        0 bytes
   833 ;; Hardware stack levels required when called:   10
   834 ;; This function calls:
   835 ;;		_ReadFaults
   836 ;;		_SetTime
   837 ;;		_Start
   838 ;;		_updateComms
   839 ;; This function is called by:
   840 ;;		Startup code after reset
   841 ;; This function uses a non-reentrant model
   842 ;;
   843                           
   844                           	psect	text0
   845  000E38                     __ptext0:
   846                           	opt stack 0
   847  000E38                     _main:
   848                           	opt stack 21
   849                           
   850                           ;Main.c: 24: Start();
   851                           
   852                           ;incstack = 0
   853  000E38  ECCE  F005         	call	_Start	;wreg free
   854                           
   855                           ;Main.c: 25: LATDbits.LATD4 = 0;
   856  000E3C  988C               	bcf	3980,4,c	;volatile
   857  000E3E                     l2761:
   858                           
   859                           ;Main.c: 27: updateComms();
   860  000E3E  EC6A  F007         	call	_updateComms	;wreg free
   861                           
   862                           ;Main.c: 28: if(PORTCbits.RC2 == 1){
   863  000E42  A482               	btfss	3970,2,c	;volatile
   864  000E44  D7FC               	goto	l2761
   865                           
   866                           ;Main.c: 30: ReadFaults();
   867  000E46  EC5E  F004         	call	_ReadFaults	;wreg free
   868                           
   869                           ;Main.c: 31: SetTime();
   870  000E4A  EC60  F007         	call	_SetTime	;wreg free
   871                           
   872                           ;Main.c: 33: else{
   873                           
   874                           ;Main.c: 32: }
   875  000E4E  D7F7               	goto	l2761
   876  000E50                     __end_of_main:
   877                           	opt stack 0
   878                           tblptru	equ	0xFF8
   879                           tblptrh	equ	0xFF7
   880                           tblptrl	equ	0xFF6
   881                           tablat	equ	0xFF5
   882                           postinc0	equ	0xFEE
   883                           wreg	equ	0xFE8
   884                           postdec1	equ	0xFE5
   885                           fsr1l	equ	0xFE1
   886                           
   887 ;; *************** function _updateComms *****************
   888 ;; Defined at:
   889 ;;		line 17 in file "Communications.c"
   890 ;; Parameters:    Size  Location     Type
   891 ;;		None
   892 ;; Auto vars:     Size  Location     Type
   893 ;;		None
   894 ;; Return value:  Size  Location     Type
   895 ;;                  1    wreg      void 
   896 ;; Registers used:
   897 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   898 ;; Tracked objects:
   899 ;;		On entry : 0/0
   900 ;;		On exit  : 0/0
   901 ;;		Unchanged: 0/0
   902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   903 ;;      Params:         0       0       0       0       0       0       0
   904 ;;      Locals:         0       0       0       0       0       0       0
   905 ;;      Temps:          0       0       0       0       0       0       0
   906 ;;      Totals:         0       0       0       0       0       0       0
   907 ;;Total ram usage:        0 bytes
   908 ;; Hardware stack levels used:    1
   909 ;; Hardware stack levels required when called:    9
   910 ;; This function calls:
   911 ;;		_receiveData
   912 ;;		_respondECU
   913 ;; This function is called by:
   914 ;;		_main
   915 ;; This function uses a non-reentrant model
   916 ;;
   917                           
   918                           	psect	text1
   919  000ED4                     __ptext1:
   920                           	opt stack 0
   921  000ED4                     _updateComms:
   922                           	opt stack 21
   923                           
   924                           ;Communications.c: 18: if (receiveData()) {
   925                           
   926                           ;incstack = 0
   927  000ED4  ECE6  F003         	call	_receiveData	;wreg free
   928  000ED8  0900               	iorlw	0
   929  000EDA  B4D8               	btfsc	status,2,c
   930  000EDC  0012               	return	
   931                           
   932                           ;Communications.c: 19: respondECU();
   933  000EDE  EC3C  F006         	call	_respondECU	;wreg free
   934  000EE2  0012               	return	
   935  000EE4                     __end_of_updateComms:
   936                           	opt stack 0
   937                           tblptru	equ	0xFF8
   938                           tblptrh	equ	0xFF7
   939                           tblptrl	equ	0xFF6
   940                           tablat	equ	0xFF5
   941                           postinc0	equ	0xFEE
   942                           wreg	equ	0xFE8
   943                           postdec1	equ	0xFE5
   944                           fsr1l	equ	0xFE1
   945                           status	equ	0xFD8
   946                           
   947 ;; *************** function _respondECU *****************
   948 ;; Defined at:
   949 ;;		line 23 in file "Communications.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;		None
   952 ;; Auto vars:     Size  Location     Type
   953 ;;		None
   954 ;; Return value:  Size  Location     Type
   955 ;;                  1    wreg      void 
   956 ;; Registers used:
   957 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   958 ;; Tracked objects:
   959 ;;		On entry : 0/0
   960 ;;		On exit  : 0/0
   961 ;;		Unchanged: 0/0
   962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   963 ;;      Params:         0       0       0       0       0       0       0
   964 ;;      Locals:         0       0       0       0       0       0       0
   965 ;;      Temps:          0       0       0       0       0       0       0
   966 ;;      Totals:         0       0       0       0       0       0       0
   967 ;;Total ram usage:        0 bytes
   968 ;; Hardware stack levels used:    1
   969 ;; Hardware stack levels required when called:    8
   970 ;; This function calls:
   971 ;;		_Delay
   972 ;;		_sendData
   973 ;; This function is called by:
   974 ;;		_updateComms
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           	psect	text2
   979  000C78                     __ptext2:
   980                           	opt stack 0
   981  000C78                     _respondECU:
   982                           	opt stack 21
   983                           
   984                           ;Communications.c: 24: LATDbits.LATD4 = 1;
   985                           
   986                           ;incstack = 0
   987  000C78  888C               	bsf	3980,4,c	;volatile
   988                           
   989                           ;Communications.c: 25: Delay(5);
   990  000C7A  0E00               	movlw	0
   991  000C7C  6E1C               	movwf	Delay@wait+1,c
   992  000C7E  0E05               	movlw	5
   993  000C80  6E1B               	movwf	Delay@wait,c
   994  000C82  EC57  F006         	call	_Delay	;wreg free
   995                           
   996                           ;Communications.c: 26: sendData(1, 1, 1, 1);
   997  000C86  0E01               	movlw	1
   998  000C88  0100               	movlb	0	; () banked
   999  000C8A  6FB4               	movwf	sendData@ComandByte& (0+255),b
  1000  000C8C  0E01               	movlw	1
  1001  000C8E  0100               	movlb	0	; () banked
  1002  000C90  6FB5               	movwf	sendData@DataTable& (0+255),b
  1003  000C92  0E01               	movlw	1
  1004  000C94  0100               	movlb	0	; () banked
  1005  000C96  6FB6               	movwf	sendData@DataTableIndex& (0+255),b
  1006  000C98  0E01               	movlw	1
  1007  000C9A  EC31  F001         	call	_sendData
  1008                           
  1009                           ;Communications.c: 27: Delay(3);
  1010  000C9E  0E00               	movlw	0
  1011  000CA0  6E1C               	movwf	Delay@wait+1,c
  1012  000CA2  0E03               	movlw	3
  1013  000CA4  6E1B               	movwf	Delay@wait,c
  1014  000CA6  EC57  F006         	call	_Delay	;wreg free
  1015                           
  1016                           ;Communications.c: 28: LATDbits.LATD4 = 0;
  1017  000CAA  988C               	bcf	3980,4,c	;volatile
  1018  000CAC  0012               	return		;funcret
  1019  000CAE                     __end_of_respondECU:
  1020                           	opt stack 0
  1021                           tblptru	equ	0xFF8
  1022                           tblptrh	equ	0xFF7
  1023                           tblptrl	equ	0xFF6
  1024                           tablat	equ	0xFF5
  1025                           postinc0	equ	0xFEE
  1026                           wreg	equ	0xFE8
  1027                           postdec1	equ	0xFE5
  1028                           fsr1l	equ	0xFE1
  1029                           status	equ	0xFD8
  1030                           
  1031 ;; *************** function _sendData *****************
  1032 ;; Defined at:
  1033 ;;		line 112 in file "FastTransfer.c"
  1034 ;; Parameters:    Size  Location     Type
  1035 ;;  whereToSend     1    wreg     unsigned char 
  1036 ;;  ComandByte      1   13[BANK0 ] unsigned char 
  1037 ;;  DataTable       1   14[BANK0 ] unsigned char 
  1038 ;;  DataTableInd    1   15[BANK0 ] unsigned char 
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;  whereToSend     1   60[BANK5 ] unsigned char 
  1041 ;;  SendArray      30   30[BANK5 ] unsigned char [30]
  1042 ;;  COBSArray      30    0[BANK5 ] unsigned char [30]
  1043 ;;  result          3   63[BANK5 ] struct .
  1044 ;;  count           2   68[BANK5 ] int 
  1045 ;;  i               2   66[BANK5 ] int 
  1046 ;;  CS              1   62[BANK5 ] unsigned char 
  1047 ;;  DataLenth       1   61[BANK5 ] unsigned char 
  1048 ;; Return value:  Size  Location     Type
  1049 ;;                  1    wreg      void 
  1050 ;; Registers used:
  1051 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1052 ;; Tracked objects:
  1053 ;;		On entry : 0/0
  1054 ;;		On exit  : 0/0
  1055 ;;		Unchanged: 0/0
  1056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1057 ;;      Params:         0       3       0       0       0       0       0
  1058 ;;      Locals:         0       0       0       0       0       0      70
  1059 ;;      Temps:          0       4       0       0       0       0       0
  1060 ;;      Totals:         0       7       0       0       0       0      70
  1061 ;;Total ram usage:       77 bytes
  1062 ;; Hardware stack levels used:    1
  1063 ;; Hardware stack levels required when called:    7
  1064 ;; This function calls:
  1065 ;;		_CRC8
  1066 ;;		_GetFaults
  1067 ;;		_Send_put
  1068 ;;		_cobs_encode
  1069 ;; This function is called by:
  1070 ;;		_respondECU
  1071 ;; This function uses a non-reentrant model
  1072 ;;
  1073                           
  1074                           	psect	text3
  1075  000262                     __ptext3:
  1076                           	opt stack 0
  1077  000262                     _sendData:
  1078                           	opt stack 21
  1079                           
  1080                           ;incstack = 0
  1081                           ;sendData@whereToSend stored from wreg
  1082  000262  0105               	movlb	5	; () banked
  1083  000264  6F3C               	movwf	sendData@whereToSend& (0+255),b
  1084                           
  1085                           ;FastTransfer.c: 117: unsigned char SendArray[30];
  1086                           ;FastTransfer.c: 118: unsigned char COBSArray[30];
  1087                           ;FastTransfer.c: 120: unsigned char DataLenth = 1;
  1088  000266  0E01               	movlw	1
  1089  000268  0105               	movlb	5	; () banked
  1090  00026A  6F3D               	movwf	sendData@DataLenth& (0+255),b
  1091                           
  1092                           ;FastTransfer.c: 122: cobs_encode_result result;
  1093                           ;FastTransfer.c: 126: SendArray[0] = 4+1;
  1094  00026C  0E05               	movlw	5
  1095  00026E  0105               	movlb	5	; () banked
  1096  000270  6F1E               	movwf	sendData@SendArray& (0+255),b
  1097                           
  1098                           ; BSR set to: 5
  1099                           ;FastTransfer.c: 127: SendArray[1] = ComandByte;
  1100  000272  C0B4  F51F         	movff	sendData@ComandByte,sendData@SendArray+1
  1101                           
  1102                           ; BSR set to: 5
  1103                           ;FastTransfer.c: 128: SendArray[2] = DataTable;
  1104  000276  C0B5  F520         	movff	sendData@DataTable,sendData@SendArray+2
  1105                           
  1106                           ; BSR set to: 5
  1107                           ;FastTransfer.c: 129: SendArray[3] = DataTableIndex;
  1108  00027A  C0B6  F521         	movff	sendData@DataTableIndex,sendData@SendArray+3
  1109                           
  1110                           ; BSR set to: 5
  1111                           ;FastTransfer.c: 130: SendArray[4] = DataLenth;
  1112  00027E  C53D  F522         	movff	sendData@DataLenth,sendData@SendArray+4
  1113                           
  1114                           ;FastTransfer.c: 135: int i;
  1115                           ;FastTransfer.c: 136: int count = 5;
  1116  000282  0E00               	movlw	0
  1117  000284  0105               	movlb	5	; () banked
  1118  000286  6F45               	movwf	(sendData@count+1)& (0+255),b
  1119  000288  0E05               	movlw	5
  1120  00028A  6F44               	movwf	sendData@count& (0+255),b
  1121                           
  1122                           ; BSR set to: 5
  1123                           ;FastTransfer.c: 137: i = count;
  1124  00028C  C544  F542         	movff	sendData@count,sendData@i
  1125  000290  C545  F543         	movff	sendData@count+1,sendData@i+1
  1126                           
  1127                           ; BSR set to: 5
  1128                           ;FastTransfer.c: 139: SendArray[count] = GetFaults(0);
  1129  000294  0E1E               	movlw	low sendData@SendArray
  1130  000296  0105               	movlb	5	; () banked
  1131  000298  2544               	addwf	sendData@count& (0+255),w,b
  1132  00029A  6ED9               	movwf	fsr2l,c
  1133  00029C  0E05               	movlw	high sendData@SendArray
  1134  00029E  0105               	movlb	5	; () banked
  1135  0002A0  2145               	addwfc	(sendData@count+1)& (0+255),w,b
  1136  0002A2  6EDA               	movwf	fsr2h,c
  1137  0002A4  0E00               	movlw	0
  1138  0002A6  EC34  F007         	call	_GetFaults
  1139  0002AA  6EDF               	movwf	indf2,c
  1140                           
  1141                           ;FastTransfer.c: 140: count++;
  1142  0002AC  0105               	movlb	5	; () banked
  1143  0002AE  4B44               	infsnz	sendData@count& (0+255),f,b
  1144  0002B0  2B45               	incf	(sendData@count+1)& (0+255),f,b
  1145                           
  1146                           ; BSR set to: 5
  1147                           ;FastTransfer.c: 141: SendArray[count] = GetFaults(1);
  1148  0002B2  0E1E               	movlw	low sendData@SendArray
  1149  0002B4  0105               	movlb	5	; () banked
  1150  0002B6  2544               	addwf	sendData@count& (0+255),w,b
  1151  0002B8  6ED9               	movwf	fsr2l,c
  1152  0002BA  0E05               	movlw	high sendData@SendArray
  1153  0002BC  0105               	movlb	5	; () banked
  1154  0002BE  2145               	addwfc	(sendData@count+1)& (0+255),w,b
  1155  0002C0  6EDA               	movwf	fsr2h,c
  1156  0002C2  0E01               	movlw	1
  1157  0002C4  EC34  F007         	call	_GetFaults
  1158  0002C8  6EDF               	movwf	indf2,c
  1159                           
  1160                           ;FastTransfer.c: 144: unsigned char CS = CRC8(SendArray, count);
  1161  0002CA  0E1E               	movlw	low sendData@SendArray
  1162  0002CC  6E1B               	movwf	CRC8@data,c
  1163  0002CE  0E05               	movlw	high sendData@SendArray
  1164  0002D0  6E1C               	movwf	CRC8@data+1,c
  1165  0002D2  C544  F01D         	movff	sendData@count,CRC8@len
  1166  0002D6  ECF9  F005         	call	_CRC8	;wreg free
  1167  0002DA  0105               	movlb	5	; () banked
  1168  0002DC  6F3E               	movwf	sendData@CS& (0+255),b
  1169                           
  1170                           ; BSR set to: 5
  1171                           ;FastTransfer.c: 148: SendArray[count++] = (CS);
  1172  0002DE  0E1E               	movlw	low sendData@SendArray
  1173  0002E0  0105               	movlb	5	; () banked
  1174  0002E2  2544               	addwf	sendData@count& (0+255),w,b
  1175  0002E4  6ED9               	movwf	fsr2l,c
  1176  0002E6  0E05               	movlw	high sendData@SendArray
  1177  0002E8  0105               	movlb	5	; () banked
  1178  0002EA  2145               	addwfc	(sendData@count+1)& (0+255),w,b
  1179  0002EC  6EDA               	movwf	fsr2h,c
  1180  0002EE  C53E  FFDF         	movff	sendData@CS,indf2
  1181                           
  1182                           ; BSR set to: 5
  1183  0002F2  0105               	movlb	5	; () banked
  1184  0002F4  4B44               	infsnz	sendData@count& (0+255),f,b
  1185  0002F6  2B45               	incf	(sendData@count+1)& (0+255),f,b
  1186                           
  1187                           ; BSR set to: 5
  1188                           ;FastTransfer.c: 150: result = cobs_encode(COBSArray, sizeof(COBSArray), SendArray, coun
      +                          t);
  1189  0002F8  0E00               	movlw	low sendData@COBSArray
  1190  0002FA  6E1B               	movwf	cobs_encode@dst_buf_ptr,c
  1191  0002FC  0E05               	movlw	high sendData@COBSArray
  1192  0002FE  6E1C               	movwf	cobs_encode@dst_buf_ptr+1,c
  1193  000300  0E00               	movlw	0
  1194  000302  6E1E               	movwf	cobs_encode@dst_buf_len+1,c
  1195  000304  0E1E               	movlw	30
  1196  000306  6E1D               	movwf	cobs_encode@dst_buf_len,c
  1197  000308  0E1E               	movlw	low sendData@SendArray
  1198  00030A  6E1F               	movwf	cobs_encode@src_ptr,c
  1199  00030C  0E05               	movlw	high sendData@SendArray
  1200  00030E  6E20               	movwf	cobs_encode@src_ptr+1,c
  1201  000310  C544  F021         	movff	sendData@count,cobs_encode@src_len
  1202  000314  C545  F022         	movff	sendData@count+1,cobs_encode@src_len+1
  1203  000318  EC00  F002         	call	_cobs_encode	;wreg free
  1204  00031C  C01B  F53F         	movff	?_cobs_encode,sendData@result
  1205  000320  C01C  F540         	movff	?_cobs_encode+1,sendData@result+1
  1206  000324  C01D  F541         	movff	?_cobs_encode+2,sendData@result+2
  1207                           
  1208                           ;FastTransfer.c: 152: SendArray[0] = whereToSend;
  1209  000328  C53C  F51E         	movff	sendData@whereToSend,sendData@SendArray
  1210                           
  1211                           ;FastTransfer.c: 154: for(i = 1;i<result.out_len+1;i++){
  1212  00032C  0E00               	movlw	0
  1213  00032E  0105               	movlb	5	; () banked
  1214  000330  6F43               	movwf	(sendData@i+1)& (0+255),b
  1215  000332  0E01               	movlw	1
  1216  000334  6F42               	movwf	sendData@i& (0+255),b
  1217  000336  D027               	goto	l2565
  1218  000338                     l2561:
  1219                           
  1220                           ; BSR set to: 5
  1221                           ;FastTransfer.c: 155: SendArray[i] = COBSArray[i-1];
  1222  000338  0EFF               	movlw	255
  1223  00033A  0100               	movlb	0	; () banked
  1224  00033C  6FB7               	movwf	??_sendData& (0+255),b
  1225  00033E  0EFF               	movlw	255
  1226  000340  0100               	movlb	0	; () banked
  1227  000342  6FB8               	movwf	(??_sendData+1)& (0+255),b
  1228  000344  C542  F0B9         	movff	sendData@i,??_sendData+2
  1229  000348  C543  F0BA         	movff	sendData@i+1,??_sendData+3
  1230  00034C  0100               	movlb	0	; () banked
  1231  00034E  51B7               	movf	??_sendData& (0+255),w,b
  1232  000350  0100               	movlb	0	; () banked
  1233  000352  27B9               	addwf	(??_sendData+2)& (0+255),f,b
  1234  000354  0100               	movlb	0	; () banked
  1235  000356  51B8               	movf	(??_sendData+1)& (0+255),w,b
  1236  000358  0100               	movlb	0	; () banked
  1237  00035A  23BA               	addwfc	(??_sendData+3)& (0+255),f,b
  1238  00035C  0E00               	movlw	low sendData@COBSArray
  1239  00035E  0100               	movlb	0	; () banked
  1240  000360  25B9               	addwf	(??_sendData+2)& (0+255),w,b
  1241  000362  6ED9               	movwf	fsr2l,c
  1242  000364  0E05               	movlw	high sendData@COBSArray
  1243  000366  0100               	movlb	0	; () banked
  1244  000368  21BA               	addwfc	(??_sendData+3)& (0+255),w,b
  1245  00036A  6EDA               	movwf	fsr2h,c
  1246  00036C  0E1E               	movlw	low sendData@SendArray
  1247  00036E  0105               	movlb	5	; () banked
  1248  000370  2542               	addwf	sendData@i& (0+255),w,b
  1249  000372  6EE1               	movwf	fsr1l,c
  1250  000374  0E05               	movlw	high sendData@SendArray
  1251  000376  0105               	movlb	5	; () banked
  1252  000378  2143               	addwfc	(sendData@i+1)& (0+255),w,b
  1253  00037A  6EE2               	movwf	fsr1h,c
  1254  00037C  CFDF FFE7          	movff	indf2,indf1
  1255                           
  1256                           ; BSR set to: 5
  1257  000380  0105               	movlb	5	; () banked
  1258  000382  4B42               	infsnz	sendData@i& (0+255),f,b
  1259  000384  2B43               	incf	(sendData@i+1)& (0+255),f,b
  1260  000386                     l2565:
  1261                           
  1262                           ; BSR set to: 5
  1263  000386  0E01               	movlw	1
  1264  000388  0105               	movlb	5	; () banked
  1265  00038A  253F               	addwf	sendData@result& (0+255),w,b
  1266  00038C  0100               	movlb	0	; () banked
  1267  00038E  6FB7               	movwf	??_sendData& (0+255),b
  1268  000390  0E00               	movlw	0
  1269  000392  0105               	movlb	5	; () banked
  1270  000394  2140               	addwfc	(sendData@result+1)& (0+255),w,b
  1271  000396  0100               	movlb	0	; () banked
  1272  000398  6FB8               	movwf	(??_sendData+1)& (0+255),b
  1273  00039A  0100               	movlb	0	; () banked
  1274  00039C  51B7               	movf	??_sendData& (0+255),w,b
  1275  00039E  0105               	movlb	5	; () banked
  1276  0003A0  5D42               	subwf	sendData@i& (0+255),w,b
  1277  0003A2  0100               	movlb	0	; () banked
  1278  0003A4  51B8               	movf	(??_sendData+1)& (0+255),w,b
  1279  0003A6  0105               	movlb	5	; () banked
  1280  0003A8  5943               	subwfb	(sendData@i+1)& (0+255),w,b
  1281  0003AA  A0D8               	btfss	status,0,c
  1282  0003AC  D7C5               	goto	l2561
  1283                           
  1284                           ; BSR set to: 5
  1285                           ;FastTransfer.c: 156: }
  1286                           ;FastTransfer.c: 158: for(i = 0;i<result.out_len+2;i++){
  1287                           
  1288                           ; BSR set to: 5
  1289  0003AE  0E00               	movlw	0
  1290  0003B0  0105               	movlb	5	; () banked
  1291  0003B2  6F43               	movwf	(sendData@i+1)& (0+255),b
  1292  0003B4  0E00               	movlw	0
  1293  0003B6  6F42               	movwf	sendData@i& (0+255),b
  1294  0003B8  D00E               	goto	l2573
  1295  0003BA                     l2569:
  1296                           
  1297                           ; BSR set to: 5
  1298                           ;FastTransfer.c: 159: Send_put(SendArray[i]);
  1299  0003BA  0E1E               	movlw	low sendData@SendArray
  1300  0003BC  0105               	movlb	5	; () banked
  1301  0003BE  2542               	addwf	sendData@i& (0+255),w,b
  1302  0003C0  6ED9               	movwf	fsr2l,c
  1303  0003C2  0E05               	movlw	high sendData@SendArray
  1304  0003C4  0105               	movlb	5	; () banked
  1305  0003C6  2143               	addwfc	(sendData@i+1)& (0+255),w,b
  1306  0003C8  6EDA               	movwf	fsr2h,c
  1307  0003CA  50DF               	movf	indf2,w,c
  1308  0003CC  EC8A  F006         	call	_Send_put
  1309  0003D0  0105               	movlb	5	; () banked
  1310  0003D2  4B42               	infsnz	sendData@i& (0+255),f,b
  1311  0003D4  2B43               	incf	(sendData@i+1)& (0+255),f,b
  1312  0003D6                     l2573:
  1313                           
  1314                           ; BSR set to: 5
  1315  0003D6  0E02               	movlw	2
  1316  0003D8  0105               	movlb	5	; () banked
  1317  0003DA  253F               	addwf	sendData@result& (0+255),w,b
  1318  0003DC  0100               	movlb	0	; () banked
  1319  0003DE  6FB7               	movwf	??_sendData& (0+255),b
  1320  0003E0  0E00               	movlw	0
  1321  0003E2  0105               	movlb	5	; () banked
  1322  0003E4  2140               	addwfc	(sendData@result+1)& (0+255),w,b
  1323  0003E6  0100               	movlb	0	; () banked
  1324  0003E8  6FB8               	movwf	(??_sendData+1)& (0+255),b
  1325  0003EA  0100               	movlb	0	; () banked
  1326  0003EC  51B7               	movf	??_sendData& (0+255),w,b
  1327  0003EE  0105               	movlb	5	; () banked
  1328  0003F0  5D42               	subwf	sendData@i& (0+255),w,b
  1329  0003F2  0100               	movlb	0	; () banked
  1330  0003F4  51B8               	movf	(??_sendData+1)& (0+255),w,b
  1331  0003F6  0105               	movlb	5	; () banked
  1332  0003F8  5943               	subwfb	(sendData@i+1)& (0+255),w,b
  1333  0003FA  B0D8               	btfsc	status,0,c
  1334  0003FC  0012               	return	
  1335  0003FE  D7DD               	goto	l2569
  1336  000400                     __end_of_sendData:
  1337                           	opt stack 0
  1338                           tblptru	equ	0xFF8
  1339                           tblptrh	equ	0xFF7
  1340                           tblptrl	equ	0xFF6
  1341                           tablat	equ	0xFF5
  1342                           postinc0	equ	0xFEE
  1343                           wreg	equ	0xFE8
  1344                           indf1	equ	0xFE7
  1345                           postdec1	equ	0xFE5
  1346                           fsr1h	equ	0xFE2
  1347                           fsr1l	equ	0xFE1
  1348                           indf2	equ	0xFDF
  1349                           fsr2h	equ	0xFDA
  1350                           fsr2l	equ	0xFD9
  1351                           status	equ	0xFD8
  1352                           
  1353 ;; *************** function _cobs_encode *****************
  1354 ;; Defined at:
  1355 ;;		line 29 in file "COBS.c"
  1356 ;; Parameters:    Size  Location     Type
  1357 ;;  dst_buf_ptr     2   26[COMRAM] PTR unsigned char 
  1358 ;;		 -> sendData@COBSArray(30), 
  1359 ;;  dst_buf_len     2   28[COMRAM] unsigned int 
  1360 ;;  src_ptr         2   30[COMRAM] PTR const unsigned char 
  1361 ;;		 -> sendData@SendArray(30), 
  1362 ;;  src_len         2   32[COMRAM] unsigned int 
  1363 ;; Auto vars:     Size  Location     Type
  1364 ;;  result          3   10[BANK0 ] struct .
  1365 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  1366 ;;		 -> sendData@COBSArray(30), 
  1367 ;;  dst_code_wri    2    6[BANK0 ] PTR unsigned char 
  1368 ;;		 -> sendData@COBSArray(30), 
  1369 ;;  dst_buf_end_    2    3[BANK0 ] PTR unsigned char 
  1370 ;;		 -> sendData@COBSArray(30), 
  1371 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  1372 ;;		 -> sendData@SendArray(30), 
  1373 ;;  search_len      1    5[BANK0 ] unsigned char 
  1374 ;;  src_byte        1    2[BANK0 ] unsigned char 
  1375 ;; Return value:  Size  Location     Type
  1376 ;;                  3   26[COMRAM] struct .
  1377 ;; Registers used:
  1378 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : 0/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1384 ;;      Params:         8       0       0       0       0       0       0
  1385 ;;      Locals:         0      13       0       0       0       0       0
  1386 ;;      Temps:          2       0       0       0       0       0       0
  1387 ;;      Totals:        10      13       0       0       0       0       0
  1388 ;;Total ram usage:       23 bytes
  1389 ;; Hardware stack levels used:    1
  1390 ;; Hardware stack levels required when called:    4
  1391 ;; This function calls:
  1392 ;;		Nothing
  1393 ;; This function is called by:
  1394 ;;		_sendData
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398                           	psect	text4
  1399  000400                     __ptext4:
  1400                           	opt stack 0
  1401  000400                     _cobs_encode:
  1402                           	opt stack 23
  1403                           
  1404                           ;COBS.c: 31: cobs_encode_result result = { 0, COBS_ENCODE_OK };
  1405                           
  1406                           ; BSR set to: 5
  1407                           ;incstack = 0
  1408  000400  C067  F0B1         	movff	cobs_encode@F186,cobs_encode@result
  1409  000404  C068  F0B2         	movff	cobs_encode@F186+1,cobs_encode@result+1
  1410  000408  C069  F0B3         	movff	cobs_encode@F186+2,cobs_encode@result+2
  1411                           
  1412                           ;COBS.c: 32: const uint8_t * src_end_ptr = src_ptr + src_len;
  1413  00040C  5021               	movf	cobs_encode@src_len,w,c
  1414  00040E  241F               	addwf	cobs_encode@src_ptr,w,c
  1415  000410  0100               	movlb	0	; () banked
  1416  000412  6FA7               	movwf	cobs_encode@src_end_ptr& (0+255),b
  1417  000414  5022               	movf	cobs_encode@src_len+1,w,c
  1418  000416  2020               	addwfc	cobs_encode@src_ptr+1,w,c
  1419  000418  0100               	movlb	0	; () banked
  1420  00041A  6FA8               	movwf	(cobs_encode@src_end_ptr+1)& (0+255),b
  1421                           
  1422                           ;COBS.c: 33: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  1423  00041C  501D               	movf	cobs_encode@dst_buf_len,w,c
  1424  00041E  241B               	addwf	cobs_encode@dst_buf_ptr,w,c
  1425  000420  0100               	movlb	0	; () banked
  1426  000422  6FAA               	movwf	cobs_encode@dst_buf_end_ptr& (0+255),b
  1427  000424  501E               	movf	cobs_encode@dst_buf_len+1,w,c
  1428  000426  201C               	addwfc	cobs_encode@dst_buf_ptr+1,w,c
  1429  000428  0100               	movlb	0	; () banked
  1430  00042A  6FAB               	movwf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),b
  1431                           
  1432                           ;COBS.c: 34: uint8_t * dst_code_write_ptr = dst_buf_ptr;
  1433  00042C  C01B  F0AD         	movff	cobs_encode@dst_buf_ptr,cobs_encode@dst_code_write_ptr
  1434  000430  C01C  F0AE         	movff	cobs_encode@dst_buf_ptr+1,cobs_encode@dst_code_write_ptr+1
  1435                           
  1436                           ;COBS.c: 35: uint8_t * dst_write_ptr = dst_code_write_ptr + 1;
  1437  000434  0E01               	movlw	1
  1438  000436  0100               	movlb	0	; () banked
  1439  000438  25AD               	addwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  1440  00043A  0100               	movlb	0	; () banked
  1441  00043C  6FAF               	movwf	cobs_encode@dst_write_ptr& (0+255),b
  1442  00043E  0E00               	movlw	0
  1443  000440  0100               	movlb	0	; () banked
  1444  000442  21AE               	addwfc	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  1445  000444  0100               	movlb	0	; () banked
  1446  000446  6FB0               	movwf	(cobs_encode@dst_write_ptr+1)& (0+255),b
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;COBS.c: 36: uint8_t src_byte = 0;
  1450  000448  0E00               	movlw	0
  1451  00044A  0100               	movlb	0	; () banked
  1452  00044C  6FA9               	movwf	cobs_encode@src_byte& (0+255),b
  1453                           
  1454                           ; BSR set to: 0
  1455                           ;COBS.c: 37: uint8_t search_len = 1;
  1456  00044E  0E01               	movlw	1
  1457  000450  0100               	movlb	0	; () banked
  1458  000452  6FAC               	movwf	cobs_encode@search_len& (0+255),b
  1459                           
  1460                           ;COBS.c: 41: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  1461  000454  501B               	movf	cobs_encode@dst_buf_ptr,w,c
  1462  000456  101C               	iorwf	cobs_encode@dst_buf_ptr+1,w,c
  1463  000458  B4D8               	btfsc	status,2,c
  1464  00045A  D004               	goto	l2453
  1465                           
  1466                           ; BSR set to: 0
  1467  00045C  501F               	movf	cobs_encode@src_ptr,w,c
  1468  00045E  1020               	iorwf	cobs_encode@src_ptr+1,w,c
  1469  000460  A4D8               	btfss	status,2,c
  1470  000462  D00A               	goto	l2459
  1471  000464                     l2453:
  1472                           
  1473                           ; BSR set to: 0
  1474                           ;COBS.c: 42: {
  1475                           ;COBS.c: 43: result.status = COBS_ENCODE_NULL_POINTER;
  1476  000464  0E01               	movlw	1
  1477  000466  0100               	movlb	0	; () banked
  1478  000468  6FB3               	movwf	(cobs_encode@result+2)& (0+255),b
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;COBS.c: 44: return result;
  1482  00046A  C0B1  F01B         	movff	cobs_encode@result,?_cobs_encode
  1483  00046E  C0B2  F01C         	movff	cobs_encode@result+1,?_cobs_encode+1
  1484  000472  C0B3  F01D         	movff	cobs_encode@result+2,?_cobs_encode+2
  1485                           
  1486                           ; BSR set to: 0
  1487  000476  0012               	return	
  1488  000478                     l2459:
  1489                           
  1490                           ; BSR set to: 0
  1491                           ;COBS.c: 45: }
  1492                           ;COBS.c: 47: if (src_len != 0)
  1493  000478  5021               	movf	cobs_encode@src_len,w,c
  1494  00047A  1022               	iorwf	cobs_encode@src_len+1,w,c
  1495  00047C  B4D8               	btfsc	status,2,c
  1496  00047E  D05C               	goto	l2503
  1497  000480                     l2461:
  1498                           
  1499                           ; BSR set to: 0
  1500                           ;COBS.c: 51: {
  1501                           ;COBS.c: 53: if (dst_write_ptr >= dst_buf_end_ptr)
  1502  000480  0100               	movlb	0	; () banked
  1503  000482  51AA               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  1504  000484  0100               	movlb	0	; () banked
  1505  000486  5DAF               	subwf	cobs_encode@dst_write_ptr& (0+255),w,b
  1506  000488  0100               	movlb	0	; () banked
  1507  00048A  51AB               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  1508  00048C  0100               	movlb	0	; () banked
  1509  00048E  59B0               	subwfb	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  1510  000490  A0D8               	btfss	status,0,c
  1511  000492  D003               	goto	l2465
  1512                           
  1513                           ; BSR set to: 0
  1514                           ;COBS.c: 54: {
  1515                           ;COBS.c: 55: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  1516  000494  0100               	movlb	0	; () banked
  1517  000496  83B3               	bsf	(cobs_encode@result+2)& (0+255),1,b
  1518                           
  1519                           ;COBS.c: 56: break;
  1520  000498  D04F               	goto	l2503
  1521  00049A                     l2465:
  1522                           
  1523                           ; BSR set to: 0
  1524                           ;COBS.c: 57: }
  1525                           ;COBS.c: 59: src_byte = *src_ptr++;
  1526  00049A  C01F  FFD9         	movff	cobs_encode@src_ptr,fsr2l
  1527  00049E  C020  FFDA         	movff	cobs_encode@src_ptr+1,fsr2h
  1528  0004A2  50DF               	movf	indf2,w,c
  1529  0004A4  0100               	movlb	0	; () banked
  1530  0004A6  6FA9               	movwf	cobs_encode@src_byte& (0+255),b
  1531                           
  1532                           ; BSR set to: 0
  1533  0004A8  4A1F               	infsnz	cobs_encode@src_ptr,f,c
  1534  0004AA  2A20               	incf	cobs_encode@src_ptr+1,f,c
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;COBS.c: 60: if (src_byte == 0)
  1538  0004AC  0100               	movlb	0	; () banked
  1539  0004AE  51A9               	movf	cobs_encode@src_byte& (0+255),w,b
  1540  0004B0  0100               	movlb	0	; () banked
  1541  0004B2  A4D8               	btfss	status,2,c
  1542  0004B4  D019               	goto	l2483
  1543                           
  1544                           ; BSR set to: 0
  1545                           ;COBS.c: 61: {
  1546                           ;COBS.c: 63: *dst_code_write_ptr = search_len;
  1547  0004B6  C0AD  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  1548  0004BA  C0AE  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  1549  0004BE  C0AC  FFDF         	movff	cobs_encode@search_len,indf2
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;COBS.c: 64: dst_code_write_ptr = dst_write_ptr++;
  1553  0004C2  C0AF  F0AD         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  1554  0004C6  C0B0  F0AE         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  1555                           
  1556                           ; BSR set to: 0
  1557  0004CA  0100               	movlb	0	; () banked
  1558  0004CC  4BAF               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  1559  0004CE  2BB0               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;COBS.c: 65: search_len = 1;
  1563  0004D0  0E01               	movlw	1
  1564  0004D2  0100               	movlb	0	; () banked
  1565  0004D4  6FAC               	movwf	cobs_encode@search_len& (0+255),b
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;COBS.c: 66: if (src_ptr >= src_end_ptr)
  1569  0004D6  0100               	movlb	0	; () banked
  1570  0004D8  51A7               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  1571  0004DA  5C1F               	subwf	cobs_encode@src_ptr,w,c
  1572  0004DC  0100               	movlb	0	; () banked
  1573  0004DE  51A8               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  1574  0004E0  5820               	subwfb	cobs_encode@src_ptr+1,w,c
  1575  0004E2  B0D8               	btfsc	status,0,c
  1576  0004E4  D029               	goto	l2503
  1577  0004E6  D7CC               	goto	l2461
  1578  0004E8                     l2483:
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;COBS.c: 71: else
  1582                           ;COBS.c: 72: {
  1583                           ;COBS.c: 74: *dst_write_ptr++ = src_byte;
  1584  0004E8  C0AF  FFD9         	movff	cobs_encode@dst_write_ptr,fsr2l
  1585  0004EC  C0B0  FFDA         	movff	cobs_encode@dst_write_ptr+1,fsr2h
  1586  0004F0  C0A9  FFDF         	movff	cobs_encode@src_byte,indf2
  1587                           
  1588                           ; BSR set to: 0
  1589  0004F4  0100               	movlb	0	; () banked
  1590  0004F6  4BAF               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  1591  0004F8  2BB0               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  1592                           
  1593                           ; BSR set to: 0
  1594                           ;COBS.c: 75: search_len++;
  1595  0004FA  0100               	movlb	0	; () banked
  1596  0004FC  2BAC               	incf	cobs_encode@search_len& (0+255),f,b
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;COBS.c: 76: if (src_ptr >= src_end_ptr)
  1600  0004FE  0100               	movlb	0	; () banked
  1601  000500  51A7               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  1602  000502  5C1F               	subwf	cobs_encode@src_ptr,w,c
  1603  000504  0100               	movlb	0	; () banked
  1604  000506  51A8               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  1605  000508  5820               	subwfb	cobs_encode@src_ptr+1,w,c
  1606  00050A  B0D8               	btfsc	status,0,c
  1607  00050C  D015               	goto	l2503
  1608                           
  1609                           ; BSR set to: 0
  1610                           ;COBS.c: 79: }
  1611                           ;COBS.c: 80: if (search_len == 0xFF)
  1612                           
  1613                           ; BSR set to: 0
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;COBS.c: 77: {
  1617                           ;COBS.c: 78: break;
  1618  00050E  0100               	movlb	0	; () banked
  1619  000510  29AC               	incf	cobs_encode@search_len& (0+255),w,b
  1620  000512  A4D8               	btfss	status,2,c
  1621  000514  D7B5               	goto	l2461
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;COBS.c: 81: {
  1625                           ;COBS.c: 84: *dst_code_write_ptr = search_len;
  1626  000516  C0AD  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  1627  00051A  C0AE  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  1628  00051E  C0AC  FFDF         	movff	cobs_encode@search_len,indf2
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;COBS.c: 85: dst_code_write_ptr = dst_write_ptr++;
  1632  000522  C0AF  F0AD         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  1633  000526  C0B0  F0AE         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  1634                           
  1635                           ; BSR set to: 0
  1636  00052A  0100               	movlb	0	; () banked
  1637  00052C  4BAF               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  1638  00052E  2BB0               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  1639                           
  1640                           ; BSR set to: 0
  1641                           ;COBS.c: 86: search_len = 1;
  1642  000530  0E01               	movlw	1
  1643  000532  0100               	movlb	0	; () banked
  1644  000534  6FAC               	movwf	cobs_encode@search_len& (0+255),b
  1645                           
  1646                           ; BSR set to: 0
  1647                           ;COBS.c: 87: }
  1648                           ;COBS.c: 88: }
  1649                           ;COBS.c: 89: }
  1650                           
  1651                           ; BSR set to: 0
  1652  000536  D7A4               	goto	l2461
  1653  000538                     l2503:
  1654                           
  1655                           ; BSR set to: 0
  1656                           ;COBS.c: 90: }
  1657                           ;COBS.c: 96: if (dst_code_write_ptr >= dst_buf_end_ptr)
  1658  000538  0100               	movlb	0	; () banked
  1659  00053A  51AA               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  1660  00053C  0100               	movlb	0	; () banked
  1661  00053E  5DAD               	subwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  1662  000540  0100               	movlb	0	; () banked
  1663  000542  51AB               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  1664  000544  0100               	movlb	0	; () banked
  1665  000546  59AE               	subwfb	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  1666  000548  A0D8               	btfss	status,0,c
  1667  00054A  D007               	goto	l2509
  1668                           
  1669                           ; BSR set to: 0
  1670                           ;COBS.c: 97: {
  1671                           ;COBS.c: 99: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  1672  00054C  0100               	movlb	0	; () banked
  1673  00054E  83B3               	bsf	(cobs_encode@result+2)& (0+255),1,b
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;COBS.c: 100: dst_write_ptr = dst_buf_end_ptr;
  1677  000550  C0AA  F0AF         	movff	cobs_encode@dst_buf_end_ptr,cobs_encode@dst_write_ptr
  1678  000554  C0AB  F0B0         	movff	cobs_encode@dst_buf_end_ptr+1,cobs_encode@dst_write_ptr+1
  1679                           
  1680                           ;COBS.c: 101: }
  1681  000558  D006               	goto	l2511
  1682  00055A                     l2509:
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;COBS.c: 102: else
  1686                           ;COBS.c: 103: {
  1687                           ;COBS.c: 105: *dst_code_write_ptr = search_len;
  1688  00055A  C0AD  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  1689  00055E  C0AE  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  1690  000562  C0AC  FFDF         	movff	cobs_encode@search_len,indf2
  1691  000566                     l2511:
  1692                           
  1693                           ; BSR set to: 0
  1694                           ;COBS.c: 106: }
  1695                           ;COBS.c: 109: result.out_len = dst_write_ptr - dst_buf_ptr;
  1696  000566  C01B  F023         	movff	cobs_encode@dst_buf_ptr,??_cobs_encode
  1697  00056A  C01C  F024         	movff	cobs_encode@dst_buf_ptr+1,??_cobs_encode+1
  1698  00056E  1E23               	comf	??_cobs_encode,f,c
  1699  000570  1E24               	comf	??_cobs_encode+1,f,c
  1700  000572  4A23               	infsnz	??_cobs_encode,f,c
  1701  000574  2A24               	incf	??_cobs_encode+1,f,c
  1702  000576  0100               	movlb	0	; () banked
  1703  000578  51AF               	movf	cobs_encode@dst_write_ptr& (0+255),w,b
  1704  00057A  2423               	addwf	??_cobs_encode,w,c
  1705  00057C  0100               	movlb	0	; () banked
  1706  00057E  6FB1               	movwf	cobs_encode@result& (0+255),b
  1707  000580  0100               	movlb	0	; () banked
  1708  000582  51B0               	movf	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  1709  000584  2024               	addwfc	??_cobs_encode+1,w,c
  1710  000586  0100               	movlb	0	; () banked
  1711  000588  6FB2               	movwf	(cobs_encode@result+1)& (0+255),b
  1712                           
  1713                           ; BSR set to: 0
  1714                           ;COBS.c: 111: return result;
  1715  00058A  C0B1  F01B         	movff	cobs_encode@result,?_cobs_encode
  1716  00058E  C0B2  F01C         	movff	cobs_encode@result+1,?_cobs_encode+1
  1717  000592  C0B3  F01D         	movff	cobs_encode@result+2,?_cobs_encode+2
  1718  000596  0012               	return	
  1719  000598                     __end_of_cobs_encode:
  1720                           	opt stack 0
  1721                           tblptru	equ	0xFF8
  1722                           tblptrh	equ	0xFF7
  1723                           tblptrl	equ	0xFF6
  1724                           tablat	equ	0xFF5
  1725                           postinc0	equ	0xFEE
  1726                           wreg	equ	0xFE8
  1727                           indf1	equ	0xFE7
  1728                           postdec1	equ	0xFE5
  1729                           fsr1h	equ	0xFE2
  1730                           fsr1l	equ	0xFE1
  1731                           indf2	equ	0xFDF
  1732                           fsr2h	equ	0xFDA
  1733                           fsr2l	equ	0xFD9
  1734                           status	equ	0xFD8
  1735                           
  1736 ;; *************** function _Send_put *****************
  1737 ;; Defined at:
  1738 ;;		line 129 in file "UART.c"
  1739 ;; Parameters:    Size  Location     Type
  1740 ;;  _data           1    wreg     unsigned char 
  1741 ;; Auto vars:     Size  Location     Type
  1742 ;;  _data           1    0[BANK0 ] unsigned char 
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  1    wreg      void 
  1745 ;; Registers used:
  1746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1752 ;;      Params:         0       0       0       0       0       0       0
  1753 ;;      Locals:         0       1       0       0       0       0       0
  1754 ;;      Temps:          0       0       0       0       0       0       0
  1755 ;;      Totals:         0       1       0       0       0       0       0
  1756 ;;Total ram usage:        1 bytes
  1757 ;; Hardware stack levels used:    1
  1758 ;; Hardware stack levels required when called:    6
  1759 ;; This function calls:
  1760 ;;		_UART_buff_get
  1761 ;;		_UART_buff_put
  1762 ;; This function is called by:
  1763 ;;		_ComStart
  1764 ;;		_sendData
  1765 ;;		_putch
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769                           	psect	text5
  1770  000D14                     __ptext5:
  1771                           	opt stack 0
  1772  000D14                     _Send_put:
  1773                           	opt stack 21
  1774                           
  1775                           ; BSR set to: 0
  1776                           ;incstack = 0
  1777                           ;Send_put@_data stored from wreg
  1778  000D14  0100               	movlb	0	; () banked
  1779  000D16  6FA7               	movwf	Send_put@_data& (0+255),b
  1780                           
  1781                           ;UART.c: 130: UART_buff_put(&output_buffer, _data);
  1782  000D18  0E00               	movlw	low _output_buffer
  1783  000D1A  6E21               	movwf	UART_buff_put@_this,c
  1784  000D1C  0E02               	movlw	high _output_buffer
  1785  000D1E  6E22               	movwf	UART_buff_put@_this+1,c
  1786  000D20  C0A7  F023         	movff	Send_put@_data,UART_buff_put@c
  1787  000D24  ECCC  F002         	call	_UART_buff_put	;wreg free
  1788                           
  1789                           ;UART.c: 131: if (Transmit_stall == 1) {
  1790  000D28  0444               	decf	_Transmit_stall,w,c
  1791  000D2A  A4D8               	btfss	status,2,c
  1792  000D2C  0012               	return	
  1793                           
  1794                           ;UART.c: 132: Transmit_stall = 0;
  1795  000D2E  0E00               	movlw	0
  1796  000D30  6E44               	movwf	_Transmit_stall,c
  1797                           
  1798                           ;UART.c: 133: TXREG1 = UART_buff_get(&output_buffer);
  1799  000D32  0E00               	movlw	low _output_buffer
  1800  000D34  6E21               	movwf	UART_buff_get@_this,c
  1801  000D36  0E02               	movlw	high _output_buffer
  1802  000D38  6E22               	movwf	UART_buff_get@_this+1,c
  1803  000D3A  ECCC  F004         	call	_UART_buff_get	;wreg free
  1804  000D3E  6EAD               	movwf	4013,c	;volatile
  1805                           
  1806                           ;UART.c: 134: PIE1bits.TX1IE = 1;
  1807  000D40  889D               	bsf	3997,4,c	;volatile
  1808  000D42  0012               	return	
  1809  000D44                     __end_of_Send_put:
  1810                           	opt stack 0
  1811                           tblptru	equ	0xFF8
  1812                           tblptrh	equ	0xFF7
  1813                           tblptrl	equ	0xFF6
  1814                           tablat	equ	0xFF5
  1815                           postinc0	equ	0xFEE
  1816                           wreg	equ	0xFE8
  1817                           indf1	equ	0xFE7
  1818                           postdec1	equ	0xFE5
  1819                           fsr1h	equ	0xFE2
  1820                           fsr1l	equ	0xFE1
  1821                           indf2	equ	0xFDF
  1822                           fsr2h	equ	0xFDA
  1823                           fsr2l	equ	0xFD9
  1824                           status	equ	0xFD8
  1825                           
  1826 ;; *************** function _UART_buff_put *****************
  1827 ;; Defined at:
  1828 ;;		line 67 in file "UART.c"
  1829 ;; Parameters:    Size  Location     Type
  1830 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  1831 ;;		 -> output_buffer(206), input_buffer(206), 
  1832 ;;  c               1   34[COMRAM] const unsigned char 
  1833 ;; Auto vars:     Size  Location     Type
  1834 ;;		None
  1835 ;; Return value:  Size  Location     Type
  1836 ;;                  1    wreg      void 
  1837 ;; Registers used:
  1838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1839 ;; Tracked objects:
  1840 ;;		On entry : 0/0
  1841 ;;		On exit  : 0/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1844 ;;      Params:         3       0       0       0       0       0       0
  1845 ;;      Locals:         0       0       0       0       0       0       0
  1846 ;;      Temps:          2       0       0       0       0       0       0
  1847 ;;      Totals:         5       0       0       0       0       0       0
  1848 ;;Total ram usage:        5 bytes
  1849 ;; Hardware stack levels used:    1
  1850 ;; Hardware stack levels required when called:    5
  1851 ;; This function calls:
  1852 ;;		_UART_buff_modulo_inc
  1853 ;; This function is called by:
  1854 ;;		_Send_put
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text6
  1859  000598                     __ptext6:
  1860                           	opt stack 0
  1861  000598                     _UART_buff_put:
  1862                           	opt stack 21
  1863                           
  1864                           ;UART.c: 68: if (_this->count < 200) {
  1865                           
  1866                           ;incstack = 0
  1867  000598  EE20 F0CC          	lfsr	2,204
  1868  00059C  5021               	movf	UART_buff_put@_this,w,c
  1869  00059E  26D9               	addwf	fsr2l,f,c
  1870  0005A0  5022               	movf	UART_buff_put@_this+1,w,c
  1871  0005A2  22DA               	addwfc	fsr2h,f,c
  1872  0005A4  0E01               	movlw	1
  1873  0005A6  BEDB               	btfsc	plusw2,7,c
  1874  0005A8  D007               	goto	l2387
  1875  0005AA  0E01               	movlw	1
  1876  0005AC  50DB               	movf	plusw2,w,c
  1877  0005AE  E13A               	bnz	l2393
  1878  0005B0  0EC8               	movlw	200
  1879  0005B2  5CDE               	subwf	postinc2,w,c
  1880  0005B4  B0D8               	btfsc	status,0,c
  1881  0005B6  D036               	goto	l2393
  1882  0005B8                     l2387:
  1883                           
  1884                           ;UART.c: 69: _this->buf[_this->head] = c;
  1885  0005B8  EE20 F0C8          	lfsr	2,200
  1886  0005BC  5021               	movf	UART_buff_put@_this,w,c
  1887  0005BE  26D9               	addwf	fsr2l,f,c
  1888  0005C0  5022               	movf	UART_buff_put@_this+1,w,c
  1889  0005C2  22DA               	addwfc	fsr2h,f,c
  1890  0005C4  CFDE F024          	movff	postinc2,??_UART_buff_put
  1891  0005C8  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  1892  0005CC  5024               	movf	??_UART_buff_put,w,c
  1893  0005CE  2421               	addwf	UART_buff_put@_this,w,c
  1894  0005D0  6ED9               	movwf	fsr2l,c
  1895  0005D2  5025               	movf	??_UART_buff_put+1,w,c
  1896  0005D4  2022               	addwfc	UART_buff_put@_this+1,w,c
  1897  0005D6  6EDA               	movwf	fsr2h,c
  1898  0005D8  C023  FFDF         	movff	UART_buff_put@c,indf2
  1899                           
  1900                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 200);
  1901  0005DC  EE20 F0C8          	lfsr	2,200
  1902  0005E0  5021               	movf	UART_buff_put@_this,w,c
  1903  0005E2  26D9               	addwf	fsr2l,f,c
  1904  0005E4  5022               	movf	UART_buff_put@_this+1,w,c
  1905  0005E6  22DA               	addwfc	fsr2h,f,c
  1906  0005E8  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  1907  0005EC  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  1908  0005F0  0E00               	movlw	0
  1909  0005F2  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  1910  0005F4  0EC8               	movlw	200
  1911  0005F6  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  1912  0005F8  ECB8  F006         	call	_UART_buff_modulo_inc	;wreg free
  1913  0005FC  EE20 F0C8          	lfsr	2,200
  1914  000600  5021               	movf	UART_buff_put@_this,w,c
  1915  000602  26D9               	addwf	fsr2l,f,c
  1916  000604  5022               	movf	UART_buff_put@_this+1,w,c
  1917  000606  22DA               	addwfc	fsr2h,f,c
  1918  000608  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  1919  00060C  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  1920                           
  1921                           ;UART.c: 71: ++_this->count;
  1922  000610  EE20 F0CC          	lfsr	2,204
  1923  000614  5021               	movf	UART_buff_put@_this,w,c
  1924  000616  26D9               	addwf	fsr2l,f,c
  1925  000618  5022               	movf	UART_buff_put@_this+1,w,c
  1926  00061A  22DA               	addwfc	fsr2h,f,c
  1927  00061C  2ADE               	incf	postinc2,f,c
  1928  00061E  0E00               	movlw	0
  1929  000620  22DD               	addwfc	postdec2,f,c
  1930                           
  1931                           ;UART.c: 72: } else {
  1932  000622  0012               	return	
  1933  000624                     l2393:
  1934                           
  1935                           ;UART.c: 73: _this->buf[_this->head] = c;
  1936  000624  EE20 F0C8          	lfsr	2,200
  1937  000628  5021               	movf	UART_buff_put@_this,w,c
  1938  00062A  26D9               	addwf	fsr2l,f,c
  1939  00062C  5022               	movf	UART_buff_put@_this+1,w,c
  1940  00062E  22DA               	addwfc	fsr2h,f,c
  1941  000630  CFDE F024          	movff	postinc2,??_UART_buff_put
  1942  000634  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  1943  000638  5024               	movf	??_UART_buff_put,w,c
  1944  00063A  2421               	addwf	UART_buff_put@_this,w,c
  1945  00063C  6ED9               	movwf	fsr2l,c
  1946  00063E  5025               	movf	??_UART_buff_put+1,w,c
  1947  000640  2022               	addwfc	UART_buff_put@_this+1,w,c
  1948  000642  6EDA               	movwf	fsr2h,c
  1949  000644  C023  FFDF         	movff	UART_buff_put@c,indf2
  1950                           
  1951                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 200);
  1952  000648  EE20 F0C8          	lfsr	2,200
  1953  00064C  5021               	movf	UART_buff_put@_this,w,c
  1954  00064E  26D9               	addwf	fsr2l,f,c
  1955  000650  5022               	movf	UART_buff_put@_this+1,w,c
  1956  000652  22DA               	addwfc	fsr2h,f,c
  1957  000654  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  1958  000658  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  1959  00065C  0E00               	movlw	0
  1960  00065E  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  1961  000660  0EC8               	movlw	200
  1962  000662  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  1963  000664  ECB8  F006         	call	_UART_buff_modulo_inc	;wreg free
  1964  000668  EE20 F0C8          	lfsr	2,200
  1965  00066C  5021               	movf	UART_buff_put@_this,w,c
  1966  00066E  26D9               	addwf	fsr2l,f,c
  1967  000670  5022               	movf	UART_buff_put@_this+1,w,c
  1968  000672  22DA               	addwfc	fsr2h,f,c
  1969  000674  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  1970  000678  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  1971                           
  1972                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  1973  00067C  EE20 F0CA          	lfsr	2,202
  1974  000680  5021               	movf	UART_buff_put@_this,w,c
  1975  000682  26D9               	addwf	fsr2l,f,c
  1976  000684  5022               	movf	UART_buff_put@_this+1,w,c
  1977  000686  22DA               	addwfc	fsr2h,f,c
  1978  000688  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  1979  00068C  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  1980  000690  0E00               	movlw	0
  1981  000692  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  1982  000694  0EC8               	movlw	200
  1983  000696  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  1984  000698  ECB8  F006         	call	_UART_buff_modulo_inc	;wreg free
  1985  00069C  EE20 F0CA          	lfsr	2,202
  1986  0006A0  5021               	movf	UART_buff_put@_this,w,c
  1987  0006A2  26D9               	addwf	fsr2l,f,c
  1988  0006A4  5022               	movf	UART_buff_put@_this+1,w,c
  1989  0006A6  22DA               	addwfc	fsr2h,f,c
  1990  0006A8  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  1991  0006AC  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  1992  0006B0  0012               	return	
  1993  0006B2                     __end_of_UART_buff_put:
  1994                           	opt stack 0
  1995                           tblptru	equ	0xFF8
  1996                           tblptrh	equ	0xFF7
  1997                           tblptrl	equ	0xFF6
  1998                           tablat	equ	0xFF5
  1999                           postinc0	equ	0xFEE
  2000                           wreg	equ	0xFE8
  2001                           indf1	equ	0xFE7
  2002                           postdec1	equ	0xFE5
  2003                           fsr1h	equ	0xFE2
  2004                           fsr1l	equ	0xFE1
  2005                           indf2	equ	0xFDF
  2006                           postinc2	equ	0xFDE
  2007                           postdec2	equ	0xFDD
  2008                           plusw2	equ	0xFDB
  2009                           fsr2h	equ	0xFDA
  2010                           fsr2l	equ	0xFD9
  2011                           status	equ	0xFD8
  2012                           
  2013 ;; *************** function _GetFaults *****************
  2014 ;; Defined at:
  2015 ;;		line 41 in file "Function.c"
  2016 ;; Parameters:    Size  Location     Type
  2017 ;;  num             1    wreg     unsigned char 
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;  num             1   26[COMRAM] unsigned char 
  2020 ;; Return value:  Size  Location     Type
  2021 ;;                  1    wreg      unsigned char 
  2022 ;; Registers used:
  2023 ;;		wreg, status,2, status,0
  2024 ;; Tracked objects:
  2025 ;;		On entry : 0/0
  2026 ;;		On exit  : 0/0
  2027 ;;		Unchanged: 0/0
  2028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2029 ;;      Params:         0       0       0       0       0       0       0
  2030 ;;      Locals:         1       0       0       0       0       0       0
  2031 ;;      Temps:          0       0       0       0       0       0       0
  2032 ;;      Totals:         1       0       0       0       0       0       0
  2033 ;;Total ram usage:        1 bytes
  2034 ;; Hardware stack levels used:    1
  2035 ;; Hardware stack levels required when called:    4
  2036 ;; This function calls:
  2037 ;;		Nothing
  2038 ;; This function is called by:
  2039 ;;		_sendData
  2040 ;; This function uses a non-reentrant model
  2041 ;;
  2042                           
  2043                           	psect	text7
  2044  000E68                     __ptext7:
  2045                           	opt stack 0
  2046  000E68                     _GetFaults:
  2047                           	opt stack 23
  2048                           
  2049                           ;incstack = 0
  2050                           ;GetFaults@num stored from wreg
  2051  000E68  6E1B               	movwf	GetFaults@num,c
  2052                           
  2053                           ;Function.c: 42: if(num == 1){
  2054  000E6A  041B               	decf	GetFaults@num,w,c
  2055  000E6C  A4D8               	btfss	status,2,c
  2056  000E6E  D002               	goto	l2439
  2057                           
  2058                           ;Function.c: 43: return ByteHigh;
  2059  000E70  503B               	movf	_ByteHigh,w,c
  2060  000E72  0012               	return	
  2061  000E74                     l2439:
  2062                           
  2063                           ;Function.c: 44: }
  2064                           ;Function.c: 45: if(num == 0){
  2065  000E74  501B               	movf	GetFaults@num,w,c
  2066  000E76  A4D8               	btfss	status,2,c
  2067  000E78  0012               	return	
  2068                           
  2069                           ;Function.c: 46: return ByteLow;
  2070  000E7A  503C               	movf	_ByteLow,w,c
  2071  000E7C  0012               	return	
  2072  000E7E                     __end_of_GetFaults:
  2073                           	opt stack 0
  2074                           tblptru	equ	0xFF8
  2075                           tblptrh	equ	0xFF7
  2076                           tblptrl	equ	0xFF6
  2077                           tablat	equ	0xFF5
  2078                           postinc0	equ	0xFEE
  2079                           wreg	equ	0xFE8
  2080                           indf1	equ	0xFE7
  2081                           postdec1	equ	0xFE5
  2082                           fsr1h	equ	0xFE2
  2083                           fsr1l	equ	0xFE1
  2084                           indf2	equ	0xFDF
  2085                           postinc2	equ	0xFDE
  2086                           postdec2	equ	0xFDD
  2087                           plusw2	equ	0xFDB
  2088                           fsr2h	equ	0xFDA
  2089                           fsr2l	equ	0xFD9
  2090                           status	equ	0xFD8
  2091                           
  2092 ;; *************** function _Delay *****************
  2093 ;; Defined at:
  2094 ;;		line 206 in file "Function.c"
  2095 ;; Parameters:    Size  Location     Type
  2096 ;;  wait            2   26[COMRAM] int 
  2097 ;; Auto vars:     Size  Location     Type
  2098 ;;  x               2   29[COMRAM] int 
  2099 ;; Return value:  Size  Location     Type
  2100 ;;                  1    wreg      void 
  2101 ;; Registers used:
  2102 ;;		wreg, status,2, status,0
  2103 ;; Tracked objects:
  2104 ;;		On entry : 0/0
  2105 ;;		On exit  : 0/0
  2106 ;;		Unchanged: 0/0
  2107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2108 ;;      Params:         2       0       0       0       0       0       0
  2109 ;;      Locals:         2       0       0       0       0       0       0
  2110 ;;      Temps:          1       0       0       0       0       0       0
  2111 ;;      Totals:         5       0       0       0       0       0       0
  2112 ;;Total ram usage:        5 bytes
  2113 ;; Hardware stack levels used:    1
  2114 ;; Hardware stack levels required when called:    4
  2115 ;; This function calls:
  2116 ;;		Nothing
  2117 ;; This function is called by:
  2118 ;;		_respondECU
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122                           	psect	text8
  2123  000CAE                     __ptext8:
  2124                           	opt stack 0
  2125  000CAE                     _Delay:
  2126                           	opt stack 24
  2127                           
  2128                           ;Function.c: 207: int x;
  2129                           ;Function.c: 208: for (x = 0; x < wait; x++) {
  2130                           
  2131                           ;incstack = 0
  2132  000CAE  0E00               	movlw	0
  2133  000CB0  6E1F               	movwf	Delay@x+1,c
  2134  000CB2  0E00               	movlw	0
  2135  000CB4  6E1E               	movwf	Delay@x,c
  2136  000CB6  D00A               	goto	l465
  2137  000CB8                     l1953:
  2138                           
  2139                           ;Function.c: 209: _delay((unsigned long)((1)*(16000000/4000.0)));
  2140  000CB8  0E06               	movlw	6
  2141  000CBA  6E1D               	movwf	??_Delay& (0+255),c
  2142  000CBC  0E30               	movlw	48
  2143  000CBE                     u2027:
  2144  000CBE  2EE8               	decfsz	wreg,f,c
  2145  000CC0  D7FE               	bra	u2027
  2146  000CC2  2E1D               	decfsz	??_Delay& (0+255),f,c
  2147  000CC4  D7FC               	bra	u2027
  2148  000CC6  D000               	nop2	
  2149  000CC8  4A1E               	infsnz	Delay@x,f,c
  2150  000CCA  2A1F               	incf	Delay@x+1,f,c
  2151  000CCC                     l465:
  2152  000CCC  501B               	movf	Delay@wait,w,c
  2153  000CCE  5C1E               	subwf	Delay@x,w,c
  2154  000CD0  501F               	movf	Delay@x+1,w,c
  2155  000CD2  0A80               	xorlw	128
  2156  000CD4  6E1D               	movwf	??_Delay& (0+255),c
  2157  000CD6  501C               	movf	Delay@wait+1,w,c
  2158  000CD8  0A80               	xorlw	128
  2159  000CDA  581D               	subwfb	??_Delay& (0+255),w,c
  2160  000CDC  B0D8               	btfsc	status,0,c
  2161  000CDE  0012               	return	
  2162  000CE0  D7EB               	goto	l1953
  2163  000CE2                     __end_of_Delay:
  2164                           	opt stack 0
  2165                           tblptru	equ	0xFF8
  2166                           tblptrh	equ	0xFF7
  2167                           tblptrl	equ	0xFF6
  2168                           tablat	equ	0xFF5
  2169                           postinc0	equ	0xFEE
  2170                           wreg	equ	0xFE8
  2171                           indf1	equ	0xFE7
  2172                           postdec1	equ	0xFE5
  2173                           fsr1h	equ	0xFE2
  2174                           fsr1l	equ	0xFE1
  2175                           indf2	equ	0xFDF
  2176                           postinc2	equ	0xFDE
  2177                           postdec2	equ	0xFDD
  2178                           plusw2	equ	0xFDB
  2179                           fsr2h	equ	0xFDA
  2180                           fsr2l	equ	0xFD9
  2181                           status	equ	0xFD8
  2182                           
  2183 ;; *************** function _receiveData *****************
  2184 ;; Defined at:
  2185 ;;		line 169 in file "FastTransfer.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;		None
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;  result          3   20[BANK0 ] struct .
  2190 ;;  i               2   23[BANK0 ] int 
  2191 ;;  Data            1   25[BANK0 ] unsigned char 
  2192 ;;  CS              1   19[BANK0 ] unsigned char 
  2193 ;; Return value:  Size  Location     Type
  2194 ;;                  1    wreg      unsigned char 
  2195 ;; Registers used:
  2196 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2197 ;; Tracked objects:
  2198 ;;		On entry : 0/0
  2199 ;;		On exit  : 0/0
  2200 ;;		Unchanged: 0/0
  2201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2202 ;;      Params:         0       0       0       0       0       0       0
  2203 ;;      Locals:         0       7       0       0       0       0       0
  2204 ;;      Temps:          0       5       0       0       0       0       0
  2205 ;;      Totals:         0      12       0       0       0       0       0
  2206 ;;Total ram usage:       12 bytes
  2207 ;; Hardware stack levels used:    1
  2208 ;; Hardware stack levels required when called:    7
  2209 ;; This function calls:
  2210 ;;		_CRC8
  2211 ;;		_Receive_available
  2212 ;;		_Receive_get
  2213 ;;		_cobs_decode
  2214 ;; This function is called by:
  2215 ;;		_updateComms
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           	psect	text9
  2220  0007CC                     __ptext9:
  2221                           	opt stack 0
  2222  0007CC                     _receiveData:
  2223                           	opt stack 22
  2224                           
  2225                           ;FastTransfer.c: 171: if(Receive_available()>5){
  2226                           
  2227                           ;incstack = 0
  2228  0007CC  EC3F  F007         	call	_Receive_available	;wreg free
  2229  0007D0  BE1E               	btfsc	?_Receive_available+1,7,c
  2230  0007D2  D072               	goto	l2695
  2231  0007D4  501E               	movf	?_Receive_available+1,w,c
  2232  0007D6  E104               	bnz	u1890
  2233  0007D8  0E06               	movlw	6
  2234  0007DA  5C1D               	subwf	?_Receive_available,w,c
  2235  0007DC  A0D8               	btfss	status,0,c
  2236  0007DE  D06C               	goto	l2695
  2237  0007E0                     u1890:
  2238                           
  2239                           ;FastTransfer.c: 172: if(Receive_get() == 8){
  2240  0007E0  EC72  F007         	call	_Receive_get	;wreg free
  2241  0007E4  0A08               	xorlw	8
  2242  0007E6  A4D8               	btfss	status,2,c
  2243  0007E8  D067               	goto	l2695
  2244                           
  2245                           ;FastTransfer.c: 173: int i = 0;
  2246  0007EA  0E00               	movlw	0
  2247  0007EC  0100               	movlb	0	; () banked
  2248  0007EE  6FBF               	movwf	(receiveData@i+1)& (0+255),b
  2249  0007F0  0E00               	movlw	0
  2250  0007F2  6FBE               	movwf	receiveData@i& (0+255),b
  2251                           
  2252                           ;FastTransfer.c: 174: char Data = 0;
  2253  0007F4  0E00               	movlw	0
  2254  0007F6  0100               	movlb	0	; () banked
  2255  0007F8  6FC0               	movwf	receiveData@Data& (0+255),b
  2256  0007FA                     l2675:
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;FastTransfer.c: 176: Data = Receive_get();
  2260  0007FA  EC72  F007         	call	_Receive_get	;wreg free
  2261  0007FE  0100               	movlb	0	; () banked
  2262  000800  6FC0               	movwf	receiveData@Data& (0+255),b
  2263                           
  2264                           ; BSR set to: 0
  2265                           ;FastTransfer.c: 177: ReciveArray[i] = Data;
  2266  000802  0ECE               	movlw	low _ReciveArray
  2267  000804  0100               	movlb	0	; () banked
  2268  000806  25BE               	addwf	receiveData@i& (0+255),w,b
  2269  000808  6ED9               	movwf	fsr2l,c
  2270  00080A  0E01               	movlw	high _ReciveArray
  2271  00080C  0100               	movlb	0	; () banked
  2272  00080E  21BF               	addwfc	(receiveData@i+1)& (0+255),w,b
  2273  000810  6EDA               	movwf	fsr2h,c
  2274  000812  C0C0  FFDF         	movff	receiveData@Data,indf2
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;FastTransfer.c: 178: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2278  000816  0E85               	movlw	133
  2279  000818                     u2037:
  2280  000818  2EE8               	decfsz	wreg,f,c
  2281  00081A  D7FE               	bra	u2037
  2282  00081C  F000               	nop	
  2283                           
  2284                           ;FastTransfer.c: 179: i++;
  2285  00081E  0100               	movlb	0	; () banked
  2286  000820  4BBE               	infsnz	receiveData@i& (0+255),f,b
  2287  000822  2BBF               	incf	(receiveData@i+1)& (0+255),f,b
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;FastTransfer.c: 180: }while(Data != 0x00);
  2291  000824  0100               	movlb	0	; () banked
  2292  000826  51C0               	movf	receiveData@Data& (0+255),w,b
  2293  000828  0100               	movlb	0	; () banked
  2294  00082A  A4D8               	btfss	status,2,c
  2295  00082C  D7E6               	goto	l2675
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;FastTransfer.c: 182: cobs_decode_result result;
  2299                           ;FastTransfer.c: 184: result = cobs_decode(ProcessArray, sizeof(ProcessArray), ReciveArr
      +                          ay, i);
  2300                           
  2301                           ; BSR set to: 0
  2302  00082E  0E6E               	movlw	low _ProcessArray
  2303  000830  6E1B               	movwf	cobs_decode@dst_buf_ptr,c
  2304  000832  0E00               	movlw	high _ProcessArray
  2305  000834  6E1C               	movwf	cobs_decode@dst_buf_ptr+1,c
  2306  000836  0E00               	movlw	0
  2307  000838  6E1E               	movwf	cobs_decode@dst_buf_len+1,c
  2308  00083A  0E1E               	movlw	30
  2309  00083C  6E1D               	movwf	cobs_decode@dst_buf_len,c
  2310  00083E  0ECE               	movlw	low _ReciveArray
  2311  000840  6E1F               	movwf	cobs_decode@src_ptr,c
  2312  000842  0E01               	movlw	high _ReciveArray
  2313  000844  6E20               	movwf	cobs_decode@src_ptr+1,c
  2314  000846  C0BE  F021         	movff	receiveData@i,cobs_decode@src_len
  2315  00084A  C0BF  F022         	movff	receiveData@i+1,cobs_decode@src_len+1
  2316  00084E  EC52  F000         	call	_cobs_decode	;wreg free
  2317  000852  C01B  F0BB         	movff	?_cobs_decode,receiveData@result
  2318  000856  C01C  F0BC         	movff	?_cobs_decode+1,receiveData@result+1
  2319  00085A  C01D  F0BD         	movff	?_cobs_decode+2,receiveData@result+2
  2320                           
  2321                           ;FastTransfer.c: 186: char CS = CRC8(ProcessArray, result.out_len-1);
  2322  00085E  0E6E               	movlw	low _ProcessArray
  2323  000860  6E1B               	movwf	CRC8@data,c
  2324  000862  0E00               	movlw	high _ProcessArray
  2325  000864  6E1C               	movwf	CRC8@data+1,c
  2326  000866  0100               	movlb	0	; () banked
  2327  000868  05BB               	decf	receiveData@result& (0+255),w,b
  2328  00086A  6E1D               	movwf	CRC8@len,c
  2329  00086C  ECF9  F005         	call	_CRC8	;wreg free
  2330  000870  0100               	movlb	0	; () banked
  2331  000872  6FBA               	movwf	receiveData@CS& (0+255),b
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;FastTransfer.c: 188: if(ProcessArray[result.out_len-1] == CS){
  2335  000874  0EFF               	movlw	255
  2336  000876  0100               	movlb	0	; () banked
  2337  000878  6FB5               	movwf	??_receiveData& (0+255),b
  2338  00087A  0EFF               	movlw	255
  2339  00087C  0100               	movlb	0	; () banked
  2340  00087E  6FB6               	movwf	(??_receiveData+1)& (0+255),b
  2341  000880  C0BB  F0B7         	movff	receiveData@result,??_receiveData+2
  2342  000884  C0BC  F0B8         	movff	receiveData@result+1,??_receiveData+3
  2343  000888  0100               	movlb	0	; () banked
  2344  00088A  51B5               	movf	??_receiveData& (0+255),w,b
  2345  00088C  0100               	movlb	0	; () banked
  2346  00088E  27B7               	addwf	(??_receiveData+2)& (0+255),f,b
  2347  000890  0100               	movlb	0	; () banked
  2348  000892  51B6               	movf	(??_receiveData+1)& (0+255),w,b
  2349  000894  0100               	movlb	0	; () banked
  2350  000896  23B8               	addwfc	(??_receiveData+3)& (0+255),f,b
  2351  000898  0E6E               	movlw	low _ProcessArray
  2352  00089A  0100               	movlb	0	; () banked
  2353  00089C  25B7               	addwf	(??_receiveData+2)& (0+255),w,b
  2354  00089E  6ED9               	movwf	fsr2l,c
  2355  0008A0  0E00               	movlw	high _ProcessArray
  2356  0008A2  0100               	movlb	0	; () banked
  2357  0008A4  21B8               	addwfc	(??_receiveData+3)& (0+255),w,b
  2358  0008A6  6EDA               	movwf	fsr2h,c
  2359  0008A8  0100               	movlb	0	; () banked
  2360  0008AA  51BA               	movf	receiveData@CS& (0+255),w,b
  2361  0008AC  18DE               	xorwf	postinc2,w,c
  2362  0008AE  A4D8               	btfss	status,2,c
  2363  0008B0  D003               	goto	l2695
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;FastTransfer.c: 189: LATAbits.LATA3 ^= 1;
  2367  0008B2  7689               	btg	3977,3,c	;volatile
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;FastTransfer.c: 190: return 1;
  2371  0008B4  0E01               	movlw	1
  2372                           
  2373                           ; BSR set to: 0
  2374  0008B6  0012               	return	
  2375  0008B8                     l2695:
  2376                           
  2377                           ;FastTransfer.c: 199: }
  2378                           ;FastTransfer.c: 201: return 0;
  2379  0008B8  0E00               	movlw	0
  2380  0008BA  0012               	return	
  2381  0008BC                     __end_of_receiveData:
  2382                           	opt stack 0
  2383                           tblptru	equ	0xFF8
  2384                           tblptrh	equ	0xFF7
  2385                           tblptrl	equ	0xFF6
  2386                           tablat	equ	0xFF5
  2387                           postinc0	equ	0xFEE
  2388                           wreg	equ	0xFE8
  2389                           indf1	equ	0xFE7
  2390                           postdec1	equ	0xFE5
  2391                           fsr1h	equ	0xFE2
  2392                           fsr1l	equ	0xFE1
  2393                           indf2	equ	0xFDF
  2394                           postinc2	equ	0xFDE
  2395                           postdec2	equ	0xFDD
  2396                           plusw2	equ	0xFDB
  2397                           fsr2h	equ	0xFDA
  2398                           fsr2l	equ	0xFD9
  2399                           status	equ	0xFD8
  2400                           
  2401 ;; *************** function _cobs_decode *****************
  2402 ;; Defined at:
  2403 ;;		line 115 in file "COBS.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;  dst_buf_ptr     2   26[COMRAM] PTR unsigned char 
  2406 ;;		 -> ProcessArray(30), 
  2407 ;;  dst_buf_len     2   28[COMRAM] unsigned int 
  2408 ;;  src_ptr         2   30[COMRAM] PTR const unsigned char 
  2409 ;;		 -> ReciveArray(30), 
  2410 ;;  src_len         2   32[COMRAM] unsigned int 
  2411 ;; Auto vars:     Size  Location     Type
  2412 ;;  result          3   11[BANK0 ] struct .
  2413 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  2414 ;;		 -> ProcessArray(30), 
  2415 ;;  remaining_by    2    6[BANK0 ] unsigned int 
  2416 ;;  dst_buf_end_    2    2[BANK0 ] PTR unsigned char 
  2417 ;;		 -> ProcessArray(30), 
  2418 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  2419 ;;		 -> ReciveArray(30), 
  2420 ;;  len_code        1   10[BANK0 ] unsigned char 
  2421 ;;  i               1    5[BANK0 ] unsigned char 
  2422 ;;  src_byte        1    4[BANK0 ] unsigned char 
  2423 ;; Return value:  Size  Location     Type
  2424 ;;                  3   26[COMRAM] struct .
  2425 ;; Registers used:
  2426 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2427 ;; Tracked objects:
  2428 ;;		On entry : 0/0
  2429 ;;		On exit  : 0/0
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2432 ;;      Params:         8       0       0       0       0       0       0
  2433 ;;      Locals:         0      14       0       0       0       0       0
  2434 ;;      Temps:          2       0       0       0       0       0       0
  2435 ;;      Totals:        10      14       0       0       0       0       0
  2436 ;;Total ram usage:       24 bytes
  2437 ;; Hardware stack levels used:    1
  2438 ;; Hardware stack levels required when called:    4
  2439 ;; This function calls:
  2440 ;;		Nothing
  2441 ;; This function is called by:
  2442 ;;		_receiveData
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446                           	psect	text10
  2447  0000A4                     __ptext10:
  2448                           	opt stack 0
  2449  0000A4                     _cobs_decode:
  2450                           	opt stack 24
  2451                           
  2452                           ;COBS.c: 117: cobs_decode_result result = { 0, COBS_DECODE_OK };
  2453                           
  2454                           ;incstack = 0
  2455  0000A4  C064  F0B2         	movff	cobs_decode@F198,cobs_decode@result
  2456  0000A8  C065  F0B3         	movff	cobs_decode@F198+1,cobs_decode@result+1
  2457  0000AC  C066  F0B4         	movff	cobs_decode@F198+2,cobs_decode@result+2
  2458                           
  2459                           ;COBS.c: 118: const uint8_t * src_end_ptr = src_ptr + src_len;
  2460  0000B0  5021               	movf	cobs_decode@src_len,w,c
  2461  0000B2  241F               	addwf	cobs_decode@src_ptr,w,c
  2462  0000B4  0100               	movlb	0	; () banked
  2463  0000B6  6FA7               	movwf	cobs_decode@src_end_ptr& (0+255),b
  2464  0000B8  5022               	movf	cobs_decode@src_len+1,w,c
  2465  0000BA  2020               	addwfc	cobs_decode@src_ptr+1,w,c
  2466  0000BC  0100               	movlb	0	; () banked
  2467  0000BE  6FA8               	movwf	(cobs_decode@src_end_ptr+1)& (0+255),b
  2468                           
  2469                           ;COBS.c: 119: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  2470  0000C0  501D               	movf	cobs_decode@dst_buf_len,w,c
  2471  0000C2  241B               	addwf	cobs_decode@dst_buf_ptr,w,c
  2472  0000C4  0100               	movlb	0	; () banked
  2473  0000C6  6FA9               	movwf	cobs_decode@dst_buf_end_ptr& (0+255),b
  2474  0000C8  501E               	movf	cobs_decode@dst_buf_len+1,w,c
  2475  0000CA  201C               	addwfc	cobs_decode@dst_buf_ptr+1,w,c
  2476  0000CC  0100               	movlb	0	; () banked
  2477  0000CE  6FAA               	movwf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),b
  2478                           
  2479                           ;COBS.c: 120: uint8_t * dst_write_ptr = dst_buf_ptr;
  2480  0000D0  C01B  F0AF         	movff	cobs_decode@dst_buf_ptr,cobs_decode@dst_write_ptr
  2481  0000D4  C01C  F0B0         	movff	cobs_decode@dst_buf_ptr+1,cobs_decode@dst_write_ptr+1
  2482                           
  2483                           ;COBS.c: 121: size_t remaining_bytes;
  2484                           ;COBS.c: 122: uint8_t src_byte;
  2485                           ;COBS.c: 123: uint8_t i;
  2486                           ;COBS.c: 124: uint8_t len_code;
  2487                           ;COBS.c: 128: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  2488  0000D8  501B               	movf	cobs_decode@dst_buf_ptr,w,c
  2489  0000DA  101C               	iorwf	cobs_decode@dst_buf_ptr+1,w,c
  2490  0000DC  B4D8               	btfsc	status,2,c
  2491  0000DE  D004               	goto	l2589
  2492                           
  2493                           ; BSR set to: 0
  2494  0000E0  501F               	movf	cobs_decode@src_ptr,w,c
  2495  0000E2  1020               	iorwf	cobs_decode@src_ptr+1,w,c
  2496  0000E4  A4D8               	btfss	status,2,c
  2497  0000E6  D00A               	goto	l2595
  2498  0000E8                     l2589:
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;COBS.c: 129: {
  2502                           ;COBS.c: 130: result.status = COBS_DECODE_NULL_POINTER;
  2503  0000E8  0E01               	movlw	1
  2504  0000EA  0100               	movlb	0	; () banked
  2505  0000EC  6FB4               	movwf	(cobs_decode@result+2)& (0+255),b
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;COBS.c: 131: return result;
  2509  0000EE  C0B2  F01B         	movff	cobs_decode@result,?_cobs_decode
  2510  0000F2  C0B3  F01C         	movff	cobs_decode@result+1,?_cobs_decode+1
  2511  0000F6  C0B4  F01D         	movff	cobs_decode@result+2,?_cobs_decode+2
  2512                           
  2513                           ; BSR set to: 0
  2514  0000FA  0012               	return	
  2515  0000FC                     l2595:
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;COBS.c: 132: }
  2519                           ;COBS.c: 134: if (src_len != 0)
  2520  0000FC  5021               	movf	cobs_decode@src_len,w,c
  2521  0000FE  1022               	iorwf	cobs_decode@src_len+1,w,c
  2522  000100  B4D8               	btfsc	status,2,c
  2523  000102  D096               	goto	l2659
  2524  000104                     l2597:
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;COBS.c: 137: {
  2528                           ;COBS.c: 138: len_code = *src_ptr++;
  2529  000104  C01F  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  2530  000108  C020  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  2531  00010C  50DF               	movf	indf2,w,c
  2532  00010E  0100               	movlb	0	; () banked
  2533  000110  6FB1               	movwf	cobs_decode@len_code& (0+255),b
  2534                           
  2535                           ; BSR set to: 0
  2536  000112  4A1F               	infsnz	cobs_decode@src_ptr,f,c
  2537  000114  2A20               	incf	cobs_decode@src_ptr+1,f,c
  2538                           
  2539                           ; BSR set to: 0
  2540                           ;COBS.c: 139: if (len_code == 0)
  2541  000116  0100               	movlb	0	; () banked
  2542  000118  51B1               	movf	cobs_decode@len_code& (0+255),w,b
  2543  00011A  0100               	movlb	0	; () banked
  2544  00011C  A4D8               	btfss	status,2,c
  2545  00011E  D003               	goto	l2605
  2546                           
  2547                           ; BSR set to: 0
  2548                           ;COBS.c: 140: {
  2549                           ;COBS.c: 141: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  2550  000120  0100               	movlb	0	; () banked
  2551  000122  85B4               	bsf	(cobs_decode@result+2)& (0+255),2,b
  2552                           
  2553                           ;COBS.c: 142: break;
  2554  000124  D085               	goto	l2659
  2555  000126                     l2605:
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;COBS.c: 143: }
  2559                           ;COBS.c: 144: len_code--;
  2560  000126  0100               	movlb	0	; () banked
  2561  000128  07B1               	decf	cobs_decode@len_code& (0+255),f,b
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;COBS.c: 147: remaining_bytes = src_end_ptr - src_ptr;
  2565  00012A  C01F  F023         	movff	cobs_decode@src_ptr,??_cobs_decode
  2566  00012E  C020  F024         	movff	cobs_decode@src_ptr+1,??_cobs_decode+1
  2567  000132  1E23               	comf	??_cobs_decode,f,c
  2568  000134  1E24               	comf	??_cobs_decode+1,f,c
  2569  000136  4A23               	infsnz	??_cobs_decode,f,c
  2570  000138  2A24               	incf	??_cobs_decode+1,f,c
  2571  00013A  0100               	movlb	0	; () banked
  2572  00013C  51A7               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  2573  00013E  2423               	addwf	??_cobs_decode,w,c
  2574  000140  0100               	movlb	0	; () banked
  2575  000142  6FAD               	movwf	cobs_decode@remaining_bytes& (0+255),b
  2576  000144  0100               	movlb	0	; () banked
  2577  000146  51A8               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  2578  000148  2024               	addwfc	??_cobs_decode+1,w,c
  2579  00014A  0100               	movlb	0	; () banked
  2580  00014C  6FAE               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;COBS.c: 148: if (len_code > remaining_bytes)
  2584  00014E  0100               	movlb	0	; () banked
  2585  000150  51B1               	movf	cobs_decode@len_code& (0+255),w,b
  2586  000152  0100               	movlb	0	; () banked
  2587  000154  5DAD               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  2588  000156  0E00               	movlw	0
  2589  000158  59AE               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  2590  00015A  B0D8               	btfsc	status,0,c
  2591  00015C  D004               	goto	l2615
  2592                           
  2593                           ; BSR set to: 0
  2594                           ;COBS.c: 149: {
  2595                           ;COBS.c: 150: result.status |= COBS_DECODE_INPUT_TOO_SHORT;
  2596  00015E  0100               	movlb	0	; () banked
  2597  000160  87B4               	bsf	(cobs_decode@result+2)& (0+255),3,b
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;COBS.c: 151: len_code = remaining_bytes;
  2601  000162  C0AD  F0B1         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  2602  000166                     l2615:
  2603                           
  2604                           ; BSR set to: 0
  2605                           ;COBS.c: 152: }
  2606                           ;COBS.c: 155: remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
  2607  000166  C0AF  F023         	movff	cobs_decode@dst_write_ptr,??_cobs_decode
  2608  00016A  C0B0  F024         	movff	cobs_decode@dst_write_ptr+1,??_cobs_decode+1
  2609  00016E  1E23               	comf	??_cobs_decode,f,c
  2610  000170  1E24               	comf	??_cobs_decode+1,f,c
  2611  000172  4A23               	infsnz	??_cobs_decode,f,c
  2612  000174  2A24               	incf	??_cobs_decode+1,f,c
  2613  000176  0100               	movlb	0	; () banked
  2614  000178  51A9               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  2615  00017A  2423               	addwf	??_cobs_decode,w,c
  2616  00017C  0100               	movlb	0	; () banked
  2617  00017E  6FAD               	movwf	cobs_decode@remaining_bytes& (0+255),b
  2618  000180  0100               	movlb	0	; () banked
  2619  000182  51AA               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  2620  000184  2024               	addwfc	??_cobs_decode+1,w,c
  2621  000186  0100               	movlb	0	; () banked
  2622  000188  6FAE               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;COBS.c: 156: if (len_code > remaining_bytes)
  2626  00018A  0100               	movlb	0	; () banked
  2627  00018C  51B1               	movf	cobs_decode@len_code& (0+255),w,b
  2628  00018E  0100               	movlb	0	; () banked
  2629  000190  5DAD               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  2630  000192  0E00               	movlw	0
  2631  000194  59AE               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  2632  000196  B0D8               	btfsc	status,0,c
  2633  000198  D004               	goto	l2623
  2634                           
  2635                           ; BSR set to: 0
  2636                           ;COBS.c: 157: {
  2637                           ;COBS.c: 158: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  2638  00019A  0100               	movlb	0	; () banked
  2639  00019C  83B4               	bsf	(cobs_decode@result+2)& (0+255),1,b
  2640                           
  2641                           ; BSR set to: 0
  2642                           ;COBS.c: 159: len_code = remaining_bytes;
  2643  00019E  C0AD  F0B1         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  2644  0001A2                     l2623:
  2645                           
  2646                           ; BSR set to: 0
  2647                           ;COBS.c: 160: }
  2648                           ;COBS.c: 162: for (i = len_code; i != 0; i--)
  2649  0001A2  C0B1  F0AC         	movff	cobs_decode@len_code,cobs_decode@i
  2650  0001A6                     l2625:
  2651                           
  2652                           ; BSR set to: 0
  2653  0001A6  0100               	movlb	0	; () banked
  2654  0001A8  51AC               	movf	cobs_decode@i& (0+255),w,b
  2655  0001AA  0100               	movlb	0	; () banked
  2656  0001AC  B4D8               	btfsc	status,2,c
  2657  0001AE  D01C               	goto	l2645
  2658                           
  2659                           ; BSR set to: 0
  2660                           ;COBS.c: 163: {
  2661                           ;COBS.c: 164: src_byte = *src_ptr++;
  2662                           
  2663                           ; BSR set to: 0
  2664                           
  2665                           ; BSR set to: 0
  2666  0001B0  C01F  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  2667  0001B4  C020  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  2668  0001B8  50DF               	movf	indf2,w,c
  2669  0001BA  0100               	movlb	0	; () banked
  2670  0001BC  6FAB               	movwf	cobs_decode@src_byte& (0+255),b
  2671                           
  2672                           ; BSR set to: 0
  2673  0001BE  4A1F               	infsnz	cobs_decode@src_ptr,f,c
  2674  0001C0  2A20               	incf	cobs_decode@src_ptr+1,f,c
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;COBS.c: 165: if (src_byte == 0)
  2678  0001C2  0100               	movlb	0	; () banked
  2679  0001C4  51AB               	movf	cobs_decode@src_byte& (0+255),w,b
  2680  0001C6  0100               	movlb	0	; () banked
  2681  0001C8  A4D8               	btfss	status,2,c
  2682  0001CA  D002               	goto	l2637
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;COBS.c: 166: {
  2686                           ;COBS.c: 167: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  2687  0001CC  0100               	movlb	0	; () banked
  2688  0001CE  85B4               	bsf	(cobs_decode@result+2)& (0+255),2,b
  2689  0001D0                     l2637:
  2690                           
  2691                           ; BSR set to: 0
  2692                           ;COBS.c: 168: }
  2693                           ;COBS.c: 169: *dst_write_ptr++ = src_byte;
  2694  0001D0  C0AF  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  2695  0001D4  C0B0  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  2696  0001D8  C0AB  FFDF         	movff	cobs_decode@src_byte,indf2
  2697                           
  2698                           ; BSR set to: 0
  2699  0001DC  0100               	movlb	0	; () banked
  2700  0001DE  4BAF               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  2701  0001E0  2BB0               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  2702                           
  2703                           ; BSR set to: 0
  2704  0001E2  0100               	movlb	0	; () banked
  2705  0001E4  07AC               	decf	cobs_decode@i& (0+255),f,b
  2706  0001E6  D7DF               	goto	l2625
  2707  0001E8                     l2645:
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;COBS.c: 170: }
  2711                           ;COBS.c: 172: if (src_ptr >= src_end_ptr)
  2712  0001E8  0100               	movlb	0	; () banked
  2713  0001EA  51A7               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  2714  0001EC  5C1F               	subwf	cobs_decode@src_ptr,w,c
  2715  0001EE  0100               	movlb	0	; () banked
  2716  0001F0  51A8               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  2717  0001F2  5820               	subwfb	cobs_decode@src_ptr+1,w,c
  2718  0001F4  B0D8               	btfsc	status,0,c
  2719  0001F6  D01C               	goto	l2659
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;COBS.c: 175: }
  2723                           ;COBS.c: 178: if (len_code != 0xFE)
  2724                           
  2725                           ; BSR set to: 0
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;COBS.c: 173: {
  2729                           ;COBS.c: 174: break;
  2730  0001F8  0EFE               	movlw	254
  2731  0001FA  0100               	movlb	0	; () banked
  2732  0001FC  19B1               	xorwf	cobs_decode@len_code& (0+255),w,b
  2733  0001FE  B4D8               	btfsc	status,2,c
  2734  000200  D781               	goto	l2597
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;COBS.c: 179: {
  2738                           ;COBS.c: 180: if (dst_write_ptr >= dst_buf_end_ptr)
  2739  000202  0100               	movlb	0	; () banked
  2740  000204  51A9               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  2741  000206  0100               	movlb	0	; () banked
  2742  000208  5DAF               	subwf	cobs_decode@dst_write_ptr& (0+255),w,b
  2743  00020A  0100               	movlb	0	; () banked
  2744  00020C  51AA               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  2745  00020E  0100               	movlb	0	; () banked
  2746  000210  59B0               	subwfb	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  2747  000212  A0D8               	btfss	status,0,c
  2748  000214  D003               	goto	l2655
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;COBS.c: 181: {
  2752                           ;COBS.c: 182: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  2753  000216  0100               	movlb	0	; () banked
  2754  000218  83B4               	bsf	(cobs_decode@result+2)& (0+255),1,b
  2755                           
  2756                           ;COBS.c: 183: break;
  2757  00021A  D00A               	goto	l2659
  2758  00021C                     l2655:
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;COBS.c: 184: }
  2762                           ;COBS.c: 185: *dst_write_ptr++ = 0;
  2763  00021C  C0AF  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  2764  000220  C0B0  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  2765  000224  0E00               	movlw	0
  2766  000226  6EDF               	movwf	indf2,c
  2767                           
  2768                           ; BSR set to: 0
  2769  000228  0100               	movlb	0	; () banked
  2770  00022A  4BAF               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  2771  00022C  2BB0               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  2772                           
  2773                           ; BSR set to: 0
  2774                           ;COBS.c: 186: }
  2775                           ;COBS.c: 187: }
  2776  00022E  D76A               	goto	l2597
  2777  000230                     l2659:
  2778                           
  2779                           ; BSR set to: 0
  2780                           ;COBS.c: 188: }
  2781                           ;COBS.c: 190: result.out_len = dst_write_ptr - dst_buf_ptr;
  2782  000230  C01B  F023         	movff	cobs_decode@dst_buf_ptr,??_cobs_decode
  2783  000234  C01C  F024         	movff	cobs_decode@dst_buf_ptr+1,??_cobs_decode+1
  2784  000238  1E23               	comf	??_cobs_decode,f,c
  2785  00023A  1E24               	comf	??_cobs_decode+1,f,c
  2786  00023C  4A23               	infsnz	??_cobs_decode,f,c
  2787  00023E  2A24               	incf	??_cobs_decode+1,f,c
  2788  000240  0100               	movlb	0	; () banked
  2789  000242  51AF               	movf	cobs_decode@dst_write_ptr& (0+255),w,b
  2790  000244  2423               	addwf	??_cobs_decode,w,c
  2791  000246  0100               	movlb	0	; () banked
  2792  000248  6FB2               	movwf	cobs_decode@result& (0+255),b
  2793  00024A  0100               	movlb	0	; () banked
  2794  00024C  51B0               	movf	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  2795  00024E  2024               	addwfc	??_cobs_decode+1,w,c
  2796  000250  0100               	movlb	0	; () banked
  2797  000252  6FB3               	movwf	(cobs_decode@result+1)& (0+255),b
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;COBS.c: 192: return result;
  2801  000254  C0B2  F01B         	movff	cobs_decode@result,?_cobs_decode
  2802  000258  C0B3  F01C         	movff	cobs_decode@result+1,?_cobs_decode+1
  2803  00025C  C0B4  F01D         	movff	cobs_decode@result+2,?_cobs_decode+2
  2804  000260  0012               	return	
  2805  000262                     __end_of_cobs_decode:
  2806                           	opt stack 0
  2807                           tblptru	equ	0xFF8
  2808                           tblptrh	equ	0xFF7
  2809                           tblptrl	equ	0xFF6
  2810                           tablat	equ	0xFF5
  2811                           postinc0	equ	0xFEE
  2812                           wreg	equ	0xFE8
  2813                           indf1	equ	0xFE7
  2814                           postdec1	equ	0xFE5
  2815                           fsr1h	equ	0xFE2
  2816                           fsr1l	equ	0xFE1
  2817                           indf2	equ	0xFDF
  2818                           postinc2	equ	0xFDE
  2819                           postdec2	equ	0xFDD
  2820                           plusw2	equ	0xFDB
  2821                           fsr2h	equ	0xFDA
  2822                           fsr2l	equ	0xFD9
  2823                           status	equ	0xFD8
  2824                           
  2825 ;; *************** function _Receive_get *****************
  2826 ;; Defined at:
  2827 ;;		line 125 in file "UART.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;		None
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;		None
  2832 ;; Return value:  Size  Location     Type
  2833 ;;                  1    wreg      unsigned char 
  2834 ;; Registers used:
  2835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/0
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2841 ;;      Params:         0       0       0       0       0       0       0
  2842 ;;      Locals:         0       0       0       0       0       0       0
  2843 ;;      Temps:          0       0       0       0       0       0       0
  2844 ;;      Totals:         0       0       0       0       0       0       0
  2845 ;;Total ram usage:        0 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:    6
  2848 ;; This function calls:
  2849 ;;		_UART_buff_get
  2850 ;; This function is called by:
  2851 ;;		_ComStart
  2852 ;;		_receiveData
  2853 ;;		_getch
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           	psect	text11
  2858  000EE4                     __ptext11:
  2859                           	opt stack 0
  2860  000EE4                     _Receive_get:
  2861                           	opt stack 22
  2862                           
  2863                           ;UART.c: 126: return UART_buff_get(&input_buffer);
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;incstack = 0
  2867  000EE4  0E00               	movlw	low _input_buffer
  2868  000EE6  6E21               	movwf	UART_buff_get@_this,c
  2869  000EE8  0E01               	movlw	high _input_buffer
  2870  000EEA  6E22               	movwf	UART_buff_get@_this+1,c
  2871  000EEC  ECCC  F004         	call	_UART_buff_get	;wreg free
  2872  000EF0  0012               	return	
  2873  000EF2                     __end_of_Receive_get:
  2874                           	opt stack 0
  2875                           tblptru	equ	0xFF8
  2876                           tblptrh	equ	0xFF7
  2877                           tblptrl	equ	0xFF6
  2878                           tablat	equ	0xFF5
  2879                           postinc0	equ	0xFEE
  2880                           wreg	equ	0xFE8
  2881                           indf1	equ	0xFE7
  2882                           postdec1	equ	0xFE5
  2883                           fsr1h	equ	0xFE2
  2884                           fsr1l	equ	0xFE1
  2885                           indf2	equ	0xFDF
  2886                           postinc2	equ	0xFDE
  2887                           postdec2	equ	0xFDD
  2888                           plusw2	equ	0xFDB
  2889                           fsr2h	equ	0xFDA
  2890                           fsr2l	equ	0xFD9
  2891                           status	equ	0xFD8
  2892                           
  2893 ;; *************** function _UART_buff_get *****************
  2894 ;; Defined at:
  2895 ;;		line 80 in file "UART.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  2898 ;;		 -> output_buffer(206), input_buffer(206), 
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;  c               1   36[COMRAM] unsigned char 
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      unsigned char 
  2903 ;; Registers used:
  2904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2910 ;;      Params:         2       0       0       0       0       0       0
  2911 ;;      Locals:         1       0       0       0       0       0       0
  2912 ;;      Temps:          2       0       0       0       0       0       0
  2913 ;;      Totals:         5       0       0       0       0       0       0
  2914 ;;Total ram usage:        5 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    5
  2917 ;; This function calls:
  2918 ;;		_UART_buff_modulo_inc
  2919 ;; This function is called by:
  2920 ;;		_Receive_get
  2921 ;;		_Send_put
  2922 ;; This function uses a non-reentrant model
  2923 ;;
  2924                           
  2925                           	psect	text12
  2926  000998                     __ptext12:
  2927                           	opt stack 0
  2928  000998                     _UART_buff_get:
  2929                           	opt stack 21
  2930                           
  2931                           ;UART.c: 81: unsigned char c;
  2932                           ;UART.c: 82: if (_this->count > 0) {
  2933                           
  2934                           ;incstack = 0
  2935  000998  EE20 F0CC          	lfsr	2,204
  2936  00099C  5021               	movf	UART_buff_get@_this,w,c
  2937  00099E  26D9               	addwf	fsr2l,f,c
  2938  0009A0  5022               	movf	UART_buff_get@_this+1,w,c
  2939  0009A2  22DA               	addwfc	fsr2h,f,c
  2940  0009A4  0E01               	movlw	1
  2941  0009A6  BEDB               	btfsc	plusw2,7,c
  2942  0009A8  D03C               	goto	l2407
  2943  0009AA  0E01               	movlw	1
  2944  0009AC  50DB               	movf	plusw2,w,c
  2945  0009AE  E103               	bnz	u1590
  2946  0009B0  04DE               	decf	postinc2,w,c
  2947  0009B2  A0D8               	btfss	status,0,c
  2948  0009B4  D036               	goto	l2407
  2949  0009B6                     u1590:
  2950                           
  2951                           ;UART.c: 83: c = _this->buf[_this->tail];
  2952  0009B6  EE20 F0CA          	lfsr	2,202
  2953  0009BA  5021               	movf	UART_buff_get@_this,w,c
  2954  0009BC  26D9               	addwf	fsr2l,f,c
  2955  0009BE  5022               	movf	UART_buff_get@_this+1,w,c
  2956  0009C0  22DA               	addwfc	fsr2h,f,c
  2957  0009C2  CFDE F023          	movff	postinc2,??_UART_buff_get
  2958  0009C6  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  2959  0009CA  5023               	movf	??_UART_buff_get,w,c
  2960  0009CC  2421               	addwf	UART_buff_get@_this,w,c
  2961  0009CE  6ED9               	movwf	fsr2l,c
  2962  0009D0  5024               	movf	??_UART_buff_get+1,w,c
  2963  0009D2  2022               	addwfc	UART_buff_get@_this+1,w,c
  2964  0009D4  6EDA               	movwf	fsr2h,c
  2965  0009D6  50DF               	movf	indf2,w,c
  2966  0009D8  6E25               	movwf	UART_buff_get@c,c
  2967                           
  2968                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  2969  0009DA  EE20 F0CA          	lfsr	2,202
  2970  0009DE  5021               	movf	UART_buff_get@_this,w,c
  2971  0009E0  26D9               	addwf	fsr2l,f,c
  2972  0009E2  5022               	movf	UART_buff_get@_this+1,w,c
  2973  0009E4  22DA               	addwfc	fsr2h,f,c
  2974  0009E6  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  2975  0009EA  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  2976  0009EE  0E00               	movlw	0
  2977  0009F0  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  2978  0009F2  0EC8               	movlw	200
  2979  0009F4  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  2980  0009F6  ECB8  F006         	call	_UART_buff_modulo_inc	;wreg free
  2981  0009FA  EE20 F0CA          	lfsr	2,202
  2982  0009FE  5021               	movf	UART_buff_get@_this,w,c
  2983  000A00  26D9               	addwf	fsr2l,f,c
  2984  000A02  5022               	movf	UART_buff_get@_this+1,w,c
  2985  000A04  22DA               	addwfc	fsr2h,f,c
  2986  000A06  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  2987  000A0A  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  2988                           
  2989                           ;UART.c: 85: --_this->count;
  2990  000A0E  EE20 F0CC          	lfsr	2,204
  2991  000A12  5021               	movf	UART_buff_get@_this,w,c
  2992  000A14  26D9               	addwf	fsr2l,f,c
  2993  000A16  5022               	movf	UART_buff_get@_this+1,w,c
  2994  000A18  22DA               	addwfc	fsr2h,f,c
  2995  000A1A  06DE               	decf	postinc2,f,c
  2996  000A1C  0E00               	movlw	0
  2997  000A1E  5ADD               	subwfb	postdec2,f,c
  2998                           
  2999                           ;UART.c: 86: } else {
  3000  000A20  D002               	goto	l289
  3001  000A22                     l2407:
  3002                           
  3003                           ;UART.c: 87: c = 0;
  3004  000A22  0E00               	movlw	0
  3005  000A24  6E25               	movwf	UART_buff_get@c,c
  3006  000A26                     l289:
  3007                           
  3008                           ;UART.c: 88: }
  3009                           ;UART.c: 89: return (c);
  3010  000A26  5025               	movf	UART_buff_get@c,w,c
  3011  000A28  0012               	return	
  3012  000A2A                     __end_of_UART_buff_get:
  3013                           	opt stack 0
  3014                           tblptru	equ	0xFF8
  3015                           tblptrh	equ	0xFF7
  3016                           tblptrl	equ	0xFF6
  3017                           tablat	equ	0xFF5
  3018                           postinc0	equ	0xFEE
  3019                           wreg	equ	0xFE8
  3020                           indf1	equ	0xFE7
  3021                           postdec1	equ	0xFE5
  3022                           fsr1h	equ	0xFE2
  3023                           fsr1l	equ	0xFE1
  3024                           indf2	equ	0xFDF
  3025                           postinc2	equ	0xFDE
  3026                           postdec2	equ	0xFDD
  3027                           plusw2	equ	0xFDB
  3028                           fsr2h	equ	0xFDA
  3029                           fsr2l	equ	0xFD9
  3030                           status	equ	0xFD8
  3031                           
  3032 ;; *************** function _UART_buff_modulo_inc *****************
  3033 ;; Defined at:
  3034 ;;		line 105 in file "UART.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;  value           2   26[COMRAM] const unsigned int 
  3037 ;;  modulus         2   28[COMRAM] const unsigned int 
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;  my_value        2   30[COMRAM] unsigned int 
  3040 ;; Return value:  Size  Location     Type
  3041 ;;                  2   26[COMRAM] unsigned int 
  3042 ;; Registers used:
  3043 ;;		wreg, status,2, status,0
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 0/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3049 ;;      Params:         4       0       0       0       0       0       0
  3050 ;;      Locals:         2       0       0       0       0       0       0
  3051 ;;      Temps:          0       0       0       0       0       0       0
  3052 ;;      Totals:         6       0       0       0       0       0       0
  3053 ;;Total ram usage:        6 bytes
  3054 ;; Hardware stack levels used:    1
  3055 ;; Hardware stack levels required when called:    4
  3056 ;; This function calls:
  3057 ;;		Nothing
  3058 ;; This function is called by:
  3059 ;;		_UART_buff_put
  3060 ;;		_UART_buff_get
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           	psect	text13
  3065  000D70                     __ptext13:
  3066                           	opt stack 0
  3067  000D70                     _UART_buff_modulo_inc:
  3068                           	opt stack 21
  3069                           
  3070                           ;UART.c: 106: unsigned int my_value = value + 1;
  3071                           
  3072                           ;incstack = 0
  3073  000D70  0E01               	movlw	1
  3074  000D72  241B               	addwf	UART_buff_modulo_inc@value,w,c
  3075  000D74  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  3076  000D76  0E00               	movlw	0
  3077  000D78  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  3078  000D7A  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  3079                           
  3080                           ;UART.c: 107: if (my_value >= modulus) {
  3081  000D7C  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  3082  000D7E  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  3083  000D80  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  3084  000D82  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  3085  000D84  A0D8               	btfss	status,0,c
  3086  000D86  D004               	goto	l2381
  3087                           
  3088                           ;UART.c: 108: my_value = 0;
  3089  000D88  0E00               	movlw	0
  3090  000D8A  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  3091  000D8C  0E00               	movlw	0
  3092  000D8E  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  3093  000D90                     l2381:
  3094                           
  3095                           ;UART.c: 109: }
  3096                           ;UART.c: 110: return (my_value);
  3097  000D90  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  3098  000D94  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  3099  000D98  0012               	return	
  3100  000D9A                     __end_of_UART_buff_modulo_inc:
  3101                           	opt stack 0
  3102                           tblptru	equ	0xFF8
  3103                           tblptrh	equ	0xFF7
  3104                           tblptrl	equ	0xFF6
  3105                           tablat	equ	0xFF5
  3106                           postinc0	equ	0xFEE
  3107                           wreg	equ	0xFE8
  3108                           indf1	equ	0xFE7
  3109                           postdec1	equ	0xFE5
  3110                           fsr1h	equ	0xFE2
  3111                           fsr1l	equ	0xFE1
  3112                           indf2	equ	0xFDF
  3113                           postinc2	equ	0xFDE
  3114                           postdec2	equ	0xFDD
  3115                           plusw2	equ	0xFDB
  3116                           fsr2h	equ	0xFDA
  3117                           fsr2l	equ	0xFD9
  3118                           status	equ	0xFD8
  3119                           
  3120 ;; *************** function _Receive_available *****************
  3121 ;; Defined at:
  3122 ;;		line 121 in file "UART.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;		None
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;		None
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  2   28[COMRAM] int 
  3129 ;; Registers used:
  3130 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3136 ;;      Params:         2       0       0       0       0       0       0
  3137 ;;      Locals:         0       0       0       0       0       0       0
  3138 ;;      Temps:          0       0       0       0       0       0       0
  3139 ;;      Totals:         2       0       0       0       0       0       0
  3140 ;;Total ram usage:        2 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:    5
  3143 ;; This function calls:
  3144 ;;		_UART_buff_size
  3145 ;; This function is called by:
  3146 ;;		_ComStart
  3147 ;;		_receiveData
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           	psect	text14
  3152  000E7E                     __ptext14:
  3153                           	opt stack 0
  3154  000E7E                     _Receive_available:
  3155                           	opt stack 23
  3156                           
  3157                           ;UART.c: 122: return UART_buff_size(&input_buffer);
  3158                           
  3159                           ;incstack = 0
  3160  000E7E  0E00               	movlw	low _input_buffer
  3161  000E80  6E1B               	movwf	UART_buff_size@_this,c
  3162  000E82  0E01               	movlw	high _input_buffer
  3163  000E84  6E1C               	movwf	UART_buff_size@_this+1,c
  3164  000E86  EC4A  F007         	call	_UART_buff_size	;wreg free
  3165  000E8A  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  3166  000E8E  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  3167  000E92  0012               	return	
  3168  000E94                     __end_of_Receive_available:
  3169                           	opt stack 0
  3170                           tblptru	equ	0xFF8
  3171                           tblptrh	equ	0xFF7
  3172                           tblptrl	equ	0xFF6
  3173                           tablat	equ	0xFF5
  3174                           postinc0	equ	0xFEE
  3175                           wreg	equ	0xFE8
  3176                           indf1	equ	0xFE7
  3177                           postdec1	equ	0xFE5
  3178                           fsr1h	equ	0xFE2
  3179                           fsr1l	equ	0xFE1
  3180                           indf2	equ	0xFDF
  3181                           postinc2	equ	0xFDE
  3182                           postdec2	equ	0xFDD
  3183                           plusw2	equ	0xFDB
  3184                           fsr2h	equ	0xFDA
  3185                           fsr2l	equ	0xFD9
  3186                           status	equ	0xFD8
  3187                           
  3188 ;; *************** function _UART_buff_size *****************
  3189 ;; Defined at:
  3190 ;;		line 101 in file "UART.c"
  3191 ;; Parameters:    Size  Location     Type
  3192 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3193 ;;		 -> output_buffer(206), input_buffer(206), 
  3194 ;; Auto vars:     Size  Location     Type
  3195 ;;		None
  3196 ;; Return value:  Size  Location     Type
  3197 ;;                  2   26[COMRAM] int 
  3198 ;; Registers used:
  3199 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3200 ;; Tracked objects:
  3201 ;;		On entry : 0/0
  3202 ;;		On exit  : 0/0
  3203 ;;		Unchanged: 0/0
  3204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3205 ;;      Params:         2       0       0       0       0       0       0
  3206 ;;      Locals:         0       0       0       0       0       0       0
  3207 ;;      Temps:          0       0       0       0       0       0       0
  3208 ;;      Totals:         2       0       0       0       0       0       0
  3209 ;;Total ram usage:        2 bytes
  3210 ;; Hardware stack levels used:    1
  3211 ;; Hardware stack levels required when called:    4
  3212 ;; This function calls:
  3213 ;;		Nothing
  3214 ;; This function is called by:
  3215 ;;		_Receive_available
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           	psect	text15
  3220  000E94                     __ptext15:
  3221                           	opt stack 0
  3222  000E94                     _UART_buff_size:
  3223                           	opt stack 23
  3224                           
  3225                           ;UART.c: 102: return (_this->count);
  3226                           
  3227                           ;incstack = 0
  3228  000E94  EE20 F0CC          	lfsr	2,204
  3229  000E98  501B               	movf	UART_buff_size@_this,w,c
  3230  000E9A  26D9               	addwf	fsr2l,f,c
  3231  000E9C  501C               	movf	UART_buff_size@_this+1,w,c
  3232  000E9E  22DA               	addwfc	fsr2h,f,c
  3233  000EA0  CFDE F01B          	movff	postinc2,?_UART_buff_size
  3234  000EA4  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  3235  000EA8  0012               	return	
  3236  000EAA                     __end_of_UART_buff_size:
  3237                           	opt stack 0
  3238                           tblptru	equ	0xFF8
  3239                           tblptrh	equ	0xFF7
  3240                           tblptrl	equ	0xFF6
  3241                           tablat	equ	0xFF5
  3242                           postinc0	equ	0xFEE
  3243                           wreg	equ	0xFE8
  3244                           indf1	equ	0xFE7
  3245                           postdec1	equ	0xFE5
  3246                           fsr1h	equ	0xFE2
  3247                           fsr1l	equ	0xFE1
  3248                           indf2	equ	0xFDF
  3249                           postinc2	equ	0xFDE
  3250                           postdec2	equ	0xFDD
  3251                           plusw2	equ	0xFDB
  3252                           fsr2h	equ	0xFDA
  3253                           fsr2l	equ	0xFD9
  3254                           status	equ	0xFD8
  3255                           
  3256 ;; *************** function _CRC8 *****************
  3257 ;; Defined at:
  3258 ;;		line 93 in file "FastTransfer.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;  data            2   26[COMRAM] PTR const unsigned char 
  3261 ;;		 -> CRCcheck@arrayHolder(3), ProcessArray(30), sendData@SendArray(30), 
  3262 ;;  len             1   28[COMRAM] unsigned char 
  3263 ;; Auto vars:     Size  Location     Type
  3264 ;;  sum             1   29[COMRAM] unsigned char 
  3265 ;;  tempI           1   31[COMRAM] unsigned char 
  3266 ;;  extract         1   30[COMRAM] unsigned char 
  3267 ;;  crc             1   32[COMRAM] unsigned char 
  3268 ;; Return value:  Size  Location     Type
  3269 ;;                  1    wreg      unsigned char 
  3270 ;; Registers used:
  3271 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3272 ;; Tracked objects:
  3273 ;;		On entry : 0/0
  3274 ;;		On exit  : 0/0
  3275 ;;		Unchanged: 0/0
  3276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3277 ;;      Params:         3       0       0       0       0       0       0
  3278 ;;      Locals:         4       0       0       0       0       0       0
  3279 ;;      Temps:          0       0       0       0       0       0       0
  3280 ;;      Totals:         7       0       0       0       0       0       0
  3281 ;;Total ram usage:        7 bytes
  3282 ;; Hardware stack levels used:    1
  3283 ;; Hardware stack levels required when called:    4
  3284 ;; This function calls:
  3285 ;;		Nothing
  3286 ;; This function is called by:
  3287 ;;		_sendData
  3288 ;;		_receiveData
  3289 ;;		_CRCcheck
  3290 ;; This function uses a non-reentrant model
  3291 ;;
  3292                           
  3293                           	psect	text16
  3294  000BF2                     __ptext16:
  3295                           	opt stack 0
  3296  000BF2                     _CRC8:
  3297                           	opt stack 23
  3298                           
  3299                           ;FastTransfer.c: 94: unsigned char crc = 0x00;
  3300                           
  3301                           ;incstack = 0
  3302  000BF2  0E00               	movlw	0
  3303  000BF4  6E21               	movwf	CRC8@crc,c
  3304                           
  3305                           ;FastTransfer.c: 95: while (len--) {
  3306  000BF6  D01C               	goto	l2429
  3307  000BF8                     l2413:
  3308                           
  3309                           ;FastTransfer.c: 96: unsigned char extract = *data++;
  3310  000BF8  C01B  FFD9         	movff	CRC8@data,fsr2l
  3311  000BFC  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  3312  000C00  50DF               	movf	indf2,w,c
  3313  000C02  6E1F               	movwf	CRC8@extract,c
  3314  000C04  4A1B               	infsnz	CRC8@data,f,c
  3315  000C06  2A1C               	incf	CRC8@data+1,f,c
  3316                           
  3317                           ;FastTransfer.c: 97: unsigned char tempI;
  3318                           ;FastTransfer.c: 98: for (tempI = 8; tempI; tempI--) {
  3319  000C08  0E08               	movlw	8
  3320  000C0A  6E20               	movwf	CRC8@tempI,c
  3321  000C0C  D00E               	goto	l2427
  3322  000C0E                     l2419:
  3323                           
  3324                           ;FastTransfer.c: 99: unsigned char sum = (crc ^ extract) & 0x01;
  3325  000C0E  5021               	movf	CRC8@crc,w,c
  3326  000C10  181F               	xorwf	CRC8@extract,w,c
  3327  000C12  0B01               	andlw	1
  3328  000C14  6E1E               	movwf	CRC8@sum,c
  3329                           
  3330                           ;FastTransfer.c: 100: crc >>= 1;
  3331  000C16  90D8               	bcf	status,0,c
  3332  000C18  3221               	rrcf	CRC8@crc,f,c
  3333                           
  3334                           ;FastTransfer.c: 101: if (sum) {
  3335  000C1A  501E               	movf	CRC8@sum,w,c
  3336  000C1C  B4D8               	btfsc	status,2,c
  3337  000C1E  D002               	goto	l124
  3338                           
  3339                           ;FastTransfer.c: 102: crc ^= 0x8C;
  3340  000C20  0E8C               	movlw	140
  3341  000C22  1A21               	xorwf	CRC8@crc,f,c
  3342  000C24                     l124:
  3343                           
  3344                           ;FastTransfer.c: 103: }
  3345                           ;FastTransfer.c: 104: extract >>= 1;
  3346  000C24  90D8               	bcf	status,0,c
  3347  000C26  321F               	rrcf	CRC8@extract,f,c
  3348  000C28  0620               	decf	CRC8@tempI,f,c
  3349  000C2A                     l2427:
  3350  000C2A  5020               	movf	CRC8@tempI,w,c
  3351  000C2C  A4D8               	btfss	status,2,c
  3352  000C2E  D7EF               	goto	l2419
  3353  000C30                     l2429:
  3354  000C30  061D               	decf	CRC8@len,f,c
  3355  000C32  281D               	incf	CRC8@len,w,c
  3356  000C34  A4D8               	btfss	status,2,c
  3357  000C36  D7E0               	goto	l2413
  3358                           
  3359                           ;FastTransfer.c: 105: }
  3360                           ;FastTransfer.c: 106: }
  3361                           ;FastTransfer.c: 107: return crc;
  3362  000C38  5021               	movf	CRC8@crc,w,c
  3363  000C3A  0012               	return	
  3364  000C3C                     __end_of_CRC8:
  3365                           	opt stack 0
  3366                           tblptru	equ	0xFF8
  3367                           tblptrh	equ	0xFF7
  3368                           tblptrl	equ	0xFF6
  3369                           tablat	equ	0xFF5
  3370                           postinc0	equ	0xFEE
  3371                           wreg	equ	0xFE8
  3372                           indf1	equ	0xFE7
  3373                           postdec1	equ	0xFE5
  3374                           fsr1h	equ	0xFE2
  3375                           fsr1l	equ	0xFE1
  3376                           indf2	equ	0xFDF
  3377                           postinc2	equ	0xFDE
  3378                           postdec2	equ	0xFDD
  3379                           plusw2	equ	0xFDB
  3380                           fsr2h	equ	0xFDA
  3381                           fsr2l	equ	0xFD9
  3382                           status	equ	0xFD8
  3383                           
  3384 ;; *************** function _Start *****************
  3385 ;; Defined at:
  3386 ;;		line 50 in file "Function.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;		None
  3389 ;; Auto vars:     Size  Location     Type
  3390 ;;		None
  3391 ;; Return value:  Size  Location     Type
  3392 ;;                  1    wreg      void 
  3393 ;; Registers used:
  3394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3395 ;; Tracked objects:
  3396 ;;		On entry : 0/0
  3397 ;;		On exit  : 0/0
  3398 ;;		Unchanged: 0/0
  3399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3400 ;;      Params:         0       0       0       0       0       0       0
  3401 ;;      Locals:         0       0       0       0       0       0       0
  3402 ;;      Temps:          0       0       0       0       0       0       0
  3403 ;;      Totals:         0       0       0       0       0       0       0
  3404 ;;Total ram usage:        0 bytes
  3405 ;; Hardware stack levels used:    1
  3406 ;; Hardware stack levels required when called:    8
  3407 ;; This function calls:
  3408 ;;		_ComStart
  3409 ;;		_INTERRUPT_Initialize
  3410 ;;		_TMR0_Initialize
  3411 ;; This function is called by:
  3412 ;;		_main
  3413 ;; This function uses a non-reentrant model
  3414 ;;
  3415                           
  3416                           	psect	text17
  3417  000B9C                     __ptext17:
  3418                           	opt stack 0
  3419  000B9C                     _Start:
  3420                           	opt stack 22
  3421                           
  3422                           ;Function.c: 115: TRISCbits.TRISC5 = 1;
  3423                           
  3424                           ;incstack = 0
  3425  000B9C  8A94               	bsf	3988,5,c	;volatile
  3426                           
  3427                           ;Function.c: 116: TRISCbits.TRISC4 = 1;
  3428  000B9E  8894               	bsf	3988,4,c	;volatile
  3429                           
  3430                           ;Function.c: 117: TRISDbits.TRISD3 = 1;
  3431  000BA0  8695               	bsf	3989,3,c	;volatile
  3432                           
  3433                           ;Function.c: 118: TRISDbits.TRISD2 = 1;
  3434  000BA2  8495               	bsf	3989,2,c	;volatile
  3435                           
  3436                           ;Function.c: 119: TRISDbits.TRISD1 = 1;
  3437  000BA4  8295               	bsf	3989,1,c	;volatile
  3438                           
  3439                           ;Function.c: 120: TRISDbits.TRISD0 = 1;
  3440  000BA6  8095               	bsf	3989,0,c	;volatile
  3441                           
  3442                           ;Function.c: 121: TRISCbits.TRISC3 = 1;
  3443  000BA8  8694               	bsf	3988,3,c	;volatile
  3444                           
  3445                           ;Function.c: 122: TRISCbits.TRISC2 = 1;
  3446  000BAA  8494               	bsf	3988,2,c	;volatile
  3447                           
  3448                           ;Function.c: 123: TRISCbits.TRISC1 = 1;
  3449  000BAC  8294               	bsf	3988,1,c	;volatile
  3450                           
  3451                           ;Function.c: 124: TRISAbits.TRISA7 = 1;
  3452  000BAE  8E92               	bsf	3986,7,c	;volatile
  3453                           
  3454                           ;Function.c: 125: TRISCbits.TRISC0 = 1;
  3455  000BB0  8094               	bsf	3988,0,c	;volatile
  3456                           
  3457                           ;Function.c: 126: TRISAbits.TRISA4 = 1;
  3458  000BB2  8892               	bsf	3986,4,c	;volatile
  3459                           
  3460                           ;Function.c: 127: TRISAbits.TRISA6 = 1;
  3461  000BB4  8C92               	bsf	3986,6,c	;volatile
  3462                           
  3463                           ;Function.c: 130: TRISAbits.TRISA3 = 0;
  3464  000BB6  9692               	bcf	3986,3,c	;volatile
  3465                           
  3466                           ;Function.c: 131: TRISDbits.TRISD4 = 0;
  3467  000BB8  9895               	bcf	3989,4,c	;volatile
  3468                           
  3469                           ;Function.c: 136: ANSELA = 0;
  3470  000BBA  0E00               	movlw	0
  3471  000BBC  010F               	movlb	15	; () banked
  3472  000BBE  6F38               	movwf	56,b	;volatile
  3473                           
  3474                           ;Function.c: 137: ANSELB = 0;
  3475  000BC0  0E00               	movlw	0
  3476  000BC2  010F               	movlb	15	; () banked
  3477  000BC4  6F39               	movwf	57,b	;volatile
  3478                           
  3479                           ;Function.c: 138: ANSELC = 0;
  3480  000BC6  0E00               	movlw	0
  3481  000BC8  010F               	movlb	15	; () banked
  3482  000BCA  6F3A               	movwf	58,b	;volatile
  3483                           
  3484                           ;Function.c: 139: ANSELD = 0;
  3485  000BCC  0E00               	movlw	0
  3486  000BCE  010F               	movlb	15	; () banked
  3487  000BD0  6F3B               	movwf	59,b	;volatile
  3488                           
  3489                           ;Function.c: 140: ANSELE = 0;
  3490  000BD2  0E00               	movlw	0
  3491  000BD4  010F               	movlb	15	; () banked
  3492  000BD6  6F3C               	movwf	60,b	;volatile
  3493                           
  3494                           ;Function.c: 144: OSCCON = 0x72;
  3495  000BD8  0E72               	movlw	114
  3496  000BDA  6ED3               	movwf	4051,c	;volatile
  3497                           
  3498                           ;Function.c: 146: OSCCON2 = 0x04;
  3499  000BDC  0E04               	movlw	4
  3500  000BDE  6ED2               	movwf	4050,c	;volatile
  3501                           
  3502                           ;Function.c: 148: OSCTUNE = 0x00;
  3503  000BE0  0E00               	movlw	0
  3504  000BE2  6E9B               	movwf	3995,c	;volatile
  3505                           
  3506                           ; BSR set to: 15
  3507                           ;Function.c: 151: ComStart();
  3508  000BE4  ECA2  F005         	call	_ComStart	;wreg free
  3509                           
  3510                           ;Function.c: 152: INTERRUPT_Initialize();
  3511  000BE8  EC28  F007         	call	_INTERRUPT_Initialize	;wreg free
  3512                           
  3513                           ;Function.c: 153: TMR0_Initialize();
  3514  000BEC  ECE2  F006         	call	_TMR0_Initialize	;wreg free
  3515  000BF0  0012               	return		;funcret
  3516  000BF2                     __end_of_Start:
  3517                           	opt stack 0
  3518                           tblptru	equ	0xFF8
  3519                           tblptrh	equ	0xFF7
  3520                           tblptrl	equ	0xFF6
  3521                           tablat	equ	0xFF5
  3522                           postinc0	equ	0xFEE
  3523                           wreg	equ	0xFE8
  3524                           indf1	equ	0xFE7
  3525                           postdec1	equ	0xFE5
  3526                           fsr1h	equ	0xFE2
  3527                           fsr1l	equ	0xFE1
  3528                           indf2	equ	0xFDF
  3529                           postinc2	equ	0xFDE
  3530                           postdec2	equ	0xFDD
  3531                           plusw2	equ	0xFDB
  3532                           fsr2h	equ	0xFDA
  3533                           fsr2l	equ	0xFD9
  3534                           status	equ	0xFD8
  3535                           
  3536 ;; *************** function _TMR0_Initialize *****************
  3537 ;; Defined at:
  3538 ;;		line 23 in file "tmr0.c"
  3539 ;; Parameters:    Size  Location     Type
  3540 ;;		None
  3541 ;; Auto vars:     Size  Location     Type
  3542 ;;		None
  3543 ;; Return value:  Size  Location     Type
  3544 ;;                  1    wreg      void 
  3545 ;; Registers used:
  3546 ;;		wreg, status,2, cstack
  3547 ;; Tracked objects:
  3548 ;;		On entry : 0/0
  3549 ;;		On exit  : 0/0
  3550 ;;		Unchanged: 0/0
  3551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3552 ;;      Params:         0       0       0       0       0       0       0
  3553 ;;      Locals:         0       0       0       0       0       0       0
  3554 ;;      Temps:          0       0       0       0       0       0       0
  3555 ;;      Totals:         0       0       0       0       0       0       0
  3556 ;;Total ram usage:        0 bytes
  3557 ;; Hardware stack levels used:    1
  3558 ;; Hardware stack levels required when called:    5
  3559 ;; This function calls:
  3560 ;;		_TMR0_StartTimer
  3561 ;; This function is called by:
  3562 ;;		_Start
  3563 ;; This function uses a non-reentrant model
  3564 ;;
  3565                           
  3566                           	psect	text18
  3567  000DC4                     __ptext18:
  3568                           	opt stack 0
  3569  000DC4                     _TMR0_Initialize:
  3570                           	opt stack 24
  3571                           
  3572                           ;tmr0.c: 27: T0CON = 0x94;
  3573                           
  3574                           ;incstack = 0
  3575  000DC4  0E94               	movlw	148
  3576  000DC6  6ED5               	movwf	4053,c	;volatile
  3577                           
  3578                           ;tmr0.c: 30: TMR0H = 0xCF;
  3579  000DC8  0ECF               	movlw	207
  3580  000DCA  6ED7               	movwf	4055,c	;volatile
  3581                           
  3582                           ;tmr0.c: 33: TMR0L = 0x2C;
  3583  000DCC  0E2C               	movlw	44
  3584  000DCE  6ED6               	movwf	4054,c	;volatile
  3585                           
  3586                           ;tmr0.c: 36: timer0ReloadVal16bit = 53036;
  3587  000DD0  0ECF               	movlw	207
  3588  000DD2  6E39               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  3589  000DD4  0E2C               	movlw	44
  3590  000DD6  6E38               	movwf	_timer0ReloadVal16bit,c	;volatile
  3591                           
  3592                           ;tmr0.c: 39: INTCONbits.TMR0IF = 0;
  3593  000DD8  94F2               	bcf	intcon,2,c	;volatile
  3594                           
  3595                           ;tmr0.c: 42: INTCONbits.TMR0IE = 1;
  3596  000DDA  8AF2               	bsf	intcon,5,c	;volatile
  3597                           
  3598                           ;tmr0.c: 45: TMR0_StartTimer();
  3599  000DDC  EC7B  F007         	call	_TMR0_StartTimer	;wreg free
  3600  000DE0  0012               	return		;funcret
  3601  000DE2                     __end_of_TMR0_Initialize:
  3602                           	opt stack 0
  3603                           tblptru	equ	0xFF8
  3604                           tblptrh	equ	0xFF7
  3605                           tblptrl	equ	0xFF6
  3606                           tablat	equ	0xFF5
  3607                           intcon	equ	0xFF2
  3608                           postinc0	equ	0xFEE
  3609                           wreg	equ	0xFE8
  3610                           indf1	equ	0xFE7
  3611                           postdec1	equ	0xFE5
  3612                           fsr1h	equ	0xFE2
  3613                           fsr1l	equ	0xFE1
  3614                           indf2	equ	0xFDF
  3615                           postinc2	equ	0xFDE
  3616                           postdec2	equ	0xFDD
  3617                           plusw2	equ	0xFDB
  3618                           fsr2h	equ	0xFDA
  3619                           fsr2l	equ	0xFD9
  3620                           status	equ	0xFD8
  3621                           
  3622 ;; *************** function _TMR0_StartTimer *****************
  3623 ;; Defined at:
  3624 ;;		line 48 in file "tmr0.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;		None
  3627 ;; Auto vars:     Size  Location     Type
  3628 ;;		None
  3629 ;; Return value:  Size  Location     Type
  3630 ;;                  1    wreg      void 
  3631 ;; Registers used:
  3632 ;;		None
  3633 ;; Tracked objects:
  3634 ;;		On entry : 0/0
  3635 ;;		On exit  : 0/0
  3636 ;;		Unchanged: 0/0
  3637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3638 ;;      Params:         0       0       0       0       0       0       0
  3639 ;;      Locals:         0       0       0       0       0       0       0
  3640 ;;      Temps:          0       0       0       0       0       0       0
  3641 ;;      Totals:         0       0       0       0       0       0       0
  3642 ;;Total ram usage:        0 bytes
  3643 ;; Hardware stack levels used:    1
  3644 ;; Hardware stack levels required when called:    4
  3645 ;; This function calls:
  3646 ;;		Nothing
  3647 ;; This function is called by:
  3648 ;;		_TMR0_Initialize
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651                           
  3652                           	psect	text19
  3653  000EF6                     __ptext19:
  3654                           	opt stack 0
  3655  000EF6                     _TMR0_StartTimer:
  3656                           	opt stack 24
  3657                           
  3658                           ;tmr0.c: 50: T0CONbits.TMR0ON = 1;
  3659                           
  3660                           ;incstack = 0
  3661  000EF6  8ED5               	bsf	4053,7,c	;volatile
  3662  000EF8  0012               	return		;funcret
  3663  000EFA                     __end_of_TMR0_StartTimer:
  3664                           	opt stack 0
  3665                           tblptru	equ	0xFF8
  3666                           tblptrh	equ	0xFF7
  3667                           tblptrl	equ	0xFF6
  3668                           tablat	equ	0xFF5
  3669                           intcon	equ	0xFF2
  3670                           postinc0	equ	0xFEE
  3671                           wreg	equ	0xFE8
  3672                           indf1	equ	0xFE7
  3673                           postdec1	equ	0xFE5
  3674                           fsr1h	equ	0xFE2
  3675                           fsr1l	equ	0xFE1
  3676                           indf2	equ	0xFDF
  3677                           postinc2	equ	0xFDE
  3678                           postdec2	equ	0xFDD
  3679                           plusw2	equ	0xFDB
  3680                           fsr2h	equ	0xFDA
  3681                           fsr2l	equ	0xFD9
  3682                           status	equ	0xFD8
  3683                           
  3684 ;; *************** function _INTERRUPT_Initialize *****************
  3685 ;; Defined at:
  3686 ;;		line 156 in file "Function.c"
  3687 ;; Parameters:    Size  Location     Type
  3688 ;;		None
  3689 ;; Auto vars:     Size  Location     Type
  3690 ;;		None
  3691 ;; Return value:  Size  Location     Type
  3692 ;;                  1    wreg      void 
  3693 ;; Registers used:
  3694 ;;		None
  3695 ;; Tracked objects:
  3696 ;;		On entry : 0/0
  3697 ;;		On exit  : 0/0
  3698 ;;		Unchanged: 0/0
  3699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3700 ;;      Params:         0       0       0       0       0       0       0
  3701 ;;      Locals:         0       0       0       0       0       0       0
  3702 ;;      Temps:          0       0       0       0       0       0       0
  3703 ;;      Totals:         0       0       0       0       0       0       0
  3704 ;;Total ram usage:        0 bytes
  3705 ;; Hardware stack levels used:    1
  3706 ;; Hardware stack levels required when called:    4
  3707 ;; This function calls:
  3708 ;;		Nothing
  3709 ;; This function is called by:
  3710 ;;		_Start
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           	psect	text20
  3715  000E50                     __ptext20:
  3716                           	opt stack 0
  3717  000E50                     _INTERRUPT_Initialize:
  3718                           	opt stack 25
  3719                           
  3720                           ;Function.c: 158: INTCONbits.PEIE = 1;
  3721                           
  3722                           ;incstack = 0
  3723  000E50  8CF2               	bsf	intcon,6,c	;volatile
  3724                           
  3725                           ;Function.c: 159: INTCONbits.GIE = 1;
  3726  000E52  8EF2               	bsf	intcon,7,c	;volatile
  3727                           
  3728                           ;Function.c: 161: RCONbits.IPEN = 0;
  3729  000E54  9ED0               	bcf	4048,7,c	;volatile
  3730                           
  3731                           ;Function.c: 166: IPR1bits.RC1IP = 0;
  3732  000E56  9A9F               	bcf	3999,5,c	;volatile
  3733                           
  3734                           ;Function.c: 168: IPR1bits.TX1IP = 0;
  3735  000E58  989F               	bcf	3999,4,c	;volatile
  3736                           
  3737                           ;Function.c: 171: INTCONbits.TMR0IF = 0;
  3738  000E5A  94F2               	bcf	intcon,2,c	;volatile
  3739                           
  3740                           ;Function.c: 174: INTCONbits.TMR0IE = 1;
  3741  000E5C  8AF2               	bsf	intcon,5,c	;volatile
  3742                           
  3743                           ;Function.c: 176: IPR1bits.ADIP = 0;
  3744  000E5E  9C9F               	bcf	3999,6,c	;volatile
  3745                           
  3746                           ;Function.c: 178: IPR1bits.SSP1IP = 0;
  3747  000E60  969F               	bcf	3999,3,c	;volatile
  3748                           
  3749                           ;Function.c: 180: IPR2bits.BCL1IP = 0;
  3750  000E62  96A2               	bcf	4002,3,c	;volatile
  3751                           
  3752                           ;Function.c: 181: IPR1bits.TMR2IP=0;
  3753  000E64  929F               	bcf	3999,1,c	;volatile
  3754  000E66  0012               	return		;funcret
  3755  000E68                     __end_of_INTERRUPT_Initialize:
  3756                           	opt stack 0
  3757                           tblptru	equ	0xFF8
  3758                           tblptrh	equ	0xFF7
  3759                           tblptrl	equ	0xFF6
  3760                           tablat	equ	0xFF5
  3761                           intcon	equ	0xFF2
  3762                           postinc0	equ	0xFEE
  3763                           wreg	equ	0xFE8
  3764                           indf1	equ	0xFE7
  3765                           postdec1	equ	0xFE5
  3766                           fsr1h	equ	0xFE2
  3767                           fsr1l	equ	0xFE1
  3768                           indf2	equ	0xFDF
  3769                           postinc2	equ	0xFDE
  3770                           postdec2	equ	0xFDD
  3771                           plusw2	equ	0xFDB
  3772                           fsr2h	equ	0xFDA
  3773                           fsr2l	equ	0xFD9
  3774                           status	equ	0xFD8
  3775                           
  3776 ;; *************** function _ComStart *****************
  3777 ;; Defined at:
  3778 ;;		line 12 in file "Communications.c"
  3779 ;; Parameters:    Size  Location     Type
  3780 ;;		None
  3781 ;; Auto vars:     Size  Location     Type
  3782 ;;		None
  3783 ;; Return value:  Size  Location     Type
  3784 ;;                  1    wreg      void 
  3785 ;; Registers used:
  3786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3787 ;; Tracked objects:
  3788 ;;		On entry : 0/0
  3789 ;;		On exit  : 0/0
  3790 ;;		Unchanged: 0/0
  3791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3792 ;;      Params:         0       0       0       0       0       0       0
  3793 ;;      Locals:         0       0       0       0       0       0       0
  3794 ;;      Temps:          0       0       0       0       0       0       0
  3795 ;;      Totals:         0       0       0       0       0       0       0
  3796 ;;Total ram usage:        0 bytes
  3797 ;; Hardware stack levels used:    1
  3798 ;; Hardware stack levels required when called:    7
  3799 ;; This function calls:
  3800 ;;		_EUSART1_Initialize
  3801 ;;		_begin
  3802 ;; This function is called by:
  3803 ;;		_Start
  3804 ;; This function uses a non-reentrant model
  3805 ;;
  3806                           
  3807                           	psect	text21
  3808  000B44                     __ptext21:
  3809                           	opt stack 0
  3810  000B44                     _ComStart:
  3811                           	opt stack 22
  3812                           
  3813                           ;Communications.c: 13: EUSART1_Initialize();
  3814                           
  3815                           ;incstack = 0
  3816  000B44  EC1E  F006         	call	_EUSART1_Initialize	;wreg free
  3817                           
  3818                           ;Communications.c: 14: begin(receiveArray, sizeof (receiveArray), 8, 0, Send_put, Receiv
      +                          e_get, Receive_available, Receive_peek);
  3819  000B48  0E9D               	movlw	low _receiveArray
  3820  000B4A  0100               	movlb	0	; () banked
  3821  000B4C  6FA7               	movwf	begin@ptr& (0+255),b
  3822  000B4E  0E00               	movlw	high _receiveArray
  3823  000B50  0100               	movlb	0	; () banked
  3824  000B52  6FA8               	movwf	(begin@ptr+1)& (0+255),b
  3825  000B54  0E0A               	movlw	10
  3826  000B56  0100               	movlb	0	; () banked
  3827  000B58  6FA9               	movwf	begin@maxSize& (0+255),b
  3828  000B5A  0E08               	movlw	8
  3829  000B5C  0100               	movlb	0	; () banked
  3830  000B5E  6FAA               	movwf	begin@givenAddress& (0+255),b
  3831  000B60  0E00               	movlw	0
  3832  000B62  0100               	movlb	0	; () banked
  3833  000B64  6FAB               	movwf	begin@error& (0+255),b
  3834  000B66  0E14               	movlw	low _Send_put
  3835  000B68  0100               	movlb	0	; () banked
  3836  000B6A  6FAC               	movwf	begin@stufftosend& (0+255),b
  3837  000B6C  0E0D               	movlw	high _Send_put
  3838  000B6E  0100               	movlb	0	; () banked
  3839  000B70  6FAD               	movwf	(begin@stufftosend+1)& (0+255),b
  3840  000B72  0EE4               	movlw	low _Receive_get
  3841  000B74  0100               	movlb	0	; () banked
  3842  000B76  6FAE               	movwf	begin@stufftoreceive& (0+255),b
  3843  000B78  0E0E               	movlw	high _Receive_get
  3844  000B7A  0100               	movlb	0	; () banked
  3845  000B7C  6FAF               	movwf	(begin@stufftoreceive+1)& (0+255),b
  3846  000B7E  0E7E               	movlw	low _Receive_available
  3847  000B80  0100               	movlb	0	; () banked
  3848  000B82  6FB0               	movwf	begin@stuffavailable& (0+255),b
  3849  000B84  0E0E               	movlw	high _Receive_available
  3850  000B86  0100               	movlb	0	; () banked
  3851  000B88  6FB1               	movwf	(begin@stuffavailable+1)& (0+255),b
  3852  000B8A  0E00               	movlw	0
  3853  000B8C  0100               	movlb	0	; () banked
  3854  000B8E  6FB2               	movwf	begin@stuffpeek& (0+255),b
  3855  000B90  0E00               	movlw	0
  3856  000B92  0100               	movlb	0	; () banked
  3857  000B94  6FB3               	movwf	(begin@stuffpeek+1)& (0+255),b
  3858  000B96  EC7D  F007         	call	_begin	;wreg free
  3859  000B9A  0012               	return		;funcret
  3860  000B9C                     __end_of_ComStart:
  3861                           	opt stack 0
  3862                           tblptru	equ	0xFF8
  3863                           tblptrh	equ	0xFF7
  3864                           tblptrl	equ	0xFF6
  3865                           tablat	equ	0xFF5
  3866                           intcon	equ	0xFF2
  3867                           postinc0	equ	0xFEE
  3868                           wreg	equ	0xFE8
  3869                           indf1	equ	0xFE7
  3870                           postdec1	equ	0xFE5
  3871                           fsr1h	equ	0xFE2
  3872                           fsr1l	equ	0xFE1
  3873                           indf2	equ	0xFDF
  3874                           postinc2	equ	0xFDE
  3875                           postdec2	equ	0xFDD
  3876                           plusw2	equ	0xFDB
  3877                           fsr2h	equ	0xFDA
  3878                           fsr2l	equ	0xFD9
  3879                           status	equ	0xFD8
  3880                           
  3881 ;; *************** function _begin *****************
  3882 ;; Defined at:
  3883 ;;		line 77 in file "FastTransfer.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  3886 ;;		 -> receiveArray(10), 
  3887 ;;  maxSize         1    2[BANK0 ] unsigned char 
  3888 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  3889 ;;  error           1    4[BANK0 ] unsigned char 
  3890 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  3891 ;;		 -> Send_put(1), 
  3892 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  3893 ;;		 -> Receive_get(1), 
  3894 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  3895 ;;		 -> Receive_available(2), 
  3896 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  3897 ;;		 -> Receive_peek(1), 
  3898 ;; Auto vars:     Size  Location     Type
  3899 ;;		None
  3900 ;; Return value:  Size  Location     Type
  3901 ;;                  1    wreg      void 
  3902 ;; Registers used:
  3903 ;;		None
  3904 ;; Tracked objects:
  3905 ;;		On entry : 0/0
  3906 ;;		On exit  : 0/0
  3907 ;;		Unchanged: 0/0
  3908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3909 ;;      Params:         0      13       0       0       0       0       0
  3910 ;;      Locals:         0       0       0       0       0       0       0
  3911 ;;      Temps:          0       0       0       0       0       0       0
  3912 ;;      Totals:         0      13       0       0       0       0       0
  3913 ;;Total ram usage:       13 bytes
  3914 ;; Hardware stack levels used:    1
  3915 ;; Hardware stack levels required when called:    4
  3916 ;; This function calls:
  3917 ;;		Nothing
  3918 ;; This function is called by:
  3919 ;;		_ComStart
  3920 ;; This function uses a non-reentrant model
  3921 ;;
  3922                           
  3923                           	psect	text22
  3924  000EFA                     __ptext22:
  3925                           	opt stack 0
  3926  000EFA                     _begin:
  3927                           	opt stack 24
  3928                           
  3929                           ;incstack = 0
  3930  000EFA  0012               	return		;funcret
  3931  000EFC                     __end_of_begin:
  3932                           	opt stack 0
  3933                           tblptru	equ	0xFF8
  3934                           tblptrh	equ	0xFF7
  3935                           tblptrl	equ	0xFF6
  3936                           tablat	equ	0xFF5
  3937                           intcon	equ	0xFF2
  3938                           postinc0	equ	0xFEE
  3939                           wreg	equ	0xFE8
  3940                           indf1	equ	0xFE7
  3941                           postdec1	equ	0xFE5
  3942                           fsr1h	equ	0xFE2
  3943                           fsr1l	equ	0xFE1
  3944                           indf2	equ	0xFDF
  3945                           postinc2	equ	0xFDE
  3946                           postdec2	equ	0xFDD
  3947                           plusw2	equ	0xFDB
  3948                           fsr2h	equ	0xFDA
  3949                           fsr2l	equ	0xFD9
  3950                           status	equ	0xFD8
  3951                           
  3952 ;; *************** function _EUSART1_Initialize *****************
  3953 ;; Defined at:
  3954 ;;		line 20 in file "UART.c"
  3955 ;; Parameters:    Size  Location     Type
  3956 ;;		None
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;		None
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  1    wreg      void 
  3961 ;; Registers used:
  3962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3968 ;;      Params:         0       0       0       0       0       0       0
  3969 ;;      Locals:         0       0       0       0       0       0       0
  3970 ;;      Temps:          0       0       0       0       0       0       0
  3971 ;;      Totals:         0       0       0       0       0       0       0
  3972 ;;Total ram usage:        0 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; Hardware stack levels required when called:    6
  3975 ;; This function calls:
  3976 ;;		_UART_buff_init
  3977 ;; This function is called by:
  3978 ;;		_ComStart
  3979 ;; This function uses a non-reentrant model
  3980 ;;
  3981                           
  3982                           	psect	text23
  3983  000C3C                     __ptext23:
  3984                           	opt stack 0
  3985  000C3C                     _EUSART1_Initialize:
  3986                           	opt stack 22
  3987                           
  3988                           ;UART.c: 22: PIE1bits.RC1IE = 0;
  3989                           
  3990                           ;incstack = 0
  3991  000C3C  9A9D               	bcf	3997,5,c	;volatile
  3992                           
  3993                           ;UART.c: 23: PIE1bits.TX1IE = 0;
  3994  000C3E  989D               	bcf	3997,4,c	;volatile
  3995                           
  3996                           ;UART.c: 28: BAUD1CON = 0x48;
  3997  000C40  0E48               	movlw	72
  3998  000C42  6EB8               	movwf	4024,c	;volatile
  3999                           
  4000                           ;UART.c: 31: RC1STA = 0x98;
  4001  000C44  0E98               	movlw	152
  4002  000C46  6EAB               	movwf	4011,c	;volatile
  4003                           
  4004                           ;UART.c: 34: TX1STA = 0x26;
  4005  000C48  0E26               	movlw	38
  4006  000C4A  6EAC               	movwf	4012,c	;volatile
  4007                           
  4008                           ;UART.c: 37: SPBRG1 = (((16000000/38400)/4)-1);
  4009  000C4C  0E67               	movlw	103
  4010  000C4E  6EAF               	movwf	4015,c	;volatile
  4011                           
  4012                           ;UART.c: 40: SPBRGH1 = 0x00;
  4013  000C50  0E00               	movlw	0
  4014  000C52  6EB0               	movwf	4016,c	;volatile
  4015                           
  4016                           ;UART.c: 43: TXREG1 = 0x00;
  4017  000C54  0E00               	movlw	0
  4018  000C56  6EAD               	movwf	4013,c	;volatile
  4019                           
  4020                           ;UART.c: 46: RCREG1 = 0x00;
  4021  000C58  0E00               	movlw	0
  4022  000C5A  6EAE               	movwf	4014,c	;volatile
  4023                           
  4024                           ;UART.c: 48: UART_buff_init(&input_buffer);
  4025  000C5C  0E00               	movlw	low _input_buffer
  4026  000C5E  6E23               	movwf	UART_buff_init@_this,c
  4027  000C60  0E01               	movlw	high _input_buffer
  4028  000C62  6E24               	movwf	UART_buff_init@_this+1,c
  4029  000C64  ECF1  F006         	call	_UART_buff_init	;wreg free
  4030                           
  4031                           ;UART.c: 49: UART_buff_init(&output_buffer);
  4032  000C68  0E00               	movlw	low _output_buffer
  4033  000C6A  6E23               	movwf	UART_buff_init@_this,c
  4034  000C6C  0E02               	movlw	high _output_buffer
  4035  000C6E  6E24               	movwf	UART_buff_init@_this+1,c
  4036  000C70  ECF1  F006         	call	_UART_buff_init	;wreg free
  4037                           
  4038                           ;UART.c: 51: PIE1bits.RC1IE = 1;
  4039  000C74  8A9D               	bsf	3997,5,c	;volatile
  4040  000C76  0012               	return		;funcret
  4041  000C78                     __end_of_EUSART1_Initialize:
  4042                           	opt stack 0
  4043                           tblptru	equ	0xFF8
  4044                           tblptrh	equ	0xFF7
  4045                           tblptrl	equ	0xFF6
  4046                           tablat	equ	0xFF5
  4047                           intcon	equ	0xFF2
  4048                           postinc0	equ	0xFEE
  4049                           wreg	equ	0xFE8
  4050                           indf1	equ	0xFE7
  4051                           postdec1	equ	0xFE5
  4052                           fsr1h	equ	0xFE2
  4053                           fsr1l	equ	0xFE1
  4054                           indf2	equ	0xFDF
  4055                           postinc2	equ	0xFDE
  4056                           postdec2	equ	0xFDD
  4057                           plusw2	equ	0xFDB
  4058                           fsr2h	equ	0xFDA
  4059                           fsr2l	equ	0xFD9
  4060                           status	equ	0xFD8
  4061                           
  4062 ;; *************** function _UART_buff_init *****************
  4063 ;; Defined at:
  4064 ;;		line 55 in file "UART.c"
  4065 ;; Parameters:    Size  Location     Type
  4066 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  4067 ;;		 -> output_buffer(206), input_buffer(206), 
  4068 ;; Auto vars:     Size  Location     Type
  4069 ;;		None
  4070 ;; Return value:  Size  Location     Type
  4071 ;;                  1    wreg      void 
  4072 ;; Registers used:
  4073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4074 ;; Tracked objects:
  4075 ;;		On entry : 0/0
  4076 ;;		On exit  : 0/0
  4077 ;;		Unchanged: 0/0
  4078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4079 ;;      Params:         2       0       0       0       0       0       0
  4080 ;;      Locals:         0       0       0       0       0       0       0
  4081 ;;      Temps:          0       0       0       0       0       0       0
  4082 ;;      Totals:         2       0       0       0       0       0       0
  4083 ;;Total ram usage:        2 bytes
  4084 ;; Hardware stack levels used:    1
  4085 ;; Hardware stack levels required when called:    5
  4086 ;; This function calls:
  4087 ;;		_memset
  4088 ;; This function is called by:
  4089 ;;		_EUSART1_Initialize
  4090 ;; This function uses a non-reentrant model
  4091 ;;
  4092                           
  4093                           	psect	text24
  4094  000DE2                     __ptext24:
  4095                           	opt stack 0
  4096  000DE2                     _UART_buff_init:
  4097                           	opt stack 22
  4098                           
  4099                           ;UART.c: 64: memset(_this, 0, sizeof (*_this));
  4100                           
  4101                           ;incstack = 0
  4102  000DE2  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  4103  000DE6  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  4104  000DEA  0E00               	movlw	0
  4105  000DEC  6E1E               	movwf	memset@c+1,c
  4106  000DEE  0E00               	movlw	0
  4107  000DF0  6E1D               	movwf	memset@c,c
  4108  000DF2  0E00               	movlw	0
  4109  000DF4  6E20               	movwf	memset@n+1,c
  4110  000DF6  0ECE               	movlw	206
  4111  000DF8  6E1F               	movwf	memset@n,c
  4112  000DFA  ECA2  F006         	call	_memset	;wreg free
  4113  000DFE  0012               	return		;funcret
  4114  000E00                     __end_of_UART_buff_init:
  4115                           	opt stack 0
  4116                           tblptru	equ	0xFF8
  4117                           tblptrh	equ	0xFF7
  4118                           tblptrl	equ	0xFF6
  4119                           tablat	equ	0xFF5
  4120                           intcon	equ	0xFF2
  4121                           postinc0	equ	0xFEE
  4122                           wreg	equ	0xFE8
  4123                           indf1	equ	0xFE7
  4124                           postdec1	equ	0xFE5
  4125                           fsr1h	equ	0xFE2
  4126                           fsr1l	equ	0xFE1
  4127                           indf2	equ	0xFDF
  4128                           postinc2	equ	0xFDE
  4129                           postdec2	equ	0xFDD
  4130                           plusw2	equ	0xFDB
  4131                           fsr2h	equ	0xFDA
  4132                           fsr2l	equ	0xFD9
  4133                           status	equ	0xFD8
  4134                           
  4135 ;; *************** function _memset *****************
  4136 ;; Defined at:
  4137 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\memset.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;  p1              2   26[COMRAM] PTR void 
  4140 ;;		 -> output_buffer(206), input_buffer(206), 
  4141 ;;  c               2   28[COMRAM] int 
  4142 ;;  n               2   30[COMRAM] unsigned int 
  4143 ;; Auto vars:     Size  Location     Type
  4144 ;;  p               2   32[COMRAM] PTR unsigned char 
  4145 ;;		 -> output_buffer(206), input_buffer(206), 
  4146 ;; Return value:  Size  Location     Type
  4147 ;;                  2   26[COMRAM] PTR void 
  4148 ;; Registers used:
  4149 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4150 ;; Tracked objects:
  4151 ;;		On entry : 0/0
  4152 ;;		On exit  : 0/0
  4153 ;;		Unchanged: 0/0
  4154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4155 ;;      Params:         6       0       0       0       0       0       0
  4156 ;;      Locals:         2       0       0       0       0       0       0
  4157 ;;      Temps:          0       0       0       0       0       0       0
  4158 ;;      Totals:         8       0       0       0       0       0       0
  4159 ;;Total ram usage:        8 bytes
  4160 ;; Hardware stack levels used:    1
  4161 ;; Hardware stack levels required when called:    4
  4162 ;; This function calls:
  4163 ;;		Nothing
  4164 ;; This function is called by:
  4165 ;;		_UART_buff_init
  4166 ;;		_FastTransfer_buffer_flush
  4167 ;;		_UART_buff_flush
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           	psect	text25
  4172  000D44                     __ptext25:
  4173                           	opt stack 0
  4174  000D44                     _memset:
  4175                           	opt stack 22
  4176                           
  4177                           ;incstack = 0
  4178  000D44  C01B  F021         	movff	memset@p1,memset@p
  4179  000D48  C01C  F022         	movff	memset@p1+1,memset@p+1
  4180  000D4C  D008               	goto	l1791
  4181  000D4E                     l1787:
  4182  000D4E  C021  FFD9         	movff	memset@p,fsr2l
  4183  000D52  C022  FFDA         	movff	memset@p+1,fsr2h
  4184  000D56  C01D  FFDF         	movff	memset@c,indf2
  4185  000D5A  4A21               	infsnz	memset@p,f,c
  4186  000D5C  2A22               	incf	memset@p+1,f,c
  4187  000D5E                     l1791:
  4188  000D5E  061F               	decf	memset@n,f,c
  4189  000D60  A0D8               	btfss	status,0,c
  4190  000D62  0620               	decf	memset@n+1,f,c
  4191  000D64  281F               	incf	memset@n,w,c
  4192  000D66  E1F3               	bnz	l1787
  4193  000D68  2820               	incf	memset@n+1,w,c
  4194  000D6A  B4D8               	btfsc	status,2,c
  4195  000D6C  0012               	return	
  4196  000D6E  D7EF               	goto	l1787
  4197  000D70                     __end_of_memset:
  4198                           	opt stack 0
  4199                           tblptru	equ	0xFF8
  4200                           tblptrh	equ	0xFF7
  4201                           tblptrl	equ	0xFF6
  4202                           tablat	equ	0xFF5
  4203                           intcon	equ	0xFF2
  4204                           postinc0	equ	0xFEE
  4205                           wreg	equ	0xFE8
  4206                           indf1	equ	0xFE7
  4207                           postdec1	equ	0xFE5
  4208                           fsr1h	equ	0xFE2
  4209                           fsr1l	equ	0xFE1
  4210                           indf2	equ	0xFDF
  4211                           postinc2	equ	0xFDE
  4212                           postdec2	equ	0xFDD
  4213                           plusw2	equ	0xFDB
  4214                           fsr2h	equ	0xFDA
  4215                           fsr2l	equ	0xFD9
  4216                           status	equ	0xFD8
  4217                           
  4218 ;; *************** function _SetTime *****************
  4219 ;; Defined at:
  4220 ;;		line 97 in file "tmr0.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;		None
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;		None
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  1    wreg      void 
  4227 ;; Registers used:
  4228 ;;		wreg, status,2
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4234 ;;      Params:         0       0       0       0       0       0       0
  4235 ;;      Locals:         0       0       0       0       0       0       0
  4236 ;;      Temps:          0       0       0       0       0       0       0
  4237 ;;      Totals:         0       0       0       0       0       0       0
  4238 ;;Total ram usage:        0 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    4
  4241 ;; This function calls:
  4242 ;;		Nothing
  4243 ;; This function is called by:
  4244 ;;		_main
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           	psect	text26
  4249  000EC0                     __ptext26:
  4250                           	opt stack 0
  4251  000EC0                     _SetTime:
  4252                           	opt stack 26
  4253                           
  4254                           ;tmr0.c: 98: time = 0;
  4255                           
  4256                           ;incstack = 0
  4257  000EC0  0E00               	movlw	0
  4258  000EC2  0100               	movlb	0	; () banked
  4259  000EC4  6F60               	movwf	_time& (0+255),b
  4260  000EC6  0E00               	movlw	0
  4261  000EC8  6F61               	movwf	(_time+1)& (0+255),b
  4262  000ECA  0E00               	movlw	0
  4263  000ECC  6F62               	movwf	(_time+2)& (0+255),b
  4264  000ECE  0E00               	movlw	0
  4265  000ED0  6F63               	movwf	(_time+3)& (0+255),b
  4266                           
  4267                           ; BSR set to: 0
  4268  000ED2  0012               	return		;funcret
  4269  000ED4                     __end_of_SetTime:
  4270                           	opt stack 0
  4271                           tblptru	equ	0xFF8
  4272                           tblptrh	equ	0xFF7
  4273                           tblptrl	equ	0xFF6
  4274                           tablat	equ	0xFF5
  4275                           intcon	equ	0xFF2
  4276                           postinc0	equ	0xFEE
  4277                           wreg	equ	0xFE8
  4278                           indf1	equ	0xFE7
  4279                           postdec1	equ	0xFE5
  4280                           fsr1h	equ	0xFE2
  4281                           fsr1l	equ	0xFE1
  4282                           indf2	equ	0xFDF
  4283                           postinc2	equ	0xFDE
  4284                           postdec2	equ	0xFDD
  4285                           plusw2	equ	0xFDB
  4286                           fsr2h	equ	0xFDA
  4287                           fsr2l	equ	0xFD9
  4288                           status	equ	0xFD8
  4289                           
  4290 ;; *************** function _ReadFaults *****************
  4291 ;; Defined at:
  4292 ;;		line 9 in file "Function.c"
  4293 ;; Parameters:    Size  Location     Type
  4294 ;;		None
  4295 ;; Auto vars:     Size  Location     Type
  4296 ;;		None
  4297 ;; Return value:  Size  Location     Type
  4298 ;;                  1    wreg      void 
  4299 ;; Registers used:
  4300 ;;		wreg, status,2, status,0
  4301 ;; Tracked objects:
  4302 ;;		On entry : 0/0
  4303 ;;		On exit  : 0/0
  4304 ;;		Unchanged: 0/0
  4305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4306 ;;      Params:         0       0       0       0       0       0       0
  4307 ;;      Locals:         0       0       0       0       0       0       0
  4308 ;;      Temps:          1       0       0       0       0       0       0
  4309 ;;      Totals:         1       0       0       0       0       0       0
  4310 ;;Total ram usage:        1 bytes
  4311 ;; Hardware stack levels used:    1
  4312 ;; Hardware stack levels required when called:    4
  4313 ;; This function calls:
  4314 ;;		Nothing
  4315 ;; This function is called by:
  4316 ;;		_main
  4317 ;; This function uses a non-reentrant model
  4318 ;;
  4319                           
  4320                           	psect	text27
  4321  0008BC                     __ptext27:
  4322                           	opt stack 0
  4323  0008BC                     _ReadFaults:
  4324                           	opt stack 26
  4325                           
  4326                           ;Function.c: 16: ByteHigh = ByteHigh | ((PORTCbits.RC2 & 0x01) << 0);
  4327                           
  4328                           ; BSR set to: 0
  4329                           ;incstack = 0
  4330  0008BC  A482               	btfss	3970,2,c	;volatile
  4331  0008BE  D002               	goto	u480
  4332  0008C0  0E01               	movlw	1
  4333  0008C2  D001               	goto	u486
  4334  0008C4                     u480:
  4335  0008C4  0E00               	movlw	0
  4336  0008C6                     u486:
  4337  0008C6  103B               	iorwf	_ByteHigh,w,c
  4338  0008C8  6E3B               	movwf	_ByteHigh,c
  4339                           
  4340                           ;Function.c: 17: ByteHigh = ByteHigh | ((PORTCbits.RC4) << 1);
  4341  0008CA  A882               	btfss	3970,4,c	;volatile
  4342  0008CC  D003               	goto	u490
  4343  0008CE  6A1B               	clrf	??_ReadFaults& (0+255),c
  4344  0008D0  2A1B               	incf	??_ReadFaults& (0+255),f,c
  4345  0008D2  D001               	goto	u498
  4346  0008D4                     u490:
  4347  0008D4  6A1B               	clrf	??_ReadFaults& (0+255),c
  4348  0008D6                     u498:
  4349  0008D6  90D8               	bcf	status,0,c
  4350  0008D8  341B               	rlcf	??_ReadFaults,w,c
  4351  0008DA  103B               	iorwf	_ByteHigh,w,c
  4352  0008DC  6E3B               	movwf	_ByteHigh,c
  4353                           
  4354                           ;Function.c: 18: ByteHigh = ByteHigh | ((PORTDbits.RD3) << 2);
  4355  0008DE  A683               	btfss	3971,3,c	;volatile
  4356  0008E0  D003               	goto	u500
  4357  0008E2  6A1B               	clrf	??_ReadFaults& (0+255),c
  4358  0008E4  2A1B               	incf	??_ReadFaults& (0+255),f,c
  4359  0008E6  D001               	goto	u508
  4360  0008E8                     u500:
  4361  0008E8  6A1B               	clrf	??_ReadFaults& (0+255),c
  4362  0008EA                     u508:
  4363  0008EA  90D8               	bcf	status,0,c
  4364  0008EC  361B               	rlcf	??_ReadFaults,f,c
  4365  0008EE  90D8               	bcf	status,0,c
  4366  0008F0  341B               	rlcf	??_ReadFaults,w,c
  4367  0008F2  103B               	iorwf	_ByteHigh,w,c
  4368  0008F4  6E3B               	movwf	_ByteHigh,c
  4369                           
  4370                           ;Function.c: 19: ByteHigh = ByteHigh | ((PORTDbits.RD2) << 3);
  4371  0008F6  A483               	btfss	3971,2,c	;volatile
  4372  0008F8  D003               	goto	u510
  4373  0008FA  6A1B               	clrf	??_ReadFaults& (0+255),c
  4374  0008FC  2A1B               	incf	??_ReadFaults& (0+255),f,c
  4375  0008FE  D001               	goto	u518
  4376  000900                     u510:
  4377  000900  6A1B               	clrf	??_ReadFaults& (0+255),c
  4378  000902                     u518:
  4379  000902  90D8               	bcf	status,0,c
  4380  000904  361B               	rlcf	??_ReadFaults,f,c
  4381  000906  90D8               	bcf	status,0,c
  4382  000908  361B               	rlcf	??_ReadFaults,f,c
  4383  00090A  90D8               	bcf	status,0,c
  4384  00090C  341B               	rlcf	??_ReadFaults,w,c
  4385  00090E  103B               	iorwf	_ByteHigh,w,c
  4386  000910  6E3B               	movwf	_ByteHigh,c
  4387                           
  4388                           ;Function.c: 20: ByteHigh = ByteHigh | ((PORTDbits.RD1) << 4);
  4389  000912  A283               	btfss	3971,1,c	;volatile
  4390  000914  D003               	goto	u520
  4391  000916  6A1B               	clrf	??_ReadFaults& (0+255),c
  4392  000918  2A1B               	incf	??_ReadFaults& (0+255),f,c
  4393  00091A  D001               	goto	u528
  4394  00091C                     u520:
  4395  00091C  6A1B               	clrf	??_ReadFaults& (0+255),c
  4396  00091E                     u528:
  4397  00091E  381B               	swapf	??_ReadFaults,w,c
  4398  000920  0BF0               	andlw	240
  4399  000922  103B               	iorwf	_ByteHigh,w,c
  4400  000924  6E3B               	movwf	_ByteHigh,c
  4401                           
  4402                           ;Function.c: 21: ByteHigh = ByteHigh | ((PORTDbits.RD0) << 5);
  4403  000926  A083               	btfss	3971,0,c	;volatile
  4404  000928  D003               	goto	u530
  4405  00092A  0E20               	movlw	32
  4406  00092C  6E1B               	movwf	??_ReadFaults& (0+255),c
  4407  00092E  D001               	goto	u545
  4408  000930                     u530:
  4409  000930  6A1B               	clrf	??_ReadFaults& (0+255),c
  4410  000932                     u545:
  4411  000932  501B               	movf	??_ReadFaults,w,c
  4412  000934  103B               	iorwf	_ByteHigh,w,c
  4413  000936  6E3B               	movwf	_ByteHigh,c
  4414                           
  4415                           ;Function.c: 22: ByteHigh = ByteHigh | ((PORTCbits.RC3) << 6);
  4416  000938  A682               	btfss	3970,3,c	;volatile
  4417  00093A  D003               	goto	u550
  4418  00093C  0E40               	movlw	64
  4419  00093E  6E1B               	movwf	??_ReadFaults& (0+255),c
  4420  000940  D001               	goto	u565
  4421  000942                     u550:
  4422  000942  6A1B               	clrf	??_ReadFaults& (0+255),c
  4423  000944                     u565:
  4424  000944  501B               	movf	??_ReadFaults,w,c
  4425  000946  103B               	iorwf	_ByteHigh,w,c
  4426  000948  6E3B               	movwf	_ByteHigh,c
  4427                           
  4428                           ;Function.c: 23: ByteHigh = ByteHigh | ((PORTCbits.RC2) << 7);
  4429  00094A  A482               	btfss	3970,2,c	;volatile
  4430  00094C  D003               	goto	u570
  4431  00094E  0E80               	movlw	128
  4432  000950  6E1B               	movwf	??_ReadFaults& (0+255),c
  4433  000952  D001               	goto	u585
  4434  000954                     u570:
  4435  000954  6A1B               	clrf	??_ReadFaults& (0+255),c
  4436  000956                     u585:
  4437  000956  501B               	movf	??_ReadFaults,w,c
  4438  000958  103B               	iorwf	_ByteHigh,w,c
  4439  00095A  6E3B               	movwf	_ByteHigh,c
  4440                           
  4441                           ;Function.c: 24: ByteLow = ByteLow | ((PORTCbits.RC2 & 0x01) << 0);
  4442  00095C  A482               	btfss	3970,2,c	;volatile
  4443  00095E  D002               	goto	u590
  4444  000960  0E01               	movlw	1
  4445  000962  D001               	goto	u596
  4446  000964                     u590:
  4447  000964  0E00               	movlw	0
  4448  000966                     u596:
  4449  000966  103C               	iorwf	_ByteLow,w,c
  4450  000968  6E3C               	movwf	_ByteLow,c
  4451                           
  4452                           ;Function.c: 25: ByteLow = ByteLow | ((PORTAbits.RA7) << 1);
  4453  00096A  AE80               	btfss	3968,7,c	;volatile
  4454  00096C  D003               	goto	u600
  4455  00096E  6A1B               	clrf	??_ReadFaults& (0+255),c
  4456  000970  2A1B               	incf	??_ReadFaults& (0+255),f,c
  4457  000972  D001               	goto	u608
  4458  000974                     u600:
  4459  000974  6A1B               	clrf	??_ReadFaults& (0+255),c
  4460  000976                     u608:
  4461  000976  90D8               	bcf	status,0,c
  4462  000978  341B               	rlcf	??_ReadFaults,w,c
  4463  00097A  103C               	iorwf	_ByteLow,w,c
  4464  00097C  6E3C               	movwf	_ByteLow,c
  4465                           
  4466                           ;Function.c: 26: ByteLow = ByteLow | ((PORTCbits.RC0) << 2);
  4467  00097E  A082               	btfss	3970,0,c	;volatile
  4468  000980  D003               	goto	u610
  4469  000982  6A1B               	clrf	??_ReadFaults& (0+255),c
  4470  000984  2A1B               	incf	??_ReadFaults& (0+255),f,c
  4471  000986  D001               	goto	u618
  4472  000988                     u610:
  4473  000988  6A1B               	clrf	??_ReadFaults& (0+255),c
  4474  00098A                     u618:
  4475  00098A  90D8               	bcf	status,0,c
  4476  00098C  361B               	rlcf	??_ReadFaults,f,c
  4477  00098E  90D8               	bcf	status,0,c
  4478  000990  341B               	rlcf	??_ReadFaults,w,c
  4479  000992  103C               	iorwf	_ByteLow,w,c
  4480  000994  6E3C               	movwf	_ByteLow,c
  4481  000996  0012               	return		;funcret
  4482  000998                     __end_of_ReadFaults:
  4483                           	opt stack 0
  4484                           tblptru	equ	0xFF8
  4485                           tblptrh	equ	0xFF7
  4486                           tblptrl	equ	0xFF6
  4487                           tablat	equ	0xFF5
  4488                           intcon	equ	0xFF2
  4489                           postinc0	equ	0xFEE
  4490                           wreg	equ	0xFE8
  4491                           indf1	equ	0xFE7
  4492                           postdec1	equ	0xFE5
  4493                           fsr1h	equ	0xFE2
  4494                           fsr1l	equ	0xFE1
  4495                           indf2	equ	0xFDF
  4496                           postinc2	equ	0xFDE
  4497                           postdec2	equ	0xFDD
  4498                           plusw2	equ	0xFDB
  4499                           fsr2h	equ	0xFDA
  4500                           fsr2l	equ	0xFD9
  4501                           status	equ	0xFD8
  4502                           
  4503 ;; *************** function _INTERRUPT_InterruptManager *****************
  4504 ;; Defined at:
  4505 ;;		line 185 in file "Function.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;		None
  4508 ;; Auto vars:     Size  Location     Type
  4509 ;;		None
  4510 ;; Return value:  Size  Location     Type
  4511 ;;                  1    wreg      void 
  4512 ;; Registers used:
  4513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4514 ;; Tracked objects:
  4515 ;;		On entry : 0/0
  4516 ;;		On exit  : 0/0
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4519 ;;      Params:         0       0       0       0       0       0       0
  4520 ;;      Locals:         0       0       0       0       0       0       0
  4521 ;;      Temps:         14       0       0       0       0       0       0
  4522 ;;      Totals:        14       0       0       0       0       0       0
  4523 ;;Total ram usage:       14 bytes
  4524 ;; Hardware stack levels used:    1
  4525 ;; Hardware stack levels required when called:    3
  4526 ;; This function calls:
  4527 ;;		_EUSART1_Receive_ISR
  4528 ;;		_EUSART1_Transmit_ISR
  4529 ;;		_TMR0_ISR
  4530 ;; This function is called by:
  4531 ;;		Interrupt level 2
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           	psect	intcode
  4536  000008                     __pintcode:
  4537                           	opt stack 0
  4538  000008                     _INTERRUPT_InterruptManager:
  4539                           	opt stack 21
  4540                           
  4541                           ;incstack = 0
  4542  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4543  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  4544  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  4545  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  4546  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  4547  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  4548  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  4549  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  4550  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  4551  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  4552  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  4553  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  4554  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  4555  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  4556  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  4557                           
  4558                           ;Function.c: 188: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  4559  000042  BA9D               	btfsc	3997,5,c	;volatile
  4560  000044  AA9E               	btfss	3998,5,c	;volatile
  4561  000046  D003               	goto	i2l456
  4562                           
  4563                           ;Function.c: 189: {
  4564                           ;Function.c: 190: EUSART1_Receive_ISR();
  4565  000048  EC00  F007         	call	_EUSART1_Receive_ISR	;wreg free
  4566                           
  4567                           ;Function.c: 191: }
  4568  00004C  D00B               	goto	i2l462
  4569  00004E                     i2l456:
  4570                           
  4571                           ;Function.c: 192: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  4572  00004E  B89D               	btfsc	3997,4,c	;volatile
  4573  000050  A89E               	btfss	3998,4,c	;volatile
  4574  000052  D003               	goto	i2l458
  4575                           
  4576                           ;Function.c: 193: {
  4577                           ;Function.c: 194: EUSART1_Transmit_ISR();
  4578  000054  EC71  F006         	call	_EUSART1_Transmit_ISR	;wreg free
  4579                           
  4580                           ;Function.c: 195: }
  4581  000058  D005               	goto	i2l462
  4582  00005A                     i2l458:
  4583                           
  4584                           ;Function.c: 196: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  4585  00005A  BAF2               	btfsc	intcon,5,c	;volatile
  4586  00005C  A4F2               	btfss	intcon,2,c	;volatile
  4587  00005E  D002               	goto	i2l462
  4588                           
  4589                           ;Function.c: 197: {
  4590                           ;Function.c: 198: TMR0_ISR();
  4591  000060  EC0F  F007         	call	_TMR0_ISR	;wreg free
  4592  000064                     i2l462:
  4593  000064  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  4594  000068  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  4595  00006C  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  4596  000070  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  4597  000074  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  4598  000078  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  4599  00007C  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  4600  000080  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  4601  000084  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  4602  000088  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  4603  00008C  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  4604  000090  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  4605  000094  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  4606  000098  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  4607  00009C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4608  00009E  0011               	retfie		f
  4609  0000A0                     __end_of_INTERRUPT_InterruptManager:
  4610                           	opt stack 0
  4611                           pclatu	equ	0xFFB
  4612                           pclath	equ	0xFFA
  4613                           tblptru	equ	0xFF8
  4614                           tblptrh	equ	0xFF7
  4615                           tblptrl	equ	0xFF6
  4616                           tablat	equ	0xFF5
  4617                           prodh	equ	0xFF4
  4618                           prodl	equ	0xFF3
  4619                           intcon	equ	0xFF2
  4620                           postinc0	equ	0xFEE
  4621                           fsr0h	equ	0xFEA
  4622                           fsr0l	equ	0xFE9
  4623                           wreg	equ	0xFE8
  4624                           indf1	equ	0xFE7
  4625                           postdec1	equ	0xFE5
  4626                           fsr1h	equ	0xFE2
  4627                           fsr1l	equ	0xFE1
  4628                           indf2	equ	0xFDF
  4629                           postinc2	equ	0xFDE
  4630                           postdec2	equ	0xFDD
  4631                           plusw2	equ	0xFDB
  4632                           fsr2h	equ	0xFDA
  4633                           fsr2l	equ	0xFD9
  4634                           status	equ	0xFD8
  4635                           
  4636 ;; *************** function _TMR0_ISR *****************
  4637 ;; Defined at:
  4638 ;;		line 82 in file "tmr0.c"
  4639 ;; Parameters:    Size  Location     Type
  4640 ;;		None
  4641 ;; Auto vars:     Size  Location     Type
  4642 ;;		None
  4643 ;; Return value:  Size  Location     Type
  4644 ;;                  1    wreg      void 
  4645 ;; Registers used:
  4646 ;;		wreg, status,2, status,0
  4647 ;; Tracked objects:
  4648 ;;		On entry : 0/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4652 ;;      Params:         0       0       0       0       0       0       0
  4653 ;;      Locals:         0       0       0       0       0       0       0
  4654 ;;      Temps:          0       0       0       0       0       0       0
  4655 ;;      Totals:         0       0       0       0       0       0       0
  4656 ;;Total ram usage:        0 bytes
  4657 ;; Hardware stack levels used:    1
  4658 ;; This function calls:
  4659 ;;		Nothing
  4660 ;; This function is called by:
  4661 ;;		_INTERRUPT_InterruptManager
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           	psect	text29
  4666  000E1E                     __ptext29:
  4667                           	opt stack 0
  4668  000E1E                     _TMR0_ISR:
  4669                           	opt stack 23
  4670                           
  4671                           ;tmr0.c: 85: TMR0H = timer0ReloadVal16bit >> 8;
  4672                           
  4673                           ;incstack = 0
  4674  000E1E  5039               	movf	_timer0ReloadVal16bit+1,w,c	;volatile
  4675  000E20  6ED7               	movwf	4055,c	;volatile
  4676                           
  4677                           ;tmr0.c: 86: TMR0L = (uint8_t) timer0ReloadVal16bit;
  4678  000E22  C038  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
  4679                           
  4680                           ;tmr0.c: 88: time++;
  4681  000E26  0E01               	movlw	1
  4682  000E28  0100               	movlb	0	; () banked
  4683  000E2A  2760               	addwf	_time& (0+255),f,b
  4684  000E2C  0E00               	movlw	0
  4685  000E2E  2361               	addwfc	(_time+1)& (0+255),f,b
  4686  000E30  2362               	addwfc	(_time+2)& (0+255),f,b
  4687  000E32  2363               	addwfc	(_time+3)& (0+255),f,b
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;tmr0.c: 90: INTCONbits.TMR0IF = 0;
  4691  000E34  94F2               	bcf	intcon,2,c	;volatile
  4692                           
  4693                           ; BSR set to: 0
  4694  000E36  0012               	return		;funcret
  4695  000E38                     __end_of_TMR0_ISR:
  4696                           	opt stack 0
  4697                           pclatu	equ	0xFFB
  4698                           pclath	equ	0xFFA
  4699                           tblptru	equ	0xFF8
  4700                           tblptrh	equ	0xFF7
  4701                           tblptrl	equ	0xFF6
  4702                           tablat	equ	0xFF5
  4703                           prodh	equ	0xFF4
  4704                           prodl	equ	0xFF3
  4705                           intcon	equ	0xFF2
  4706                           postinc0	equ	0xFEE
  4707                           fsr0h	equ	0xFEA
  4708                           fsr0l	equ	0xFE9
  4709                           wreg	equ	0xFE8
  4710                           indf1	equ	0xFE7
  4711                           postdec1	equ	0xFE5
  4712                           fsr1h	equ	0xFE2
  4713                           fsr1l	equ	0xFE1
  4714                           indf2	equ	0xFDF
  4715                           postinc2	equ	0xFDE
  4716                           postdec2	equ	0xFDD
  4717                           plusw2	equ	0xFDB
  4718                           fsr2h	equ	0xFDA
  4719                           fsr2l	equ	0xFD9
  4720                           status	equ	0xFD8
  4721                           
  4722 ;; *************** function _EUSART1_Transmit_ISR *****************
  4723 ;; Defined at:
  4724 ;;		line 149 in file "UART.c"
  4725 ;; Parameters:    Size  Location     Type
  4726 ;;		None
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;		None
  4729 ;; Return value:  Size  Location     Type
  4730 ;;                  1    wreg      void 
  4731 ;; Registers used:
  4732 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4738 ;;      Params:         0       0       0       0       0       0       0
  4739 ;;      Locals:         0       0       0       0       0       0       0
  4740 ;;      Temps:          0       0       0       0       0       0       0
  4741 ;;      Totals:         0       0       0       0       0       0       0
  4742 ;;Total ram usage:        0 bytes
  4743 ;; Hardware stack levels used:    1
  4744 ;; Hardware stack levels required when called:    2
  4745 ;; This function calls:
  4746 ;;		i2_UART_buff_get
  4747 ;;		i2_UART_buff_size
  4748 ;; This function is called by:
  4749 ;;		_INTERRUPT_InterruptManager
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           	psect	text30
  4754  000CE2                     __ptext30:
  4755                           	opt stack 0
  4756  000CE2                     _EUSART1_Transmit_ISR:
  4757                           	opt stack 21
  4758                           
  4759                           ;UART.c: 151: if (UART_buff_size(&output_buffer) > 0) {
  4760                           
  4761                           ; BSR set to: 0
  4762                           ;incstack = 0
  4763  000CE2  0E00               	movlw	low _output_buffer
  4764  000CE4  6E01               	movwf	i2UART_buff_size@_this,c
  4765  000CE6  0E02               	movlw	high _output_buffer
  4766  000CE8  6E02               	movwf	i2UART_buff_size@_this+1,c
  4767  000CEA  EC55  F007         	call	i2_UART_buff_size	;wreg free
  4768  000CEE  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  4769  000CF0  D00D               	goto	i2l2237
  4770  000CF2  5002               	movf	?i2_UART_buff_size+1,w,c
  4771  000CF4  E103               	bnz	i2u134_40
  4772  000CF6  0401               	decf	?i2_UART_buff_size,w,c
  4773  000CF8  A0D8               	btfss	status,0,c
  4774  000CFA  D008               	goto	i2l2237
  4775  000CFC                     i2u134_40:
  4776                           
  4777                           ;UART.c: 152: TXREG1 = UART_buff_get(&output_buffer);
  4778  000CFC  0E00               	movlw	low _output_buffer
  4779  000CFE  6E07               	movwf	i2UART_buff_get@_this,c
  4780  000D00  0E02               	movlw	high _output_buffer
  4781  000D02  6E08               	movwf	i2UART_buff_get@_this+1,c
  4782  000D04  EC15  F005         	call	i2_UART_buff_get	;wreg free
  4783  000D08  6EAD               	movwf	4013,c	;volatile
  4784                           
  4785                           ;UART.c: 153: } else {
  4786  000D0A  0012               	return	
  4787  000D0C                     i2l2237:
  4788                           
  4789                           ;UART.c: 154: Transmit_stall = 1;
  4790  000D0C  0E01               	movlw	1
  4791  000D0E  6E44               	movwf	_Transmit_stall,c
  4792                           
  4793                           ;UART.c: 155: PIE1bits.TX1IE = 0;
  4794  000D10  989D               	bcf	3997,4,c	;volatile
  4795  000D12  0012               	return	
  4796  000D14                     __end_of_EUSART1_Transmit_ISR:
  4797                           	opt stack 0
  4798                           pclatu	equ	0xFFB
  4799                           pclath	equ	0xFFA
  4800                           tblptru	equ	0xFF8
  4801                           tblptrh	equ	0xFF7
  4802                           tblptrl	equ	0xFF6
  4803                           tablat	equ	0xFF5
  4804                           prodh	equ	0xFF4
  4805                           prodl	equ	0xFF3
  4806                           intcon	equ	0xFF2
  4807                           postinc0	equ	0xFEE
  4808                           fsr0h	equ	0xFEA
  4809                           fsr0l	equ	0xFE9
  4810                           wreg	equ	0xFE8
  4811                           indf1	equ	0xFE7
  4812                           postdec1	equ	0xFE5
  4813                           fsr1h	equ	0xFE2
  4814                           fsr1l	equ	0xFE1
  4815                           indf2	equ	0xFDF
  4816                           postinc2	equ	0xFDE
  4817                           postdec2	equ	0xFDD
  4818                           plusw2	equ	0xFDB
  4819                           fsr2h	equ	0xFDA
  4820                           fsr2l	equ	0xFD9
  4821                           status	equ	0xFD8
  4822                           
  4823 ;; *************** function i2_UART_buff_size *****************
  4824 ;; Defined at:
  4825 ;;		line 101 in file "UART.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  4828 ;;		 -> output_buffer(206), input_buffer(206), 
  4829 ;; Auto vars:     Size  Location     Type
  4830 ;;		None
  4831 ;; Return value:  Size  Location     Type
  4832 ;;                  2    0[COMRAM] int 
  4833 ;; Registers used:
  4834 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4835 ;; Tracked objects:
  4836 ;;		On entry : 0/0
  4837 ;;		On exit  : 0/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4840 ;;      Params:         2       0       0       0       0       0       0
  4841 ;;      Locals:         0       0       0       0       0       0       0
  4842 ;;      Temps:          0       0       0       0       0       0       0
  4843 ;;      Totals:         2       0       0       0       0       0       0
  4844 ;;Total ram usage:        2 bytes
  4845 ;; Hardware stack levels used:    1
  4846 ;; This function calls:
  4847 ;;		Nothing
  4848 ;; This function is called by:
  4849 ;;		_EUSART1_Transmit_ISR
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           	psect	text31
  4854  000EAA                     __ptext31:
  4855                           	opt stack 0
  4856  000EAA                     i2_UART_buff_size:
  4857                           	opt stack 22
  4858                           
  4859                           ;UART.c: 102: return (_this->count);
  4860                           
  4861                           ;incstack = 0
  4862  000EAA  EE20 F0CC          	lfsr	2,204
  4863  000EAE  5001               	movf	i2UART_buff_size@_this,w,c
  4864  000EB0  26D9               	addwf	fsr2l,f,c
  4865  000EB2  5002               	movf	i2UART_buff_size@_this+1,w,c
  4866  000EB4  22DA               	addwfc	fsr2h,f,c
  4867  000EB6  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  4868  000EBA  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  4869  000EBE  0012               	return	
  4870  000EC0                     __end_ofi2_UART_buff_size:
  4871                           	opt stack 0
  4872                           pclatu	equ	0xFFB
  4873                           pclath	equ	0xFFA
  4874                           tblptru	equ	0xFF8
  4875                           tblptrh	equ	0xFF7
  4876                           tblptrl	equ	0xFF6
  4877                           tablat	equ	0xFF5
  4878                           prodh	equ	0xFF4
  4879                           prodl	equ	0xFF3
  4880                           intcon	equ	0xFF2
  4881                           postinc0	equ	0xFEE
  4882                           fsr0h	equ	0xFEA
  4883                           fsr0l	equ	0xFE9
  4884                           wreg	equ	0xFE8
  4885                           indf1	equ	0xFE7
  4886                           postdec1	equ	0xFE5
  4887                           fsr1h	equ	0xFE2
  4888                           fsr1l	equ	0xFE1
  4889                           indf2	equ	0xFDF
  4890                           postinc2	equ	0xFDE
  4891                           postdec2	equ	0xFDD
  4892                           plusw2	equ	0xFDB
  4893                           fsr2h	equ	0xFDA
  4894                           fsr2l	equ	0xFD9
  4895                           status	equ	0xFD8
  4896                           
  4897 ;; *************** function i2_UART_buff_get *****************
  4898 ;; Defined at:
  4899 ;;		line 80 in file "UART.c"
  4900 ;; Parameters:    Size  Location     Type
  4901 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  4902 ;;		 -> output_buffer(206), input_buffer(206), 
  4903 ;; Auto vars:     Size  Location     Type
  4904 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  4905 ;; Return value:  Size  Location     Type
  4906 ;;                  1    wreg      unsigned char 
  4907 ;; Registers used:
  4908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4909 ;; Tracked objects:
  4910 ;;		On entry : 0/0
  4911 ;;		On exit  : 0/0
  4912 ;;		Unchanged: 0/0
  4913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4914 ;;      Params:         2       0       0       0       0       0       0
  4915 ;;      Locals:         1       0       0       0       0       0       0
  4916 ;;      Temps:          2       0       0       0       0       0       0
  4917 ;;      Totals:         5       0       0       0       0       0       0
  4918 ;;Total ram usage:        5 bytes
  4919 ;; Hardware stack levels used:    1
  4920 ;; Hardware stack levels required when called:    1
  4921 ;; This function calls:
  4922 ;;		i2_UART_buff_modulo_inc
  4923 ;; This function is called by:
  4924 ;;		_EUSART1_Transmit_ISR
  4925 ;; This function uses a non-reentrant model
  4926 ;;
  4927                           
  4928                           	psect	text32
  4929  000A2A                     __ptext32:
  4930                           	opt stack 0
  4931  000A2A                     i2_UART_buff_get:
  4932                           	opt stack 21
  4933                           
  4934                           ;UART.c: 81: unsigned char c;
  4935                           ;UART.c: 82: if (_this->count > 0) {
  4936                           
  4937                           ;incstack = 0
  4938  000A2A  EE20 F0CC          	lfsr	2,204
  4939  000A2E  5007               	movf	i2UART_buff_get@_this,w,c
  4940  000A30  26D9               	addwf	fsr2l,f,c
  4941  000A32  5008               	movf	i2UART_buff_get@_this+1,w,c
  4942  000A34  22DA               	addwfc	fsr2h,f,c
  4943  000A36  0E01               	movlw	1
  4944  000A38  BEDB               	btfsc	plusw2,7,c
  4945  000A3A  D03C               	goto	i2l2165
  4946  000A3C  0E01               	movlw	1
  4947  000A3E  50DB               	movf	plusw2,w,c
  4948  000A40  E103               	bnz	i2u126_40
  4949  000A42  04DE               	decf	postinc2,w,c
  4950  000A44  A0D8               	btfss	status,0,c
  4951  000A46  D036               	goto	i2l2165
  4952  000A48                     i2u126_40:
  4953                           
  4954                           ;UART.c: 83: c = _this->buf[_this->tail];
  4955  000A48  EE20 F0CA          	lfsr	2,202
  4956  000A4C  5007               	movf	i2UART_buff_get@_this,w,c
  4957  000A4E  26D9               	addwf	fsr2l,f,c
  4958  000A50  5008               	movf	i2UART_buff_get@_this+1,w,c
  4959  000A52  22DA               	addwfc	fsr2h,f,c
  4960  000A54  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  4961  000A58  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  4962  000A5C  5009               	movf	??i2_UART_buff_get,w,c
  4963  000A5E  2407               	addwf	i2UART_buff_get@_this,w,c
  4964  000A60  6ED9               	movwf	fsr2l,c
  4965  000A62  500A               	movf	??i2_UART_buff_get+1,w,c
  4966  000A64  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  4967  000A66  6EDA               	movwf	fsr2h,c
  4968  000A68  50DF               	movf	indf2,w,c
  4969  000A6A  6E0B               	movwf	i2UART_buff_get@c,c
  4970                           
  4971                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4972  000A6C  EE20 F0CA          	lfsr	2,202
  4973  000A70  5007               	movf	i2UART_buff_get@_this,w,c
  4974  000A72  26D9               	addwf	fsr2l,f,c
  4975  000A74  5008               	movf	i2UART_buff_get@_this+1,w,c
  4976  000A76  22DA               	addwfc	fsr2h,f,c
  4977  000A78  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  4978  000A7C  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  4979  000A80  0E00               	movlw	0
  4980  000A82  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  4981  000A84  0EC8               	movlw	200
  4982  000A86  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  4983  000A88  ECCD  F006         	call	i2_UART_buff_modulo_inc	;wreg free
  4984  000A8C  EE20 F0CA          	lfsr	2,202
  4985  000A90  5007               	movf	i2UART_buff_get@_this,w,c
  4986  000A92  26D9               	addwf	fsr2l,f,c
  4987  000A94  5008               	movf	i2UART_buff_get@_this+1,w,c
  4988  000A96  22DA               	addwfc	fsr2h,f,c
  4989  000A98  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  4990  000A9C  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  4991                           
  4992                           ;UART.c: 85: --_this->count;
  4993  000AA0  EE20 F0CC          	lfsr	2,204
  4994  000AA4  5007               	movf	i2UART_buff_get@_this,w,c
  4995  000AA6  26D9               	addwf	fsr2l,f,c
  4996  000AA8  5008               	movf	i2UART_buff_get@_this+1,w,c
  4997  000AAA  22DA               	addwfc	fsr2h,f,c
  4998  000AAC  06DE               	decf	postinc2,f,c
  4999  000AAE  0E00               	movlw	0
  5000  000AB0  5ADD               	subwfb	postdec2,f,c
  5001                           
  5002                           ;UART.c: 86: } else {
  5003  000AB2  D002               	goto	i2l289
  5004  000AB4                     i2l2165:
  5005                           
  5006                           ;UART.c: 87: c = 0;
  5007  000AB4  0E00               	movlw	0
  5008  000AB6  6E0B               	movwf	i2UART_buff_get@c,c
  5009  000AB8                     i2l289:
  5010                           
  5011                           ;UART.c: 88: }
  5012                           ;UART.c: 89: return (c);
  5013  000AB8  500B               	movf	i2UART_buff_get@c,w,c
  5014  000ABA  0012               	return	
  5015  000ABC                     __end_ofi2_UART_buff_get:
  5016                           	opt stack 0
  5017                           pclatu	equ	0xFFB
  5018                           pclath	equ	0xFFA
  5019                           tblptru	equ	0xFF8
  5020                           tblptrh	equ	0xFF7
  5021                           tblptrl	equ	0xFF6
  5022                           tablat	equ	0xFF5
  5023                           prodh	equ	0xFF4
  5024                           prodl	equ	0xFF3
  5025                           intcon	equ	0xFF2
  5026                           postinc0	equ	0xFEE
  5027                           fsr0h	equ	0xFEA
  5028                           fsr0l	equ	0xFE9
  5029                           wreg	equ	0xFE8
  5030                           indf1	equ	0xFE7
  5031                           postdec1	equ	0xFE5
  5032                           fsr1h	equ	0xFE2
  5033                           fsr1l	equ	0xFE1
  5034                           indf2	equ	0xFDF
  5035                           postinc2	equ	0xFDE
  5036                           postdec2	equ	0xFDD
  5037                           plusw2	equ	0xFDB
  5038                           fsr2h	equ	0xFDA
  5039                           fsr2l	equ	0xFD9
  5040                           status	equ	0xFD8
  5041                           
  5042 ;; *************** function _EUSART1_Receive_ISR *****************
  5043 ;; Defined at:
  5044 ;;		line 138 in file "UART.c"
  5045 ;; Parameters:    Size  Location     Type
  5046 ;;		None
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;  data            1   11[COMRAM] unsigned char 
  5049 ;; Return value:  Size  Location     Type
  5050 ;;                  1    wreg      void 
  5051 ;; Registers used:
  5052 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5053 ;; Tracked objects:
  5054 ;;		On entry : 0/0
  5055 ;;		On exit  : 0/0
  5056 ;;		Unchanged: 0/0
  5057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5058 ;;      Params:         0       0       0       0       0       0       0
  5059 ;;      Locals:         1       0       0       0       0       0       0
  5060 ;;      Temps:          0       0       0       0       0       0       0
  5061 ;;      Totals:         1       0       0       0       0       0       0
  5062 ;;Total ram usage:        1 bytes
  5063 ;; Hardware stack levels used:    1
  5064 ;; Hardware stack levels required when called:    2
  5065 ;; This function calls:
  5066 ;;		i2_UART_buff_put
  5067 ;; This function is called by:
  5068 ;;		_INTERRUPT_InterruptManager
  5069 ;; This function uses a non-reentrant model
  5070 ;;
  5071                           
  5072                           	psect	text33
  5073  000E00                     __ptext33:
  5074                           	opt stack 0
  5075  000E00                     _EUSART1_Receive_ISR:
  5076                           	opt stack 21
  5077                           
  5078                           ;UART.c: 139: if (1 == RC1STAbits.OERR) {
  5079                           
  5080                           ;incstack = 0
  5081  000E00  A2AB               	btfss	4011,1,c	;volatile
  5082  000E02  D002               	goto	i2l320
  5083                           
  5084                           ;UART.c: 142: RC1STAbits.CREN = 0;
  5085  000E04  98AB               	bcf	4011,4,c	;volatile
  5086                           
  5087                           ;UART.c: 143: RC1STAbits.CREN = 1;
  5088  000E06  88AB               	bsf	4011,4,c	;volatile
  5089  000E08                     i2l320:
  5090                           
  5091                           ;UART.c: 144: }
  5092                           ;UART.c: 145: unsigned char data = RCREG1;
  5093  000E08  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  5094                           
  5095                           ;UART.c: 146: UART_buff_put(&input_buffer, data);
  5096  000E0C  0E00               	movlw	low _input_buffer
  5097  000E0E  6E07               	movwf	i2UART_buff_put@_this,c
  5098  000E10  0E01               	movlw	high _input_buffer
  5099  000E12  6E08               	movwf	i2UART_buff_put@_this+1,c
  5100  000E14  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  5101  000E18  EC59  F003         	call	i2_UART_buff_put	;wreg free
  5102  000E1C  0012               	return		;funcret
  5103  000E1E                     __end_of_EUSART1_Receive_ISR:
  5104                           	opt stack 0
  5105                           pclatu	equ	0xFFB
  5106                           pclath	equ	0xFFA
  5107                           tblptru	equ	0xFF8
  5108                           tblptrh	equ	0xFF7
  5109                           tblptrl	equ	0xFF6
  5110                           tablat	equ	0xFF5
  5111                           prodh	equ	0xFF4
  5112                           prodl	equ	0xFF3
  5113                           intcon	equ	0xFF2
  5114                           postinc0	equ	0xFEE
  5115                           fsr0h	equ	0xFEA
  5116                           fsr0l	equ	0xFE9
  5117                           wreg	equ	0xFE8
  5118                           indf1	equ	0xFE7
  5119                           postdec1	equ	0xFE5
  5120                           fsr1h	equ	0xFE2
  5121                           fsr1l	equ	0xFE1
  5122                           indf2	equ	0xFDF
  5123                           postinc2	equ	0xFDE
  5124                           postdec2	equ	0xFDD
  5125                           plusw2	equ	0xFDB
  5126                           fsr2h	equ	0xFDA
  5127                           fsr2l	equ	0xFD9
  5128                           status	equ	0xFD8
  5129                           
  5130 ;; *************** function i2_UART_buff_put *****************
  5131 ;; Defined at:
  5132 ;;		line 67 in file "UART.c"
  5133 ;; Parameters:    Size  Location     Type
  5134 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  5135 ;;		 -> output_buffer(206), input_buffer(206), 
  5136 ;;  c               1    8[COMRAM] const unsigned char 
  5137 ;; Auto vars:     Size  Location     Type
  5138 ;;		None
  5139 ;; Return value:  Size  Location     Type
  5140 ;;                  1    wreg      void 
  5141 ;; Registers used:
  5142 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5143 ;; Tracked objects:
  5144 ;;		On entry : 0/0
  5145 ;;		On exit  : 0/0
  5146 ;;		Unchanged: 0/0
  5147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5148 ;;      Params:         3       0       0       0       0       0       0
  5149 ;;      Locals:         0       0       0       0       0       0       0
  5150 ;;      Temps:          2       0       0       0       0       0       0
  5151 ;;      Totals:         5       0       0       0       0       0       0
  5152 ;;Total ram usage:        5 bytes
  5153 ;; Hardware stack levels used:    1
  5154 ;; Hardware stack levels required when called:    1
  5155 ;; This function calls:
  5156 ;;		i2_UART_buff_modulo_inc
  5157 ;; This function is called by:
  5158 ;;		_EUSART1_Receive_ISR
  5159 ;; This function uses a non-reentrant model
  5160 ;;
  5161                           
  5162                           	psect	text34
  5163  0006B2                     __ptext34:
  5164                           	opt stack 0
  5165  0006B2                     i2_UART_buff_put:
  5166                           	opt stack 21
  5167                           
  5168                           ;UART.c: 68: if (_this->count < 200) {
  5169                           
  5170                           ;incstack = 0
  5171  0006B2  EE20 F0CC          	lfsr	2,204
  5172  0006B6  5007               	movf	i2UART_buff_put@_this,w,c
  5173  0006B8  26D9               	addwf	fsr2l,f,c
  5174  0006BA  5008               	movf	i2UART_buff_put@_this+1,w,c
  5175  0006BC  22DA               	addwfc	fsr2h,f,c
  5176  0006BE  0E01               	movlw	1
  5177  0006C0  BEDB               	btfsc	plusw2,7,c
  5178  0006C2  D007               	goto	i2l2145
  5179  0006C4  0E01               	movlw	1
  5180  0006C6  50DB               	movf	plusw2,w,c
  5181  0006C8  E13A               	bnz	i2l2151
  5182  0006CA  0EC8               	movlw	200
  5183  0006CC  5CDE               	subwf	postinc2,w,c
  5184  0006CE  B0D8               	btfsc	status,0,c
  5185  0006D0  D036               	goto	i2l2151
  5186  0006D2                     i2l2145:
  5187                           
  5188                           ;UART.c: 69: _this->buf[_this->head] = c;
  5189  0006D2  EE20 F0C8          	lfsr	2,200
  5190  0006D6  5007               	movf	i2UART_buff_put@_this,w,c
  5191  0006D8  26D9               	addwf	fsr2l,f,c
  5192  0006DA  5008               	movf	i2UART_buff_put@_this+1,w,c
  5193  0006DC  22DA               	addwfc	fsr2h,f,c
  5194  0006DE  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  5195  0006E2  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  5196  0006E6  500A               	movf	??i2_UART_buff_put,w,c
  5197  0006E8  2407               	addwf	i2UART_buff_put@_this,w,c
  5198  0006EA  6ED9               	movwf	fsr2l,c
  5199  0006EC  500B               	movf	??i2_UART_buff_put+1,w,c
  5200  0006EE  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  5201  0006F0  6EDA               	movwf	fsr2h,c
  5202  0006F2  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  5203                           
  5204                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 200);
  5205  0006F6  EE20 F0C8          	lfsr	2,200
  5206  0006FA  5007               	movf	i2UART_buff_put@_this,w,c
  5207  0006FC  26D9               	addwf	fsr2l,f,c
  5208  0006FE  5008               	movf	i2UART_buff_put@_this+1,w,c
  5209  000700  22DA               	addwfc	fsr2h,f,c
  5210  000702  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5211  000706  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5212  00070A  0E00               	movlw	0
  5213  00070C  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5214  00070E  0EC8               	movlw	200
  5215  000710  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5216  000712  ECCD  F006         	call	i2_UART_buff_modulo_inc	;wreg free
  5217  000716  EE20 F0C8          	lfsr	2,200
  5218  00071A  5007               	movf	i2UART_buff_put@_this,w,c
  5219  00071C  26D9               	addwf	fsr2l,f,c
  5220  00071E  5008               	movf	i2UART_buff_put@_this+1,w,c
  5221  000720  22DA               	addwfc	fsr2h,f,c
  5222  000722  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5223  000726  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5224                           
  5225                           ;UART.c: 71: ++_this->count;
  5226  00072A  EE20 F0CC          	lfsr	2,204
  5227  00072E  5007               	movf	i2UART_buff_put@_this,w,c
  5228  000730  26D9               	addwf	fsr2l,f,c
  5229  000732  5008               	movf	i2UART_buff_put@_this+1,w,c
  5230  000734  22DA               	addwfc	fsr2h,f,c
  5231  000736  2ADE               	incf	postinc2,f,c
  5232  000738  0E00               	movlw	0
  5233  00073A  22DD               	addwfc	postdec2,f,c
  5234                           
  5235                           ;UART.c: 72: } else {
  5236  00073C  0012               	return	
  5237  00073E                     i2l2151:
  5238                           
  5239                           ;UART.c: 73: _this->buf[_this->head] = c;
  5240  00073E  EE20 F0C8          	lfsr	2,200
  5241  000742  5007               	movf	i2UART_buff_put@_this,w,c
  5242  000744  26D9               	addwf	fsr2l,f,c
  5243  000746  5008               	movf	i2UART_buff_put@_this+1,w,c
  5244  000748  22DA               	addwfc	fsr2h,f,c
  5245  00074A  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  5246  00074E  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  5247  000752  500A               	movf	??i2_UART_buff_put,w,c
  5248  000754  2407               	addwf	i2UART_buff_put@_this,w,c
  5249  000756  6ED9               	movwf	fsr2l,c
  5250  000758  500B               	movf	??i2_UART_buff_put+1,w,c
  5251  00075A  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  5252  00075C  6EDA               	movwf	fsr2h,c
  5253  00075E  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  5254                           
  5255                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 200);
  5256  000762  EE20 F0C8          	lfsr	2,200
  5257  000766  5007               	movf	i2UART_buff_put@_this,w,c
  5258  000768  26D9               	addwf	fsr2l,f,c
  5259  00076A  5008               	movf	i2UART_buff_put@_this+1,w,c
  5260  00076C  22DA               	addwfc	fsr2h,f,c
  5261  00076E  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5262  000772  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5263  000776  0E00               	movlw	0
  5264  000778  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5265  00077A  0EC8               	movlw	200
  5266  00077C  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5267  00077E  ECCD  F006         	call	i2_UART_buff_modulo_inc	;wreg free
  5268  000782  EE20 F0C8          	lfsr	2,200
  5269  000786  5007               	movf	i2UART_buff_put@_this,w,c
  5270  000788  26D9               	addwf	fsr2l,f,c
  5271  00078A  5008               	movf	i2UART_buff_put@_this+1,w,c
  5272  00078C  22DA               	addwfc	fsr2h,f,c
  5273  00078E  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5274  000792  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5275                           
  5276                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  5277  000796  EE20 F0CA          	lfsr	2,202
  5278  00079A  5007               	movf	i2UART_buff_put@_this,w,c
  5279  00079C  26D9               	addwf	fsr2l,f,c
  5280  00079E  5008               	movf	i2UART_buff_put@_this+1,w,c
  5281  0007A0  22DA               	addwfc	fsr2h,f,c
  5282  0007A2  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5283  0007A6  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5284  0007AA  0E00               	movlw	0
  5285  0007AC  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5286  0007AE  0EC8               	movlw	200
  5287  0007B0  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5288  0007B2  ECCD  F006         	call	i2_UART_buff_modulo_inc	;wreg free
  5289  0007B6  EE20 F0CA          	lfsr	2,202
  5290  0007BA  5007               	movf	i2UART_buff_put@_this,w,c
  5291  0007BC  26D9               	addwf	fsr2l,f,c
  5292  0007BE  5008               	movf	i2UART_buff_put@_this+1,w,c
  5293  0007C0  22DA               	addwfc	fsr2h,f,c
  5294  0007C2  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5295  0007C6  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5296  0007CA  0012               	return	
  5297  0007CC                     __end_ofi2_UART_buff_put:
  5298                           	opt stack 0
  5299                           pclatu	equ	0xFFB
  5300                           pclath	equ	0xFFA
  5301                           tblptru	equ	0xFF8
  5302                           tblptrh	equ	0xFF7
  5303                           tblptrl	equ	0xFF6
  5304                           tablat	equ	0xFF5
  5305                           prodh	equ	0xFF4
  5306                           prodl	equ	0xFF3
  5307                           intcon	equ	0xFF2
  5308                           postinc0	equ	0xFEE
  5309                           fsr0h	equ	0xFEA
  5310                           fsr0l	equ	0xFE9
  5311                           wreg	equ	0xFE8
  5312                           indf1	equ	0xFE7
  5313                           postdec1	equ	0xFE5
  5314                           fsr1h	equ	0xFE2
  5315                           fsr1l	equ	0xFE1
  5316                           indf2	equ	0xFDF
  5317                           postinc2	equ	0xFDE
  5318                           postdec2	equ	0xFDD
  5319                           plusw2	equ	0xFDB
  5320                           fsr2h	equ	0xFDA
  5321                           fsr2l	equ	0xFD9
  5322                           status	equ	0xFD8
  5323                           
  5324 ;; *************** function i2_UART_buff_modulo_inc *****************
  5325 ;; Defined at:
  5326 ;;		line 105 in file "UART.c"
  5327 ;; Parameters:    Size  Location     Type
  5328 ;;  value           2    0[COMRAM] const unsigned int 
  5329 ;;  modulus         2    2[COMRAM] const unsigned int 
  5330 ;; Auto vars:     Size  Location     Type
  5331 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  5332 ;; Return value:  Size  Location     Type
  5333 ;;                  2    0[COMRAM] unsigned int 
  5334 ;; Registers used:
  5335 ;;		wreg, status,2, status,0
  5336 ;; Tracked objects:
  5337 ;;		On entry : 0/0
  5338 ;;		On exit  : 0/0
  5339 ;;		Unchanged: 0/0
  5340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5341 ;;      Params:         4       0       0       0       0       0       0
  5342 ;;      Locals:         2       0       0       0       0       0       0
  5343 ;;      Temps:          0       0       0       0       0       0       0
  5344 ;;      Totals:         6       0       0       0       0       0       0
  5345 ;;Total ram usage:        6 bytes
  5346 ;; Hardware stack levels used:    1
  5347 ;; This function calls:
  5348 ;;		Nothing
  5349 ;; This function is called by:
  5350 ;;		i2_UART_buff_put
  5351 ;;		i2_UART_buff_get
  5352 ;; This function uses a non-reentrant model
  5353 ;;
  5354                           
  5355                           	psect	text35
  5356  000D9A                     __ptext35:
  5357                           	opt stack 0
  5358  000D9A                     i2_UART_buff_modulo_inc:
  5359                           	opt stack 21
  5360                           
  5361                           ;UART.c: 106: unsigned int my_value = value + 1;
  5362                           
  5363                           ;incstack = 0
  5364  000D9A  0E01               	movlw	1
  5365  000D9C  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  5366  000D9E  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  5367  000DA0  0E00               	movlw	0
  5368  000DA2  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  5369  000DA4  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  5370                           
  5371                           ;UART.c: 107: if (my_value >= modulus) {
  5372  000DA6  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  5373  000DA8  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  5374  000DAA  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  5375  000DAC  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  5376  000DAE  A0D8               	btfss	status,0,c
  5377  000DB0  D004               	goto	i2l2095
  5378                           
  5379                           ;UART.c: 108: my_value = 0;
  5380  000DB2  0E00               	movlw	0
  5381  000DB4  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  5382  000DB6  0E00               	movlw	0
  5383  000DB8  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  5384  000DBA                     i2l2095:
  5385                           
  5386                           ;UART.c: 109: }
  5387                           ;UART.c: 110: return (my_value);
  5388  000DBA  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  5389  000DBE  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  5390  000DC2  0012               	return	
  5391  000DC4                     __end_ofi2_UART_buff_modulo_inc:
  5392                           	opt stack 0
  5393  0000                     pclatu	equ	0xFFB
  5394                           pclath	equ	0xFFA
  5395                           tblptru	equ	0xFF8
  5396                           tblptrh	equ	0xFF7
  5397                           tblptrl	equ	0xFF6
  5398                           tablat	equ	0xFF5
  5399                           prodh	equ	0xFF4
  5400                           prodl	equ	0xFF3
  5401                           intcon	equ	0xFF2
  5402                           postinc0	equ	0xFEE
  5403                           fsr0h	equ	0xFEA
  5404                           fsr0l	equ	0xFE9
  5405                           wreg	equ	0xFE8
  5406                           indf1	equ	0xFE7
  5407                           postdec1	equ	0xFE5
  5408                           fsr1h	equ	0xFE2
  5409                           fsr1l	equ	0xFE1
  5410                           indf2	equ	0xFDF
  5411                           postinc2	equ	0xFDE
  5412                           postdec2	equ	0xFDD
  5413                           plusw2	equ	0xFDB
  5414                           fsr2h	equ	0xFDA
  5415                           fsr2l	equ	0xFD9
  5416                           status	equ	0xFD8
  5417                           pclatu	equ	0xFFB
  5418                           pclath	equ	0xFFA
  5419                           tblptru	equ	0xFF8
  5420                           tblptrh	equ	0xFF7
  5421                           tblptrl	equ	0xFF6
  5422                           tablat	equ	0xFF5
  5423                           prodh	equ	0xFF4
  5424                           prodl	equ	0xFF3
  5425                           intcon	equ	0xFF2
  5426                           postinc0	equ	0xFEE
  5427                           fsr0h	equ	0xFEA
  5428                           fsr0l	equ	0xFE9
  5429                           wreg	equ	0xFE8
  5430                           indf1	equ	0xFE7
  5431                           postdec1	equ	0xFE5
  5432                           fsr1h	equ	0xFE2
  5433                           fsr1l	equ	0xFE1
  5434                           indf2	equ	0xFDF
  5435                           postinc2	equ	0xFDE
  5436                           postdec2	equ	0xFDD
  5437                           plusw2	equ	0xFDB
  5438                           fsr2h	equ	0xFDA
  5439                           fsr2l	equ	0xFD9
  5440                           status	equ	0xFD8
  5441                           
  5442                           	psect	text36
  5443  000000                     __ptext36:
  5444                           	opt stack 0
  5445                           pclatu	equ	0xFFB
  5446                           pclath	equ	0xFFA
  5447                           tblptru	equ	0xFF8
  5448                           tblptrh	equ	0xFF7
  5449                           tblptrl	equ	0xFF6
  5450                           tablat	equ	0xFF5
  5451                           prodh	equ	0xFF4
  5452                           prodl	equ	0xFF3
  5453                           intcon	equ	0xFF2
  5454                           postinc0	equ	0xFEE
  5455                           fsr0h	equ	0xFEA
  5456                           fsr0l	equ	0xFE9
  5457                           wreg	equ	0xFE8
  5458                           indf1	equ	0xFE7
  5459                           postdec1	equ	0xFE5
  5460                           fsr1h	equ	0xFE2
  5461                           fsr1l	equ	0xFE1
  5462                           indf2	equ	0xFDF
  5463                           postinc2	equ	0xFDE
  5464                           postdec2	equ	0xFDD
  5465                           plusw2	equ	0xFDB
  5466                           fsr2h	equ	0xFDA
  5467                           fsr2l	equ	0xFD9
  5468                           status	equ	0xFD8
  5469                           
  5470                           	psect	rparam
  5471  0000                     pclatu	equ	0xFFB
  5472                           pclath	equ	0xFFA
  5473                           tblptru	equ	0xFF8
  5474                           tblptrh	equ	0xFF7
  5475                           tblptrl	equ	0xFF6
  5476                           tablat	equ	0xFF5
  5477                           prodh	equ	0xFF4
  5478                           prodl	equ	0xFF3
  5479                           intcon	equ	0xFF2
  5480                           postinc0	equ	0xFEE
  5481                           fsr0h	equ	0xFEA
  5482                           fsr0l	equ	0xFE9
  5483                           wreg	equ	0xFE8
  5484                           indf1	equ	0xFE7
  5485                           postdec1	equ	0xFE5
  5486                           fsr1h	equ	0xFE2
  5487                           fsr1l	equ	0xFE1
  5488                           indf2	equ	0xFDF
  5489                           postinc2	equ	0xFDE
  5490                           postdec2	equ	0xFDD
  5491                           plusw2	equ	0xFDB
  5492                           fsr2h	equ	0xFDA
  5493                           fsr2l	equ	0xFD9
  5494                           status	equ	0xFD8
  5495                           
  5496                           	psect	temp
  5497  000045                     btemp:
  5498                           	opt stack 0
  5499  000045                     	ds	1
  5500  0000                     int$flags	set	btemp
  5501                           pclatu	equ	0xFFB
  5502                           pclath	equ	0xFFA
  5503                           tblptru	equ	0xFF8
  5504                           tblptrh	equ	0xFF7
  5505                           tblptrl	equ	0xFF6
  5506                           tablat	equ	0xFF5
  5507                           prodh	equ	0xFF4
  5508                           prodl	equ	0xFF3
  5509                           intcon	equ	0xFF2
  5510                           postinc0	equ	0xFEE
  5511                           fsr0h	equ	0xFEA
  5512                           fsr0l	equ	0xFE9
  5513                           wreg	equ	0xFE8
  5514                           indf1	equ	0xFE7
  5515                           postdec1	equ	0xFE5
  5516                           fsr1h	equ	0xFE2
  5517                           fsr1l	equ	0xFE1
  5518                           indf2	equ	0xFDF
  5519                           postinc2	equ	0xFDE
  5520                           postdec2	equ	0xFDD
  5521                           plusw2	equ	0xFDB
  5522                           fsr2h	equ	0xFDA
  5523                           fsr2l	equ	0xFD9
  5524                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         949
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      68
    BANK0           160     26     101
    BANK1           256      0     236
    BANK2           256      0     206
    BANK3           256      0     206
    BANK4           256      0     200
    BANK5           256     70      70

Pointer List with Targets:

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 10
		 -> receiveArray(BANK0[10]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    cobs_decode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    cobs_decode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    cobs_decode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    cobs_decode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_decode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_encode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK5[30]), 

    cobs_encode@dst_code_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK5[30]), 

    cobs_encode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK5[30]), 

    cobs_encode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK5[30]), 

    cobs_encode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK5[30]), 

    cobs_encode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK5[30]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_available	PTR FTN()int  size(2) Largest target is 1
		 -> Absolute function(), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 30
		 -> CRCcheck@arrayHolder(COMRAM[3]), ProcessArray(BANK0[30]), sendData@SendArray(BANK5[30]), 


Critical Paths under _main in COMRAM

    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _sendData->_cobs_encode
    _receiveData->_cobs_decode
    _ComStart->_begin

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    _respondECU->_sendData

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   11888
                         _ReadFaults
                            _SetTime
                              _Start
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   10450
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    6463
                              _Delay
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                            77    74      3    6289
                                             13 BANK0      7     4      3
                                              0 BANK5     70    70      0
                               _CRC8
                          _GetFaults
                           _Send_put
                        _cobs_encode
 ---------------------------------------------------------------------------------
 (4) _cobs_encode                                         23    15      8    1561
                                             26 COMRAM    10     2      8
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                              0 BANK0      1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _GetFaults                                            1     1      0      62
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     174
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         12    12      0    3987
                                             14 BANK0     12    12      0
                               _CRC8
                  _Receive_available
                        _Receive_get
                        _cobs_decode
 ---------------------------------------------------------------------------------
 (3) _cobs_decode                                         24    16      8    1731
                                             26 COMRAM    10     2      8
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3     706
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (1) _Start                                                0     0      0    1438
                           _ComStart
               _INTERRUPT_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ComStart                                             0     0      0    1438
                 _EUSART1_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (3) _begin                                               13     0     13     616
                                              0 BANK0     13     0     13
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0     822
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (4) _UART_buff_init                                       2     0      2     822
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     672
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _SetTime                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadFaults                                           1     1      0       0
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ReadFaults
   _SetTime
   _Start
     _ComStart
       _EUSART1_Initialize
         _UART_buff_init
           _memset
       _begin
     _INTERRUPT_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _updateComms
     _receiveData
       _CRC8
       _Receive_available
         _UART_buff_size
       _Receive_get
         _UART_buff_get
           _UART_buff_modulo_inc
       _cobs_decode
     _respondECU
       _Delay
       _sendData
         _CRC8
         _GetFaults
         _Send_put
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _cobs_encode

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100     46      46      15       27.3%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      C8      13       78.1%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      EC       6       92.2%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1A      65       4       63.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      44       1       72.3%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     43F       9        0.0%
DATA                 0      0     43F      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Mar 26 01:00:44 2017

             i2_UART_buff_modulo_inc 0D9A             cobs_encode@dst_write_ptr 00AF  
                       _rx_array_inx 0042                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                                  l124 0C24  
                                l289 0A26                                  l465 0CCC  
                       __CFG_CPB$OFF 000000                                  u500 08E8  
                                u510 0900                                  u600 0974  
                                u520 091C                                  u610 0988  
                                u530 0930                         __CFG_CPD$OFF 000000  
                                u508 08EA                                  u550 0942  
                                u518 0902                                  u608 0976  
                                u528 091E                                  u480 08C4  
                                u545 0932                                  u618 098A  
                                u570 0954                                  u490 08D4  
                                u565 0944                                  u590 0964  
                                u486 08C6                                  u585 0956  
                                u498 08D6                                  u596 0966  
                                wreg 000FE8        i2UART_buff_modulo_inc@modulus 0003  
        _COBS_DECODE_DST_BUF_LEN_MAX 00C1                         __CFG_LVP$OFF 000000  
                               l2413 0BF8                                 l2407 0A22  
                               l2511 0566                                 l2503 0538  
                               l2419 0C0E                                 l2427 0C2A  
                               l2429 0C30                                 l2381 0D90  
                               l2605 0126                                 l2509 055A  
                               l2461 0480                                 l2453 0464  
                               l2623 01A2                                 l2615 0166  
                               l2439 0E74                                 l2625 01A6  
                               l2393 0624                                 l2465 049A  
                               l2561 0338                                 l2387 05B8  
                               l2483 04E8                                 l2459 0478  
                               l2637 01D0                                 l2645 01E8  
                               l2573 03D6                                 l2565 0386  
                               l1791 0D5E                                 l2655 021C  
                               l1953 0CB8                                 l2569 03BA  
                               l2761 0E3E                                 l1787 0D4E  
                               l2659 0230                                 l2595 00FC  
                               l2675 07FA                                 l2597 0104  
                               l2589 00E8                                 l2695 08B8  
                               _CRC8 0BF2                                 u2027 0CBE  
                               u2037 0818                                 u1590 09B6  
                               u1890 07E0                                 _main 0E38  
                    _TMR0_StartTimer 0EF6                                 _time 0060  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf1 000FE7                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 0045                        __CFG_BORV$190 000000  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00A0                        __CFG_IESO$OFF 000000  
                       ___param_bank 000000       i2UART_buff_modulo_inc@my_value 0005  
                              ?_CRC8 001B                      __end_of_SetTime 0ED4  
            __end_of_TMR0_Initialize 0DE2                                ?_main 0001  
                              _T0CON 000FD5                       __CFG_DEBUG$OFF 000000  
                              i2l320 0E08                                i2l462 0064  
                              i2l456 004E                                i2l289 0AB8  
                              i2l458 005A                                _TMR0H 000FD7  
                              _TMR0L 000FD6                                _Delay 0CAE  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
               _EUSART1_Transmit_ISR 0CE2                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                   __end_of_TMR0_ISR 0E38                                _Start 0B9C  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                                _begin 0EFA  
                     __CFG_EBTRB$OFF 000000                                _group 002A  
                 __CFG_MCLRE$EXTMCLR 000000                                pclath 000FFA  
                              tablat 000FF5                        ??_Receive_get 0026  
                      receiveData@CS 00BA                                plusw2 000FDB  
                     begin@stuffpeek 00B2                                status 000FD8  
                     __CFG_HFOFST$ON 000000                         ?_receiveData 0001  
                     __CFG_PBADEN$ON 000000                         __end_of_CRC8 0C3C  
                   __end_of_ComStart 0B9C                           _ReadFaults 08BC  
                    __initialization 0ABC           __end_of_EUSART1_Initialize 0C78  
                       __end_of_main 0E50                               ??_CRC8 001E  
        ?_INTERRUPT_InterruptManager 0001                   __size_of_GetFaults 0016  
                             ??_main 0026                        __activetblptr 000002  
                   __end_of_Send_put 0D44            __size_ofi2_UART_buff_size 0016  
                             ?_Delay 001B                ?_EUSART1_Transmit_ISR 0001  
                             ?_Start 0001                               ?_begin 00A7  
            __end_of_TMR0_StartTimer 0EFA                 __size_of_cobs_decode 01BE  
               __size_of_cobs_encode 0198                               _ANSELA 000F38  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                    i2_UART_buff_get 0A2A                               _RC1STA 000FAB  
                             i2l2151 073E                      i2_UART_buff_put 06B2  
                             i2l2145 06D2                               i2l2165 0AB4  
                             i2l2237 0D0C                               i2l2095 0DBA  
                     __CFG_WDTEN$OFF 000000                               Delay@x 001E  
        UART_buff_modulo_inc@modulus 001D                               _RCREG1 000FAE  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _TX1STA 000FAC                               _TXREG1 000FAD  
                          ??_SetTime 001B                       __CFG_XINST$OFF 000000  
                __end_of_Receive_get 0EF2                        _output_buffer 0200  
                          CRC8@tempI 0020                       __CFG_STVREN$ON 000000  
                   ?_TMR0_Initialize 0001                               _memset 0D44  
                             clear_0 0AF4                               clear_1 0B00  
                             clear_2 0B0C                               clear_3 0B18  
                             clear_4 0B24                               clear_5 0B30  
                             _rx_len 0043                     __end_of_sendData 0400  
                       __pdataCOMRAM 0044               cobs_encode@dst_buf_len 001D  
             cobs_encode@dst_buf_ptr 001B                        Send_put@_data 00A7  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8         __end_of_UART_buff_modulo_inc 0D9A  
      __size_of_INTERRUPT_Initialize 0018                           __accesstop 0060  
            __end_of__initialization 0B36                        sendData@count 0544  
                  __end_of_GetFaults 0E7E                        ___rparam_used 000001  
            ?i2_UART_buff_modulo_inc 0001                         ?_updateComms 0001  
                      __end_of_Delay 0CE2                          ?_ReadFaults 0001  
                     __pcstackCOMRAM 0001                        __end_of_Start 0BF2  
                       __pidataBANK0 0EF2                        __end_of_begin 0EFC  
                          ?_TMR0_ISR 0001                   UART_buff_get@_this 0021  
              __end_of_UART_buff_get 0A2A               ??_EUSART1_Transmit_ISR 000C  
              __end_of_UART_buff_put 06B2                              ??_Delay 001D  
            __end_ofi2_UART_buff_get 0ABC              __end_ofi2_UART_buff_put 07CC  
        __end_of_EUSART1_Receive_ISR 0E1E                              CRC8@crc 0021  
                            CRC8@len 001D                              ??_Start 0025  
                            CRC8@sum 001E                            ?_ComStart 0001  
                            ??_begin 001B                     ?_TMR0_StartTimer 0001  
                _addressErrorCounter 006A               cobs_decode@dst_buf_len 001D  
                         __pbssBANK0 0060                           __pbssBANK1 0100  
                         __pbssBANK2 0200                           __pbssBANK3 0300  
                         __pbssBANK4 0400               cobs_decode@dst_buf_ptr 001B  
                    __CFG_PLLCFG$OFF 000000                          _Receive_get 0EE4  
     __end_ofi2_UART_buff_modulo_inc 0DC4                    begin@givenAddress 00AA  
            __size_of_UART_buff_init 001E                          _ReciveArray 01CE  
            __size_of_UART_buff_size 0016                            ?_Send_put 0001  
               __size_of_receiveData 00F0                   __CFG_CCP2MX$PORTC1 000000  
                         ??_TMR0_ISR 0001                   __CFG_CCP3MX$PORTB5 000000  
           cobs_decode@dst_write_ptr 00AF           cobs_decode@remaining_bytes 00AD  
                            ?_memset 001B                           _crc_buffer 008C  
                 UART_buff_put@_this 0021                      cobs_decode@F198 0064  
                   i2_UART_buff_size 0EAA          i2UART_buff_modulo_inc@value 0001  
                            _OSCCON2 000FD2                    _Receive_available 0E7E  
       UART_buff_modulo_inc@my_value 001F                    __CFG_PRICLKEN$OFF 000000  
                            _OSCTUNE 000F9B                              _SPBRGH1 000FB0  
                         ??_ComStart 0025                  sendData@whereToSend 053C  
                _receiveArrayAddress 002C                  __size_of_ReadFaults 00DC  
                 ?_Receive_available 001D                           begin@error 00AB  
                            _ByteLow 003C                  ??_Receive_available 001F  
                          ?_sendData 00B4                    _alignErrorCounter 0026  
                    __CFG_PWRTEN$OFF 000000                           ??_Send_put 0026  
                            __Hparam 0000                              _SetTime 0EC0  
                            __Lparam 0000               cobs_encode@src_end_ptr 00A7  
                          _AKNAKsend 003A                 _UART_buff_modulo_inc 0D70  
                            _calc_CS 003D                              __pcinit 0ABC  
                    __size_of_memset 002C                              __ramtop 0600  
                   i2UART_buff_get@c 000B                              __ptext0 0E38  
                            __ptext1 0ED4                              __ptext2 0C78  
                            __ptext3 0262                              __ptext4 0400  
                            __ptext5 0D14                              __ptext6 0598  
                            __ptext7 0E68                              __ptext8 0CAE  
                            __ptext9 07CC                            _T0CONbits 000FD5  
                   i2UART_buff_put@c 0009           cobs_encode@dst_buf_end_ptr 00AA  
          __end_of_Receive_available 0E94                  cobs_encode@src_byte 00A9  
                 _EUSART1_Initialize 0C3C                     ?i2_UART_buff_get 0007  
                   ?i2_UART_buff_put 0007                 end_of_initialization 0B36  
                          Delay@wait 001B                  ?_EUSART1_Initialize 0001  
                    cobs_encode@F186 0067                              memset@c 001D  
                            memset@n 001F                              memset@p 0021  
                      __Lmediumconst 0000                           ??_sendData 00B7  
                    receiveData@Data 00C0                ?_UART_buff_modulo_inc 001B  
               __size_of_updateComms 0010                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                           _respondECU 0C78  
                   begin@stufftosend 00AC                 ??_EUSART1_Initialize 0025  
                  cobs_decode@result 00B2               cobs_decode@src_end_ptr 00A7  
                          _PORTAbits 000F80                            _PORTCbits 000F82  
                          _PORTDbits 000F83               _dataAdressErrorCounter 006C  
                         _rx_address 0041                        ??_cobs_decode 0023  
                      ??_cobs_encode 0023                            _TRISAbits 000F92  
                          _TRISCbits 000F94                            _TRISDbits 000F95  
                     sendData@result 053F                         begin@maxSize 00A9  
              i2UART_buff_size@_this 0001                       _UART_buff_init 0DE2  
                     _UART_buff_size 0E94                         ??_ReadFaults 001B  
                          _GetFaults 0E68                        _moduleAddress 003F  
               _timer0ReloadVal16bit 0038         __end_of_INTERRUPT_Initialize 0E68  
                    _crcErrorCounter 0028                        __pidataCOMRAM 0EFC  
                  __size_of_TMR0_ISR 001A                       __end_of_memset 0D70  
                       receiveData@i 00BE           __size_of_Receive_available 0016  
                start_initialization 0ABC             __size_of_TMR0_Initialize 001E  
                 __end_of_ReadFaults 0998                  __end_of_cobs_decode 0262  
                  __size_of_ComStart 0058               __end_of_UART_buff_init 0E00  
                     UART_buff_get@c 0025               __end_of_UART_buff_size 0EAA  
                __end_of_cobs_encode 0598                         ?_Receive_get 0001  
                     UART_buff_put@c 0023             __end_ofi2_UART_buff_size 0EC0  
             ??_UART_buff_modulo_inc 001F                           ?_GetFaults 0001  
                           CRC8@data 001B                    __size_of_Send_put 0030  
                        ?_respondECU 0001                          __pdataBANK0 00C1  
                           ??_memset 0021                          __pbssCOMRAM 0026  
      __size_of_EUSART1_Transmit_ISR 0032                        __pcstackBANK0 00A7  
                      __pcstackBANK5 0500                         _Receive_peek 000000  
                UART_buff_init@_this 0023                      ?_UART_buff_init 0023  
                    ?_UART_buff_size 001B         __size_of_EUSART1_Receive_ISR 001E  
                      ??_receiveData 00B5                           sendData@CS 053E  
              cobs_encode@search_len 00AC             __size_of_TMR0_StartTimer 0004  
             __size_of_UART_buff_get 0092               __size_of_UART_buff_put 011A  
                           ?_SetTime 0001                    __size_of_sendData 019E  
                       GetFaults@num 001B                            __pintcode 0008  
       ??_INTERRUPT_InterruptManager 000D                 i2UART_buff_get@_this 0007  
                           _BAUD1CON 000FB8                       __size_of_Delay 0034  
                        _cobs_decode 00A4                          _cobs_encode 0400  
             sendData@DataTableIndex 00B6                       __size_of_Start 0056  
                     __size_of_begin 0002          _COBS_ENCODE_DST_BUF_LEN_MAX 00C3  
                __size_of_respondECU 0036                 _INTERRUPT_Initialize 0E50  
                 cobs_encode@src_len 0021                   cobs_encode@src_ptr 001F  
                       _receiveArray 009D                    ??_TMR0_Initialize 001B  
                           _LATAbits 000F89                             _LATDbits 000F8C  
                UART_buff_size@_this 001B                             _IPR1bits 000F9F  
                           _IPR2bits 000FA2                             _PIE1bits 000F9D  
                           i2u126_40 0A48                             i2u134_40 0CFC  
__size_of_INTERRUPT_InterruptManager 0098                             _PIR1bits 000F9E  
                        ??_GetFaults 001B                  begin@stuffavailable 00B0  
                           _RCONbits 000FD0                     __CFG_WDTPS$32768 000000  
                __end_of_receiveData 08BC                             _TMR0_ISR 0E1E  
                       _input_buffer 0100                            _rx_buffer 0400  
         cobs_decode@dst_buf_end_ptr 00A9                 i2UART_buff_put@_this 0007  
                      _UART_buff_get 0998                        _UART_buff_put 0598  
                  sendData@COBSArray 0500        cobs_encode@dst_code_write_ptr 00AD  
                           _ComStart 0B44             ??i2_UART_buff_modulo_inc 0005  
                          copy_data0 0AD0                ?_INTERRUPT_Initialize 0001  
                 sendData@ComandByte 00B4                    _sendStructAddress 002E  
                           _ByteHigh 003B             __size_ofi2_UART_buff_get 0092  
           __size_ofi2_UART_buff_put 011A                        ??_updateComms 0026  
               __size_of_Receive_get 000E                             __Hrparam 0000  
                           _Send_put 0D14                             __Lrparam 0000  
                 __CFG_BOREN$SBORDIS 000000                     __size_of_SetTime 0014  
                  __CFG_P2BMX$PORTD2 000000                    ??_TMR0_StartTimer 001B  
        __size_of_EUSART1_Initialize 003C                  begin@stufftoreceive 00AE  
                     ?_UART_buff_get 0021                       ?_UART_buff_put 0021  
                        CRC8@extract 001F                            sendData@i 0542  
                           __ptext10 00A4                             __ptext11 0EE4  
                           __ptext20 0E50                             __ptext12 0998  
                           __ptext21 0B44                             __ptext13 0D70  
                           __ptext30 0CE2                             __ptext22 0EFA  
                           __ptext14 0E7E                             __ptext31 0EAA  
                           __ptext23 0C3C                             __ptext15 0E94  
                           __ptext32 0A2A                             __ptext24 0DE2  
                           __ptext16 0BF2                             __ptext33 0E00  
                           __ptext25 0D44                             __ptext17 0B9C  
                           __ptext34 06B2                             __ptext26 0EC0  
                           __ptext18 0DC4                             __ptext35 0D9A  
                           __ptext27 08BC                             __ptext19 0EF6  
                           __ptext36 0000                             __ptext29 0E1E  
                      __size_of_CRC8 004A                             begin@ptr 00A7  
            EUSART1_Receive_ISR@data 000C                        _returnAddress 0040  
                      __size_of_main 0018                    cobs_encode@result 00B1  
                        _receiveData 07CC                       _Transmit_stall 0044  
                           _sendData 0262                    ?i2_UART_buff_size 0001  
                  sendData@DataLenth 053D                    sendData@DataTable 00B5  
                         _RC1STAbits 000FAB                         ??_respondECU 0026  
                       _ProcessArray 006E                   ??i2_UART_buff_size 0003  
                           int$flags 0045                         _serial_write 0036  
                __end_of_updateComms 0EE4   __end_of_INTERRUPT_InterruptManager 00A0  
         _INTERRUPT_InterruptManager 0008                  _EUSART1_Receive_ISR 0E00  
                  receiveData@result 00BB                           _INTCONbits 000FF2  
          UART_buff_modulo_inc@value 001B                     ??_UART_buff_init 0025  
                   ??_UART_buff_size 001D               ??_INTERRUPT_Initialize 001B  
                           memset@p1 001B                     _serial_available 0030  
    __size_ofi2_UART_buff_modulo_inc 002A                             intlevel2 0000  
                cobs_decode@len_code 00B1                   __end_of_respondECU 0CAE  
               ?_EUSART1_Receive_ISR 0001                         cobs_decode@i 00AC  
       __end_of_EUSART1_Transmit_ISR 0D14                          _ring_buffer 0300  
                  sendData@SendArray 051E                    ??i2_UART_buff_get 0009  
                        _serial_peek 0032                          _serial_read 0034  
                  ??i2_UART_buff_put 000A                  cobs_decode@src_byte 00AB  
      __size_of_UART_buff_modulo_inc 002A                      ??_UART_buff_get 0023  
                    ??_UART_buff_put 0024                      _TMR0_Initialize 0DC4  
                       ?_cobs_decode 001B                         ?_cobs_encode 001B  
                  __CFG_T3CMX$PORTC0 000000                       _maxDataAddress 003E  
                 cobs_decode@src_len 0021                   cobs_decode@src_ptr 001F  
              ??_EUSART1_Receive_ISR 000C                    __CFG_FOSC$INTIO67 000000  
                        _updateComms 0ED4  
